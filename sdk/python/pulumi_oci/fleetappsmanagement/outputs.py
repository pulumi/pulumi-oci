# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'CatalogItemCatalogResultPayload',
    'CatalogItemCatalogSourcePayload',
    'CompliancePolicyRulePatchSelection',
    'CompliancePolicyRuleProductVersion',
    'FleetCredential',
    'FleetCredentialEntitySpecifics',
    'FleetCredentialEntitySpecificsVariable',
    'FleetCredentialPassword',
    'FleetCredentialUser',
    'FleetDetails',
    'FleetNotificationPreference',
    'FleetNotificationPreferencePreferences',
    'FleetNotificationPreferencePreferencesUpcomingSchedule',
    'FleetProperty',
    'FleetResource',
    'FleetResourceSelection',
    'FleetResourceSelectionRuleSelectionCriteria',
    'FleetResourceSelectionRuleSelectionCriteriaRule',
    'FleetResourceSelectionRuleSelectionCriteriaRuleCondition',
    'OnboardingAppliedPolicy',
    'PatchArtifactDetails',
    'PatchArtifactDetailsArtifact',
    'PatchArtifactDetailsArtifactContent',
    'PatchDependentPatch',
    'PatchPatchType',
    'PatchProduct',
    'PlatformConfigurationConfigCategoryDetails',
    'PlatformConfigurationConfigCategoryDetailsCompatibleProduct',
    'PlatformConfigurationConfigCategoryDetailsCredential',
    'PlatformConfigurationConfigCategoryDetailsPatchType',
    'PlatformConfigurationConfigCategoryDetailsProduct',
    'PlatformConfigurationConfigCategoryDetailsSubCategoryDetails',
    'PlatformConfigurationConfigCategoryDetailsSubCategoryDetailsCredential',
    'PlatformConfigurationConfigCategoryDetailsSubCategoryDetailsPatchType',
    'ProvisionDeployedResource',
    'ProvisionDeployedResourceResourceInstanceList',
    'ProvisionTfOutput',
    'RunbookRunbookVersion',
    'RunbookRunbookVersionExecutionWorkflowDetails',
    'RunbookRunbookVersionExecutionWorkflowDetailsWorkflow',
    'RunbookRunbookVersionExecutionWorkflowDetailsWorkflowStep',
    'RunbookRunbookVersionGroup',
    'RunbookRunbookVersionGroupProperties',
    'RunbookRunbookVersionGroupPropertiesNotificationPreferences',
    'RunbookRunbookVersionGroupPropertiesPauseDetails',
    'RunbookRunbookVersionGroupPropertiesRunOn',
    'RunbookRunbookVersionGroupPropertiesRunOnPreviousTaskInstanceDetail',
    'RunbookRunbookVersionGroupPropertiesRunOnPreviousTaskInstanceDetailOutputVariableDetails',
    'RunbookRunbookVersionRollbackWorkflowDetails',
    'RunbookRunbookVersionRollbackWorkflowDetailsWorkflow',
    'RunbookRunbookVersionRollbackWorkflowDetailsWorkflowStep',
    'RunbookRunbookVersionTask',
    'RunbookRunbookVersionTaskOutputVariableMapping',
    'RunbookRunbookVersionTaskOutputVariableMappingOutputVariableDetails',
    'RunbookRunbookVersionTaskStepProperties',
    'RunbookRunbookVersionTaskStepPropertiesNotificationPreferences',
    'RunbookRunbookVersionTaskStepPropertiesPauseDetails',
    'RunbookRunbookVersionTaskStepPropertiesRunOn',
    'RunbookRunbookVersionTaskStepPropertiesRunOnPreviousTaskInstanceDetail',
    'RunbookRunbookVersionTaskStepPropertiesRunOnPreviousTaskInstanceDetailOutputVariableDetails',
    'RunbookRunbookVersionTaskTaskRecordDetails',
    'RunbookRunbookVersionTaskTaskRecordDetailsExecutionDetails',
    'RunbookRunbookVersionTaskTaskRecordDetailsExecutionDetailsContent',
    'RunbookRunbookVersionTaskTaskRecordDetailsExecutionDetailsCredential',
    'RunbookRunbookVersionTaskTaskRecordDetailsExecutionDetailsVariables',
    'RunbookRunbookVersionTaskTaskRecordDetailsExecutionDetailsVariablesInputVariable',
    'RunbookRunbookVersionTaskTaskRecordDetailsProperties',
    'RunbookVersionExecutionWorkflowDetails',
    'RunbookVersionExecutionWorkflowDetailsWorkflow',
    'RunbookVersionExecutionWorkflowDetailsWorkflowStep',
    'RunbookVersionGroup',
    'RunbookVersionGroupProperties',
    'RunbookVersionGroupPropertiesNotificationPreferences',
    'RunbookVersionGroupPropertiesPauseDetails',
    'RunbookVersionGroupPropertiesRunOn',
    'RunbookVersionGroupPropertiesRunOnPreviousTaskInstanceDetail',
    'RunbookVersionGroupPropertiesRunOnPreviousTaskInstanceDetailOutputVariableDetails',
    'RunbookVersionRollbackWorkflowDetails',
    'RunbookVersionRollbackWorkflowDetailsWorkflow',
    'RunbookVersionRollbackWorkflowDetailsWorkflowStep',
    'RunbookVersionTask',
    'RunbookVersionTaskOutputVariableMapping',
    'RunbookVersionTaskOutputVariableMappingOutputVariableDetails',
    'RunbookVersionTaskStepProperties',
    'RunbookVersionTaskStepPropertiesNotificationPreferences',
    'RunbookVersionTaskStepPropertiesPauseDetails',
    'RunbookVersionTaskStepPropertiesRunOn',
    'RunbookVersionTaskStepPropertiesRunOnPreviousTaskInstanceDetail',
    'RunbookVersionTaskStepPropertiesRunOnPreviousTaskInstanceDetailOutputVariableDetails',
    'RunbookVersionTaskTaskRecordDetails',
    'RunbookVersionTaskTaskRecordDetailsExecutionDetails',
    'RunbookVersionTaskTaskRecordDetailsExecutionDetailsContent',
    'RunbookVersionTaskTaskRecordDetailsExecutionDetailsCredential',
    'RunbookVersionTaskTaskRecordDetailsExecutionDetailsVariables',
    'RunbookVersionTaskTaskRecordDetailsExecutionDetailsVariablesInputVariable',
    'RunbookVersionTaskTaskRecordDetailsProperties',
    'SchedulerDefinitionActionGroup',
    'SchedulerDefinitionRunBook',
    'SchedulerDefinitionRunBookInputParameter',
    'SchedulerDefinitionRunBookInputParameterArgument',
    'SchedulerDefinitionRunBookInputParameterArgumentContent',
    'SchedulerDefinitionSchedule',
    'TaskRecordDetails',
    'TaskRecordDetailsExecutionDetails',
    'TaskRecordDetailsExecutionDetailsContent',
    'TaskRecordDetailsExecutionDetailsCredential',
    'TaskRecordDetailsExecutionDetailsVariables',
    'TaskRecordDetailsExecutionDetailsVariablesInputVariable',
    'TaskRecordDetailsProperties',
    'GetAnnouncementsAnnouncementCollectionResult',
    'GetAnnouncementsAnnouncementCollectionItemResult',
    'GetAnnouncementsFilterResult',
    'GetCatalogItemCatalogResultPayloadResult',
    'GetCatalogItemCatalogSourcePayloadResult',
    'GetCatalogItemsCatalogItemCollectionResult',
    'GetCatalogItemsCatalogItemCollectionItemResult',
    'GetCatalogItemsCatalogItemCollectionItemCatalogResultPayloadResult',
    'GetCatalogItemsCatalogItemCollectionItemCatalogSourcePayloadResult',
    'GetCatalogItemsFilterResult',
    'GetCompliancePoliciesCompliancePolicyCollectionResult',
    'GetCompliancePoliciesCompliancePolicyCollectionItemResult',
    'GetCompliancePoliciesFilterResult',
    'GetCompliancePolicyRulePatchSelectionResult',
    'GetCompliancePolicyRuleProductVersionResult',
    'GetCompliancePolicyRulesCompliancePolicyRuleCollectionResult',
    'GetCompliancePolicyRulesCompliancePolicyRuleCollectionItemResult',
    'GetCompliancePolicyRulesCompliancePolicyRuleCollectionItemPatchSelectionResult',
    'GetCompliancePolicyRulesCompliancePolicyRuleCollectionItemProductVersionResult',
    'GetCompliancePolicyRulesFilterResult',
    'GetComplianceRecordCountsComplianceRecordAggregationCollectionResult',
    'GetComplianceRecordCountsComplianceRecordAggregationCollectionItemResult',
    'GetComplianceRecordCountsComplianceRecordAggregationCollectionItemDimensionResult',
    'GetComplianceRecordCountsFilterResult',
    'GetComplianceRecordsComplianceRecordCollectionResult',
    'GetComplianceRecordsComplianceRecordCollectionItemResult',
    'GetComplianceRecordsComplianceRecordCollectionItemPatchResult',
    'GetComplianceRecordsComplianceRecordCollectionItemPatchProductResult',
    'GetComplianceRecordsComplianceRecordCollectionItemPolicyResult',
    'GetComplianceRecordsComplianceRecordCollectionItemPolicyPatchSelectionResult',
    'GetComplianceRecordsComplianceRecordCollectionItemResourceResult',
    'GetComplianceRecordsComplianceRecordCollectionItemTargetResult',
    'GetComplianceRecordsFilterResult',
    'GetFleetComplianceReportResourceResult',
    'GetFleetComplianceReportResourceProductResult',
    'GetFleetComplianceReportResourceProductTargetResult',
    'GetFleetComplianceReportResourceProductTargetInstalledPatchResult',
    'GetFleetComplianceReportResourceProductTargetRecommendedPatchResult',
    'GetFleetCredentialResult',
    'GetFleetCredentialEntitySpecificResult',
    'GetFleetCredentialEntitySpecificVariableResult',
    'GetFleetCredentialPasswordResult',
    'GetFleetCredentialUserResult',
    'GetFleetCredentialsFilterResult',
    'GetFleetCredentialsFleetCredentialCollectionResult',
    'GetFleetCredentialsFleetCredentialCollectionItemResult',
    'GetFleetCredentialsFleetCredentialCollectionItemEntitySpecificResult',
    'GetFleetCredentialsFleetCredentialCollectionItemEntitySpecificVariableResult',
    'GetFleetCredentialsFleetCredentialCollectionItemPasswordResult',
    'GetFleetCredentialsFleetCredentialCollectionItemUserResult',
    'GetFleetDetailResult',
    'GetFleetNotificationPreferenceResult',
    'GetFleetNotificationPreferencePreferenceResult',
    'GetFleetNotificationPreferencePreferenceUpcomingScheduleResult',
    'GetFleetProductsFilterResult',
    'GetFleetProductsFleetProductCollectionResult',
    'GetFleetProductsFleetProductCollectionItemResult',
    'GetFleetProductsFleetProductCollectionItemResourceResult',
    'GetFleetPropertiesFilterResult',
    'GetFleetPropertiesFleetPropertyCollectionResult',
    'GetFleetPropertiesFleetPropertyCollectionItemResult',
    'GetFleetPropertyResult',
    'GetFleetResourceResult',
    'GetFleetResourceSelectionResult',
    'GetFleetResourceSelectionRuleSelectionCriteriaResult',
    'GetFleetResourceSelectionRuleSelectionCriteriaRuleResult',
    'GetFleetResourceSelectionRuleSelectionCriteriaRuleConditionResult',
    'GetFleetResourcesFilterResult',
    'GetFleetResourcesFleetResourceCollectionResult',
    'GetFleetResourcesFleetResourceCollectionItemResult',
    'GetFleetTargetsFilterResult',
    'GetFleetTargetsFleetTargetCollectionResult',
    'GetFleetTargetsFleetTargetCollectionItemResult',
    'GetFleetTargetsFleetTargetCollectionItemResourceResult',
    'GetFleetsFilterResult',
    'GetFleetsFleetCollectionResult',
    'GetFleetsFleetCollectionItemResult',
    'GetFleetsFleetCollectionItemCredentialResult',
    'GetFleetsFleetCollectionItemCredentialEntitySpecificResult',
    'GetFleetsFleetCollectionItemCredentialEntitySpecificVariableResult',
    'GetFleetsFleetCollectionItemCredentialPasswordResult',
    'GetFleetsFleetCollectionItemCredentialUserResult',
    'GetFleetsFleetCollectionItemDetailResult',
    'GetFleetsFleetCollectionItemNotificationPreferenceResult',
    'GetFleetsFleetCollectionItemNotificationPreferencePreferenceResult',
    'GetFleetsFleetCollectionItemNotificationPreferencePreferenceUpcomingScheduleResult',
    'GetFleetsFleetCollectionItemPropertyResult',
    'GetFleetsFleetCollectionItemResourceResult',
    'GetFleetsFleetCollectionItemResourceSelectionResult',
    'GetFleetsFleetCollectionItemResourceSelectionRuleSelectionCriteriaResult',
    'GetFleetsFleetCollectionItemResourceSelectionRuleSelectionCriteriaRuleResult',
    'GetFleetsFleetCollectionItemResourceSelectionRuleSelectionCriteriaRuleConditionResult',
    'GetInventoryRecordsFilterResult',
    'GetInventoryRecordsInventoryRecordCollectionResult',
    'GetInventoryRecordsInventoryRecordCollectionItemResult',
    'GetInventoryRecordsInventoryRecordCollectionItemComponentResult',
    'GetInventoryRecordsInventoryRecordCollectionItemComponentPropertyResult',
    'GetInventoryRecordsInventoryRecordCollectionItemInstalledPatchResult',
    'GetInventoryRecordsInventoryRecordCollectionItemPropertyResult',
    'GetInventoryResourcesFilterResult',
    'GetInventoryResourcesInventoryResourceCollectionResult',
    'GetInventoryResourcesInventoryResourceCollectionItemResult',
    'GetMaintenanceWindowsFilterResult',
    'GetMaintenanceWindowsMaintenanceWindowCollectionResult',
    'GetMaintenanceWindowsMaintenanceWindowCollectionItemResult',
    'GetManagedEntityCountsFilterResult',
    'GetManagedEntityCountsManagedEntityAggregationCollectionResult',
    'GetManagedEntityCountsManagedEntityAggregationCollectionItemResult',
    'GetManagedEntityCountsManagedEntityAggregationCollectionItemDimensionResult',
    'GetOnboardingPoliciesFilterResult',
    'GetOnboardingPoliciesOnboardingPolicyCollectionResult',
    'GetOnboardingPoliciesOnboardingPolicyCollectionItemResult',
    'GetOnboardingsFilterResult',
    'GetOnboardingsOnboardingCollectionResult',
    'GetOnboardingsOnboardingCollectionItemResult',
    'GetOnboardingsOnboardingCollectionItemAppliedPolicyResult',
    'GetPatchArtifactDetailResult',
    'GetPatchArtifactDetailArtifactResult',
    'GetPatchArtifactDetailArtifactContentResult',
    'GetPatchDependentPatchResult',
    'GetPatchPatchTypeResult',
    'GetPatchProductResult',
    'GetPatchesFilterResult',
    'GetPatchesPatchCollectionResult',
    'GetPatchesPatchCollectionItemResult',
    'GetPatchesPatchCollectionItemArtifactDetailResult',
    'GetPatchesPatchCollectionItemArtifactDetailArtifactResult',
    'GetPatchesPatchCollectionItemArtifactDetailArtifactContentResult',
    'GetPatchesPatchCollectionItemDependentPatchResult',
    'GetPatchesPatchCollectionItemPatchTypeResult',
    'GetPatchesPatchCollectionItemProductResult',
    'GetPlatformConfigurationConfigCategoryDetailResult',
    'GetPlatformConfigurationConfigCategoryDetailCompatibleProductResult',
    'GetPlatformConfigurationConfigCategoryDetailCredentialResult',
    'GetPlatformConfigurationConfigCategoryDetailPatchTypeResult',
    'GetPlatformConfigurationConfigCategoryDetailProductResult',
    'GetPlatformConfigurationConfigCategoryDetailSubCategoryDetailResult',
    'GetPlatformConfigurationConfigCategoryDetailSubCategoryDetailCredentialResult',
    'GetPlatformConfigurationConfigCategoryDetailSubCategoryDetailPatchTypeResult',
    'GetPlatformConfigurationsFilterResult',
    'GetPlatformConfigurationsPlatformConfigurationCollectionResult',
    'GetPlatformConfigurationsPlatformConfigurationCollectionItemResult',
    'GetPlatformConfigurationsPlatformConfigurationCollectionItemConfigCategoryDetailResult',
    'GetPlatformConfigurationsPlatformConfigurationCollectionItemConfigCategoryDetailCompatibleProductResult',
    'GetPlatformConfigurationsPlatformConfigurationCollectionItemConfigCategoryDetailCredentialResult',
    'GetPlatformConfigurationsPlatformConfigurationCollectionItemConfigCategoryDetailPatchTypeResult',
    'GetPlatformConfigurationsPlatformConfigurationCollectionItemConfigCategoryDetailProductResult',
    'GetPlatformConfigurationsPlatformConfigurationCollectionItemConfigCategoryDetailSubCategoryDetailResult',
    'GetPlatformConfigurationsPlatformConfigurationCollectionItemConfigCategoryDetailSubCategoryDetailCredentialResult',
    'GetPlatformConfigurationsPlatformConfigurationCollectionItemConfigCategoryDetailSubCategoryDetailPatchTypeResult',
    'GetPropertiesFilterResult',
    'GetPropertiesPropertyCollectionResult',
    'GetPropertiesPropertyCollectionItemResult',
    'GetProvisionDeployedResourceResult',
    'GetProvisionDeployedResourceResourceInstanceListResult',
    'GetProvisionTfOutputResult',
    'GetProvisionsFilterResult',
    'GetProvisionsProvisionCollectionResult',
    'GetProvisionsProvisionCollectionItemResult',
    'GetProvisionsProvisionCollectionItemDeployedResourceResult',
    'GetProvisionsProvisionCollectionItemDeployedResourceResourceInstanceListResult',
    'GetProvisionsProvisionCollectionItemTfOutputResult',
    'GetRunbookRunbookVersionResult',
    'GetRunbookRunbookVersionExecutionWorkflowDetailResult',
    'GetRunbookRunbookVersionExecutionWorkflowDetailWorkflowResult',
    'GetRunbookRunbookVersionExecutionWorkflowDetailWorkflowStepResult',
    'GetRunbookRunbookVersionGroupResult',
    'GetRunbookRunbookVersionGroupPropertyResult',
    'GetRunbookRunbookVersionGroupPropertyNotificationPreferenceResult',
    'GetRunbookRunbookVersionGroupPropertyPauseDetailResult',
    'GetRunbookRunbookVersionGroupPropertyRunOnResult',
    'GetRunbookRunbookVersionGroupPropertyRunOnPreviousTaskInstanceDetailResult',
    'GetRunbookRunbookVersionGroupPropertyRunOnPreviousTaskInstanceDetailOutputVariableDetailResult',
    'GetRunbookRunbookVersionRollbackWorkflowDetailResult',
    'GetRunbookRunbookVersionRollbackWorkflowDetailWorkflowResult',
    'GetRunbookRunbookVersionRollbackWorkflowDetailWorkflowStepResult',
    'GetRunbookRunbookVersionTaskResult',
    'GetRunbookRunbookVersionTaskOutputVariableMappingResult',
    'GetRunbookRunbookVersionTaskOutputVariableMappingOutputVariableDetailResult',
    'GetRunbookRunbookVersionTaskStepPropertyResult',
    'GetRunbookRunbookVersionTaskStepPropertyNotificationPreferenceResult',
    'GetRunbookRunbookVersionTaskStepPropertyPauseDetailResult',
    'GetRunbookRunbookVersionTaskStepPropertyRunOnResult',
    'GetRunbookRunbookVersionTaskStepPropertyRunOnPreviousTaskInstanceDetailResult',
    'GetRunbookRunbookVersionTaskStepPropertyRunOnPreviousTaskInstanceDetailOutputVariableDetailResult',
    'GetRunbookRunbookVersionTaskTaskRecordDetailResult',
    'GetRunbookRunbookVersionTaskTaskRecordDetailExecutionDetailResult',
    'GetRunbookRunbookVersionTaskTaskRecordDetailExecutionDetailContentResult',
    'GetRunbookRunbookVersionTaskTaskRecordDetailExecutionDetailCredentialResult',
    'GetRunbookRunbookVersionTaskTaskRecordDetailExecutionDetailVariableResult',
    'GetRunbookRunbookVersionTaskTaskRecordDetailExecutionDetailVariableInputVariableResult',
    'GetRunbookRunbookVersionTaskTaskRecordDetailPropertyResult',
    'GetRunbookVersionExecutionWorkflowDetailResult',
    'GetRunbookVersionExecutionWorkflowDetailWorkflowResult',
    'GetRunbookVersionExecutionWorkflowDetailWorkflowStepResult',
    'GetRunbookVersionGroupResult',
    'GetRunbookVersionGroupPropertyResult',
    'GetRunbookVersionGroupPropertyNotificationPreferenceResult',
    'GetRunbookVersionGroupPropertyPauseDetailResult',
    'GetRunbookVersionGroupPropertyRunOnResult',
    'GetRunbookVersionGroupPropertyRunOnPreviousTaskInstanceDetailResult',
    'GetRunbookVersionGroupPropertyRunOnPreviousTaskInstanceDetailOutputVariableDetailResult',
    'GetRunbookVersionRollbackWorkflowDetailResult',
    'GetRunbookVersionRollbackWorkflowDetailWorkflowResult',
    'GetRunbookVersionRollbackWorkflowDetailWorkflowStepResult',
    'GetRunbookVersionTaskResult',
    'GetRunbookVersionTaskOutputVariableMappingResult',
    'GetRunbookVersionTaskOutputVariableMappingOutputVariableDetailResult',
    'GetRunbookVersionTaskStepPropertyResult',
    'GetRunbookVersionTaskStepPropertyNotificationPreferenceResult',
    'GetRunbookVersionTaskStepPropertyPauseDetailResult',
    'GetRunbookVersionTaskStepPropertyRunOnResult',
    'GetRunbookVersionTaskStepPropertyRunOnPreviousTaskInstanceDetailResult',
    'GetRunbookVersionTaskStepPropertyRunOnPreviousTaskInstanceDetailOutputVariableDetailResult',
    'GetRunbookVersionTaskTaskRecordDetailResult',
    'GetRunbookVersionTaskTaskRecordDetailExecutionDetailResult',
    'GetRunbookVersionTaskTaskRecordDetailExecutionDetailContentResult',
    'GetRunbookVersionTaskTaskRecordDetailExecutionDetailCredentialResult',
    'GetRunbookVersionTaskTaskRecordDetailExecutionDetailVariableResult',
    'GetRunbookVersionTaskTaskRecordDetailExecutionDetailVariableInputVariableResult',
    'GetRunbookVersionTaskTaskRecordDetailPropertyResult',
    'GetRunbookVersionsFilterResult',
    'GetRunbookVersionsRunbookVersionCollectionResult',
    'GetRunbookVersionsRunbookVersionCollectionItemResult',
    'GetRunbookVersionsRunbookVersionCollectionItemExecutionWorkflowDetailResult',
    'GetRunbookVersionsRunbookVersionCollectionItemExecutionWorkflowDetailWorkflowResult',
    'GetRunbookVersionsRunbookVersionCollectionItemExecutionWorkflowDetailWorkflowStepResult',
    'GetRunbookVersionsRunbookVersionCollectionItemGroupResult',
    'GetRunbookVersionsRunbookVersionCollectionItemGroupPropertyResult',
    'GetRunbookVersionsRunbookVersionCollectionItemGroupPropertyNotificationPreferenceResult',
    'GetRunbookVersionsRunbookVersionCollectionItemGroupPropertyPauseDetailResult',
    'GetRunbookVersionsRunbookVersionCollectionItemGroupPropertyRunOnResult',
    'GetRunbookVersionsRunbookVersionCollectionItemGroupPropertyRunOnPreviousTaskInstanceDetailResult',
    'GetRunbookVersionsRunbookVersionCollectionItemGroupPropertyRunOnPreviousTaskInstanceDetailOutputVariableDetailResult',
    'GetRunbookVersionsRunbookVersionCollectionItemRollbackWorkflowDetailResult',
    'GetRunbookVersionsRunbookVersionCollectionItemRollbackWorkflowDetailWorkflowResult',
    'GetRunbookVersionsRunbookVersionCollectionItemRollbackWorkflowDetailWorkflowStepResult',
    'GetRunbookVersionsRunbookVersionCollectionItemTaskResult',
    'GetRunbookVersionsRunbookVersionCollectionItemTaskOutputVariableMappingResult',
    'GetRunbookVersionsRunbookVersionCollectionItemTaskOutputVariableMappingOutputVariableDetailResult',
    'GetRunbookVersionsRunbookVersionCollectionItemTaskStepPropertyResult',
    'GetRunbookVersionsRunbookVersionCollectionItemTaskStepPropertyNotificationPreferenceResult',
    'GetRunbookVersionsRunbookVersionCollectionItemTaskStepPropertyPauseDetailResult',
    'GetRunbookVersionsRunbookVersionCollectionItemTaskStepPropertyRunOnResult',
    'GetRunbookVersionsRunbookVersionCollectionItemTaskStepPropertyRunOnPreviousTaskInstanceDetailResult',
    'GetRunbookVersionsRunbookVersionCollectionItemTaskStepPropertyRunOnPreviousTaskInstanceDetailOutputVariableDetailResult',
    'GetRunbookVersionsRunbookVersionCollectionItemTaskTaskRecordDetailResult',
    'GetRunbookVersionsRunbookVersionCollectionItemTaskTaskRecordDetailExecutionDetailResult',
    'GetRunbookVersionsRunbookVersionCollectionItemTaskTaskRecordDetailExecutionDetailContentResult',
    'GetRunbookVersionsRunbookVersionCollectionItemTaskTaskRecordDetailExecutionDetailCredentialResult',
    'GetRunbookVersionsRunbookVersionCollectionItemTaskTaskRecordDetailExecutionDetailVariableResult',
    'GetRunbookVersionsRunbookVersionCollectionItemTaskTaskRecordDetailExecutionDetailVariableInputVariableResult',
    'GetRunbookVersionsRunbookVersionCollectionItemTaskTaskRecordDetailPropertyResult',
    'GetRunbooksFilterResult',
    'GetRunbooksRunbookCollectionResult',
    'GetRunbooksRunbookCollectionItemResult',
    'GetRunbooksRunbookCollectionItemRunbookVersionResult',
    'GetRunbooksRunbookCollectionItemRunbookVersionExecutionWorkflowDetailResult',
    'GetRunbooksRunbookCollectionItemRunbookVersionExecutionWorkflowDetailWorkflowResult',
    'GetRunbooksRunbookCollectionItemRunbookVersionExecutionWorkflowDetailWorkflowStepResult',
    'GetRunbooksRunbookCollectionItemRunbookVersionGroupResult',
    'GetRunbooksRunbookCollectionItemRunbookVersionGroupPropertyResult',
    'GetRunbooksRunbookCollectionItemRunbookVersionGroupPropertyNotificationPreferenceResult',
    'GetRunbooksRunbookCollectionItemRunbookVersionGroupPropertyPauseDetailResult',
    'GetRunbooksRunbookCollectionItemRunbookVersionGroupPropertyRunOnResult',
    'GetRunbooksRunbookCollectionItemRunbookVersionGroupPropertyRunOnPreviousTaskInstanceDetailResult',
    'GetRunbooksRunbookCollectionItemRunbookVersionGroupPropertyRunOnPreviousTaskInstanceDetailOutputVariableDetailResult',
    'GetRunbooksRunbookCollectionItemRunbookVersionRollbackWorkflowDetailResult',
    'GetRunbooksRunbookCollectionItemRunbookVersionRollbackWorkflowDetailWorkflowResult',
    'GetRunbooksRunbookCollectionItemRunbookVersionRollbackWorkflowDetailWorkflowStepResult',
    'GetRunbooksRunbookCollectionItemRunbookVersionTaskResult',
    'GetRunbooksRunbookCollectionItemRunbookVersionTaskOutputVariableMappingResult',
    'GetRunbooksRunbookCollectionItemRunbookVersionTaskOutputVariableMappingOutputVariableDetailResult',
    'GetRunbooksRunbookCollectionItemRunbookVersionTaskStepPropertyResult',
    'GetRunbooksRunbookCollectionItemRunbookVersionTaskStepPropertyNotificationPreferenceResult',
    'GetRunbooksRunbookCollectionItemRunbookVersionTaskStepPropertyPauseDetailResult',
    'GetRunbooksRunbookCollectionItemRunbookVersionTaskStepPropertyRunOnResult',
    'GetRunbooksRunbookCollectionItemRunbookVersionTaskStepPropertyRunOnPreviousTaskInstanceDetailResult',
    'GetRunbooksRunbookCollectionItemRunbookVersionTaskStepPropertyRunOnPreviousTaskInstanceDetailOutputVariableDetailResult',
    'GetRunbooksRunbookCollectionItemRunbookVersionTaskTaskRecordDetailResult',
    'GetRunbooksRunbookCollectionItemRunbookVersionTaskTaskRecordDetailExecutionDetailResult',
    'GetRunbooksRunbookCollectionItemRunbookVersionTaskTaskRecordDetailExecutionDetailContentResult',
    'GetRunbooksRunbookCollectionItemRunbookVersionTaskTaskRecordDetailExecutionDetailCredentialResult',
    'GetRunbooksRunbookCollectionItemRunbookVersionTaskTaskRecordDetailExecutionDetailVariableResult',
    'GetRunbooksRunbookCollectionItemRunbookVersionTaskTaskRecordDetailExecutionDetailVariableInputVariableResult',
    'GetRunbooksRunbookCollectionItemRunbookVersionTaskTaskRecordDetailPropertyResult',
    'GetSchedulerDefinitionActionGroupResult',
    'GetSchedulerDefinitionRunBookResult',
    'GetSchedulerDefinitionRunBookInputParameterResult',
    'GetSchedulerDefinitionRunBookInputParameterArgumentResult',
    'GetSchedulerDefinitionRunBookInputParameterArgumentContentResult',
    'GetSchedulerDefinitionScheduleResult',
    'GetSchedulerDefinitionScheduledFleetsFilterResult',
    'GetSchedulerDefinitionScheduledFleetsScheduledFleetCollectionResult',
    'GetSchedulerDefinitionScheduledFleetsScheduledFleetCollectionItemResult',
    'GetSchedulerDefinitionsFilterResult',
    'GetSchedulerDefinitionsSchedulerDefinitionCollectionResult',
    'GetSchedulerDefinitionsSchedulerDefinitionCollectionItemResult',
    'GetSchedulerDefinitionsSchedulerDefinitionCollectionItemActionGroupResult',
    'GetSchedulerDefinitionsSchedulerDefinitionCollectionItemRunBookResult',
    'GetSchedulerDefinitionsSchedulerDefinitionCollectionItemRunBookInputParameterResult',
    'GetSchedulerDefinitionsSchedulerDefinitionCollectionItemRunBookInputParameterArgumentResult',
    'GetSchedulerDefinitionsSchedulerDefinitionCollectionItemRunBookInputParameterArgumentContentResult',
    'GetSchedulerDefinitionsSchedulerDefinitionCollectionItemScheduleResult',
    'GetSchedulerExecutionsFilterResult',
    'GetSchedulerExecutionsSchedulerExecutionCollectionResult',
    'GetSchedulerExecutionsSchedulerExecutionCollectionItemResult',
    'GetSchedulerExecutionsSchedulerExecutionCollectionItemSchedulerDefinitionResult',
    'GetSchedulerJobCountsFilterResult',
    'GetSchedulerJobCountsSchedulerJobAggregationCollectionResult',
    'GetSchedulerJobCountsSchedulerJobAggregationCollectionItemResult',
    'GetSchedulerJobCountsSchedulerJobAggregationCollectionItemDimensionResult',
    'GetSchedulerJobJobActivityResourcesFilterResult',
    'GetSchedulerJobJobActivityResourcesResourceCollectionResult',
    'GetSchedulerJobJobActivityResourcesResourceCollectionItemResult',
    'GetSchedulerJobJobActivityResourcesResourceCollectionItemTargetResult',
    'GetSchedulerJobJobActivityStepsFilterResult',
    'GetSchedulerJobJobActivityStepsStepCollectionResult',
    'GetSchedulerJobJobActivityStepsStepCollectionItemResult',
    'GetTaskRecordDetailResult',
    'GetTaskRecordDetailExecutionDetailResult',
    'GetTaskRecordDetailExecutionDetailContentResult',
    'GetTaskRecordDetailExecutionDetailCredentialResult',
    'GetTaskRecordDetailExecutionDetailVariableResult',
    'GetTaskRecordDetailExecutionDetailVariableInputVariableResult',
    'GetTaskRecordDetailPropertyResult',
    'GetTaskRecordsFilterResult',
    'GetTaskRecordsTaskRecordCollectionResult',
    'GetTaskRecordsTaskRecordCollectionItemResult',
    'GetTaskRecordsTaskRecordCollectionItemDetailResult',
    'GetTaskRecordsTaskRecordCollectionItemDetailExecutionDetailResult',
    'GetTaskRecordsTaskRecordCollectionItemDetailExecutionDetailContentResult',
    'GetTaskRecordsTaskRecordCollectionItemDetailExecutionDetailCredentialResult',
    'GetTaskRecordsTaskRecordCollectionItemDetailExecutionDetailVariableResult',
    'GetTaskRecordsTaskRecordCollectionItemDetailExecutionDetailVariableInputVariableResult',
    'GetTaskRecordsTaskRecordCollectionItemDetailPropertyResult',
]

@pulumi.output_type
class CatalogItemCatalogResultPayload(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "branchName":
            suggest = "branch_name"
        elif key == "configResultType":
            suggest = "config_result_type"
        elif key == "configurationSourceProviderId":
            suggest = "configuration_source_provider_id"
        elif key == "packageUrl":
            suggest = "package_url"
        elif key == "repositoryUrl":
            suggest = "repository_url"
        elif key == "templateId":
            suggest = "template_id"
        elif key == "timeExpires":
            suggest = "time_expires"
        elif key == "workingDirectory":
            suggest = "working_directory"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CatalogItemCatalogResultPayload. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CatalogItemCatalogResultPayload.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CatalogItemCatalogResultPayload.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 branch_name: Optional[builtins.str] = None,
                 config_result_type: Optional[builtins.str] = None,
                 configuration_source_provider_id: Optional[builtins.str] = None,
                 package_url: Optional[builtins.str] = None,
                 repository_url: Optional[builtins.str] = None,
                 template_id: Optional[builtins.str] = None,
                 time_expires: Optional[builtins.str] = None,
                 working_directory: Optional[builtins.str] = None):
        """
        :param builtins.str branch_name: branch Name
        :param builtins.str config_result_type: config result type.
        :param builtins.str configuration_source_provider_id: configuration Source Provider [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)
        :param builtins.str package_url: package url
        :param builtins.str repository_url: repository Url
        :param builtins.str template_id: template id
        :param builtins.str time_expires: The date and time expires, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        """
        if branch_name is not None:
            pulumi.set(__self__, "branch_name", branch_name)
        if config_result_type is not None:
            pulumi.set(__self__, "config_result_type", config_result_type)
        if configuration_source_provider_id is not None:
            pulumi.set(__self__, "configuration_source_provider_id", configuration_source_provider_id)
        if package_url is not None:
            pulumi.set(__self__, "package_url", package_url)
        if repository_url is not None:
            pulumi.set(__self__, "repository_url", repository_url)
        if template_id is not None:
            pulumi.set(__self__, "template_id", template_id)
        if time_expires is not None:
            pulumi.set(__self__, "time_expires", time_expires)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter(name="branchName")
    def branch_name(self) -> Optional[builtins.str]:
        """
        branch Name
        """
        return pulumi.get(self, "branch_name")

    @property
    @pulumi.getter(name="configResultType")
    def config_result_type(self) -> Optional[builtins.str]:
        """
        config result type.
        """
        return pulumi.get(self, "config_result_type")

    @property
    @pulumi.getter(name="configurationSourceProviderId")
    def configuration_source_provider_id(self) -> Optional[builtins.str]:
        """
        configuration Source Provider [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)
        """
        return pulumi.get(self, "configuration_source_provider_id")

    @property
    @pulumi.getter(name="packageUrl")
    def package_url(self) -> Optional[builtins.str]:
        """
        package url
        """
        return pulumi.get(self, "package_url")

    @property
    @pulumi.getter(name="repositoryUrl")
    def repository_url(self) -> Optional[builtins.str]:
        """
        repository Url
        """
        return pulumi.get(self, "repository_url")

    @property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[builtins.str]:
        """
        template id
        """
        return pulumi.get(self, "template_id")

    @property
    @pulumi.getter(name="timeExpires")
    def time_expires(self) -> Optional[builtins.str]:
        """
        The date and time expires, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_expires")

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[builtins.str]:
        return pulumi.get(self, "working_directory")


@pulumi.output_type
class CatalogItemCatalogSourcePayload(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configSourceType":
            suggest = "config_source_type"
        elif key == "accessUri":
            suggest = "access_uri"
        elif key == "branchName":
            suggest = "branch_name"
        elif key == "configurationSourceProviderId":
            suggest = "configuration_source_provider_id"
        elif key == "listingId":
            suggest = "listing_id"
        elif key == "longDescription":
            suggest = "long_description"
        elif key == "repositoryUrl":
            suggest = "repository_url"
        elif key == "templateDisplayName":
            suggest = "template_display_name"
        elif key == "timeExpires":
            suggest = "time_expires"
        elif key == "workingDirectory":
            suggest = "working_directory"
        elif key == "zipFileBase64encoded":
            suggest = "zip_file_base64encoded"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CatalogItemCatalogSourcePayload. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CatalogItemCatalogSourcePayload.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CatalogItemCatalogSourcePayload.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config_source_type: builtins.str,
                 access_uri: Optional[builtins.str] = None,
                 branch_name: Optional[builtins.str] = None,
                 bucket: Optional[builtins.str] = None,
                 configuration_source_provider_id: Optional[builtins.str] = None,
                 description: Optional[builtins.str] = None,
                 listing_id: Optional[builtins.str] = None,
                 long_description: Optional[builtins.str] = None,
                 namespace: Optional[builtins.str] = None,
                 object: Optional[builtins.str] = None,
                 repository_url: Optional[builtins.str] = None,
                 template_display_name: Optional[builtins.str] = None,
                 time_expires: Optional[builtins.str] = None,
                 version: Optional[builtins.str] = None,
                 working_directory: Optional[builtins.str] = None,
                 zip_file_base64encoded: Optional[builtins.str] = None):
        """
        :param builtins.str config_source_type: config source type.
        :param builtins.str access_uri: access uri
        :param builtins.str branch_name: branch Name
        :param builtins.str bucket: bucket name
        :param builtins.str configuration_source_provider_id: configuration Source Provider [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)
        :param builtins.str description: Template Description
        :param builtins.str listing_id: This listing Id parameter of Payload.
        :param builtins.str long_description: Template Long Description
        :param builtins.str namespace: nameSpace
        :param builtins.str object: object name
        :param builtins.str repository_url: repository Url
        :param builtins.str template_display_name: Template Display Name
        :param builtins.str time_expires: The date and time expires, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        :param builtins.str version: This version parameter of Payload.
        :param builtins.str zip_file_base64encoded: The Base64 encoded template. This payload will trigger CreateTemplate API, where the parameter will be passed.
        """
        pulumi.set(__self__, "config_source_type", config_source_type)
        if access_uri is not None:
            pulumi.set(__self__, "access_uri", access_uri)
        if branch_name is not None:
            pulumi.set(__self__, "branch_name", branch_name)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if configuration_source_provider_id is not None:
            pulumi.set(__self__, "configuration_source_provider_id", configuration_source_provider_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if listing_id is not None:
            pulumi.set(__self__, "listing_id", listing_id)
        if long_description is not None:
            pulumi.set(__self__, "long_description", long_description)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if object is not None:
            pulumi.set(__self__, "object", object)
        if repository_url is not None:
            pulumi.set(__self__, "repository_url", repository_url)
        if template_display_name is not None:
            pulumi.set(__self__, "template_display_name", template_display_name)
        if time_expires is not None:
            pulumi.set(__self__, "time_expires", time_expires)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)
        if zip_file_base64encoded is not None:
            pulumi.set(__self__, "zip_file_base64encoded", zip_file_base64encoded)

    @property
    @pulumi.getter(name="configSourceType")
    def config_source_type(self) -> builtins.str:
        """
        config source type.
        """
        return pulumi.get(self, "config_source_type")

    @property
    @pulumi.getter(name="accessUri")
    def access_uri(self) -> Optional[builtins.str]:
        """
        access uri
        """
        return pulumi.get(self, "access_uri")

    @property
    @pulumi.getter(name="branchName")
    def branch_name(self) -> Optional[builtins.str]:
        """
        branch Name
        """
        return pulumi.get(self, "branch_name")

    @property
    @pulumi.getter
    def bucket(self) -> Optional[builtins.str]:
        """
        bucket name
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="configurationSourceProviderId")
    def configuration_source_provider_id(self) -> Optional[builtins.str]:
        """
        configuration Source Provider [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)
        """
        return pulumi.get(self, "configuration_source_provider_id")

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        """
        Template Description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="listingId")
    def listing_id(self) -> Optional[builtins.str]:
        """
        This listing Id parameter of Payload.
        """
        return pulumi.get(self, "listing_id")

    @property
    @pulumi.getter(name="longDescription")
    def long_description(self) -> Optional[builtins.str]:
        """
        Template Long Description
        """
        return pulumi.get(self, "long_description")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[builtins.str]:
        """
        nameSpace
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> Optional[builtins.str]:
        """
        object name
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter(name="repositoryUrl")
    def repository_url(self) -> Optional[builtins.str]:
        """
        repository Url
        """
        return pulumi.get(self, "repository_url")

    @property
    @pulumi.getter(name="templateDisplayName")
    def template_display_name(self) -> Optional[builtins.str]:
        """
        Template Display Name
        """
        return pulumi.get(self, "template_display_name")

    @property
    @pulumi.getter(name="timeExpires")
    def time_expires(self) -> Optional[builtins.str]:
        """
        The date and time expires, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_expires")

    @property
    @pulumi.getter
    def version(self) -> Optional[builtins.str]:
        """
        This version parameter of Payload.
        """
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[builtins.str]:
        return pulumi.get(self, "working_directory")

    @property
    @pulumi.getter(name="zipFileBase64encoded")
    def zip_file_base64encoded(self) -> Optional[builtins.str]:
        """
        The Base64 encoded template. This payload will trigger CreateTemplate API, where the parameter will be passed.
        """
        return pulumi.get(self, "zip_file_base64encoded")


@pulumi.output_type
class CompliancePolicyRulePatchSelection(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "selectionType":
            suggest = "selection_type"
        elif key == "daysSinceRelease":
            suggest = "days_since_release"
        elif key == "patchLevel":
            suggest = "patch_level"
        elif key == "patchName":
            suggest = "patch_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CompliancePolicyRulePatchSelection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CompliancePolicyRulePatchSelection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CompliancePolicyRulePatchSelection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 selection_type: builtins.str,
                 days_since_release: Optional[builtins.int] = None,
                 patch_level: Optional[builtins.str] = None,
                 patch_name: Optional[builtins.str] = None):
        """
        :param builtins.str selection_type: (Updatable) Selection type for the Patch.
        :param builtins.int days_since_release: (Updatable) Days passed since patch release.
        :param builtins.str patch_level: (Updatable) Patch Name.
        :param builtins.str patch_name: (Updatable) Patch Name.
        """
        pulumi.set(__self__, "selection_type", selection_type)
        if days_since_release is not None:
            pulumi.set(__self__, "days_since_release", days_since_release)
        if patch_level is not None:
            pulumi.set(__self__, "patch_level", patch_level)
        if patch_name is not None:
            pulumi.set(__self__, "patch_name", patch_name)

    @property
    @pulumi.getter(name="selectionType")
    def selection_type(self) -> builtins.str:
        """
        (Updatable) Selection type for the Patch.
        """
        return pulumi.get(self, "selection_type")

    @property
    @pulumi.getter(name="daysSinceRelease")
    def days_since_release(self) -> Optional[builtins.int]:
        """
        (Updatable) Days passed since patch release.
        """
        return pulumi.get(self, "days_since_release")

    @property
    @pulumi.getter(name="patchLevel")
    def patch_level(self) -> Optional[builtins.str]:
        """
        (Updatable) Patch Name.
        """
        return pulumi.get(self, "patch_level")

    @property
    @pulumi.getter(name="patchName")
    def patch_name(self) -> Optional[builtins.str]:
        """
        (Updatable) Patch Name.
        """
        return pulumi.get(self, "patch_name")


@pulumi.output_type
class CompliancePolicyRuleProductVersion(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isApplicableForAllHigherVersions":
            suggest = "is_applicable_for_all_higher_versions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CompliancePolicyRuleProductVersion. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CompliancePolicyRuleProductVersion.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CompliancePolicyRuleProductVersion.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 version: builtins.str,
                 is_applicable_for_all_higher_versions: Optional[builtins.bool] = None):
        """
        :param builtins.str version: (Updatable) Product version the rule is applicable.
        :param builtins.bool is_applicable_for_all_higher_versions: (Updatable) Is rule applicable to all higher versions also
        """
        pulumi.set(__self__, "version", version)
        if is_applicable_for_all_higher_versions is not None:
            pulumi.set(__self__, "is_applicable_for_all_higher_versions", is_applicable_for_all_higher_versions)

    @property
    @pulumi.getter
    def version(self) -> builtins.str:
        """
        (Updatable) Product version the rule is applicable.
        """
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="isApplicableForAllHigherVersions")
    def is_applicable_for_all_higher_versions(self) -> Optional[builtins.bool]:
        """
        (Updatable) Is rule applicable to all higher versions also
        """
        return pulumi.get(self, "is_applicable_for_all_higher_versions")


@pulumi.output_type
class FleetCredential(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compartmentId":
            suggest = "compartment_id"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "entitySpecifics":
            suggest = "entity_specifics"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FleetCredential. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FleetCredential.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FleetCredential.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compartment_id: builtins.str,
                 display_name: builtins.str,
                 entity_specifics: 'outputs.FleetCredentialEntitySpecifics',
                 password: 'outputs.FleetCredentialPassword',
                 user: 'outputs.FleetCredentialUser'):
        """
        :param builtins.str compartment_id: (Updatable) Compartment OCID
        :param builtins.str display_name: A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        :param 'FleetCredentialEntitySpecificsArgs' entity_specifics: Credential specific Details.
        :param 'FleetCredentialPasswordArgs' password: Credential Details.
        :param 'FleetCredentialUserArgs' user: Credential Details.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "entity_specifics", entity_specifics)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        (Updatable) Compartment OCID
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="entitySpecifics")
    def entity_specifics(self) -> 'outputs.FleetCredentialEntitySpecifics':
        """
        Credential specific Details.
        """
        return pulumi.get(self, "entity_specifics")

    @property
    @pulumi.getter
    def password(self) -> 'outputs.FleetCredentialPassword':
        """
        Credential Details.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def user(self) -> 'outputs.FleetCredentialUser':
        """
        Credential Details.
        """
        return pulumi.get(self, "user")


@pulumi.output_type
class FleetCredentialEntitySpecifics(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "credentialLevel":
            suggest = "credential_level"
        elif key == "resourceId":
            suggest = "resource_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FleetCredentialEntitySpecifics. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FleetCredentialEntitySpecifics.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FleetCredentialEntitySpecifics.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credential_level: builtins.str,
                 resource_id: Optional[builtins.str] = None,
                 target: Optional[builtins.str] = None,
                 variables: Optional[Sequence['outputs.FleetCredentialEntitySpecificsVariable']] = None):
        """
        :param builtins.str credential_level: (Updatable) At what level the credential is provided?
        :param builtins.str resource_id: (Updatable) OCID of the resource associated with the target for which the credential is created.
        :param builtins.str target: (Updatable) Target name for which the credential is provided.
        :param Sequence['FleetCredentialEntitySpecificsVariableArgs'] variables: (Updatable) List of fleet credential variables.
        """
        pulumi.set(__self__, "credential_level", credential_level)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if target is not None:
            pulumi.set(__self__, "target", target)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter(name="credentialLevel")
    def credential_level(self) -> builtins.str:
        """
        (Updatable) At what level the credential is provided?
        """
        return pulumi.get(self, "credential_level")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[builtins.str]:
        """
        (Updatable) OCID of the resource associated with the target for which the credential is created.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter
    def target(self) -> Optional[builtins.str]:
        """
        (Updatable) Target name for which the credential is provided.
        """
        return pulumi.get(self, "target")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.FleetCredentialEntitySpecificsVariable']]:
        """
        (Updatable) List of fleet credential variables.
        """
        return pulumi.get(self, "variables")


@pulumi.output_type
class FleetCredentialEntitySpecificsVariable(dict):
    def __init__(__self__, *,
                 name: Optional[builtins.str] = None,
                 value: Optional[builtins.str] = None):
        """
        :param builtins.str name: (Updatable) Name of the variable.
        :param builtins.str value: (Updatable) The value corresponding to the variable name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        (Updatable) Name of the variable.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[builtins.str]:
        """
        (Updatable) The value corresponding to the variable name.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class FleetCredentialPassword(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "credentialType":
            suggest = "credential_type"
        elif key == "keyId":
            suggest = "key_id"
        elif key == "keyVersion":
            suggest = "key_version"
        elif key == "secretId":
            suggest = "secret_id"
        elif key == "secretVersion":
            suggest = "secret_version"
        elif key == "vaultId":
            suggest = "vault_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FleetCredentialPassword. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FleetCredentialPassword.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FleetCredentialPassword.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credential_type: builtins.str,
                 key_id: Optional[builtins.str] = None,
                 key_version: Optional[builtins.str] = None,
                 secret_id: Optional[builtins.str] = None,
                 secret_version: Optional[builtins.str] = None,
                 value: Optional[builtins.str] = None,
                 vault_id: Optional[builtins.str] = None):
        """
        :param builtins.str credential_type: (Updatable) Credential Type.
        :param builtins.str key_id: (Updatable) OCID for the Vault Key that will be used to encrypt/decrypt the value given.
        :param builtins.str key_version: (Updatable) The Vault Key version.
        :param builtins.str secret_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the secret.
        :param builtins.str secret_version: (Updatable) The secret version.
        :param builtins.str value: (Updatable) The value corresponding to the credential.
        :param builtins.str vault_id: (Updatable) OCID for the Vault that will be used to fetch the key to encrypt/decrypt the value given.
        """
        pulumi.set(__self__, "credential_type", credential_type)
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if key_version is not None:
            pulumi.set(__self__, "key_version", key_version)
        if secret_id is not None:
            pulumi.set(__self__, "secret_id", secret_id)
        if secret_version is not None:
            pulumi.set(__self__, "secret_version", secret_version)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if vault_id is not None:
            pulumi.set(__self__, "vault_id", vault_id)

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> builtins.str:
        """
        (Updatable) Credential Type.
        """
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[builtins.str]:
        """
        (Updatable) OCID for the Vault Key that will be used to encrypt/decrypt the value given.
        """
        return pulumi.get(self, "key_id")

    @property
    @pulumi.getter(name="keyVersion")
    def key_version(self) -> Optional[builtins.str]:
        """
        (Updatable) The Vault Key version.
        """
        return pulumi.get(self, "key_version")

    @property
    @pulumi.getter(name="secretId")
    def secret_id(self) -> Optional[builtins.str]:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the secret.
        """
        return pulumi.get(self, "secret_id")

    @property
    @pulumi.getter(name="secretVersion")
    def secret_version(self) -> Optional[builtins.str]:
        """
        (Updatable) The secret version.
        """
        return pulumi.get(self, "secret_version")

    @property
    @pulumi.getter
    def value(self) -> Optional[builtins.str]:
        """
        (Updatable) The value corresponding to the credential.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> Optional[builtins.str]:
        """
        (Updatable) OCID for the Vault that will be used to fetch the key to encrypt/decrypt the value given.
        """
        return pulumi.get(self, "vault_id")


@pulumi.output_type
class FleetCredentialUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "credentialType":
            suggest = "credential_type"
        elif key == "keyId":
            suggest = "key_id"
        elif key == "keyVersion":
            suggest = "key_version"
        elif key == "secretId":
            suggest = "secret_id"
        elif key == "secretVersion":
            suggest = "secret_version"
        elif key == "vaultId":
            suggest = "vault_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FleetCredentialUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FleetCredentialUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FleetCredentialUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credential_type: builtins.str,
                 key_id: Optional[builtins.str] = None,
                 key_version: Optional[builtins.str] = None,
                 secret_id: Optional[builtins.str] = None,
                 secret_version: Optional[builtins.str] = None,
                 value: Optional[builtins.str] = None,
                 vault_id: Optional[builtins.str] = None):
        """
        :param builtins.str credential_type: (Updatable) Credential Type.
        :param builtins.str key_id: (Updatable) OCID for the Vault Key that will be used to encrypt/decrypt the value given.
        :param builtins.str key_version: (Updatable) The Vault Key version.
        :param builtins.str secret_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the secret.
        :param builtins.str secret_version: (Updatable) The secret version.
        :param builtins.str value: (Updatable) The value corresponding to the credential.
        :param builtins.str vault_id: (Updatable) OCID for the Vault that will be used to fetch the key to encrypt/decrypt the value given.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        pulumi.set(__self__, "credential_type", credential_type)
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if key_version is not None:
            pulumi.set(__self__, "key_version", key_version)
        if secret_id is not None:
            pulumi.set(__self__, "secret_id", secret_id)
        if secret_version is not None:
            pulumi.set(__self__, "secret_version", secret_version)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if vault_id is not None:
            pulumi.set(__self__, "vault_id", vault_id)

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> builtins.str:
        """
        (Updatable) Credential Type.
        """
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[builtins.str]:
        """
        (Updatable) OCID for the Vault Key that will be used to encrypt/decrypt the value given.
        """
        return pulumi.get(self, "key_id")

    @property
    @pulumi.getter(name="keyVersion")
    def key_version(self) -> Optional[builtins.str]:
        """
        (Updatable) The Vault Key version.
        """
        return pulumi.get(self, "key_version")

    @property
    @pulumi.getter(name="secretId")
    def secret_id(self) -> Optional[builtins.str]:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the secret.
        """
        return pulumi.get(self, "secret_id")

    @property
    @pulumi.getter(name="secretVersion")
    def secret_version(self) -> Optional[builtins.str]:
        """
        (Updatable) The secret version.
        """
        return pulumi.get(self, "secret_version")

    @property
    @pulumi.getter
    def value(self) -> Optional[builtins.str]:
        """
        (Updatable) The value corresponding to the credential.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> Optional[builtins.str]:
        """
        (Updatable) OCID for the Vault that will be used to fetch the key to encrypt/decrypt the value given.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "vault_id")


@pulumi.output_type
class FleetDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fleetType":
            suggest = "fleet_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FleetDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FleetDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FleetDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 fleet_type: Optional[builtins.str] = None):
        """
        :param builtins.str fleet_type: Type of the Fleet. PRODUCT - A fleet of product-specific resources for a product type. ENVIRONMENT - A fleet of environment-specific resources for a product stack. GROUP - A fleet of a fleet of either environment or product fleets. GENERIC - A fleet of resources selected dynamically or manually for reporting purposes
        """
        if fleet_type is not None:
            pulumi.set(__self__, "fleet_type", fleet_type)

    @property
    @pulumi.getter(name="fleetType")
    def fleet_type(self) -> Optional[builtins.str]:
        """
        Type of the Fleet. PRODUCT - A fleet of product-specific resources for a product type. ENVIRONMENT - A fleet of environment-specific resources for a product stack. GROUP - A fleet of a fleet of either environment or product fleets. GENERIC - A fleet of resources selected dynamically or manually for reporting purposes
        """
        return pulumi.get(self, "fleet_type")


@pulumi.output_type
class FleetNotificationPreference(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compartmentId":
            suggest = "compartment_id"
        elif key == "topicId":
            suggest = "topic_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FleetNotificationPreference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FleetNotificationPreference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FleetNotificationPreference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compartment_id: builtins.str,
                 topic_id: builtins.str,
                 preferences: Optional['outputs.FleetNotificationPreferencePreferences'] = None):
        """
        :param builtins.str compartment_id: (Updatable) Compartment ID the topic belongs to.
        :param builtins.str topic_id: (Updatable) Topic Id where the notifications will be directed. A topic is a communication channel for sending messages on chosen events to subscriptions.
        :param 'FleetNotificationPreferencePreferencesArgs' preferences: (Updatable) Preferences to send notifications on the fleet activities.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "topic_id", topic_id)
        if preferences is not None:
            pulumi.set(__self__, "preferences", preferences)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        (Updatable) Compartment ID the topic belongs to.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> builtins.str:
        """
        (Updatable) Topic Id where the notifications will be directed. A topic is a communication channel for sending messages on chosen events to subscriptions.
        """
        return pulumi.get(self, "topic_id")

    @property
    @pulumi.getter
    def preferences(self) -> Optional['outputs.FleetNotificationPreferencePreferences']:
        """
        (Updatable) Preferences to send notifications on the fleet activities.
        """
        return pulumi.get(self, "preferences")


@pulumi.output_type
class FleetNotificationPreferencePreferences(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "onJobFailure":
            suggest = "on_job_failure"
        elif key == "onResourceNonCompliance":
            suggest = "on_resource_non_compliance"
        elif key == "onRunbookNewerVersion":
            suggest = "on_runbook_newer_version"
        elif key == "onTaskFailure":
            suggest = "on_task_failure"
        elif key == "onTaskPause":
            suggest = "on_task_pause"
        elif key == "onTaskSuccess":
            suggest = "on_task_success"
        elif key == "onTopologyModification":
            suggest = "on_topology_modification"
        elif key == "upcomingSchedule":
            suggest = "upcoming_schedule"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FleetNotificationPreferencePreferences. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FleetNotificationPreferencePreferences.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FleetNotificationPreferencePreferences.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 on_job_failure: Optional[builtins.bool] = None,
                 on_resource_non_compliance: Optional[builtins.bool] = None,
                 on_runbook_newer_version: Optional[builtins.bool] = None,
                 on_task_failure: Optional[builtins.bool] = None,
                 on_task_pause: Optional[builtins.bool] = None,
                 on_task_success: Optional[builtins.bool] = None,
                 on_topology_modification: Optional[builtins.bool] = None,
                 upcoming_schedule: Optional['outputs.FleetNotificationPreferencePreferencesUpcomingSchedule'] = None):
        """
        :param builtins.bool on_job_failure: (Updatable) Enables or disables notification on Job Failures.
        :param builtins.bool on_resource_non_compliance: (Updatable) Enables or disables notification when fleet resource becomes non compliant.
        :param builtins.bool on_runbook_newer_version: (Updatable) Enables or disables notification when a newer version of runbook associated with a fleet is available
        :param builtins.bool on_task_failure: (Updatable) Enables or disables notification on task failure.
        :param builtins.bool on_task_pause: (Updatable) Enables or disables notification when a task is paused.
        :param builtins.bool on_task_success: (Updatable) Enables or disables notification on task success.
        :param builtins.bool on_topology_modification: (Updatable) Enables or disables notification on Environment Fleet Topology Modification.
        :param 'FleetNotificationPreferencePreferencesUpcomingScheduleArgs' upcoming_schedule: (Updatable) Enables notification on upcoming schedule.
        """
        if on_job_failure is not None:
            pulumi.set(__self__, "on_job_failure", on_job_failure)
        if on_resource_non_compliance is not None:
            pulumi.set(__self__, "on_resource_non_compliance", on_resource_non_compliance)
        if on_runbook_newer_version is not None:
            pulumi.set(__self__, "on_runbook_newer_version", on_runbook_newer_version)
        if on_task_failure is not None:
            pulumi.set(__self__, "on_task_failure", on_task_failure)
        if on_task_pause is not None:
            pulumi.set(__self__, "on_task_pause", on_task_pause)
        if on_task_success is not None:
            pulumi.set(__self__, "on_task_success", on_task_success)
        if on_topology_modification is not None:
            pulumi.set(__self__, "on_topology_modification", on_topology_modification)
        if upcoming_schedule is not None:
            pulumi.set(__self__, "upcoming_schedule", upcoming_schedule)

    @property
    @pulumi.getter(name="onJobFailure")
    def on_job_failure(self) -> Optional[builtins.bool]:
        """
        (Updatable) Enables or disables notification on Job Failures.
        """
        return pulumi.get(self, "on_job_failure")

    @property
    @pulumi.getter(name="onResourceNonCompliance")
    def on_resource_non_compliance(self) -> Optional[builtins.bool]:
        """
        (Updatable) Enables or disables notification when fleet resource becomes non compliant.
        """
        return pulumi.get(self, "on_resource_non_compliance")

    @property
    @pulumi.getter(name="onRunbookNewerVersion")
    def on_runbook_newer_version(self) -> Optional[builtins.bool]:
        """
        (Updatable) Enables or disables notification when a newer version of runbook associated with a fleet is available
        """
        return pulumi.get(self, "on_runbook_newer_version")

    @property
    @pulumi.getter(name="onTaskFailure")
    def on_task_failure(self) -> Optional[builtins.bool]:
        """
        (Updatable) Enables or disables notification on task failure.
        """
        return pulumi.get(self, "on_task_failure")

    @property
    @pulumi.getter(name="onTaskPause")
    def on_task_pause(self) -> Optional[builtins.bool]:
        """
        (Updatable) Enables or disables notification when a task is paused.
        """
        return pulumi.get(self, "on_task_pause")

    @property
    @pulumi.getter(name="onTaskSuccess")
    def on_task_success(self) -> Optional[builtins.bool]:
        """
        (Updatable) Enables or disables notification on task success.
        """
        return pulumi.get(self, "on_task_success")

    @property
    @pulumi.getter(name="onTopologyModification")
    def on_topology_modification(self) -> Optional[builtins.bool]:
        """
        (Updatable) Enables or disables notification on Environment Fleet Topology Modification.
        """
        return pulumi.get(self, "on_topology_modification")

    @property
    @pulumi.getter(name="upcomingSchedule")
    def upcoming_schedule(self) -> Optional['outputs.FleetNotificationPreferencePreferencesUpcomingSchedule']:
        """
        (Updatable) Enables notification on upcoming schedule.
        """
        return pulumi.get(self, "upcoming_schedule")


@pulumi.output_type
class FleetNotificationPreferencePreferencesUpcomingSchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "notifyBefore":
            suggest = "notify_before"
        elif key == "onUpcomingSchedule":
            suggest = "on_upcoming_schedule"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FleetNotificationPreferencePreferencesUpcomingSchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FleetNotificationPreferencePreferencesUpcomingSchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FleetNotificationPreferencePreferencesUpcomingSchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 notify_before: Optional[builtins.str] = None,
                 on_upcoming_schedule: Optional[builtins.bool] = None):
        """
        :param builtins.str notify_before: (Updatable) Specify when the notification should be sent.
        :param builtins.bool on_upcoming_schedule: (Updatable) Enables notification on upcoming schedule.
        """
        if notify_before is not None:
            pulumi.set(__self__, "notify_before", notify_before)
        if on_upcoming_schedule is not None:
            pulumi.set(__self__, "on_upcoming_schedule", on_upcoming_schedule)

    @property
    @pulumi.getter(name="notifyBefore")
    def notify_before(self) -> Optional[builtins.str]:
        """
        (Updatable) Specify when the notification should be sent.
        """
        return pulumi.get(self, "notify_before")

    @property
    @pulumi.getter(name="onUpcomingSchedule")
    def on_upcoming_schedule(self) -> Optional[builtins.bool]:
        """
        (Updatable) Enables notification on upcoming schedule.
        """
        return pulumi.get(self, "on_upcoming_schedule")


@pulumi.output_type
class FleetProperty(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compartmentId":
            suggest = "compartment_id"
        elif key == "fleetPropertyType":
            suggest = "fleet_property_type"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "isRequired":
            suggest = "is_required"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FleetProperty. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FleetProperty.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FleetProperty.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compartment_id: builtins.str,
                 fleet_property_type: builtins.str,
                 display_name: Optional[builtins.str] = None,
                 is_required: Optional[builtins.bool] = None,
                 value: Optional[builtins.str] = None):
        """
        :param builtins.str compartment_id: (Updatable) compartment OCID
        :param builtins.str fleet_property_type: Type of the FleetProperty.
        :param builtins.str display_name: A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        :param builtins.bool is_required: Property is required or not.
        :param builtins.str value: Value of the Property.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "fleet_property_type", fleet_property_type)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        (Updatable) compartment OCID
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="fleetPropertyType")
    def fleet_property_type(self) -> builtins.str:
        """
        Type of the FleetProperty.
        """
        return pulumi.get(self, "fleet_property_type")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[builtins.str]:
        """
        A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[builtins.bool]:
        """
        Property is required or not.
        """
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter
    def value(self) -> Optional[builtins.str]:
        """
        Value of the Property.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class FleetResource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compartmentId":
            suggest = "compartment_id"
        elif key == "resourceId":
            suggest = "resource_id"
        elif key == "tenancyId":
            suggest = "tenancy_id"
        elif key == "fleetResourceType":
            suggest = "fleet_resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FleetResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FleetResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FleetResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compartment_id: builtins.str,
                 resource_id: builtins.str,
                 tenancy_id: builtins.str,
                 fleet_resource_type: Optional[builtins.str] = None):
        """
        :param builtins.str compartment_id: (Updatable) Compartment Identifier[OCID].
        :param builtins.str resource_id: OCID of the resource.
        :param builtins.str tenancy_id: Tenancy Identifier[OCID].
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param builtins.str fleet_resource_type: Type of the FleetResource.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "tenancy_id", tenancy_id)
        if fleet_resource_type is not None:
            pulumi.set(__self__, "fleet_resource_type", fleet_resource_type)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        (Updatable) Compartment Identifier[OCID].
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> builtins.str:
        """
        OCID of the resource.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="tenancyId")
    def tenancy_id(self) -> builtins.str:
        """
        Tenancy Identifier[OCID].


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "tenancy_id")

    @property
    @pulumi.getter(name="fleetResourceType")
    def fleet_resource_type(self) -> Optional[builtins.str]:
        """
        Type of the FleetResource.
        """
        return pulumi.get(self, "fleet_resource_type")


@pulumi.output_type
class FleetResourceSelection(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceSelectionType":
            suggest = "resource_selection_type"
        elif key == "ruleSelectionCriteria":
            suggest = "rule_selection_criteria"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FleetResourceSelection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FleetResourceSelection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FleetResourceSelection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_selection_type: builtins.str,
                 rule_selection_criteria: Optional['outputs.FleetResourceSelectionRuleSelectionCriteria'] = None):
        """
        :param builtins.str resource_selection_type: (Updatable) Type of resource selection in a Fleet. Select resources manually or select resources based on rules.
        :param 'FleetResourceSelectionRuleSelectionCriteriaArgs' rule_selection_criteria: (Updatable) Rule Selection Criteria for DYNAMIC resource selection for a GENERIC fleet. Rules define what resources are members of this fleet. All resources that meet the criteria are added automatically.
        """
        pulumi.set(__self__, "resource_selection_type", resource_selection_type)
        if rule_selection_criteria is not None:
            pulumi.set(__self__, "rule_selection_criteria", rule_selection_criteria)

    @property
    @pulumi.getter(name="resourceSelectionType")
    def resource_selection_type(self) -> builtins.str:
        """
        (Updatable) Type of resource selection in a Fleet. Select resources manually or select resources based on rules.
        """
        return pulumi.get(self, "resource_selection_type")

    @property
    @pulumi.getter(name="ruleSelectionCriteria")
    def rule_selection_criteria(self) -> Optional['outputs.FleetResourceSelectionRuleSelectionCriteria']:
        """
        (Updatable) Rule Selection Criteria for DYNAMIC resource selection for a GENERIC fleet. Rules define what resources are members of this fleet. All resources that meet the criteria are added automatically.
        """
        return pulumi.get(self, "rule_selection_criteria")


@pulumi.output_type
class FleetResourceSelectionRuleSelectionCriteria(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchCondition":
            suggest = "match_condition"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FleetResourceSelectionRuleSelectionCriteria. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FleetResourceSelectionRuleSelectionCriteria.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FleetResourceSelectionRuleSelectionCriteria.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_condition: Optional[builtins.str] = None,
                 rules: Optional[Sequence['outputs.FleetResourceSelectionRuleSelectionCriteriaRule']] = None):
        """
        :param builtins.str match_condition: (Updatable) Match condition for the rule selection. Include resources that match all rules or any of the rules.
        :param Sequence['FleetResourceSelectionRuleSelectionCriteriaRuleArgs'] rules: (Updatable) Rules.
        """
        if match_condition is not None:
            pulumi.set(__self__, "match_condition", match_condition)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter(name="matchCondition")
    def match_condition(self) -> Optional[builtins.str]:
        """
        (Updatable) Match condition for the rule selection. Include resources that match all rules or any of the rules.
        """
        return pulumi.get(self, "match_condition")

    @property
    @pulumi.getter
    def rules(self) -> Optional[Sequence['outputs.FleetResourceSelectionRuleSelectionCriteriaRule']]:
        """
        (Updatable) Rules.
        """
        return pulumi.get(self, "rules")


@pulumi.output_type
class FleetResourceSelectionRuleSelectionCriteriaRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compartmentId":
            suggest = "compartment_id"
        elif key == "resourceCompartmentId":
            suggest = "resource_compartment_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FleetResourceSelectionRuleSelectionCriteriaRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FleetResourceSelectionRuleSelectionCriteriaRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FleetResourceSelectionRuleSelectionCriteriaRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 basis: Optional[builtins.str] = None,
                 compartment_id: Optional[builtins.str] = None,
                 conditions: Optional[Sequence['outputs.FleetResourceSelectionRuleSelectionCriteriaRuleCondition']] = None,
                 resource_compartment_id: Optional[builtins.str] = None):
        """
        :param builtins.str basis: (Updatable) Based on what the rule is created. It can be based on a resourceProperty or a tag.   If based on a tag, basis will be 'definedTagEquals' If based on a resource property, basis will be 'inventoryProperties'
        :param builtins.str compartment_id: (Updatable) Compartment Id for which the rule is created.
        :param Sequence['FleetResourceSelectionRuleSelectionCriteriaRuleConditionArgs'] conditions: (Updatable) Rule Conditions
        :param builtins.str resource_compartment_id: (Updatable) The Compartment ID to dynamically search resources. Provide the compartment ID to which the rule is applicable.
        """
        if basis is not None:
            pulumi.set(__self__, "basis", basis)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if resource_compartment_id is not None:
            pulumi.set(__self__, "resource_compartment_id", resource_compartment_id)

    @property
    @pulumi.getter
    def basis(self) -> Optional[builtins.str]:
        """
        (Updatable) Based on what the rule is created. It can be based on a resourceProperty or a tag.   If based on a tag, basis will be 'definedTagEquals' If based on a resource property, basis will be 'inventoryProperties'
        """
        return pulumi.get(self, "basis")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[builtins.str]:
        """
        (Updatable) Compartment Id for which the rule is created.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.FleetResourceSelectionRuleSelectionCriteriaRuleCondition']]:
        """
        (Updatable) Rule Conditions
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="resourceCompartmentId")
    def resource_compartment_id(self) -> Optional[builtins.str]:
        """
        (Updatable) The Compartment ID to dynamically search resources. Provide the compartment ID to which the rule is applicable.
        """
        return pulumi.get(self, "resource_compartment_id")


@pulumi.output_type
class FleetResourceSelectionRuleSelectionCriteriaRuleCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "attrGroup":
            suggest = "attr_group"
        elif key == "attrKey":
            suggest = "attr_key"
        elif key == "attrValue":
            suggest = "attr_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FleetResourceSelectionRuleSelectionCriteriaRuleCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FleetResourceSelectionRuleSelectionCriteriaRuleCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FleetResourceSelectionRuleSelectionCriteriaRuleCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 attr_group: Optional[builtins.str] = None,
                 attr_key: Optional[builtins.str] = None,
                 attr_value: Optional[builtins.str] = None):
        """
        :param builtins.str attr_group: (Updatable) Attribute Group. Provide a Tag namespace if the rule is based on a tag. Provide resource type if the rule is based on a resource property.
        :param builtins.str attr_key: (Updatable) Attribute Key.Provide Tag key if the rule is based on a tag. Provide resource property name if the rule is based on a resource property.
        :param builtins.str attr_value: (Updatable) Attribute Value.Provide Tag value if the rule is based on a tag. Provide resource property value if the rule is based on a resource property.
        """
        if attr_group is not None:
            pulumi.set(__self__, "attr_group", attr_group)
        if attr_key is not None:
            pulumi.set(__self__, "attr_key", attr_key)
        if attr_value is not None:
            pulumi.set(__self__, "attr_value", attr_value)

    @property
    @pulumi.getter(name="attrGroup")
    def attr_group(self) -> Optional[builtins.str]:
        """
        (Updatable) Attribute Group. Provide a Tag namespace if the rule is based on a tag. Provide resource type if the rule is based on a resource property.
        """
        return pulumi.get(self, "attr_group")

    @property
    @pulumi.getter(name="attrKey")
    def attr_key(self) -> Optional[builtins.str]:
        """
        (Updatable) Attribute Key.Provide Tag key if the rule is based on a tag. Provide resource property name if the rule is based on a resource property.
        """
        return pulumi.get(self, "attr_key")

    @property
    @pulumi.getter(name="attrValue")
    def attr_value(self) -> Optional[builtins.str]:
        """
        (Updatable) Attribute Value.Provide Tag value if the rule is based on a tag. Provide resource property value if the rule is based on a resource property.
        """
        return pulumi.get(self, "attr_value")


@pulumi.output_type
class OnboardingAppliedPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "systemTags":
            suggest = "system_tags"
        elif key == "timeCreated":
            suggest = "time_created"
        elif key == "timeUpdated":
            suggest = "time_updated"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OnboardingAppliedPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OnboardingAppliedPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OnboardingAppliedPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[builtins.str] = None,
                 statements: Optional[Sequence[builtins.str]] = None,
                 system_tags: Optional[Mapping[str, builtins.str]] = None,
                 time_created: Optional[builtins.str] = None,
                 time_updated: Optional[builtins.str] = None):
        """
        :param builtins.str id: The unique id of the resource.
        :param Sequence[builtins.str] statements: Policy statements.
        :param Mapping[str, builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example:
               `{"orcl-cloud.free-tier-retained": "true"}`
        :param builtins.str time_created: The time this resource was created. An RFC3339 formatted datetime string.
        :param builtins.str time_updated: The time this resource was last updated. An RFC3339 formatted datetime string.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if statements is not None:
            pulumi.set(__self__, "statements", statements)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        """
        The unique id of the resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def statements(self) -> Optional[Sequence[builtins.str]]:
        """
        Policy statements.
        """
        return pulumi.get(self, "statements")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, builtins.str]]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example:
        `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[builtins.str]:
        """
        The time this resource was created. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[builtins.str]:
        """
        The time this resource was last updated. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class PatchArtifactDetails(dict):
    def __init__(__self__, *,
                 category: builtins.str,
                 artifact: Optional['outputs.PatchArtifactDetailsArtifact'] = None,
                 artifacts: Optional[Sequence['outputs.PatchArtifactDetailsArtifact']] = None):
        """
        :param builtins.str category: (Updatable) Artifact category details.
        :param 'PatchArtifactDetailsArtifactArgs' artifact: (Updatable) Patch artifact metadata Details which is common for all platforms.
        :param Sequence['PatchArtifactDetailsArtifactArgs'] artifacts: (Updatable) Artifacts.
        """
        pulumi.set(__self__, "category", category)
        if artifact is not None:
            pulumi.set(__self__, "artifact", artifact)
        if artifacts is not None:
            pulumi.set(__self__, "artifacts", artifacts)

    @property
    @pulumi.getter
    def category(self) -> builtins.str:
        """
        (Updatable) Artifact category details.
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def artifact(self) -> Optional['outputs.PatchArtifactDetailsArtifact']:
        """
        (Updatable) Patch artifact metadata Details which is common for all platforms.
        """
        return pulumi.get(self, "artifact")

    @property
    @pulumi.getter
    def artifacts(self) -> Optional[Sequence['outputs.PatchArtifactDetailsArtifact']]:
        """
        (Updatable) Artifacts.
        """
        return pulumi.get(self, "artifacts")


@pulumi.output_type
class PatchArtifactDetailsArtifact(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "osType":
            suggest = "os_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PatchArtifactDetailsArtifact. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PatchArtifactDetailsArtifact.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PatchArtifactDetailsArtifact.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 architecture: Optional[builtins.str] = None,
                 content: Optional['outputs.PatchArtifactDetailsArtifactContent'] = None,
                 os_type: Optional[builtins.str] = None):
        """
        :param builtins.str architecture: (Updatable) System architecture.
        :param 'PatchArtifactDetailsArtifactContentArgs' content: (Updatable) Content Source details.
        :param builtins.str os_type: (Updatable) The OS type the patch is applicable for.
        """
        if architecture is not None:
            pulumi.set(__self__, "architecture", architecture)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if os_type is not None:
            pulumi.set(__self__, "os_type", os_type)

    @property
    @pulumi.getter
    def architecture(self) -> Optional[builtins.str]:
        """
        (Updatable) System architecture.
        """
        return pulumi.get(self, "architecture")

    @property
    @pulumi.getter
    def content(self) -> Optional['outputs.PatchArtifactDetailsArtifactContent']:
        """
        (Updatable) Content Source details.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[builtins.str]:
        """
        (Updatable) The OS type the patch is applicable for.
        """
        return pulumi.get(self, "os_type")


@pulumi.output_type
class PatchArtifactDetailsArtifactContent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PatchArtifactDetailsArtifactContent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PatchArtifactDetailsArtifactContent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PatchArtifactDetailsArtifactContent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bucket: builtins.str,
                 checksum: builtins.str,
                 namespace: builtins.str,
                 object: builtins.str,
                 source_type: builtins.str):
        """
        :param builtins.str bucket: (Updatable) Bucket Name.
        :param builtins.str checksum: (Updatable) md5 checksum of the artifact.
        :param builtins.str namespace: (Updatable) Namespace.
        :param builtins.str object: (Updatable) Object Name.
        :param builtins.str source_type: (Updatable) Content Source type details.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "checksum", checksum)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter
    def bucket(self) -> builtins.str:
        """
        (Updatable) Bucket Name.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def checksum(self) -> builtins.str:
        """
        (Updatable) md5 checksum of the artifact.
        """
        return pulumi.get(self, "checksum")

    @property
    @pulumi.getter
    def namespace(self) -> builtins.str:
        """
        (Updatable) Namespace.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> builtins.str:
        """
        (Updatable) Object Name.
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> builtins.str:
        """
        (Updatable) Content Source type details.
        """
        return pulumi.get(self, "source_type")


@pulumi.output_type
class PatchDependentPatch(dict):
    def __init__(__self__, *,
                 id: builtins.str):
        """
        :param builtins.str id: (Updatable) The OCID of the resource.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        (Updatable) The OCID of the resource.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class PatchPatchType(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "platformConfigurationId":
            suggest = "platform_configuration_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PatchPatchType. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PatchPatchType.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PatchPatchType.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 platform_configuration_id: builtins.str):
        """
        :param builtins.str platform_configuration_id: (Updatable) PlatformConfiguration Id corresponding to the Patch Type
        """
        pulumi.set(__self__, "platform_configuration_id", platform_configuration_id)

    @property
    @pulumi.getter(name="platformConfigurationId")
    def platform_configuration_id(self) -> builtins.str:
        """
        (Updatable) PlatformConfiguration Id corresponding to the Patch Type
        """
        return pulumi.get(self, "platform_configuration_id")


@pulumi.output_type
class PatchProduct(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "platformConfigurationId":
            suggest = "platform_configuration_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PatchProduct. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PatchProduct.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PatchProduct.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 platform_configuration_id: builtins.str,
                 version: builtins.str):
        """
        :param builtins.str platform_configuration_id: (Updatable) PlatformConfiguration Id corresponding to the Product
        :param builtins.str version: (Updatable) product version.
        """
        pulumi.set(__self__, "platform_configuration_id", platform_configuration_id)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="platformConfigurationId")
    def platform_configuration_id(self) -> builtins.str:
        """
        (Updatable) PlatformConfiguration Id corresponding to the Product
        """
        return pulumi.get(self, "platform_configuration_id")

    @property
    @pulumi.getter
    def version(self) -> builtins.str:
        """
        (Updatable) product version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class PlatformConfigurationConfigCategoryDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configCategory":
            suggest = "config_category"
        elif key == "compatibleProducts":
            suggest = "compatible_products"
        elif key == "instanceId":
            suggest = "instance_id"
        elif key == "instanceName":
            suggest = "instance_name"
        elif key == "patchTypes":
            suggest = "patch_types"
        elif key == "subCategoryDetails":
            suggest = "sub_category_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PlatformConfigurationConfigCategoryDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PlatformConfigurationConfigCategoryDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PlatformConfigurationConfigCategoryDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config_category: builtins.str,
                 compatible_products: Optional[Sequence['outputs.PlatformConfigurationConfigCategoryDetailsCompatibleProduct']] = None,
                 components: Optional[Sequence[builtins.str]] = None,
                 credentials: Optional[Sequence['outputs.PlatformConfigurationConfigCategoryDetailsCredential']] = None,
                 instance_id: Optional[builtins.str] = None,
                 instance_name: Optional[builtins.str] = None,
                 patch_types: Optional[Sequence['outputs.PlatformConfigurationConfigCategoryDetailsPatchType']] = None,
                 products: Optional[Sequence['outputs.PlatformConfigurationConfigCategoryDetailsProduct']] = None,
                 sub_category_details: Optional['outputs.PlatformConfigurationConfigCategoryDetailsSubCategoryDetails'] = None,
                 versions: Optional[Sequence[builtins.str]] = None):
        """
        :param builtins.str config_category: (Updatable) Category of configuration
        :param Sequence['PlatformConfigurationConfigCategoryDetailsCompatibleProductArgs'] compatible_products: (Updatable) Products compatible with this Product. Provide products from the list of other products you have created that are compatible with the present one
        :param Sequence[builtins.str] components: (Updatable) Various components of the Product. For example:The administration server or node manager can be the components of the Oracle WebLogic Application server. Forms server or concurrent manager can be the components of the Oracle E-Business Suite.
        :param Sequence['PlatformConfigurationConfigCategoryDetailsCredentialArgs'] credentials: (Updatable) OCID for the Credential name to be associated with the Product. These are useful for target discovery or lifecycle management activities, for example, Oracle WebLogic admin credentials for Oracle WebLogic Application server.
        :param builtins.str instance_id: (Updatable) The OCID of the resource.
        :param builtins.str instance_name: (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        :param Sequence['PlatformConfigurationConfigCategoryDetailsPatchTypeArgs'] patch_types: (Updatable) Patch Types associated with this Product.
        :param Sequence['PlatformConfigurationConfigCategoryDetailsProductArgs'] products: (Updatable) Products that belong to the stack. For example, Oracle WebLogic and Java for the Oracle Fusion Middleware product stack.
        :param 'PlatformConfigurationConfigCategoryDetailsSubCategoryDetailsArgs' sub_category_details: (Updatable) ProductStack Config Category Details.
        :param Sequence[builtins.str] versions: (Updatable) Versions associated with the PRODUCT .
        """
        pulumi.set(__self__, "config_category", config_category)
        if compatible_products is not None:
            pulumi.set(__self__, "compatible_products", compatible_products)
        if components is not None:
            pulumi.set(__self__, "components", components)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if patch_types is not None:
            pulumi.set(__self__, "patch_types", patch_types)
        if products is not None:
            pulumi.set(__self__, "products", products)
        if sub_category_details is not None:
            pulumi.set(__self__, "sub_category_details", sub_category_details)
        if versions is not None:
            pulumi.set(__self__, "versions", versions)

    @property
    @pulumi.getter(name="configCategory")
    def config_category(self) -> builtins.str:
        """
        (Updatable) Category of configuration
        """
        return pulumi.get(self, "config_category")

    @property
    @pulumi.getter(name="compatibleProducts")
    def compatible_products(self) -> Optional[Sequence['outputs.PlatformConfigurationConfigCategoryDetailsCompatibleProduct']]:
        """
        (Updatable) Products compatible with this Product. Provide products from the list of other products you have created that are compatible with the present one
        """
        return pulumi.get(self, "compatible_products")

    @property
    @pulumi.getter
    def components(self) -> Optional[Sequence[builtins.str]]:
        """
        (Updatable) Various components of the Product. For example:The administration server or node manager can be the components of the Oracle WebLogic Application server. Forms server or concurrent manager can be the components of the Oracle E-Business Suite.
        """
        return pulumi.get(self, "components")

    @property
    @pulumi.getter
    def credentials(self) -> Optional[Sequence['outputs.PlatformConfigurationConfigCategoryDetailsCredential']]:
        """
        (Updatable) OCID for the Credential name to be associated with the Product. These are useful for target discovery or lifecycle management activities, for example, Oracle WebLogic admin credentials for Oracle WebLogic Application server.
        """
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[builtins.str]:
        """
        (Updatable) The OCID of the resource.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[builtins.str]:
        """
        (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="patchTypes")
    def patch_types(self) -> Optional[Sequence['outputs.PlatformConfigurationConfigCategoryDetailsPatchType']]:
        """
        (Updatable) Patch Types associated with this Product.
        """
        return pulumi.get(self, "patch_types")

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence['outputs.PlatformConfigurationConfigCategoryDetailsProduct']]:
        """
        (Updatable) Products that belong to the stack. For example, Oracle WebLogic and Java for the Oracle Fusion Middleware product stack.
        """
        return pulumi.get(self, "products")

    @property
    @pulumi.getter(name="subCategoryDetails")
    def sub_category_details(self) -> Optional['outputs.PlatformConfigurationConfigCategoryDetailsSubCategoryDetails']:
        """
        (Updatable) ProductStack Config Category Details.
        """
        return pulumi.get(self, "sub_category_details")

    @property
    @pulumi.getter
    def versions(self) -> Optional[Sequence[builtins.str]]:
        """
        (Updatable) Versions associated with the PRODUCT .
        """
        return pulumi.get(self, "versions")


@pulumi.output_type
class PlatformConfigurationConfigCategoryDetailsCompatibleProduct(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PlatformConfigurationConfigCategoryDetailsCompatibleProduct. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PlatformConfigurationConfigCategoryDetailsCompatibleProduct.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PlatformConfigurationConfigCategoryDetailsCompatibleProduct.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: Optional[builtins.str] = None,
                 id: Optional[builtins.str] = None):
        """
        :param builtins.str display_name: (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        :param builtins.str id: (Updatable) The OCID of the resource.
        """
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[builtins.str]:
        """
        (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        """
        (Updatable) The OCID of the resource.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class PlatformConfigurationConfigCategoryDetailsCredential(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PlatformConfigurationConfigCategoryDetailsCredential. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PlatformConfigurationConfigCategoryDetailsCredential.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PlatformConfigurationConfigCategoryDetailsCredential.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: Optional[builtins.str] = None,
                 id: Optional[builtins.str] = None):
        """
        :param builtins.str display_name: (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        :param builtins.str id: (Updatable) The OCID of the resource.
        """
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[builtins.str]:
        """
        (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        """
        (Updatable) The OCID of the resource.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class PlatformConfigurationConfigCategoryDetailsPatchType(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PlatformConfigurationConfigCategoryDetailsPatchType. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PlatformConfigurationConfigCategoryDetailsPatchType.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PlatformConfigurationConfigCategoryDetailsPatchType.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: Optional[builtins.str] = None,
                 id: Optional[builtins.str] = None):
        """
        :param builtins.str display_name: (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        :param builtins.str id: (Updatable) The OCID of the resource.
        """
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[builtins.str]:
        """
        (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        """
        (Updatable) The OCID of the resource.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class PlatformConfigurationConfigCategoryDetailsProduct(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PlatformConfigurationConfigCategoryDetailsProduct. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PlatformConfigurationConfigCategoryDetailsProduct.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PlatformConfigurationConfigCategoryDetailsProduct.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: Optional[builtins.str] = None,
                 id: Optional[builtins.str] = None):
        """
        :param builtins.str display_name: (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        :param builtins.str id: (Updatable) The OCID of the resource.
        """
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[builtins.str]:
        """
        (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        """
        (Updatable) The OCID of the resource.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class PlatformConfigurationConfigCategoryDetailsSubCategoryDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subCategory":
            suggest = "sub_category"
        elif key == "patchTypes":
            suggest = "patch_types"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PlatformConfigurationConfigCategoryDetailsSubCategoryDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PlatformConfigurationConfigCategoryDetailsSubCategoryDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PlatformConfigurationConfigCategoryDetailsSubCategoryDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sub_category: builtins.str,
                 components: Optional[Sequence[builtins.str]] = None,
                 credentials: Optional[Sequence['outputs.PlatformConfigurationConfigCategoryDetailsSubCategoryDetailsCredential']] = None,
                 patch_types: Optional[Sequence['outputs.PlatformConfigurationConfigCategoryDetailsSubCategoryDetailsPatchType']] = None,
                 versions: Optional[Sequence[builtins.str]] = None):
        """
        :param builtins.str sub_category: (Updatable) SubCategory of Product Stack.
        :param Sequence[builtins.str] components: (Updatable) Various components of the Product. For example:The administration server or node manager can be the components of the Oracle WebLogic Application server. Forms server or concurrent manager can be the components of the Oracle E-Business Suite.
        :param Sequence['PlatformConfigurationConfigCategoryDetailsSubCategoryDetailsCredentialArgs'] credentials: (Updatable) OCID for the Credential name to be associated with the Product Stack. These are useful for target discovery or lifecycle management activities, for example, Oracle WebLogic admin credentials for Oracle WebLogic Application server.
        :param Sequence['PlatformConfigurationConfigCategoryDetailsSubCategoryDetailsPatchTypeArgs'] patch_types: (Updatable) Patch Types associated with this Product Stack which will be considered as Product.
        :param Sequence[builtins.str] versions: (Updatable) Versions associated with the PRODUCT .
        """
        pulumi.set(__self__, "sub_category", sub_category)
        if components is not None:
            pulumi.set(__self__, "components", components)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if patch_types is not None:
            pulumi.set(__self__, "patch_types", patch_types)
        if versions is not None:
            pulumi.set(__self__, "versions", versions)

    @property
    @pulumi.getter(name="subCategory")
    def sub_category(self) -> builtins.str:
        """
        (Updatable) SubCategory of Product Stack.
        """
        return pulumi.get(self, "sub_category")

    @property
    @pulumi.getter
    def components(self) -> Optional[Sequence[builtins.str]]:
        """
        (Updatable) Various components of the Product. For example:The administration server or node manager can be the components of the Oracle WebLogic Application server. Forms server or concurrent manager can be the components of the Oracle E-Business Suite.
        """
        return pulumi.get(self, "components")

    @property
    @pulumi.getter
    def credentials(self) -> Optional[Sequence['outputs.PlatformConfigurationConfigCategoryDetailsSubCategoryDetailsCredential']]:
        """
        (Updatable) OCID for the Credential name to be associated with the Product Stack. These are useful for target discovery or lifecycle management activities, for example, Oracle WebLogic admin credentials for Oracle WebLogic Application server.
        """
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="patchTypes")
    def patch_types(self) -> Optional[Sequence['outputs.PlatformConfigurationConfigCategoryDetailsSubCategoryDetailsPatchType']]:
        """
        (Updatable) Patch Types associated with this Product Stack which will be considered as Product.
        """
        return pulumi.get(self, "patch_types")

    @property
    @pulumi.getter
    def versions(self) -> Optional[Sequence[builtins.str]]:
        """
        (Updatable) Versions associated with the PRODUCT .
        """
        return pulumi.get(self, "versions")


@pulumi.output_type
class PlatformConfigurationConfigCategoryDetailsSubCategoryDetailsCredential(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PlatformConfigurationConfigCategoryDetailsSubCategoryDetailsCredential. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PlatformConfigurationConfigCategoryDetailsSubCategoryDetailsCredential.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PlatformConfigurationConfigCategoryDetailsSubCategoryDetailsCredential.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: Optional[builtins.str] = None,
                 id: Optional[builtins.str] = None):
        """
        :param builtins.str display_name: (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        :param builtins.str id: (Updatable) The OCID of the resource.
        """
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[builtins.str]:
        """
        (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        """
        (Updatable) The OCID of the resource.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class PlatformConfigurationConfigCategoryDetailsSubCategoryDetailsPatchType(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PlatformConfigurationConfigCategoryDetailsSubCategoryDetailsPatchType. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PlatformConfigurationConfigCategoryDetailsSubCategoryDetailsPatchType.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PlatformConfigurationConfigCategoryDetailsSubCategoryDetailsPatchType.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: Optional[builtins.str] = None,
                 id: Optional[builtins.str] = None):
        """
        :param builtins.str display_name: (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        :param builtins.str id: (Updatable) The OCID of the resource.
        """
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[builtins.str]:
        """
        (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        """
        (Updatable) The OCID of the resource.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class ProvisionDeployedResource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceInstanceLists":
            suggest = "resource_instance_lists"
        elif key == "resourceName":
            suggest = "resource_name"
        elif key == "resourceProvider":
            suggest = "resource_provider"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProvisionDeployedResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProvisionDeployedResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProvisionDeployedResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mode: Optional[builtins.str] = None,
                 resource_instance_lists: Optional[Sequence['outputs.ProvisionDeployedResourceResourceInstanceList']] = None,
                 resource_name: Optional[builtins.str] = None,
                 resource_provider: Optional[builtins.str] = None,
                 resource_type: Optional[builtins.str] = None):
        """
        :param builtins.str mode: The mode of the resource. Example: "managed"
        :param Sequence['ProvisionDeployedResourceResourceInstanceListArgs'] resource_instance_lists: Collection of InstanceSummary
        :param builtins.str resource_name: The name of the resource
        :param builtins.str resource_provider: The name of the Provider
        :param builtins.str resource_type: The provider resource type. Must be supported by the Oracle Cloud Infrastructure provider. Example: Core.Instance
        """
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if resource_instance_lists is not None:
            pulumi.set(__self__, "resource_instance_lists", resource_instance_lists)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if resource_provider is not None:
            pulumi.set(__self__, "resource_provider", resource_provider)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter
    def mode(self) -> Optional[builtins.str]:
        """
        The mode of the resource. Example: "managed"
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="resourceInstanceLists")
    def resource_instance_lists(self) -> Optional[Sequence['outputs.ProvisionDeployedResourceResourceInstanceList']]:
        """
        Collection of InstanceSummary
        """
        return pulumi.get(self, "resource_instance_lists")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[builtins.str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "resource_name")

    @property
    @pulumi.getter(name="resourceProvider")
    def resource_provider(self) -> Optional[builtins.str]:
        """
        The name of the Provider
        """
        return pulumi.get(self, "resource_provider")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[builtins.str]:
        """
        The provider resource type. Must be supported by the Oracle Cloud Infrastructure provider. Example: Core.Instance
        """
        return pulumi.get(self, "resource_type")


@pulumi.output_type
class ProvisionDeployedResourceResourceInstanceList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compartmentId":
            suggest = "compartment_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProvisionDeployedResourceResourceInstanceList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProvisionDeployedResourceResourceInstanceList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProvisionDeployedResourceResourceInstanceList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compartment_id: Optional[builtins.str] = None,
                 id: Optional[builtins.str] = None,
                 state: Optional[builtins.str] = None):
        """
        :param builtins.str compartment_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment to create the FamProvision in.
        :param builtins.str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the FamProvision.
        :param builtins.str state: The current state of the FamProvision.
        """
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[builtins.str]:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment to create the FamProvision in.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the FamProvision.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def state(self) -> Optional[builtins.str]:
        """
        The current state of the FamProvision.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class ProvisionTfOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isSensitive":
            suggest = "is_sensitive"
        elif key == "outputDescription":
            suggest = "output_description"
        elif key == "outputName":
            suggest = "output_name"
        elif key == "outputType":
            suggest = "output_type"
        elif key == "outputValue":
            suggest = "output_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProvisionTfOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProvisionTfOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProvisionTfOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_sensitive: Optional[builtins.bool] = None,
                 output_description: Optional[builtins.str] = None,
                 output_name: Optional[builtins.str] = None,
                 output_type: Optional[builtins.str] = None,
                 output_value: Optional[builtins.str] = None):
        """
        :param builtins.bool is_sensitive: The indicator if the data for this parameter is sensitive (e.g. should the data be hidden in UI, encrypted if stored, etc.)
        :param builtins.str output_description: The output description
        :param builtins.str output_name: The output name
        :param builtins.str output_type: The output type
        :param builtins.str output_value: The output value
        """
        if is_sensitive is not None:
            pulumi.set(__self__, "is_sensitive", is_sensitive)
        if output_description is not None:
            pulumi.set(__self__, "output_description", output_description)
        if output_name is not None:
            pulumi.set(__self__, "output_name", output_name)
        if output_type is not None:
            pulumi.set(__self__, "output_type", output_type)
        if output_value is not None:
            pulumi.set(__self__, "output_value", output_value)

    @property
    @pulumi.getter(name="isSensitive")
    def is_sensitive(self) -> Optional[builtins.bool]:
        """
        The indicator if the data for this parameter is sensitive (e.g. should the data be hidden in UI, encrypted if stored, etc.)
        """
        return pulumi.get(self, "is_sensitive")

    @property
    @pulumi.getter(name="outputDescription")
    def output_description(self) -> Optional[builtins.str]:
        """
        The output description
        """
        return pulumi.get(self, "output_description")

    @property
    @pulumi.getter(name="outputName")
    def output_name(self) -> Optional[builtins.str]:
        """
        The output name
        """
        return pulumi.get(self, "output_name")

    @property
    @pulumi.getter(name="outputType")
    def output_type(self) -> Optional[builtins.str]:
        """
        The output type
        """
        return pulumi.get(self, "output_type")

    @property
    @pulumi.getter(name="outputValue")
    def output_value(self) -> Optional[builtins.str]:
        """
        The output value
        """
        return pulumi.get(self, "output_value")


@pulumi.output_type
class RunbookRunbookVersion(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "executionWorkflowDetails":
            suggest = "execution_workflow_details"
        elif key == "isLatest":
            suggest = "is_latest"
        elif key == "rollbackWorkflowDetails":
            suggest = "rollback_workflow_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookRunbookVersion. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookRunbookVersion.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookRunbookVersion.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 execution_workflow_details: 'outputs.RunbookRunbookVersionExecutionWorkflowDetails',
                 groups: Sequence['outputs.RunbookRunbookVersionGroup'],
                 tasks: Sequence['outputs.RunbookRunbookVersionTask'],
                 is_latest: Optional[builtins.bool] = None,
                 rollback_workflow_details: Optional['outputs.RunbookRunbookVersionRollbackWorkflowDetails'] = None,
                 version: Optional[builtins.str] = None):
        """
        :param 'RunbookRunbookVersionExecutionWorkflowDetailsArgs' execution_workflow_details: Execution Workflow details.
        :param Sequence['RunbookRunbookVersionGroupArgs'] groups: The groups of the runbook.
        :param Sequence['RunbookRunbookVersionTaskArgs'] tasks: A set of tasks to execute in the runbook.
        :param builtins.bool is_latest: Is this version the latest?
        :param 'RunbookRunbookVersionRollbackWorkflowDetailsArgs' rollback_workflow_details: Rollback Workflow details.
        :param builtins.str version: The version of the runbook.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        pulumi.set(__self__, "execution_workflow_details", execution_workflow_details)
        pulumi.set(__self__, "groups", groups)
        pulumi.set(__self__, "tasks", tasks)
        if is_latest is not None:
            pulumi.set(__self__, "is_latest", is_latest)
        if rollback_workflow_details is not None:
            pulumi.set(__self__, "rollback_workflow_details", rollback_workflow_details)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="executionWorkflowDetails")
    def execution_workflow_details(self) -> 'outputs.RunbookRunbookVersionExecutionWorkflowDetails':
        """
        Execution Workflow details.
        """
        return pulumi.get(self, "execution_workflow_details")

    @property
    @pulumi.getter
    def groups(self) -> Sequence['outputs.RunbookRunbookVersionGroup']:
        """
        The groups of the runbook.
        """
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter
    def tasks(self) -> Sequence['outputs.RunbookRunbookVersionTask']:
        """
        A set of tasks to execute in the runbook.
        """
        return pulumi.get(self, "tasks")

    @property
    @pulumi.getter(name="isLatest")
    def is_latest(self) -> Optional[builtins.bool]:
        """
        Is this version the latest?
        """
        return pulumi.get(self, "is_latest")

    @property
    @pulumi.getter(name="rollbackWorkflowDetails")
    def rollback_workflow_details(self) -> Optional['outputs.RunbookRunbookVersionRollbackWorkflowDetails']:
        """
        Rollback Workflow details.
        """
        return pulumi.get(self, "rollback_workflow_details")

    @property
    @pulumi.getter
    def version(self) -> Optional[builtins.str]:
        """
        The version of the runbook.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class RunbookRunbookVersionExecutionWorkflowDetails(dict):
    def __init__(__self__, *,
                 workflows: Sequence['outputs.RunbookRunbookVersionExecutionWorkflowDetailsWorkflow']):
        """
        :param Sequence['RunbookRunbookVersionExecutionWorkflowDetailsWorkflowArgs'] workflows: Execution Workflow for the runbook.
        """
        pulumi.set(__self__, "workflows", workflows)

    @property
    @pulumi.getter
    def workflows(self) -> Sequence['outputs.RunbookRunbookVersionExecutionWorkflowDetailsWorkflow']:
        """
        Execution Workflow for the runbook.
        """
        return pulumi.get(self, "workflows")


@pulumi.output_type
class RunbookRunbookVersionExecutionWorkflowDetailsWorkflow(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupName":
            suggest = "group_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookRunbookVersionExecutionWorkflowDetailsWorkflow. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookRunbookVersionExecutionWorkflowDetailsWorkflow.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookRunbookVersionExecutionWorkflowDetailsWorkflow.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group_name: builtins.str,
                 steps: Sequence['outputs.RunbookRunbookVersionExecutionWorkflowDetailsWorkflowStep'],
                 type: builtins.str):
        """
        :param builtins.str group_name: Name of the group.
        :param Sequence['RunbookRunbookVersionExecutionWorkflowDetailsWorkflowStepArgs'] steps: Steps within the Group.
        :param builtins.str type: Workflow Group  Details.
        """
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "steps", steps)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> builtins.str:
        """
        Name of the group.
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter
    def steps(self) -> Sequence['outputs.RunbookRunbookVersionExecutionWorkflowDetailsWorkflowStep']:
        """
        Steps within the Group.
        """
        return pulumi.get(self, "steps")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Workflow Group  Details.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class RunbookRunbookVersionExecutionWorkflowDetailsWorkflowStep(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupName":
            suggest = "group_name"
        elif key == "stepName":
            suggest = "step_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookRunbookVersionExecutionWorkflowDetailsWorkflowStep. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookRunbookVersionExecutionWorkflowDetailsWorkflowStep.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookRunbookVersionExecutionWorkflowDetailsWorkflowStep.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: builtins.str,
                 group_name: Optional[builtins.str] = None,
                 step_name: Optional[builtins.str] = None,
                 steps: Optional[Sequence[builtins.str]] = None):
        """
        :param builtins.str type: Content Source Details.
        :param builtins.str group_name: Name of the group.
        :param builtins.str step_name: Provide StepName for the Task.
        :param Sequence[builtins.str] steps: Tasks within the Group. Provide the stepName for all applicable tasks.
        """
        pulumi.set(__self__, "type", type)
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if step_name is not None:
            pulumi.set(__self__, "step_name", step_name)
        if steps is not None:
            pulumi.set(__self__, "steps", steps)

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Content Source Details.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[builtins.str]:
        """
        Name of the group.
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> Optional[builtins.str]:
        """
        Provide StepName for the Task.
        """
        return pulumi.get(self, "step_name")

    @property
    @pulumi.getter
    def steps(self) -> Optional[Sequence[builtins.str]]:
        """
        Tasks within the Group. Provide the stepName for all applicable tasks.
        """
        return pulumi.get(self, "steps")


@pulumi.output_type
class RunbookRunbookVersionGroup(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 type: builtins.str,
                 properties: Optional['outputs.RunbookRunbookVersionGroupProperties'] = None):
        """
        :param builtins.str name: The name of the group.
        :param builtins.str type: The type of the group. PARALLEL_TASK_GROUP : Helps to execute tasks parallelly inside a resource. PARALLEL_RESOURCE_GROUP : Executes tasks across resources parallelly. ROLLING_RESOURCE_GROUP : Executes tasks across resources in a rolling order.
        :param 'RunbookRunbookVersionGroupPropertiesArgs' properties: The properties of the component.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the group.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of the group. PARALLEL_TASK_GROUP : Helps to execute tasks parallelly inside a resource. PARALLEL_RESOURCE_GROUP : Executes tasks across resources parallelly. ROLLING_RESOURCE_GROUP : Executes tasks across resources in a rolling order.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def properties(self) -> Optional['outputs.RunbookRunbookVersionGroupProperties']:
        """
        The properties of the component.
        """
        return pulumi.get(self, "properties")


@pulumi.output_type
class RunbookRunbookVersionGroupProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionOnFailure":
            suggest = "action_on_failure"
        elif key == "notificationPreferences":
            suggest = "notification_preferences"
        elif key == "pauseDetails":
            suggest = "pause_details"
        elif key == "preCondition":
            suggest = "pre_condition"
        elif key == "runOn":
            suggest = "run_on"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookRunbookVersionGroupProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookRunbookVersionGroupProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookRunbookVersionGroupProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action_on_failure: builtins.str,
                 notification_preferences: Optional['outputs.RunbookRunbookVersionGroupPropertiesNotificationPreferences'] = None,
                 pause_details: Optional['outputs.RunbookRunbookVersionGroupPropertiesPauseDetails'] = None,
                 pre_condition: Optional[builtins.str] = None,
                 run_on: Optional['outputs.RunbookRunbookVersionGroupPropertiesRunOn'] = None):
        """
        :param builtins.str action_on_failure: The action to be taken in case of a failure.
        :param 'RunbookRunbookVersionGroupPropertiesNotificationPreferencesArgs' notification_preferences: Preferences to send notifications on the task activities.
        :param 'RunbookRunbookVersionGroupPropertiesPauseDetailsArgs' pause_details: Pause Details
        :param builtins.str pre_condition: Build control flow conditions that determine the relevance of the task execution.
        :param 'RunbookRunbookVersionGroupPropertiesRunOnArgs' run_on: The runon conditions
        """
        pulumi.set(__self__, "action_on_failure", action_on_failure)
        if notification_preferences is not None:
            pulumi.set(__self__, "notification_preferences", notification_preferences)
        if pause_details is not None:
            pulumi.set(__self__, "pause_details", pause_details)
        if pre_condition is not None:
            pulumi.set(__self__, "pre_condition", pre_condition)
        if run_on is not None:
            pulumi.set(__self__, "run_on", run_on)

    @property
    @pulumi.getter(name="actionOnFailure")
    def action_on_failure(self) -> builtins.str:
        """
        The action to be taken in case of a failure.
        """
        return pulumi.get(self, "action_on_failure")

    @property
    @pulumi.getter(name="notificationPreferences")
    def notification_preferences(self) -> Optional['outputs.RunbookRunbookVersionGroupPropertiesNotificationPreferences']:
        """
        Preferences to send notifications on the task activities.
        """
        return pulumi.get(self, "notification_preferences")

    @property
    @pulumi.getter(name="pauseDetails")
    def pause_details(self) -> Optional['outputs.RunbookRunbookVersionGroupPropertiesPauseDetails']:
        """
        Pause Details
        """
        return pulumi.get(self, "pause_details")

    @property
    @pulumi.getter(name="preCondition")
    def pre_condition(self) -> Optional[builtins.str]:
        """
        Build control flow conditions that determine the relevance of the task execution.
        """
        return pulumi.get(self, "pre_condition")

    @property
    @pulumi.getter(name="runOn")
    def run_on(self) -> Optional['outputs.RunbookRunbookVersionGroupPropertiesRunOn']:
        """
        The runon conditions
        """
        return pulumi.get(self, "run_on")


@pulumi.output_type
class RunbookRunbookVersionGroupPropertiesNotificationPreferences(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "shouldNotifyOnPause":
            suggest = "should_notify_on_pause"
        elif key == "shouldNotifyOnTaskFailure":
            suggest = "should_notify_on_task_failure"
        elif key == "shouldNotifyOnTaskSuccess":
            suggest = "should_notify_on_task_success"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookRunbookVersionGroupPropertiesNotificationPreferences. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookRunbookVersionGroupPropertiesNotificationPreferences.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookRunbookVersionGroupPropertiesNotificationPreferences.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 should_notify_on_pause: Optional[builtins.bool] = None,
                 should_notify_on_task_failure: Optional[builtins.bool] = None,
                 should_notify_on_task_success: Optional[builtins.bool] = None):
        """
        :param builtins.bool should_notify_on_pause: Enables notification on pause.
        :param builtins.bool should_notify_on_task_failure: Enables or disables notification on Task Failures.
        :param builtins.bool should_notify_on_task_success: Enables or disables notification on Task Success.
        """
        if should_notify_on_pause is not None:
            pulumi.set(__self__, "should_notify_on_pause", should_notify_on_pause)
        if should_notify_on_task_failure is not None:
            pulumi.set(__self__, "should_notify_on_task_failure", should_notify_on_task_failure)
        if should_notify_on_task_success is not None:
            pulumi.set(__self__, "should_notify_on_task_success", should_notify_on_task_success)

    @property
    @pulumi.getter(name="shouldNotifyOnPause")
    def should_notify_on_pause(self) -> Optional[builtins.bool]:
        """
        Enables notification on pause.
        """
        return pulumi.get(self, "should_notify_on_pause")

    @property
    @pulumi.getter(name="shouldNotifyOnTaskFailure")
    def should_notify_on_task_failure(self) -> Optional[builtins.bool]:
        """
        Enables or disables notification on Task Failures.
        """
        return pulumi.get(self, "should_notify_on_task_failure")

    @property
    @pulumi.getter(name="shouldNotifyOnTaskSuccess")
    def should_notify_on_task_success(self) -> Optional[builtins.bool]:
        """
        Enables or disables notification on Task Success.
        """
        return pulumi.get(self, "should_notify_on_task_success")


@pulumi.output_type
class RunbookRunbookVersionGroupPropertiesPauseDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "durationInMinutes":
            suggest = "duration_in_minutes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookRunbookVersionGroupPropertiesPauseDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookRunbookVersionGroupPropertiesPauseDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookRunbookVersionGroupPropertiesPauseDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kind: builtins.str,
                 duration_in_minutes: Optional[builtins.int] = None):
        """
        :param builtins.str kind: Pause based On.
        :param builtins.int duration_in_minutes: Time in minutes to apply Pause.
        """
        pulumi.set(__self__, "kind", kind)
        if duration_in_minutes is not None:
            pulumi.set(__self__, "duration_in_minutes", duration_in_minutes)

    @property
    @pulumi.getter
    def kind(self) -> builtins.str:
        """
        Pause based On.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="durationInMinutes")
    def duration_in_minutes(self) -> Optional[builtins.int]:
        """
        Time in minutes to apply Pause.
        """
        return pulumi.get(self, "duration_in_minutes")


@pulumi.output_type
class RunbookRunbookVersionGroupPropertiesRunOn(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "previousTaskInstanceDetails":
            suggest = "previous_task_instance_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookRunbookVersionGroupPropertiesRunOn. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookRunbookVersionGroupPropertiesRunOn.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookRunbookVersionGroupPropertiesRunOn.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kind: builtins.str,
                 condition: Optional[builtins.str] = None,
                 host: Optional[builtins.str] = None,
                 previous_task_instance_details: Optional[Sequence['outputs.RunbookRunbookVersionGroupPropertiesRunOnPreviousTaskInstanceDetail']] = None):
        """
        :param builtins.str kind: Run on based On.
        :param builtins.str condition: Build control flow conditions that determine the relevance of the task execution.
        :param builtins.str host: OCID of the self hosted instance.
        :param Sequence['RunbookRunbookVersionGroupPropertiesRunOnPreviousTaskInstanceDetailArgs'] previous_task_instance_details: Previous Task Instance Details
        """
        pulumi.set(__self__, "kind", kind)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if previous_task_instance_details is not None:
            pulumi.set(__self__, "previous_task_instance_details", previous_task_instance_details)

    @property
    @pulumi.getter
    def kind(self) -> builtins.str:
        """
        Run on based On.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def condition(self) -> Optional[builtins.str]:
        """
        Build control flow conditions that determine the relevance of the task execution.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def host(self) -> Optional[builtins.str]:
        """
        OCID of the self hosted instance.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="previousTaskInstanceDetails")
    def previous_task_instance_details(self) -> Optional[Sequence['outputs.RunbookRunbookVersionGroupPropertiesRunOnPreviousTaskInstanceDetail']]:
        """
        Previous Task Instance Details
        """
        return pulumi.get(self, "previous_task_instance_details")


@pulumi.output_type
class RunbookRunbookVersionGroupPropertiesRunOnPreviousTaskInstanceDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "outputVariableDetails":
            suggest = "output_variable_details"
        elif key == "resourceId":
            suggest = "resource_id"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookRunbookVersionGroupPropertiesRunOnPreviousTaskInstanceDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookRunbookVersionGroupPropertiesRunOnPreviousTaskInstanceDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookRunbookVersionGroupPropertiesRunOnPreviousTaskInstanceDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 output_variable_details: Optional['outputs.RunbookRunbookVersionGroupPropertiesRunOnPreviousTaskInstanceDetailOutputVariableDetails'] = None,
                 resource_id: Optional[builtins.str] = None,
                 resource_type: Optional[builtins.str] = None):
        """
        :param 'RunbookRunbookVersionGroupPropertiesRunOnPreviousTaskInstanceDetailOutputVariableDetailsArgs' output_variable_details: The details of the output variable that will be used for mapping.
        :param builtins.str resource_id: Resource Ocid.
        :param builtins.str resource_type: Resource Type.
        """
        if output_variable_details is not None:
            pulumi.set(__self__, "output_variable_details", output_variable_details)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter(name="outputVariableDetails")
    def output_variable_details(self) -> Optional['outputs.RunbookRunbookVersionGroupPropertiesRunOnPreviousTaskInstanceDetailOutputVariableDetails']:
        """
        The details of the output variable that will be used for mapping.
        """
        return pulumi.get(self, "output_variable_details")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[builtins.str]:
        """
        Resource Ocid.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[builtins.str]:
        """
        Resource Type.
        """
        return pulumi.get(self, "resource_type")


@pulumi.output_type
class RunbookRunbookVersionGroupPropertiesRunOnPreviousTaskInstanceDetailOutputVariableDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "outputVariableName":
            suggest = "output_variable_name"
        elif key == "stepName":
            suggest = "step_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookRunbookVersionGroupPropertiesRunOnPreviousTaskInstanceDetailOutputVariableDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookRunbookVersionGroupPropertiesRunOnPreviousTaskInstanceDetailOutputVariableDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookRunbookVersionGroupPropertiesRunOnPreviousTaskInstanceDetailOutputVariableDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 output_variable_name: Optional[builtins.str] = None,
                 step_name: Optional[builtins.str] = None):
        """
        :param builtins.str output_variable_name: The name of the output variable whose value has to be mapped.
        :param builtins.str step_name: The name of the task step the output variable belongs to.
        """
        if output_variable_name is not None:
            pulumi.set(__self__, "output_variable_name", output_variable_name)
        if step_name is not None:
            pulumi.set(__self__, "step_name", step_name)

    @property
    @pulumi.getter(name="outputVariableName")
    def output_variable_name(self) -> Optional[builtins.str]:
        """
        The name of the output variable whose value has to be mapped.
        """
        return pulumi.get(self, "output_variable_name")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> Optional[builtins.str]:
        """
        The name of the task step the output variable belongs to.
        """
        return pulumi.get(self, "step_name")


@pulumi.output_type
class RunbookRunbookVersionRollbackWorkflowDetails(dict):
    def __init__(__self__, *,
                 scope: builtins.str,
                 workflows: Sequence['outputs.RunbookRunbookVersionRollbackWorkflowDetailsWorkflow']):
        """
        :param builtins.str scope: rollback Scope
        :param Sequence['RunbookRunbookVersionRollbackWorkflowDetailsWorkflowArgs'] workflows: Rollback Workflow for the runbook.
        """
        pulumi.set(__self__, "scope", scope)
        pulumi.set(__self__, "workflows", workflows)

    @property
    @pulumi.getter
    def scope(self) -> builtins.str:
        """
        rollback Scope
        """
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter
    def workflows(self) -> Sequence['outputs.RunbookRunbookVersionRollbackWorkflowDetailsWorkflow']:
        """
        Rollback Workflow for the runbook.
        """
        return pulumi.get(self, "workflows")


@pulumi.output_type
class RunbookRunbookVersionRollbackWorkflowDetailsWorkflow(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupName":
            suggest = "group_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookRunbookVersionRollbackWorkflowDetailsWorkflow. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookRunbookVersionRollbackWorkflowDetailsWorkflow.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookRunbookVersionRollbackWorkflowDetailsWorkflow.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group_name: builtins.str,
                 steps: Sequence['outputs.RunbookRunbookVersionRollbackWorkflowDetailsWorkflowStep'],
                 type: builtins.str):
        """
        :param builtins.str group_name: Name of the group.
        :param Sequence['RunbookRunbookVersionRollbackWorkflowDetailsWorkflowStepArgs'] steps: Steps within the Group.
        :param builtins.str type: Workflow Group  Details.
        """
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "steps", steps)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> builtins.str:
        """
        Name of the group.
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter
    def steps(self) -> Sequence['outputs.RunbookRunbookVersionRollbackWorkflowDetailsWorkflowStep']:
        """
        Steps within the Group.
        """
        return pulumi.get(self, "steps")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Workflow Group  Details.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class RunbookRunbookVersionRollbackWorkflowDetailsWorkflowStep(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupName":
            suggest = "group_name"
        elif key == "stepName":
            suggest = "step_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookRunbookVersionRollbackWorkflowDetailsWorkflowStep. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookRunbookVersionRollbackWorkflowDetailsWorkflowStep.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookRunbookVersionRollbackWorkflowDetailsWorkflowStep.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: builtins.str,
                 group_name: Optional[builtins.str] = None,
                 step_name: Optional[builtins.str] = None,
                 steps: Optional[Sequence[builtins.str]] = None):
        """
        :param builtins.str type: Content Source Details.
        :param builtins.str group_name: Name of the group.
        :param builtins.str step_name: Provide StepName for the Task.
        :param Sequence[builtins.str] steps: Tasks within the Group. Provide the stepName for all applicable tasks.
        """
        pulumi.set(__self__, "type", type)
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if step_name is not None:
            pulumi.set(__self__, "step_name", step_name)
        if steps is not None:
            pulumi.set(__self__, "steps", steps)

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Content Source Details.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[builtins.str]:
        """
        Name of the group.
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> Optional[builtins.str]:
        """
        Provide StepName for the Task.
        """
        return pulumi.get(self, "step_name")

    @property
    @pulumi.getter
    def steps(self) -> Optional[Sequence[builtins.str]]:
        """
        Tasks within the Group. Provide the stepName for all applicable tasks.
        """
        return pulumi.get(self, "steps")


@pulumi.output_type
class RunbookRunbookVersionTask(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "stepName":
            suggest = "step_name"
        elif key == "taskRecordDetails":
            suggest = "task_record_details"
        elif key == "outputVariableMappings":
            suggest = "output_variable_mappings"
        elif key == "stepProperties":
            suggest = "step_properties"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookRunbookVersionTask. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookRunbookVersionTask.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookRunbookVersionTask.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 step_name: builtins.str,
                 task_record_details: 'outputs.RunbookRunbookVersionTaskTaskRecordDetails',
                 output_variable_mappings: Optional[Sequence['outputs.RunbookRunbookVersionTaskOutputVariableMapping']] = None,
                 step_properties: Optional['outputs.RunbookRunbookVersionTaskStepProperties'] = None):
        """
        :param builtins.str step_name: The name of the task step.
        :param 'RunbookRunbookVersionTaskTaskRecordDetailsArgs' task_record_details: The details of the task.
        :param Sequence['RunbookRunbookVersionTaskOutputVariableMappingArgs'] output_variable_mappings: Mapping output variables of previous tasks to the input variables of the current task.
        :param 'RunbookRunbookVersionTaskStepPropertiesArgs' step_properties: The properties of the component.
        """
        pulumi.set(__self__, "step_name", step_name)
        pulumi.set(__self__, "task_record_details", task_record_details)
        if output_variable_mappings is not None:
            pulumi.set(__self__, "output_variable_mappings", output_variable_mappings)
        if step_properties is not None:
            pulumi.set(__self__, "step_properties", step_properties)

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> builtins.str:
        """
        The name of the task step.
        """
        return pulumi.get(self, "step_name")

    @property
    @pulumi.getter(name="taskRecordDetails")
    def task_record_details(self) -> 'outputs.RunbookRunbookVersionTaskTaskRecordDetails':
        """
        The details of the task.
        """
        return pulumi.get(self, "task_record_details")

    @property
    @pulumi.getter(name="outputVariableMappings")
    def output_variable_mappings(self) -> Optional[Sequence['outputs.RunbookRunbookVersionTaskOutputVariableMapping']]:
        """
        Mapping output variables of previous tasks to the input variables of the current task.
        """
        return pulumi.get(self, "output_variable_mappings")

    @property
    @pulumi.getter(name="stepProperties")
    def step_properties(self) -> Optional['outputs.RunbookRunbookVersionTaskStepProperties']:
        """
        The properties of the component.
        """
        return pulumi.get(self, "step_properties")


@pulumi.output_type
class RunbookRunbookVersionTaskOutputVariableMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "outputVariableDetails":
            suggest = "output_variable_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookRunbookVersionTaskOutputVariableMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookRunbookVersionTaskOutputVariableMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookRunbookVersionTaskOutputVariableMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: builtins.str,
                 output_variable_details: 'outputs.RunbookRunbookVersionTaskOutputVariableMappingOutputVariableDetails'):
        """
        :param builtins.str name: The name of the input variable.
        :param 'RunbookRunbookVersionTaskOutputVariableMappingOutputVariableDetailsArgs' output_variable_details: The details of the output variable that will be used for mapping.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "output_variable_details", output_variable_details)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the input variable.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="outputVariableDetails")
    def output_variable_details(self) -> 'outputs.RunbookRunbookVersionTaskOutputVariableMappingOutputVariableDetails':
        """
        The details of the output variable that will be used for mapping.
        """
        return pulumi.get(self, "output_variable_details")


@pulumi.output_type
class RunbookRunbookVersionTaskOutputVariableMappingOutputVariableDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "outputVariableName":
            suggest = "output_variable_name"
        elif key == "stepName":
            suggest = "step_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookRunbookVersionTaskOutputVariableMappingOutputVariableDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookRunbookVersionTaskOutputVariableMappingOutputVariableDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookRunbookVersionTaskOutputVariableMappingOutputVariableDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 output_variable_name: builtins.str,
                 step_name: builtins.str):
        """
        :param builtins.str output_variable_name: The name of the output variable whose value has to be mapped.
        :param builtins.str step_name: The name of the task step the output variable belongs to.
        """
        pulumi.set(__self__, "output_variable_name", output_variable_name)
        pulumi.set(__self__, "step_name", step_name)

    @property
    @pulumi.getter(name="outputVariableName")
    def output_variable_name(self) -> builtins.str:
        """
        The name of the output variable whose value has to be mapped.
        """
        return pulumi.get(self, "output_variable_name")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> builtins.str:
        """
        The name of the task step the output variable belongs to.
        """
        return pulumi.get(self, "step_name")


@pulumi.output_type
class RunbookRunbookVersionTaskStepProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionOnFailure":
            suggest = "action_on_failure"
        elif key == "notificationPreferences":
            suggest = "notification_preferences"
        elif key == "pauseDetails":
            suggest = "pause_details"
        elif key == "preCondition":
            suggest = "pre_condition"
        elif key == "runOn":
            suggest = "run_on"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookRunbookVersionTaskStepProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookRunbookVersionTaskStepProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookRunbookVersionTaskStepProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action_on_failure: builtins.str,
                 notification_preferences: Optional['outputs.RunbookRunbookVersionTaskStepPropertiesNotificationPreferences'] = None,
                 pause_details: Optional['outputs.RunbookRunbookVersionTaskStepPropertiesPauseDetails'] = None,
                 pre_condition: Optional[builtins.str] = None,
                 run_on: Optional['outputs.RunbookRunbookVersionTaskStepPropertiesRunOn'] = None):
        """
        :param builtins.str action_on_failure: The action to be taken in case of a failure.
        :param 'RunbookRunbookVersionTaskStepPropertiesNotificationPreferencesArgs' notification_preferences: Preferences to send notifications on the task activities.
        :param 'RunbookRunbookVersionTaskStepPropertiesPauseDetailsArgs' pause_details: Pause Details
        :param builtins.str pre_condition: Build control flow conditions that determine the relevance of the task execution.
        :param 'RunbookRunbookVersionTaskStepPropertiesRunOnArgs' run_on: The runon conditions
        """
        pulumi.set(__self__, "action_on_failure", action_on_failure)
        if notification_preferences is not None:
            pulumi.set(__self__, "notification_preferences", notification_preferences)
        if pause_details is not None:
            pulumi.set(__self__, "pause_details", pause_details)
        if pre_condition is not None:
            pulumi.set(__self__, "pre_condition", pre_condition)
        if run_on is not None:
            pulumi.set(__self__, "run_on", run_on)

    @property
    @pulumi.getter(name="actionOnFailure")
    def action_on_failure(self) -> builtins.str:
        """
        The action to be taken in case of a failure.
        """
        return pulumi.get(self, "action_on_failure")

    @property
    @pulumi.getter(name="notificationPreferences")
    def notification_preferences(self) -> Optional['outputs.RunbookRunbookVersionTaskStepPropertiesNotificationPreferences']:
        """
        Preferences to send notifications on the task activities.
        """
        return pulumi.get(self, "notification_preferences")

    @property
    @pulumi.getter(name="pauseDetails")
    def pause_details(self) -> Optional['outputs.RunbookRunbookVersionTaskStepPropertiesPauseDetails']:
        """
        Pause Details
        """
        return pulumi.get(self, "pause_details")

    @property
    @pulumi.getter(name="preCondition")
    def pre_condition(self) -> Optional[builtins.str]:
        """
        Build control flow conditions that determine the relevance of the task execution.
        """
        return pulumi.get(self, "pre_condition")

    @property
    @pulumi.getter(name="runOn")
    def run_on(self) -> Optional['outputs.RunbookRunbookVersionTaskStepPropertiesRunOn']:
        """
        The runon conditions
        """
        return pulumi.get(self, "run_on")


@pulumi.output_type
class RunbookRunbookVersionTaskStepPropertiesNotificationPreferences(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "shouldNotifyOnPause":
            suggest = "should_notify_on_pause"
        elif key == "shouldNotifyOnTaskFailure":
            suggest = "should_notify_on_task_failure"
        elif key == "shouldNotifyOnTaskSuccess":
            suggest = "should_notify_on_task_success"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookRunbookVersionTaskStepPropertiesNotificationPreferences. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookRunbookVersionTaskStepPropertiesNotificationPreferences.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookRunbookVersionTaskStepPropertiesNotificationPreferences.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 should_notify_on_pause: Optional[builtins.bool] = None,
                 should_notify_on_task_failure: Optional[builtins.bool] = None,
                 should_notify_on_task_success: Optional[builtins.bool] = None):
        """
        :param builtins.bool should_notify_on_pause: Enables notification on pause.
        :param builtins.bool should_notify_on_task_failure: Enables or disables notification on Task Failures.
        :param builtins.bool should_notify_on_task_success: Enables or disables notification on Task Success.
        """
        if should_notify_on_pause is not None:
            pulumi.set(__self__, "should_notify_on_pause", should_notify_on_pause)
        if should_notify_on_task_failure is not None:
            pulumi.set(__self__, "should_notify_on_task_failure", should_notify_on_task_failure)
        if should_notify_on_task_success is not None:
            pulumi.set(__self__, "should_notify_on_task_success", should_notify_on_task_success)

    @property
    @pulumi.getter(name="shouldNotifyOnPause")
    def should_notify_on_pause(self) -> Optional[builtins.bool]:
        """
        Enables notification on pause.
        """
        return pulumi.get(self, "should_notify_on_pause")

    @property
    @pulumi.getter(name="shouldNotifyOnTaskFailure")
    def should_notify_on_task_failure(self) -> Optional[builtins.bool]:
        """
        Enables or disables notification on Task Failures.
        """
        return pulumi.get(self, "should_notify_on_task_failure")

    @property
    @pulumi.getter(name="shouldNotifyOnTaskSuccess")
    def should_notify_on_task_success(self) -> Optional[builtins.bool]:
        """
        Enables or disables notification on Task Success.
        """
        return pulumi.get(self, "should_notify_on_task_success")


@pulumi.output_type
class RunbookRunbookVersionTaskStepPropertiesPauseDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "durationInMinutes":
            suggest = "duration_in_minutes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookRunbookVersionTaskStepPropertiesPauseDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookRunbookVersionTaskStepPropertiesPauseDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookRunbookVersionTaskStepPropertiesPauseDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kind: builtins.str,
                 duration_in_minutes: Optional[builtins.int] = None):
        """
        :param builtins.str kind: Pause based On.
        :param builtins.int duration_in_minutes: Time in minutes to apply Pause.
        """
        pulumi.set(__self__, "kind", kind)
        if duration_in_minutes is not None:
            pulumi.set(__self__, "duration_in_minutes", duration_in_minutes)

    @property
    @pulumi.getter
    def kind(self) -> builtins.str:
        """
        Pause based On.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="durationInMinutes")
    def duration_in_minutes(self) -> Optional[builtins.int]:
        """
        Time in minutes to apply Pause.
        """
        return pulumi.get(self, "duration_in_minutes")


@pulumi.output_type
class RunbookRunbookVersionTaskStepPropertiesRunOn(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "previousTaskInstanceDetails":
            suggest = "previous_task_instance_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookRunbookVersionTaskStepPropertiesRunOn. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookRunbookVersionTaskStepPropertiesRunOn.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookRunbookVersionTaskStepPropertiesRunOn.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kind: builtins.str,
                 condition: Optional[builtins.str] = None,
                 host: Optional[builtins.str] = None,
                 previous_task_instance_details: Optional[Sequence['outputs.RunbookRunbookVersionTaskStepPropertiesRunOnPreviousTaskInstanceDetail']] = None):
        """
        :param builtins.str kind: Run on based On.
        :param builtins.str condition: Build control flow conditions that determine the relevance of the task execution.
        :param builtins.str host: OCID of the self hosted instance.
        :param Sequence['RunbookRunbookVersionTaskStepPropertiesRunOnPreviousTaskInstanceDetailArgs'] previous_task_instance_details: Previous Task Instance Details
        """
        pulumi.set(__self__, "kind", kind)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if previous_task_instance_details is not None:
            pulumi.set(__self__, "previous_task_instance_details", previous_task_instance_details)

    @property
    @pulumi.getter
    def kind(self) -> builtins.str:
        """
        Run on based On.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def condition(self) -> Optional[builtins.str]:
        """
        Build control flow conditions that determine the relevance of the task execution.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def host(self) -> Optional[builtins.str]:
        """
        OCID of the self hosted instance.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="previousTaskInstanceDetails")
    def previous_task_instance_details(self) -> Optional[Sequence['outputs.RunbookRunbookVersionTaskStepPropertiesRunOnPreviousTaskInstanceDetail']]:
        """
        Previous Task Instance Details
        """
        return pulumi.get(self, "previous_task_instance_details")


@pulumi.output_type
class RunbookRunbookVersionTaskStepPropertiesRunOnPreviousTaskInstanceDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "outputVariableDetails":
            suggest = "output_variable_details"
        elif key == "resourceId":
            suggest = "resource_id"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookRunbookVersionTaskStepPropertiesRunOnPreviousTaskInstanceDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookRunbookVersionTaskStepPropertiesRunOnPreviousTaskInstanceDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookRunbookVersionTaskStepPropertiesRunOnPreviousTaskInstanceDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 output_variable_details: Optional['outputs.RunbookRunbookVersionTaskStepPropertiesRunOnPreviousTaskInstanceDetailOutputVariableDetails'] = None,
                 resource_id: Optional[builtins.str] = None,
                 resource_type: Optional[builtins.str] = None):
        """
        :param 'RunbookRunbookVersionTaskStepPropertiesRunOnPreviousTaskInstanceDetailOutputVariableDetailsArgs' output_variable_details: The details of the output variable that will be used for mapping.
        :param builtins.str resource_id: Resource Ocid.
        :param builtins.str resource_type: Resource Type.
        """
        if output_variable_details is not None:
            pulumi.set(__self__, "output_variable_details", output_variable_details)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter(name="outputVariableDetails")
    def output_variable_details(self) -> Optional['outputs.RunbookRunbookVersionTaskStepPropertiesRunOnPreviousTaskInstanceDetailOutputVariableDetails']:
        """
        The details of the output variable that will be used for mapping.
        """
        return pulumi.get(self, "output_variable_details")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[builtins.str]:
        """
        Resource Ocid.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[builtins.str]:
        """
        Resource Type.
        """
        return pulumi.get(self, "resource_type")


@pulumi.output_type
class RunbookRunbookVersionTaskStepPropertiesRunOnPreviousTaskInstanceDetailOutputVariableDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "outputVariableName":
            suggest = "output_variable_name"
        elif key == "stepName":
            suggest = "step_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookRunbookVersionTaskStepPropertiesRunOnPreviousTaskInstanceDetailOutputVariableDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookRunbookVersionTaskStepPropertiesRunOnPreviousTaskInstanceDetailOutputVariableDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookRunbookVersionTaskStepPropertiesRunOnPreviousTaskInstanceDetailOutputVariableDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 output_variable_name: Optional[builtins.str] = None,
                 step_name: Optional[builtins.str] = None):
        """
        :param builtins.str output_variable_name: The name of the output variable whose value has to be mapped.
        :param builtins.str step_name: The name of the task step the output variable belongs to.
        """
        if output_variable_name is not None:
            pulumi.set(__self__, "output_variable_name", output_variable_name)
        if step_name is not None:
            pulumi.set(__self__, "step_name", step_name)

    @property
    @pulumi.getter(name="outputVariableName")
    def output_variable_name(self) -> Optional[builtins.str]:
        """
        The name of the output variable whose value has to be mapped.
        """
        return pulumi.get(self, "output_variable_name")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> Optional[builtins.str]:
        """
        The name of the task step the output variable belongs to.
        """
        return pulumi.get(self, "step_name")


@pulumi.output_type
class RunbookRunbookVersionTaskTaskRecordDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "executionDetails":
            suggest = "execution_details"
        elif key == "isApplySubjectTask":
            suggest = "is_apply_subject_task"
        elif key == "isCopyToLibraryEnabled":
            suggest = "is_copy_to_library_enabled"
        elif key == "isDiscoveryOutputTask":
            suggest = "is_discovery_output_task"
        elif key == "osType":
            suggest = "os_type"
        elif key == "taskRecordId":
            suggest = "task_record_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookRunbookVersionTaskTaskRecordDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookRunbookVersionTaskTaskRecordDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookRunbookVersionTaskTaskRecordDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 scope: builtins.str,
                 description: Optional[builtins.str] = None,
                 execution_details: Optional['outputs.RunbookRunbookVersionTaskTaskRecordDetailsExecutionDetails'] = None,
                 is_apply_subject_task: Optional[builtins.bool] = None,
                 is_copy_to_library_enabled: Optional[builtins.bool] = None,
                 is_discovery_output_task: Optional[builtins.bool] = None,
                 name: Optional[builtins.str] = None,
                 os_type: Optional[builtins.str] = None,
                 platform: Optional[builtins.str] = None,
                 properties: Optional['outputs.RunbookRunbookVersionTaskTaskRecordDetailsProperties'] = None,
                 task_record_id: Optional[builtins.str] = None):
        """
        :param builtins.str scope: The scope of the task.
        :param builtins.str description: The description of the task.
        :param 'RunbookRunbookVersionTaskTaskRecordDetailsExecutionDetailsArgs' execution_details: Execution details.
        :param builtins.bool is_apply_subject_task: Is this an Apply Subject Task? Ex. Patch Execution Task
        :param builtins.bool is_copy_to_library_enabled: Make a copy of this task in Library
        :param builtins.bool is_discovery_output_task: Is this a discovery output task?
        :param builtins.str name: The name of the task
        :param builtins.str os_type: The OS for the task.
        :param builtins.str platform: The platform of the runbook.
        :param 'RunbookRunbookVersionTaskTaskRecordDetailsPropertiesArgs' properties: The properties of the task.
        :param builtins.str task_record_id: The ID of taskRecord.
        """
        pulumi.set(__self__, "scope", scope)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if execution_details is not None:
            pulumi.set(__self__, "execution_details", execution_details)
        if is_apply_subject_task is not None:
            pulumi.set(__self__, "is_apply_subject_task", is_apply_subject_task)
        if is_copy_to_library_enabled is not None:
            pulumi.set(__self__, "is_copy_to_library_enabled", is_copy_to_library_enabled)
        if is_discovery_output_task is not None:
            pulumi.set(__self__, "is_discovery_output_task", is_discovery_output_task)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if os_type is not None:
            pulumi.set(__self__, "os_type", os_type)
        if platform is not None:
            pulumi.set(__self__, "platform", platform)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if task_record_id is not None:
            pulumi.set(__self__, "task_record_id", task_record_id)

    @property
    @pulumi.getter
    def scope(self) -> builtins.str:
        """
        The scope of the task.
        """
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        """
        The description of the task.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="executionDetails")
    def execution_details(self) -> Optional['outputs.RunbookRunbookVersionTaskTaskRecordDetailsExecutionDetails']:
        """
        Execution details.
        """
        return pulumi.get(self, "execution_details")

    @property
    @pulumi.getter(name="isApplySubjectTask")
    def is_apply_subject_task(self) -> Optional[builtins.bool]:
        """
        Is this an Apply Subject Task? Ex. Patch Execution Task
        """
        return pulumi.get(self, "is_apply_subject_task")

    @property
    @pulumi.getter(name="isCopyToLibraryEnabled")
    def is_copy_to_library_enabled(self) -> Optional[builtins.bool]:
        """
        Make a copy of this task in Library
        """
        return pulumi.get(self, "is_copy_to_library_enabled")

    @property
    @pulumi.getter(name="isDiscoveryOutputTask")
    def is_discovery_output_task(self) -> Optional[builtins.bool]:
        """
        Is this a discovery output task?
        """
        return pulumi.get(self, "is_discovery_output_task")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        The name of the task
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[builtins.str]:
        """
        The OS for the task.
        """
        return pulumi.get(self, "os_type")

    @property
    @pulumi.getter
    def platform(self) -> Optional[builtins.str]:
        """
        The platform of the runbook.
        """
        return pulumi.get(self, "platform")

    @property
    @pulumi.getter
    def properties(self) -> Optional['outputs.RunbookRunbookVersionTaskTaskRecordDetailsProperties']:
        """
        The properties of the task.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="taskRecordId")
    def task_record_id(self) -> Optional[builtins.str]:
        """
        The ID of taskRecord.
        """
        return pulumi.get(self, "task_record_id")


@pulumi.output_type
class RunbookRunbookVersionTaskTaskRecordDetailsExecutionDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "executionType":
            suggest = "execution_type"
        elif key == "catalogId":
            suggest = "catalog_id"
        elif key == "configFile":
            suggest = "config_file"
        elif key == "isExecutableContent":
            suggest = "is_executable_content"
        elif key == "isLocked":
            suggest = "is_locked"
        elif key == "isReadOutputVariableEnabled":
            suggest = "is_read_output_variable_enabled"
        elif key == "targetCompartmentId":
            suggest = "target_compartment_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookRunbookVersionTaskTaskRecordDetailsExecutionDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookRunbookVersionTaskTaskRecordDetailsExecutionDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookRunbookVersionTaskTaskRecordDetailsExecutionDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 execution_type: builtins.str,
                 catalog_id: Optional[builtins.str] = None,
                 command: Optional[builtins.str] = None,
                 config_file: Optional[builtins.str] = None,
                 content: Optional['outputs.RunbookRunbookVersionTaskTaskRecordDetailsExecutionDetailsContent'] = None,
                 credentials: Optional[Sequence['outputs.RunbookRunbookVersionTaskTaskRecordDetailsExecutionDetailsCredential']] = None,
                 endpoint: Optional[builtins.str] = None,
                 is_executable_content: Optional[builtins.bool] = None,
                 is_locked: Optional[builtins.bool] = None,
                 is_read_output_variable_enabled: Optional[builtins.bool] = None,
                 target_compartment_id: Optional[builtins.str] = None,
                 variables: Optional['outputs.RunbookRunbookVersionTaskTaskRecordDetailsExecutionDetailsVariables'] = None):
        """
        :param builtins.str execution_type: The action type of the task
        :param builtins.str command: Optional command to execute the content. You can provide any commands/arguments that can't be part of the script.
        :param builtins.str config_file: Catalog Id having config file.
        :param 'RunbookRunbookVersionTaskTaskRecordDetailsExecutionDetailsContentArgs' content: Content Source details.
        :param Sequence['RunbookRunbookVersionTaskTaskRecordDetailsExecutionDetailsCredentialArgs'] credentials: Credentials required for executing the task.
        :param builtins.str endpoint: Endpoint to be invoked.
        :param builtins.bool is_executable_content: Is the Content an executable file?
        :param builtins.bool is_locked: Is the script locked to prevent changes directly in Object Storage?
        :param builtins.bool is_read_output_variable_enabled: Is read output variable enabled
        :param builtins.str target_compartment_id: OCID of the compartment to which the resource belongs to.
        :param 'RunbookRunbookVersionTaskTaskRecordDetailsExecutionDetailsVariablesArgs' variables: The variable of the task. At least one of the dynamicArguments or output needs to be provided.
        """
        pulumi.set(__self__, "execution_type", execution_type)
        if catalog_id is not None:
            pulumi.set(__self__, "catalog_id", catalog_id)
        if command is not None:
            pulumi.set(__self__, "command", command)
        if config_file is not None:
            pulumi.set(__self__, "config_file", config_file)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if endpoint is not None:
            pulumi.set(__self__, "endpoint", endpoint)
        if is_executable_content is not None:
            pulumi.set(__self__, "is_executable_content", is_executable_content)
        if is_locked is not None:
            pulumi.set(__self__, "is_locked", is_locked)
        if is_read_output_variable_enabled is not None:
            pulumi.set(__self__, "is_read_output_variable_enabled", is_read_output_variable_enabled)
        if target_compartment_id is not None:
            pulumi.set(__self__, "target_compartment_id", target_compartment_id)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter(name="executionType")
    def execution_type(self) -> builtins.str:
        """
        The action type of the task
        """
        return pulumi.get(self, "execution_type")

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "catalog_id")

    @property
    @pulumi.getter
    def command(self) -> Optional[builtins.str]:
        """
        Optional command to execute the content. You can provide any commands/arguments that can't be part of the script.
        """
        return pulumi.get(self, "command")

    @property
    @pulumi.getter(name="configFile")
    def config_file(self) -> Optional[builtins.str]:
        """
        Catalog Id having config file.
        """
        return pulumi.get(self, "config_file")

    @property
    @pulumi.getter
    def content(self) -> Optional['outputs.RunbookRunbookVersionTaskTaskRecordDetailsExecutionDetailsContent']:
        """
        Content Source details.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter
    def credentials(self) -> Optional[Sequence['outputs.RunbookRunbookVersionTaskTaskRecordDetailsExecutionDetailsCredential']]:
        """
        Credentials required for executing the task.
        """
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[builtins.str]:
        """
        Endpoint to be invoked.
        """
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="isExecutableContent")
    def is_executable_content(self) -> Optional[builtins.bool]:
        """
        Is the Content an executable file?
        """
        return pulumi.get(self, "is_executable_content")

    @property
    @pulumi.getter(name="isLocked")
    def is_locked(self) -> Optional[builtins.bool]:
        """
        Is the script locked to prevent changes directly in Object Storage?
        """
        return pulumi.get(self, "is_locked")

    @property
    @pulumi.getter(name="isReadOutputVariableEnabled")
    def is_read_output_variable_enabled(self) -> Optional[builtins.bool]:
        """
        Is read output variable enabled
        """
        return pulumi.get(self, "is_read_output_variable_enabled")

    @property
    @pulumi.getter(name="targetCompartmentId")
    def target_compartment_id(self) -> Optional[builtins.str]:
        """
        OCID of the compartment to which the resource belongs to.
        """
        return pulumi.get(self, "target_compartment_id")

    @property
    @pulumi.getter
    def variables(self) -> Optional['outputs.RunbookRunbookVersionTaskTaskRecordDetailsExecutionDetailsVariables']:
        """
        The variable of the task. At least one of the dynamicArguments or output needs to be provided.
        """
        return pulumi.get(self, "variables")


@pulumi.output_type
class RunbookRunbookVersionTaskTaskRecordDetailsExecutionDetailsContent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"
        elif key == "catalogId":
            suggest = "catalog_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookRunbookVersionTaskTaskRecordDetailsExecutionDetailsContent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookRunbookVersionTaskTaskRecordDetailsExecutionDetailsContent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookRunbookVersionTaskTaskRecordDetailsExecutionDetailsContent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_type: builtins.str,
                 bucket: Optional[builtins.str] = None,
                 catalog_id: Optional[builtins.str] = None,
                 checksum: Optional[builtins.str] = None,
                 namespace: Optional[builtins.str] = None,
                 object: Optional[builtins.str] = None):
        """
        :param builtins.str source_type: Content Source type details.
        :param builtins.str bucket: Bucket Name.
        :param builtins.str checksum: md5 checksum of the artifact.
        :param builtins.str namespace: Namespace.
        :param builtins.str object: Object Name.
        """
        pulumi.set(__self__, "source_type", source_type)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if catalog_id is not None:
            pulumi.set(__self__, "catalog_id", catalog_id)
        if checksum is not None:
            pulumi.set(__self__, "checksum", checksum)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if object is not None:
            pulumi.set(__self__, "object", object)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> builtins.str:
        """
        Content Source type details.
        """
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def bucket(self) -> Optional[builtins.str]:
        """
        Bucket Name.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "catalog_id")

    @property
    @pulumi.getter
    def checksum(self) -> Optional[builtins.str]:
        """
        md5 checksum of the artifact.
        """
        return pulumi.get(self, "checksum")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[builtins.str]:
        """
        Namespace.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> Optional[builtins.str]:
        """
        Object Name.
        """
        return pulumi.get(self, "object")


@pulumi.output_type
class RunbookRunbookVersionTaskTaskRecordDetailsExecutionDetailsCredential(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookRunbookVersionTaskTaskRecordDetailsExecutionDetailsCredential. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookRunbookVersionTaskTaskRecordDetailsExecutionDetailsCredential.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookRunbookVersionTaskTaskRecordDetailsExecutionDetailsCredential.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: Optional[builtins.str] = None,
                 id: Optional[builtins.str] = None):
        """
        :param builtins.str display_name: A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        :param builtins.str id: The OCID of the resource.
        """
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[builtins.str]:
        """
        A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        """
        The OCID of the resource.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class RunbookRunbookVersionTaskTaskRecordDetailsExecutionDetailsVariables(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "inputVariables":
            suggest = "input_variables"
        elif key == "outputVariables":
            suggest = "output_variables"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookRunbookVersionTaskTaskRecordDetailsExecutionDetailsVariables. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookRunbookVersionTaskTaskRecordDetailsExecutionDetailsVariables.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookRunbookVersionTaskTaskRecordDetailsExecutionDetailsVariables.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 input_variables: Optional[Sequence['outputs.RunbookRunbookVersionTaskTaskRecordDetailsExecutionDetailsVariablesInputVariable']] = None,
                 output_variables: Optional[Sequence[builtins.str]] = None):
        """
        :param Sequence['RunbookRunbookVersionTaskTaskRecordDetailsExecutionDetailsVariablesInputVariableArgs'] input_variables: The input variables for the task.
        :param Sequence[builtins.str] output_variables: The list of output variables.
        """
        if input_variables is not None:
            pulumi.set(__self__, "input_variables", input_variables)
        if output_variables is not None:
            pulumi.set(__self__, "output_variables", output_variables)

    @property
    @pulumi.getter(name="inputVariables")
    def input_variables(self) -> Optional[Sequence['outputs.RunbookRunbookVersionTaskTaskRecordDetailsExecutionDetailsVariablesInputVariable']]:
        """
        The input variables for the task.
        """
        return pulumi.get(self, "input_variables")

    @property
    @pulumi.getter(name="outputVariables")
    def output_variables(self) -> Optional[Sequence[builtins.str]]:
        """
        The list of output variables.
        """
        return pulumi.get(self, "output_variables")


@pulumi.output_type
class RunbookRunbookVersionTaskTaskRecordDetailsExecutionDetailsVariablesInputVariable(dict):
    def __init__(__self__, *,
                 description: Optional[builtins.str] = None,
                 name: Optional[builtins.str] = None,
                 type: Optional[builtins.str] = None):
        """
        :param builtins.str description: The description of the argument.
        :param builtins.str name: The name of the argument.
        :param builtins.str type: Input argument Type.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        """
        The description of the argument.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        The name of the argument.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        """
        Input argument Type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class RunbookRunbookVersionTaskTaskRecordDetailsProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "numRetries":
            suggest = "num_retries"
        elif key == "timeoutInSeconds":
            suggest = "timeout_in_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookRunbookVersionTaskTaskRecordDetailsProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookRunbookVersionTaskTaskRecordDetailsProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookRunbookVersionTaskTaskRecordDetailsProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 num_retries: Optional[builtins.int] = None,
                 timeout_in_seconds: Optional[builtins.int] = None):
        """
        :param builtins.int num_retries: The number of retries allowed.
        :param builtins.int timeout_in_seconds: The timeout in seconds for the task.
        """
        if num_retries is not None:
            pulumi.set(__self__, "num_retries", num_retries)
        if timeout_in_seconds is not None:
            pulumi.set(__self__, "timeout_in_seconds", timeout_in_seconds)

    @property
    @pulumi.getter(name="numRetries")
    def num_retries(self) -> Optional[builtins.int]:
        """
        The number of retries allowed.
        """
        return pulumi.get(self, "num_retries")

    @property
    @pulumi.getter(name="timeoutInSeconds")
    def timeout_in_seconds(self) -> Optional[builtins.int]:
        """
        The timeout in seconds for the task.
        """
        return pulumi.get(self, "timeout_in_seconds")


@pulumi.output_type
class RunbookVersionExecutionWorkflowDetails(dict):
    def __init__(__self__, *,
                 workflows: Sequence['outputs.RunbookVersionExecutionWorkflowDetailsWorkflow']):
        """
        :param Sequence['RunbookVersionExecutionWorkflowDetailsWorkflowArgs'] workflows: (Updatable) Execution Workflow for the runbook.
        """
        pulumi.set(__self__, "workflows", workflows)

    @property
    @pulumi.getter
    def workflows(self) -> Sequence['outputs.RunbookVersionExecutionWorkflowDetailsWorkflow']:
        """
        (Updatable) Execution Workflow for the runbook.
        """
        return pulumi.get(self, "workflows")


@pulumi.output_type
class RunbookVersionExecutionWorkflowDetailsWorkflow(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupName":
            suggest = "group_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookVersionExecutionWorkflowDetailsWorkflow. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookVersionExecutionWorkflowDetailsWorkflow.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookVersionExecutionWorkflowDetailsWorkflow.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group_name: builtins.str,
                 steps: Sequence['outputs.RunbookVersionExecutionWorkflowDetailsWorkflowStep'],
                 type: builtins.str):
        """
        :param builtins.str group_name: (Updatable) Name of the group.
        :param Sequence['RunbookVersionExecutionWorkflowDetailsWorkflowStepArgs'] steps: (Updatable) Steps within the Group.
        :param builtins.str type: (Updatable) Workflow Group Details.
        """
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "steps", steps)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> builtins.str:
        """
        (Updatable) Name of the group.
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter
    def steps(self) -> Sequence['outputs.RunbookVersionExecutionWorkflowDetailsWorkflowStep']:
        """
        (Updatable) Steps within the Group.
        """
        return pulumi.get(self, "steps")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        (Updatable) Workflow Group Details.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class RunbookVersionExecutionWorkflowDetailsWorkflowStep(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupName":
            suggest = "group_name"
        elif key == "stepName":
            suggest = "step_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookVersionExecutionWorkflowDetailsWorkflowStep. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookVersionExecutionWorkflowDetailsWorkflowStep.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookVersionExecutionWorkflowDetailsWorkflowStep.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: builtins.str,
                 group_name: Optional[builtins.str] = None,
                 step_name: Optional[builtins.str] = None,
                 steps: Optional[Sequence[builtins.str]] = None):
        """
        :param builtins.str type: (Updatable) Content Source Details.
        :param builtins.str group_name: (Updatable) Name of the group.
        :param builtins.str step_name: (Updatable) Provide StepName for the Task.
        :param Sequence[builtins.str] steps: (Updatable) Tasks within the Group. Provide the
               stepName for all applicable tasks.
        """
        pulumi.set(__self__, "type", type)
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if step_name is not None:
            pulumi.set(__self__, "step_name", step_name)
        if steps is not None:
            pulumi.set(__self__, "steps", steps)

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        (Updatable) Content Source Details.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[builtins.str]:
        """
        (Updatable) Name of the group.
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> Optional[builtins.str]:
        """
        (Updatable) Provide StepName for the Task.
        """
        return pulumi.get(self, "step_name")

    @property
    @pulumi.getter
    def steps(self) -> Optional[Sequence[builtins.str]]:
        """
        (Updatable) Tasks within the Group. Provide the
        stepName for all applicable tasks.
        """
        return pulumi.get(self, "steps")


@pulumi.output_type
class RunbookVersionGroup(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 type: builtins.str,
                 properties: Optional['outputs.RunbookVersionGroupProperties'] = None):
        """
        :param builtins.str name: (Updatable) The name of the group.
        :param builtins.str type: (Updatable) The type of the group. PARALLEL_TASK_GROUP : Helps to execute tasks parallelly
               inside a resource. PARALLEL_RESOURCE_GROUP : Executes tasks across resources parallelly. ROLLING_RESOURCE_GROUP :
               Executes tasks across resources in a rolling order.
        :param 'RunbookVersionGroupPropertiesArgs' properties: (Updatable) The properties of the component.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        (Updatable) The name of the group.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        (Updatable) The type of the group. PARALLEL_TASK_GROUP : Helps to execute tasks parallelly
        inside a resource. PARALLEL_RESOURCE_GROUP : Executes tasks across resources parallelly. ROLLING_RESOURCE_GROUP :
        Executes tasks across resources in a rolling order.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def properties(self) -> Optional['outputs.RunbookVersionGroupProperties']:
        """
        (Updatable) The properties of the component.
        """
        return pulumi.get(self, "properties")


@pulumi.output_type
class RunbookVersionGroupProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionOnFailure":
            suggest = "action_on_failure"
        elif key == "notificationPreferences":
            suggest = "notification_preferences"
        elif key == "pauseDetails":
            suggest = "pause_details"
        elif key == "preCondition":
            suggest = "pre_condition"
        elif key == "runOn":
            suggest = "run_on"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookVersionGroupProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookVersionGroupProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookVersionGroupProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action_on_failure: builtins.str,
                 notification_preferences: Optional['outputs.RunbookVersionGroupPropertiesNotificationPreferences'] = None,
                 pause_details: Optional['outputs.RunbookVersionGroupPropertiesPauseDetails'] = None,
                 pre_condition: Optional[builtins.str] = None,
                 run_on: Optional['outputs.RunbookVersionGroupPropertiesRunOn'] = None):
        """
        :param builtins.str action_on_failure: (Updatable) The action to be taken in case of a failure.
        :param 'RunbookVersionGroupPropertiesNotificationPreferencesArgs' notification_preferences: (Updatable) Preferences to send notifications on the task activities.
        :param 'RunbookVersionGroupPropertiesPauseDetailsArgs' pause_details: (Updatable) Pause Details
        :param builtins.str pre_condition: (Updatable) Build control flow conditions that determine the relevance of the
               task execution.
        :param 'RunbookVersionGroupPropertiesRunOnArgs' run_on: (Updatable) The runon conditions
        """
        pulumi.set(__self__, "action_on_failure", action_on_failure)
        if notification_preferences is not None:
            pulumi.set(__self__, "notification_preferences", notification_preferences)
        if pause_details is not None:
            pulumi.set(__self__, "pause_details", pause_details)
        if pre_condition is not None:
            pulumi.set(__self__, "pre_condition", pre_condition)
        if run_on is not None:
            pulumi.set(__self__, "run_on", run_on)

    @property
    @pulumi.getter(name="actionOnFailure")
    def action_on_failure(self) -> builtins.str:
        """
        (Updatable) The action to be taken in case of a failure.
        """
        return pulumi.get(self, "action_on_failure")

    @property
    @pulumi.getter(name="notificationPreferences")
    def notification_preferences(self) -> Optional['outputs.RunbookVersionGroupPropertiesNotificationPreferences']:
        """
        (Updatable) Preferences to send notifications on the task activities.
        """
        return pulumi.get(self, "notification_preferences")

    @property
    @pulumi.getter(name="pauseDetails")
    def pause_details(self) -> Optional['outputs.RunbookVersionGroupPropertiesPauseDetails']:
        """
        (Updatable) Pause Details
        """
        return pulumi.get(self, "pause_details")

    @property
    @pulumi.getter(name="preCondition")
    def pre_condition(self) -> Optional[builtins.str]:
        """
        (Updatable) Build control flow conditions that determine the relevance of the
        task execution.
        """
        return pulumi.get(self, "pre_condition")

    @property
    @pulumi.getter(name="runOn")
    def run_on(self) -> Optional['outputs.RunbookVersionGroupPropertiesRunOn']:
        """
        (Updatable) The runon conditions
        """
        return pulumi.get(self, "run_on")


@pulumi.output_type
class RunbookVersionGroupPropertiesNotificationPreferences(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "shouldNotifyOnPause":
            suggest = "should_notify_on_pause"
        elif key == "shouldNotifyOnTaskFailure":
            suggest = "should_notify_on_task_failure"
        elif key == "shouldNotifyOnTaskSuccess":
            suggest = "should_notify_on_task_success"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookVersionGroupPropertiesNotificationPreferences. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookVersionGroupPropertiesNotificationPreferences.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookVersionGroupPropertiesNotificationPreferences.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 should_notify_on_pause: Optional[builtins.bool] = None,
                 should_notify_on_task_failure: Optional[builtins.bool] = None,
                 should_notify_on_task_success: Optional[builtins.bool] = None):
        """
        :param builtins.bool should_notify_on_pause: (Updatable) Enables notification on pause.
        :param builtins.bool should_notify_on_task_failure: (Updatable) Enables or disables notification on Task
               Failures.
        :param builtins.bool should_notify_on_task_success: (Updatable) Enables or disables notification on Task Success.
        """
        if should_notify_on_pause is not None:
            pulumi.set(__self__, "should_notify_on_pause", should_notify_on_pause)
        if should_notify_on_task_failure is not None:
            pulumi.set(__self__, "should_notify_on_task_failure", should_notify_on_task_failure)
        if should_notify_on_task_success is not None:
            pulumi.set(__self__, "should_notify_on_task_success", should_notify_on_task_success)

    @property
    @pulumi.getter(name="shouldNotifyOnPause")
    def should_notify_on_pause(self) -> Optional[builtins.bool]:
        """
        (Updatable) Enables notification on pause.
        """
        return pulumi.get(self, "should_notify_on_pause")

    @property
    @pulumi.getter(name="shouldNotifyOnTaskFailure")
    def should_notify_on_task_failure(self) -> Optional[builtins.bool]:
        """
        (Updatable) Enables or disables notification on Task
        Failures.
        """
        return pulumi.get(self, "should_notify_on_task_failure")

    @property
    @pulumi.getter(name="shouldNotifyOnTaskSuccess")
    def should_notify_on_task_success(self) -> Optional[builtins.bool]:
        """
        (Updatable) Enables or disables notification on Task Success.
        """
        return pulumi.get(self, "should_notify_on_task_success")


@pulumi.output_type
class RunbookVersionGroupPropertiesPauseDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "durationInMinutes":
            suggest = "duration_in_minutes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookVersionGroupPropertiesPauseDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookVersionGroupPropertiesPauseDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookVersionGroupPropertiesPauseDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kind: builtins.str,
                 duration_in_minutes: Optional[builtins.int] = None):
        """
        :param builtins.str kind: (Updatable) Pause based On.
        :param builtins.int duration_in_minutes: (Updatable) Time in minutes to apply Pause.
        """
        pulumi.set(__self__, "kind", kind)
        if duration_in_minutes is not None:
            pulumi.set(__self__, "duration_in_minutes", duration_in_minutes)

    @property
    @pulumi.getter
    def kind(self) -> builtins.str:
        """
        (Updatable) Pause based On.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="durationInMinutes")
    def duration_in_minutes(self) -> Optional[builtins.int]:
        """
        (Updatable) Time in minutes to apply Pause.
        """
        return pulumi.get(self, "duration_in_minutes")


@pulumi.output_type
class RunbookVersionGroupPropertiesRunOn(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "previousTaskInstanceDetails":
            suggest = "previous_task_instance_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookVersionGroupPropertiesRunOn. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookVersionGroupPropertiesRunOn.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookVersionGroupPropertiesRunOn.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kind: builtins.str,
                 condition: Optional[builtins.str] = None,
                 host: Optional[builtins.str] = None,
                 previous_task_instance_details: Optional[Sequence['outputs.RunbookVersionGroupPropertiesRunOnPreviousTaskInstanceDetail']] = None):
        """
        :param builtins.str kind: (Updatable) Run on based On.
        :param builtins.str condition: (Updatable) Build control flow conditions that
               determine the relevance of the task execution.
        :param builtins.str host: (Updatable) OCID of the self hosted instance.
        :param Sequence['RunbookVersionGroupPropertiesRunOnPreviousTaskInstanceDetailArgs'] previous_task_instance_details: (Updatable) Previous Task
               Instance Details
        """
        pulumi.set(__self__, "kind", kind)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if previous_task_instance_details is not None:
            pulumi.set(__self__, "previous_task_instance_details", previous_task_instance_details)

    @property
    @pulumi.getter
    def kind(self) -> builtins.str:
        """
        (Updatable) Run on based On.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def condition(self) -> Optional[builtins.str]:
        """
        (Updatable) Build control flow conditions that
        determine the relevance of the task execution.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def host(self) -> Optional[builtins.str]:
        """
        (Updatable) OCID of the self hosted instance.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="previousTaskInstanceDetails")
    def previous_task_instance_details(self) -> Optional[Sequence['outputs.RunbookVersionGroupPropertiesRunOnPreviousTaskInstanceDetail']]:
        """
        (Updatable) Previous Task
        Instance Details
        """
        return pulumi.get(self, "previous_task_instance_details")


@pulumi.output_type
class RunbookVersionGroupPropertiesRunOnPreviousTaskInstanceDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "outputVariableDetails":
            suggest = "output_variable_details"
        elif key == "resourceId":
            suggest = "resource_id"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookVersionGroupPropertiesRunOnPreviousTaskInstanceDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookVersionGroupPropertiesRunOnPreviousTaskInstanceDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookVersionGroupPropertiesRunOnPreviousTaskInstanceDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 output_variable_details: Optional['outputs.RunbookVersionGroupPropertiesRunOnPreviousTaskInstanceDetailOutputVariableDetails'] = None,
                 resource_id: Optional[builtins.str] = None,
                 resource_type: Optional[builtins.str] = None):
        """
        :param 'RunbookVersionGroupPropertiesRunOnPreviousTaskInstanceDetailOutputVariableDetailsArgs' output_variable_details: (Updatable) The details of
               the output variable that will be used for mapping.
        :param builtins.str resource_id: (Updatable) Resource Ocid.
        :param builtins.str resource_type: (Updatable) Resource Type.
        """
        if output_variable_details is not None:
            pulumi.set(__self__, "output_variable_details", output_variable_details)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter(name="outputVariableDetails")
    def output_variable_details(self) -> Optional['outputs.RunbookVersionGroupPropertiesRunOnPreviousTaskInstanceDetailOutputVariableDetails']:
        """
        (Updatable) The details of
        the output variable that will be used for mapping.
        """
        return pulumi.get(self, "output_variable_details")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[builtins.str]:
        """
        (Updatable) Resource Ocid.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[builtins.str]:
        """
        (Updatable) Resource Type.
        """
        return pulumi.get(self, "resource_type")


@pulumi.output_type
class RunbookVersionGroupPropertiesRunOnPreviousTaskInstanceDetailOutputVariableDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "outputVariableName":
            suggest = "output_variable_name"
        elif key == "stepName":
            suggest = "step_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookVersionGroupPropertiesRunOnPreviousTaskInstanceDetailOutputVariableDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookVersionGroupPropertiesRunOnPreviousTaskInstanceDetailOutputVariableDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookVersionGroupPropertiesRunOnPreviousTaskInstanceDetailOutputVariableDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 output_variable_name: Optional[builtins.str] = None,
                 step_name: Optional[builtins.str] = None):
        """
        :param builtins.str output_variable_name: (Updatable) The name of the
               output variable whose value has to be mapped.
        :param builtins.str step_name: (Updatable) The name of the task step
               the output variable belongs to.
        """
        if output_variable_name is not None:
            pulumi.set(__self__, "output_variable_name", output_variable_name)
        if step_name is not None:
            pulumi.set(__self__, "step_name", step_name)

    @property
    @pulumi.getter(name="outputVariableName")
    def output_variable_name(self) -> Optional[builtins.str]:
        """
        (Updatable) The name of the
        output variable whose value has to be mapped.
        """
        return pulumi.get(self, "output_variable_name")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> Optional[builtins.str]:
        """
        (Updatable) The name of the task step
        the output variable belongs to.
        """
        return pulumi.get(self, "step_name")


@pulumi.output_type
class RunbookVersionRollbackWorkflowDetails(dict):
    def __init__(__self__, *,
                 scope: builtins.str,
                 workflows: Sequence['outputs.RunbookVersionRollbackWorkflowDetailsWorkflow']):
        """
        :param builtins.str scope: (Updatable) rollback Scope
        :param Sequence['RunbookVersionRollbackWorkflowDetailsWorkflowArgs'] workflows: (Updatable) Rollback Workflow for the runbook.
        """
        pulumi.set(__self__, "scope", scope)
        pulumi.set(__self__, "workflows", workflows)

    @property
    @pulumi.getter
    def scope(self) -> builtins.str:
        """
        (Updatable) rollback Scope
        """
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter
    def workflows(self) -> Sequence['outputs.RunbookVersionRollbackWorkflowDetailsWorkflow']:
        """
        (Updatable) Rollback Workflow for the runbook.
        """
        return pulumi.get(self, "workflows")


@pulumi.output_type
class RunbookVersionRollbackWorkflowDetailsWorkflow(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupName":
            suggest = "group_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookVersionRollbackWorkflowDetailsWorkflow. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookVersionRollbackWorkflowDetailsWorkflow.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookVersionRollbackWorkflowDetailsWorkflow.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group_name: builtins.str,
                 steps: Sequence['outputs.RunbookVersionRollbackWorkflowDetailsWorkflowStep'],
                 type: builtins.str):
        """
        :param builtins.str group_name: (Updatable) Name of the group.
        :param Sequence['RunbookVersionRollbackWorkflowDetailsWorkflowStepArgs'] steps: (Updatable) Steps within the Group.
        :param builtins.str type: (Updatable) Workflow Group Details.
        """
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "steps", steps)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> builtins.str:
        """
        (Updatable) Name of the group.
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter
    def steps(self) -> Sequence['outputs.RunbookVersionRollbackWorkflowDetailsWorkflowStep']:
        """
        (Updatable) Steps within the Group.
        """
        return pulumi.get(self, "steps")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        (Updatable) Workflow Group Details.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class RunbookVersionRollbackWorkflowDetailsWorkflowStep(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupName":
            suggest = "group_name"
        elif key == "stepName":
            suggest = "step_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookVersionRollbackWorkflowDetailsWorkflowStep. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookVersionRollbackWorkflowDetailsWorkflowStep.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookVersionRollbackWorkflowDetailsWorkflowStep.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: builtins.str,
                 group_name: Optional[builtins.str] = None,
                 step_name: Optional[builtins.str] = None,
                 steps: Optional[Sequence[builtins.str]] = None):
        """
        :param builtins.str type: (Updatable) Content Source Details.
        :param builtins.str group_name: (Updatable) Name of the group.
        :param builtins.str step_name: (Updatable) Provide StepName for the Task.
        :param Sequence[builtins.str] steps: (Updatable) Tasks within the Group. Provide the
               stepName for all applicable tasks.
        """
        pulumi.set(__self__, "type", type)
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if step_name is not None:
            pulumi.set(__self__, "step_name", step_name)
        if steps is not None:
            pulumi.set(__self__, "steps", steps)

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        (Updatable) Content Source Details.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[builtins.str]:
        """
        (Updatable) Name of the group.
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> Optional[builtins.str]:
        """
        (Updatable) Provide StepName for the Task.
        """
        return pulumi.get(self, "step_name")

    @property
    @pulumi.getter
    def steps(self) -> Optional[Sequence[builtins.str]]:
        """
        (Updatable) Tasks within the Group. Provide the
        stepName for all applicable tasks.
        """
        return pulumi.get(self, "steps")


@pulumi.output_type
class RunbookVersionTask(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "stepName":
            suggest = "step_name"
        elif key == "taskRecordDetails":
            suggest = "task_record_details"
        elif key == "outputVariableMappings":
            suggest = "output_variable_mappings"
        elif key == "stepProperties":
            suggest = "step_properties"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookVersionTask. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookVersionTask.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookVersionTask.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 step_name: builtins.str,
                 task_record_details: 'outputs.RunbookVersionTaskTaskRecordDetails',
                 output_variable_mappings: Optional[Sequence['outputs.RunbookVersionTaskOutputVariableMapping']] = None,
                 step_properties: Optional['outputs.RunbookVersionTaskStepProperties'] = None):
        """
        :param builtins.str step_name: (Updatable) The name of the task step.
        :param 'RunbookVersionTaskTaskRecordDetailsArgs' task_record_details: (Updatable) The details of the task.
        :param Sequence['RunbookVersionTaskOutputVariableMappingArgs'] output_variable_mappings: (Updatable) Mapping output variables of previous tasks to the input
               variables of the current task.
        :param 'RunbookVersionTaskStepPropertiesArgs' step_properties: (Updatable) The properties of the component.
        """
        pulumi.set(__self__, "step_name", step_name)
        pulumi.set(__self__, "task_record_details", task_record_details)
        if output_variable_mappings is not None:
            pulumi.set(__self__, "output_variable_mappings", output_variable_mappings)
        if step_properties is not None:
            pulumi.set(__self__, "step_properties", step_properties)

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> builtins.str:
        """
        (Updatable) The name of the task step.
        """
        return pulumi.get(self, "step_name")

    @property
    @pulumi.getter(name="taskRecordDetails")
    def task_record_details(self) -> 'outputs.RunbookVersionTaskTaskRecordDetails':
        """
        (Updatable) The details of the task.
        """
        return pulumi.get(self, "task_record_details")

    @property
    @pulumi.getter(name="outputVariableMappings")
    def output_variable_mappings(self) -> Optional[Sequence['outputs.RunbookVersionTaskOutputVariableMapping']]:
        """
        (Updatable) Mapping output variables of previous tasks to the input
        variables of the current task.
        """
        return pulumi.get(self, "output_variable_mappings")

    @property
    @pulumi.getter(name="stepProperties")
    def step_properties(self) -> Optional['outputs.RunbookVersionTaskStepProperties']:
        """
        (Updatable) The properties of the component.
        """
        return pulumi.get(self, "step_properties")


@pulumi.output_type
class RunbookVersionTaskOutputVariableMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "outputVariableDetails":
            suggest = "output_variable_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookVersionTaskOutputVariableMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookVersionTaskOutputVariableMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookVersionTaskOutputVariableMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: builtins.str,
                 output_variable_details: 'outputs.RunbookVersionTaskOutputVariableMappingOutputVariableDetails'):
        """
        :param builtins.str name: (Updatable) The name of the input variable.
        :param 'RunbookVersionTaskOutputVariableMappingOutputVariableDetailsArgs' output_variable_details: (Updatable) The details of the output variable that will be used for
               mapping.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "output_variable_details", output_variable_details)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        (Updatable) The name of the input variable.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="outputVariableDetails")
    def output_variable_details(self) -> 'outputs.RunbookVersionTaskOutputVariableMappingOutputVariableDetails':
        """
        (Updatable) The details of the output variable that will be used for
        mapping.
        """
        return pulumi.get(self, "output_variable_details")


@pulumi.output_type
class RunbookVersionTaskOutputVariableMappingOutputVariableDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "outputVariableName":
            suggest = "output_variable_name"
        elif key == "stepName":
            suggest = "step_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookVersionTaskOutputVariableMappingOutputVariableDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookVersionTaskOutputVariableMappingOutputVariableDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookVersionTaskOutputVariableMappingOutputVariableDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 output_variable_name: builtins.str,
                 step_name: builtins.str):
        """
        :param builtins.str output_variable_name: (Updatable) The name of the output variable whose value has to be
               mapped.
        :param builtins.str step_name: (Updatable) The name of the task step the output variable belongs to.
        """
        pulumi.set(__self__, "output_variable_name", output_variable_name)
        pulumi.set(__self__, "step_name", step_name)

    @property
    @pulumi.getter(name="outputVariableName")
    def output_variable_name(self) -> builtins.str:
        """
        (Updatable) The name of the output variable whose value has to be
        mapped.
        """
        return pulumi.get(self, "output_variable_name")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> builtins.str:
        """
        (Updatable) The name of the task step the output variable belongs to.
        """
        return pulumi.get(self, "step_name")


@pulumi.output_type
class RunbookVersionTaskStepProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionOnFailure":
            suggest = "action_on_failure"
        elif key == "notificationPreferences":
            suggest = "notification_preferences"
        elif key == "pauseDetails":
            suggest = "pause_details"
        elif key == "preCondition":
            suggest = "pre_condition"
        elif key == "runOn":
            suggest = "run_on"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookVersionTaskStepProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookVersionTaskStepProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookVersionTaskStepProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action_on_failure: builtins.str,
                 notification_preferences: Optional['outputs.RunbookVersionTaskStepPropertiesNotificationPreferences'] = None,
                 pause_details: Optional['outputs.RunbookVersionTaskStepPropertiesPauseDetails'] = None,
                 pre_condition: Optional[builtins.str] = None,
                 run_on: Optional['outputs.RunbookVersionTaskStepPropertiesRunOn'] = None):
        """
        :param builtins.str action_on_failure: (Updatable) The action to be taken in case of a failure.
        :param 'RunbookVersionTaskStepPropertiesNotificationPreferencesArgs' notification_preferences: (Updatable) Preferences to send notifications on the task activities.
        :param 'RunbookVersionTaskStepPropertiesPauseDetailsArgs' pause_details: (Updatable) Pause Details
        :param builtins.str pre_condition: (Updatable) Build control flow conditions that determine the relevance of the
               task execution.
        :param 'RunbookVersionTaskStepPropertiesRunOnArgs' run_on: (Updatable) The runon conditions
        """
        pulumi.set(__self__, "action_on_failure", action_on_failure)
        if notification_preferences is not None:
            pulumi.set(__self__, "notification_preferences", notification_preferences)
        if pause_details is not None:
            pulumi.set(__self__, "pause_details", pause_details)
        if pre_condition is not None:
            pulumi.set(__self__, "pre_condition", pre_condition)
        if run_on is not None:
            pulumi.set(__self__, "run_on", run_on)

    @property
    @pulumi.getter(name="actionOnFailure")
    def action_on_failure(self) -> builtins.str:
        """
        (Updatable) The action to be taken in case of a failure.
        """
        return pulumi.get(self, "action_on_failure")

    @property
    @pulumi.getter(name="notificationPreferences")
    def notification_preferences(self) -> Optional['outputs.RunbookVersionTaskStepPropertiesNotificationPreferences']:
        """
        (Updatable) Preferences to send notifications on the task activities.
        """
        return pulumi.get(self, "notification_preferences")

    @property
    @pulumi.getter(name="pauseDetails")
    def pause_details(self) -> Optional['outputs.RunbookVersionTaskStepPropertiesPauseDetails']:
        """
        (Updatable) Pause Details
        """
        return pulumi.get(self, "pause_details")

    @property
    @pulumi.getter(name="preCondition")
    def pre_condition(self) -> Optional[builtins.str]:
        """
        (Updatable) Build control flow conditions that determine the relevance of the
        task execution.
        """
        return pulumi.get(self, "pre_condition")

    @property
    @pulumi.getter(name="runOn")
    def run_on(self) -> Optional['outputs.RunbookVersionTaskStepPropertiesRunOn']:
        """
        (Updatable) The runon conditions
        """
        return pulumi.get(self, "run_on")


@pulumi.output_type
class RunbookVersionTaskStepPropertiesNotificationPreferences(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "shouldNotifyOnPause":
            suggest = "should_notify_on_pause"
        elif key == "shouldNotifyOnTaskFailure":
            suggest = "should_notify_on_task_failure"
        elif key == "shouldNotifyOnTaskSuccess":
            suggest = "should_notify_on_task_success"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookVersionTaskStepPropertiesNotificationPreferences. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookVersionTaskStepPropertiesNotificationPreferences.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookVersionTaskStepPropertiesNotificationPreferences.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 should_notify_on_pause: Optional[builtins.bool] = None,
                 should_notify_on_task_failure: Optional[builtins.bool] = None,
                 should_notify_on_task_success: Optional[builtins.bool] = None):
        """
        :param builtins.bool should_notify_on_pause: (Updatable) Enables notification on pause.
        :param builtins.bool should_notify_on_task_failure: (Updatable) Enables or disables notification on Task
               Failures.
        :param builtins.bool should_notify_on_task_success: (Updatable) Enables or disables notification on Task Success.
        """
        if should_notify_on_pause is not None:
            pulumi.set(__self__, "should_notify_on_pause", should_notify_on_pause)
        if should_notify_on_task_failure is not None:
            pulumi.set(__self__, "should_notify_on_task_failure", should_notify_on_task_failure)
        if should_notify_on_task_success is not None:
            pulumi.set(__self__, "should_notify_on_task_success", should_notify_on_task_success)

    @property
    @pulumi.getter(name="shouldNotifyOnPause")
    def should_notify_on_pause(self) -> Optional[builtins.bool]:
        """
        (Updatable) Enables notification on pause.
        """
        return pulumi.get(self, "should_notify_on_pause")

    @property
    @pulumi.getter(name="shouldNotifyOnTaskFailure")
    def should_notify_on_task_failure(self) -> Optional[builtins.bool]:
        """
        (Updatable) Enables or disables notification on Task
        Failures.
        """
        return pulumi.get(self, "should_notify_on_task_failure")

    @property
    @pulumi.getter(name="shouldNotifyOnTaskSuccess")
    def should_notify_on_task_success(self) -> Optional[builtins.bool]:
        """
        (Updatable) Enables or disables notification on Task Success.
        """
        return pulumi.get(self, "should_notify_on_task_success")


@pulumi.output_type
class RunbookVersionTaskStepPropertiesPauseDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "durationInMinutes":
            suggest = "duration_in_minutes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookVersionTaskStepPropertiesPauseDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookVersionTaskStepPropertiesPauseDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookVersionTaskStepPropertiesPauseDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kind: builtins.str,
                 duration_in_minutes: Optional[builtins.int] = None):
        """
        :param builtins.str kind: (Updatable) Pause based On.
        :param builtins.int duration_in_minutes: (Updatable) Time in minutes to apply Pause.
        """
        pulumi.set(__self__, "kind", kind)
        if duration_in_minutes is not None:
            pulumi.set(__self__, "duration_in_minutes", duration_in_minutes)

    @property
    @pulumi.getter
    def kind(self) -> builtins.str:
        """
        (Updatable) Pause based On.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="durationInMinutes")
    def duration_in_minutes(self) -> Optional[builtins.int]:
        """
        (Updatable) Time in minutes to apply Pause.
        """
        return pulumi.get(self, "duration_in_minutes")


@pulumi.output_type
class RunbookVersionTaskStepPropertiesRunOn(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "previousTaskInstanceDetails":
            suggest = "previous_task_instance_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookVersionTaskStepPropertiesRunOn. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookVersionTaskStepPropertiesRunOn.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookVersionTaskStepPropertiesRunOn.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kind: builtins.str,
                 condition: Optional[builtins.str] = None,
                 host: Optional[builtins.str] = None,
                 previous_task_instance_details: Optional[Sequence['outputs.RunbookVersionTaskStepPropertiesRunOnPreviousTaskInstanceDetail']] = None):
        """
        :param builtins.str kind: (Updatable) Run on based On.
        :param builtins.str condition: (Updatable) Build control flow conditions that
               determine the relevance of the task execution.
        :param builtins.str host: (Updatable) OCID of the self hosted instance.
        :param Sequence['RunbookVersionTaskStepPropertiesRunOnPreviousTaskInstanceDetailArgs'] previous_task_instance_details: (Updatable) Previous Task
               Instance Details
        """
        pulumi.set(__self__, "kind", kind)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if previous_task_instance_details is not None:
            pulumi.set(__self__, "previous_task_instance_details", previous_task_instance_details)

    @property
    @pulumi.getter
    def kind(self) -> builtins.str:
        """
        (Updatable) Run on based On.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def condition(self) -> Optional[builtins.str]:
        """
        (Updatable) Build control flow conditions that
        determine the relevance of the task execution.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def host(self) -> Optional[builtins.str]:
        """
        (Updatable) OCID of the self hosted instance.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="previousTaskInstanceDetails")
    def previous_task_instance_details(self) -> Optional[Sequence['outputs.RunbookVersionTaskStepPropertiesRunOnPreviousTaskInstanceDetail']]:
        """
        (Updatable) Previous Task
        Instance Details
        """
        return pulumi.get(self, "previous_task_instance_details")


@pulumi.output_type
class RunbookVersionTaskStepPropertiesRunOnPreviousTaskInstanceDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "outputVariableDetails":
            suggest = "output_variable_details"
        elif key == "resourceId":
            suggest = "resource_id"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookVersionTaskStepPropertiesRunOnPreviousTaskInstanceDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookVersionTaskStepPropertiesRunOnPreviousTaskInstanceDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookVersionTaskStepPropertiesRunOnPreviousTaskInstanceDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 output_variable_details: Optional['outputs.RunbookVersionTaskStepPropertiesRunOnPreviousTaskInstanceDetailOutputVariableDetails'] = None,
                 resource_id: Optional[builtins.str] = None,
                 resource_type: Optional[builtins.str] = None):
        """
        :param 'RunbookVersionTaskStepPropertiesRunOnPreviousTaskInstanceDetailOutputVariableDetailsArgs' output_variable_details: (Updatable) The details of
               the output variable that will be used for mapping.
        :param builtins.str resource_id: (Updatable) Resource Ocid.
        :param builtins.str resource_type: (Updatable) Resource Type.
        """
        if output_variable_details is not None:
            pulumi.set(__self__, "output_variable_details", output_variable_details)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter(name="outputVariableDetails")
    def output_variable_details(self) -> Optional['outputs.RunbookVersionTaskStepPropertiesRunOnPreviousTaskInstanceDetailOutputVariableDetails']:
        """
        (Updatable) The details of
        the output variable that will be used for mapping.
        """
        return pulumi.get(self, "output_variable_details")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[builtins.str]:
        """
        (Updatable) Resource Ocid.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[builtins.str]:
        """
        (Updatable) Resource Type.
        """
        return pulumi.get(self, "resource_type")


@pulumi.output_type
class RunbookVersionTaskStepPropertiesRunOnPreviousTaskInstanceDetailOutputVariableDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "outputVariableName":
            suggest = "output_variable_name"
        elif key == "stepName":
            suggest = "step_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookVersionTaskStepPropertiesRunOnPreviousTaskInstanceDetailOutputVariableDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookVersionTaskStepPropertiesRunOnPreviousTaskInstanceDetailOutputVariableDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookVersionTaskStepPropertiesRunOnPreviousTaskInstanceDetailOutputVariableDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 output_variable_name: Optional[builtins.str] = None,
                 step_name: Optional[builtins.str] = None):
        """
        :param builtins.str output_variable_name: (Updatable) The name of the
               output variable whose value has to be mapped.
        :param builtins.str step_name: (Updatable) The name of the task step
               the output variable belongs to.
        """
        if output_variable_name is not None:
            pulumi.set(__self__, "output_variable_name", output_variable_name)
        if step_name is not None:
            pulumi.set(__self__, "step_name", step_name)

    @property
    @pulumi.getter(name="outputVariableName")
    def output_variable_name(self) -> Optional[builtins.str]:
        """
        (Updatable) The name of the
        output variable whose value has to be mapped.
        """
        return pulumi.get(self, "output_variable_name")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> Optional[builtins.str]:
        """
        (Updatable) The name of the task step
        the output variable belongs to.
        """
        return pulumi.get(self, "step_name")


@pulumi.output_type
class RunbookVersionTaskTaskRecordDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "executionDetails":
            suggest = "execution_details"
        elif key == "isApplySubjectTask":
            suggest = "is_apply_subject_task"
        elif key == "isCopyToLibraryEnabled":
            suggest = "is_copy_to_library_enabled"
        elif key == "isDiscoveryOutputTask":
            suggest = "is_discovery_output_task"
        elif key == "osType":
            suggest = "os_type"
        elif key == "taskRecordId":
            suggest = "task_record_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookVersionTaskTaskRecordDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookVersionTaskTaskRecordDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookVersionTaskTaskRecordDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 scope: builtins.str,
                 description: Optional[builtins.str] = None,
                 execution_details: Optional['outputs.RunbookVersionTaskTaskRecordDetailsExecutionDetails'] = None,
                 is_apply_subject_task: Optional[builtins.bool] = None,
                 is_copy_to_library_enabled: Optional[builtins.bool] = None,
                 is_discovery_output_task: Optional[builtins.bool] = None,
                 name: Optional[builtins.str] = None,
                 os_type: Optional[builtins.str] = None,
                 platform: Optional[builtins.str] = None,
                 properties: Optional['outputs.RunbookVersionTaskTaskRecordDetailsProperties'] = None,
                 task_record_id: Optional[builtins.str] = None):
        """
        :param builtins.str scope: (Updatable) The scope of the task.
        :param builtins.str description: (Updatable) The description of the task.
        :param 'RunbookVersionTaskTaskRecordDetailsExecutionDetailsArgs' execution_details: (Updatable) Execution details.
        :param builtins.bool is_apply_subject_task: (Updatable) Is this an Apply Subject Task? Ex. Patch
               Execution Task
        :param builtins.bool is_copy_to_library_enabled: (Updatable) Make a copy of this task in Library
        :param builtins.bool is_discovery_output_task: (Updatable) Is this a discovery output task?
        :param builtins.str name: (Updatable) The name of the task
        :param builtins.str os_type: (Updatable) The OS for the task.
        :param builtins.str platform: (Updatable) The platform of the runbook.
        :param 'RunbookVersionTaskTaskRecordDetailsPropertiesArgs' properties: (Updatable) The properties of the task.
        :param builtins.str task_record_id: (Updatable) The ID of taskRecord.
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the
               new property values
        """
        pulumi.set(__self__, "scope", scope)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if execution_details is not None:
            pulumi.set(__self__, "execution_details", execution_details)
        if is_apply_subject_task is not None:
            pulumi.set(__self__, "is_apply_subject_task", is_apply_subject_task)
        if is_copy_to_library_enabled is not None:
            pulumi.set(__self__, "is_copy_to_library_enabled", is_copy_to_library_enabled)
        if is_discovery_output_task is not None:
            pulumi.set(__self__, "is_discovery_output_task", is_discovery_output_task)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if os_type is not None:
            pulumi.set(__self__, "os_type", os_type)
        if platform is not None:
            pulumi.set(__self__, "platform", platform)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if task_record_id is not None:
            pulumi.set(__self__, "task_record_id", task_record_id)

    @property
    @pulumi.getter
    def scope(self) -> builtins.str:
        """
        (Updatable) The scope of the task.
        """
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        """
        (Updatable) The description of the task.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="executionDetails")
    def execution_details(self) -> Optional['outputs.RunbookVersionTaskTaskRecordDetailsExecutionDetails']:
        """
        (Updatable) Execution details.
        """
        return pulumi.get(self, "execution_details")

    @property
    @pulumi.getter(name="isApplySubjectTask")
    def is_apply_subject_task(self) -> Optional[builtins.bool]:
        """
        (Updatable) Is this an Apply Subject Task? Ex. Patch
        Execution Task
        """
        return pulumi.get(self, "is_apply_subject_task")

    @property
    @pulumi.getter(name="isCopyToLibraryEnabled")
    def is_copy_to_library_enabled(self) -> Optional[builtins.bool]:
        """
        (Updatable) Make a copy of this task in Library
        """
        return pulumi.get(self, "is_copy_to_library_enabled")

    @property
    @pulumi.getter(name="isDiscoveryOutputTask")
    def is_discovery_output_task(self) -> Optional[builtins.bool]:
        """
        (Updatable) Is this a discovery output task?
        """
        return pulumi.get(self, "is_discovery_output_task")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        (Updatable) The name of the task
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[builtins.str]:
        """
        (Updatable) The OS for the task.
        """
        return pulumi.get(self, "os_type")

    @property
    @pulumi.getter
    def platform(self) -> Optional[builtins.str]:
        """
        (Updatable) The platform of the runbook.
        """
        return pulumi.get(self, "platform")

    @property
    @pulumi.getter
    def properties(self) -> Optional['outputs.RunbookVersionTaskTaskRecordDetailsProperties']:
        """
        (Updatable) The properties of the task.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="taskRecordId")
    def task_record_id(self) -> Optional[builtins.str]:
        """
        (Updatable) The ID of taskRecord.

        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the
        new property values
        """
        return pulumi.get(self, "task_record_id")


@pulumi.output_type
class RunbookVersionTaskTaskRecordDetailsExecutionDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "executionType":
            suggest = "execution_type"
        elif key == "catalogId":
            suggest = "catalog_id"
        elif key == "configFile":
            suggest = "config_file"
        elif key == "isExecutableContent":
            suggest = "is_executable_content"
        elif key == "isLocked":
            suggest = "is_locked"
        elif key == "isReadOutputVariableEnabled":
            suggest = "is_read_output_variable_enabled"
        elif key == "targetCompartmentId":
            suggest = "target_compartment_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookVersionTaskTaskRecordDetailsExecutionDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookVersionTaskTaskRecordDetailsExecutionDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookVersionTaskTaskRecordDetailsExecutionDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 execution_type: builtins.str,
                 catalog_id: Optional[builtins.str] = None,
                 command: Optional[builtins.str] = None,
                 config_file: Optional[builtins.str] = None,
                 content: Optional['outputs.RunbookVersionTaskTaskRecordDetailsExecutionDetailsContent'] = None,
                 credentials: Optional[Sequence['outputs.RunbookVersionTaskTaskRecordDetailsExecutionDetailsCredential']] = None,
                 endpoint: Optional[builtins.str] = None,
                 is_executable_content: Optional[builtins.bool] = None,
                 is_locked: Optional[builtins.bool] = None,
                 is_read_output_variable_enabled: Optional[builtins.bool] = None,
                 target_compartment_id: Optional[builtins.str] = None,
                 variables: Optional['outputs.RunbookVersionTaskTaskRecordDetailsExecutionDetailsVariables'] = None):
        """
        :param builtins.str execution_type: (Updatable) The action type of the task
        :param builtins.str command: (Updatable) Optional command to execute the content.
               You can provide any commands/arguments that can't be part of the script.
        :param builtins.str config_file: (Updatable) Catalog Id having config file.
        :param 'RunbookVersionTaskTaskRecordDetailsExecutionDetailsContentArgs' content: (Updatable) Content Source details.
        :param Sequence['RunbookVersionTaskTaskRecordDetailsExecutionDetailsCredentialArgs'] credentials: (Updatable) Credentials required for executing the
               task.
        :param builtins.str endpoint: (Updatable) Endpoint to be invoked.
        :param builtins.bool is_executable_content: (Updatable) Is the Content an executable
               file?
        :param builtins.bool is_locked: (Updatable) Is the script locked to prevent changes
               directly in Object Storage?
        :param builtins.bool is_read_output_variable_enabled: (Updatable) Is read output
               variable enabled
        :param builtins.str target_compartment_id: (Updatable) OCID of the compartment to
               which the resource belongs to.
        :param 'RunbookVersionTaskTaskRecordDetailsExecutionDetailsVariablesArgs' variables: (Updatable) The variable of the task. At least one
               of the dynamicArguments or output needs to be provided.
        """
        pulumi.set(__self__, "execution_type", execution_type)
        if catalog_id is not None:
            pulumi.set(__self__, "catalog_id", catalog_id)
        if command is not None:
            pulumi.set(__self__, "command", command)
        if config_file is not None:
            pulumi.set(__self__, "config_file", config_file)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if endpoint is not None:
            pulumi.set(__self__, "endpoint", endpoint)
        if is_executable_content is not None:
            pulumi.set(__self__, "is_executable_content", is_executable_content)
        if is_locked is not None:
            pulumi.set(__self__, "is_locked", is_locked)
        if is_read_output_variable_enabled is not None:
            pulumi.set(__self__, "is_read_output_variable_enabled", is_read_output_variable_enabled)
        if target_compartment_id is not None:
            pulumi.set(__self__, "target_compartment_id", target_compartment_id)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter(name="executionType")
    def execution_type(self) -> builtins.str:
        """
        (Updatable) The action type of the task
        """
        return pulumi.get(self, "execution_type")

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "catalog_id")

    @property
    @pulumi.getter
    def command(self) -> Optional[builtins.str]:
        """
        (Updatable) Optional command to execute the content.
        You can provide any commands/arguments that can't be part of the script.
        """
        return pulumi.get(self, "command")

    @property
    @pulumi.getter(name="configFile")
    def config_file(self) -> Optional[builtins.str]:
        """
        (Updatable) Catalog Id having config file.
        """
        return pulumi.get(self, "config_file")

    @property
    @pulumi.getter
    def content(self) -> Optional['outputs.RunbookVersionTaskTaskRecordDetailsExecutionDetailsContent']:
        """
        (Updatable) Content Source details.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter
    def credentials(self) -> Optional[Sequence['outputs.RunbookVersionTaskTaskRecordDetailsExecutionDetailsCredential']]:
        """
        (Updatable) Credentials required for executing the
        task.
        """
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[builtins.str]:
        """
        (Updatable) Endpoint to be invoked.
        """
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="isExecutableContent")
    def is_executable_content(self) -> Optional[builtins.bool]:
        """
        (Updatable) Is the Content an executable
        file?
        """
        return pulumi.get(self, "is_executable_content")

    @property
    @pulumi.getter(name="isLocked")
    def is_locked(self) -> Optional[builtins.bool]:
        """
        (Updatable) Is the script locked to prevent changes
        directly in Object Storage?
        """
        return pulumi.get(self, "is_locked")

    @property
    @pulumi.getter(name="isReadOutputVariableEnabled")
    def is_read_output_variable_enabled(self) -> Optional[builtins.bool]:
        """
        (Updatable) Is read output
        variable enabled
        """
        return pulumi.get(self, "is_read_output_variable_enabled")

    @property
    @pulumi.getter(name="targetCompartmentId")
    def target_compartment_id(self) -> Optional[builtins.str]:
        """
        (Updatable) OCID of the compartment to
        which the resource belongs to.
        """
        return pulumi.get(self, "target_compartment_id")

    @property
    @pulumi.getter
    def variables(self) -> Optional['outputs.RunbookVersionTaskTaskRecordDetailsExecutionDetailsVariables']:
        """
        (Updatable) The variable of the task. At least one
        of the dynamicArguments or output needs to be provided.
        """
        return pulumi.get(self, "variables")


@pulumi.output_type
class RunbookVersionTaskTaskRecordDetailsExecutionDetailsContent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"
        elif key == "catalogId":
            suggest = "catalog_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookVersionTaskTaskRecordDetailsExecutionDetailsContent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookVersionTaskTaskRecordDetailsExecutionDetailsContent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookVersionTaskTaskRecordDetailsExecutionDetailsContent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_type: builtins.str,
                 bucket: Optional[builtins.str] = None,
                 catalog_id: Optional[builtins.str] = None,
                 checksum: Optional[builtins.str] = None,
                 namespace: Optional[builtins.str] = None,
                 object: Optional[builtins.str] = None):
        """
        :param builtins.str source_type: (Updatable) Content Source type details.
        :param builtins.str bucket: (Updatable) Bucket Name.
        :param builtins.str checksum: (Updatable) md5 checksum of the
               artifact.
        :param builtins.str namespace: (Updatable) Namespace.
        :param builtins.str object: (Updatable) Object Name.
        """
        pulumi.set(__self__, "source_type", source_type)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if catalog_id is not None:
            pulumi.set(__self__, "catalog_id", catalog_id)
        if checksum is not None:
            pulumi.set(__self__, "checksum", checksum)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if object is not None:
            pulumi.set(__self__, "object", object)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> builtins.str:
        """
        (Updatable) Content Source type details.
        """
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def bucket(self) -> Optional[builtins.str]:
        """
        (Updatable) Bucket Name.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "catalog_id")

    @property
    @pulumi.getter
    def checksum(self) -> Optional[builtins.str]:
        """
        (Updatable) md5 checksum of the
        artifact.
        """
        return pulumi.get(self, "checksum")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[builtins.str]:
        """
        (Updatable) Namespace.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> Optional[builtins.str]:
        """
        (Updatable) Object Name.
        """
        return pulumi.get(self, "object")


@pulumi.output_type
class RunbookVersionTaskTaskRecordDetailsExecutionDetailsCredential(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookVersionTaskTaskRecordDetailsExecutionDetailsCredential. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookVersionTaskTaskRecordDetailsExecutionDetailsCredential.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookVersionTaskTaskRecordDetailsExecutionDetailsCredential.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: Optional[builtins.str] = None,
                 id: Optional[builtins.str] = None):
        """
        :param builtins.str display_name: (Updatable) A user-friendly name. Does not
               have to be unique, and it's changeable. Avoid entering confidential information. Example:
               `My new resource`
        :param builtins.str id: (Updatable) The OCID of the resource.
        """
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[builtins.str]:
        """
        (Updatable) A user-friendly name. Does not
        have to be unique, and it's changeable. Avoid entering confidential information. Example:
        `My new resource`
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        """
        (Updatable) The OCID of the resource.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class RunbookVersionTaskTaskRecordDetailsExecutionDetailsVariables(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "inputVariables":
            suggest = "input_variables"
        elif key == "outputVariables":
            suggest = "output_variables"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookVersionTaskTaskRecordDetailsExecutionDetailsVariables. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookVersionTaskTaskRecordDetailsExecutionDetailsVariables.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookVersionTaskTaskRecordDetailsExecutionDetailsVariables.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 input_variables: Optional[Sequence['outputs.RunbookVersionTaskTaskRecordDetailsExecutionDetailsVariablesInputVariable']] = None,
                 output_variables: Optional[Sequence[builtins.str]] = None):
        """
        :param Sequence['RunbookVersionTaskTaskRecordDetailsExecutionDetailsVariablesInputVariableArgs'] input_variables: (Updatable) The input variables for the
               task.
        :param Sequence[builtins.str] output_variables: (Updatable) The list of output variables.
        """
        if input_variables is not None:
            pulumi.set(__self__, "input_variables", input_variables)
        if output_variables is not None:
            pulumi.set(__self__, "output_variables", output_variables)

    @property
    @pulumi.getter(name="inputVariables")
    def input_variables(self) -> Optional[Sequence['outputs.RunbookVersionTaskTaskRecordDetailsExecutionDetailsVariablesInputVariable']]:
        """
        (Updatable) The input variables for the
        task.
        """
        return pulumi.get(self, "input_variables")

    @property
    @pulumi.getter(name="outputVariables")
    def output_variables(self) -> Optional[Sequence[builtins.str]]:
        """
        (Updatable) The list of output variables.
        """
        return pulumi.get(self, "output_variables")


@pulumi.output_type
class RunbookVersionTaskTaskRecordDetailsExecutionDetailsVariablesInputVariable(dict):
    def __init__(__self__, *,
                 description: Optional[builtins.str] = None,
                 name: Optional[builtins.str] = None,
                 type: Optional[builtins.str] = None):
        """
        :param builtins.str description: (Updatable) The description of the
               argument.
        :param builtins.str name: (Updatable) The name of the argument.
        :param builtins.str type: (Updatable) Input argument Type.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        """
        (Updatable) The description of the
        argument.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        (Updatable) The name of the argument.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        """
        (Updatable) Input argument Type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class RunbookVersionTaskTaskRecordDetailsProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "numRetries":
            suggest = "num_retries"
        elif key == "timeoutInSeconds":
            suggest = "timeout_in_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookVersionTaskTaskRecordDetailsProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookVersionTaskTaskRecordDetailsProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookVersionTaskTaskRecordDetailsProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 num_retries: Optional[builtins.int] = None,
                 timeout_in_seconds: Optional[builtins.int] = None):
        """
        :param builtins.int num_retries: (Updatable) The number of retries allowed.
        :param builtins.int timeout_in_seconds: (Updatable) The timeout in seconds for the task.
        """
        if num_retries is not None:
            pulumi.set(__self__, "num_retries", num_retries)
        if timeout_in_seconds is not None:
            pulumi.set(__self__, "timeout_in_seconds", timeout_in_seconds)

    @property
    @pulumi.getter(name="numRetries")
    def num_retries(self) -> Optional[builtins.int]:
        """
        (Updatable) The number of retries allowed.
        """
        return pulumi.get(self, "num_retries")

    @property
    @pulumi.getter(name="timeoutInSeconds")
    def timeout_in_seconds(self) -> Optional[builtins.int]:
        """
        (Updatable) The timeout in seconds for the task.
        """
        return pulumi.get(self, "timeout_in_seconds")


@pulumi.output_type
class SchedulerDefinitionActionGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fleetId":
            suggest = "fleet_id"
        elif key == "runbookId":
            suggest = "runbook_id"
        elif key == "runbookVersionName":
            suggest = "runbook_version_name"
        elif key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SchedulerDefinitionActionGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SchedulerDefinitionActionGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SchedulerDefinitionActionGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 fleet_id: builtins.str,
                 kind: builtins.str,
                 runbook_id: builtins.str,
                 runbook_version_name: builtins.str,
                 display_name: Optional[builtins.str] = None,
                 sequence: Optional[builtins.int] = None):
        """
        :param builtins.str fleet_id: (Updatable) ID of the fleet
        :param builtins.str kind: (Updatable) Action Group kind
        :param builtins.str runbook_id: (Updatable) ID of the runbook
        :param builtins.str runbook_version_name: (Updatable) Name of the runbook version
        :param builtins.str display_name: (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        :param builtins.int sequence: (Updatable) Sequence of the Action Group. Action groups will be executed in a seuential order. All Action Groups having the same sequence will be executed parallely. If no value is provided a default value of 1 will be given.
        """
        pulumi.set(__self__, "fleet_id", fleet_id)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "runbook_id", runbook_id)
        pulumi.set(__self__, "runbook_version_name", runbook_version_name)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if sequence is not None:
            pulumi.set(__self__, "sequence", sequence)

    @property
    @pulumi.getter(name="fleetId")
    def fleet_id(self) -> builtins.str:
        """
        (Updatable) ID of the fleet
        """
        return pulumi.get(self, "fleet_id")

    @property
    @pulumi.getter
    def kind(self) -> builtins.str:
        """
        (Updatable) Action Group kind
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="runbookId")
    def runbook_id(self) -> builtins.str:
        """
        (Updatable) ID of the runbook
        """
        return pulumi.get(self, "runbook_id")

    @property
    @pulumi.getter(name="runbookVersionName")
    def runbook_version_name(self) -> builtins.str:
        """
        (Updatable) Name of the runbook version
        """
        return pulumi.get(self, "runbook_version_name")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[builtins.str]:
        """
        (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def sequence(self) -> Optional[builtins.int]:
        """
        (Updatable) Sequence of the Action Group. Action groups will be executed in a seuential order. All Action Groups having the same sequence will be executed parallely. If no value is provided a default value of 1 will be given.
        """
        return pulumi.get(self, "sequence")


@pulumi.output_type
class SchedulerDefinitionRunBook(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "runbookId":
            suggest = "runbook_id"
        elif key == "runbookVersionName":
            suggest = "runbook_version_name"
        elif key == "inputParameters":
            suggest = "input_parameters"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SchedulerDefinitionRunBook. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SchedulerDefinitionRunBook.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SchedulerDefinitionRunBook.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 runbook_id: builtins.str,
                 runbook_version_name: builtins.str,
                 input_parameters: Optional[Sequence['outputs.SchedulerDefinitionRunBookInputParameter']] = None):
        """
        :param builtins.str runbook_id: (Updatable) The ID of the Runbook
        :param builtins.str runbook_version_name: (Updatable) The runbook version name
        :param Sequence['SchedulerDefinitionRunBookInputParameterArgs'] input_parameters: (Updatable) Input Parameters for the Task
        """
        pulumi.set(__self__, "runbook_id", runbook_id)
        pulumi.set(__self__, "runbook_version_name", runbook_version_name)
        if input_parameters is not None:
            pulumi.set(__self__, "input_parameters", input_parameters)

    @property
    @pulumi.getter(name="runbookId")
    def runbook_id(self) -> builtins.str:
        """
        (Updatable) The ID of the Runbook
        """
        return pulumi.get(self, "runbook_id")

    @property
    @pulumi.getter(name="runbookVersionName")
    def runbook_version_name(self) -> builtins.str:
        """
        (Updatable) The runbook version name
        """
        return pulumi.get(self, "runbook_version_name")

    @property
    @pulumi.getter(name="inputParameters")
    def input_parameters(self) -> Optional[Sequence['outputs.SchedulerDefinitionRunBookInputParameter']]:
        """
        (Updatable) Input Parameters for the Task
        """
        return pulumi.get(self, "input_parameters")


@pulumi.output_type
class SchedulerDefinitionRunBookInputParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "stepName":
            suggest = "step_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SchedulerDefinitionRunBookInputParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SchedulerDefinitionRunBookInputParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SchedulerDefinitionRunBookInputParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 step_name: builtins.str,
                 arguments: Optional[Sequence['outputs.SchedulerDefinitionRunBookInputParameterArgument']] = None):
        """
        :param builtins.str step_name: (Updatable) stepName for which the input parameters are provided
        :param Sequence['SchedulerDefinitionRunBookInputParameterArgumentArgs'] arguments: (Updatable) Arguments for the Task
        """
        pulumi.set(__self__, "step_name", step_name)
        if arguments is not None:
            pulumi.set(__self__, "arguments", arguments)

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> builtins.str:
        """
        (Updatable) stepName for which the input parameters are provided
        """
        return pulumi.get(self, "step_name")

    @property
    @pulumi.getter
    def arguments(self) -> Optional[Sequence['outputs.SchedulerDefinitionRunBookInputParameterArgument']]:
        """
        (Updatable) Arguments for the Task
        """
        return pulumi.get(self, "arguments")


@pulumi.output_type
class SchedulerDefinitionRunBookInputParameterArgument(dict):
    def __init__(__self__, *,
                 kind: builtins.str,
                 name: builtins.str,
                 content: Optional['outputs.SchedulerDefinitionRunBookInputParameterArgumentContent'] = None,
                 value: Optional[builtins.str] = None):
        """
        :param builtins.str kind: (Updatable) Task argument kind
        :param builtins.str name: (Updatable) Name of the input variable
        :param 'SchedulerDefinitionRunBookInputParameterArgumentContentArgs' content: (Updatable) Content Source details.
        :param builtins.str value: (Updatable) The task input
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def kind(self) -> builtins.str:
        """
        (Updatable) Task argument kind
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        (Updatable) Name of the input variable
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def content(self) -> Optional['outputs.SchedulerDefinitionRunBookInputParameterArgumentContent']:
        """
        (Updatable) Content Source details.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter
    def value(self) -> Optional[builtins.str]:
        """
        (Updatable) The task input
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class SchedulerDefinitionRunBookInputParameterArgumentContent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SchedulerDefinitionRunBookInputParameterArgumentContent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SchedulerDefinitionRunBookInputParameterArgumentContent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SchedulerDefinitionRunBookInputParameterArgumentContent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bucket: builtins.str,
                 checksum: builtins.str,
                 namespace: builtins.str,
                 object: builtins.str,
                 source_type: builtins.str):
        """
        :param builtins.str bucket: (Updatable) Bucket Name.
        :param builtins.str checksum: (Updatable) md5 checksum of the artifact.
        :param builtins.str namespace: (Updatable) Namespace.
        :param builtins.str object: (Updatable) Object Name.
        :param builtins.str source_type: (Updatable) Content Source type details.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "checksum", checksum)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter
    def bucket(self) -> builtins.str:
        """
        (Updatable) Bucket Name.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def checksum(self) -> builtins.str:
        """
        (Updatable) md5 checksum of the artifact.
        """
        return pulumi.get(self, "checksum")

    @property
    @pulumi.getter
    def namespace(self) -> builtins.str:
        """
        (Updatable) Namespace.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> builtins.str:
        """
        (Updatable) Object Name.
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> builtins.str:
        """
        (Updatable) Content Source type details.
        """
        return pulumi.get(self, "source_type")


@pulumi.output_type
class SchedulerDefinitionSchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "executionStartdate":
            suggest = "execution_startdate"
        elif key == "maintenanceWindowId":
            suggest = "maintenance_window_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SchedulerDefinitionSchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SchedulerDefinitionSchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SchedulerDefinitionSchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 execution_startdate: builtins.str,
                 type: builtins.str,
                 duration: Optional[builtins.str] = None,
                 maintenance_window_id: Optional[builtins.str] = None,
                 recurrences: Optional[builtins.str] = None):
        """
        :param builtins.str execution_startdate: (Updatable) Start Date for the schedule. An RFC3339 formatted datetime string
        :param builtins.str type: (Updatable) Schedule Type
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param builtins.str duration: (Updatable) Duration of the schedule.
        :param builtins.str maintenance_window_id: (Updatable) Provide MaintenanceWindowId
        :param builtins.str recurrences: (Updatable) Recurrence rule specification if recurring
        """
        pulumi.set(__self__, "execution_startdate", execution_startdate)
        pulumi.set(__self__, "type", type)
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if maintenance_window_id is not None:
            pulumi.set(__self__, "maintenance_window_id", maintenance_window_id)
        if recurrences is not None:
            pulumi.set(__self__, "recurrences", recurrences)

    @property
    @pulumi.getter(name="executionStartdate")
    def execution_startdate(self) -> builtins.str:
        """
        (Updatable) Start Date for the schedule. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "execution_startdate")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        (Updatable) Schedule Type


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def duration(self) -> Optional[builtins.str]:
        """
        (Updatable) Duration of the schedule.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter(name="maintenanceWindowId")
    def maintenance_window_id(self) -> Optional[builtins.str]:
        """
        (Updatable) Provide MaintenanceWindowId
        """
        return pulumi.get(self, "maintenance_window_id")

    @property
    @pulumi.getter
    def recurrences(self) -> Optional[builtins.str]:
        """
        (Updatable) Recurrence rule specification if recurring
        """
        return pulumi.get(self, "recurrences")


@pulumi.output_type
class TaskRecordDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "executionDetails":
            suggest = "execution_details"
        elif key == "isApplySubjectTask":
            suggest = "is_apply_subject_task"
        elif key == "isDiscoveryOutputTask":
            suggest = "is_discovery_output_task"
        elif key == "osType":
            suggest = "os_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TaskRecordDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TaskRecordDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TaskRecordDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 execution_details: 'outputs.TaskRecordDetailsExecutionDetails',
                 scope: builtins.str,
                 is_apply_subject_task: Optional[builtins.bool] = None,
                 is_discovery_output_task: Optional[builtins.bool] = None,
                 operation: Optional[builtins.str] = None,
                 os_type: Optional[builtins.str] = None,
                 platform: Optional[builtins.str] = None,
                 properties: Optional['outputs.TaskRecordDetailsProperties'] = None):
        """
        :param 'TaskRecordDetailsExecutionDetailsArgs' execution_details: (Updatable) Execution details.
        :param builtins.str scope: (Updatable) The scope of the task
        :param builtins.bool is_apply_subject_task: (Updatable) Is this an Apply Subject Task?  Set this to true for a Patch Execution Task which applies patches(subjects) on a target.
        :param builtins.bool is_discovery_output_task: (Updatable) Is this a discovery output task?
        :param builtins.str operation: (Updatable) The lifecycle operation performed by the runbook.
        :param builtins.str os_type: (Updatable) The OS for the task
        :param builtins.str platform: (Updatable) The platform of the runbook.
        :param 'TaskRecordDetailsPropertiesArgs' properties: (Updatable) The properties of the task.
        """
        pulumi.set(__self__, "execution_details", execution_details)
        pulumi.set(__self__, "scope", scope)
        if is_apply_subject_task is not None:
            pulumi.set(__self__, "is_apply_subject_task", is_apply_subject_task)
        if is_discovery_output_task is not None:
            pulumi.set(__self__, "is_discovery_output_task", is_discovery_output_task)
        if operation is not None:
            pulumi.set(__self__, "operation", operation)
        if os_type is not None:
            pulumi.set(__self__, "os_type", os_type)
        if platform is not None:
            pulumi.set(__self__, "platform", platform)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="executionDetails")
    def execution_details(self) -> 'outputs.TaskRecordDetailsExecutionDetails':
        """
        (Updatable) Execution details.
        """
        return pulumi.get(self, "execution_details")

    @property
    @pulumi.getter
    def scope(self) -> builtins.str:
        """
        (Updatable) The scope of the task
        """
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter(name="isApplySubjectTask")
    def is_apply_subject_task(self) -> Optional[builtins.bool]:
        """
        (Updatable) Is this an Apply Subject Task?  Set this to true for a Patch Execution Task which applies patches(subjects) on a target.
        """
        return pulumi.get(self, "is_apply_subject_task")

    @property
    @pulumi.getter(name="isDiscoveryOutputTask")
    def is_discovery_output_task(self) -> Optional[builtins.bool]:
        """
        (Updatable) Is this a discovery output task?
        """
        return pulumi.get(self, "is_discovery_output_task")

    @property
    @pulumi.getter
    def operation(self) -> Optional[builtins.str]:
        """
        (Updatable) The lifecycle operation performed by the runbook.
        """
        return pulumi.get(self, "operation")

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[builtins.str]:
        """
        (Updatable) The OS for the task
        """
        return pulumi.get(self, "os_type")

    @property
    @pulumi.getter
    def platform(self) -> Optional[builtins.str]:
        """
        (Updatable) The platform of the runbook.
        """
        return pulumi.get(self, "platform")

    @property
    @pulumi.getter
    def properties(self) -> Optional['outputs.TaskRecordDetailsProperties']:
        """
        (Updatable) The properties of the task.
        """
        return pulumi.get(self, "properties")


@pulumi.output_type
class TaskRecordDetailsExecutionDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "executionType":
            suggest = "execution_type"
        elif key == "catalogId":
            suggest = "catalog_id"
        elif key == "configFile":
            suggest = "config_file"
        elif key == "isExecutableContent":
            suggest = "is_executable_content"
        elif key == "isLocked":
            suggest = "is_locked"
        elif key == "isReadOutputVariableEnabled":
            suggest = "is_read_output_variable_enabled"
        elif key == "targetCompartmentId":
            suggest = "target_compartment_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TaskRecordDetailsExecutionDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TaskRecordDetailsExecutionDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TaskRecordDetailsExecutionDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 execution_type: builtins.str,
                 catalog_id: Optional[builtins.str] = None,
                 command: Optional[builtins.str] = None,
                 config_file: Optional[builtins.str] = None,
                 content: Optional['outputs.TaskRecordDetailsExecutionDetailsContent'] = None,
                 credentials: Optional[Sequence['outputs.TaskRecordDetailsExecutionDetailsCredential']] = None,
                 endpoint: Optional[builtins.str] = None,
                 is_executable_content: Optional[builtins.bool] = None,
                 is_locked: Optional[builtins.bool] = None,
                 is_read_output_variable_enabled: Optional[builtins.bool] = None,
                 target_compartment_id: Optional[builtins.str] = None,
                 variables: Optional['outputs.TaskRecordDetailsExecutionDetailsVariables'] = None):
        """
        :param builtins.str execution_type: (Updatable) The action type of the task
        :param builtins.str command: (Updatable) Optional command to execute the content. You can provide any commands/arguments that can't be part of the script.
        :param builtins.str config_file: (Updatable) Catalog Id having config file.
        :param 'TaskRecordDetailsExecutionDetailsContentArgs' content: (Updatable) Content Source details.
        :param Sequence['TaskRecordDetailsExecutionDetailsCredentialArgs'] credentials: (Updatable) Credentials required for executing the task.
        :param builtins.str endpoint: (Updatable) Endpoint to be invoked.
        :param builtins.bool is_executable_content: (Updatable) Is the Content an executable file?
        :param builtins.bool is_locked: (Updatable) Is the script locked to prevent changes directly in Object Storage?
        :param builtins.bool is_read_output_variable_enabled: (Updatable) Is read output variable enabled
        :param builtins.str target_compartment_id: (Updatable) OCID of the compartment to which the resource belongs to.
        :param 'TaskRecordDetailsExecutionDetailsVariablesArgs' variables: (Updatable) The variable of the task. At least one of the dynamicArguments or output needs to be provided.
        """
        pulumi.set(__self__, "execution_type", execution_type)
        if catalog_id is not None:
            pulumi.set(__self__, "catalog_id", catalog_id)
        if command is not None:
            pulumi.set(__self__, "command", command)
        if config_file is not None:
            pulumi.set(__self__, "config_file", config_file)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if endpoint is not None:
            pulumi.set(__self__, "endpoint", endpoint)
        if is_executable_content is not None:
            pulumi.set(__self__, "is_executable_content", is_executable_content)
        if is_locked is not None:
            pulumi.set(__self__, "is_locked", is_locked)
        if is_read_output_variable_enabled is not None:
            pulumi.set(__self__, "is_read_output_variable_enabled", is_read_output_variable_enabled)
        if target_compartment_id is not None:
            pulumi.set(__self__, "target_compartment_id", target_compartment_id)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter(name="executionType")
    def execution_type(self) -> builtins.str:
        """
        (Updatable) The action type of the task
        """
        return pulumi.get(self, "execution_type")

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "catalog_id")

    @property
    @pulumi.getter
    def command(self) -> Optional[builtins.str]:
        """
        (Updatable) Optional command to execute the content. You can provide any commands/arguments that can't be part of the script.
        """
        return pulumi.get(self, "command")

    @property
    @pulumi.getter(name="configFile")
    def config_file(self) -> Optional[builtins.str]:
        """
        (Updatable) Catalog Id having config file.
        """
        return pulumi.get(self, "config_file")

    @property
    @pulumi.getter
    def content(self) -> Optional['outputs.TaskRecordDetailsExecutionDetailsContent']:
        """
        (Updatable) Content Source details.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter
    def credentials(self) -> Optional[Sequence['outputs.TaskRecordDetailsExecutionDetailsCredential']]:
        """
        (Updatable) Credentials required for executing the task.
        """
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[builtins.str]:
        """
        (Updatable) Endpoint to be invoked.
        """
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="isExecutableContent")
    def is_executable_content(self) -> Optional[builtins.bool]:
        """
        (Updatable) Is the Content an executable file?
        """
        return pulumi.get(self, "is_executable_content")

    @property
    @pulumi.getter(name="isLocked")
    def is_locked(self) -> Optional[builtins.bool]:
        """
        (Updatable) Is the script locked to prevent changes directly in Object Storage?
        """
        return pulumi.get(self, "is_locked")

    @property
    @pulumi.getter(name="isReadOutputVariableEnabled")
    def is_read_output_variable_enabled(self) -> Optional[builtins.bool]:
        """
        (Updatable) Is read output variable enabled
        """
        return pulumi.get(self, "is_read_output_variable_enabled")

    @property
    @pulumi.getter(name="targetCompartmentId")
    def target_compartment_id(self) -> Optional[builtins.str]:
        """
        (Updatable) OCID of the compartment to which the resource belongs to.
        """
        return pulumi.get(self, "target_compartment_id")

    @property
    @pulumi.getter
    def variables(self) -> Optional['outputs.TaskRecordDetailsExecutionDetailsVariables']:
        """
        (Updatable) The variable of the task. At least one of the dynamicArguments or output needs to be provided.
        """
        return pulumi.get(self, "variables")


@pulumi.output_type
class TaskRecordDetailsExecutionDetailsContent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"
        elif key == "catalogId":
            suggest = "catalog_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TaskRecordDetailsExecutionDetailsContent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TaskRecordDetailsExecutionDetailsContent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TaskRecordDetailsExecutionDetailsContent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_type: builtins.str,
                 bucket: Optional[builtins.str] = None,
                 catalog_id: Optional[builtins.str] = None,
                 checksum: Optional[builtins.str] = None,
                 namespace: Optional[builtins.str] = None,
                 object: Optional[builtins.str] = None):
        """
        :param builtins.str source_type: (Updatable) Content Source type details.
        :param builtins.str bucket: (Updatable) Bucket Name.
        :param builtins.str checksum: (Updatable) md5 checksum of the artifact.
        :param builtins.str namespace: (Updatable) Namespace.
        :param builtins.str object: (Updatable) Object Name.
        """
        pulumi.set(__self__, "source_type", source_type)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if catalog_id is not None:
            pulumi.set(__self__, "catalog_id", catalog_id)
        if checksum is not None:
            pulumi.set(__self__, "checksum", checksum)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if object is not None:
            pulumi.set(__self__, "object", object)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> builtins.str:
        """
        (Updatable) Content Source type details.
        """
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def bucket(self) -> Optional[builtins.str]:
        """
        (Updatable) Bucket Name.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "catalog_id")

    @property
    @pulumi.getter
    def checksum(self) -> Optional[builtins.str]:
        """
        (Updatable) md5 checksum of the artifact.
        """
        return pulumi.get(self, "checksum")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[builtins.str]:
        """
        (Updatable) Namespace.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> Optional[builtins.str]:
        """
        (Updatable) Object Name.
        """
        return pulumi.get(self, "object")


@pulumi.output_type
class TaskRecordDetailsExecutionDetailsCredential(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TaskRecordDetailsExecutionDetailsCredential. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TaskRecordDetailsExecutionDetailsCredential.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TaskRecordDetailsExecutionDetailsCredential.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: Optional[builtins.str] = None,
                 id: Optional[builtins.str] = None):
        """
        :param builtins.str display_name: (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        :param builtins.str id: (Updatable) The OCID of the resource.
        """
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[builtins.str]:
        """
        (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        """
        (Updatable) The OCID of the resource.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class TaskRecordDetailsExecutionDetailsVariables(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "inputVariables":
            suggest = "input_variables"
        elif key == "outputVariables":
            suggest = "output_variables"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TaskRecordDetailsExecutionDetailsVariables. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TaskRecordDetailsExecutionDetailsVariables.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TaskRecordDetailsExecutionDetailsVariables.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 input_variables: Optional[Sequence['outputs.TaskRecordDetailsExecutionDetailsVariablesInputVariable']] = None,
                 output_variables: Optional[Sequence[builtins.str]] = None):
        """
        :param Sequence['TaskRecordDetailsExecutionDetailsVariablesInputVariableArgs'] input_variables: (Updatable) The input variables for the task.
        :param Sequence[builtins.str] output_variables: (Updatable) The list of output variables.
        """
        if input_variables is not None:
            pulumi.set(__self__, "input_variables", input_variables)
        if output_variables is not None:
            pulumi.set(__self__, "output_variables", output_variables)

    @property
    @pulumi.getter(name="inputVariables")
    def input_variables(self) -> Optional[Sequence['outputs.TaskRecordDetailsExecutionDetailsVariablesInputVariable']]:
        """
        (Updatable) The input variables for the task.
        """
        return pulumi.get(self, "input_variables")

    @property
    @pulumi.getter(name="outputVariables")
    def output_variables(self) -> Optional[Sequence[builtins.str]]:
        """
        (Updatable) The list of output variables.
        """
        return pulumi.get(self, "output_variables")


@pulumi.output_type
class TaskRecordDetailsExecutionDetailsVariablesInputVariable(dict):
    def __init__(__self__, *,
                 description: Optional[builtins.str] = None,
                 name: Optional[builtins.str] = None,
                 type: Optional[builtins.str] = None):
        """
        :param builtins.str description: (Updatable) The description of the argument.
        :param builtins.str name: (Updatable) The name of the argument.
        :param builtins.str type: (Updatable) Input argument Type.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        """
        (Updatable) The description of the argument.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        (Updatable) The name of the argument.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        """
        (Updatable) Input argument Type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class TaskRecordDetailsProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "numRetries":
            suggest = "num_retries"
        elif key == "timeoutInSeconds":
            suggest = "timeout_in_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TaskRecordDetailsProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TaskRecordDetailsProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TaskRecordDetailsProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 num_retries: builtins.int,
                 timeout_in_seconds: builtins.int):
        """
        :param builtins.int num_retries: (Updatable) The number of retries allowed.
        :param builtins.int timeout_in_seconds: (Updatable) The timeout in seconds for the task.
        """
        pulumi.set(__self__, "num_retries", num_retries)
        pulumi.set(__self__, "timeout_in_seconds", timeout_in_seconds)

    @property
    @pulumi.getter(name="numRetries")
    def num_retries(self) -> builtins.int:
        """
        (Updatable) The number of retries allowed.
        """
        return pulumi.get(self, "num_retries")

    @property
    @pulumi.getter(name="timeoutInSeconds")
    def timeout_in_seconds(self) -> builtins.int:
        """
        (Updatable) The timeout in seconds for the task.
        """
        return pulumi.get(self, "timeout_in_seconds")


@pulumi.output_type
class GetAnnouncementsAnnouncementCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetAnnouncementsAnnouncementCollectionItemResult']):
        """
        :param Sequence['GetAnnouncementsAnnouncementCollectionItemArgs'] items: List of AnnouncementSummary items.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetAnnouncementsAnnouncementCollectionItemResult']:
        """
        List of AnnouncementSummary items.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAnnouncementsAnnouncementCollectionItemResult(dict):
    def __init__(__self__, *,
                 announcement_end: builtins.str,
                 announcement_start: builtins.str,
                 compartment_id: builtins.str,
                 defined_tags: Mapping[str, builtins.str],
                 description: builtins.str,
                 details: builtins.str,
                 display_name: builtins.str,
                 freeform_tags: Mapping[str, builtins.str],
                 id: builtins.str,
                 resource_region: builtins.str,
                 state: builtins.str,
                 summary: builtins.str,
                 system_tags: Mapping[str, builtins.str],
                 time_created: builtins.str,
                 time_updated: builtins.str,
                 type: builtins.str,
                 url: builtins.str):
        """
        :param builtins.str announcement_end: Announcement end date.
        :param builtins.str announcement_start: Announcement start date.
        :param builtins.str compartment_id: The ID of the compartment in which to list resources.
        :param Mapping[str, builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param builtins.str description: A user-friendly description. To provide some insight about the resource. Avoid entering confidential information.
        :param builtins.str details: Announcement details.
        :param builtins.str display_name: A filter to return only resources that match the entire display name given.
        :param Mapping[str, builtins.str] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param builtins.str id: The OCID of the resource.
        :param builtins.str resource_region: Associated region
        :param builtins.str state: The lifecycle state of the announcement.
        :param builtins.str summary: Summary of the announcement.
        :param Mapping[str, builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param builtins.str time_created: The time this resource was created. An RFC3339 formatted datetime string.
        :param builtins.str time_updated: The time this resource was last updated. An RFC3339 formatted datetime string.
        :param builtins.str type: Type of announcement.
        :param builtins.str url: URL to the announcement.
        """
        pulumi.set(__self__, "announcement_end", announcement_end)
        pulumi.set(__self__, "announcement_start", announcement_start)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "resource_region", resource_region)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "summary", summary)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="announcementEnd")
    def announcement_end(self) -> builtins.str:
        """
        Announcement end date.
        """
        return pulumi.get(self, "announcement_end")

    @property
    @pulumi.getter(name="announcementStart")
    def announcement_start(self) -> builtins.str:
        """
        Announcement start date.
        """
        return pulumi.get(self, "announcement_start")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        The ID of the compartment in which to list resources.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        A user-friendly description. To provide some insight about the resource. Avoid entering confidential information.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def details(self) -> builtins.str:
        """
        Announcement details.
        """
        return pulumi.get(self, "details")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The OCID of the resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="resourceRegion")
    def resource_region(self) -> builtins.str:
        """
        Associated region
        """
        return pulumi.get(self, "resource_region")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        The lifecycle state of the announcement.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def summary(self) -> builtins.str:
        """
        Summary of the announcement.
        """
        return pulumi.get(self, "summary")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The time this resource was created. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> builtins.str:
        """
        The time this resource was last updated. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Type of announcement.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> builtins.str:
        """
        URL to the announcement.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetAnnouncementsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetCatalogItemCatalogResultPayloadResult(dict):
    def __init__(__self__, *,
                 branch_name: builtins.str,
                 config_result_type: builtins.str,
                 configuration_source_provider_id: builtins.str,
                 package_url: builtins.str,
                 repository_url: builtins.str,
                 template_id: builtins.str,
                 time_expires: builtins.str,
                 working_directory: builtins.str):
        """
        :param builtins.str branch_name: branch Name
        :param builtins.str config_result_type: config result type.
        :param builtins.str configuration_source_provider_id: configuration Source Provider [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)
        :param builtins.str package_url: package url
        :param builtins.str repository_url: repository Url
        :param builtins.str template_id: template id
        :param builtins.str time_expires: The date and time expires, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        """
        pulumi.set(__self__, "branch_name", branch_name)
        pulumi.set(__self__, "config_result_type", config_result_type)
        pulumi.set(__self__, "configuration_source_provider_id", configuration_source_provider_id)
        pulumi.set(__self__, "package_url", package_url)
        pulumi.set(__self__, "repository_url", repository_url)
        pulumi.set(__self__, "template_id", template_id)
        pulumi.set(__self__, "time_expires", time_expires)
        pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter(name="branchName")
    def branch_name(self) -> builtins.str:
        """
        branch Name
        """
        return pulumi.get(self, "branch_name")

    @property
    @pulumi.getter(name="configResultType")
    def config_result_type(self) -> builtins.str:
        """
        config result type.
        """
        return pulumi.get(self, "config_result_type")

    @property
    @pulumi.getter(name="configurationSourceProviderId")
    def configuration_source_provider_id(self) -> builtins.str:
        """
        configuration Source Provider [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)
        """
        return pulumi.get(self, "configuration_source_provider_id")

    @property
    @pulumi.getter(name="packageUrl")
    def package_url(self) -> builtins.str:
        """
        package url
        """
        return pulumi.get(self, "package_url")

    @property
    @pulumi.getter(name="repositoryUrl")
    def repository_url(self) -> builtins.str:
        """
        repository Url
        """
        return pulumi.get(self, "repository_url")

    @property
    @pulumi.getter(name="templateId")
    def template_id(self) -> builtins.str:
        """
        template id
        """
        return pulumi.get(self, "template_id")

    @property
    @pulumi.getter(name="timeExpires")
    def time_expires(self) -> builtins.str:
        """
        The date and time expires, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_expires")

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> builtins.str:
        return pulumi.get(self, "working_directory")


@pulumi.output_type
class GetCatalogItemCatalogSourcePayloadResult(dict):
    def __init__(__self__, *,
                 access_uri: builtins.str,
                 branch_name: builtins.str,
                 bucket: builtins.str,
                 config_source_type: builtins.str,
                 configuration_source_provider_id: builtins.str,
                 description: builtins.str,
                 listing_id: builtins.str,
                 long_description: builtins.str,
                 namespace: builtins.str,
                 object: builtins.str,
                 repository_url: builtins.str,
                 template_display_name: builtins.str,
                 time_expires: builtins.str,
                 version: builtins.str,
                 working_directory: builtins.str,
                 zip_file_base64encoded: builtins.str):
        """
        :param builtins.str access_uri: access uri
        :param builtins.str branch_name: branch Name
        :param builtins.str bucket: bucket name
        :param builtins.str config_source_type: Config source type Eg: STACK_TEMPLATE_CATALOG_SOURCE, PAR_CATALOG_SOURCE, GIT_CATALOG_SOURCE, MARKETPLACE_CATALOG_SOURCE.
        :param builtins.str configuration_source_provider_id: configuration Source Provider [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)
        :param builtins.str description: Description about the catalog item.
        :param builtins.str listing_id: The catalog listing Id.
        :param builtins.str long_description: Template Long Description
        :param builtins.str namespace: nameSpace
        :param builtins.str object: object name
        :param builtins.str repository_url: repository Url
        :param builtins.str template_display_name: Template Display Name
        :param builtins.str time_expires: The date and time expires, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        :param builtins.str version: This version parameter of Payload.
        :param builtins.str zip_file_base64encoded: The Base64 encoded template. This payload will trigger CreateTemplate API, where the parameter will be passed.
        """
        pulumi.set(__self__, "access_uri", access_uri)
        pulumi.set(__self__, "branch_name", branch_name)
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "config_source_type", config_source_type)
        pulumi.set(__self__, "configuration_source_provider_id", configuration_source_provider_id)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "listing_id", listing_id)
        pulumi.set(__self__, "long_description", long_description)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "repository_url", repository_url)
        pulumi.set(__self__, "template_display_name", template_display_name)
        pulumi.set(__self__, "time_expires", time_expires)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "working_directory", working_directory)
        pulumi.set(__self__, "zip_file_base64encoded", zip_file_base64encoded)

    @property
    @pulumi.getter(name="accessUri")
    def access_uri(self) -> builtins.str:
        """
        access uri
        """
        return pulumi.get(self, "access_uri")

    @property
    @pulumi.getter(name="branchName")
    def branch_name(self) -> builtins.str:
        """
        branch Name
        """
        return pulumi.get(self, "branch_name")

    @property
    @pulumi.getter
    def bucket(self) -> builtins.str:
        """
        bucket name
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="configSourceType")
    def config_source_type(self) -> builtins.str:
        """
        Config source type Eg: STACK_TEMPLATE_CATALOG_SOURCE, PAR_CATALOG_SOURCE, GIT_CATALOG_SOURCE, MARKETPLACE_CATALOG_SOURCE.
        """
        return pulumi.get(self, "config_source_type")

    @property
    @pulumi.getter(name="configurationSourceProviderId")
    def configuration_source_provider_id(self) -> builtins.str:
        """
        configuration Source Provider [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)
        """
        return pulumi.get(self, "configuration_source_provider_id")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        Description about the catalog item.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="listingId")
    def listing_id(self) -> builtins.str:
        """
        The catalog listing Id.
        """
        return pulumi.get(self, "listing_id")

    @property
    @pulumi.getter(name="longDescription")
    def long_description(self) -> builtins.str:
        """
        Template Long Description
        """
        return pulumi.get(self, "long_description")

    @property
    @pulumi.getter
    def namespace(self) -> builtins.str:
        """
        nameSpace
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> builtins.str:
        """
        object name
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter(name="repositoryUrl")
    def repository_url(self) -> builtins.str:
        """
        repository Url
        """
        return pulumi.get(self, "repository_url")

    @property
    @pulumi.getter(name="templateDisplayName")
    def template_display_name(self) -> builtins.str:
        """
        Template Display Name
        """
        return pulumi.get(self, "template_display_name")

    @property
    @pulumi.getter(name="timeExpires")
    def time_expires(self) -> builtins.str:
        """
        The date and time expires, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_expires")

    @property
    @pulumi.getter
    def version(self) -> builtins.str:
        """
        This version parameter of Payload.
        """
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> builtins.str:
        return pulumi.get(self, "working_directory")

    @property
    @pulumi.getter(name="zipFileBase64encoded")
    def zip_file_base64encoded(self) -> builtins.str:
        """
        The Base64 encoded template. This payload will trigger CreateTemplate API, where the parameter will be passed.
        """
        return pulumi.get(self, "zip_file_base64encoded")


@pulumi.output_type
class GetCatalogItemsCatalogItemCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetCatalogItemsCatalogItemCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetCatalogItemsCatalogItemCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetCatalogItemsCatalogItemCollectionItemResult(dict):
    def __init__(__self__, *,
                 catalog_result_payloads: Sequence['outputs.GetCatalogItemsCatalogItemCollectionItemCatalogResultPayloadResult'],
                 catalog_source_payloads: Sequence['outputs.GetCatalogItemsCatalogItemCollectionItemCatalogSourcePayloadResult'],
                 clone_catalog_item_trigger: builtins.int,
                 compartment_id: builtins.str,
                 config_source_type: builtins.str,
                 defined_tags: Mapping[str, builtins.str],
                 description: builtins.str,
                 display_name: builtins.str,
                 freeform_tags: Mapping[str, builtins.str],
                 id: builtins.str,
                 lifecycle_details: builtins.str,
                 listing_id: builtins.str,
                 listing_version: builtins.str,
                 package_type: builtins.str,
                 short_description: builtins.str,
                 should_list_public_items: builtins.bool,
                 state: builtins.str,
                 system_tags: Mapping[str, builtins.str],
                 time_backfill_last_checked: builtins.str,
                 time_created: builtins.str,
                 time_last_checked: builtins.str,
                 time_released: builtins.str,
                 time_updated: builtins.str,
                 version_description: builtins.str):
        """
        :param Sequence['GetCatalogItemsCatalogItemCollectionItemCatalogResultPayloadArgs'] catalog_result_payloads: Catalog result payload.
        :param Sequence['GetCatalogItemsCatalogItemCollectionItemCatalogSourcePayloadArgs'] catalog_source_payloads: Catalog source payload.
        :param builtins.str compartment_id: (Updatable) The ID of the compartment in which to list resources.
        :param builtins.str config_source_type: The [ConfigSourceType](https://www.terraform.io/definitions/CatalogItem/configSourceType) Eg: STACK_TEMPLATE_CATALOG_SOURCE, PAR_CATALOG_SOURCE, URL_CATALOG_SOURCE, MARKETPLACE_CATALOG_SOURCE.
        :param Mapping[str, builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param builtins.str description: Description about the catalog item.
        :param builtins.str display_name: A filter to return only resources that match the entire display name given.
        :param Mapping[str, builtins.str] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param builtins.str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the catalog.
        :param builtins.str lifecycle_details: The details of lifecycle state CatalogItem.
        :param builtins.str listing_id: The catalog listing Id.
        :param builtins.str listing_version: The catalog package version.
        :param builtins.str package_type: Config package type Eg: TF_PACKAGE, NON_TF_PACKAGE, CONFIG_FILE.
        :param builtins.str short_description: Short description about the catalog item.
        :param builtins.bool should_list_public_items: The indicator to append Public Items from the root compartment to any query, when set to TRUE.
        :param builtins.str state: A filter to return only resources that match the given lifecycle state. The state value is case-insensitive.
        :param Mapping[str, builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param builtins.str time_backfill_last_checked: The date and time the CatalogItem was last checked by backfill job, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339). Example: `2016-08-25T21:10:29.600Z`
        :param builtins.str time_created: The date and time the CatalogItem was created, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339). Example: `2016-08-25T21:10:29.600Z`
        :param builtins.str time_last_checked: The date and time the CatalogItem was last checked, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339). Example: `2016-08-25T21:10:29.600Z`
        :param builtins.str time_released: The date and time the CatalogItem was released, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339). Example: `2016-08-25T21:10:29.600Z`
        :param builtins.str time_updated: The date and time the CatalogItem was updated, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339). Example: `2016-08-25T21:10:29.600Z`
        :param builtins.str version_description: Version description about the catalog item.
        """
        pulumi.set(__self__, "catalog_result_payloads", catalog_result_payloads)
        pulumi.set(__self__, "catalog_source_payloads", catalog_source_payloads)
        pulumi.set(__self__, "clone_catalog_item_trigger", clone_catalog_item_trigger)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "config_source_type", config_source_type)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "listing_id", listing_id)
        pulumi.set(__self__, "listing_version", listing_version)
        pulumi.set(__self__, "package_type", package_type)
        pulumi.set(__self__, "short_description", short_description)
        pulumi.set(__self__, "should_list_public_items", should_list_public_items)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_backfill_last_checked", time_backfill_last_checked)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_last_checked", time_last_checked)
        pulumi.set(__self__, "time_released", time_released)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "version_description", version_description)

    @property
    @pulumi.getter(name="catalogResultPayloads")
    def catalog_result_payloads(self) -> Sequence['outputs.GetCatalogItemsCatalogItemCollectionItemCatalogResultPayloadResult']:
        """
        Catalog result payload.
        """
        return pulumi.get(self, "catalog_result_payloads")

    @property
    @pulumi.getter(name="catalogSourcePayloads")
    def catalog_source_payloads(self) -> Sequence['outputs.GetCatalogItemsCatalogItemCollectionItemCatalogSourcePayloadResult']:
        """
        Catalog source payload.
        """
        return pulumi.get(self, "catalog_source_payloads")

    @property
    @pulumi.getter(name="cloneCatalogItemTrigger")
    def clone_catalog_item_trigger(self) -> builtins.int:
        return pulumi.get(self, "clone_catalog_item_trigger")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        (Updatable) The ID of the compartment in which to list resources.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="configSourceType")
    def config_source_type(self) -> builtins.str:
        """
        The [ConfigSourceType](https://www.terraform.io/definitions/CatalogItem/configSourceType) Eg: STACK_TEMPLATE_CATALOG_SOURCE, PAR_CATALOG_SOURCE, URL_CATALOG_SOURCE, MARKETPLACE_CATALOG_SOURCE.
        """
        return pulumi.get(self, "config_source_type")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        Description about the catalog item.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the catalog.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> builtins.str:
        """
        The details of lifecycle state CatalogItem.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="listingId")
    def listing_id(self) -> builtins.str:
        """
        The catalog listing Id.
        """
        return pulumi.get(self, "listing_id")

    @property
    @pulumi.getter(name="listingVersion")
    def listing_version(self) -> builtins.str:
        """
        The catalog package version.
        """
        return pulumi.get(self, "listing_version")

    @property
    @pulumi.getter(name="packageType")
    def package_type(self) -> builtins.str:
        """
        Config package type Eg: TF_PACKAGE, NON_TF_PACKAGE, CONFIG_FILE.
        """
        return pulumi.get(self, "package_type")

    @property
    @pulumi.getter(name="shortDescription")
    def short_description(self) -> builtins.str:
        """
        Short description about the catalog item.
        """
        return pulumi.get(self, "short_description")

    @property
    @pulumi.getter(name="shouldListPublicItems")
    def should_list_public_items(self) -> builtins.bool:
        """
        The indicator to append Public Items from the root compartment to any query, when set to TRUE.
        """
        return pulumi.get(self, "should_list_public_items")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        A filter to return only resources that match the given lifecycle state. The state value is case-insensitive.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeBackfillLastChecked")
    def time_backfill_last_checked(self) -> builtins.str:
        """
        The date and time the CatalogItem was last checked by backfill job, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339). Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_backfill_last_checked")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The date and time the CatalogItem was created, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339). Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeLastChecked")
    def time_last_checked(self) -> builtins.str:
        """
        The date and time the CatalogItem was last checked, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339). Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_last_checked")

    @property
    @pulumi.getter(name="timeReleased")
    def time_released(self) -> builtins.str:
        """
        The date and time the CatalogItem was released, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339). Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_released")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> builtins.str:
        """
        The date and time the CatalogItem was updated, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339). Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="versionDescription")
    def version_description(self) -> builtins.str:
        """
        Version description about the catalog item.
        """
        return pulumi.get(self, "version_description")


@pulumi.output_type
class GetCatalogItemsCatalogItemCollectionItemCatalogResultPayloadResult(dict):
    def __init__(__self__, *,
                 branch_name: builtins.str,
                 config_result_type: builtins.str,
                 configuration_source_provider_id: builtins.str,
                 package_url: builtins.str,
                 repository_url: builtins.str,
                 template_id: builtins.str,
                 time_expires: builtins.str,
                 working_directory: builtins.str):
        """
        :param builtins.str branch_name: branch Name
        :param builtins.str config_result_type: config result type.
        :param builtins.str configuration_source_provider_id: configuration Source Provider [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)
        :param builtins.str package_url: package url
        :param builtins.str repository_url: repository Url
        :param builtins.str template_id: template id
        :param builtins.str time_expires: The date and time expires, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        """
        pulumi.set(__self__, "branch_name", branch_name)
        pulumi.set(__self__, "config_result_type", config_result_type)
        pulumi.set(__self__, "configuration_source_provider_id", configuration_source_provider_id)
        pulumi.set(__self__, "package_url", package_url)
        pulumi.set(__self__, "repository_url", repository_url)
        pulumi.set(__self__, "template_id", template_id)
        pulumi.set(__self__, "time_expires", time_expires)
        pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter(name="branchName")
    def branch_name(self) -> builtins.str:
        """
        branch Name
        """
        return pulumi.get(self, "branch_name")

    @property
    @pulumi.getter(name="configResultType")
    def config_result_type(self) -> builtins.str:
        """
        config result type.
        """
        return pulumi.get(self, "config_result_type")

    @property
    @pulumi.getter(name="configurationSourceProviderId")
    def configuration_source_provider_id(self) -> builtins.str:
        """
        configuration Source Provider [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)
        """
        return pulumi.get(self, "configuration_source_provider_id")

    @property
    @pulumi.getter(name="packageUrl")
    def package_url(self) -> builtins.str:
        """
        package url
        """
        return pulumi.get(self, "package_url")

    @property
    @pulumi.getter(name="repositoryUrl")
    def repository_url(self) -> builtins.str:
        """
        repository Url
        """
        return pulumi.get(self, "repository_url")

    @property
    @pulumi.getter(name="templateId")
    def template_id(self) -> builtins.str:
        """
        template id
        """
        return pulumi.get(self, "template_id")

    @property
    @pulumi.getter(name="timeExpires")
    def time_expires(self) -> builtins.str:
        """
        The date and time expires, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_expires")

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> builtins.str:
        return pulumi.get(self, "working_directory")


@pulumi.output_type
class GetCatalogItemsCatalogItemCollectionItemCatalogSourcePayloadResult(dict):
    def __init__(__self__, *,
                 access_uri: builtins.str,
                 branch_name: builtins.str,
                 bucket: builtins.str,
                 config_source_type: builtins.str,
                 configuration_source_provider_id: builtins.str,
                 description: builtins.str,
                 listing_id: builtins.str,
                 long_description: builtins.str,
                 namespace: builtins.str,
                 object: builtins.str,
                 repository_url: builtins.str,
                 template_display_name: builtins.str,
                 time_expires: builtins.str,
                 version: builtins.str,
                 working_directory: builtins.str,
                 zip_file_base64encoded: builtins.str):
        """
        :param builtins.str access_uri: access uri
        :param builtins.str branch_name: branch Name
        :param builtins.str bucket: bucket name
        :param builtins.str config_source_type: The [ConfigSourceType](https://www.terraform.io/definitions/CatalogItem/configSourceType) Eg: STACK_TEMPLATE_CATALOG_SOURCE, PAR_CATALOG_SOURCE, URL_CATALOG_SOURCE, MARKETPLACE_CATALOG_SOURCE.
        :param builtins.str configuration_source_provider_id: configuration Source Provider [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)
        :param builtins.str description: Description about the catalog item.
        :param builtins.str listing_id: The catalog listing Id.
        :param builtins.str long_description: Template Long Description
        :param builtins.str namespace: nameSpace
        :param builtins.str object: object name
        :param builtins.str repository_url: repository Url
        :param builtins.str template_display_name: Template Display Name
        :param builtins.str time_expires: The date and time expires, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        :param builtins.str version: This version parameter of Payload.
        :param builtins.str zip_file_base64encoded: The Base64 encoded template. This payload will trigger CreateTemplate API, where the parameter will be passed.
        """
        pulumi.set(__self__, "access_uri", access_uri)
        pulumi.set(__self__, "branch_name", branch_name)
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "config_source_type", config_source_type)
        pulumi.set(__self__, "configuration_source_provider_id", configuration_source_provider_id)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "listing_id", listing_id)
        pulumi.set(__self__, "long_description", long_description)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "repository_url", repository_url)
        pulumi.set(__self__, "template_display_name", template_display_name)
        pulumi.set(__self__, "time_expires", time_expires)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "working_directory", working_directory)
        pulumi.set(__self__, "zip_file_base64encoded", zip_file_base64encoded)

    @property
    @pulumi.getter(name="accessUri")
    def access_uri(self) -> builtins.str:
        """
        access uri
        """
        return pulumi.get(self, "access_uri")

    @property
    @pulumi.getter(name="branchName")
    def branch_name(self) -> builtins.str:
        """
        branch Name
        """
        return pulumi.get(self, "branch_name")

    @property
    @pulumi.getter
    def bucket(self) -> builtins.str:
        """
        bucket name
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="configSourceType")
    def config_source_type(self) -> builtins.str:
        """
        The [ConfigSourceType](https://www.terraform.io/definitions/CatalogItem/configSourceType) Eg: STACK_TEMPLATE_CATALOG_SOURCE, PAR_CATALOG_SOURCE, URL_CATALOG_SOURCE, MARKETPLACE_CATALOG_SOURCE.
        """
        return pulumi.get(self, "config_source_type")

    @property
    @pulumi.getter(name="configurationSourceProviderId")
    def configuration_source_provider_id(self) -> builtins.str:
        """
        configuration Source Provider [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)
        """
        return pulumi.get(self, "configuration_source_provider_id")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        Description about the catalog item.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="listingId")
    def listing_id(self) -> builtins.str:
        """
        The catalog listing Id.
        """
        return pulumi.get(self, "listing_id")

    @property
    @pulumi.getter(name="longDescription")
    def long_description(self) -> builtins.str:
        """
        Template Long Description
        """
        return pulumi.get(self, "long_description")

    @property
    @pulumi.getter
    def namespace(self) -> builtins.str:
        """
        nameSpace
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> builtins.str:
        """
        object name
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter(name="repositoryUrl")
    def repository_url(self) -> builtins.str:
        """
        repository Url
        """
        return pulumi.get(self, "repository_url")

    @property
    @pulumi.getter(name="templateDisplayName")
    def template_display_name(self) -> builtins.str:
        """
        Template Display Name
        """
        return pulumi.get(self, "template_display_name")

    @property
    @pulumi.getter(name="timeExpires")
    def time_expires(self) -> builtins.str:
        """
        The date and time expires, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_expires")

    @property
    @pulumi.getter
    def version(self) -> builtins.str:
        """
        This version parameter of Payload.
        """
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> builtins.str:
        return pulumi.get(self, "working_directory")

    @property
    @pulumi.getter(name="zipFileBase64encoded")
    def zip_file_base64encoded(self) -> builtins.str:
        """
        The Base64 encoded template. This payload will trigger CreateTemplate API, where the parameter will be passed.
        """
        return pulumi.get(self, "zip_file_base64encoded")


@pulumi.output_type
class GetCatalogItemsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetCompliancePoliciesCompliancePolicyCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetCompliancePoliciesCompliancePolicyCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetCompliancePoliciesCompliancePolicyCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetCompliancePoliciesCompliancePolicyCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: builtins.str,
                 defined_tags: Mapping[str, builtins.str],
                 display_name: builtins.str,
                 freeform_tags: Mapping[str, builtins.str],
                 id: builtins.str,
                 lifecycle_details: builtins.str,
                 product_id: builtins.str,
                 state: builtins.str,
                 system_tags: Mapping[str, builtins.str],
                 time_created: builtins.str,
                 time_updated: builtins.str,
                 type: builtins.str):
        """
        :param builtins.str compartment_id: The ID of the compartment in which to list resources. Empty only if the resource OCID query param is not specified.
        :param Mapping[str, builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param builtins.str display_name: A filter to return only resources that match the entire display name given.
        :param Mapping[str, builtins.str] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param builtins.str id: Unique identifier or OCID for listing a single Compliance Policy by id. Either compartmentId or id must be provided.
        :param builtins.str lifecycle_details: A message that describes the current state of the CompliancePolicy in more detail. For example, can be used to provide actionable information for a resource in the Failed state.
        :param builtins.str product_id: platformConfiguration OCID corresponding to the Product.
        :param builtins.str state: A filter to return only resources that match the given lifecycle state. The state value is case-insensitive.
        :param Mapping[str, builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param builtins.str time_created: The date and time the CompliancePolicy was created, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        :param builtins.str time_updated: The date and time the CompliancePolicy was updated, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        :param builtins.str type: A filter to return Platform Configurations whose type matches the given type.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "product_id", product_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        The ID of the compartment in which to list resources. Empty only if the resource OCID query param is not specified.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Unique identifier or OCID for listing a single Compliance Policy by id. Either compartmentId or id must be provided.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> builtins.str:
        """
        A message that describes the current state of the CompliancePolicy in more detail. For example, can be used to provide actionable information for a resource in the Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="productId")
    def product_id(self) -> builtins.str:
        """
        platformConfiguration OCID corresponding to the Product.
        """
        return pulumi.get(self, "product_id")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        A filter to return only resources that match the given lifecycle state. The state value is case-insensitive.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The date and time the CompliancePolicy was created, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> builtins.str:
        """
        The date and time the CompliancePolicy was updated, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        A filter to return Platform Configurations whose type matches the given type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetCompliancePoliciesFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetCompliancePolicyRulePatchSelectionResult(dict):
    def __init__(__self__, *,
                 days_since_release: builtins.int,
                 patch_level: builtins.str,
                 patch_name: builtins.str,
                 selection_type: builtins.str):
        """
        :param builtins.int days_since_release: Days passed since patch release.
        :param builtins.str patch_level: Patch Name.
        :param builtins.str patch_name: Patch Name.
        :param builtins.str selection_type: Selection type for the Patch.
        """
        pulumi.set(__self__, "days_since_release", days_since_release)
        pulumi.set(__self__, "patch_level", patch_level)
        pulumi.set(__self__, "patch_name", patch_name)
        pulumi.set(__self__, "selection_type", selection_type)

    @property
    @pulumi.getter(name="daysSinceRelease")
    def days_since_release(self) -> builtins.int:
        """
        Days passed since patch release.
        """
        return pulumi.get(self, "days_since_release")

    @property
    @pulumi.getter(name="patchLevel")
    def patch_level(self) -> builtins.str:
        """
        Patch Name.
        """
        return pulumi.get(self, "patch_level")

    @property
    @pulumi.getter(name="patchName")
    def patch_name(self) -> builtins.str:
        """
        Patch Name.
        """
        return pulumi.get(self, "patch_name")

    @property
    @pulumi.getter(name="selectionType")
    def selection_type(self) -> builtins.str:
        """
        Selection type for the Patch.
        """
        return pulumi.get(self, "selection_type")


@pulumi.output_type
class GetCompliancePolicyRuleProductVersionResult(dict):
    def __init__(__self__, *,
                 is_applicable_for_all_higher_versions: builtins.bool,
                 version: builtins.str):
        """
        :param builtins.bool is_applicable_for_all_higher_versions: Is rule applicable to all higher versions also
        :param builtins.str version: Product version the rule is applicable.
        """
        pulumi.set(__self__, "is_applicable_for_all_higher_versions", is_applicable_for_all_higher_versions)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="isApplicableForAllHigherVersions")
    def is_applicable_for_all_higher_versions(self) -> builtins.bool:
        """
        Is rule applicable to all higher versions also
        """
        return pulumi.get(self, "is_applicable_for_all_higher_versions")

    @property
    @pulumi.getter
    def version(self) -> builtins.str:
        """
        Product version the rule is applicable.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetCompliancePolicyRulesCompliancePolicyRuleCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetCompliancePolicyRulesCompliancePolicyRuleCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetCompliancePolicyRulesCompliancePolicyRuleCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetCompliancePolicyRulesCompliancePolicyRuleCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: builtins.str,
                 compliance_policy_id: builtins.str,
                 defined_tags: Mapping[str, builtins.str],
                 display_name: builtins.str,
                 freeform_tags: Mapping[str, builtins.str],
                 grace_period: builtins.str,
                 id: builtins.str,
                 lifecycle_details: builtins.str,
                 patch_selections: Sequence['outputs.GetCompliancePolicyRulesCompliancePolicyRuleCollectionItemPatchSelectionResult'],
                 patch_type_ids: Sequence[builtins.str],
                 product_versions: Sequence['outputs.GetCompliancePolicyRulesCompliancePolicyRuleCollectionItemProductVersionResult'],
                 severities: Sequence[builtins.str],
                 state: builtins.str,
                 system_tags: Mapping[str, builtins.str],
                 time_created: builtins.str,
                 time_updated: builtins.str):
        """
        :param builtins.str compartment_id: The ID of the compartment in which to list resources. Empty only if the resource OCID query param is not specified.
        :param builtins.str compliance_policy_id: unique CompliancePolicy identifier.
        :param Mapping[str, builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param builtins.str display_name: A filter to return only resources that match the entire display name given.
        :param Mapping[str, builtins.str] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param builtins.str grace_period: Grace period in days,weeks,months or years the exemption is applicable for the rule. This enables a grace period when Fleet Application Management doesn't report the product as noncompliant when patch is not applied.
        :param builtins.str id: Unique identifier or OCID for listing a single Compliance Policy Rule by id. Either compartmentId or id must be provided.
        :param builtins.str lifecycle_details: A message that describes the current state of the CompliancePolicyRule in more detail. For example, can be used to provide actionable information for a resource in the Failed state.
        :param Sequence['GetCompliancePolicyRulesCompliancePolicyRuleCollectionItemPatchSelectionArgs'] patch_selections: Patch Selection Details
        :param Sequence[builtins.str] patch_type_ids: PlatformConfiguration OCID for the patch type to which this CompliancePolicyRule applies.
        :param Sequence['GetCompliancePolicyRulesCompliancePolicyRuleCollectionItemProductVersionArgs'] product_versions: A specific product version or a specific version and succeeding. Example: 12.1 or 12.1 and above for Oracle WebLogic Application server. The policy applies to the next version only, and not to other versions such as, 12.1.x.
        :param Sequence[builtins.str] severities: Severity to which this CompliancePolicyRule applies.
        :param builtins.str state: A filter to return only resources that match the given lifecycle state. The state value is case-insensitive.
        :param Mapping[str, builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param builtins.str time_created: The date and time the CompliancePolicyRule was created, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        :param builtins.str time_updated: The date and time the CompliancePolicyRule was updated, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "compliance_policy_id", compliance_policy_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "grace_period", grace_period)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "patch_selections", patch_selections)
        pulumi.set(__self__, "patch_type_ids", patch_type_ids)
        pulumi.set(__self__, "product_versions", product_versions)
        pulumi.set(__self__, "severities", severities)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        The ID of the compartment in which to list resources. Empty only if the resource OCID query param is not specified.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="compliancePolicyId")
    def compliance_policy_id(self) -> builtins.str:
        """
        unique CompliancePolicy identifier.
        """
        return pulumi.get(self, "compliance_policy_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="gracePeriod")
    def grace_period(self) -> builtins.str:
        """
        Grace period in days,weeks,months or years the exemption is applicable for the rule. This enables a grace period when Fleet Application Management doesn't report the product as noncompliant when patch is not applied.
        """
        return pulumi.get(self, "grace_period")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Unique identifier or OCID for listing a single Compliance Policy Rule by id. Either compartmentId or id must be provided.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> builtins.str:
        """
        A message that describes the current state of the CompliancePolicyRule in more detail. For example, can be used to provide actionable information for a resource in the Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="patchSelections")
    def patch_selections(self) -> Sequence['outputs.GetCompliancePolicyRulesCompliancePolicyRuleCollectionItemPatchSelectionResult']:
        """
        Patch Selection Details
        """
        return pulumi.get(self, "patch_selections")

    @property
    @pulumi.getter(name="patchTypeIds")
    def patch_type_ids(self) -> Sequence[builtins.str]:
        """
        PlatformConfiguration OCID for the patch type to which this CompliancePolicyRule applies.
        """
        return pulumi.get(self, "patch_type_ids")

    @property
    @pulumi.getter(name="productVersions")
    def product_versions(self) -> Sequence['outputs.GetCompliancePolicyRulesCompliancePolicyRuleCollectionItemProductVersionResult']:
        """
        A specific product version or a specific version and succeeding. Example: 12.1 or 12.1 and above for Oracle WebLogic Application server. The policy applies to the next version only, and not to other versions such as, 12.1.x.
        """
        return pulumi.get(self, "product_versions")

    @property
    @pulumi.getter
    def severities(self) -> Sequence[builtins.str]:
        """
        Severity to which this CompliancePolicyRule applies.
        """
        return pulumi.get(self, "severities")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        A filter to return only resources that match the given lifecycle state. The state value is case-insensitive.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The date and time the CompliancePolicyRule was created, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> builtins.str:
        """
        The date and time the CompliancePolicyRule was updated, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetCompliancePolicyRulesCompliancePolicyRuleCollectionItemPatchSelectionResult(dict):
    def __init__(__self__, *,
                 days_since_release: builtins.int,
                 patch_level: builtins.str,
                 patch_name: builtins.str,
                 selection_type: builtins.str):
        """
        :param builtins.int days_since_release: Days passed since patch release.
        :param builtins.str patch_level: Patch Name.
        :param builtins.str patch_name: A filter to return only resources that match the patch selection against the given patch name.
        :param builtins.str selection_type: Selection type for the Patch.
        """
        pulumi.set(__self__, "days_since_release", days_since_release)
        pulumi.set(__self__, "patch_level", patch_level)
        pulumi.set(__self__, "patch_name", patch_name)
        pulumi.set(__self__, "selection_type", selection_type)

    @property
    @pulumi.getter(name="daysSinceRelease")
    def days_since_release(self) -> builtins.int:
        """
        Days passed since patch release.
        """
        return pulumi.get(self, "days_since_release")

    @property
    @pulumi.getter(name="patchLevel")
    def patch_level(self) -> builtins.str:
        """
        Patch Name.
        """
        return pulumi.get(self, "patch_level")

    @property
    @pulumi.getter(name="patchName")
    def patch_name(self) -> builtins.str:
        """
        A filter to return only resources that match the patch selection against the given patch name.
        """
        return pulumi.get(self, "patch_name")

    @property
    @pulumi.getter(name="selectionType")
    def selection_type(self) -> builtins.str:
        """
        Selection type for the Patch.
        """
        return pulumi.get(self, "selection_type")


@pulumi.output_type
class GetCompliancePolicyRulesCompliancePolicyRuleCollectionItemProductVersionResult(dict):
    def __init__(__self__, *,
                 is_applicable_for_all_higher_versions: builtins.bool,
                 version: builtins.str):
        """
        :param builtins.bool is_applicable_for_all_higher_versions: Is rule applicable to all higher versions also
        :param builtins.str version: Product version the rule is applicable.
        """
        pulumi.set(__self__, "is_applicable_for_all_higher_versions", is_applicable_for_all_higher_versions)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="isApplicableForAllHigherVersions")
    def is_applicable_for_all_higher_versions(self) -> builtins.bool:
        """
        Is rule applicable to all higher versions also
        """
        return pulumi.get(self, "is_applicable_for_all_higher_versions")

    @property
    @pulumi.getter
    def version(self) -> builtins.str:
        """
        Product version the rule is applicable.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetCompliancePolicyRulesFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetComplianceRecordCountsComplianceRecordAggregationCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetComplianceRecordCountsComplianceRecordAggregationCollectionItemResult']):
        """
        :param Sequence['GetComplianceRecordCountsComplianceRecordAggregationCollectionItemArgs'] items: List of ComplianceRecordAggregation objects.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetComplianceRecordCountsComplianceRecordAggregationCollectionItemResult']:
        """
        List of ComplianceRecordAggregation objects.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetComplianceRecordCountsComplianceRecordAggregationCollectionItemResult(dict):
    def __init__(__self__, *,
                 compliance_record_count_count: builtins.int,
                 dimensions: Sequence['outputs.GetComplianceRecordCountsComplianceRecordAggregationCollectionItemDimensionResult']):
        """
        :param builtins.int compliance_record_count_count: Count of compliance records in a compartment.
        :param Sequence['GetComplianceRecordCountsComplianceRecordAggregationCollectionItemDimensionArgs'] dimensions: Aggregated summary information for ComplianceRecord
        """
        pulumi.set(__self__, "compliance_record_count_count", compliance_record_count_count)
        pulumi.set(__self__, "dimensions", dimensions)

    @property
    @pulumi.getter(name="complianceRecordCountCount")
    def compliance_record_count_count(self) -> builtins.int:
        """
        Count of compliance records in a compartment.
        """
        return pulumi.get(self, "compliance_record_count_count")

    @property
    @pulumi.getter
    def dimensions(self) -> Sequence['outputs.GetComplianceRecordCountsComplianceRecordAggregationCollectionItemDimensionResult']:
        """
        Aggregated summary information for ComplianceRecord
        """
        return pulumi.get(self, "dimensions")


@pulumi.output_type
class GetComplianceRecordCountsComplianceRecordAggregationCollectionItemDimensionResult(dict):
    def __init__(__self__, *,
                 compliance_level: builtins.str,
                 compliance_state: builtins.str):
        """
        :param builtins.str compliance_level: Level at which the compliance is calculated.
        :param builtins.str compliance_state: Last known compliance state.
        """
        pulumi.set(__self__, "compliance_level", compliance_level)
        pulumi.set(__self__, "compliance_state", compliance_state)

    @property
    @pulumi.getter(name="complianceLevel")
    def compliance_level(self) -> builtins.str:
        """
        Level at which the compliance is calculated.
        """
        return pulumi.get(self, "compliance_level")

    @property
    @pulumi.getter(name="complianceState")
    def compliance_state(self) -> builtins.str:
        """
        Last known compliance state.
        """
        return pulumi.get(self, "compliance_state")


@pulumi.output_type
class GetComplianceRecordCountsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetComplianceRecordsComplianceRecordCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetComplianceRecordsComplianceRecordCollectionItemResult']):
        """
        :param Sequence['GetComplianceRecordsComplianceRecordCollectionItemArgs'] items: List of compliancePolicys.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetComplianceRecordsComplianceRecordCollectionItemResult']:
        """
        List of compliancePolicys.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetComplianceRecordsComplianceRecordCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: builtins.str,
                 compliance_state: builtins.str,
                 defined_tags: Mapping[str, builtins.str],
                 entity_display_name: builtins.str,
                 entity_id: builtins.str,
                 freeform_tags: Mapping[str, builtins.str],
                 id: builtins.str,
                 patches: Sequence['outputs.GetComplianceRecordsComplianceRecordCollectionItemPatchResult'],
                 policies: Sequence['outputs.GetComplianceRecordsComplianceRecordCollectionItemPolicyResult'],
                 resources: Sequence['outputs.GetComplianceRecordsComplianceRecordCollectionItemResourceResult'],
                 state: builtins.str,
                 system_tags: Mapping[str, builtins.str],
                 targets: Sequence['outputs.GetComplianceRecordsComplianceRecordCollectionItemTargetResult'],
                 time_created: builtins.str,
                 time_updated: builtins.str):
        """
        :param builtins.str compartment_id: The ID of the compartment in which to list resources.
        :param builtins.str compliance_state: Target Compliance State.
        :param Mapping[str, builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param builtins.str entity_display_name: The displayName of the entity for which the compliance is calculated.Ex.DisplayName for the Fleet
        :param builtins.str entity_id: Entity identifier.Ex:FleetId
        :param Mapping[str, builtins.str] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param builtins.str id: The OCID of the ComplianceRecord.
        :param Sequence['GetComplianceRecordsComplianceRecordCollectionItemPatchArgs'] patches: Details of the Patch.
        :param Sequence['GetComplianceRecordsComplianceRecordCollectionItemPolicyArgs'] policies: Details of the Policy associated
        :param Sequence['GetComplianceRecordsComplianceRecordCollectionItemResourceArgs'] resources: Details of the Resource
        :param builtins.str state: The current state of the ComplianceRecord.
        :param Mapping[str, builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param Sequence['GetComplianceRecordsComplianceRecordCollectionItemTargetArgs'] targets: Details of the Target.
        :param builtins.str time_created: The date and time the ComplianceRecord was created, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        :param builtins.str time_updated: The date and time the ComplianceRecord was updated, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "compliance_state", compliance_state)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "entity_display_name", entity_display_name)
        pulumi.set(__self__, "entity_id", entity_id)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "patches", patches)
        pulumi.set(__self__, "policies", policies)
        pulumi.set(__self__, "resources", resources)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "targets", targets)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        The ID of the compartment in which to list resources.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="complianceState")
    def compliance_state(self) -> builtins.str:
        """
        Target Compliance State.
        """
        return pulumi.get(self, "compliance_state")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="entityDisplayName")
    def entity_display_name(self) -> builtins.str:
        """
        The displayName of the entity for which the compliance is calculated.Ex.DisplayName for the Fleet
        """
        return pulumi.get(self, "entity_display_name")

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> builtins.str:
        """
        Entity identifier.Ex:FleetId
        """
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The OCID of the ComplianceRecord.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def patches(self) -> Sequence['outputs.GetComplianceRecordsComplianceRecordCollectionItemPatchResult']:
        """
        Details of the Patch.
        """
        return pulumi.get(self, "patches")

    @property
    @pulumi.getter
    def policies(self) -> Sequence['outputs.GetComplianceRecordsComplianceRecordCollectionItemPolicyResult']:
        """
        Details of the Policy associated
        """
        return pulumi.get(self, "policies")

    @property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetComplianceRecordsComplianceRecordCollectionItemResourceResult']:
        """
        Details of the Resource
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        The current state of the ComplianceRecord.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter
    def targets(self) -> Sequence['outputs.GetComplianceRecordsComplianceRecordCollectionItemTargetResult']:
        """
        Details of the Target.
        """
        return pulumi.get(self, "targets")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The date and time the ComplianceRecord was created, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> builtins.str:
        """
        The date and time the ComplianceRecord was updated, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetComplianceRecordsComplianceRecordCollectionItemPatchResult(dict):
    def __init__(__self__, *,
                 patch_description: builtins.str,
                 patch_id: builtins.str,
                 patch_name: builtins.str,
                 patch_type: builtins.str,
                 products: Sequence['outputs.GetComplianceRecordsComplianceRecordCollectionItemPatchProductResult'],
                 severity: builtins.str,
                 time_released: builtins.str):
        """
        :param builtins.str patch_description: Patch Description.
        :param builtins.str patch_id: patch OCID.
        :param builtins.str patch_name: Patch Name.
        :param builtins.str patch_type: Type of patch.
        :param Sequence['GetComplianceRecordsComplianceRecordCollectionItemPatchProductArgs'] products: Details of the Product.
        :param builtins.str severity: Patch Severity.
        :param builtins.str time_released: Date on which patch was released
        """
        pulumi.set(__self__, "patch_description", patch_description)
        pulumi.set(__self__, "patch_id", patch_id)
        pulumi.set(__self__, "patch_name", patch_name)
        pulumi.set(__self__, "patch_type", patch_type)
        pulumi.set(__self__, "products", products)
        pulumi.set(__self__, "severity", severity)
        pulumi.set(__self__, "time_released", time_released)

    @property
    @pulumi.getter(name="patchDescription")
    def patch_description(self) -> builtins.str:
        """
        Patch Description.
        """
        return pulumi.get(self, "patch_description")

    @property
    @pulumi.getter(name="patchId")
    def patch_id(self) -> builtins.str:
        """
        patch OCID.
        """
        return pulumi.get(self, "patch_id")

    @property
    @pulumi.getter(name="patchName")
    def patch_name(self) -> builtins.str:
        """
        Patch Name.
        """
        return pulumi.get(self, "patch_name")

    @property
    @pulumi.getter(name="patchType")
    def patch_type(self) -> builtins.str:
        """
        Type of patch.
        """
        return pulumi.get(self, "patch_type")

    @property
    @pulumi.getter
    def products(self) -> Sequence['outputs.GetComplianceRecordsComplianceRecordCollectionItemPatchProductResult']:
        """
        Details of the Product.
        """
        return pulumi.get(self, "products")

    @property
    @pulumi.getter
    def severity(self) -> builtins.str:
        """
        Patch Severity.
        """
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter(name="timeReleased")
    def time_released(self) -> builtins.str:
        """
        Date on which patch was released
        """
        return pulumi.get(self, "time_released")


@pulumi.output_type
class GetComplianceRecordsComplianceRecordCollectionItemPatchProductResult(dict):
    def __init__(__self__, *,
                 product_name: builtins.str,
                 product_stack: builtins.str,
                 product_version: builtins.str):
        """
        :param builtins.str product_name: Product Name.
        :param builtins.str product_stack: ProductStack name.
        :param builtins.str product_version: Product Version.
        """
        pulumi.set(__self__, "product_name", product_name)
        pulumi.set(__self__, "product_stack", product_stack)
        pulumi.set(__self__, "product_version", product_version)

    @property
    @pulumi.getter(name="productName")
    def product_name(self) -> builtins.str:
        """
        Product Name.
        """
        return pulumi.get(self, "product_name")

    @property
    @pulumi.getter(name="productStack")
    def product_stack(self) -> builtins.str:
        """
        ProductStack name.
        """
        return pulumi.get(self, "product_stack")

    @property
    @pulumi.getter(name="productVersion")
    def product_version(self) -> builtins.str:
        """
        Product Version.
        """
        return pulumi.get(self, "product_version")


@pulumi.output_type
class GetComplianceRecordsComplianceRecordCollectionItemPolicyResult(dict):
    def __init__(__self__, *,
                 compliance_policy_display_name: builtins.str,
                 compliance_policy_id: builtins.str,
                 compliance_policy_rule_display_name: builtins.str,
                 compliance_policy_rule_id: builtins.str,
                 grace_period: builtins.str,
                 patch_selections: Sequence['outputs.GetComplianceRecordsComplianceRecordCollectionItemPolicyPatchSelectionResult']):
        """
        :param builtins.str compliance_policy_display_name: Compliane Policy DisplayName
        :param builtins.str compliance_policy_id: Compliance Policy Id
        :param builtins.str compliance_policy_rule_display_name: Product Name
        :param builtins.str compliance_policy_rule_id: Compliane Policy Rule Id
        :param builtins.str grace_period: Grace period in days,weeks,months or years the exemption is applicable for the rule.
        :param Sequence['GetComplianceRecordsComplianceRecordCollectionItemPolicyPatchSelectionArgs'] patch_selections: Patch Selection Details
        """
        pulumi.set(__self__, "compliance_policy_display_name", compliance_policy_display_name)
        pulumi.set(__self__, "compliance_policy_id", compliance_policy_id)
        pulumi.set(__self__, "compliance_policy_rule_display_name", compliance_policy_rule_display_name)
        pulumi.set(__self__, "compliance_policy_rule_id", compliance_policy_rule_id)
        pulumi.set(__self__, "grace_period", grace_period)
        pulumi.set(__self__, "patch_selections", patch_selections)

    @property
    @pulumi.getter(name="compliancePolicyDisplayName")
    def compliance_policy_display_name(self) -> builtins.str:
        """
        Compliane Policy DisplayName
        """
        return pulumi.get(self, "compliance_policy_display_name")

    @property
    @pulumi.getter(name="compliancePolicyId")
    def compliance_policy_id(self) -> builtins.str:
        """
        Compliance Policy Id
        """
        return pulumi.get(self, "compliance_policy_id")

    @property
    @pulumi.getter(name="compliancePolicyRuleDisplayName")
    def compliance_policy_rule_display_name(self) -> builtins.str:
        """
        Product Name
        """
        return pulumi.get(self, "compliance_policy_rule_display_name")

    @property
    @pulumi.getter(name="compliancePolicyRuleId")
    def compliance_policy_rule_id(self) -> builtins.str:
        """
        Compliane Policy Rule Id
        """
        return pulumi.get(self, "compliance_policy_rule_id")

    @property
    @pulumi.getter(name="gracePeriod")
    def grace_period(self) -> builtins.str:
        """
        Grace period in days,weeks,months or years the exemption is applicable for the rule.
        """
        return pulumi.get(self, "grace_period")

    @property
    @pulumi.getter(name="patchSelections")
    def patch_selections(self) -> Sequence['outputs.GetComplianceRecordsComplianceRecordCollectionItemPolicyPatchSelectionResult']:
        """
        Patch Selection Details
        """
        return pulumi.get(self, "patch_selections")


@pulumi.output_type
class GetComplianceRecordsComplianceRecordCollectionItemPolicyPatchSelectionResult(dict):
    def __init__(__self__, *,
                 days_since_release: builtins.int,
                 patch_level: builtins.str,
                 patch_name: builtins.str,
                 selection_type: builtins.str):
        """
        :param builtins.int days_since_release: Days passed since patch release.
        :param builtins.str patch_level: Patch Name.
        :param builtins.str patch_name: Patch Name.
        :param builtins.str selection_type: Selection type for the Patch.
        """
        pulumi.set(__self__, "days_since_release", days_since_release)
        pulumi.set(__self__, "patch_level", patch_level)
        pulumi.set(__self__, "patch_name", patch_name)
        pulumi.set(__self__, "selection_type", selection_type)

    @property
    @pulumi.getter(name="daysSinceRelease")
    def days_since_release(self) -> builtins.int:
        """
        Days passed since patch release.
        """
        return pulumi.get(self, "days_since_release")

    @property
    @pulumi.getter(name="patchLevel")
    def patch_level(self) -> builtins.str:
        """
        Patch Name.
        """
        return pulumi.get(self, "patch_level")

    @property
    @pulumi.getter(name="patchName")
    def patch_name(self) -> builtins.str:
        """
        Patch Name.
        """
        return pulumi.get(self, "patch_name")

    @property
    @pulumi.getter(name="selectionType")
    def selection_type(self) -> builtins.str:
        """
        Selection type for the Patch.
        """
        return pulumi.get(self, "selection_type")


@pulumi.output_type
class GetComplianceRecordsComplianceRecordCollectionItemResourceResult(dict):
    def __init__(__self__, *,
                 compartment: builtins.str,
                 compartment_id: builtins.str,
                 resource_id: builtins.str,
                 resource_name: builtins.str,
                 resource_region: builtins.str):
        """
        :param builtins.str compartment: Compartment the resource belongs to.
        :param builtins.str compartment_id: The ID of the compartment in which to list resources.
        :param builtins.str resource_id: Resource identifier.
        :param builtins.str resource_name: Name of the resource.
        :param builtins.str resource_region: Region the resource belongs to.
        """
        pulumi.set(__self__, "compartment", compartment)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "resource_region", resource_region)

    @property
    @pulumi.getter
    def compartment(self) -> builtins.str:
        """
        Compartment the resource belongs to.
        """
        return pulumi.get(self, "compartment")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        The ID of the compartment in which to list resources.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> builtins.str:
        """
        Resource identifier.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> builtins.str:
        """
        Name of the resource.
        """
        return pulumi.get(self, "resource_name")

    @property
    @pulumi.getter(name="resourceRegion")
    def resource_region(self) -> builtins.str:
        """
        Region the resource belongs to.
        """
        return pulumi.get(self, "resource_region")


@pulumi.output_type
class GetComplianceRecordsComplianceRecordCollectionItemTargetResult(dict):
    def __init__(__self__, *,
                 target_id: builtins.str,
                 target_name: builtins.str,
                 version: builtins.str):
        """
        :param builtins.str target_id: Target Identifier.
        :param builtins.str target_name: Unique target name
        :param builtins.str version: Current version.
        """
        pulumi.set(__self__, "target_id", target_id)
        pulumi.set(__self__, "target_name", target_name)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> builtins.str:
        """
        Target Identifier.
        """
        return pulumi.get(self, "target_id")

    @property
    @pulumi.getter(name="targetName")
    def target_name(self) -> builtins.str:
        """
        Unique target name
        """
        return pulumi.get(self, "target_name")

    @property
    @pulumi.getter
    def version(self) -> builtins.str:
        """
        Current version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetComplianceRecordsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetFleetComplianceReportResourceResult(dict):
    def __init__(__self__, *,
                 compartment: builtins.str,
                 compliance_state: builtins.str,
                 products: Sequence['outputs.GetFleetComplianceReportResourceProductResult'],
                 resource_id: builtins.str,
                 resource_name: builtins.str,
                 resource_region: builtins.str,
                 resource_type: builtins.str,
                 tenancy_id: builtins.str,
                 tenancy_name: builtins.str):
        """
        :param builtins.str compartment: Compartment the resource belongs to.
        :param builtins.str compliance_state: The last known compliance state of the target.
        :param Sequence['GetFleetComplianceReportResourceProductArgs'] products: Products associated with the Fleet.  Only the products belonging to managed targets will be shown.
        :param builtins.str resource_id: The OCID to identify the resource.
        :param builtins.str resource_name: Display name of the resource.
        :param builtins.str resource_region: The region the resource belongs to.
        :param builtins.str resource_type: Type of the resource.
        :param builtins.str tenancy_id: TenancyId of the resource.
        :param builtins.str tenancy_name: Tenancy the resource belongs to.
        """
        pulumi.set(__self__, "compartment", compartment)
        pulumi.set(__self__, "compliance_state", compliance_state)
        pulumi.set(__self__, "products", products)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "resource_region", resource_region)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "tenancy_id", tenancy_id)
        pulumi.set(__self__, "tenancy_name", tenancy_name)

    @property
    @pulumi.getter
    def compartment(self) -> builtins.str:
        """
        Compartment the resource belongs to.
        """
        return pulumi.get(self, "compartment")

    @property
    @pulumi.getter(name="complianceState")
    def compliance_state(self) -> builtins.str:
        """
        The last known compliance state of the target.
        """
        return pulumi.get(self, "compliance_state")

    @property
    @pulumi.getter
    def products(self) -> Sequence['outputs.GetFleetComplianceReportResourceProductResult']:
        """
        Products associated with the Fleet.  Only the products belonging to managed targets will be shown.
        """
        return pulumi.get(self, "products")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> builtins.str:
        """
        The OCID to identify the resource.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> builtins.str:
        """
        Display name of the resource.
        """
        return pulumi.get(self, "resource_name")

    @property
    @pulumi.getter(name="resourceRegion")
    def resource_region(self) -> builtins.str:
        """
        The region the resource belongs to.
        """
        return pulumi.get(self, "resource_region")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> builtins.str:
        """
        Type of the resource.
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="tenancyId")
    def tenancy_id(self) -> builtins.str:
        """
        TenancyId of the resource.
        """
        return pulumi.get(self, "tenancy_id")

    @property
    @pulumi.getter(name="tenancyName")
    def tenancy_name(self) -> builtins.str:
        """
        Tenancy the resource belongs to.
        """
        return pulumi.get(self, "tenancy_name")


@pulumi.output_type
class GetFleetComplianceReportResourceProductResult(dict):
    def __init__(__self__, *,
                 product_name: builtins.str,
                 targets: Sequence['outputs.GetFleetComplianceReportResourceProductTargetResult']):
        """
        :param builtins.str product_name: Product Name.
        :param Sequence['GetFleetComplianceReportResourceProductTargetArgs'] targets: Managed Targets associated with the Product.
        """
        pulumi.set(__self__, "product_name", product_name)
        pulumi.set(__self__, "targets", targets)

    @property
    @pulumi.getter(name="productName")
    def product_name(self) -> builtins.str:
        """
        Product Name.
        """
        return pulumi.get(self, "product_name")

    @property
    @pulumi.getter
    def targets(self) -> Sequence['outputs.GetFleetComplianceReportResourceProductTargetResult']:
        """
        Managed Targets associated with the Product.
        """
        return pulumi.get(self, "targets")


@pulumi.output_type
class GetFleetComplianceReportResourceProductTargetResult(dict):
    def __init__(__self__, *,
                 compliance_state: builtins.str,
                 installed_patches: Sequence['outputs.GetFleetComplianceReportResourceProductTargetInstalledPatchResult'],
                 recommended_patches: Sequence['outputs.GetFleetComplianceReportResourceProductTargetRecommendedPatchResult'],
                 target_id: builtins.str,
                 target_name: builtins.str,
                 version: builtins.str):
        """
        :param builtins.str compliance_state: The last known compliance state of the target.
        :param Sequence['GetFleetComplianceReportResourceProductTargetInstalledPatchArgs'] installed_patches: Installed Patches for the Target.
        :param Sequence['GetFleetComplianceReportResourceProductTargetRecommendedPatchArgs'] recommended_patches: Recommended Patches for the Target.
        :param builtins.str target_id: Target Identifier.Can be the target name if a separate ID is not available.
        :param builtins.str target_name: Target Name.
        :param builtins.str version: Current version of the target.
        """
        pulumi.set(__self__, "compliance_state", compliance_state)
        pulumi.set(__self__, "installed_patches", installed_patches)
        pulumi.set(__self__, "recommended_patches", recommended_patches)
        pulumi.set(__self__, "target_id", target_id)
        pulumi.set(__self__, "target_name", target_name)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="complianceState")
    def compliance_state(self) -> builtins.str:
        """
        The last known compliance state of the target.
        """
        return pulumi.get(self, "compliance_state")

    @property
    @pulumi.getter(name="installedPatches")
    def installed_patches(self) -> Sequence['outputs.GetFleetComplianceReportResourceProductTargetInstalledPatchResult']:
        """
        Installed Patches for the Target.
        """
        return pulumi.get(self, "installed_patches")

    @property
    @pulumi.getter(name="recommendedPatches")
    def recommended_patches(self) -> Sequence['outputs.GetFleetComplianceReportResourceProductTargetRecommendedPatchResult']:
        """
        Recommended Patches for the Target.
        """
        return pulumi.get(self, "recommended_patches")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> builtins.str:
        """
        Target Identifier.Can be the target name if a separate ID is not available.
        """
        return pulumi.get(self, "target_id")

    @property
    @pulumi.getter(name="targetName")
    def target_name(self) -> builtins.str:
        """
        Target Name.
        """
        return pulumi.get(self, "target_name")

    @property
    @pulumi.getter
    def version(self) -> builtins.str:
        """
        Current version of the target.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetFleetComplianceReportResourceProductTargetInstalledPatchResult(dict):
    def __init__(__self__, *,
                 patch_description: builtins.str,
                 patch_name: builtins.str,
                 patch_type: builtins.str,
                 time_applied: builtins.str,
                 time_released: builtins.str):
        """
        :param builtins.str patch_description: Patch description.
        :param builtins.str patch_name: Patch name.
        :param builtins.str patch_type: Type of patch.
        :param builtins.str time_applied: Time the patch was applied.
        :param builtins.str time_released: The date on which patch was released.
        """
        pulumi.set(__self__, "patch_description", patch_description)
        pulumi.set(__self__, "patch_name", patch_name)
        pulumi.set(__self__, "patch_type", patch_type)
        pulumi.set(__self__, "time_applied", time_applied)
        pulumi.set(__self__, "time_released", time_released)

    @property
    @pulumi.getter(name="patchDescription")
    def patch_description(self) -> builtins.str:
        """
        Patch description.
        """
        return pulumi.get(self, "patch_description")

    @property
    @pulumi.getter(name="patchName")
    def patch_name(self) -> builtins.str:
        """
        Patch name.
        """
        return pulumi.get(self, "patch_name")

    @property
    @pulumi.getter(name="patchType")
    def patch_type(self) -> builtins.str:
        """
        Type of patch.
        """
        return pulumi.get(self, "patch_type")

    @property
    @pulumi.getter(name="timeApplied")
    def time_applied(self) -> builtins.str:
        """
        Time the patch was applied.
        """
        return pulumi.get(self, "time_applied")

    @property
    @pulumi.getter(name="timeReleased")
    def time_released(self) -> builtins.str:
        """
        The date on which patch was released.
        """
        return pulumi.get(self, "time_released")


@pulumi.output_type
class GetFleetComplianceReportResourceProductTargetRecommendedPatchResult(dict):
    def __init__(__self__, *,
                 patch_description: builtins.str,
                 patch_name: builtins.str,
                 patch_type: builtins.str,
                 time_applied: builtins.str,
                 time_released: builtins.str):
        """
        :param builtins.str patch_description: Patch description.
        :param builtins.str patch_name: Patch name.
        :param builtins.str patch_type: Type of patch.
        :param builtins.str time_applied: Time the patch was applied.
        :param builtins.str time_released: The date on which patch was released.
        """
        pulumi.set(__self__, "patch_description", patch_description)
        pulumi.set(__self__, "patch_name", patch_name)
        pulumi.set(__self__, "patch_type", patch_type)
        pulumi.set(__self__, "time_applied", time_applied)
        pulumi.set(__self__, "time_released", time_released)

    @property
    @pulumi.getter(name="patchDescription")
    def patch_description(self) -> builtins.str:
        """
        Patch description.
        """
        return pulumi.get(self, "patch_description")

    @property
    @pulumi.getter(name="patchName")
    def patch_name(self) -> builtins.str:
        """
        Patch name.
        """
        return pulumi.get(self, "patch_name")

    @property
    @pulumi.getter(name="patchType")
    def patch_type(self) -> builtins.str:
        """
        Type of patch.
        """
        return pulumi.get(self, "patch_type")

    @property
    @pulumi.getter(name="timeApplied")
    def time_applied(self) -> builtins.str:
        """
        Time the patch was applied.
        """
        return pulumi.get(self, "time_applied")

    @property
    @pulumi.getter(name="timeReleased")
    def time_released(self) -> builtins.str:
        """
        The date on which patch was released.
        """
        return pulumi.get(self, "time_released")


@pulumi.output_type
class GetFleetCredentialResult(dict):
    def __init__(__self__, *,
                 compartment_id: builtins.str,
                 display_name: builtins.str,
                 entity_specifics: Sequence['outputs.GetFleetCredentialEntitySpecificResult'],
                 passwords: Sequence['outputs.GetFleetCredentialPasswordResult'],
                 users: Sequence['outputs.GetFleetCredentialUserResult']):
        """
        :param builtins.str compartment_id: Compartment Identifier[OCID].
        :param builtins.str display_name: A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        :param Sequence['GetFleetCredentialEntitySpecificArgs'] entity_specifics: Credential specific Details.
        :param Sequence['GetFleetCredentialPasswordArgs'] passwords: Credential Details.
        :param Sequence['GetFleetCredentialUserArgs'] users: Credential Details.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "entity_specifics", entity_specifics)
        pulumi.set(__self__, "passwords", passwords)
        pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        Compartment Identifier[OCID].
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="entitySpecifics")
    def entity_specifics(self) -> Sequence['outputs.GetFleetCredentialEntitySpecificResult']:
        """
        Credential specific Details.
        """
        return pulumi.get(self, "entity_specifics")

    @property
    @pulumi.getter
    def passwords(self) -> Sequence['outputs.GetFleetCredentialPasswordResult']:
        """
        Credential Details.
        """
        return pulumi.get(self, "passwords")

    @property
    @pulumi.getter
    def users(self) -> Sequence['outputs.GetFleetCredentialUserResult']:
        """
        Credential Details.
        """
        return pulumi.get(self, "users")


@pulumi.output_type
class GetFleetCredentialEntitySpecificResult(dict):
    def __init__(__self__, *,
                 credential_level: builtins.str,
                 resource_id: builtins.str,
                 target: builtins.str,
                 variables: Sequence['outputs.GetFleetCredentialEntitySpecificVariableResult']):
        """
        :param builtins.str credential_level: At what level the credential is provided?
        :param builtins.str resource_id: OCID of the resource associated with the target for which the credential is created.
        :param builtins.str target: Target name for which the credential is provided.
        :param Sequence['GetFleetCredentialEntitySpecificVariableArgs'] variables: List of fleet credential variables.
        """
        pulumi.set(__self__, "credential_level", credential_level)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "target", target)
        pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter(name="credentialLevel")
    def credential_level(self) -> builtins.str:
        """
        At what level the credential is provided?
        """
        return pulumi.get(self, "credential_level")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> builtins.str:
        """
        OCID of the resource associated with the target for which the credential is created.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter
    def target(self) -> builtins.str:
        """
        Target name for which the credential is provided.
        """
        return pulumi.get(self, "target")

    @property
    @pulumi.getter
    def variables(self) -> Sequence['outputs.GetFleetCredentialEntitySpecificVariableResult']:
        """
        List of fleet credential variables.
        """
        return pulumi.get(self, "variables")


@pulumi.output_type
class GetFleetCredentialEntitySpecificVariableResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str name: Name of the variable.
        :param builtins.str value: The value corresponding to the credential.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the variable.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        The value corresponding to the credential.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetFleetCredentialPasswordResult(dict):
    def __init__(__self__, *,
                 credential_type: builtins.str,
                 key_id: builtins.str,
                 key_version: builtins.str,
                 secret_id: builtins.str,
                 secret_version: builtins.str,
                 value: builtins.str,
                 vault_id: builtins.str):
        """
        :param builtins.str credential_type: Credential Type.
        :param builtins.str key_id: OCID for the Vault Key that will be used to encrypt/decrypt the value given.
        :param builtins.str key_version: The Vault Key version.
        :param builtins.str secret_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the secret.
        :param builtins.str secret_version: The secret version.
        :param builtins.str value: The value corresponding to the credential.
        :param builtins.str vault_id: OCID for the Vault that will be used to fetch the key to encrypt/decrypt the value given.
        """
        pulumi.set(__self__, "credential_type", credential_type)
        pulumi.set(__self__, "key_id", key_id)
        pulumi.set(__self__, "key_version", key_version)
        pulumi.set(__self__, "secret_id", secret_id)
        pulumi.set(__self__, "secret_version", secret_version)
        pulumi.set(__self__, "value", value)
        pulumi.set(__self__, "vault_id", vault_id)

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> builtins.str:
        """
        Credential Type.
        """
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> builtins.str:
        """
        OCID for the Vault Key that will be used to encrypt/decrypt the value given.
        """
        return pulumi.get(self, "key_id")

    @property
    @pulumi.getter(name="keyVersion")
    def key_version(self) -> builtins.str:
        """
        The Vault Key version.
        """
        return pulumi.get(self, "key_version")

    @property
    @pulumi.getter(name="secretId")
    def secret_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the secret.
        """
        return pulumi.get(self, "secret_id")

    @property
    @pulumi.getter(name="secretVersion")
    def secret_version(self) -> builtins.str:
        """
        The secret version.
        """
        return pulumi.get(self, "secret_version")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        The value corresponding to the credential.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> builtins.str:
        """
        OCID for the Vault that will be used to fetch the key to encrypt/decrypt the value given.
        """
        return pulumi.get(self, "vault_id")


@pulumi.output_type
class GetFleetCredentialUserResult(dict):
    def __init__(__self__, *,
                 credential_type: builtins.str,
                 key_id: builtins.str,
                 key_version: builtins.str,
                 secret_id: builtins.str,
                 secret_version: builtins.str,
                 value: builtins.str,
                 vault_id: builtins.str):
        """
        :param builtins.str credential_type: Credential Type.
        :param builtins.str key_id: OCID for the Vault Key that will be used to encrypt/decrypt the value given.
        :param builtins.str key_version: The Vault Key version.
        :param builtins.str secret_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the secret.
        :param builtins.str secret_version: The secret version.
        :param builtins.str value: The value corresponding to the credential.
        :param builtins.str vault_id: OCID for the Vault that will be used to fetch the key to encrypt/decrypt the value given.
        """
        pulumi.set(__self__, "credential_type", credential_type)
        pulumi.set(__self__, "key_id", key_id)
        pulumi.set(__self__, "key_version", key_version)
        pulumi.set(__self__, "secret_id", secret_id)
        pulumi.set(__self__, "secret_version", secret_version)
        pulumi.set(__self__, "value", value)
        pulumi.set(__self__, "vault_id", vault_id)

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> builtins.str:
        """
        Credential Type.
        """
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> builtins.str:
        """
        OCID for the Vault Key that will be used to encrypt/decrypt the value given.
        """
        return pulumi.get(self, "key_id")

    @property
    @pulumi.getter(name="keyVersion")
    def key_version(self) -> builtins.str:
        """
        The Vault Key version.
        """
        return pulumi.get(self, "key_version")

    @property
    @pulumi.getter(name="secretId")
    def secret_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the secret.
        """
        return pulumi.get(self, "secret_id")

    @property
    @pulumi.getter(name="secretVersion")
    def secret_version(self) -> builtins.str:
        """
        The secret version.
        """
        return pulumi.get(self, "secret_version")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        The value corresponding to the credential.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> builtins.str:
        """
        OCID for the Vault that will be used to fetch the key to encrypt/decrypt the value given.
        """
        return pulumi.get(self, "vault_id")


@pulumi.output_type
class GetFleetCredentialsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        """
        :param builtins.str name: Name of the variable.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the variable.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetFleetCredentialsFleetCredentialCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetFleetCredentialsFleetCredentialCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetFleetCredentialsFleetCredentialCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetFleetCredentialsFleetCredentialCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: builtins.str,
                 display_name: builtins.str,
                 entity_specifics: Sequence['outputs.GetFleetCredentialsFleetCredentialCollectionItemEntitySpecificResult'],
                 fleet_id: builtins.str,
                 id: builtins.str,
                 lifecycle_details: builtins.str,
                 passwords: Sequence['outputs.GetFleetCredentialsFleetCredentialCollectionItemPasswordResult'],
                 state: builtins.str,
                 system_tags: Mapping[str, builtins.str],
                 time_created: builtins.str,
                 time_updated: builtins.str,
                 users: Sequence['outputs.GetFleetCredentialsFleetCredentialCollectionItemUserResult']):
        """
        :param builtins.str compartment_id: Compartment OCID
        :param builtins.str display_name: A filter to return only resources that match the entire display name given.
        :param Sequence['GetFleetCredentialsFleetCredentialCollectionItemEntitySpecificArgs'] entity_specifics: Credential specific Details.
        :param builtins.str fleet_id: Unique Fleet identifier.
        :param builtins.str id: A filter to return only resources whose credential identifier matches the given identifier.
        :param builtins.str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param Sequence['GetFleetCredentialsFleetCredentialCollectionItemPasswordArgs'] passwords: Credential Details.
        :param builtins.str state: A filter to return only resources whose lifecycleState matches the given lifecycleState.
        :param Mapping[str, builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param builtins.str time_created: The time this resource was created. An RFC3339 formatted datetime string.
        :param builtins.str time_updated: The time this resource was last updated. An RFC3339 formatted datetime string.
        :param Sequence['GetFleetCredentialsFleetCredentialCollectionItemUserArgs'] users: Credential Details.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "entity_specifics", entity_specifics)
        pulumi.set(__self__, "fleet_id", fleet_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "passwords", passwords)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        Compartment OCID
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="entitySpecifics")
    def entity_specifics(self) -> Sequence['outputs.GetFleetCredentialsFleetCredentialCollectionItemEntitySpecificResult']:
        """
        Credential specific Details.
        """
        return pulumi.get(self, "entity_specifics")

    @property
    @pulumi.getter(name="fleetId")
    def fleet_id(self) -> builtins.str:
        """
        Unique Fleet identifier.
        """
        return pulumi.get(self, "fleet_id")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        A filter to return only resources whose credential identifier matches the given identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> builtins.str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def passwords(self) -> Sequence['outputs.GetFleetCredentialsFleetCredentialCollectionItemPasswordResult']:
        """
        Credential Details.
        """
        return pulumi.get(self, "passwords")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        A filter to return only resources whose lifecycleState matches the given lifecycleState.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The time this resource was created. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> builtins.str:
        """
        The time this resource was last updated. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def users(self) -> Sequence['outputs.GetFleetCredentialsFleetCredentialCollectionItemUserResult']:
        """
        Credential Details.
        """
        return pulumi.get(self, "users")


@pulumi.output_type
class GetFleetCredentialsFleetCredentialCollectionItemEntitySpecificResult(dict):
    def __init__(__self__, *,
                 credential_level: builtins.str,
                 resource_id: builtins.str,
                 target: builtins.str,
                 variables: Sequence['outputs.GetFleetCredentialsFleetCredentialCollectionItemEntitySpecificVariableResult']):
        """
        :param builtins.str credential_level: A filter to return only resources whose credentialLevel matches the given credentialLevel.
        :param builtins.str resource_id: Resource Identifier
        :param builtins.str target: A filter to return only resources whose target matches the given target name.
        :param Sequence['GetFleetCredentialsFleetCredentialCollectionItemEntitySpecificVariableArgs'] variables: List of fleet credential variables.
        """
        pulumi.set(__self__, "credential_level", credential_level)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "target", target)
        pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter(name="credentialLevel")
    def credential_level(self) -> builtins.str:
        """
        A filter to return only resources whose credentialLevel matches the given credentialLevel.
        """
        return pulumi.get(self, "credential_level")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> builtins.str:
        """
        Resource Identifier
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter
    def target(self) -> builtins.str:
        """
        A filter to return only resources whose target matches the given target name.
        """
        return pulumi.get(self, "target")

    @property
    @pulumi.getter
    def variables(self) -> Sequence['outputs.GetFleetCredentialsFleetCredentialCollectionItemEntitySpecificVariableResult']:
        """
        List of fleet credential variables.
        """
        return pulumi.get(self, "variables")


@pulumi.output_type
class GetFleetCredentialsFleetCredentialCollectionItemEntitySpecificVariableResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str name: Name of the variable.
        :param builtins.str value: The value corresponding to the credential.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the variable.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        The value corresponding to the credential.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetFleetCredentialsFleetCredentialCollectionItemPasswordResult(dict):
    def __init__(__self__, *,
                 credential_type: builtins.str,
                 key_id: builtins.str,
                 key_version: builtins.str,
                 secret_id: builtins.str,
                 secret_version: builtins.str,
                 value: builtins.str,
                 vault_id: builtins.str):
        """
        :param builtins.str credential_type: Credential Type.
        :param builtins.str key_id: OCID for the Vault Key that will be used to encrypt/decrypt the value given.
        :param builtins.str key_version: The Vault Key version.
        :param builtins.str secret_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the secret.
        :param builtins.str secret_version: The secret version.
        :param builtins.str value: The value corresponding to the credential.
        :param builtins.str vault_id: OCID for the Vault that will be used to fetch the key to encrypt/decrypt the value given.
        """
        pulumi.set(__self__, "credential_type", credential_type)
        pulumi.set(__self__, "key_id", key_id)
        pulumi.set(__self__, "key_version", key_version)
        pulumi.set(__self__, "secret_id", secret_id)
        pulumi.set(__self__, "secret_version", secret_version)
        pulumi.set(__self__, "value", value)
        pulumi.set(__self__, "vault_id", vault_id)

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> builtins.str:
        """
        Credential Type.
        """
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> builtins.str:
        """
        OCID for the Vault Key that will be used to encrypt/decrypt the value given.
        """
        return pulumi.get(self, "key_id")

    @property
    @pulumi.getter(name="keyVersion")
    def key_version(self) -> builtins.str:
        """
        The Vault Key version.
        """
        return pulumi.get(self, "key_version")

    @property
    @pulumi.getter(name="secretId")
    def secret_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the secret.
        """
        return pulumi.get(self, "secret_id")

    @property
    @pulumi.getter(name="secretVersion")
    def secret_version(self) -> builtins.str:
        """
        The secret version.
        """
        return pulumi.get(self, "secret_version")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        The value corresponding to the credential.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> builtins.str:
        """
        OCID for the Vault that will be used to fetch the key to encrypt/decrypt the value given.
        """
        return pulumi.get(self, "vault_id")


@pulumi.output_type
class GetFleetCredentialsFleetCredentialCollectionItemUserResult(dict):
    def __init__(__self__, *,
                 credential_type: builtins.str,
                 key_id: builtins.str,
                 key_version: builtins.str,
                 secret_id: builtins.str,
                 secret_version: builtins.str,
                 value: builtins.str,
                 vault_id: builtins.str):
        """
        :param builtins.str credential_type: Credential Type.
        :param builtins.str key_id: OCID for the Vault Key that will be used to encrypt/decrypt the value given.
        :param builtins.str key_version: The Vault Key version.
        :param builtins.str secret_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the secret.
        :param builtins.str secret_version: The secret version.
        :param builtins.str value: The value corresponding to the credential.
        :param builtins.str vault_id: OCID for the Vault that will be used to fetch the key to encrypt/decrypt the value given.
        """
        pulumi.set(__self__, "credential_type", credential_type)
        pulumi.set(__self__, "key_id", key_id)
        pulumi.set(__self__, "key_version", key_version)
        pulumi.set(__self__, "secret_id", secret_id)
        pulumi.set(__self__, "secret_version", secret_version)
        pulumi.set(__self__, "value", value)
        pulumi.set(__self__, "vault_id", vault_id)

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> builtins.str:
        """
        Credential Type.
        """
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> builtins.str:
        """
        OCID for the Vault Key that will be used to encrypt/decrypt the value given.
        """
        return pulumi.get(self, "key_id")

    @property
    @pulumi.getter(name="keyVersion")
    def key_version(self) -> builtins.str:
        """
        The Vault Key version.
        """
        return pulumi.get(self, "key_version")

    @property
    @pulumi.getter(name="secretId")
    def secret_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the secret.
        """
        return pulumi.get(self, "secret_id")

    @property
    @pulumi.getter(name="secretVersion")
    def secret_version(self) -> builtins.str:
        """
        The secret version.
        """
        return pulumi.get(self, "secret_version")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        The value corresponding to the credential.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> builtins.str:
        """
        OCID for the Vault that will be used to fetch the key to encrypt/decrypt the value given.
        """
        return pulumi.get(self, "vault_id")


@pulumi.output_type
class GetFleetDetailResult(dict):
    def __init__(__self__, *,
                 fleet_type: builtins.str):
        """
        :param builtins.str fleet_type: Type of the Fleet. PRODUCT - A fleet of product-specific resources for a product type. ENVIRONMENT - A fleet of environment-specific resources for a product stack. GROUP - A fleet of a fleet of either environment or product fleets. GENERIC - A fleet of resources selected dynamically or manually for reporting purposes
        """
        pulumi.set(__self__, "fleet_type", fleet_type)

    @property
    @pulumi.getter(name="fleetType")
    def fleet_type(self) -> builtins.str:
        """
        Type of the Fleet. PRODUCT - A fleet of product-specific resources for a product type. ENVIRONMENT - A fleet of environment-specific resources for a product stack. GROUP - A fleet of a fleet of either environment or product fleets. GENERIC - A fleet of resources selected dynamically or manually for reporting purposes
        """
        return pulumi.get(self, "fleet_type")


@pulumi.output_type
class GetFleetNotificationPreferenceResult(dict):
    def __init__(__self__, *,
                 compartment_id: builtins.str,
                 preferences: Sequence['outputs.GetFleetNotificationPreferencePreferenceResult'],
                 topic_id: builtins.str):
        """
        :param builtins.str compartment_id: Compartment Identifier[OCID].
        :param Sequence['GetFleetNotificationPreferencePreferenceArgs'] preferences: Preferences to send notifications on the fleet activities.
        :param builtins.str topic_id: Topic Id where the notifications will be directed. A topic is a communication channel for sending messages on chosen events to subscriptions.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "preferences", preferences)
        pulumi.set(__self__, "topic_id", topic_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        Compartment Identifier[OCID].
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def preferences(self) -> Sequence['outputs.GetFleetNotificationPreferencePreferenceResult']:
        """
        Preferences to send notifications on the fleet activities.
        """
        return pulumi.get(self, "preferences")

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> builtins.str:
        """
        Topic Id where the notifications will be directed. A topic is a communication channel for sending messages on chosen events to subscriptions.
        """
        return pulumi.get(self, "topic_id")


@pulumi.output_type
class GetFleetNotificationPreferencePreferenceResult(dict):
    def __init__(__self__, *,
                 on_job_failure: builtins.bool,
                 on_resource_non_compliance: builtins.bool,
                 on_runbook_newer_version: builtins.bool,
                 on_task_failure: builtins.bool,
                 on_task_pause: builtins.bool,
                 on_task_success: builtins.bool,
                 on_topology_modification: builtins.bool,
                 upcoming_schedules: Sequence['outputs.GetFleetNotificationPreferencePreferenceUpcomingScheduleResult']):
        """
        :param builtins.bool on_job_failure: Enables or disables notification on Job Failures.
        :param builtins.bool on_resource_non_compliance: Enables or disables notification when fleet resource becomes non compliant.
        :param builtins.bool on_runbook_newer_version: Enables or disables notification when a newer version of runbook associated with a fleet is available
        :param builtins.bool on_task_failure: Enables or disables notification on task failure.
        :param builtins.bool on_task_pause: Enables or disables notification when a task is paused.
        :param builtins.bool on_task_success: Enables or disables notification on task success.
        :param builtins.bool on_topology_modification: Enables or disables notification on Environment Fleet Topology Modification.
        :param Sequence['GetFleetNotificationPreferencePreferenceUpcomingScheduleArgs'] upcoming_schedules: Enables notification on upcoming schedule.
        """
        pulumi.set(__self__, "on_job_failure", on_job_failure)
        pulumi.set(__self__, "on_resource_non_compliance", on_resource_non_compliance)
        pulumi.set(__self__, "on_runbook_newer_version", on_runbook_newer_version)
        pulumi.set(__self__, "on_task_failure", on_task_failure)
        pulumi.set(__self__, "on_task_pause", on_task_pause)
        pulumi.set(__self__, "on_task_success", on_task_success)
        pulumi.set(__self__, "on_topology_modification", on_topology_modification)
        pulumi.set(__self__, "upcoming_schedules", upcoming_schedules)

    @property
    @pulumi.getter(name="onJobFailure")
    def on_job_failure(self) -> builtins.bool:
        """
        Enables or disables notification on Job Failures.
        """
        return pulumi.get(self, "on_job_failure")

    @property
    @pulumi.getter(name="onResourceNonCompliance")
    def on_resource_non_compliance(self) -> builtins.bool:
        """
        Enables or disables notification when fleet resource becomes non compliant.
        """
        return pulumi.get(self, "on_resource_non_compliance")

    @property
    @pulumi.getter(name="onRunbookNewerVersion")
    def on_runbook_newer_version(self) -> builtins.bool:
        """
        Enables or disables notification when a newer version of runbook associated with a fleet is available
        """
        return pulumi.get(self, "on_runbook_newer_version")

    @property
    @pulumi.getter(name="onTaskFailure")
    def on_task_failure(self) -> builtins.bool:
        """
        Enables or disables notification on task failure.
        """
        return pulumi.get(self, "on_task_failure")

    @property
    @pulumi.getter(name="onTaskPause")
    def on_task_pause(self) -> builtins.bool:
        """
        Enables or disables notification when a task is paused.
        """
        return pulumi.get(self, "on_task_pause")

    @property
    @pulumi.getter(name="onTaskSuccess")
    def on_task_success(self) -> builtins.bool:
        """
        Enables or disables notification on task success.
        """
        return pulumi.get(self, "on_task_success")

    @property
    @pulumi.getter(name="onTopologyModification")
    def on_topology_modification(self) -> builtins.bool:
        """
        Enables or disables notification on Environment Fleet Topology Modification.
        """
        return pulumi.get(self, "on_topology_modification")

    @property
    @pulumi.getter(name="upcomingSchedules")
    def upcoming_schedules(self) -> Sequence['outputs.GetFleetNotificationPreferencePreferenceUpcomingScheduleResult']:
        """
        Enables notification on upcoming schedule.
        """
        return pulumi.get(self, "upcoming_schedules")


@pulumi.output_type
class GetFleetNotificationPreferencePreferenceUpcomingScheduleResult(dict):
    def __init__(__self__, *,
                 notify_before: builtins.str,
                 on_upcoming_schedule: builtins.bool):
        """
        :param builtins.str notify_before: Specify when the notification should be sent.
        :param builtins.bool on_upcoming_schedule: Enables notification on upcoming schedule.
        """
        pulumi.set(__self__, "notify_before", notify_before)
        pulumi.set(__self__, "on_upcoming_schedule", on_upcoming_schedule)

    @property
    @pulumi.getter(name="notifyBefore")
    def notify_before(self) -> builtins.str:
        """
        Specify when the notification should be sent.
        """
        return pulumi.get(self, "notify_before")

    @property
    @pulumi.getter(name="onUpcomingSchedule")
    def on_upcoming_schedule(self) -> builtins.bool:
        """
        Enables notification on upcoming schedule.
        """
        return pulumi.get(self, "on_upcoming_schedule")


@pulumi.output_type
class GetFleetProductsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetFleetProductsFleetProductCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetFleetProductsFleetProductCollectionItemResult']):
        """
        :param Sequence['GetFleetProductsFleetProductCollectionItemArgs'] items: List of fleetProducts.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetFleetProductsFleetProductCollectionItemResult']:
        """
        List of fleetProducts.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetFleetProductsFleetProductCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: builtins.str,
                 display_name: builtins.str,
                 resources: Sequence['outputs.GetFleetProductsFleetProductCollectionItemResourceResult'],
                 system_tags: Mapping[str, builtins.str],
                 target_count: builtins.int):
        """
        :param builtins.str compartment_id: The ID of the compartment in which to list resources. Empty only if the resource OCID query param is not specified.
        :param builtins.str display_name: A filter to return only resources that match the entire display name given.
        :param Sequence['GetFleetProductsFleetProductCollectionItemResourceArgs'] resources: Resource Information for the Target.
        :param Mapping[str, builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param builtins.int target_count: Count of the targets associated with the Product.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "resources", resources)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "target_count", target_count)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        The ID of the compartment in which to list resources. Empty only if the resource OCID query param is not specified.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetFleetProductsFleetProductCollectionItemResourceResult']:
        """
        Resource Information for the Target.
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="targetCount")
    def target_count(self) -> builtins.int:
        """
        Count of the targets associated with the Product.
        """
        return pulumi.get(self, "target_count")


@pulumi.output_type
class GetFleetProductsFleetProductCollectionItemResourceResult(dict):
    def __init__(__self__, *,
                 resource_display_name: builtins.str,
                 resource_id: builtins.str):
        """
        :param builtins.str resource_display_name: Resource Display Name.
        :param builtins.str resource_id: Resource Identifier
        """
        pulumi.set(__self__, "resource_display_name", resource_display_name)
        pulumi.set(__self__, "resource_id", resource_id)

    @property
    @pulumi.getter(name="resourceDisplayName")
    def resource_display_name(self) -> builtins.str:
        """
        Resource Display Name.
        """
        return pulumi.get(self, "resource_display_name")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> builtins.str:
        """
        Resource Identifier
        """
        return pulumi.get(self, "resource_id")


@pulumi.output_type
class GetFleetPropertiesFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetFleetPropertiesFleetPropertyCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetFleetPropertiesFleetPropertyCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetFleetPropertiesFleetPropertyCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetFleetPropertiesFleetPropertyCollectionItemResult(dict):
    def __init__(__self__, *,
                 allowed_values: Sequence[builtins.str],
                 compartment_id: builtins.str,
                 display_name: builtins.str,
                 fleet_id: builtins.str,
                 id: builtins.str,
                 property_id: builtins.str,
                 selection_type: builtins.str,
                 state: builtins.str,
                 system_tags: Mapping[str, builtins.str],
                 time_created: builtins.str,
                 time_updated: builtins.str,
                 value: builtins.str,
                 value_type: builtins.str):
        """
        :param Sequence[builtins.str] allowed_values: Values of the property (must be a single value if selectionType = 'SINGLE_CHOICE').
        :param builtins.str compartment_id: Compartment OCID
        :param builtins.str display_name: A filter to return only resources that match the entire display name given.
        :param builtins.str fleet_id: Unique Fleet identifier.
        :param builtins.str id: A filter to return only resources whose fleetProperty identifier matches the given identifier.
        :param builtins.str property_id: OCID referring to global level metadata property.
        :param builtins.str selection_type: Text selection of the property.
        :param builtins.str state: A filter to return only resources whose lifecycleState matches the given lifecycleState.
        :param Mapping[str, builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param builtins.str time_created: The time this resource was created. An RFC3339 formatted datetime string.
        :param builtins.str time_updated: The time this resource was last updated. An RFC3339 formatted datetime string.
        :param builtins.str value: Value of the Property.
        :param builtins.str value_type: Format of the value.
        """
        pulumi.set(__self__, "allowed_values", allowed_values)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "fleet_id", fleet_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "property_id", property_id)
        pulumi.set(__self__, "selection_type", selection_type)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "value", value)
        pulumi.set(__self__, "value_type", value_type)

    @property
    @pulumi.getter(name="allowedValues")
    def allowed_values(self) -> Sequence[builtins.str]:
        """
        Values of the property (must be a single value if selectionType = 'SINGLE_CHOICE').
        """
        return pulumi.get(self, "allowed_values")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        Compartment OCID
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="fleetId")
    def fleet_id(self) -> builtins.str:
        """
        Unique Fleet identifier.
        """
        return pulumi.get(self, "fleet_id")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        A filter to return only resources whose fleetProperty identifier matches the given identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="propertyId")
    def property_id(self) -> builtins.str:
        """
        OCID referring to global level metadata property.
        """
        return pulumi.get(self, "property_id")

    @property
    @pulumi.getter(name="selectionType")
    def selection_type(self) -> builtins.str:
        """
        Text selection of the property.
        """
        return pulumi.get(self, "selection_type")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        A filter to return only resources whose lifecycleState matches the given lifecycleState.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The time this resource was created. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> builtins.str:
        """
        The time this resource was last updated. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        Value of the Property.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> builtins.str:
        """
        Format of the value.
        """
        return pulumi.get(self, "value_type")


@pulumi.output_type
class GetFleetPropertyResult(dict):
    def __init__(__self__, *,
                 compartment_id: builtins.str,
                 display_name: builtins.str,
                 fleet_property_type: builtins.str,
                 is_required: builtins.bool,
                 value: builtins.str):
        """
        :param builtins.str compartment_id: Compartment Identifier[OCID].
        :param builtins.str display_name: A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        :param builtins.str fleet_property_type: Type of the FleetProperty.
        :param builtins.bool is_required: Property is required or not.
        :param builtins.str value: Value of the Property.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "fleet_property_type", fleet_property_type)
        pulumi.set(__self__, "is_required", is_required)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        Compartment Identifier[OCID].
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="fleetPropertyType")
    def fleet_property_type(self) -> builtins.str:
        """
        Type of the FleetProperty.
        """
        return pulumi.get(self, "fleet_property_type")

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> builtins.bool:
        """
        Property is required or not.
        """
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        Value of the Property.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetFleetResourceResult(dict):
    def __init__(__self__, *,
                 compartment_id: builtins.str,
                 fleet_resource_type: builtins.str,
                 resource_id: builtins.str,
                 tenancy_id: builtins.str):
        """
        :param builtins.str compartment_id: Compartment Identifier[OCID].
        :param builtins.str fleet_resource_type: Type of the FleetResource.
        :param builtins.str resource_id: OCID of the resource.
        :param builtins.str tenancy_id: Tenancy Identifier[OCID].
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "fleet_resource_type", fleet_resource_type)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "tenancy_id", tenancy_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        Compartment Identifier[OCID].
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="fleetResourceType")
    def fleet_resource_type(self) -> builtins.str:
        """
        Type of the FleetResource.
        """
        return pulumi.get(self, "fleet_resource_type")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> builtins.str:
        """
        OCID of the resource.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="tenancyId")
    def tenancy_id(self) -> builtins.str:
        """
        Tenancy Identifier[OCID].
        """
        return pulumi.get(self, "tenancy_id")


@pulumi.output_type
class GetFleetResourceSelectionResult(dict):
    def __init__(__self__, *,
                 resource_selection_type: builtins.str,
                 rule_selection_criterias: Sequence['outputs.GetFleetResourceSelectionRuleSelectionCriteriaResult']):
        """
        :param builtins.str resource_selection_type: Type of resource selection in a Fleet. Select resources manually or select resources based on rules.
        :param Sequence['GetFleetResourceSelectionRuleSelectionCriteriaArgs'] rule_selection_criterias: Rule Selection Criteria for DYNAMIC resource selection for a GENERIC fleet. Rules define what resources are members of this fleet. All resources that meet the criteria are added automatically.
        """
        pulumi.set(__self__, "resource_selection_type", resource_selection_type)
        pulumi.set(__self__, "rule_selection_criterias", rule_selection_criterias)

    @property
    @pulumi.getter(name="resourceSelectionType")
    def resource_selection_type(self) -> builtins.str:
        """
        Type of resource selection in a Fleet. Select resources manually or select resources based on rules.
        """
        return pulumi.get(self, "resource_selection_type")

    @property
    @pulumi.getter(name="ruleSelectionCriterias")
    def rule_selection_criterias(self) -> Sequence['outputs.GetFleetResourceSelectionRuleSelectionCriteriaResult']:
        """
        Rule Selection Criteria for DYNAMIC resource selection for a GENERIC fleet. Rules define what resources are members of this fleet. All resources that meet the criteria are added automatically.
        """
        return pulumi.get(self, "rule_selection_criterias")


@pulumi.output_type
class GetFleetResourceSelectionRuleSelectionCriteriaResult(dict):
    def __init__(__self__, *,
                 match_condition: builtins.str,
                 rules: Sequence['outputs.GetFleetResourceSelectionRuleSelectionCriteriaRuleResult']):
        """
        :param builtins.str match_condition: Match condition for the rule selection. Include resources that match all rules or any of the rules.
        :param Sequence['GetFleetResourceSelectionRuleSelectionCriteriaRuleArgs'] rules: Rules.
        """
        pulumi.set(__self__, "match_condition", match_condition)
        pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter(name="matchCondition")
    def match_condition(self) -> builtins.str:
        """
        Match condition for the rule selection. Include resources that match all rules or any of the rules.
        """
        return pulumi.get(self, "match_condition")

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.GetFleetResourceSelectionRuleSelectionCriteriaRuleResult']:
        """
        Rules.
        """
        return pulumi.get(self, "rules")


@pulumi.output_type
class GetFleetResourceSelectionRuleSelectionCriteriaRuleResult(dict):
    def __init__(__self__, *,
                 basis: builtins.str,
                 compartment_id: builtins.str,
                 conditions: Sequence['outputs.GetFleetResourceSelectionRuleSelectionCriteriaRuleConditionResult'],
                 resource_compartment_id: builtins.str):
        """
        :param builtins.str basis: Based on what the rule is created. It can be based on a resourceProperty or a tag.   If based on a tag, basis will be 'definedTagEquals' If based on a resource property, basis will be 'inventoryProperties'
        :param builtins.str compartment_id: Compartment Identifier[OCID].
        :param Sequence['GetFleetResourceSelectionRuleSelectionCriteriaRuleConditionArgs'] conditions: Rule Conditions
        :param builtins.str resource_compartment_id: The Compartment ID to dynamically search resources. Provide the compartment ID to which the rule is applicable.
        """
        pulumi.set(__self__, "basis", basis)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "resource_compartment_id", resource_compartment_id)

    @property
    @pulumi.getter
    def basis(self) -> builtins.str:
        """
        Based on what the rule is created. It can be based on a resourceProperty or a tag.   If based on a tag, basis will be 'definedTagEquals' If based on a resource property, basis will be 'inventoryProperties'
        """
        return pulumi.get(self, "basis")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        Compartment Identifier[OCID].
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.GetFleetResourceSelectionRuleSelectionCriteriaRuleConditionResult']:
        """
        Rule Conditions
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="resourceCompartmentId")
    def resource_compartment_id(self) -> builtins.str:
        """
        The Compartment ID to dynamically search resources. Provide the compartment ID to which the rule is applicable.
        """
        return pulumi.get(self, "resource_compartment_id")


@pulumi.output_type
class GetFleetResourceSelectionRuleSelectionCriteriaRuleConditionResult(dict):
    def __init__(__self__, *,
                 attr_group: builtins.str,
                 attr_key: builtins.str,
                 attr_value: builtins.str):
        """
        :param builtins.str attr_group: Attribute Group. Provide a Tag namespace if the rule is based on a tag. Provide resource type if the rule is based on a resource property.
        :param builtins.str attr_key: Attribute Key.Provide Tag key if the rule is based on a tag. Provide resource property name if the rule is based on a resource property.
        :param builtins.str attr_value: Attribute Value.Provide Tag value if the rule is based on a tag. Provide resource property value if the rule is based on a resource property.
        """
        pulumi.set(__self__, "attr_group", attr_group)
        pulumi.set(__self__, "attr_key", attr_key)
        pulumi.set(__self__, "attr_value", attr_value)

    @property
    @pulumi.getter(name="attrGroup")
    def attr_group(self) -> builtins.str:
        """
        Attribute Group. Provide a Tag namespace if the rule is based on a tag. Provide resource type if the rule is based on a resource property.
        """
        return pulumi.get(self, "attr_group")

    @property
    @pulumi.getter(name="attrKey")
    def attr_key(self) -> builtins.str:
        """
        Attribute Key.Provide Tag key if the rule is based on a tag. Provide resource property name if the rule is based on a resource property.
        """
        return pulumi.get(self, "attr_key")

    @property
    @pulumi.getter(name="attrValue")
    def attr_value(self) -> builtins.str:
        """
        Attribute Value.Provide Tag value if the rule is based on a tag. Provide resource property value if the rule is based on a resource property.
        """
        return pulumi.get(self, "attr_value")


@pulumi.output_type
class GetFleetResourcesFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetFleetResourcesFleetResourceCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetFleetResourcesFleetResourceCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetFleetResourcesFleetResourceCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetFleetResourcesFleetResourceCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment: builtins.str,
                 compartment_id: builtins.str,
                 compliance_state: builtins.str,
                 display_name: builtins.str,
                 environment_type: builtins.str,
                 fleet_id: builtins.str,
                 id: builtins.str,
                 lifecycle_details: builtins.str,
                 percent_compliant: builtins.float,
                 product: builtins.str,
                 product_count: builtins.int,
                 resource_id: builtins.str,
                 resource_region: builtins.str,
                 resource_type: builtins.str,
                 state: builtins.str,
                 system_tags: Mapping[str, builtins.str],
                 target_count: builtins.int,
                 tenancy_id: builtins.str,
                 tenancy_name: builtins.str,
                 time_created: builtins.str,
                 time_updated: builtins.str):
        """
        :param builtins.str compartment: Resource Compartment name.
        :param builtins.str compartment_id: OCID of the compartment to which the resource belongs to.
        :param builtins.str compliance_state: Compliance State of the Resource.
        :param builtins.str display_name: A filter to return only resources that match the entire display name given.
        :param builtins.str environment_type: Environment Type associated with the Fleet when the resource type is fleet. Will only be returned for ENVIRONMENT fleets that are part of a GROUP Fleet.
        :param builtins.str fleet_id: Unique Fleet identifier.
        :param builtins.str id: A filter to return only resources whose identifier matches the given identifier.
        :param builtins.str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param builtins.float percent_compliant: The compliance percentage.
        :param builtins.str product: Product associated with the resource when the resource type is fleet. Will only be returned for PRODUCT fleets that are part of a GROUP Fleet.
        :param builtins.int product_count: Count of products within the resource.
        :param builtins.str resource_id: The OCID of the resource.
        :param builtins.str resource_region: Associated region
        :param builtins.str resource_type: Type of the Resource.
        :param builtins.str state: A filter to return only resources whose lifecycleState matches the given lifecycleState.
        :param Mapping[str, builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param builtins.int target_count: Count of targets within the resource.
        :param builtins.str tenancy_id: OCID of the tenancy to which the resource belongs to.
        :param builtins.str tenancy_name: Resource Tenancy Name.
        :param builtins.str time_created: The time this resource was created. An RFC3339 formatted datetime string.
        :param builtins.str time_updated: The time this resource was last updated. An RFC3339 formatted datetime string.
        """
        pulumi.set(__self__, "compartment", compartment)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "compliance_state", compliance_state)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "environment_type", environment_type)
        pulumi.set(__self__, "fleet_id", fleet_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "percent_compliant", percent_compliant)
        pulumi.set(__self__, "product", product)
        pulumi.set(__self__, "product_count", product_count)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_region", resource_region)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "target_count", target_count)
        pulumi.set(__self__, "tenancy_id", tenancy_id)
        pulumi.set(__self__, "tenancy_name", tenancy_name)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter
    def compartment(self) -> builtins.str:
        """
        Resource Compartment name.
        """
        return pulumi.get(self, "compartment")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        OCID of the compartment to which the resource belongs to.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="complianceState")
    def compliance_state(self) -> builtins.str:
        """
        Compliance State of the Resource.
        """
        return pulumi.get(self, "compliance_state")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="environmentType")
    def environment_type(self) -> builtins.str:
        """
        Environment Type associated with the Fleet when the resource type is fleet. Will only be returned for ENVIRONMENT fleets that are part of a GROUP Fleet.
        """
        return pulumi.get(self, "environment_type")

    @property
    @pulumi.getter(name="fleetId")
    def fleet_id(self) -> builtins.str:
        """
        Unique Fleet identifier.
        """
        return pulumi.get(self, "fleet_id")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        A filter to return only resources whose identifier matches the given identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> builtins.str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="percentCompliant")
    def percent_compliant(self) -> builtins.float:
        """
        The compliance percentage.
        """
        return pulumi.get(self, "percent_compliant")

    @property
    @pulumi.getter
    def product(self) -> builtins.str:
        """
        Product associated with the resource when the resource type is fleet. Will only be returned for PRODUCT fleets that are part of a GROUP Fleet.
        """
        return pulumi.get(self, "product")

    @property
    @pulumi.getter(name="productCount")
    def product_count(self) -> builtins.int:
        """
        Count of products within the resource.
        """
        return pulumi.get(self, "product_count")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> builtins.str:
        """
        The OCID of the resource.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceRegion")
    def resource_region(self) -> builtins.str:
        """
        Associated region
        """
        return pulumi.get(self, "resource_region")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> builtins.str:
        """
        Type of the Resource.
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        A filter to return only resources whose lifecycleState matches the given lifecycleState.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="targetCount")
    def target_count(self) -> builtins.int:
        """
        Count of targets within the resource.
        """
        return pulumi.get(self, "target_count")

    @property
    @pulumi.getter(name="tenancyId")
    def tenancy_id(self) -> builtins.str:
        """
        OCID of the tenancy to which the resource belongs to.
        """
        return pulumi.get(self, "tenancy_id")

    @property
    @pulumi.getter(name="tenancyName")
    def tenancy_name(self) -> builtins.str:
        """
        Resource Tenancy Name.
        """
        return pulumi.get(self, "tenancy_name")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The time this resource was created. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> builtins.str:
        """
        The time this resource was last updated. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetFleetTargetsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetFleetTargetsFleetTargetCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetFleetTargetsFleetTargetCollectionItemResult']):
        """
        :param Sequence['GetFleetTargetsFleetTargetCollectionItemArgs'] items: List of fleetTargets.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetFleetTargetsFleetTargetCollectionItemResult']:
        """
        List of fleetTargets.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetFleetTargetsFleetTargetCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: builtins.str,
                 compliance_state: builtins.str,
                 display_name: builtins.str,
                 id: builtins.str,
                 is_last_discovery_attempt_successful: builtins.bool,
                 product: builtins.str,
                 resources: Sequence['outputs.GetFleetTargetsFleetTargetCollectionItemResourceResult'],
                 state: builtins.str,
                 system_tags: Mapping[str, builtins.str],
                 time_of_last_discovery_attempt: builtins.str,
                 time_of_last_successful_discovery: builtins.str,
                 version: builtins.str):
        """
        :param builtins.str compartment_id: compartment OCID
        :param builtins.str compliance_state: The last known compliance state of the target.
        :param builtins.str display_name: A filter to return only resources that match the entire display name given.
        :param builtins.str id: The OCID of the resource.
        :param builtins.bool is_last_discovery_attempt_successful: A boolean flag that represents whether the last discovery attempt was successful.
        :param builtins.str product: Product Name.
        :param Sequence['GetFleetTargetsFleetTargetCollectionItemResourceArgs'] resources: Resource Information for the Target.
        :param builtins.str state: The current state of the FleetTarget.
        :param Mapping[str, builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param builtins.str time_of_last_discovery_attempt: The time when last discovery was attempted.
        :param builtins.str time_of_last_successful_discovery: The time when the last successful discovery was made.
        :param builtins.str version: Current version of target.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "compliance_state", compliance_state)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_last_discovery_attempt_successful", is_last_discovery_attempt_successful)
        pulumi.set(__self__, "product", product)
        pulumi.set(__self__, "resources", resources)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_of_last_discovery_attempt", time_of_last_discovery_attempt)
        pulumi.set(__self__, "time_of_last_successful_discovery", time_of_last_successful_discovery)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        compartment OCID
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="complianceState")
    def compliance_state(self) -> builtins.str:
        """
        The last known compliance state of the target.
        """
        return pulumi.get(self, "compliance_state")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The OCID of the resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isLastDiscoveryAttemptSuccessful")
    def is_last_discovery_attempt_successful(self) -> builtins.bool:
        """
        A boolean flag that represents whether the last discovery attempt was successful.
        """
        return pulumi.get(self, "is_last_discovery_attempt_successful")

    @property
    @pulumi.getter
    def product(self) -> builtins.str:
        """
        Product Name.
        """
        return pulumi.get(self, "product")

    @property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetFleetTargetsFleetTargetCollectionItemResourceResult']:
        """
        Resource Information for the Target.
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        The current state of the FleetTarget.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeOfLastDiscoveryAttempt")
    def time_of_last_discovery_attempt(self) -> builtins.str:
        """
        The time when last discovery was attempted.
        """
        return pulumi.get(self, "time_of_last_discovery_attempt")

    @property
    @pulumi.getter(name="timeOfLastSuccessfulDiscovery")
    def time_of_last_successful_discovery(self) -> builtins.str:
        """
        The time when the last successful discovery was made.
        """
        return pulumi.get(self, "time_of_last_successful_discovery")

    @property
    @pulumi.getter
    def version(self) -> builtins.str:
        """
        Current version of target.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetFleetTargetsFleetTargetCollectionItemResourceResult(dict):
    def __init__(__self__, *,
                 resource_display_name: builtins.str,
                 resource_id: builtins.str):
        """
        :param builtins.str resource_display_name: Resource Display Name.
        :param builtins.str resource_id: Resource Identifier
        """
        pulumi.set(__self__, "resource_display_name", resource_display_name)
        pulumi.set(__self__, "resource_id", resource_id)

    @property
    @pulumi.getter(name="resourceDisplayName")
    def resource_display_name(self) -> builtins.str:
        """
        Resource Display Name.
        """
        return pulumi.get(self, "resource_display_name")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> builtins.str:
        """
        Resource Identifier
        """
        return pulumi.get(self, "resource_id")


@pulumi.output_type
class GetFleetsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        """
        :param builtins.str name: Name of the variable.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the variable.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetFleetsFleetCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetFleetsFleetCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetFleetsFleetCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetFleetsFleetCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: builtins.str,
                 credentials: Sequence['outputs.GetFleetsFleetCollectionItemCredentialResult'],
                 defined_tags: Mapping[str, builtins.str],
                 description: builtins.str,
                 details: Sequence['outputs.GetFleetsFleetCollectionItemDetailResult'],
                 display_name: builtins.str,
                 environment_type: builtins.str,
                 freeform_tags: Mapping[str, builtins.str],
                 id: builtins.str,
                 is_target_auto_confirm: builtins.bool,
                 lifecycle_details: builtins.str,
                 notification_preferences: Sequence['outputs.GetFleetsFleetCollectionItemNotificationPreferenceResult'],
                 parent_fleet_id: builtins.str,
                 products: Sequence[builtins.str],
                 properties: Sequence['outputs.GetFleetsFleetCollectionItemPropertyResult'],
                 resource_region: builtins.str,
                 resource_selections: Sequence['outputs.GetFleetsFleetCollectionItemResourceSelectionResult'],
                 resources: Sequence['outputs.GetFleetsFleetCollectionItemResourceResult'],
                 state: builtins.str,
                 system_tags: Mapping[str, builtins.str],
                 time_created: builtins.str,
                 time_updated: builtins.str):
        """
        :param builtins.str compartment_id: The ID of the compartment in which to list resources. Empty only if the resource OCID query param is not specified.
        :param Sequence['GetFleetsFleetCollectionItemCredentialArgs'] credentials: Credentials associated with the Fleet.
        :param Mapping[str, builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param builtins.str description: A user-friendly description. To provide some insight about the resource. Avoid entering confidential information.
        :param Sequence['GetFleetsFleetCollectionItemDetailArgs'] details: Fleet Type
        :param builtins.str display_name: A filter to return only resources that match the entire display name given.
        :param builtins.str environment_type: A filter to return resources that match the Environment Type given.
        :param Mapping[str, builtins.str] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param builtins.str id: Unique identifier or OCID for listing a single fleet by id. Either compartmentId or id must be provided.
        :param builtins.bool is_target_auto_confirm: A value that represents if auto-confirming of the targets can be enabled. This will allow targets to be auto-confirmed in the fleet without manual intervention.
        :param builtins.str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param Sequence['GetFleetsFleetCollectionItemNotificationPreferenceArgs'] notification_preferences: Notification Preferences associated with the Fleet.
        :param builtins.str parent_fleet_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the fleet that would be the parent for this fleet.
        :param Sequence[builtins.str] products: Products associated with the Fleet.
        :param Sequence['GetFleetsFleetCollectionItemPropertyArgs'] properties: Properties associated with the Fleet.
        :param builtins.str resource_region: Associated region
        :param Sequence['GetFleetsFleetCollectionItemResourceSelectionArgs'] resource_selections: Resource Selection Type
        :param Sequence['GetFleetsFleetCollectionItemResourceArgs'] resources: Resources associated with the Fleet if resourceSelectionType is MANUAL.
        :param builtins.str state: A filter to return fleets whose lifecycleState matches the given lifecycleState.
        :param Mapping[str, builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param builtins.str time_created: The time this resource was created. An RFC3339 formatted datetime string.
        :param builtins.str time_updated: The time this resource was last updated. An RFC3339 formatted datetime string.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "environment_type", environment_type)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_target_auto_confirm", is_target_auto_confirm)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "notification_preferences", notification_preferences)
        pulumi.set(__self__, "parent_fleet_id", parent_fleet_id)
        pulumi.set(__self__, "products", products)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "resource_region", resource_region)
        pulumi.set(__self__, "resource_selections", resource_selections)
        pulumi.set(__self__, "resources", resources)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        The ID of the compartment in which to list resources. Empty only if the resource OCID query param is not specified.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def credentials(self) -> Sequence['outputs.GetFleetsFleetCollectionItemCredentialResult']:
        """
        Credentials associated with the Fleet.
        """
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        A user-friendly description. To provide some insight about the resource. Avoid entering confidential information.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def details(self) -> Sequence['outputs.GetFleetsFleetCollectionItemDetailResult']:
        """
        Fleet Type
        """
        return pulumi.get(self, "details")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="environmentType")
    def environment_type(self) -> builtins.str:
        """
        A filter to return resources that match the Environment Type given.
        """
        return pulumi.get(self, "environment_type")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Unique identifier or OCID for listing a single fleet by id. Either compartmentId or id must be provided.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isTargetAutoConfirm")
    def is_target_auto_confirm(self) -> builtins.bool:
        """
        A value that represents if auto-confirming of the targets can be enabled. This will allow targets to be auto-confirmed in the fleet without manual intervention.
        """
        return pulumi.get(self, "is_target_auto_confirm")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> builtins.str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="notificationPreferences")
    def notification_preferences(self) -> Sequence['outputs.GetFleetsFleetCollectionItemNotificationPreferenceResult']:
        """
        Notification Preferences associated with the Fleet.
        """
        return pulumi.get(self, "notification_preferences")

    @property
    @pulumi.getter(name="parentFleetId")
    def parent_fleet_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the fleet that would be the parent for this fleet.
        """
        return pulumi.get(self, "parent_fleet_id")

    @property
    @pulumi.getter
    def products(self) -> Sequence[builtins.str]:
        """
        Products associated with the Fleet.
        """
        return pulumi.get(self, "products")

    @property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetFleetsFleetCollectionItemPropertyResult']:
        """
        Properties associated with the Fleet.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="resourceRegion")
    def resource_region(self) -> builtins.str:
        """
        Associated region
        """
        return pulumi.get(self, "resource_region")

    @property
    @pulumi.getter(name="resourceSelections")
    def resource_selections(self) -> Sequence['outputs.GetFleetsFleetCollectionItemResourceSelectionResult']:
        """
        Resource Selection Type
        """
        return pulumi.get(self, "resource_selections")

    @property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetFleetsFleetCollectionItemResourceResult']:
        """
        Resources associated with the Fleet if resourceSelectionType is MANUAL.
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        A filter to return fleets whose lifecycleState matches the given lifecycleState.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The time this resource was created. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> builtins.str:
        """
        The time this resource was last updated. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetFleetsFleetCollectionItemCredentialResult(dict):
    def __init__(__self__, *,
                 compartment_id: builtins.str,
                 display_name: builtins.str,
                 entity_specifics: Sequence['outputs.GetFleetsFleetCollectionItemCredentialEntitySpecificResult'],
                 passwords: Sequence['outputs.GetFleetsFleetCollectionItemCredentialPasswordResult'],
                 users: Sequence['outputs.GetFleetsFleetCollectionItemCredentialUserResult']):
        """
        :param builtins.str compartment_id: The ID of the compartment in which to list resources. Empty only if the resource OCID query param is not specified.
        :param builtins.str display_name: A filter to return only resources that match the entire display name given.
        :param Sequence['GetFleetsFleetCollectionItemCredentialEntitySpecificArgs'] entity_specifics: Credential specific Details.
        :param Sequence['GetFleetsFleetCollectionItemCredentialPasswordArgs'] passwords: Credential Details.
        :param Sequence['GetFleetsFleetCollectionItemCredentialUserArgs'] users: Credential Details.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "entity_specifics", entity_specifics)
        pulumi.set(__self__, "passwords", passwords)
        pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        The ID of the compartment in which to list resources. Empty only if the resource OCID query param is not specified.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="entitySpecifics")
    def entity_specifics(self) -> Sequence['outputs.GetFleetsFleetCollectionItemCredentialEntitySpecificResult']:
        """
        Credential specific Details.
        """
        return pulumi.get(self, "entity_specifics")

    @property
    @pulumi.getter
    def passwords(self) -> Sequence['outputs.GetFleetsFleetCollectionItemCredentialPasswordResult']:
        """
        Credential Details.
        """
        return pulumi.get(self, "passwords")

    @property
    @pulumi.getter
    def users(self) -> Sequence['outputs.GetFleetsFleetCollectionItemCredentialUserResult']:
        """
        Credential Details.
        """
        return pulumi.get(self, "users")


@pulumi.output_type
class GetFleetsFleetCollectionItemCredentialEntitySpecificResult(dict):
    def __init__(__self__, *,
                 credential_level: builtins.str,
                 resource_id: builtins.str,
                 target: builtins.str,
                 variables: Sequence['outputs.GetFleetsFleetCollectionItemCredentialEntitySpecificVariableResult']):
        """
        :param builtins.str credential_level: At what level the credential is provided?
        :param builtins.str resource_id: OCID of the resource.
        :param builtins.str target: Target name for which the credential is provided.
        :param Sequence['GetFleetsFleetCollectionItemCredentialEntitySpecificVariableArgs'] variables: List of fleet credential variables.
        """
        pulumi.set(__self__, "credential_level", credential_level)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "target", target)
        pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter(name="credentialLevel")
    def credential_level(self) -> builtins.str:
        """
        At what level the credential is provided?
        """
        return pulumi.get(self, "credential_level")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> builtins.str:
        """
        OCID of the resource.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter
    def target(self) -> builtins.str:
        """
        Target name for which the credential is provided.
        """
        return pulumi.get(self, "target")

    @property
    @pulumi.getter
    def variables(self) -> Sequence['outputs.GetFleetsFleetCollectionItemCredentialEntitySpecificVariableResult']:
        """
        List of fleet credential variables.
        """
        return pulumi.get(self, "variables")


@pulumi.output_type
class GetFleetsFleetCollectionItemCredentialEntitySpecificVariableResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str name: Name of the variable.
        :param builtins.str value: Value of the Property.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the variable.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        Value of the Property.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetFleetsFleetCollectionItemCredentialPasswordResult(dict):
    def __init__(__self__, *,
                 credential_type: builtins.str,
                 key_id: builtins.str,
                 key_version: builtins.str,
                 secret_id: builtins.str,
                 secret_version: builtins.str,
                 value: builtins.str,
                 vault_id: builtins.str):
        """
        :param builtins.str credential_type: Credential Type.
        :param builtins.str key_id: OCID for the Vault Key that will be used to encrypt/decrypt the value given.
        :param builtins.str key_version: The Vault Key version.
        :param builtins.str secret_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the secret.
        :param builtins.str secret_version: The secret version.
        :param builtins.str value: Value of the Property.
        :param builtins.str vault_id: OCID for the Vault that will be used to fetch the key to encrypt/decrypt the value given.
        """
        pulumi.set(__self__, "credential_type", credential_type)
        pulumi.set(__self__, "key_id", key_id)
        pulumi.set(__self__, "key_version", key_version)
        pulumi.set(__self__, "secret_id", secret_id)
        pulumi.set(__self__, "secret_version", secret_version)
        pulumi.set(__self__, "value", value)
        pulumi.set(__self__, "vault_id", vault_id)

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> builtins.str:
        """
        Credential Type.
        """
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> builtins.str:
        """
        OCID for the Vault Key that will be used to encrypt/decrypt the value given.
        """
        return pulumi.get(self, "key_id")

    @property
    @pulumi.getter(name="keyVersion")
    def key_version(self) -> builtins.str:
        """
        The Vault Key version.
        """
        return pulumi.get(self, "key_version")

    @property
    @pulumi.getter(name="secretId")
    def secret_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the secret.
        """
        return pulumi.get(self, "secret_id")

    @property
    @pulumi.getter(name="secretVersion")
    def secret_version(self) -> builtins.str:
        """
        The secret version.
        """
        return pulumi.get(self, "secret_version")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        Value of the Property.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> builtins.str:
        """
        OCID for the Vault that will be used to fetch the key to encrypt/decrypt the value given.
        """
        return pulumi.get(self, "vault_id")


@pulumi.output_type
class GetFleetsFleetCollectionItemCredentialUserResult(dict):
    def __init__(__self__, *,
                 credential_type: builtins.str,
                 key_id: builtins.str,
                 key_version: builtins.str,
                 secret_id: builtins.str,
                 secret_version: builtins.str,
                 value: builtins.str,
                 vault_id: builtins.str):
        """
        :param builtins.str credential_type: Credential Type.
        :param builtins.str key_id: OCID for the Vault Key that will be used to encrypt/decrypt the value given.
        :param builtins.str key_version: The Vault Key version.
        :param builtins.str secret_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the secret.
        :param builtins.str secret_version: The secret version.
        :param builtins.str value: Value of the Property.
        :param builtins.str vault_id: OCID for the Vault that will be used to fetch the key to encrypt/decrypt the value given.
        """
        pulumi.set(__self__, "credential_type", credential_type)
        pulumi.set(__self__, "key_id", key_id)
        pulumi.set(__self__, "key_version", key_version)
        pulumi.set(__self__, "secret_id", secret_id)
        pulumi.set(__self__, "secret_version", secret_version)
        pulumi.set(__self__, "value", value)
        pulumi.set(__self__, "vault_id", vault_id)

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> builtins.str:
        """
        Credential Type.
        """
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> builtins.str:
        """
        OCID for the Vault Key that will be used to encrypt/decrypt the value given.
        """
        return pulumi.get(self, "key_id")

    @property
    @pulumi.getter(name="keyVersion")
    def key_version(self) -> builtins.str:
        """
        The Vault Key version.
        """
        return pulumi.get(self, "key_version")

    @property
    @pulumi.getter(name="secretId")
    def secret_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the secret.
        """
        return pulumi.get(self, "secret_id")

    @property
    @pulumi.getter(name="secretVersion")
    def secret_version(self) -> builtins.str:
        """
        The secret version.
        """
        return pulumi.get(self, "secret_version")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        Value of the Property.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> builtins.str:
        """
        OCID for the Vault that will be used to fetch the key to encrypt/decrypt the value given.
        """
        return pulumi.get(self, "vault_id")


@pulumi.output_type
class GetFleetsFleetCollectionItemDetailResult(dict):
    def __init__(__self__, *,
                 fleet_type: builtins.str):
        """
        :param builtins.str fleet_type: A filter to return fleets whose fleetType matches the given fleetType.
        """
        pulumi.set(__self__, "fleet_type", fleet_type)

    @property
    @pulumi.getter(name="fleetType")
    def fleet_type(self) -> builtins.str:
        """
        A filter to return fleets whose fleetType matches the given fleetType.
        """
        return pulumi.get(self, "fleet_type")


@pulumi.output_type
class GetFleetsFleetCollectionItemNotificationPreferenceResult(dict):
    def __init__(__self__, *,
                 compartment_id: builtins.str,
                 preferences: Sequence['outputs.GetFleetsFleetCollectionItemNotificationPreferencePreferenceResult'],
                 topic_id: builtins.str):
        """
        :param builtins.str compartment_id: The ID of the compartment in which to list resources. Empty only if the resource OCID query param is not specified.
        :param Sequence['GetFleetsFleetCollectionItemNotificationPreferencePreferenceArgs'] preferences: Preferences to send notifications on the fleet activities.
        :param builtins.str topic_id: Topic Id where the notifications will be directed. A topic is a communication channel for sending messages on chosen events to subscriptions.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "preferences", preferences)
        pulumi.set(__self__, "topic_id", topic_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        The ID of the compartment in which to list resources. Empty only if the resource OCID query param is not specified.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def preferences(self) -> Sequence['outputs.GetFleetsFleetCollectionItemNotificationPreferencePreferenceResult']:
        """
        Preferences to send notifications on the fleet activities.
        """
        return pulumi.get(self, "preferences")

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> builtins.str:
        """
        Topic Id where the notifications will be directed. A topic is a communication channel for sending messages on chosen events to subscriptions.
        """
        return pulumi.get(self, "topic_id")


@pulumi.output_type
class GetFleetsFleetCollectionItemNotificationPreferencePreferenceResult(dict):
    def __init__(__self__, *,
                 on_job_failure: builtins.bool,
                 on_resource_non_compliance: builtins.bool,
                 on_runbook_newer_version: builtins.bool,
                 on_task_failure: builtins.bool,
                 on_task_pause: builtins.bool,
                 on_task_success: builtins.bool,
                 on_topology_modification: builtins.bool,
                 upcoming_schedules: Sequence['outputs.GetFleetsFleetCollectionItemNotificationPreferencePreferenceUpcomingScheduleResult']):
        """
        :param builtins.bool on_job_failure: Enables or disables notification on Job Failures.
        :param builtins.bool on_resource_non_compliance: Enables or disables notification when fleet resource becomes non compliant.
        :param builtins.bool on_runbook_newer_version: Enables or disables notification when a newer version of runbook associated with a fleet is available
        :param builtins.bool on_task_failure: Enables or disables notification on task failure.
        :param builtins.bool on_task_pause: Enables or disables notification when a task is paused.
        :param builtins.bool on_task_success: Enables or disables notification on task success.
        :param builtins.bool on_topology_modification: Enables or disables notification on Environment Fleet Topology Modification.
        :param Sequence['GetFleetsFleetCollectionItemNotificationPreferencePreferenceUpcomingScheduleArgs'] upcoming_schedules: Enables notification on upcoming schedule.
        """
        pulumi.set(__self__, "on_job_failure", on_job_failure)
        pulumi.set(__self__, "on_resource_non_compliance", on_resource_non_compliance)
        pulumi.set(__self__, "on_runbook_newer_version", on_runbook_newer_version)
        pulumi.set(__self__, "on_task_failure", on_task_failure)
        pulumi.set(__self__, "on_task_pause", on_task_pause)
        pulumi.set(__self__, "on_task_success", on_task_success)
        pulumi.set(__self__, "on_topology_modification", on_topology_modification)
        pulumi.set(__self__, "upcoming_schedules", upcoming_schedules)

    @property
    @pulumi.getter(name="onJobFailure")
    def on_job_failure(self) -> builtins.bool:
        """
        Enables or disables notification on Job Failures.
        """
        return pulumi.get(self, "on_job_failure")

    @property
    @pulumi.getter(name="onResourceNonCompliance")
    def on_resource_non_compliance(self) -> builtins.bool:
        """
        Enables or disables notification when fleet resource becomes non compliant.
        """
        return pulumi.get(self, "on_resource_non_compliance")

    @property
    @pulumi.getter(name="onRunbookNewerVersion")
    def on_runbook_newer_version(self) -> builtins.bool:
        """
        Enables or disables notification when a newer version of runbook associated with a fleet is available
        """
        return pulumi.get(self, "on_runbook_newer_version")

    @property
    @pulumi.getter(name="onTaskFailure")
    def on_task_failure(self) -> builtins.bool:
        """
        Enables or disables notification on task failure.
        """
        return pulumi.get(self, "on_task_failure")

    @property
    @pulumi.getter(name="onTaskPause")
    def on_task_pause(self) -> builtins.bool:
        """
        Enables or disables notification when a task is paused.
        """
        return pulumi.get(self, "on_task_pause")

    @property
    @pulumi.getter(name="onTaskSuccess")
    def on_task_success(self) -> builtins.bool:
        """
        Enables or disables notification on task success.
        """
        return pulumi.get(self, "on_task_success")

    @property
    @pulumi.getter(name="onTopologyModification")
    def on_topology_modification(self) -> builtins.bool:
        """
        Enables or disables notification on Environment Fleet Topology Modification.
        """
        return pulumi.get(self, "on_topology_modification")

    @property
    @pulumi.getter(name="upcomingSchedules")
    def upcoming_schedules(self) -> Sequence['outputs.GetFleetsFleetCollectionItemNotificationPreferencePreferenceUpcomingScheduleResult']:
        """
        Enables notification on upcoming schedule.
        """
        return pulumi.get(self, "upcoming_schedules")


@pulumi.output_type
class GetFleetsFleetCollectionItemNotificationPreferencePreferenceUpcomingScheduleResult(dict):
    def __init__(__self__, *,
                 notify_before: builtins.str,
                 on_upcoming_schedule: builtins.bool):
        """
        :param builtins.str notify_before: Specify when the notification should be sent.
        :param builtins.bool on_upcoming_schedule: Enables notification on upcoming schedule.
        """
        pulumi.set(__self__, "notify_before", notify_before)
        pulumi.set(__self__, "on_upcoming_schedule", on_upcoming_schedule)

    @property
    @pulumi.getter(name="notifyBefore")
    def notify_before(self) -> builtins.str:
        """
        Specify when the notification should be sent.
        """
        return pulumi.get(self, "notify_before")

    @property
    @pulumi.getter(name="onUpcomingSchedule")
    def on_upcoming_schedule(self) -> builtins.bool:
        """
        Enables notification on upcoming schedule.
        """
        return pulumi.get(self, "on_upcoming_schedule")


@pulumi.output_type
class GetFleetsFleetCollectionItemPropertyResult(dict):
    def __init__(__self__, *,
                 compartment_id: builtins.str,
                 display_name: builtins.str,
                 fleet_property_type: builtins.str,
                 is_required: builtins.bool,
                 value: builtins.str):
        """
        :param builtins.str compartment_id: The ID of the compartment in which to list resources. Empty only if the resource OCID query param is not specified.
        :param builtins.str display_name: A filter to return only resources that match the entire display name given.
        :param builtins.str fleet_property_type: Type of the FleetProperty.
        :param builtins.bool is_required: Property is required or not.
        :param builtins.str value: Value of the Property.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "fleet_property_type", fleet_property_type)
        pulumi.set(__self__, "is_required", is_required)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        The ID of the compartment in which to list resources. Empty only if the resource OCID query param is not specified.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="fleetPropertyType")
    def fleet_property_type(self) -> builtins.str:
        """
        Type of the FleetProperty.
        """
        return pulumi.get(self, "fleet_property_type")

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> builtins.bool:
        """
        Property is required or not.
        """
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        Value of the Property.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetFleetsFleetCollectionItemResourceResult(dict):
    def __init__(__self__, *,
                 compartment_id: builtins.str,
                 fleet_resource_type: builtins.str,
                 resource_id: builtins.str,
                 tenancy_id: builtins.str):
        """
        :param builtins.str compartment_id: The ID of the compartment in which to list resources. Empty only if the resource OCID query param is not specified.
        :param builtins.str fleet_resource_type: Type of the FleetResource.
        :param builtins.str resource_id: OCID of the resource.
        :param builtins.str tenancy_id: Tenancy Identifier[OCID].
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "fleet_resource_type", fleet_resource_type)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "tenancy_id", tenancy_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        The ID of the compartment in which to list resources. Empty only if the resource OCID query param is not specified.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="fleetResourceType")
    def fleet_resource_type(self) -> builtins.str:
        """
        Type of the FleetResource.
        """
        return pulumi.get(self, "fleet_resource_type")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> builtins.str:
        """
        OCID of the resource.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="tenancyId")
    def tenancy_id(self) -> builtins.str:
        """
        Tenancy Identifier[OCID].
        """
        return pulumi.get(self, "tenancy_id")


@pulumi.output_type
class GetFleetsFleetCollectionItemResourceSelectionResult(dict):
    def __init__(__self__, *,
                 resource_selection_type: builtins.str,
                 rule_selection_criterias: Sequence['outputs.GetFleetsFleetCollectionItemResourceSelectionRuleSelectionCriteriaResult']):
        """
        :param builtins.str resource_selection_type: Type of resource selection in a Fleet. Select resources manually or select resources based on rules.
        :param Sequence['GetFleetsFleetCollectionItemResourceSelectionRuleSelectionCriteriaArgs'] rule_selection_criterias: Rule Selection Criteria for DYNAMIC resource selection for a GENERIC fleet. Rules define what resources are members of this fleet. All resources that meet the criteria are added automatically.
        """
        pulumi.set(__self__, "resource_selection_type", resource_selection_type)
        pulumi.set(__self__, "rule_selection_criterias", rule_selection_criterias)

    @property
    @pulumi.getter(name="resourceSelectionType")
    def resource_selection_type(self) -> builtins.str:
        """
        Type of resource selection in a Fleet. Select resources manually or select resources based on rules.
        """
        return pulumi.get(self, "resource_selection_type")

    @property
    @pulumi.getter(name="ruleSelectionCriterias")
    def rule_selection_criterias(self) -> Sequence['outputs.GetFleetsFleetCollectionItemResourceSelectionRuleSelectionCriteriaResult']:
        """
        Rule Selection Criteria for DYNAMIC resource selection for a GENERIC fleet. Rules define what resources are members of this fleet. All resources that meet the criteria are added automatically.
        """
        return pulumi.get(self, "rule_selection_criterias")


@pulumi.output_type
class GetFleetsFleetCollectionItemResourceSelectionRuleSelectionCriteriaResult(dict):
    def __init__(__self__, *,
                 match_condition: builtins.str,
                 rules: Sequence['outputs.GetFleetsFleetCollectionItemResourceSelectionRuleSelectionCriteriaRuleResult']):
        """
        :param builtins.str match_condition: Match condition for the rule selection. Include resources that match all rules or any of the rules.
        :param Sequence['GetFleetsFleetCollectionItemResourceSelectionRuleSelectionCriteriaRuleArgs'] rules: Rules.
        """
        pulumi.set(__self__, "match_condition", match_condition)
        pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter(name="matchCondition")
    def match_condition(self) -> builtins.str:
        """
        Match condition for the rule selection. Include resources that match all rules or any of the rules.
        """
        return pulumi.get(self, "match_condition")

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.GetFleetsFleetCollectionItemResourceSelectionRuleSelectionCriteriaRuleResult']:
        """
        Rules.
        """
        return pulumi.get(self, "rules")


@pulumi.output_type
class GetFleetsFleetCollectionItemResourceSelectionRuleSelectionCriteriaRuleResult(dict):
    def __init__(__self__, *,
                 basis: builtins.str,
                 compartment_id: builtins.str,
                 conditions: Sequence['outputs.GetFleetsFleetCollectionItemResourceSelectionRuleSelectionCriteriaRuleConditionResult'],
                 resource_compartment_id: builtins.str):
        """
        :param builtins.str basis: Based on what the rule is created. It can be based on a resourceProperty or a tag.   If based on a tag, basis will be 'definedTagEquals' If based on a resource property, basis will be 'inventoryProperties'
        :param builtins.str compartment_id: The ID of the compartment in which to list resources. Empty only if the resource OCID query param is not specified.
        :param Sequence['GetFleetsFleetCollectionItemResourceSelectionRuleSelectionCriteriaRuleConditionArgs'] conditions: Rule Conditions
        :param builtins.str resource_compartment_id: The Compartment ID to dynamically search resources. Provide the compartment ID to which the rule is applicable.
        """
        pulumi.set(__self__, "basis", basis)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "resource_compartment_id", resource_compartment_id)

    @property
    @pulumi.getter
    def basis(self) -> builtins.str:
        """
        Based on what the rule is created. It can be based on a resourceProperty or a tag.   If based on a tag, basis will be 'definedTagEquals' If based on a resource property, basis will be 'inventoryProperties'
        """
        return pulumi.get(self, "basis")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        The ID of the compartment in which to list resources. Empty only if the resource OCID query param is not specified.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.GetFleetsFleetCollectionItemResourceSelectionRuleSelectionCriteriaRuleConditionResult']:
        """
        Rule Conditions
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="resourceCompartmentId")
    def resource_compartment_id(self) -> builtins.str:
        """
        The Compartment ID to dynamically search resources. Provide the compartment ID to which the rule is applicable.
        """
        return pulumi.get(self, "resource_compartment_id")


@pulumi.output_type
class GetFleetsFleetCollectionItemResourceSelectionRuleSelectionCriteriaRuleConditionResult(dict):
    def __init__(__self__, *,
                 attr_group: builtins.str,
                 attr_key: builtins.str,
                 attr_value: builtins.str):
        """
        :param builtins.str attr_group: Attribute Group. Provide a Tag namespace if the rule is based on a tag. Provide resource type if the rule is based on a resource property.
        :param builtins.str attr_key: Attribute Key.Provide Tag key if the rule is based on a tag. Provide resource property name if the rule is based on a resource property.
        :param builtins.str attr_value: Attribute Value.Provide Tag value if the rule is based on a tag. Provide resource property value if the rule is based on a resource property.
        """
        pulumi.set(__self__, "attr_group", attr_group)
        pulumi.set(__self__, "attr_key", attr_key)
        pulumi.set(__self__, "attr_value", attr_value)

    @property
    @pulumi.getter(name="attrGroup")
    def attr_group(self) -> builtins.str:
        """
        Attribute Group. Provide a Tag namespace if the rule is based on a tag. Provide resource type if the rule is based on a resource property.
        """
        return pulumi.get(self, "attr_group")

    @property
    @pulumi.getter(name="attrKey")
    def attr_key(self) -> builtins.str:
        """
        Attribute Key.Provide Tag key if the rule is based on a tag. Provide resource property name if the rule is based on a resource property.
        """
        return pulumi.get(self, "attr_key")

    @property
    @pulumi.getter(name="attrValue")
    def attr_value(self) -> builtins.str:
        """
        Attribute Value.Provide Tag value if the rule is based on a tag. Provide resource property value if the rule is based on a resource property.
        """
        return pulumi.get(self, "attr_value")


@pulumi.output_type
class GetInventoryRecordsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        """
        :param builtins.str name: Name of the inventory target property.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the inventory target property.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetInventoryRecordsInventoryRecordCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetInventoryRecordsInventoryRecordCollectionItemResult']):
        """
        :param Sequence['GetInventoryRecordsInventoryRecordCollectionItemArgs'] items: List of inventory targets
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetInventoryRecordsInventoryRecordCollectionItemResult']:
        """
        List of inventory targets
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetInventoryRecordsInventoryRecordCollectionItemResult(dict):
    def __init__(__self__, *,
                 architecture: builtins.str,
                 compartment_id: builtins.str,
                 components: Sequence['outputs.GetInventoryRecordsInventoryRecordCollectionItemComponentResult'],
                 installed_patches: Sequence['outputs.GetInventoryRecordsInventoryRecordCollectionItemInstalledPatchResult'],
                 os_type: builtins.str,
                 properties: Sequence['outputs.GetInventoryRecordsInventoryRecordCollectionItemPropertyResult'],
                 state: builtins.str,
                 target_id: builtins.str,
                 target_name: builtins.str,
                 target_product_id: builtins.str,
                 target_product_name: builtins.str,
                 target_resource_id: builtins.str,
                 target_resource_name: builtins.str,
                 time_created: builtins.str,
                 time_updated: builtins.str,
                 version: builtins.str):
        """
        :param builtins.str architecture: Architecture of the resource associated with the target
        :param builtins.str compartment_id: The ID of the compartment in which to list resources.
        :param Sequence['GetInventoryRecordsInventoryRecordCollectionItemComponentArgs'] components: List of target components
        :param Sequence['GetInventoryRecordsInventoryRecordCollectionItemInstalledPatchArgs'] installed_patches: List of details on the patches currently installed on the target
        :param builtins.str os_type: OS installed on the resource associated with the target
        :param Sequence['GetInventoryRecordsInventoryRecordCollectionItemPropertyArgs'] properties: List of target properties
        :param builtins.str state: The current state of the Inventory target.
        :param builtins.str target_id: The OCID of the Inventory target.
        :param builtins.str target_name: Name of the target
        :param builtins.str target_product_id: OCID of the product installed at the target path
        :param builtins.str target_product_name: Name of the product installed at the target path
        :param builtins.str target_resource_id: OCID of the resource associated with the target
        :param builtins.str target_resource_name: Name of the resource associated with the target
        :param builtins.str time_created: The time this resource was created. An RFC3339 formatted datetime string.
        :param builtins.str time_updated: The time this resource was last updated. An RFC3339 formatted datetime string.
        :param builtins.str version: Version of the product on the target
        """
        pulumi.set(__self__, "architecture", architecture)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "components", components)
        pulumi.set(__self__, "installed_patches", installed_patches)
        pulumi.set(__self__, "os_type", os_type)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "target_id", target_id)
        pulumi.set(__self__, "target_name", target_name)
        pulumi.set(__self__, "target_product_id", target_product_id)
        pulumi.set(__self__, "target_product_name", target_product_name)
        pulumi.set(__self__, "target_resource_id", target_resource_id)
        pulumi.set(__self__, "target_resource_name", target_resource_name)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def architecture(self) -> builtins.str:
        """
        Architecture of the resource associated with the target
        """
        return pulumi.get(self, "architecture")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        The ID of the compartment in which to list resources.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def components(self) -> Sequence['outputs.GetInventoryRecordsInventoryRecordCollectionItemComponentResult']:
        """
        List of target components
        """
        return pulumi.get(self, "components")

    @property
    @pulumi.getter(name="installedPatches")
    def installed_patches(self) -> Sequence['outputs.GetInventoryRecordsInventoryRecordCollectionItemInstalledPatchResult']:
        """
        List of details on the patches currently installed on the target
        """
        return pulumi.get(self, "installed_patches")

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> builtins.str:
        """
        OS installed on the resource associated with the target
        """
        return pulumi.get(self, "os_type")

    @property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetInventoryRecordsInventoryRecordCollectionItemPropertyResult']:
        """
        List of target properties
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        The current state of the Inventory target.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> builtins.str:
        """
        The OCID of the Inventory target.
        """
        return pulumi.get(self, "target_id")

    @property
    @pulumi.getter(name="targetName")
    def target_name(self) -> builtins.str:
        """
        Name of the target
        """
        return pulumi.get(self, "target_name")

    @property
    @pulumi.getter(name="targetProductId")
    def target_product_id(self) -> builtins.str:
        """
        OCID of the product installed at the target path
        """
        return pulumi.get(self, "target_product_id")

    @property
    @pulumi.getter(name="targetProductName")
    def target_product_name(self) -> builtins.str:
        """
        Name of the product installed at the target path
        """
        return pulumi.get(self, "target_product_name")

    @property
    @pulumi.getter(name="targetResourceId")
    def target_resource_id(self) -> builtins.str:
        """
        OCID of the resource associated with the target
        """
        return pulumi.get(self, "target_resource_id")

    @property
    @pulumi.getter(name="targetResourceName")
    def target_resource_name(self) -> builtins.str:
        """
        Name of the resource associated with the target
        """
        return pulumi.get(self, "target_resource_name")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The time this resource was created. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> builtins.str:
        """
        The time this resource was last updated. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def version(self) -> builtins.str:
        """
        Version of the product on the target
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetInventoryRecordsInventoryRecordCollectionItemComponentResult(dict):
    def __init__(__self__, *,
                 component_name: builtins.str,
                 component_path: builtins.str,
                 component_version: builtins.str,
                 properties: Sequence['outputs.GetInventoryRecordsInventoryRecordCollectionItemComponentPropertyResult']):
        """
        :param builtins.str component_name: Name of the target component
        :param builtins.str component_path: Path of the component
        :param builtins.str component_version: Version of the target component
        :param Sequence['GetInventoryRecordsInventoryRecordCollectionItemComponentPropertyArgs'] properties: List of target properties
        """
        pulumi.set(__self__, "component_name", component_name)
        pulumi.set(__self__, "component_path", component_path)
        pulumi.set(__self__, "component_version", component_version)
        pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="componentName")
    def component_name(self) -> builtins.str:
        """
        Name of the target component
        """
        return pulumi.get(self, "component_name")

    @property
    @pulumi.getter(name="componentPath")
    def component_path(self) -> builtins.str:
        """
        Path of the component
        """
        return pulumi.get(self, "component_path")

    @property
    @pulumi.getter(name="componentVersion")
    def component_version(self) -> builtins.str:
        """
        Version of the target component
        """
        return pulumi.get(self, "component_version")

    @property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetInventoryRecordsInventoryRecordCollectionItemComponentPropertyResult']:
        """
        List of target properties
        """
        return pulumi.get(self, "properties")


@pulumi.output_type
class GetInventoryRecordsInventoryRecordCollectionItemComponentPropertyResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str name: Name of the inventory target property.
        :param builtins.str value: Value of the inventory target property.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the inventory target property.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        Value of the inventory target property.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetInventoryRecordsInventoryRecordCollectionItemInstalledPatchResult(dict):
    def __init__(__self__, *,
                 patch_description: builtins.str,
                 patch_id: builtins.str,
                 patch_name: builtins.str,
                 patch_type: builtins.str,
                 time_applied: builtins.str):
        """
        :param builtins.str patch_description: Description for the installed patch
        :param builtins.str patch_id: OCID of the installed patch
        :param builtins.str patch_name: Name of the installed patch
        :param builtins.str patch_type: Type of patch applied
        :param builtins.str time_applied: Date on which the patch was applied to the target
        """
        pulumi.set(__self__, "patch_description", patch_description)
        pulumi.set(__self__, "patch_id", patch_id)
        pulumi.set(__self__, "patch_name", patch_name)
        pulumi.set(__self__, "patch_type", patch_type)
        pulumi.set(__self__, "time_applied", time_applied)

    @property
    @pulumi.getter(name="patchDescription")
    def patch_description(self) -> builtins.str:
        """
        Description for the installed patch
        """
        return pulumi.get(self, "patch_description")

    @property
    @pulumi.getter(name="patchId")
    def patch_id(self) -> builtins.str:
        """
        OCID of the installed patch
        """
        return pulumi.get(self, "patch_id")

    @property
    @pulumi.getter(name="patchName")
    def patch_name(self) -> builtins.str:
        """
        Name of the installed patch
        """
        return pulumi.get(self, "patch_name")

    @property
    @pulumi.getter(name="patchType")
    def patch_type(self) -> builtins.str:
        """
        Type of patch applied
        """
        return pulumi.get(self, "patch_type")

    @property
    @pulumi.getter(name="timeApplied")
    def time_applied(self) -> builtins.str:
        """
        Date on which the patch was applied to the target
        """
        return pulumi.get(self, "time_applied")


@pulumi.output_type
class GetInventoryRecordsInventoryRecordCollectionItemPropertyResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str name: Name of the inventory target property.
        :param builtins.str value: Value of the inventory target property.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the inventory target property.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        Value of the inventory target property.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetInventoryResourcesFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetInventoryResourcesInventoryResourceCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetInventoryResourcesInventoryResourceCollectionItemResult']):
        """
        :param Sequence['GetInventoryResourcesInventoryResourceCollectionItemArgs'] items: List of InventoryResources.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetInventoryResourcesInventoryResourceCollectionItemResult']:
        """
        List of InventoryResources.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetInventoryResourcesInventoryResourceCollectionItemResult(dict):
    def __init__(__self__, *,
                 availability_domain: builtins.str,
                 compartment_id: builtins.str,
                 defined_tags: Mapping[str, builtins.str],
                 display_name: builtins.str,
                 freeform_tags: Mapping[str, builtins.str],
                 id: builtins.str,
                 lifecycle_details: builtins.str,
                 resource_compartment_id: builtins.str,
                 resource_region: builtins.str,
                 state: builtins.str,
                 system_tags: Mapping[str, builtins.str],
                 type: builtins.str):
        """
        :param builtins.str availability_domain: Availability Domain of the resource.
        :param builtins.str compartment_id: A filter to return only resources whose base Compartment ID(TenancyId) matches the given base Compartment ID.
        :param Mapping[str, builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param builtins.str display_name: A filter to return only resources that match the entire display name given.
        :param Mapping[str, builtins.str] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param builtins.str id: The OCID of the resource.
        :param builtins.str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param builtins.str resource_compartment_id: A filter to return only resources whose resource Compartment ID matches the given resource Compartment ID.
        :param builtins.str resource_region: Resource Region
        :param builtins.str state: A filter to return only resources their lifecycleState matches the given lifecycleState.
        :param Mapping[str, builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param builtins.str type: Type of the Resource.
        """
        pulumi.set(__self__, "availability_domain", availability_domain)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "resource_compartment_id", resource_compartment_id)
        pulumi.set(__self__, "resource_region", resource_region)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> builtins.str:
        """
        Availability Domain of the resource.
        """
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        A filter to return only resources whose base Compartment ID(TenancyId) matches the given base Compartment ID.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The OCID of the resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> builtins.str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="resourceCompartmentId")
    def resource_compartment_id(self) -> builtins.str:
        """
        A filter to return only resources whose resource Compartment ID matches the given resource Compartment ID.
        """
        return pulumi.get(self, "resource_compartment_id")

    @property
    @pulumi.getter(name="resourceRegion")
    def resource_region(self) -> builtins.str:
        """
        Resource Region
        """
        return pulumi.get(self, "resource_region")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        A filter to return only resources their lifecycleState matches the given lifecycleState.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Type of the Resource.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetMaintenanceWindowsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetMaintenanceWindowsMaintenanceWindowCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetMaintenanceWindowsMaintenanceWindowCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetMaintenanceWindowsMaintenanceWindowCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetMaintenanceWindowsMaintenanceWindowCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: builtins.str,
                 defined_tags: Mapping[str, builtins.str],
                 description: builtins.str,
                 display_name: builtins.str,
                 duration: builtins.str,
                 freeform_tags: Mapping[str, builtins.str],
                 id: builtins.str,
                 is_outage: builtins.bool,
                 is_recurring: builtins.bool,
                 lifecycle_details: builtins.str,
                 recurrences: builtins.str,
                 resource_region: builtins.str,
                 state: builtins.str,
                 system_tags: Mapping[str, builtins.str],
                 time_created: builtins.str,
                 time_schedule_start: builtins.str,
                 time_updated: builtins.str):
        """
        :param builtins.str compartment_id: The ID of the compartment in which to list resources. Empty only if the resource OCID query param is not specified.
        :param Mapping[str, builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param builtins.str description: A user-friendly description. To provide some insight about the resource. Avoid entering confidential information.
        :param builtins.str display_name: A filter to return only resources that match the entire display name given.
        :param builtins.str duration: Duration of the maintenance window. Specify how long the maintenance window remains open.
        :param Mapping[str, builtins.str] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param builtins.str id: Unique identifier or OCID for listing a single maintenance window by id. Either compartmentId or id must be provided.
        :param builtins.bool is_outage: Does the maintenenace window cause outage? An outage indicates whether a maintenance window can consider operations that require downtime. It means a period when the application is not accessible.
        :param builtins.bool is_recurring: Is this a recurring maintenance window?
        :param builtins.str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param builtins.str recurrences: Recurrence rule specification if maintenance window recurring. Specify the frequency of running the maintenance window.
        :param builtins.str resource_region: Associated region
        :param builtins.str state: A filter to return only resources whose lifecycleState matches the given lifecycleState.
        :param Mapping[str, builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param builtins.str time_created: The time this resource was created. An RFC3339 formatted datetime string.
        :param builtins.str time_schedule_start: Specify the date and time of the day that the maintenance window starts.
        :param builtins.str time_updated: The time this resource was last updated. An RFC3339 formatted datetime string.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_outage", is_outage)
        pulumi.set(__self__, "is_recurring", is_recurring)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "recurrences", recurrences)
        pulumi.set(__self__, "resource_region", resource_region)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_schedule_start", time_schedule_start)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        The ID of the compartment in which to list resources. Empty only if the resource OCID query param is not specified.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        A user-friendly description. To provide some insight about the resource. Avoid entering confidential information.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def duration(self) -> builtins.str:
        """
        Duration of the maintenance window. Specify how long the maintenance window remains open.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Unique identifier or OCID for listing a single maintenance window by id. Either compartmentId or id must be provided.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isOutage")
    def is_outage(self) -> builtins.bool:
        """
        Does the maintenenace window cause outage? An outage indicates whether a maintenance window can consider operations that require downtime. It means a period when the application is not accessible.
        """
        return pulumi.get(self, "is_outage")

    @property
    @pulumi.getter(name="isRecurring")
    def is_recurring(self) -> builtins.bool:
        """
        Is this a recurring maintenance window?
        """
        return pulumi.get(self, "is_recurring")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> builtins.str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def recurrences(self) -> builtins.str:
        """
        Recurrence rule specification if maintenance window recurring. Specify the frequency of running the maintenance window.
        """
        return pulumi.get(self, "recurrences")

    @property
    @pulumi.getter(name="resourceRegion")
    def resource_region(self) -> builtins.str:
        """
        Associated region
        """
        return pulumi.get(self, "resource_region")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        A filter to return only resources whose lifecycleState matches the given lifecycleState.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The time this resource was created. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeScheduleStart")
    def time_schedule_start(self) -> builtins.str:
        """
        Specify the date and time of the day that the maintenance window starts.
        """
        return pulumi.get(self, "time_schedule_start")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> builtins.str:
        """
        The time this resource was last updated. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetManagedEntityCountsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedEntityCountsManagedEntityAggregationCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetManagedEntityCountsManagedEntityAggregationCollectionItemResult']):
        """
        :param Sequence['GetManagedEntityCountsManagedEntityAggregationCollectionItemArgs'] items: List of ManagedEntityAggregation objects.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetManagedEntityCountsManagedEntityAggregationCollectionItemResult']:
        """
        List of ManagedEntityAggregation objects.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedEntityCountsManagedEntityAggregationCollectionItemResult(dict):
    def __init__(__self__, *,
                 dimensions: Sequence['outputs.GetManagedEntityCountsManagedEntityAggregationCollectionItemDimensionResult'],
                 managed_entity_count_count: builtins.int):
        """
        :param Sequence['GetManagedEntityCountsManagedEntityAggregationCollectionItemDimensionArgs'] dimensions: Aggregated summary information for ComplianceRecord
        :param builtins.int managed_entity_count_count: Count of managed entities in a compartment.
        """
        pulumi.set(__self__, "dimensions", dimensions)
        pulumi.set(__self__, "managed_entity_count_count", managed_entity_count_count)

    @property
    @pulumi.getter
    def dimensions(self) -> Sequence['outputs.GetManagedEntityCountsManagedEntityAggregationCollectionItemDimensionResult']:
        """
        Aggregated summary information for ComplianceRecord
        """
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter(name="managedEntityCountCount")
    def managed_entity_count_count(self) -> builtins.int:
        """
        Count of managed entities in a compartment.
        """
        return pulumi.get(self, "managed_entity_count_count")


@pulumi.output_type
class GetManagedEntityCountsManagedEntityAggregationCollectionItemDimensionResult(dict):
    def __init__(__self__, *,
                 entity: builtins.str):
        """
        :param builtins.str entity: Level at which the compliance is calculated.
        """
        pulumi.set(__self__, "entity", entity)

    @property
    @pulumi.getter
    def entity(self) -> builtins.str:
        """
        Level at which the compliance is calculated.
        """
        return pulumi.get(self, "entity")


@pulumi.output_type
class GetOnboardingPoliciesFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetOnboardingPoliciesOnboardingPolicyCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetOnboardingPoliciesOnboardingPolicyCollectionItemResult']):
        """
        :param Sequence['GetOnboardingPoliciesOnboardingPolicyCollectionItemArgs'] items: List of Fleet Application Management Onboard policies.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetOnboardingPoliciesOnboardingPolicyCollectionItemResult']:
        """
        List of Fleet Application Management Onboard policies.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetOnboardingPoliciesOnboardingPolicyCollectionItemResult(dict):
    def __init__(__self__, *,
                 id: builtins.str,
                 statements: Sequence[builtins.str],
                 system_tags: Mapping[str, builtins.str],
                 time_created: builtins.str,
                 time_updated: builtins.str):
        """
        :param builtins.str id: The unique id of the resource.
        :param Sequence[builtins.str] statements: Policy statements.
        :param Mapping[str, builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param builtins.str time_created: The time this resource was created. An RFC3339 formatted datetime string.
        :param builtins.str time_updated: The time this resource was last updated. An RFC3339 formatted datetime string.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "statements", statements)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The unique id of the resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def statements(self) -> Sequence[builtins.str]:
        """
        Policy statements.
        """
        return pulumi.get(self, "statements")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The time this resource was created. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> builtins.str:
        """
        The time this resource was last updated. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetOnboardingsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetOnboardingsOnboardingCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetOnboardingsOnboardingCollectionItemResult']):
        """
        :param Sequence['GetOnboardingsOnboardingCollectionItemArgs'] items: List of Fleet Application Management Onboardings.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetOnboardingsOnboardingCollectionItemResult']:
        """
        List of Fleet Application Management Onboardings.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetOnboardingsOnboardingCollectionItemResult(dict):
    def __init__(__self__, *,
                 applied_policies: Sequence['outputs.GetOnboardingsOnboardingCollectionItemAppliedPolicyResult'],
                 compartment_id: builtins.str,
                 defined_tags: Mapping[str, builtins.str],
                 discovery_frequency: builtins.str,
                 freeform_tags: Mapping[str, builtins.str],
                 id: builtins.str,
                 is_cost_tracking_tag_enabled: builtins.bool,
                 is_fams_tag_enabled: builtins.bool,
                 resource_region: builtins.str,
                 state: builtins.str,
                 system_tags: Mapping[str, builtins.str],
                 time_created: builtins.str,
                 time_updated: builtins.str,
                 version: builtins.str):
        """
        :param Sequence['GetOnboardingsOnboardingCollectionItemAppliedPolicyArgs'] applied_policies: Summary of the Fleet Application Management Onboard Policy.
        :param builtins.str compartment_id: The ID of the compartment in which to list resources. Empty only if the resource OCID query param is not specified.
        :param Mapping[str, builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param builtins.str discovery_frequency: Provide discovery frequency.
        :param Mapping[str, builtins.str] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param builtins.str id: Unique identifier or OCID for listing a single onboarding by id. Either compartmentId or id must be provided.
        :param builtins.bool is_cost_tracking_tag_enabled: A value determining if the cost tracking tag is enabled or not. Allow Fleet Application Management to tag resources with cost tracking tag using "Oracle$FAMS-Tags.FAMSManaged" tag.
        :param builtins.bool is_fams_tag_enabled: A value determining if the Fleet Application Management tagging is enabled or not. Allow Fleet Application Management to tag resources with fleet name using "Oracle$FAMS-Tags.FleetName" tag.
        :param builtins.str resource_region: Associated region
        :param builtins.str state: A filter to return only resources whose lifecycleState matches the given lifecycleState.
        :param Mapping[str, builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param builtins.str time_created: The time this resource was created. An RFC3339 formatted datetime string.
        :param builtins.str time_updated: The time this resource was last updated. An RFC3339 formatted datetime string.
        :param builtins.str version: The version of Fleet Application Management that the tenant is onboarded to.
        """
        pulumi.set(__self__, "applied_policies", applied_policies)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "discovery_frequency", discovery_frequency)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_cost_tracking_tag_enabled", is_cost_tracking_tag_enabled)
        pulumi.set(__self__, "is_fams_tag_enabled", is_fams_tag_enabled)
        pulumi.set(__self__, "resource_region", resource_region)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="appliedPolicies")
    def applied_policies(self) -> Sequence['outputs.GetOnboardingsOnboardingCollectionItemAppliedPolicyResult']:
        """
        Summary of the Fleet Application Management Onboard Policy.
        """
        return pulumi.get(self, "applied_policies")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        The ID of the compartment in which to list resources. Empty only if the resource OCID query param is not specified.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="discoveryFrequency")
    def discovery_frequency(self) -> builtins.str:
        """
        Provide discovery frequency.
        """
        return pulumi.get(self, "discovery_frequency")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Unique identifier or OCID for listing a single onboarding by id. Either compartmentId or id must be provided.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isCostTrackingTagEnabled")
    def is_cost_tracking_tag_enabled(self) -> builtins.bool:
        """
        A value determining if the cost tracking tag is enabled or not. Allow Fleet Application Management to tag resources with cost tracking tag using "Oracle$FAMS-Tags.FAMSManaged" tag.
        """
        return pulumi.get(self, "is_cost_tracking_tag_enabled")

    @property
    @pulumi.getter(name="isFamsTagEnabled")
    def is_fams_tag_enabled(self) -> builtins.bool:
        """
        A value determining if the Fleet Application Management tagging is enabled or not. Allow Fleet Application Management to tag resources with fleet name using "Oracle$FAMS-Tags.FleetName" tag.
        """
        return pulumi.get(self, "is_fams_tag_enabled")

    @property
    @pulumi.getter(name="resourceRegion")
    def resource_region(self) -> builtins.str:
        """
        Associated region
        """
        return pulumi.get(self, "resource_region")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        A filter to return only resources whose lifecycleState matches the given lifecycleState.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The time this resource was created. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> builtins.str:
        """
        The time this resource was last updated. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def version(self) -> builtins.str:
        """
        The version of Fleet Application Management that the tenant is onboarded to.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetOnboardingsOnboardingCollectionItemAppliedPolicyResult(dict):
    def __init__(__self__, *,
                 id: builtins.str,
                 statements: Sequence[builtins.str],
                 system_tags: Mapping[str, builtins.str],
                 time_created: builtins.str,
                 time_updated: builtins.str):
        """
        :param builtins.str id: Unique identifier or OCID for listing a single onboarding by id. Either compartmentId or id must be provided.
        :param Sequence[builtins.str] statements: Policy statements.
        :param Mapping[str, builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param builtins.str time_created: The time this resource was created. An RFC3339 formatted datetime string.
        :param builtins.str time_updated: The time this resource was last updated. An RFC3339 formatted datetime string.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "statements", statements)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Unique identifier or OCID for listing a single onboarding by id. Either compartmentId or id must be provided.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def statements(self) -> Sequence[builtins.str]:
        """
        Policy statements.
        """
        return pulumi.get(self, "statements")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The time this resource was created. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> builtins.str:
        """
        The time this resource was last updated. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetPatchArtifactDetailResult(dict):
    def __init__(__self__, *,
                 artifact: Sequence['outputs.GetPatchArtifactDetailArtifactResult'],
                 artifacts: Sequence['outputs.GetPatchArtifactDetailArtifactResult'],
                 category: builtins.str):
        """
        :param Sequence['GetPatchArtifactDetailArtifactArgs'] artifact: Patch artifact metadata Details which is common for all platforms.
        :param Sequence['GetPatchArtifactDetailArtifactArgs'] artifacts: Artifacts.
        :param builtins.str category: Artifact category details.
        """
        pulumi.set(__self__, "artifact", artifact)
        pulumi.set(__self__, "artifacts", artifacts)
        pulumi.set(__self__, "category", category)

    @property
    @pulumi.getter
    def artifact(self) -> Sequence['outputs.GetPatchArtifactDetailArtifactResult']:
        """
        Patch artifact metadata Details which is common for all platforms.
        """
        return pulumi.get(self, "artifact")

    @property
    @pulumi.getter
    def artifacts(self) -> Sequence['outputs.GetPatchArtifactDetailArtifactResult']:
        """
        Artifacts.
        """
        return pulumi.get(self, "artifacts")

    @property
    @pulumi.getter
    def category(self) -> builtins.str:
        """
        Artifact category details.
        """
        return pulumi.get(self, "category")


@pulumi.output_type
class GetPatchArtifactDetailArtifactResult(dict):
    def __init__(__self__, *,
                 architecture: builtins.str,
                 contents: Sequence['outputs.GetPatchArtifactDetailArtifactContentResult'],
                 os_type: builtins.str):
        """
        :param builtins.str architecture: System architecture.
        :param Sequence['GetPatchArtifactDetailArtifactContentArgs'] contents: Content Source details.
        :param builtins.str os_type: The OS type the patch is applicable for.
        """
        pulumi.set(__self__, "architecture", architecture)
        pulumi.set(__self__, "contents", contents)
        pulumi.set(__self__, "os_type", os_type)

    @property
    @pulumi.getter
    def architecture(self) -> builtins.str:
        """
        System architecture.
        """
        return pulumi.get(self, "architecture")

    @property
    @pulumi.getter
    def contents(self) -> Sequence['outputs.GetPatchArtifactDetailArtifactContentResult']:
        """
        Content Source details.
        """
        return pulumi.get(self, "contents")

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> builtins.str:
        """
        The OS type the patch is applicable for.
        """
        return pulumi.get(self, "os_type")


@pulumi.output_type
class GetPatchArtifactDetailArtifactContentResult(dict):
    def __init__(__self__, *,
                 bucket: builtins.str,
                 checksum: builtins.str,
                 namespace: builtins.str,
                 object: builtins.str,
                 source_type: builtins.str):
        """
        :param builtins.str bucket: Bucket Name.
        :param builtins.str checksum: md5 checksum of the artifact.
        :param builtins.str namespace: Namespace.
        :param builtins.str object: Object Name.
        :param builtins.str source_type: Content Source type details.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "checksum", checksum)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter
    def bucket(self) -> builtins.str:
        """
        Bucket Name.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def checksum(self) -> builtins.str:
        """
        md5 checksum of the artifact.
        """
        return pulumi.get(self, "checksum")

    @property
    @pulumi.getter
    def namespace(self) -> builtins.str:
        """
        Namespace.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> builtins.str:
        """
        Object Name.
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> builtins.str:
        """
        Content Source type details.
        """
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetPatchDependentPatchResult(dict):
    def __init__(__self__, *,
                 id: builtins.str):
        """
        :param builtins.str id: The OCID of the resource.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The OCID of the resource.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetPatchPatchTypeResult(dict):
    def __init__(__self__, *,
                 platform_configuration_id: builtins.str):
        """
        :param builtins.str platform_configuration_id: PlatformConfiguration Id corresponding to the Product
        """
        pulumi.set(__self__, "platform_configuration_id", platform_configuration_id)

    @property
    @pulumi.getter(name="platformConfigurationId")
    def platform_configuration_id(self) -> builtins.str:
        """
        PlatformConfiguration Id corresponding to the Product
        """
        return pulumi.get(self, "platform_configuration_id")


@pulumi.output_type
class GetPatchProductResult(dict):
    def __init__(__self__, *,
                 platform_configuration_id: builtins.str,
                 version: builtins.str):
        """
        :param builtins.str platform_configuration_id: PlatformConfiguration Id corresponding to the Product
        :param builtins.str version: product version.
        """
        pulumi.set(__self__, "platform_configuration_id", platform_configuration_id)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="platformConfigurationId")
    def platform_configuration_id(self) -> builtins.str:
        """
        PlatformConfiguration Id corresponding to the Product
        """
        return pulumi.get(self, "platform_configuration_id")

    @property
    @pulumi.getter
    def version(self) -> builtins.str:
        """
        product version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetPatchesFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        """
        :param builtins.str name: A filter to return only resources that match the entire name given.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        A filter to return only resources that match the entire name given.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetPatchesPatchCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetPatchesPatchCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetPatchesPatchCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetPatchesPatchCollectionItemResult(dict):
    def __init__(__self__, *,
                 artifact_details: Sequence['outputs.GetPatchesPatchCollectionItemArtifactDetailResult'],
                 compartment_id: builtins.str,
                 defined_tags: Mapping[str, builtins.str],
                 dependent_patches: Sequence['outputs.GetPatchesPatchCollectionItemDependentPatchResult'],
                 description: builtins.str,
                 freeform_tags: Mapping[str, builtins.str],
                 id: builtins.str,
                 lifecycle_details: builtins.str,
                 name: builtins.str,
                 patch_types: Sequence['outputs.GetPatchesPatchCollectionItemPatchTypeResult'],
                 products: Sequence['outputs.GetPatchesPatchCollectionItemProductResult'],
                 resource_region: builtins.str,
                 severity: builtins.str,
                 state: builtins.str,
                 system_tags: Mapping[str, builtins.str],
                 time_created: builtins.str,
                 time_released: builtins.str,
                 time_updated: builtins.str,
                 type: builtins.str):
        """
        :param Sequence['GetPatchesPatchCollectionItemArtifactDetailArgs'] artifact_details: Patch artifact description and content details.
        :param builtins.str compartment_id: The ID of the compartment in which to list resources. Empty only if the resource OCID query param is not specified.
        :param Mapping[str, builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param Sequence['GetPatchesPatchCollectionItemDependentPatchArgs'] dependent_patches: Dependent Patches for this patch.
        :param builtins.str description: A user-friendly description. To provide some insight about the resource. Avoid entering confidential information.
        :param Mapping[str, builtins.str] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param builtins.str id: Unique identifier or OCID for listing a single Patch by id. Either compartmentId or id must be provided.
        :param builtins.str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param builtins.str name: A filter to return only resources that match the entire name given.
        :param Sequence['GetPatchesPatchCollectionItemPatchTypeArgs'] patch_types: Patch Type
        :param Sequence['GetPatchesPatchCollectionItemProductArgs'] products: Product
        :param builtins.str resource_region: Associated region
        :param builtins.str severity: Patch Severity.
        :param builtins.str state: The current state of the Patch.
        :param Mapping[str, builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param builtins.str time_created: The time this resource was created. An RFC3339 formatted datetime string.
        :param builtins.str time_released: Date when the patch was released.
        :param builtins.str time_updated: The time this resource was last updated. An RFC3339 formatted datetime string.
        :param builtins.str type: DefinedBy type.
        """
        pulumi.set(__self__, "artifact_details", artifact_details)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "dependent_patches", dependent_patches)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "patch_types", patch_types)
        pulumi.set(__self__, "products", products)
        pulumi.set(__self__, "resource_region", resource_region)
        pulumi.set(__self__, "severity", severity)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_released", time_released)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="artifactDetails")
    def artifact_details(self) -> Sequence['outputs.GetPatchesPatchCollectionItemArtifactDetailResult']:
        """
        Patch artifact description and content details.
        """
        return pulumi.get(self, "artifact_details")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        The ID of the compartment in which to list resources. Empty only if the resource OCID query param is not specified.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="dependentPatches")
    def dependent_patches(self) -> Sequence['outputs.GetPatchesPatchCollectionItemDependentPatchResult']:
        """
        Dependent Patches for this patch.
        """
        return pulumi.get(self, "dependent_patches")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        A user-friendly description. To provide some insight about the resource. Avoid entering confidential information.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Unique identifier or OCID for listing a single Patch by id. Either compartmentId or id must be provided.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> builtins.str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        A filter to return only resources that match the entire name given.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="patchTypes")
    def patch_types(self) -> Sequence['outputs.GetPatchesPatchCollectionItemPatchTypeResult']:
        """
        Patch Type
        """
        return pulumi.get(self, "patch_types")

    @property
    @pulumi.getter
    def products(self) -> Sequence['outputs.GetPatchesPatchCollectionItemProductResult']:
        """
        Product
        """
        return pulumi.get(self, "products")

    @property
    @pulumi.getter(name="resourceRegion")
    def resource_region(self) -> builtins.str:
        """
        Associated region
        """
        return pulumi.get(self, "resource_region")

    @property
    @pulumi.getter
    def severity(self) -> builtins.str:
        """
        Patch Severity.
        """
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        The current state of the Patch.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The time this resource was created. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeReleased")
    def time_released(self) -> builtins.str:
        """
        Date when the patch was released.
        """
        return pulumi.get(self, "time_released")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> builtins.str:
        """
        The time this resource was last updated. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        DefinedBy type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetPatchesPatchCollectionItemArtifactDetailResult(dict):
    def __init__(__self__, *,
                 artifact: Sequence['outputs.GetPatchesPatchCollectionItemArtifactDetailArtifactResult'],
                 artifacts: Sequence['outputs.GetPatchesPatchCollectionItemArtifactDetailArtifactResult'],
                 category: builtins.str):
        """
        :param Sequence['GetPatchesPatchCollectionItemArtifactDetailArtifactArgs'] artifact: Patch artifact metadata Details which is common for all platforms.
        :param Sequence['GetPatchesPatchCollectionItemArtifactDetailArtifactArgs'] artifacts: Artifacts.
        :param builtins.str category: Artifact category details.
        """
        pulumi.set(__self__, "artifact", artifact)
        pulumi.set(__self__, "artifacts", artifacts)
        pulumi.set(__self__, "category", category)

    @property
    @pulumi.getter
    def artifact(self) -> Sequence['outputs.GetPatchesPatchCollectionItemArtifactDetailArtifactResult']:
        """
        Patch artifact metadata Details which is common for all platforms.
        """
        return pulumi.get(self, "artifact")

    @property
    @pulumi.getter
    def artifacts(self) -> Sequence['outputs.GetPatchesPatchCollectionItemArtifactDetailArtifactResult']:
        """
        Artifacts.
        """
        return pulumi.get(self, "artifacts")

    @property
    @pulumi.getter
    def category(self) -> builtins.str:
        """
        Artifact category details.
        """
        return pulumi.get(self, "category")


@pulumi.output_type
class GetPatchesPatchCollectionItemArtifactDetailArtifactResult(dict):
    def __init__(__self__, *,
                 architecture: builtins.str,
                 contents: Sequence['outputs.GetPatchesPatchCollectionItemArtifactDetailArtifactContentResult'],
                 os_type: builtins.str):
        """
        :param builtins.str architecture: System architecture.
        :param Sequence['GetPatchesPatchCollectionItemArtifactDetailArtifactContentArgs'] contents: Content Source details.
        :param builtins.str os_type: The OS type the patch is applicable for.
        """
        pulumi.set(__self__, "architecture", architecture)
        pulumi.set(__self__, "contents", contents)
        pulumi.set(__self__, "os_type", os_type)

    @property
    @pulumi.getter
    def architecture(self) -> builtins.str:
        """
        System architecture.
        """
        return pulumi.get(self, "architecture")

    @property
    @pulumi.getter
    def contents(self) -> Sequence['outputs.GetPatchesPatchCollectionItemArtifactDetailArtifactContentResult']:
        """
        Content Source details.
        """
        return pulumi.get(self, "contents")

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> builtins.str:
        """
        The OS type the patch is applicable for.
        """
        return pulumi.get(self, "os_type")


@pulumi.output_type
class GetPatchesPatchCollectionItemArtifactDetailArtifactContentResult(dict):
    def __init__(__self__, *,
                 bucket: builtins.str,
                 checksum: builtins.str,
                 namespace: builtins.str,
                 object: builtins.str,
                 source_type: builtins.str):
        """
        :param builtins.str bucket: Bucket Name.
        :param builtins.str checksum: md5 checksum of the artifact.
        :param builtins.str namespace: Namespace.
        :param builtins.str object: Object Name.
        :param builtins.str source_type: Content Source type details.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "checksum", checksum)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter
    def bucket(self) -> builtins.str:
        """
        Bucket Name.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def checksum(self) -> builtins.str:
        """
        md5 checksum of the artifact.
        """
        return pulumi.get(self, "checksum")

    @property
    @pulumi.getter
    def namespace(self) -> builtins.str:
        """
        Namespace.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> builtins.str:
        """
        Object Name.
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> builtins.str:
        """
        Content Source type details.
        """
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetPatchesPatchCollectionItemDependentPatchResult(dict):
    def __init__(__self__, *,
                 id: builtins.str):
        """
        :param builtins.str id: Unique identifier or OCID for listing a single Patch by id. Either compartmentId or id must be provided.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Unique identifier or OCID for listing a single Patch by id. Either compartmentId or id must be provided.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetPatchesPatchCollectionItemPatchTypeResult(dict):
    def __init__(__self__, *,
                 platform_configuration_id: builtins.str):
        """
        :param builtins.str platform_configuration_id: PlatformConfiguration Id corresponding to the Product
        """
        pulumi.set(__self__, "platform_configuration_id", platform_configuration_id)

    @property
    @pulumi.getter(name="platformConfigurationId")
    def platform_configuration_id(self) -> builtins.str:
        """
        PlatformConfiguration Id corresponding to the Product
        """
        return pulumi.get(self, "platform_configuration_id")


@pulumi.output_type
class GetPatchesPatchCollectionItemProductResult(dict):
    def __init__(__self__, *,
                 platform_configuration_id: builtins.str,
                 version: builtins.str):
        """
        :param builtins.str platform_configuration_id: PlatformConfiguration Id corresponding to the Product
        :param builtins.str version: Product version.
        """
        pulumi.set(__self__, "platform_configuration_id", platform_configuration_id)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="platformConfigurationId")
    def platform_configuration_id(self) -> builtins.str:
        """
        PlatformConfiguration Id corresponding to the Product
        """
        return pulumi.get(self, "platform_configuration_id")

    @property
    @pulumi.getter
    def version(self) -> builtins.str:
        """
        Product version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetPlatformConfigurationConfigCategoryDetailResult(dict):
    def __init__(__self__, *,
                 compatible_products: Sequence['outputs.GetPlatformConfigurationConfigCategoryDetailCompatibleProductResult'],
                 components: Sequence[builtins.str],
                 config_category: builtins.str,
                 credentials: Sequence['outputs.GetPlatformConfigurationConfigCategoryDetailCredentialResult'],
                 instance_id: builtins.str,
                 instance_name: builtins.str,
                 patch_types: Sequence['outputs.GetPlatformConfigurationConfigCategoryDetailPatchTypeResult'],
                 products: Sequence['outputs.GetPlatformConfigurationConfigCategoryDetailProductResult'],
                 sub_category_details: Sequence['outputs.GetPlatformConfigurationConfigCategoryDetailSubCategoryDetailResult'],
                 versions: Sequence[builtins.str]):
        """
        :param Sequence['GetPlatformConfigurationConfigCategoryDetailCompatibleProductArgs'] compatible_products: Products compatible with this Product. Provide products from the list of other products you have created that are compatible with the present one
        :param Sequence[builtins.str] components: Various components of the Product. For example:The administration server or node manager can be the components of the Oracle WebLogic Application server. Forms server or concurrent manager can be the components of the Oracle E-Business Suite.
        :param builtins.str config_category: Category of configuration
        :param Sequence['GetPlatformConfigurationConfigCategoryDetailCredentialArgs'] credentials: OCID for the Credential name to be associated with the Product Stack. These are useful for target discovery or lifecycle management activities, for example, Oracle WebLogic admin credentials for Oracle WebLogic Application server.
        :param builtins.str instance_id: The OCID of the resource.
        :param builtins.str instance_name: A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        :param Sequence['GetPlatformConfigurationConfigCategoryDetailPatchTypeArgs'] patch_types: Patch Types associated with this Product Stack which will be considered as Product.
        :param Sequence['GetPlatformConfigurationConfigCategoryDetailProductArgs'] products: Products that belong to the stack. For example, Oracle WebLogic and Java for the Oracle Fusion Middleware product stack.
        :param Sequence['GetPlatformConfigurationConfigCategoryDetailSubCategoryDetailArgs'] sub_category_details: ProductStack Config Category Details.
        :param Sequence[builtins.str] versions: Versions associated with the PRODUCT .
        """
        pulumi.set(__self__, "compatible_products", compatible_products)
        pulumi.set(__self__, "components", components)
        pulumi.set(__self__, "config_category", config_category)
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "patch_types", patch_types)
        pulumi.set(__self__, "products", products)
        pulumi.set(__self__, "sub_category_details", sub_category_details)
        pulumi.set(__self__, "versions", versions)

    @property
    @pulumi.getter(name="compatibleProducts")
    def compatible_products(self) -> Sequence['outputs.GetPlatformConfigurationConfigCategoryDetailCompatibleProductResult']:
        """
        Products compatible with this Product. Provide products from the list of other products you have created that are compatible with the present one
        """
        return pulumi.get(self, "compatible_products")

    @property
    @pulumi.getter
    def components(self) -> Sequence[builtins.str]:
        """
        Various components of the Product. For example:The administration server or node manager can be the components of the Oracle WebLogic Application server. Forms server or concurrent manager can be the components of the Oracle E-Business Suite.
        """
        return pulumi.get(self, "components")

    @property
    @pulumi.getter(name="configCategory")
    def config_category(self) -> builtins.str:
        """
        Category of configuration
        """
        return pulumi.get(self, "config_category")

    @property
    @pulumi.getter
    def credentials(self) -> Sequence['outputs.GetPlatformConfigurationConfigCategoryDetailCredentialResult']:
        """
        OCID for the Credential name to be associated with the Product Stack. These are useful for target discovery or lifecycle management activities, for example, Oracle WebLogic admin credentials for Oracle WebLogic Application server.
        """
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> builtins.str:
        """
        The OCID of the resource.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> builtins.str:
        """
        A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="patchTypes")
    def patch_types(self) -> Sequence['outputs.GetPlatformConfigurationConfigCategoryDetailPatchTypeResult']:
        """
        Patch Types associated with this Product Stack which will be considered as Product.
        """
        return pulumi.get(self, "patch_types")

    @property
    @pulumi.getter
    def products(self) -> Sequence['outputs.GetPlatformConfigurationConfigCategoryDetailProductResult']:
        """
        Products that belong to the stack. For example, Oracle WebLogic and Java for the Oracle Fusion Middleware product stack.
        """
        return pulumi.get(self, "products")

    @property
    @pulumi.getter(name="subCategoryDetails")
    def sub_category_details(self) -> Sequence['outputs.GetPlatformConfigurationConfigCategoryDetailSubCategoryDetailResult']:
        """
        ProductStack Config Category Details.
        """
        return pulumi.get(self, "sub_category_details")

    @property
    @pulumi.getter
    def versions(self) -> Sequence[builtins.str]:
        """
        Versions associated with the PRODUCT .
        """
        return pulumi.get(self, "versions")


@pulumi.output_type
class GetPlatformConfigurationConfigCategoryDetailCompatibleProductResult(dict):
    def __init__(__self__, *,
                 display_name: builtins.str,
                 id: builtins.str):
        """
        :param builtins.str display_name: A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        :param builtins.str id: The OCID of the resource.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The OCID of the resource.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetPlatformConfigurationConfigCategoryDetailCredentialResult(dict):
    def __init__(__self__, *,
                 display_name: builtins.str,
                 id: builtins.str):
        """
        :param builtins.str display_name: A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        :param builtins.str id: The OCID of the resource.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The OCID of the resource.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetPlatformConfigurationConfigCategoryDetailPatchTypeResult(dict):
    def __init__(__self__, *,
                 display_name: builtins.str,
                 id: builtins.str):
        """
        :param builtins.str display_name: A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        :param builtins.str id: The OCID of the resource.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The OCID of the resource.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetPlatformConfigurationConfigCategoryDetailProductResult(dict):
    def __init__(__self__, *,
                 display_name: builtins.str,
                 id: builtins.str):
        """
        :param builtins.str display_name: A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        :param builtins.str id: The OCID of the resource.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The OCID of the resource.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetPlatformConfigurationConfigCategoryDetailSubCategoryDetailResult(dict):
    def __init__(__self__, *,
                 components: Sequence[builtins.str],
                 credentials: Sequence['outputs.GetPlatformConfigurationConfigCategoryDetailSubCategoryDetailCredentialResult'],
                 patch_types: Sequence['outputs.GetPlatformConfigurationConfigCategoryDetailSubCategoryDetailPatchTypeResult'],
                 sub_category: builtins.str,
                 versions: Sequence[builtins.str]):
        """
        :param Sequence[builtins.str] components: Various components of the Product. For example:The administration server or node manager can be the components of the Oracle WebLogic Application server. Forms server or concurrent manager can be the components of the Oracle E-Business Suite.
        :param Sequence['GetPlatformConfigurationConfigCategoryDetailSubCategoryDetailCredentialArgs'] credentials: OCID for the Credential name to be associated with the Product Stack. These are useful for target discovery or lifecycle management activities, for example, Oracle WebLogic admin credentials for Oracle WebLogic Application server.
        :param Sequence['GetPlatformConfigurationConfigCategoryDetailSubCategoryDetailPatchTypeArgs'] patch_types: Patch Types associated with this Product Stack which will be considered as Product.
        :param builtins.str sub_category: SubCategory of Product Stack.
        :param Sequence[builtins.str] versions: Versions associated with the PRODUCT .
        """
        pulumi.set(__self__, "components", components)
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "patch_types", patch_types)
        pulumi.set(__self__, "sub_category", sub_category)
        pulumi.set(__self__, "versions", versions)

    @property
    @pulumi.getter
    def components(self) -> Sequence[builtins.str]:
        """
        Various components of the Product. For example:The administration server or node manager can be the components of the Oracle WebLogic Application server. Forms server or concurrent manager can be the components of the Oracle E-Business Suite.
        """
        return pulumi.get(self, "components")

    @property
    @pulumi.getter
    def credentials(self) -> Sequence['outputs.GetPlatformConfigurationConfigCategoryDetailSubCategoryDetailCredentialResult']:
        """
        OCID for the Credential name to be associated with the Product Stack. These are useful for target discovery or lifecycle management activities, for example, Oracle WebLogic admin credentials for Oracle WebLogic Application server.
        """
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="patchTypes")
    def patch_types(self) -> Sequence['outputs.GetPlatformConfigurationConfigCategoryDetailSubCategoryDetailPatchTypeResult']:
        """
        Patch Types associated with this Product Stack which will be considered as Product.
        """
        return pulumi.get(self, "patch_types")

    @property
    @pulumi.getter(name="subCategory")
    def sub_category(self) -> builtins.str:
        """
        SubCategory of Product Stack.
        """
        return pulumi.get(self, "sub_category")

    @property
    @pulumi.getter
    def versions(self) -> Sequence[builtins.str]:
        """
        Versions associated with the PRODUCT .
        """
        return pulumi.get(self, "versions")


@pulumi.output_type
class GetPlatformConfigurationConfigCategoryDetailSubCategoryDetailCredentialResult(dict):
    def __init__(__self__, *,
                 display_name: builtins.str,
                 id: builtins.str):
        """
        :param builtins.str display_name: A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        :param builtins.str id: The OCID of the resource.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The OCID of the resource.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetPlatformConfigurationConfigCategoryDetailSubCategoryDetailPatchTypeResult(dict):
    def __init__(__self__, *,
                 display_name: builtins.str,
                 id: builtins.str):
        """
        :param builtins.str display_name: A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        :param builtins.str id: The OCID of the resource.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The OCID of the resource.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetPlatformConfigurationsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetPlatformConfigurationsPlatformConfigurationCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetPlatformConfigurationsPlatformConfigurationCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetPlatformConfigurationsPlatformConfigurationCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetPlatformConfigurationsPlatformConfigurationCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: builtins.str,
                 config_category_details: Sequence['outputs.GetPlatformConfigurationsPlatformConfigurationCollectionItemConfigCategoryDetailResult'],
                 defined_tags: Mapping[str, builtins.str],
                 description: builtins.str,
                 display_name: builtins.str,
                 freeform_tags: Mapping[str, builtins.str],
                 id: builtins.str,
                 lifecycle_details: builtins.str,
                 resource_region: builtins.str,
                 state: builtins.str,
                 system_tags: Mapping[str, builtins.str],
                 time_created: builtins.str,
                 time_updated: builtins.str,
                 type: builtins.str):
        """
        :param builtins.str compartment_id: The ID of the compartment in which to list resources. Empty only if the resource OCID query param is not specified.
        :param Sequence['GetPlatformConfigurationsPlatformConfigurationCollectionItemConfigCategoryDetailArgs'] config_category_details: Config Category Details.
        :param Mapping[str, builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param builtins.str description: A user-friendly description. To provide some insight about the resource. Avoid entering confidential information.
        :param builtins.str display_name: A filter to return only resources that match the entire display name given.
        :param Mapping[str, builtins.str] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param builtins.str id: Unique identifier or OCID for listing a single Platform Configuration by id. Either compartmentId or id must be provided.
        :param builtins.str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param builtins.str resource_region: Associated region
        :param builtins.str state: A filter to return only resources their lifecycleState matches the given lifecycleState.
        :param Mapping[str, builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param builtins.str time_created: The time this resource was created. An RFC3339 formatted datetime string.
        :param builtins.str time_updated: The time this resource was last updated. An RFC3339 formatted datetime string.
        :param builtins.str type: A filter to return Platform Configurations whose type matches the given type.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "config_category_details", config_category_details)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "resource_region", resource_region)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        The ID of the compartment in which to list resources. Empty only if the resource OCID query param is not specified.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="configCategoryDetails")
    def config_category_details(self) -> Sequence['outputs.GetPlatformConfigurationsPlatformConfigurationCollectionItemConfigCategoryDetailResult']:
        """
        Config Category Details.
        """
        return pulumi.get(self, "config_category_details")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        A user-friendly description. To provide some insight about the resource. Avoid entering confidential information.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Unique identifier or OCID for listing a single Platform Configuration by id. Either compartmentId or id must be provided.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> builtins.str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="resourceRegion")
    def resource_region(self) -> builtins.str:
        """
        Associated region
        """
        return pulumi.get(self, "resource_region")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        A filter to return only resources their lifecycleState matches the given lifecycleState.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The time this resource was created. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> builtins.str:
        """
        The time this resource was last updated. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        A filter to return Platform Configurations whose type matches the given type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetPlatformConfigurationsPlatformConfigurationCollectionItemConfigCategoryDetailResult(dict):
    def __init__(__self__, *,
                 compatible_products: Sequence['outputs.GetPlatformConfigurationsPlatformConfigurationCollectionItemConfigCategoryDetailCompatibleProductResult'],
                 components: Sequence[builtins.str],
                 config_category: builtins.str,
                 credentials: Sequence['outputs.GetPlatformConfigurationsPlatformConfigurationCollectionItemConfigCategoryDetailCredentialResult'],
                 instance_id: builtins.str,
                 instance_name: builtins.str,
                 patch_types: Sequence['outputs.GetPlatformConfigurationsPlatformConfigurationCollectionItemConfigCategoryDetailPatchTypeResult'],
                 products: Sequence['outputs.GetPlatformConfigurationsPlatformConfigurationCollectionItemConfigCategoryDetailProductResult'],
                 sub_category_details: Sequence['outputs.GetPlatformConfigurationsPlatformConfigurationCollectionItemConfigCategoryDetailSubCategoryDetailResult'],
                 versions: Sequence[builtins.str]):
        """
        :param Sequence['GetPlatformConfigurationsPlatformConfigurationCollectionItemConfigCategoryDetailCompatibleProductArgs'] compatible_products: Products compatible with this Product. Provide products from the list of other products you have created that are compatible with the present one
        :param Sequence[builtins.str] components: Various components of the Product. For example:The administration server or node manager can be the components of the Oracle WebLogic Application server. Forms server or concurrent manager can be the components of the Oracle E-Business Suite.
        :param builtins.str config_category: Config Category
        :param Sequence['GetPlatformConfigurationsPlatformConfigurationCollectionItemConfigCategoryDetailCredentialArgs'] credentials: OCID for the Credential name to be associated with the Product Stack. These are useful for target discovery or lifecycle management activities, for example, Oracle WebLogic admin credentials for Oracle WebLogic Application server.
        :param builtins.str instance_id: The OCID of the resource.
        :param builtins.str instance_name: A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        :param Sequence['GetPlatformConfigurationsPlatformConfigurationCollectionItemConfigCategoryDetailPatchTypeArgs'] patch_types: Patch Types associated with this Product Stack which will be considered as Product.
        :param Sequence['GetPlatformConfigurationsPlatformConfigurationCollectionItemConfigCategoryDetailProductArgs'] products: Products that belong to the stack. For example, Oracle WebLogic and Java for the Oracle Fusion Middleware product stack.
        :param Sequence['GetPlatformConfigurationsPlatformConfigurationCollectionItemConfigCategoryDetailSubCategoryDetailArgs'] sub_category_details: ProductStack Config Category Details.
        :param Sequence[builtins.str] versions: Versions associated with the PRODUCT .
        """
        pulumi.set(__self__, "compatible_products", compatible_products)
        pulumi.set(__self__, "components", components)
        pulumi.set(__self__, "config_category", config_category)
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "patch_types", patch_types)
        pulumi.set(__self__, "products", products)
        pulumi.set(__self__, "sub_category_details", sub_category_details)
        pulumi.set(__self__, "versions", versions)

    @property
    @pulumi.getter(name="compatibleProducts")
    def compatible_products(self) -> Sequence['outputs.GetPlatformConfigurationsPlatformConfigurationCollectionItemConfigCategoryDetailCompatibleProductResult']:
        """
        Products compatible with this Product. Provide products from the list of other products you have created that are compatible with the present one
        """
        return pulumi.get(self, "compatible_products")

    @property
    @pulumi.getter
    def components(self) -> Sequence[builtins.str]:
        """
        Various components of the Product. For example:The administration server or node manager can be the components of the Oracle WebLogic Application server. Forms server or concurrent manager can be the components of the Oracle E-Business Suite.
        """
        return pulumi.get(self, "components")

    @property
    @pulumi.getter(name="configCategory")
    def config_category(self) -> builtins.str:
        """
        Config Category
        """
        return pulumi.get(self, "config_category")

    @property
    @pulumi.getter
    def credentials(self) -> Sequence['outputs.GetPlatformConfigurationsPlatformConfigurationCollectionItemConfigCategoryDetailCredentialResult']:
        """
        OCID for the Credential name to be associated with the Product Stack. These are useful for target discovery or lifecycle management activities, for example, Oracle WebLogic admin credentials for Oracle WebLogic Application server.
        """
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> builtins.str:
        """
        The OCID of the resource.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> builtins.str:
        """
        A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="patchTypes")
    def patch_types(self) -> Sequence['outputs.GetPlatformConfigurationsPlatformConfigurationCollectionItemConfigCategoryDetailPatchTypeResult']:
        """
        Patch Types associated with this Product Stack which will be considered as Product.
        """
        return pulumi.get(self, "patch_types")

    @property
    @pulumi.getter
    def products(self) -> Sequence['outputs.GetPlatformConfigurationsPlatformConfigurationCollectionItemConfigCategoryDetailProductResult']:
        """
        Products that belong to the stack. For example, Oracle WebLogic and Java for the Oracle Fusion Middleware product stack.
        """
        return pulumi.get(self, "products")

    @property
    @pulumi.getter(name="subCategoryDetails")
    def sub_category_details(self) -> Sequence['outputs.GetPlatformConfigurationsPlatformConfigurationCollectionItemConfigCategoryDetailSubCategoryDetailResult']:
        """
        ProductStack Config Category Details.
        """
        return pulumi.get(self, "sub_category_details")

    @property
    @pulumi.getter
    def versions(self) -> Sequence[builtins.str]:
        """
        Versions associated with the PRODUCT .
        """
        return pulumi.get(self, "versions")


@pulumi.output_type
class GetPlatformConfigurationsPlatformConfigurationCollectionItemConfigCategoryDetailCompatibleProductResult(dict):
    def __init__(__self__, *,
                 display_name: builtins.str,
                 id: builtins.str):
        """
        :param builtins.str display_name: A filter to return only resources that match the entire display name given.
        :param builtins.str id: Unique identifier or OCID for listing a single Platform Configuration by id. Either compartmentId or id must be provided.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Unique identifier or OCID for listing a single Platform Configuration by id. Either compartmentId or id must be provided.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetPlatformConfigurationsPlatformConfigurationCollectionItemConfigCategoryDetailCredentialResult(dict):
    def __init__(__self__, *,
                 display_name: builtins.str,
                 id: builtins.str):
        """
        :param builtins.str display_name: A filter to return only resources that match the entire display name given.
        :param builtins.str id: Unique identifier or OCID for listing a single Platform Configuration by id. Either compartmentId or id must be provided.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Unique identifier or OCID for listing a single Platform Configuration by id. Either compartmentId or id must be provided.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetPlatformConfigurationsPlatformConfigurationCollectionItemConfigCategoryDetailPatchTypeResult(dict):
    def __init__(__self__, *,
                 display_name: builtins.str,
                 id: builtins.str):
        """
        :param builtins.str display_name: A filter to return only resources that match the entire display name given.
        :param builtins.str id: Unique identifier or OCID for listing a single Platform Configuration by id. Either compartmentId or id must be provided.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Unique identifier or OCID for listing a single Platform Configuration by id. Either compartmentId or id must be provided.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetPlatformConfigurationsPlatformConfigurationCollectionItemConfigCategoryDetailProductResult(dict):
    def __init__(__self__, *,
                 display_name: builtins.str,
                 id: builtins.str):
        """
        :param builtins.str display_name: A filter to return only resources that match the entire display name given.
        :param builtins.str id: Unique identifier or OCID for listing a single Platform Configuration by id. Either compartmentId or id must be provided.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Unique identifier or OCID for listing a single Platform Configuration by id. Either compartmentId or id must be provided.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetPlatformConfigurationsPlatformConfigurationCollectionItemConfigCategoryDetailSubCategoryDetailResult(dict):
    def __init__(__self__, *,
                 components: Sequence[builtins.str],
                 credentials: Sequence['outputs.GetPlatformConfigurationsPlatformConfigurationCollectionItemConfigCategoryDetailSubCategoryDetailCredentialResult'],
                 patch_types: Sequence['outputs.GetPlatformConfigurationsPlatformConfigurationCollectionItemConfigCategoryDetailSubCategoryDetailPatchTypeResult'],
                 sub_category: builtins.str,
                 versions: Sequence[builtins.str]):
        """
        :param Sequence[builtins.str] components: Various components of the Product. For example:The administration server or node manager can be the components of the Oracle WebLogic Application server. Forms server or concurrent manager can be the components of the Oracle E-Business Suite.
        :param Sequence['GetPlatformConfigurationsPlatformConfigurationCollectionItemConfigCategoryDetailSubCategoryDetailCredentialArgs'] credentials: OCID for the Credential name to be associated with the Product Stack. These are useful for target discovery or lifecycle management activities, for example, Oracle WebLogic admin credentials for Oracle WebLogic Application server.
        :param Sequence['GetPlatformConfigurationsPlatformConfigurationCollectionItemConfigCategoryDetailSubCategoryDetailPatchTypeArgs'] patch_types: Patch Types associated with this Product Stack which will be considered as Product.
        :param builtins.str sub_category: SubCategory of Product Stack.
        :param Sequence[builtins.str] versions: Versions associated with the PRODUCT .
        """
        pulumi.set(__self__, "components", components)
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "patch_types", patch_types)
        pulumi.set(__self__, "sub_category", sub_category)
        pulumi.set(__self__, "versions", versions)

    @property
    @pulumi.getter
    def components(self) -> Sequence[builtins.str]:
        """
        Various components of the Product. For example:The administration server or node manager can be the components of the Oracle WebLogic Application server. Forms server or concurrent manager can be the components of the Oracle E-Business Suite.
        """
        return pulumi.get(self, "components")

    @property
    @pulumi.getter
    def credentials(self) -> Sequence['outputs.GetPlatformConfigurationsPlatformConfigurationCollectionItemConfigCategoryDetailSubCategoryDetailCredentialResult']:
        """
        OCID for the Credential name to be associated with the Product Stack. These are useful for target discovery or lifecycle management activities, for example, Oracle WebLogic admin credentials for Oracle WebLogic Application server.
        """
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="patchTypes")
    def patch_types(self) -> Sequence['outputs.GetPlatformConfigurationsPlatformConfigurationCollectionItemConfigCategoryDetailSubCategoryDetailPatchTypeResult']:
        """
        Patch Types associated with this Product Stack which will be considered as Product.
        """
        return pulumi.get(self, "patch_types")

    @property
    @pulumi.getter(name="subCategory")
    def sub_category(self) -> builtins.str:
        """
        SubCategory of Product Stack.
        """
        return pulumi.get(self, "sub_category")

    @property
    @pulumi.getter
    def versions(self) -> Sequence[builtins.str]:
        """
        Versions associated with the PRODUCT .
        """
        return pulumi.get(self, "versions")


@pulumi.output_type
class GetPlatformConfigurationsPlatformConfigurationCollectionItemConfigCategoryDetailSubCategoryDetailCredentialResult(dict):
    def __init__(__self__, *,
                 display_name: builtins.str,
                 id: builtins.str):
        """
        :param builtins.str display_name: A filter to return only resources that match the entire display name given.
        :param builtins.str id: Unique identifier or OCID for listing a single Platform Configuration by id. Either compartmentId or id must be provided.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Unique identifier or OCID for listing a single Platform Configuration by id. Either compartmentId or id must be provided.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetPlatformConfigurationsPlatformConfigurationCollectionItemConfigCategoryDetailSubCategoryDetailPatchTypeResult(dict):
    def __init__(__self__, *,
                 display_name: builtins.str,
                 id: builtins.str):
        """
        :param builtins.str display_name: A filter to return only resources that match the entire display name given.
        :param builtins.str id: Unique identifier or OCID for listing a single Platform Configuration by id. Either compartmentId or id must be provided.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Unique identifier or OCID for listing a single Platform Configuration by id. Either compartmentId or id must be provided.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetPropertiesFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        """
        :param Sequence[builtins.str] values: Values of the property (must be a single value if selection = 'SINGLE_CHOICE').
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        """
        Values of the property (must be a single value if selection = 'SINGLE_CHOICE').
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetPropertiesPropertyCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetPropertiesPropertyCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetPropertiesPropertyCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetPropertiesPropertyCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: builtins.str,
                 defined_tags: Mapping[str, builtins.str],
                 display_name: builtins.str,
                 freeform_tags: Mapping[str, builtins.str],
                 id: builtins.str,
                 lifecycle_details: builtins.str,
                 resource_region: builtins.str,
                 scope: builtins.str,
                 selection: builtins.str,
                 state: builtins.str,
                 system_tags: Mapping[str, builtins.str],
                 time_created: builtins.str,
                 time_updated: builtins.str,
                 type: builtins.str,
                 value_type: builtins.str,
                 values: Sequence[builtins.str]):
        """
        :param builtins.str compartment_id: The ID of the compartment in which to list resources. Empty only if the resource OCID query param is not specified.
        :param Mapping[str, builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param builtins.str display_name: A filter to return only resources that match the entire display name given.
        :param Mapping[str, builtins.str] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param builtins.str id: Unique identifier or OCID for listing a single Property by id. Either compartmentId or id must be provided.
        :param builtins.str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param builtins.str resource_region: Associated region
        :param builtins.str scope: A filter to return only resources their scope matches the given scope.
        :param builtins.str selection: Text selection of the property.
        :param builtins.str state: A filter to return only resources whose lifecycleState matches the given lifecycleState.
        :param Mapping[str, builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param builtins.str time_created: The time this resource was created. An RFC3339 formatted datetime string.
        :param builtins.str time_updated: The time this resource was last updated. An RFC3339 formatted datetime string.
        :param builtins.str type: A filter to return properties whose type matches the given type.
        :param builtins.str value_type: Format of the value.
        :param Sequence[builtins.str] values: Values of the property (must be a single value if selection = 'SINGLE_CHOICE').
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "resource_region", resource_region)
        pulumi.set(__self__, "scope", scope)
        pulumi.set(__self__, "selection", selection)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value_type", value_type)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        The ID of the compartment in which to list resources. Empty only if the resource OCID query param is not specified.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Unique identifier or OCID for listing a single Property by id. Either compartmentId or id must be provided.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> builtins.str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="resourceRegion")
    def resource_region(self) -> builtins.str:
        """
        Associated region
        """
        return pulumi.get(self, "resource_region")

    @property
    @pulumi.getter
    def scope(self) -> builtins.str:
        """
        A filter to return only resources their scope matches the given scope.
        """
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter
    def selection(self) -> builtins.str:
        """
        Text selection of the property.
        """
        return pulumi.get(self, "selection")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        A filter to return only resources whose lifecycleState matches the given lifecycleState.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The time this resource was created. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> builtins.str:
        """
        The time this resource was last updated. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        A filter to return properties whose type matches the given type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> builtins.str:
        """
        Format of the value.
        """
        return pulumi.get(self, "value_type")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        """
        Values of the property (must be a single value if selection = 'SINGLE_CHOICE').
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetProvisionDeployedResourceResult(dict):
    def __init__(__self__, *,
                 mode: builtins.str,
                 resource_instance_lists: Sequence['outputs.GetProvisionDeployedResourceResourceInstanceListResult'],
                 resource_name: builtins.str,
                 resource_provider: builtins.str,
                 resource_type: builtins.str):
        """
        :param builtins.str mode: The mode of the resource. Example: "managed"
        :param Sequence['GetProvisionDeployedResourceResourceInstanceListArgs'] resource_instance_lists: Collection of InstanceSummary
        :param builtins.str resource_name: The name of the resource
        :param builtins.str resource_provider: The name of the Provider
        :param builtins.str resource_type: The provider resource type. Must be supported by the Oracle Cloud Infrastructure provider. Example: Core.Instance
        """
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "resource_instance_lists", resource_instance_lists)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "resource_provider", resource_provider)
        pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter
    def mode(self) -> builtins.str:
        """
        The mode of the resource. Example: "managed"
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="resourceInstanceLists")
    def resource_instance_lists(self) -> Sequence['outputs.GetProvisionDeployedResourceResourceInstanceListResult']:
        """
        Collection of InstanceSummary
        """
        return pulumi.get(self, "resource_instance_lists")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> builtins.str:
        """
        The name of the resource
        """
        return pulumi.get(self, "resource_name")

    @property
    @pulumi.getter(name="resourceProvider")
    def resource_provider(self) -> builtins.str:
        """
        The name of the Provider
        """
        return pulumi.get(self, "resource_provider")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> builtins.str:
        """
        The provider resource type. Must be supported by the Oracle Cloud Infrastructure provider. Example: Core.Instance
        """
        return pulumi.get(self, "resource_type")


@pulumi.output_type
class GetProvisionDeployedResourceResourceInstanceListResult(dict):
    def __init__(__self__, *,
                 compartment_id: builtins.str,
                 id: builtins.str,
                 state: builtins.str):
        """
        :param builtins.str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which instance is deployed.
        :param builtins.str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the FamProvision.
        :param builtins.str state: The current state of the FamProvision.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which instance is deployed.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the FamProvision.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        The current state of the FamProvision.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class GetProvisionTfOutputResult(dict):
    def __init__(__self__, *,
                 is_sensitive: builtins.bool,
                 output_description: builtins.str,
                 output_name: builtins.str,
                 output_type: builtins.str,
                 output_value: builtins.str):
        """
        :param builtins.bool is_sensitive: The indicator if the data for this parameter is sensitive (e.g. should the data be hidden in UI, encrypted if stored, etc.)
        :param builtins.str output_description: The output description
        :param builtins.str output_name: The output name
        :param builtins.str output_type: The output type
        :param builtins.str output_value: The output value
        """
        pulumi.set(__self__, "is_sensitive", is_sensitive)
        pulumi.set(__self__, "output_description", output_description)
        pulumi.set(__self__, "output_name", output_name)
        pulumi.set(__self__, "output_type", output_type)
        pulumi.set(__self__, "output_value", output_value)

    @property
    @pulumi.getter(name="isSensitive")
    def is_sensitive(self) -> builtins.bool:
        """
        The indicator if the data for this parameter is sensitive (e.g. should the data be hidden in UI, encrypted if stored, etc.)
        """
        return pulumi.get(self, "is_sensitive")

    @property
    @pulumi.getter(name="outputDescription")
    def output_description(self) -> builtins.str:
        """
        The output description
        """
        return pulumi.get(self, "output_description")

    @property
    @pulumi.getter(name="outputName")
    def output_name(self) -> builtins.str:
        """
        The output name
        """
        return pulumi.get(self, "output_name")

    @property
    @pulumi.getter(name="outputType")
    def output_type(self) -> builtins.str:
        """
        The output type
        """
        return pulumi.get(self, "output_type")

    @property
    @pulumi.getter(name="outputValue")
    def output_value(self) -> builtins.str:
        """
        The output value
        """
        return pulumi.get(self, "output_value")


@pulumi.output_type
class GetProvisionsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetProvisionsProvisionCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetProvisionsProvisionCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetProvisionsProvisionCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetProvisionsProvisionCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: builtins.str,
                 config_catalog_item_display_name: builtins.str,
                 config_catalog_item_id: builtins.str,
                 config_catalog_item_listing_id: builtins.str,
                 config_catalog_item_listing_version: builtins.str,
                 defined_tags: Mapping[str, builtins.str],
                 deployed_resources: Sequence['outputs.GetProvisionsProvisionCollectionItemDeployedResourceResult'],
                 display_name: builtins.str,
                 fleet_id: builtins.str,
                 freeform_tags: Mapping[str, builtins.str],
                 id: builtins.str,
                 lifecycle_details: builtins.str,
                 package_catalog_item_display_name: builtins.str,
                 package_catalog_item_id: builtins.str,
                 package_catalog_item_listing_id: builtins.str,
                 package_catalog_item_listing_version: builtins.str,
                 provision_description: builtins.str,
                 rms_apply_job_id: builtins.str,
                 stack_id: builtins.str,
                 state: builtins.str,
                 system_tags: Mapping[str, builtins.str],
                 tf_outputs: Sequence['outputs.GetProvisionsProvisionCollectionItemTfOutputResult'],
                 tf_variable_compartment_id: builtins.str,
                 tf_variable_current_user_id: builtins.str,
                 tf_variable_region_id: builtins.str,
                 tf_variable_tenancy_id: builtins.str,
                 time_created: builtins.str,
                 time_updated: builtins.str):
        """
        :param builtins.str compartment_id: (Updatable) The ID of the compartment in which to list resources. Empty only if the resource OCID query param is not specified.
        :param builtins.str config_catalog_item_display_name: A display Name of the Catalog Item in the Catalog.
        :param builtins.str config_catalog_item_id: A [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Catalog Item to a file with key/value pairs to set up variables for createStack API.
        :param builtins.str config_catalog_item_listing_id: A listing ID of the Catalog Item in the Catalog.
        :param builtins.str config_catalog_item_listing_version: A listing version of the Catalog Item in the Catalog.
        :param Mapping[str, builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param Sequence['GetProvisionsProvisionCollectionItemDeployedResourceArgs'] deployed_resources: The deployed resources and their summary
        :param builtins.str display_name: A filter to return only resources that match the entire display name given.
        :param builtins.str fleet_id: unique Fleet identifier
        :param Mapping[str, builtins.str] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param builtins.str id: Unique identifier or OCID for listing a single provision by id. Either compartmentId or id must be provided.
        :param builtins.str lifecycle_details: A message that describes the current state of the FamProvision in more detail. For example, can be used to provide actionable information for a resource in the Failed state.
        :param builtins.str package_catalog_item_display_name: A display Name of the Catalog Item in the Catalog.
        :param builtins.str package_catalog_item_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Catalog Item.
        :param builtins.str package_catalog_item_listing_id: A listing ID of the Catalog Item in the Catalog.
        :param builtins.str package_catalog_item_listing_version: A listing version of the Catalog Item in the Catalog.
        :param builtins.str provision_description: A description of the provision.
        :param builtins.str rms_apply_job_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the RMS APPLY Job.
        :param builtins.str stack_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the RMS Stack.
        :param builtins.str state: A filter to return only resources that match the given lifecycle state. The state value is case-insensitive.
        :param Mapping[str, builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param Sequence['GetProvisionsProvisionCollectionItemTfOutputArgs'] tf_outputs: Outputs from the pulumi up job
        :param builtins.str tf_variable_compartment_id: An optional variable added to a list of RMS variables for createStack API. Overrides the one supplied in configuration file.
        :param builtins.str tf_variable_current_user_id: An optional variable added to a list of RMS variables for createStack API. Overrides the one supplied in configuration file.
        :param builtins.str tf_variable_region_id: A mandatory variable added to a list of RMS variables for createStack API. Overrides the one supplied in configuration file.
        :param builtins.str tf_variable_tenancy_id: A mandatory variable added to a list of RMS variables for createStack API. Overrides the one supplied in configuration file.
        :param builtins.str time_created: The date and time the FamProvision was created, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        :param builtins.str time_updated: The date and time the FamProvision was updated, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "config_catalog_item_display_name", config_catalog_item_display_name)
        pulumi.set(__self__, "config_catalog_item_id", config_catalog_item_id)
        pulumi.set(__self__, "config_catalog_item_listing_id", config_catalog_item_listing_id)
        pulumi.set(__self__, "config_catalog_item_listing_version", config_catalog_item_listing_version)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "deployed_resources", deployed_resources)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "fleet_id", fleet_id)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "package_catalog_item_display_name", package_catalog_item_display_name)
        pulumi.set(__self__, "package_catalog_item_id", package_catalog_item_id)
        pulumi.set(__self__, "package_catalog_item_listing_id", package_catalog_item_listing_id)
        pulumi.set(__self__, "package_catalog_item_listing_version", package_catalog_item_listing_version)
        pulumi.set(__self__, "provision_description", provision_description)
        pulumi.set(__self__, "rms_apply_job_id", rms_apply_job_id)
        pulumi.set(__self__, "stack_id", stack_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "tf_outputs", tf_outputs)
        pulumi.set(__self__, "tf_variable_compartment_id", tf_variable_compartment_id)
        pulumi.set(__self__, "tf_variable_current_user_id", tf_variable_current_user_id)
        pulumi.set(__self__, "tf_variable_region_id", tf_variable_region_id)
        pulumi.set(__self__, "tf_variable_tenancy_id", tf_variable_tenancy_id)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        (Updatable) The ID of the compartment in which to list resources. Empty only if the resource OCID query param is not specified.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="configCatalogItemDisplayName")
    def config_catalog_item_display_name(self) -> builtins.str:
        """
        A display Name of the Catalog Item in the Catalog.
        """
        return pulumi.get(self, "config_catalog_item_display_name")

    @property
    @pulumi.getter(name="configCatalogItemId")
    def config_catalog_item_id(self) -> builtins.str:
        """
        A [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Catalog Item to a file with key/value pairs to set up variables for createStack API.
        """
        return pulumi.get(self, "config_catalog_item_id")

    @property
    @pulumi.getter(name="configCatalogItemListingId")
    def config_catalog_item_listing_id(self) -> builtins.str:
        """
        A listing ID of the Catalog Item in the Catalog.
        """
        return pulumi.get(self, "config_catalog_item_listing_id")

    @property
    @pulumi.getter(name="configCatalogItemListingVersion")
    def config_catalog_item_listing_version(self) -> builtins.str:
        """
        A listing version of the Catalog Item in the Catalog.
        """
        return pulumi.get(self, "config_catalog_item_listing_version")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="deployedResources")
    def deployed_resources(self) -> Sequence['outputs.GetProvisionsProvisionCollectionItemDeployedResourceResult']:
        """
        The deployed resources and their summary
        """
        return pulumi.get(self, "deployed_resources")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="fleetId")
    def fleet_id(self) -> builtins.str:
        """
        unique Fleet identifier
        """
        return pulumi.get(self, "fleet_id")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Unique identifier or OCID for listing a single provision by id. Either compartmentId or id must be provided.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> builtins.str:
        """
        A message that describes the current state of the FamProvision in more detail. For example, can be used to provide actionable information for a resource in the Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="packageCatalogItemDisplayName")
    def package_catalog_item_display_name(self) -> builtins.str:
        """
        A display Name of the Catalog Item in the Catalog.
        """
        return pulumi.get(self, "package_catalog_item_display_name")

    @property
    @pulumi.getter(name="packageCatalogItemId")
    def package_catalog_item_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Catalog Item.
        """
        return pulumi.get(self, "package_catalog_item_id")

    @property
    @pulumi.getter(name="packageCatalogItemListingId")
    def package_catalog_item_listing_id(self) -> builtins.str:
        """
        A listing ID of the Catalog Item in the Catalog.
        """
        return pulumi.get(self, "package_catalog_item_listing_id")

    @property
    @pulumi.getter(name="packageCatalogItemListingVersion")
    def package_catalog_item_listing_version(self) -> builtins.str:
        """
        A listing version of the Catalog Item in the Catalog.
        """
        return pulumi.get(self, "package_catalog_item_listing_version")

    @property
    @pulumi.getter(name="provisionDescription")
    def provision_description(self) -> builtins.str:
        """
        A description of the provision.
        """
        return pulumi.get(self, "provision_description")

    @property
    @pulumi.getter(name="rmsApplyJobId")
    def rms_apply_job_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the RMS APPLY Job.
        """
        return pulumi.get(self, "rms_apply_job_id")

    @property
    @pulumi.getter(name="stackId")
    def stack_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the RMS Stack.
        """
        return pulumi.get(self, "stack_id")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        A filter to return only resources that match the given lifecycle state. The state value is case-insensitive.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="tfOutputs")
    def tf_outputs(self) -> Sequence['outputs.GetProvisionsProvisionCollectionItemTfOutputResult']:
        """
        Outputs from the pulumi up job
        """
        return pulumi.get(self, "tf_outputs")

    @property
    @pulumi.getter(name="tfVariableCompartmentId")
    def tf_variable_compartment_id(self) -> builtins.str:
        """
        An optional variable added to a list of RMS variables for createStack API. Overrides the one supplied in configuration file.
        """
        return pulumi.get(self, "tf_variable_compartment_id")

    @property
    @pulumi.getter(name="tfVariableCurrentUserId")
    def tf_variable_current_user_id(self) -> builtins.str:
        """
        An optional variable added to a list of RMS variables for createStack API. Overrides the one supplied in configuration file.
        """
        return pulumi.get(self, "tf_variable_current_user_id")

    @property
    @pulumi.getter(name="tfVariableRegionId")
    def tf_variable_region_id(self) -> builtins.str:
        """
        A mandatory variable added to a list of RMS variables for createStack API. Overrides the one supplied in configuration file.
        """
        return pulumi.get(self, "tf_variable_region_id")

    @property
    @pulumi.getter(name="tfVariableTenancyId")
    def tf_variable_tenancy_id(self) -> builtins.str:
        """
        A mandatory variable added to a list of RMS variables for createStack API. Overrides the one supplied in configuration file.
        """
        return pulumi.get(self, "tf_variable_tenancy_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The date and time the FamProvision was created, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> builtins.str:
        """
        The date and time the FamProvision was updated, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetProvisionsProvisionCollectionItemDeployedResourceResult(dict):
    def __init__(__self__, *,
                 mode: builtins.str,
                 resource_instance_lists: Sequence['outputs.GetProvisionsProvisionCollectionItemDeployedResourceResourceInstanceListResult'],
                 resource_name: builtins.str,
                 resource_provider: builtins.str,
                 resource_type: builtins.str):
        """
        :param builtins.str mode: The mode of the resource. Example: "managed"
        :param Sequence['GetProvisionsProvisionCollectionItemDeployedResourceResourceInstanceListArgs'] resource_instance_lists: Collection of InstanceSummary
        :param builtins.str resource_name: The name of the resource
        :param builtins.str resource_provider: The name of the Provider
        :param builtins.str resource_type: The provider resource type. Must be supported by the Oracle Cloud Infrastructure provider. Example: Core.Instance
        """
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "resource_instance_lists", resource_instance_lists)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "resource_provider", resource_provider)
        pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter
    def mode(self) -> builtins.str:
        """
        The mode of the resource. Example: "managed"
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="resourceInstanceLists")
    def resource_instance_lists(self) -> Sequence['outputs.GetProvisionsProvisionCollectionItemDeployedResourceResourceInstanceListResult']:
        """
        Collection of InstanceSummary
        """
        return pulumi.get(self, "resource_instance_lists")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> builtins.str:
        """
        The name of the resource
        """
        return pulumi.get(self, "resource_name")

    @property
    @pulumi.getter(name="resourceProvider")
    def resource_provider(self) -> builtins.str:
        """
        The name of the Provider
        """
        return pulumi.get(self, "resource_provider")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> builtins.str:
        """
        The provider resource type. Must be supported by the Oracle Cloud Infrastructure provider. Example: Core.Instance
        """
        return pulumi.get(self, "resource_type")


@pulumi.output_type
class GetProvisionsProvisionCollectionItemDeployedResourceResourceInstanceListResult(dict):
    def __init__(__self__, *,
                 compartment_id: builtins.str,
                 id: builtins.str,
                 state: builtins.str):
        """
        :param builtins.str compartment_id: (Updatable) The ID of the compartment in which to list resources. Empty only if the resource OCID query param is not specified.
        :param builtins.str id: Unique identifier or OCID for listing a single provision by id. Either compartmentId or id must be provided.
        :param builtins.str state: A filter to return only resources that match the given lifecycle state. The state value is case-insensitive.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        (Updatable) The ID of the compartment in which to list resources. Empty only if the resource OCID query param is not specified.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Unique identifier or OCID for listing a single provision by id. Either compartmentId or id must be provided.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        A filter to return only resources that match the given lifecycle state. The state value is case-insensitive.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class GetProvisionsProvisionCollectionItemTfOutputResult(dict):
    def __init__(__self__, *,
                 is_sensitive: builtins.bool,
                 output_description: builtins.str,
                 output_name: builtins.str,
                 output_type: builtins.str,
                 output_value: builtins.str):
        """
        :param builtins.bool is_sensitive: The indicator if the data for this parameter is sensitive (e.g. should the data be hidden in UI, encrypted if stored, etc.)
        :param builtins.str output_description: The output description
        :param builtins.str output_name: The output name
        :param builtins.str output_type: The output type
        :param builtins.str output_value: The output value
        """
        pulumi.set(__self__, "is_sensitive", is_sensitive)
        pulumi.set(__self__, "output_description", output_description)
        pulumi.set(__self__, "output_name", output_name)
        pulumi.set(__self__, "output_type", output_type)
        pulumi.set(__self__, "output_value", output_value)

    @property
    @pulumi.getter(name="isSensitive")
    def is_sensitive(self) -> builtins.bool:
        """
        The indicator if the data for this parameter is sensitive (e.g. should the data be hidden in UI, encrypted if stored, etc.)
        """
        return pulumi.get(self, "is_sensitive")

    @property
    @pulumi.getter(name="outputDescription")
    def output_description(self) -> builtins.str:
        """
        The output description
        """
        return pulumi.get(self, "output_description")

    @property
    @pulumi.getter(name="outputName")
    def output_name(self) -> builtins.str:
        """
        The output name
        """
        return pulumi.get(self, "output_name")

    @property
    @pulumi.getter(name="outputType")
    def output_type(self) -> builtins.str:
        """
        The output type
        """
        return pulumi.get(self, "output_type")

    @property
    @pulumi.getter(name="outputValue")
    def output_value(self) -> builtins.str:
        """
        The output value
        """
        return pulumi.get(self, "output_value")


@pulumi.output_type
class GetRunbookRunbookVersionResult(dict):
    def __init__(__self__, *,
                 execution_workflow_details: Sequence['outputs.GetRunbookRunbookVersionExecutionWorkflowDetailResult'],
                 groups: Sequence['outputs.GetRunbookRunbookVersionGroupResult'],
                 is_latest: builtins.bool,
                 rollback_workflow_details: Sequence['outputs.GetRunbookRunbookVersionRollbackWorkflowDetailResult'],
                 tasks: Sequence['outputs.GetRunbookRunbookVersionTaskResult'],
                 version: builtins.str):
        """
        :param Sequence['GetRunbookRunbookVersionExecutionWorkflowDetailArgs'] execution_workflow_details: Execution Workflow details.
        :param Sequence['GetRunbookRunbookVersionGroupArgs'] groups: The groups of the runbook.
        :param builtins.bool is_latest: Is this version the latest?
        :param Sequence['GetRunbookRunbookVersionRollbackWorkflowDetailArgs'] rollback_workflow_details: Rollback Workflow details.
        :param Sequence['GetRunbookRunbookVersionTaskArgs'] tasks: A set of tasks to execute in the runbook.
        :param builtins.str version: The version of the runbook.
        """
        pulumi.set(__self__, "execution_workflow_details", execution_workflow_details)
        pulumi.set(__self__, "groups", groups)
        pulumi.set(__self__, "is_latest", is_latest)
        pulumi.set(__self__, "rollback_workflow_details", rollback_workflow_details)
        pulumi.set(__self__, "tasks", tasks)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="executionWorkflowDetails")
    def execution_workflow_details(self) -> Sequence['outputs.GetRunbookRunbookVersionExecutionWorkflowDetailResult']:
        """
        Execution Workflow details.
        """
        return pulumi.get(self, "execution_workflow_details")

    @property
    @pulumi.getter
    def groups(self) -> Sequence['outputs.GetRunbookRunbookVersionGroupResult']:
        """
        The groups of the runbook.
        """
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter(name="isLatest")
    def is_latest(self) -> builtins.bool:
        """
        Is this version the latest?
        """
        return pulumi.get(self, "is_latest")

    @property
    @pulumi.getter(name="rollbackWorkflowDetails")
    def rollback_workflow_details(self) -> Sequence['outputs.GetRunbookRunbookVersionRollbackWorkflowDetailResult']:
        """
        Rollback Workflow details.
        """
        return pulumi.get(self, "rollback_workflow_details")

    @property
    @pulumi.getter
    def tasks(self) -> Sequence['outputs.GetRunbookRunbookVersionTaskResult']:
        """
        A set of tasks to execute in the runbook.
        """
        return pulumi.get(self, "tasks")

    @property
    @pulumi.getter
    def version(self) -> builtins.str:
        """
        The version of the runbook.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetRunbookRunbookVersionExecutionWorkflowDetailResult(dict):
    def __init__(__self__, *,
                 workflows: Sequence['outputs.GetRunbookRunbookVersionExecutionWorkflowDetailWorkflowResult']):
        """
        :param Sequence['GetRunbookRunbookVersionExecutionWorkflowDetailWorkflowArgs'] workflows: Rollback Workflow for the runbook.
        """
        pulumi.set(__self__, "workflows", workflows)

    @property
    @pulumi.getter
    def workflows(self) -> Sequence['outputs.GetRunbookRunbookVersionExecutionWorkflowDetailWorkflowResult']:
        """
        Rollback Workflow for the runbook.
        """
        return pulumi.get(self, "workflows")


@pulumi.output_type
class GetRunbookRunbookVersionExecutionWorkflowDetailWorkflowResult(dict):
    def __init__(__self__, *,
                 group_name: builtins.str,
                 steps: Sequence['outputs.GetRunbookRunbookVersionExecutionWorkflowDetailWorkflowStepResult'],
                 type: builtins.str):
        """
        :param builtins.str group_name: Name of the group.
        :param Sequence['GetRunbookRunbookVersionExecutionWorkflowDetailWorkflowStepArgs'] steps: Tasks within the Group. Provide the stepName for all applicable tasks.
        :param builtins.str type: The type of the runbook.
        """
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "steps", steps)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> builtins.str:
        """
        Name of the group.
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter
    def steps(self) -> Sequence['outputs.GetRunbookRunbookVersionExecutionWorkflowDetailWorkflowStepResult']:
        """
        Tasks within the Group. Provide the stepName for all applicable tasks.
        """
        return pulumi.get(self, "steps")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of the runbook.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRunbookRunbookVersionExecutionWorkflowDetailWorkflowStepResult(dict):
    def __init__(__self__, *,
                 group_name: builtins.str,
                 step_name: builtins.str,
                 steps: Sequence[builtins.str],
                 type: builtins.str):
        """
        :param builtins.str group_name: Name of the group.
        :param builtins.str step_name: The name of the task step the output variable belongs to.
        :param Sequence[builtins.str] steps: Tasks within the Group. Provide the stepName for all applicable tasks.
        :param builtins.str type: The type of the runbook.
        """
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "step_name", step_name)
        pulumi.set(__self__, "steps", steps)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> builtins.str:
        """
        Name of the group.
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> builtins.str:
        """
        The name of the task step the output variable belongs to.
        """
        return pulumi.get(self, "step_name")

    @property
    @pulumi.getter
    def steps(self) -> Sequence[builtins.str]:
        """
        Tasks within the Group. Provide the stepName for all applicable tasks.
        """
        return pulumi.get(self, "steps")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of the runbook.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRunbookRunbookVersionGroupResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 properties: Sequence['outputs.GetRunbookRunbookVersionGroupPropertyResult'],
                 type: builtins.str):
        """
        :param builtins.str name: The name of the task
        :param Sequence['GetRunbookRunbookVersionGroupPropertyArgs'] properties: The properties of the task.
        :param builtins.str type: The type of the runbook.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the task
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetRunbookRunbookVersionGroupPropertyResult']:
        """
        The properties of the task.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of the runbook.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRunbookRunbookVersionGroupPropertyResult(dict):
    def __init__(__self__, *,
                 action_on_failure: builtins.str,
                 notification_preferences: Sequence['outputs.GetRunbookRunbookVersionGroupPropertyNotificationPreferenceResult'],
                 pause_details: Sequence['outputs.GetRunbookRunbookVersionGroupPropertyPauseDetailResult'],
                 pre_condition: builtins.str,
                 run_ons: Sequence['outputs.GetRunbookRunbookVersionGroupPropertyRunOnResult']):
        """
        :param builtins.str action_on_failure: The action to be taken in case of a failure.
        :param Sequence['GetRunbookRunbookVersionGroupPropertyNotificationPreferenceArgs'] notification_preferences: Preferences to send notifications on the task activities.
        :param Sequence['GetRunbookRunbookVersionGroupPropertyPauseDetailArgs'] pause_details: Pause Details
        :param builtins.str pre_condition: Build control flow conditions that determine the relevance of the task execution.
        :param Sequence['GetRunbookRunbookVersionGroupPropertyRunOnArgs'] run_ons: The runon conditions
        """
        pulumi.set(__self__, "action_on_failure", action_on_failure)
        pulumi.set(__self__, "notification_preferences", notification_preferences)
        pulumi.set(__self__, "pause_details", pause_details)
        pulumi.set(__self__, "pre_condition", pre_condition)
        pulumi.set(__self__, "run_ons", run_ons)

    @property
    @pulumi.getter(name="actionOnFailure")
    def action_on_failure(self) -> builtins.str:
        """
        The action to be taken in case of a failure.
        """
        return pulumi.get(self, "action_on_failure")

    @property
    @pulumi.getter(name="notificationPreferences")
    def notification_preferences(self) -> Sequence['outputs.GetRunbookRunbookVersionGroupPropertyNotificationPreferenceResult']:
        """
        Preferences to send notifications on the task activities.
        """
        return pulumi.get(self, "notification_preferences")

    @property
    @pulumi.getter(name="pauseDetails")
    def pause_details(self) -> Sequence['outputs.GetRunbookRunbookVersionGroupPropertyPauseDetailResult']:
        """
        Pause Details
        """
        return pulumi.get(self, "pause_details")

    @property
    @pulumi.getter(name="preCondition")
    def pre_condition(self) -> builtins.str:
        """
        Build control flow conditions that determine the relevance of the task execution.
        """
        return pulumi.get(self, "pre_condition")

    @property
    @pulumi.getter(name="runOns")
    def run_ons(self) -> Sequence['outputs.GetRunbookRunbookVersionGroupPropertyRunOnResult']:
        """
        The runon conditions
        """
        return pulumi.get(self, "run_ons")


@pulumi.output_type
class GetRunbookRunbookVersionGroupPropertyNotificationPreferenceResult(dict):
    def __init__(__self__, *,
                 should_notify_on_pause: builtins.bool,
                 should_notify_on_task_failure: builtins.bool,
                 should_notify_on_task_success: builtins.bool):
        """
        :param builtins.bool should_notify_on_pause: Enables notification on pause.
        :param builtins.bool should_notify_on_task_failure: Enables or disables notification on Task Failures.
        :param builtins.bool should_notify_on_task_success: Enables or disables notification on Task Success.
        """
        pulumi.set(__self__, "should_notify_on_pause", should_notify_on_pause)
        pulumi.set(__self__, "should_notify_on_task_failure", should_notify_on_task_failure)
        pulumi.set(__self__, "should_notify_on_task_success", should_notify_on_task_success)

    @property
    @pulumi.getter(name="shouldNotifyOnPause")
    def should_notify_on_pause(self) -> builtins.bool:
        """
        Enables notification on pause.
        """
        return pulumi.get(self, "should_notify_on_pause")

    @property
    @pulumi.getter(name="shouldNotifyOnTaskFailure")
    def should_notify_on_task_failure(self) -> builtins.bool:
        """
        Enables or disables notification on Task Failures.
        """
        return pulumi.get(self, "should_notify_on_task_failure")

    @property
    @pulumi.getter(name="shouldNotifyOnTaskSuccess")
    def should_notify_on_task_success(self) -> builtins.bool:
        """
        Enables or disables notification on Task Success.
        """
        return pulumi.get(self, "should_notify_on_task_success")


@pulumi.output_type
class GetRunbookRunbookVersionGroupPropertyPauseDetailResult(dict):
    def __init__(__self__, *,
                 duration_in_minutes: builtins.int,
                 kind: builtins.str):
        """
        :param builtins.int duration_in_minutes: Time in minutes to apply Pause.
        :param builtins.str kind: Run on based On.
        """
        pulumi.set(__self__, "duration_in_minutes", duration_in_minutes)
        pulumi.set(__self__, "kind", kind)

    @property
    @pulumi.getter(name="durationInMinutes")
    def duration_in_minutes(self) -> builtins.int:
        """
        Time in minutes to apply Pause.
        """
        return pulumi.get(self, "duration_in_minutes")

    @property
    @pulumi.getter
    def kind(self) -> builtins.str:
        """
        Run on based On.
        """
        return pulumi.get(self, "kind")


@pulumi.output_type
class GetRunbookRunbookVersionGroupPropertyRunOnResult(dict):
    def __init__(__self__, *,
                 condition: builtins.str,
                 host: builtins.str,
                 kind: builtins.str,
                 previous_task_instance_details: Sequence['outputs.GetRunbookRunbookVersionGroupPropertyRunOnPreviousTaskInstanceDetailResult']):
        """
        :param builtins.str condition: Build control flow conditions that determine the relevance of the task execution.
        :param builtins.str host: OCID of the self hosted instance.
        :param builtins.str kind: Run on based On.
        :param Sequence['GetRunbookRunbookVersionGroupPropertyRunOnPreviousTaskInstanceDetailArgs'] previous_task_instance_details: Previous Task Instance Details
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "previous_task_instance_details", previous_task_instance_details)

    @property
    @pulumi.getter
    def condition(self) -> builtins.str:
        """
        Build control flow conditions that determine the relevance of the task execution.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def host(self) -> builtins.str:
        """
        OCID of the self hosted instance.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def kind(self) -> builtins.str:
        """
        Run on based On.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="previousTaskInstanceDetails")
    def previous_task_instance_details(self) -> Sequence['outputs.GetRunbookRunbookVersionGroupPropertyRunOnPreviousTaskInstanceDetailResult']:
        """
        Previous Task Instance Details
        """
        return pulumi.get(self, "previous_task_instance_details")


@pulumi.output_type
class GetRunbookRunbookVersionGroupPropertyRunOnPreviousTaskInstanceDetailResult(dict):
    def __init__(__self__, *,
                 output_variable_details: Sequence['outputs.GetRunbookRunbookVersionGroupPropertyRunOnPreviousTaskInstanceDetailOutputVariableDetailResult'],
                 resource_id: builtins.str,
                 resource_type: builtins.str):
        """
        :param Sequence['GetRunbookRunbookVersionGroupPropertyRunOnPreviousTaskInstanceDetailOutputVariableDetailArgs'] output_variable_details: The details of the output variable that will be used for mapping.
        :param builtins.str resource_id: Resource Ocid.
        :param builtins.str resource_type: Resource Type.
        """
        pulumi.set(__self__, "output_variable_details", output_variable_details)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter(name="outputVariableDetails")
    def output_variable_details(self) -> Sequence['outputs.GetRunbookRunbookVersionGroupPropertyRunOnPreviousTaskInstanceDetailOutputVariableDetailResult']:
        """
        The details of the output variable that will be used for mapping.
        """
        return pulumi.get(self, "output_variable_details")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> builtins.str:
        """
        Resource Ocid.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> builtins.str:
        """
        Resource Type.
        """
        return pulumi.get(self, "resource_type")


@pulumi.output_type
class GetRunbookRunbookVersionGroupPropertyRunOnPreviousTaskInstanceDetailOutputVariableDetailResult(dict):
    def __init__(__self__, *,
                 output_variable_name: builtins.str,
                 step_name: builtins.str):
        """
        :param builtins.str output_variable_name: The name of the output variable whose value has to be mapped.
        :param builtins.str step_name: The name of the task step the output variable belongs to.
        """
        pulumi.set(__self__, "output_variable_name", output_variable_name)
        pulumi.set(__self__, "step_name", step_name)

    @property
    @pulumi.getter(name="outputVariableName")
    def output_variable_name(self) -> builtins.str:
        """
        The name of the output variable whose value has to be mapped.
        """
        return pulumi.get(self, "output_variable_name")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> builtins.str:
        """
        The name of the task step the output variable belongs to.
        """
        return pulumi.get(self, "step_name")


@pulumi.output_type
class GetRunbookRunbookVersionRollbackWorkflowDetailResult(dict):
    def __init__(__self__, *,
                 scope: builtins.str,
                 workflows: Sequence['outputs.GetRunbookRunbookVersionRollbackWorkflowDetailWorkflowResult']):
        """
        :param builtins.str scope: The scope of the task.
        :param Sequence['GetRunbookRunbookVersionRollbackWorkflowDetailWorkflowArgs'] workflows: Rollback Workflow for the runbook.
        """
        pulumi.set(__self__, "scope", scope)
        pulumi.set(__self__, "workflows", workflows)

    @property
    @pulumi.getter
    def scope(self) -> builtins.str:
        """
        The scope of the task.
        """
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter
    def workflows(self) -> Sequence['outputs.GetRunbookRunbookVersionRollbackWorkflowDetailWorkflowResult']:
        """
        Rollback Workflow for the runbook.
        """
        return pulumi.get(self, "workflows")


@pulumi.output_type
class GetRunbookRunbookVersionRollbackWorkflowDetailWorkflowResult(dict):
    def __init__(__self__, *,
                 group_name: builtins.str,
                 steps: Sequence['outputs.GetRunbookRunbookVersionRollbackWorkflowDetailWorkflowStepResult'],
                 type: builtins.str):
        """
        :param builtins.str group_name: Name of the group.
        :param Sequence['GetRunbookRunbookVersionRollbackWorkflowDetailWorkflowStepArgs'] steps: Tasks within the Group. Provide the stepName for all applicable tasks.
        :param builtins.str type: The type of the runbook.
        """
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "steps", steps)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> builtins.str:
        """
        Name of the group.
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter
    def steps(self) -> Sequence['outputs.GetRunbookRunbookVersionRollbackWorkflowDetailWorkflowStepResult']:
        """
        Tasks within the Group. Provide the stepName for all applicable tasks.
        """
        return pulumi.get(self, "steps")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of the runbook.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRunbookRunbookVersionRollbackWorkflowDetailWorkflowStepResult(dict):
    def __init__(__self__, *,
                 group_name: builtins.str,
                 step_name: builtins.str,
                 steps: Sequence[builtins.str],
                 type: builtins.str):
        """
        :param builtins.str group_name: Name of the group.
        :param builtins.str step_name: The name of the task step the output variable belongs to.
        :param Sequence[builtins.str] steps: Tasks within the Group. Provide the stepName for all applicable tasks.
        :param builtins.str type: The type of the runbook.
        """
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "step_name", step_name)
        pulumi.set(__self__, "steps", steps)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> builtins.str:
        """
        Name of the group.
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> builtins.str:
        """
        The name of the task step the output variable belongs to.
        """
        return pulumi.get(self, "step_name")

    @property
    @pulumi.getter
    def steps(self) -> Sequence[builtins.str]:
        """
        Tasks within the Group. Provide the stepName for all applicable tasks.
        """
        return pulumi.get(self, "steps")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of the runbook.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRunbookRunbookVersionTaskResult(dict):
    def __init__(__self__, *,
                 output_variable_mappings: Sequence['outputs.GetRunbookRunbookVersionTaskOutputVariableMappingResult'],
                 step_name: builtins.str,
                 step_properties: Sequence['outputs.GetRunbookRunbookVersionTaskStepPropertyResult'],
                 task_record_details: Sequence['outputs.GetRunbookRunbookVersionTaskTaskRecordDetailResult']):
        """
        :param Sequence['GetRunbookRunbookVersionTaskOutputVariableMappingArgs'] output_variable_mappings: Mapping output variables of previous tasks to the input variables of the current task.
        :param builtins.str step_name: The name of the task step the output variable belongs to.
        :param Sequence['GetRunbookRunbookVersionTaskStepPropertyArgs'] step_properties: The properties of the component.
        :param Sequence['GetRunbookRunbookVersionTaskTaskRecordDetailArgs'] task_record_details: The details of the task.
        """
        pulumi.set(__self__, "output_variable_mappings", output_variable_mappings)
        pulumi.set(__self__, "step_name", step_name)
        pulumi.set(__self__, "step_properties", step_properties)
        pulumi.set(__self__, "task_record_details", task_record_details)

    @property
    @pulumi.getter(name="outputVariableMappings")
    def output_variable_mappings(self) -> Sequence['outputs.GetRunbookRunbookVersionTaskOutputVariableMappingResult']:
        """
        Mapping output variables of previous tasks to the input variables of the current task.
        """
        return pulumi.get(self, "output_variable_mappings")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> builtins.str:
        """
        The name of the task step the output variable belongs to.
        """
        return pulumi.get(self, "step_name")

    @property
    @pulumi.getter(name="stepProperties")
    def step_properties(self) -> Sequence['outputs.GetRunbookRunbookVersionTaskStepPropertyResult']:
        """
        The properties of the component.
        """
        return pulumi.get(self, "step_properties")

    @property
    @pulumi.getter(name="taskRecordDetails")
    def task_record_details(self) -> Sequence['outputs.GetRunbookRunbookVersionTaskTaskRecordDetailResult']:
        """
        The details of the task.
        """
        return pulumi.get(self, "task_record_details")


@pulumi.output_type
class GetRunbookRunbookVersionTaskOutputVariableMappingResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 output_variable_details: Sequence['outputs.GetRunbookRunbookVersionTaskOutputVariableMappingOutputVariableDetailResult']):
        """
        :param builtins.str name: The name of the task
        :param Sequence['GetRunbookRunbookVersionTaskOutputVariableMappingOutputVariableDetailArgs'] output_variable_details: The details of the output variable that will be used for mapping.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "output_variable_details", output_variable_details)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the task
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="outputVariableDetails")
    def output_variable_details(self) -> Sequence['outputs.GetRunbookRunbookVersionTaskOutputVariableMappingOutputVariableDetailResult']:
        """
        The details of the output variable that will be used for mapping.
        """
        return pulumi.get(self, "output_variable_details")


@pulumi.output_type
class GetRunbookRunbookVersionTaskOutputVariableMappingOutputVariableDetailResult(dict):
    def __init__(__self__, *,
                 output_variable_name: builtins.str,
                 step_name: builtins.str):
        """
        :param builtins.str output_variable_name: The name of the output variable whose value has to be mapped.
        :param builtins.str step_name: The name of the task step the output variable belongs to.
        """
        pulumi.set(__self__, "output_variable_name", output_variable_name)
        pulumi.set(__self__, "step_name", step_name)

    @property
    @pulumi.getter(name="outputVariableName")
    def output_variable_name(self) -> builtins.str:
        """
        The name of the output variable whose value has to be mapped.
        """
        return pulumi.get(self, "output_variable_name")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> builtins.str:
        """
        The name of the task step the output variable belongs to.
        """
        return pulumi.get(self, "step_name")


@pulumi.output_type
class GetRunbookRunbookVersionTaskStepPropertyResult(dict):
    def __init__(__self__, *,
                 action_on_failure: builtins.str,
                 notification_preferences: Sequence['outputs.GetRunbookRunbookVersionTaskStepPropertyNotificationPreferenceResult'],
                 pause_details: Sequence['outputs.GetRunbookRunbookVersionTaskStepPropertyPauseDetailResult'],
                 pre_condition: builtins.str,
                 run_ons: Sequence['outputs.GetRunbookRunbookVersionTaskStepPropertyRunOnResult']):
        """
        :param builtins.str action_on_failure: The action to be taken in case of a failure.
        :param Sequence['GetRunbookRunbookVersionTaskStepPropertyNotificationPreferenceArgs'] notification_preferences: Preferences to send notifications on the task activities.
        :param Sequence['GetRunbookRunbookVersionTaskStepPropertyPauseDetailArgs'] pause_details: Pause Details
        :param builtins.str pre_condition: Build control flow conditions that determine the relevance of the task execution.
        :param Sequence['GetRunbookRunbookVersionTaskStepPropertyRunOnArgs'] run_ons: The runon conditions
        """
        pulumi.set(__self__, "action_on_failure", action_on_failure)
        pulumi.set(__self__, "notification_preferences", notification_preferences)
        pulumi.set(__self__, "pause_details", pause_details)
        pulumi.set(__self__, "pre_condition", pre_condition)
        pulumi.set(__self__, "run_ons", run_ons)

    @property
    @pulumi.getter(name="actionOnFailure")
    def action_on_failure(self) -> builtins.str:
        """
        The action to be taken in case of a failure.
        """
        return pulumi.get(self, "action_on_failure")

    @property
    @pulumi.getter(name="notificationPreferences")
    def notification_preferences(self) -> Sequence['outputs.GetRunbookRunbookVersionTaskStepPropertyNotificationPreferenceResult']:
        """
        Preferences to send notifications on the task activities.
        """
        return pulumi.get(self, "notification_preferences")

    @property
    @pulumi.getter(name="pauseDetails")
    def pause_details(self) -> Sequence['outputs.GetRunbookRunbookVersionTaskStepPropertyPauseDetailResult']:
        """
        Pause Details
        """
        return pulumi.get(self, "pause_details")

    @property
    @pulumi.getter(name="preCondition")
    def pre_condition(self) -> builtins.str:
        """
        Build control flow conditions that determine the relevance of the task execution.
        """
        return pulumi.get(self, "pre_condition")

    @property
    @pulumi.getter(name="runOns")
    def run_ons(self) -> Sequence['outputs.GetRunbookRunbookVersionTaskStepPropertyRunOnResult']:
        """
        The runon conditions
        """
        return pulumi.get(self, "run_ons")


@pulumi.output_type
class GetRunbookRunbookVersionTaskStepPropertyNotificationPreferenceResult(dict):
    def __init__(__self__, *,
                 should_notify_on_pause: builtins.bool,
                 should_notify_on_task_failure: builtins.bool,
                 should_notify_on_task_success: builtins.bool):
        """
        :param builtins.bool should_notify_on_pause: Enables notification on pause.
        :param builtins.bool should_notify_on_task_failure: Enables or disables notification on Task Failures.
        :param builtins.bool should_notify_on_task_success: Enables or disables notification on Task Success.
        """
        pulumi.set(__self__, "should_notify_on_pause", should_notify_on_pause)
        pulumi.set(__self__, "should_notify_on_task_failure", should_notify_on_task_failure)
        pulumi.set(__self__, "should_notify_on_task_success", should_notify_on_task_success)

    @property
    @pulumi.getter(name="shouldNotifyOnPause")
    def should_notify_on_pause(self) -> builtins.bool:
        """
        Enables notification on pause.
        """
        return pulumi.get(self, "should_notify_on_pause")

    @property
    @pulumi.getter(name="shouldNotifyOnTaskFailure")
    def should_notify_on_task_failure(self) -> builtins.bool:
        """
        Enables or disables notification on Task Failures.
        """
        return pulumi.get(self, "should_notify_on_task_failure")

    @property
    @pulumi.getter(name="shouldNotifyOnTaskSuccess")
    def should_notify_on_task_success(self) -> builtins.bool:
        """
        Enables or disables notification on Task Success.
        """
        return pulumi.get(self, "should_notify_on_task_success")


@pulumi.output_type
class GetRunbookRunbookVersionTaskStepPropertyPauseDetailResult(dict):
    def __init__(__self__, *,
                 duration_in_minutes: builtins.int,
                 kind: builtins.str):
        """
        :param builtins.int duration_in_minutes: Time in minutes to apply Pause.
        :param builtins.str kind: Run on based On.
        """
        pulumi.set(__self__, "duration_in_minutes", duration_in_minutes)
        pulumi.set(__self__, "kind", kind)

    @property
    @pulumi.getter(name="durationInMinutes")
    def duration_in_minutes(self) -> builtins.int:
        """
        Time in minutes to apply Pause.
        """
        return pulumi.get(self, "duration_in_minutes")

    @property
    @pulumi.getter
    def kind(self) -> builtins.str:
        """
        Run on based On.
        """
        return pulumi.get(self, "kind")


@pulumi.output_type
class GetRunbookRunbookVersionTaskStepPropertyRunOnResult(dict):
    def __init__(__self__, *,
                 condition: builtins.str,
                 host: builtins.str,
                 kind: builtins.str,
                 previous_task_instance_details: Sequence['outputs.GetRunbookRunbookVersionTaskStepPropertyRunOnPreviousTaskInstanceDetailResult']):
        """
        :param builtins.str condition: Build control flow conditions that determine the relevance of the task execution.
        :param builtins.str host: OCID of the self hosted instance.
        :param builtins.str kind: Run on based On.
        :param Sequence['GetRunbookRunbookVersionTaskStepPropertyRunOnPreviousTaskInstanceDetailArgs'] previous_task_instance_details: Previous Task Instance Details
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "previous_task_instance_details", previous_task_instance_details)

    @property
    @pulumi.getter
    def condition(self) -> builtins.str:
        """
        Build control flow conditions that determine the relevance of the task execution.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def host(self) -> builtins.str:
        """
        OCID of the self hosted instance.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def kind(self) -> builtins.str:
        """
        Run on based On.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="previousTaskInstanceDetails")
    def previous_task_instance_details(self) -> Sequence['outputs.GetRunbookRunbookVersionTaskStepPropertyRunOnPreviousTaskInstanceDetailResult']:
        """
        Previous Task Instance Details
        """
        return pulumi.get(self, "previous_task_instance_details")


@pulumi.output_type
class GetRunbookRunbookVersionTaskStepPropertyRunOnPreviousTaskInstanceDetailResult(dict):
    def __init__(__self__, *,
                 output_variable_details: Sequence['outputs.GetRunbookRunbookVersionTaskStepPropertyRunOnPreviousTaskInstanceDetailOutputVariableDetailResult'],
                 resource_id: builtins.str,
                 resource_type: builtins.str):
        """
        :param Sequence['GetRunbookRunbookVersionTaskStepPropertyRunOnPreviousTaskInstanceDetailOutputVariableDetailArgs'] output_variable_details: The details of the output variable that will be used for mapping.
        :param builtins.str resource_id: Resource Ocid.
        :param builtins.str resource_type: Resource Type.
        """
        pulumi.set(__self__, "output_variable_details", output_variable_details)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter(name="outputVariableDetails")
    def output_variable_details(self) -> Sequence['outputs.GetRunbookRunbookVersionTaskStepPropertyRunOnPreviousTaskInstanceDetailOutputVariableDetailResult']:
        """
        The details of the output variable that will be used for mapping.
        """
        return pulumi.get(self, "output_variable_details")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> builtins.str:
        """
        Resource Ocid.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> builtins.str:
        """
        Resource Type.
        """
        return pulumi.get(self, "resource_type")


@pulumi.output_type
class GetRunbookRunbookVersionTaskStepPropertyRunOnPreviousTaskInstanceDetailOutputVariableDetailResult(dict):
    def __init__(__self__, *,
                 output_variable_name: builtins.str,
                 step_name: builtins.str):
        """
        :param builtins.str output_variable_name: The name of the output variable whose value has to be mapped.
        :param builtins.str step_name: The name of the task step the output variable belongs to.
        """
        pulumi.set(__self__, "output_variable_name", output_variable_name)
        pulumi.set(__self__, "step_name", step_name)

    @property
    @pulumi.getter(name="outputVariableName")
    def output_variable_name(self) -> builtins.str:
        """
        The name of the output variable whose value has to be mapped.
        """
        return pulumi.get(self, "output_variable_name")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> builtins.str:
        """
        The name of the task step the output variable belongs to.
        """
        return pulumi.get(self, "step_name")


@pulumi.output_type
class GetRunbookRunbookVersionTaskTaskRecordDetailResult(dict):
    def __init__(__self__, *,
                 description: builtins.str,
                 execution_details: Sequence['outputs.GetRunbookRunbookVersionTaskTaskRecordDetailExecutionDetailResult'],
                 is_apply_subject_task: builtins.bool,
                 is_copy_to_library_enabled: builtins.bool,
                 is_discovery_output_task: builtins.bool,
                 name: builtins.str,
                 os_type: builtins.str,
                 platform: builtins.str,
                 properties: Sequence['outputs.GetRunbookRunbookVersionTaskTaskRecordDetailPropertyResult'],
                 scope: builtins.str,
                 task_record_id: builtins.str):
        """
        :param builtins.str description: The description of the argument.
        :param Sequence['GetRunbookRunbookVersionTaskTaskRecordDetailExecutionDetailArgs'] execution_details: Execution details.
        :param builtins.bool is_apply_subject_task: Is this an Apply Subject Task? Ex. Patch Execution Task
        :param builtins.bool is_copy_to_library_enabled: Make a copy of this task in Library
        :param builtins.bool is_discovery_output_task: Is this a discovery output task?
        :param builtins.str name: The name of the task
        :param builtins.str os_type: The OS for the task.
        :param builtins.str platform: The platform of the runbook.
        :param Sequence['GetRunbookRunbookVersionTaskTaskRecordDetailPropertyArgs'] properties: The properties of the task.
        :param builtins.str scope: The scope of the task.
        :param builtins.str task_record_id: The ID of taskRecord.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "execution_details", execution_details)
        pulumi.set(__self__, "is_apply_subject_task", is_apply_subject_task)
        pulumi.set(__self__, "is_copy_to_library_enabled", is_copy_to_library_enabled)
        pulumi.set(__self__, "is_discovery_output_task", is_discovery_output_task)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "os_type", os_type)
        pulumi.set(__self__, "platform", platform)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "scope", scope)
        pulumi.set(__self__, "task_record_id", task_record_id)

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        The description of the argument.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="executionDetails")
    def execution_details(self) -> Sequence['outputs.GetRunbookRunbookVersionTaskTaskRecordDetailExecutionDetailResult']:
        """
        Execution details.
        """
        return pulumi.get(self, "execution_details")

    @property
    @pulumi.getter(name="isApplySubjectTask")
    def is_apply_subject_task(self) -> builtins.bool:
        """
        Is this an Apply Subject Task? Ex. Patch Execution Task
        """
        return pulumi.get(self, "is_apply_subject_task")

    @property
    @pulumi.getter(name="isCopyToLibraryEnabled")
    def is_copy_to_library_enabled(self) -> builtins.bool:
        """
        Make a copy of this task in Library
        """
        return pulumi.get(self, "is_copy_to_library_enabled")

    @property
    @pulumi.getter(name="isDiscoveryOutputTask")
    def is_discovery_output_task(self) -> builtins.bool:
        """
        Is this a discovery output task?
        """
        return pulumi.get(self, "is_discovery_output_task")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the task
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> builtins.str:
        """
        The OS for the task.
        """
        return pulumi.get(self, "os_type")

    @property
    @pulumi.getter
    def platform(self) -> builtins.str:
        """
        The platform of the runbook.
        """
        return pulumi.get(self, "platform")

    @property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetRunbookRunbookVersionTaskTaskRecordDetailPropertyResult']:
        """
        The properties of the task.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def scope(self) -> builtins.str:
        """
        The scope of the task.
        """
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter(name="taskRecordId")
    def task_record_id(self) -> builtins.str:
        """
        The ID of taskRecord.
        """
        return pulumi.get(self, "task_record_id")


@pulumi.output_type
class GetRunbookRunbookVersionTaskTaskRecordDetailExecutionDetailResult(dict):
    def __init__(__self__, *,
                 catalog_id: builtins.str,
                 command: builtins.str,
                 config_file: builtins.str,
                 contents: Sequence['outputs.GetRunbookRunbookVersionTaskTaskRecordDetailExecutionDetailContentResult'],
                 credentials: Sequence['outputs.GetRunbookRunbookVersionTaskTaskRecordDetailExecutionDetailCredentialResult'],
                 endpoint: builtins.str,
                 execution_type: builtins.str,
                 is_executable_content: builtins.bool,
                 is_locked: builtins.bool,
                 is_read_output_variable_enabled: builtins.bool,
                 target_compartment_id: builtins.str,
                 variables: Sequence['outputs.GetRunbookRunbookVersionTaskTaskRecordDetailExecutionDetailVariableResult']):
        """
        :param builtins.str command: Optional command to execute the content. You can provide any commands/arguments that can't be part of the script.
        :param builtins.str config_file: Catalog Id having config file.
        :param Sequence['GetRunbookRunbookVersionTaskTaskRecordDetailExecutionDetailContentArgs'] contents: Content Source details.
        :param Sequence['GetRunbookRunbookVersionTaskTaskRecordDetailExecutionDetailCredentialArgs'] credentials: Credentials required for executing the task.
        :param builtins.str endpoint: Endpoint to be invoked.
        :param builtins.str execution_type: The action type of the task
        :param builtins.bool is_executable_content: Is the Content an executable file?
        :param builtins.bool is_locked: Is the script locked to prevent changes directly in Object Storage?
        :param builtins.bool is_read_output_variable_enabled: Is read output variable enabled
        :param builtins.str target_compartment_id: OCID of the compartment to which the resource belongs to.
        :param Sequence['GetRunbookRunbookVersionTaskTaskRecordDetailExecutionDetailVariableArgs'] variables: The variable of the task. At least one of the dynamicArguments or output needs to be provided.
        """
        pulumi.set(__self__, "catalog_id", catalog_id)
        pulumi.set(__self__, "command", command)
        pulumi.set(__self__, "config_file", config_file)
        pulumi.set(__self__, "contents", contents)
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "execution_type", execution_type)
        pulumi.set(__self__, "is_executable_content", is_executable_content)
        pulumi.set(__self__, "is_locked", is_locked)
        pulumi.set(__self__, "is_read_output_variable_enabled", is_read_output_variable_enabled)
        pulumi.set(__self__, "target_compartment_id", target_compartment_id)
        pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> builtins.str:
        return pulumi.get(self, "catalog_id")

    @property
    @pulumi.getter
    def command(self) -> builtins.str:
        """
        Optional command to execute the content. You can provide any commands/arguments that can't be part of the script.
        """
        return pulumi.get(self, "command")

    @property
    @pulumi.getter(name="configFile")
    def config_file(self) -> builtins.str:
        """
        Catalog Id having config file.
        """
        return pulumi.get(self, "config_file")

    @property
    @pulumi.getter
    def contents(self) -> Sequence['outputs.GetRunbookRunbookVersionTaskTaskRecordDetailExecutionDetailContentResult']:
        """
        Content Source details.
        """
        return pulumi.get(self, "contents")

    @property
    @pulumi.getter
    def credentials(self) -> Sequence['outputs.GetRunbookRunbookVersionTaskTaskRecordDetailExecutionDetailCredentialResult']:
        """
        Credentials required for executing the task.
        """
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter
    def endpoint(self) -> builtins.str:
        """
        Endpoint to be invoked.
        """
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="executionType")
    def execution_type(self) -> builtins.str:
        """
        The action type of the task
        """
        return pulumi.get(self, "execution_type")

    @property
    @pulumi.getter(name="isExecutableContent")
    def is_executable_content(self) -> builtins.bool:
        """
        Is the Content an executable file?
        """
        return pulumi.get(self, "is_executable_content")

    @property
    @pulumi.getter(name="isLocked")
    def is_locked(self) -> builtins.bool:
        """
        Is the script locked to prevent changes directly in Object Storage?
        """
        return pulumi.get(self, "is_locked")

    @property
    @pulumi.getter(name="isReadOutputVariableEnabled")
    def is_read_output_variable_enabled(self) -> builtins.bool:
        """
        Is read output variable enabled
        """
        return pulumi.get(self, "is_read_output_variable_enabled")

    @property
    @pulumi.getter(name="targetCompartmentId")
    def target_compartment_id(self) -> builtins.str:
        """
        OCID of the compartment to which the resource belongs to.
        """
        return pulumi.get(self, "target_compartment_id")

    @property
    @pulumi.getter
    def variables(self) -> Sequence['outputs.GetRunbookRunbookVersionTaskTaskRecordDetailExecutionDetailVariableResult']:
        """
        The variable of the task. At least one of the dynamicArguments or output needs to be provided.
        """
        return pulumi.get(self, "variables")


@pulumi.output_type
class GetRunbookRunbookVersionTaskTaskRecordDetailExecutionDetailContentResult(dict):
    def __init__(__self__, *,
                 bucket: builtins.str,
                 catalog_id: builtins.str,
                 checksum: builtins.str,
                 namespace: builtins.str,
                 object: builtins.str,
                 source_type: builtins.str):
        """
        :param builtins.str bucket: Bucket Name.
        :param builtins.str checksum: md5 checksum of the artifact.
        :param builtins.str namespace: Namespace.
        :param builtins.str object: Object Name.
        :param builtins.str source_type: Content Source type details.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "catalog_id", catalog_id)
        pulumi.set(__self__, "checksum", checksum)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter
    def bucket(self) -> builtins.str:
        """
        Bucket Name.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> builtins.str:
        return pulumi.get(self, "catalog_id")

    @property
    @pulumi.getter
    def checksum(self) -> builtins.str:
        """
        md5 checksum of the artifact.
        """
        return pulumi.get(self, "checksum")

    @property
    @pulumi.getter
    def namespace(self) -> builtins.str:
        """
        Namespace.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> builtins.str:
        """
        Object Name.
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> builtins.str:
        """
        Content Source type details.
        """
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetRunbookRunbookVersionTaskTaskRecordDetailExecutionDetailCredentialResult(dict):
    def __init__(__self__, *,
                 display_name: builtins.str,
                 id: builtins.str):
        """
        :param builtins.str display_name: A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        :param builtins.str id: The OCID of the resource.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The OCID of the resource.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetRunbookRunbookVersionTaskTaskRecordDetailExecutionDetailVariableResult(dict):
    def __init__(__self__, *,
                 input_variables: Sequence['outputs.GetRunbookRunbookVersionTaskTaskRecordDetailExecutionDetailVariableInputVariableResult'],
                 output_variables: Sequence[builtins.str]):
        """
        :param Sequence['GetRunbookRunbookVersionTaskTaskRecordDetailExecutionDetailVariableInputVariableArgs'] input_variables: The input variables for the task.
        :param Sequence[builtins.str] output_variables: The list of output variables.
        """
        pulumi.set(__self__, "input_variables", input_variables)
        pulumi.set(__self__, "output_variables", output_variables)

    @property
    @pulumi.getter(name="inputVariables")
    def input_variables(self) -> Sequence['outputs.GetRunbookRunbookVersionTaskTaskRecordDetailExecutionDetailVariableInputVariableResult']:
        """
        The input variables for the task.
        """
        return pulumi.get(self, "input_variables")

    @property
    @pulumi.getter(name="outputVariables")
    def output_variables(self) -> Sequence[builtins.str]:
        """
        The list of output variables.
        """
        return pulumi.get(self, "output_variables")


@pulumi.output_type
class GetRunbookRunbookVersionTaskTaskRecordDetailExecutionDetailVariableInputVariableResult(dict):
    def __init__(__self__, *,
                 description: builtins.str,
                 name: builtins.str,
                 type: builtins.str):
        """
        :param builtins.str description: The description of the argument.
        :param builtins.str name: The name of the task
        :param builtins.str type: The type of the runbook.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        The description of the argument.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the task
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of the runbook.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRunbookRunbookVersionTaskTaskRecordDetailPropertyResult(dict):
    def __init__(__self__, *,
                 num_retries: builtins.int,
                 timeout_in_seconds: builtins.int):
        """
        :param builtins.int num_retries: The number of retries allowed.
        :param builtins.int timeout_in_seconds: The timeout in seconds for the task.
        """
        pulumi.set(__self__, "num_retries", num_retries)
        pulumi.set(__self__, "timeout_in_seconds", timeout_in_seconds)

    @property
    @pulumi.getter(name="numRetries")
    def num_retries(self) -> builtins.int:
        """
        The number of retries allowed.
        """
        return pulumi.get(self, "num_retries")

    @property
    @pulumi.getter(name="timeoutInSeconds")
    def timeout_in_seconds(self) -> builtins.int:
        """
        The timeout in seconds for the task.
        """
        return pulumi.get(self, "timeout_in_seconds")


@pulumi.output_type
class GetRunbookVersionExecutionWorkflowDetailResult(dict):
    def __init__(__self__, *,
                 workflows: Sequence['outputs.GetRunbookVersionExecutionWorkflowDetailWorkflowResult']):
        """
        :param Sequence['GetRunbookVersionExecutionWorkflowDetailWorkflowArgs'] workflows: Rollback Workflow for the runbook.
        """
        pulumi.set(__self__, "workflows", workflows)

    @property
    @pulumi.getter
    def workflows(self) -> Sequence['outputs.GetRunbookVersionExecutionWorkflowDetailWorkflowResult']:
        """
        Rollback Workflow for the runbook.
        """
        return pulumi.get(self, "workflows")


@pulumi.output_type
class GetRunbookVersionExecutionWorkflowDetailWorkflowResult(dict):
    def __init__(__self__, *,
                 group_name: builtins.str,
                 steps: Sequence['outputs.GetRunbookVersionExecutionWorkflowDetailWorkflowStepResult'],
                 type: builtins.str):
        """
        :param builtins.str group_name: Name of the group.
        :param Sequence['GetRunbookVersionExecutionWorkflowDetailWorkflowStepArgs'] steps: Tasks within the Group. Provide the stepName for all applicable tasks.
        :param builtins.str type: Input argument Type.
        """
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "steps", steps)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> builtins.str:
        """
        Name of the group.
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter
    def steps(self) -> Sequence['outputs.GetRunbookVersionExecutionWorkflowDetailWorkflowStepResult']:
        """
        Tasks within the Group. Provide the stepName for all applicable tasks.
        """
        return pulumi.get(self, "steps")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Input argument Type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRunbookVersionExecutionWorkflowDetailWorkflowStepResult(dict):
    def __init__(__self__, *,
                 group_name: builtins.str,
                 step_name: builtins.str,
                 steps: Sequence[builtins.str],
                 type: builtins.str):
        """
        :param builtins.str group_name: Name of the group.
        :param builtins.str step_name: The name of the task step the output variable belongs to.
        :param Sequence[builtins.str] steps: Tasks within the Group. Provide the stepName for all applicable tasks.
        :param builtins.str type: Input argument Type.
        """
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "step_name", step_name)
        pulumi.set(__self__, "steps", steps)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> builtins.str:
        """
        Name of the group.
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> builtins.str:
        """
        The name of the task step the output variable belongs to.
        """
        return pulumi.get(self, "step_name")

    @property
    @pulumi.getter
    def steps(self) -> Sequence[builtins.str]:
        """
        Tasks within the Group. Provide the stepName for all applicable tasks.
        """
        return pulumi.get(self, "steps")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Input argument Type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRunbookVersionGroupResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 properties: Sequence['outputs.GetRunbookVersionGroupPropertyResult'],
                 type: builtins.str):
        """
        :param builtins.str name: The name of the task
        :param Sequence['GetRunbookVersionGroupPropertyArgs'] properties: The properties of the task.
        :param builtins.str type: Input argument Type.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the task
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetRunbookVersionGroupPropertyResult']:
        """
        The properties of the task.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Input argument Type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRunbookVersionGroupPropertyResult(dict):
    def __init__(__self__, *,
                 action_on_failure: builtins.str,
                 notification_preferences: Sequence['outputs.GetRunbookVersionGroupPropertyNotificationPreferenceResult'],
                 pause_details: Sequence['outputs.GetRunbookVersionGroupPropertyPauseDetailResult'],
                 pre_condition: builtins.str,
                 run_ons: Sequence['outputs.GetRunbookVersionGroupPropertyRunOnResult']):
        """
        :param builtins.str action_on_failure: The action to be taken in case of a failure.
        :param Sequence['GetRunbookVersionGroupPropertyNotificationPreferenceArgs'] notification_preferences: Preferences to send notifications on the task activities.
        :param Sequence['GetRunbookVersionGroupPropertyPauseDetailArgs'] pause_details: Pause Details
        :param builtins.str pre_condition: Build control flow conditions that determine the relevance of the task execution.
        :param Sequence['GetRunbookVersionGroupPropertyRunOnArgs'] run_ons: The runon conditions
        """
        pulumi.set(__self__, "action_on_failure", action_on_failure)
        pulumi.set(__self__, "notification_preferences", notification_preferences)
        pulumi.set(__self__, "pause_details", pause_details)
        pulumi.set(__self__, "pre_condition", pre_condition)
        pulumi.set(__self__, "run_ons", run_ons)

    @property
    @pulumi.getter(name="actionOnFailure")
    def action_on_failure(self) -> builtins.str:
        """
        The action to be taken in case of a failure.
        """
        return pulumi.get(self, "action_on_failure")

    @property
    @pulumi.getter(name="notificationPreferences")
    def notification_preferences(self) -> Sequence['outputs.GetRunbookVersionGroupPropertyNotificationPreferenceResult']:
        """
        Preferences to send notifications on the task activities.
        """
        return pulumi.get(self, "notification_preferences")

    @property
    @pulumi.getter(name="pauseDetails")
    def pause_details(self) -> Sequence['outputs.GetRunbookVersionGroupPropertyPauseDetailResult']:
        """
        Pause Details
        """
        return pulumi.get(self, "pause_details")

    @property
    @pulumi.getter(name="preCondition")
    def pre_condition(self) -> builtins.str:
        """
        Build control flow conditions that determine the relevance of the task execution.
        """
        return pulumi.get(self, "pre_condition")

    @property
    @pulumi.getter(name="runOns")
    def run_ons(self) -> Sequence['outputs.GetRunbookVersionGroupPropertyRunOnResult']:
        """
        The runon conditions
        """
        return pulumi.get(self, "run_ons")


@pulumi.output_type
class GetRunbookVersionGroupPropertyNotificationPreferenceResult(dict):
    def __init__(__self__, *,
                 should_notify_on_pause: builtins.bool,
                 should_notify_on_task_failure: builtins.bool,
                 should_notify_on_task_success: builtins.bool):
        """
        :param builtins.bool should_notify_on_pause: Enables notification on pause.
        :param builtins.bool should_notify_on_task_failure: Enables or disables notification on Task Failures.
        :param builtins.bool should_notify_on_task_success: Enables or disables notification on Task Success.
        """
        pulumi.set(__self__, "should_notify_on_pause", should_notify_on_pause)
        pulumi.set(__self__, "should_notify_on_task_failure", should_notify_on_task_failure)
        pulumi.set(__self__, "should_notify_on_task_success", should_notify_on_task_success)

    @property
    @pulumi.getter(name="shouldNotifyOnPause")
    def should_notify_on_pause(self) -> builtins.bool:
        """
        Enables notification on pause.
        """
        return pulumi.get(self, "should_notify_on_pause")

    @property
    @pulumi.getter(name="shouldNotifyOnTaskFailure")
    def should_notify_on_task_failure(self) -> builtins.bool:
        """
        Enables or disables notification on Task Failures.
        """
        return pulumi.get(self, "should_notify_on_task_failure")

    @property
    @pulumi.getter(name="shouldNotifyOnTaskSuccess")
    def should_notify_on_task_success(self) -> builtins.bool:
        """
        Enables or disables notification on Task Success.
        """
        return pulumi.get(self, "should_notify_on_task_success")


@pulumi.output_type
class GetRunbookVersionGroupPropertyPauseDetailResult(dict):
    def __init__(__self__, *,
                 duration_in_minutes: builtins.int,
                 kind: builtins.str):
        """
        :param builtins.int duration_in_minutes: Time in minutes to apply Pause.
        :param builtins.str kind: Run on based On.
        """
        pulumi.set(__self__, "duration_in_minutes", duration_in_minutes)
        pulumi.set(__self__, "kind", kind)

    @property
    @pulumi.getter(name="durationInMinutes")
    def duration_in_minutes(self) -> builtins.int:
        """
        Time in minutes to apply Pause.
        """
        return pulumi.get(self, "duration_in_minutes")

    @property
    @pulumi.getter
    def kind(self) -> builtins.str:
        """
        Run on based On.
        """
        return pulumi.get(self, "kind")


@pulumi.output_type
class GetRunbookVersionGroupPropertyRunOnResult(dict):
    def __init__(__self__, *,
                 condition: builtins.str,
                 host: builtins.str,
                 kind: builtins.str,
                 previous_task_instance_details: Sequence['outputs.GetRunbookVersionGroupPropertyRunOnPreviousTaskInstanceDetailResult']):
        """
        :param builtins.str condition: Build control flow conditions that determine the relevance of the task execution.
        :param builtins.str host: OCID of the self hosted instance.
        :param builtins.str kind: Run on based On.
        :param Sequence['GetRunbookVersionGroupPropertyRunOnPreviousTaskInstanceDetailArgs'] previous_task_instance_details: Previous Task Instance Details
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "previous_task_instance_details", previous_task_instance_details)

    @property
    @pulumi.getter
    def condition(self) -> builtins.str:
        """
        Build control flow conditions that determine the relevance of the task execution.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def host(self) -> builtins.str:
        """
        OCID of the self hosted instance.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def kind(self) -> builtins.str:
        """
        Run on based On.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="previousTaskInstanceDetails")
    def previous_task_instance_details(self) -> Sequence['outputs.GetRunbookVersionGroupPropertyRunOnPreviousTaskInstanceDetailResult']:
        """
        Previous Task Instance Details
        """
        return pulumi.get(self, "previous_task_instance_details")


@pulumi.output_type
class GetRunbookVersionGroupPropertyRunOnPreviousTaskInstanceDetailResult(dict):
    def __init__(__self__, *,
                 output_variable_details: Sequence['outputs.GetRunbookVersionGroupPropertyRunOnPreviousTaskInstanceDetailOutputVariableDetailResult'],
                 resource_id: builtins.str,
                 resource_type: builtins.str):
        """
        :param Sequence['GetRunbookVersionGroupPropertyRunOnPreviousTaskInstanceDetailOutputVariableDetailArgs'] output_variable_details: The details of the output variable that will be used for mapping.
        :param builtins.str resource_id: Resource Ocid.
        :param builtins.str resource_type: Resource Type.
        """
        pulumi.set(__self__, "output_variable_details", output_variable_details)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter(name="outputVariableDetails")
    def output_variable_details(self) -> Sequence['outputs.GetRunbookVersionGroupPropertyRunOnPreviousTaskInstanceDetailOutputVariableDetailResult']:
        """
        The details of the output variable that will be used for mapping.
        """
        return pulumi.get(self, "output_variable_details")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> builtins.str:
        """
        Resource Ocid.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> builtins.str:
        """
        Resource Type.
        """
        return pulumi.get(self, "resource_type")


@pulumi.output_type
class GetRunbookVersionGroupPropertyRunOnPreviousTaskInstanceDetailOutputVariableDetailResult(dict):
    def __init__(__self__, *,
                 output_variable_name: builtins.str,
                 step_name: builtins.str):
        """
        :param builtins.str output_variable_name: The name of the output variable whose value has to be mapped.
        :param builtins.str step_name: The name of the task step the output variable belongs to.
        """
        pulumi.set(__self__, "output_variable_name", output_variable_name)
        pulumi.set(__self__, "step_name", step_name)

    @property
    @pulumi.getter(name="outputVariableName")
    def output_variable_name(self) -> builtins.str:
        """
        The name of the output variable whose value has to be mapped.
        """
        return pulumi.get(self, "output_variable_name")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> builtins.str:
        """
        The name of the task step the output variable belongs to.
        """
        return pulumi.get(self, "step_name")


@pulumi.output_type
class GetRunbookVersionRollbackWorkflowDetailResult(dict):
    def __init__(__self__, *,
                 scope: builtins.str,
                 workflows: Sequence['outputs.GetRunbookVersionRollbackWorkflowDetailWorkflowResult']):
        """
        :param builtins.str scope: The scope of the task.
        :param Sequence['GetRunbookVersionRollbackWorkflowDetailWorkflowArgs'] workflows: Rollback Workflow for the runbook.
        """
        pulumi.set(__self__, "scope", scope)
        pulumi.set(__self__, "workflows", workflows)

    @property
    @pulumi.getter
    def scope(self) -> builtins.str:
        """
        The scope of the task.
        """
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter
    def workflows(self) -> Sequence['outputs.GetRunbookVersionRollbackWorkflowDetailWorkflowResult']:
        """
        Rollback Workflow for the runbook.
        """
        return pulumi.get(self, "workflows")


@pulumi.output_type
class GetRunbookVersionRollbackWorkflowDetailWorkflowResult(dict):
    def __init__(__self__, *,
                 group_name: builtins.str,
                 steps: Sequence['outputs.GetRunbookVersionRollbackWorkflowDetailWorkflowStepResult'],
                 type: builtins.str):
        """
        :param builtins.str group_name: Name of the group.
        :param Sequence['GetRunbookVersionRollbackWorkflowDetailWorkflowStepArgs'] steps: Tasks within the Group. Provide the stepName for all applicable tasks.
        :param builtins.str type: Input argument Type.
        """
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "steps", steps)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> builtins.str:
        """
        Name of the group.
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter
    def steps(self) -> Sequence['outputs.GetRunbookVersionRollbackWorkflowDetailWorkflowStepResult']:
        """
        Tasks within the Group. Provide the stepName for all applicable tasks.
        """
        return pulumi.get(self, "steps")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Input argument Type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRunbookVersionRollbackWorkflowDetailWorkflowStepResult(dict):
    def __init__(__self__, *,
                 group_name: builtins.str,
                 step_name: builtins.str,
                 steps: Sequence[builtins.str],
                 type: builtins.str):
        """
        :param builtins.str group_name: Name of the group.
        :param builtins.str step_name: The name of the task step the output variable belongs to.
        :param Sequence[builtins.str] steps: Tasks within the Group. Provide the stepName for all applicable tasks.
        :param builtins.str type: Input argument Type.
        """
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "step_name", step_name)
        pulumi.set(__self__, "steps", steps)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> builtins.str:
        """
        Name of the group.
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> builtins.str:
        """
        The name of the task step the output variable belongs to.
        """
        return pulumi.get(self, "step_name")

    @property
    @pulumi.getter
    def steps(self) -> Sequence[builtins.str]:
        """
        Tasks within the Group. Provide the stepName for all applicable tasks.
        """
        return pulumi.get(self, "steps")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Input argument Type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRunbookVersionTaskResult(dict):
    def __init__(__self__, *,
                 output_variable_mappings: Sequence['outputs.GetRunbookVersionTaskOutputVariableMappingResult'],
                 step_name: builtins.str,
                 step_properties: Sequence['outputs.GetRunbookVersionTaskStepPropertyResult'],
                 task_record_details: Sequence['outputs.GetRunbookVersionTaskTaskRecordDetailResult']):
        """
        :param Sequence['GetRunbookVersionTaskOutputVariableMappingArgs'] output_variable_mappings: Mapping output variables of previous tasks to the input variables of the current task.
        :param builtins.str step_name: The name of the task step the output variable belongs to.
        :param Sequence['GetRunbookVersionTaskStepPropertyArgs'] step_properties: The properties of the component.
        :param Sequence['GetRunbookVersionTaskTaskRecordDetailArgs'] task_record_details: The details of the task.
        """
        pulumi.set(__self__, "output_variable_mappings", output_variable_mappings)
        pulumi.set(__self__, "step_name", step_name)
        pulumi.set(__self__, "step_properties", step_properties)
        pulumi.set(__self__, "task_record_details", task_record_details)

    @property
    @pulumi.getter(name="outputVariableMappings")
    def output_variable_mappings(self) -> Sequence['outputs.GetRunbookVersionTaskOutputVariableMappingResult']:
        """
        Mapping output variables of previous tasks to the input variables of the current task.
        """
        return pulumi.get(self, "output_variable_mappings")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> builtins.str:
        """
        The name of the task step the output variable belongs to.
        """
        return pulumi.get(self, "step_name")

    @property
    @pulumi.getter(name="stepProperties")
    def step_properties(self) -> Sequence['outputs.GetRunbookVersionTaskStepPropertyResult']:
        """
        The properties of the component.
        """
        return pulumi.get(self, "step_properties")

    @property
    @pulumi.getter(name="taskRecordDetails")
    def task_record_details(self) -> Sequence['outputs.GetRunbookVersionTaskTaskRecordDetailResult']:
        """
        The details of the task.
        """
        return pulumi.get(self, "task_record_details")


@pulumi.output_type
class GetRunbookVersionTaskOutputVariableMappingResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 output_variable_details: Sequence['outputs.GetRunbookVersionTaskOutputVariableMappingOutputVariableDetailResult']):
        """
        :param builtins.str name: The name of the task
        :param Sequence['GetRunbookVersionTaskOutputVariableMappingOutputVariableDetailArgs'] output_variable_details: The details of the output variable that will be used for mapping.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "output_variable_details", output_variable_details)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the task
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="outputVariableDetails")
    def output_variable_details(self) -> Sequence['outputs.GetRunbookVersionTaskOutputVariableMappingOutputVariableDetailResult']:
        """
        The details of the output variable that will be used for mapping.
        """
        return pulumi.get(self, "output_variable_details")


@pulumi.output_type
class GetRunbookVersionTaskOutputVariableMappingOutputVariableDetailResult(dict):
    def __init__(__self__, *,
                 output_variable_name: builtins.str,
                 step_name: builtins.str):
        """
        :param builtins.str output_variable_name: The name of the output variable whose value has to be mapped.
        :param builtins.str step_name: The name of the task step the output variable belongs to.
        """
        pulumi.set(__self__, "output_variable_name", output_variable_name)
        pulumi.set(__self__, "step_name", step_name)

    @property
    @pulumi.getter(name="outputVariableName")
    def output_variable_name(self) -> builtins.str:
        """
        The name of the output variable whose value has to be mapped.
        """
        return pulumi.get(self, "output_variable_name")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> builtins.str:
        """
        The name of the task step the output variable belongs to.
        """
        return pulumi.get(self, "step_name")


@pulumi.output_type
class GetRunbookVersionTaskStepPropertyResult(dict):
    def __init__(__self__, *,
                 action_on_failure: builtins.str,
                 notification_preferences: Sequence['outputs.GetRunbookVersionTaskStepPropertyNotificationPreferenceResult'],
                 pause_details: Sequence['outputs.GetRunbookVersionTaskStepPropertyPauseDetailResult'],
                 pre_condition: builtins.str,
                 run_ons: Sequence['outputs.GetRunbookVersionTaskStepPropertyRunOnResult']):
        """
        :param builtins.str action_on_failure: The action to be taken in case of a failure.
        :param Sequence['GetRunbookVersionTaskStepPropertyNotificationPreferenceArgs'] notification_preferences: Preferences to send notifications on the task activities.
        :param Sequence['GetRunbookVersionTaskStepPropertyPauseDetailArgs'] pause_details: Pause Details
        :param builtins.str pre_condition: Build control flow conditions that determine the relevance of the task execution.
        :param Sequence['GetRunbookVersionTaskStepPropertyRunOnArgs'] run_ons: The runon conditions
        """
        pulumi.set(__self__, "action_on_failure", action_on_failure)
        pulumi.set(__self__, "notification_preferences", notification_preferences)
        pulumi.set(__self__, "pause_details", pause_details)
        pulumi.set(__self__, "pre_condition", pre_condition)
        pulumi.set(__self__, "run_ons", run_ons)

    @property
    @pulumi.getter(name="actionOnFailure")
    def action_on_failure(self) -> builtins.str:
        """
        The action to be taken in case of a failure.
        """
        return pulumi.get(self, "action_on_failure")

    @property
    @pulumi.getter(name="notificationPreferences")
    def notification_preferences(self) -> Sequence['outputs.GetRunbookVersionTaskStepPropertyNotificationPreferenceResult']:
        """
        Preferences to send notifications on the task activities.
        """
        return pulumi.get(self, "notification_preferences")

    @property
    @pulumi.getter(name="pauseDetails")
    def pause_details(self) -> Sequence['outputs.GetRunbookVersionTaskStepPropertyPauseDetailResult']:
        """
        Pause Details
        """
        return pulumi.get(self, "pause_details")

    @property
    @pulumi.getter(name="preCondition")
    def pre_condition(self) -> builtins.str:
        """
        Build control flow conditions that determine the relevance of the task execution.
        """
        return pulumi.get(self, "pre_condition")

    @property
    @pulumi.getter(name="runOns")
    def run_ons(self) -> Sequence['outputs.GetRunbookVersionTaskStepPropertyRunOnResult']:
        """
        The runon conditions
        """
        return pulumi.get(self, "run_ons")


@pulumi.output_type
class GetRunbookVersionTaskStepPropertyNotificationPreferenceResult(dict):
    def __init__(__self__, *,
                 should_notify_on_pause: builtins.bool,
                 should_notify_on_task_failure: builtins.bool,
                 should_notify_on_task_success: builtins.bool):
        """
        :param builtins.bool should_notify_on_pause: Enables notification on pause.
        :param builtins.bool should_notify_on_task_failure: Enables or disables notification on Task Failures.
        :param builtins.bool should_notify_on_task_success: Enables or disables notification on Task Success.
        """
        pulumi.set(__self__, "should_notify_on_pause", should_notify_on_pause)
        pulumi.set(__self__, "should_notify_on_task_failure", should_notify_on_task_failure)
        pulumi.set(__self__, "should_notify_on_task_success", should_notify_on_task_success)

    @property
    @pulumi.getter(name="shouldNotifyOnPause")
    def should_notify_on_pause(self) -> builtins.bool:
        """
        Enables notification on pause.
        """
        return pulumi.get(self, "should_notify_on_pause")

    @property
    @pulumi.getter(name="shouldNotifyOnTaskFailure")
    def should_notify_on_task_failure(self) -> builtins.bool:
        """
        Enables or disables notification on Task Failures.
        """
        return pulumi.get(self, "should_notify_on_task_failure")

    @property
    @pulumi.getter(name="shouldNotifyOnTaskSuccess")
    def should_notify_on_task_success(self) -> builtins.bool:
        """
        Enables or disables notification on Task Success.
        """
        return pulumi.get(self, "should_notify_on_task_success")


@pulumi.output_type
class GetRunbookVersionTaskStepPropertyPauseDetailResult(dict):
    def __init__(__self__, *,
                 duration_in_minutes: builtins.int,
                 kind: builtins.str):
        """
        :param builtins.int duration_in_minutes: Time in minutes to apply Pause.
        :param builtins.str kind: Run on based On.
        """
        pulumi.set(__self__, "duration_in_minutes", duration_in_minutes)
        pulumi.set(__self__, "kind", kind)

    @property
    @pulumi.getter(name="durationInMinutes")
    def duration_in_minutes(self) -> builtins.int:
        """
        Time in minutes to apply Pause.
        """
        return pulumi.get(self, "duration_in_minutes")

    @property
    @pulumi.getter
    def kind(self) -> builtins.str:
        """
        Run on based On.
        """
        return pulumi.get(self, "kind")


@pulumi.output_type
class GetRunbookVersionTaskStepPropertyRunOnResult(dict):
    def __init__(__self__, *,
                 condition: builtins.str,
                 host: builtins.str,
                 kind: builtins.str,
                 previous_task_instance_details: Sequence['outputs.GetRunbookVersionTaskStepPropertyRunOnPreviousTaskInstanceDetailResult']):
        """
        :param builtins.str condition: Build control flow conditions that determine the relevance of the task execution.
        :param builtins.str host: OCID of the self hosted instance.
        :param builtins.str kind: Run on based On.
        :param Sequence['GetRunbookVersionTaskStepPropertyRunOnPreviousTaskInstanceDetailArgs'] previous_task_instance_details: Previous Task Instance Details
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "previous_task_instance_details", previous_task_instance_details)

    @property
    @pulumi.getter
    def condition(self) -> builtins.str:
        """
        Build control flow conditions that determine the relevance of the task execution.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def host(self) -> builtins.str:
        """
        OCID of the self hosted instance.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def kind(self) -> builtins.str:
        """
        Run on based On.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="previousTaskInstanceDetails")
    def previous_task_instance_details(self) -> Sequence['outputs.GetRunbookVersionTaskStepPropertyRunOnPreviousTaskInstanceDetailResult']:
        """
        Previous Task Instance Details
        """
        return pulumi.get(self, "previous_task_instance_details")


@pulumi.output_type
class GetRunbookVersionTaskStepPropertyRunOnPreviousTaskInstanceDetailResult(dict):
    def __init__(__self__, *,
                 output_variable_details: Sequence['outputs.GetRunbookVersionTaskStepPropertyRunOnPreviousTaskInstanceDetailOutputVariableDetailResult'],
                 resource_id: builtins.str,
                 resource_type: builtins.str):
        """
        :param Sequence['GetRunbookVersionTaskStepPropertyRunOnPreviousTaskInstanceDetailOutputVariableDetailArgs'] output_variable_details: The details of the output variable that will be used for mapping.
        :param builtins.str resource_id: Resource Ocid.
        :param builtins.str resource_type: Resource Type.
        """
        pulumi.set(__self__, "output_variable_details", output_variable_details)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter(name="outputVariableDetails")
    def output_variable_details(self) -> Sequence['outputs.GetRunbookVersionTaskStepPropertyRunOnPreviousTaskInstanceDetailOutputVariableDetailResult']:
        """
        The details of the output variable that will be used for mapping.
        """
        return pulumi.get(self, "output_variable_details")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> builtins.str:
        """
        Resource Ocid.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> builtins.str:
        """
        Resource Type.
        """
        return pulumi.get(self, "resource_type")


@pulumi.output_type
class GetRunbookVersionTaskStepPropertyRunOnPreviousTaskInstanceDetailOutputVariableDetailResult(dict):
    def __init__(__self__, *,
                 output_variable_name: builtins.str,
                 step_name: builtins.str):
        """
        :param builtins.str output_variable_name: The name of the output variable whose value has to be mapped.
        :param builtins.str step_name: The name of the task step the output variable belongs to.
        """
        pulumi.set(__self__, "output_variable_name", output_variable_name)
        pulumi.set(__self__, "step_name", step_name)

    @property
    @pulumi.getter(name="outputVariableName")
    def output_variable_name(self) -> builtins.str:
        """
        The name of the output variable whose value has to be mapped.
        """
        return pulumi.get(self, "output_variable_name")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> builtins.str:
        """
        The name of the task step the output variable belongs to.
        """
        return pulumi.get(self, "step_name")


@pulumi.output_type
class GetRunbookVersionTaskTaskRecordDetailResult(dict):
    def __init__(__self__, *,
                 description: builtins.str,
                 execution_details: Sequence['outputs.GetRunbookVersionTaskTaskRecordDetailExecutionDetailResult'],
                 is_apply_subject_task: builtins.bool,
                 is_copy_to_library_enabled: builtins.bool,
                 is_discovery_output_task: builtins.bool,
                 name: builtins.str,
                 os_type: builtins.str,
                 platform: builtins.str,
                 properties: Sequence['outputs.GetRunbookVersionTaskTaskRecordDetailPropertyResult'],
                 scope: builtins.str,
                 task_record_id: builtins.str):
        """
        :param builtins.str description: The description of the argument.
        :param Sequence['GetRunbookVersionTaskTaskRecordDetailExecutionDetailArgs'] execution_details: Execution details.
        :param builtins.bool is_apply_subject_task: Is this an Apply Subject Task? Ex. Patch Execution Task
        :param builtins.bool is_copy_to_library_enabled: Make a copy of this task in Library
        :param builtins.bool is_discovery_output_task: Is this a discovery output task?
        :param builtins.str name: The name of the task
        :param builtins.str os_type: The OS for the task.
        :param builtins.str platform: The platform of the runbook.
        :param Sequence['GetRunbookVersionTaskTaskRecordDetailPropertyArgs'] properties: The properties of the task.
        :param builtins.str scope: The scope of the task.
        :param builtins.str task_record_id: The ID of taskRecord.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "execution_details", execution_details)
        pulumi.set(__self__, "is_apply_subject_task", is_apply_subject_task)
        pulumi.set(__self__, "is_copy_to_library_enabled", is_copy_to_library_enabled)
        pulumi.set(__self__, "is_discovery_output_task", is_discovery_output_task)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "os_type", os_type)
        pulumi.set(__self__, "platform", platform)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "scope", scope)
        pulumi.set(__self__, "task_record_id", task_record_id)

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        The description of the argument.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="executionDetails")
    def execution_details(self) -> Sequence['outputs.GetRunbookVersionTaskTaskRecordDetailExecutionDetailResult']:
        """
        Execution details.
        """
        return pulumi.get(self, "execution_details")

    @property
    @pulumi.getter(name="isApplySubjectTask")
    def is_apply_subject_task(self) -> builtins.bool:
        """
        Is this an Apply Subject Task? Ex. Patch Execution Task
        """
        return pulumi.get(self, "is_apply_subject_task")

    @property
    @pulumi.getter(name="isCopyToLibraryEnabled")
    def is_copy_to_library_enabled(self) -> builtins.bool:
        """
        Make a copy of this task in Library
        """
        return pulumi.get(self, "is_copy_to_library_enabled")

    @property
    @pulumi.getter(name="isDiscoveryOutputTask")
    def is_discovery_output_task(self) -> builtins.bool:
        """
        Is this a discovery output task?
        """
        return pulumi.get(self, "is_discovery_output_task")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the task
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> builtins.str:
        """
        The OS for the task.
        """
        return pulumi.get(self, "os_type")

    @property
    @pulumi.getter
    def platform(self) -> builtins.str:
        """
        The platform of the runbook.
        """
        return pulumi.get(self, "platform")

    @property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetRunbookVersionTaskTaskRecordDetailPropertyResult']:
        """
        The properties of the task.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def scope(self) -> builtins.str:
        """
        The scope of the task.
        """
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter(name="taskRecordId")
    def task_record_id(self) -> builtins.str:
        """
        The ID of taskRecord.
        """
        return pulumi.get(self, "task_record_id")


@pulumi.output_type
class GetRunbookVersionTaskTaskRecordDetailExecutionDetailResult(dict):
    def __init__(__self__, *,
                 catalog_id: builtins.str,
                 command: builtins.str,
                 config_file: builtins.str,
                 contents: Sequence['outputs.GetRunbookVersionTaskTaskRecordDetailExecutionDetailContentResult'],
                 credentials: Sequence['outputs.GetRunbookVersionTaskTaskRecordDetailExecutionDetailCredentialResult'],
                 endpoint: builtins.str,
                 execution_type: builtins.str,
                 is_executable_content: builtins.bool,
                 is_locked: builtins.bool,
                 is_read_output_variable_enabled: builtins.bool,
                 target_compartment_id: builtins.str,
                 variables: Sequence['outputs.GetRunbookVersionTaskTaskRecordDetailExecutionDetailVariableResult']):
        """
        :param builtins.str command: Optional command to execute the content. You can provide any commands/arguments that can't be part of the script.
        :param builtins.str config_file: Catalog Id having config file.
        :param Sequence['GetRunbookVersionTaskTaskRecordDetailExecutionDetailContentArgs'] contents: Content Source details.
        :param Sequence['GetRunbookVersionTaskTaskRecordDetailExecutionDetailCredentialArgs'] credentials: Credentials required for executing the task.
        :param builtins.str endpoint: Endpoint to be invoked.
        :param builtins.str execution_type: The action type of the task
        :param builtins.bool is_executable_content: Is the Content an executable file?
        :param builtins.bool is_locked: Is the script locked to prevent changes directly in Object Storage?
        :param builtins.bool is_read_output_variable_enabled: Is read output variable enabled
        :param builtins.str target_compartment_id: OCID of the compartment to which the resource belongs to.
        :param Sequence['GetRunbookVersionTaskTaskRecordDetailExecutionDetailVariableArgs'] variables: The variable of the task. At least one of the dynamicArguments or output needs to be provided.
        """
        pulumi.set(__self__, "catalog_id", catalog_id)
        pulumi.set(__self__, "command", command)
        pulumi.set(__self__, "config_file", config_file)
        pulumi.set(__self__, "contents", contents)
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "execution_type", execution_type)
        pulumi.set(__self__, "is_executable_content", is_executable_content)
        pulumi.set(__self__, "is_locked", is_locked)
        pulumi.set(__self__, "is_read_output_variable_enabled", is_read_output_variable_enabled)
        pulumi.set(__self__, "target_compartment_id", target_compartment_id)
        pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> builtins.str:
        return pulumi.get(self, "catalog_id")

    @property
    @pulumi.getter
    def command(self) -> builtins.str:
        """
        Optional command to execute the content. You can provide any commands/arguments that can't be part of the script.
        """
        return pulumi.get(self, "command")

    @property
    @pulumi.getter(name="configFile")
    def config_file(self) -> builtins.str:
        """
        Catalog Id having config file.
        """
        return pulumi.get(self, "config_file")

    @property
    @pulumi.getter
    def contents(self) -> Sequence['outputs.GetRunbookVersionTaskTaskRecordDetailExecutionDetailContentResult']:
        """
        Content Source details.
        """
        return pulumi.get(self, "contents")

    @property
    @pulumi.getter
    def credentials(self) -> Sequence['outputs.GetRunbookVersionTaskTaskRecordDetailExecutionDetailCredentialResult']:
        """
        Credentials required for executing the task.
        """
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter
    def endpoint(self) -> builtins.str:
        """
        Endpoint to be invoked.
        """
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="executionType")
    def execution_type(self) -> builtins.str:
        """
        The action type of the task
        """
        return pulumi.get(self, "execution_type")

    @property
    @pulumi.getter(name="isExecutableContent")
    def is_executable_content(self) -> builtins.bool:
        """
        Is the Content an executable file?
        """
        return pulumi.get(self, "is_executable_content")

    @property
    @pulumi.getter(name="isLocked")
    def is_locked(self) -> builtins.bool:
        """
        Is the script locked to prevent changes directly in Object Storage?
        """
        return pulumi.get(self, "is_locked")

    @property
    @pulumi.getter(name="isReadOutputVariableEnabled")
    def is_read_output_variable_enabled(self) -> builtins.bool:
        """
        Is read output variable enabled
        """
        return pulumi.get(self, "is_read_output_variable_enabled")

    @property
    @pulumi.getter(name="targetCompartmentId")
    def target_compartment_id(self) -> builtins.str:
        """
        OCID of the compartment to which the resource belongs to.
        """
        return pulumi.get(self, "target_compartment_id")

    @property
    @pulumi.getter
    def variables(self) -> Sequence['outputs.GetRunbookVersionTaskTaskRecordDetailExecutionDetailVariableResult']:
        """
        The variable of the task. At least one of the dynamicArguments or output needs to be provided.
        """
        return pulumi.get(self, "variables")


@pulumi.output_type
class GetRunbookVersionTaskTaskRecordDetailExecutionDetailContentResult(dict):
    def __init__(__self__, *,
                 bucket: builtins.str,
                 catalog_id: builtins.str,
                 checksum: builtins.str,
                 namespace: builtins.str,
                 object: builtins.str,
                 source_type: builtins.str):
        """
        :param builtins.str bucket: Bucket Name.
        :param builtins.str checksum: md5 checksum of the artifact.
        :param builtins.str namespace: Namespace.
        :param builtins.str object: Object Name.
        :param builtins.str source_type: Content Source type details.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "catalog_id", catalog_id)
        pulumi.set(__self__, "checksum", checksum)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter
    def bucket(self) -> builtins.str:
        """
        Bucket Name.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> builtins.str:
        return pulumi.get(self, "catalog_id")

    @property
    @pulumi.getter
    def checksum(self) -> builtins.str:
        """
        md5 checksum of the artifact.
        """
        return pulumi.get(self, "checksum")

    @property
    @pulumi.getter
    def namespace(self) -> builtins.str:
        """
        Namespace.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> builtins.str:
        """
        Object Name.
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> builtins.str:
        """
        Content Source type details.
        """
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetRunbookVersionTaskTaskRecordDetailExecutionDetailCredentialResult(dict):
    def __init__(__self__, *,
                 display_name: builtins.str,
                 id: builtins.str):
        """
        :param builtins.str display_name: A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        :param builtins.str id: The OCID of the resource.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The OCID of the resource.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetRunbookVersionTaskTaskRecordDetailExecutionDetailVariableResult(dict):
    def __init__(__self__, *,
                 input_variables: Sequence['outputs.GetRunbookVersionTaskTaskRecordDetailExecutionDetailVariableInputVariableResult'],
                 output_variables: Sequence[builtins.str]):
        """
        :param Sequence['GetRunbookVersionTaskTaskRecordDetailExecutionDetailVariableInputVariableArgs'] input_variables: The input variables for the task.
        :param Sequence[builtins.str] output_variables: The list of output variables.
        """
        pulumi.set(__self__, "input_variables", input_variables)
        pulumi.set(__self__, "output_variables", output_variables)

    @property
    @pulumi.getter(name="inputVariables")
    def input_variables(self) -> Sequence['outputs.GetRunbookVersionTaskTaskRecordDetailExecutionDetailVariableInputVariableResult']:
        """
        The input variables for the task.
        """
        return pulumi.get(self, "input_variables")

    @property
    @pulumi.getter(name="outputVariables")
    def output_variables(self) -> Sequence[builtins.str]:
        """
        The list of output variables.
        """
        return pulumi.get(self, "output_variables")


@pulumi.output_type
class GetRunbookVersionTaskTaskRecordDetailExecutionDetailVariableInputVariableResult(dict):
    def __init__(__self__, *,
                 description: builtins.str,
                 name: builtins.str,
                 type: builtins.str):
        """
        :param builtins.str description: The description of the argument.
        :param builtins.str name: The name of the task
        :param builtins.str type: Input argument Type.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        The description of the argument.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the task
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Input argument Type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRunbookVersionTaskTaskRecordDetailPropertyResult(dict):
    def __init__(__self__, *,
                 num_retries: builtins.int,
                 timeout_in_seconds: builtins.int):
        """
        :param builtins.int num_retries: The number of retries allowed.
        :param builtins.int timeout_in_seconds: The timeout in seconds for the task.
        """
        pulumi.set(__self__, "num_retries", num_retries)
        pulumi.set(__self__, "timeout_in_seconds", timeout_in_seconds)

    @property
    @pulumi.getter(name="numRetries")
    def num_retries(self) -> builtins.int:
        """
        The number of retries allowed.
        """
        return pulumi.get(self, "num_retries")

    @property
    @pulumi.getter(name="timeoutInSeconds")
    def timeout_in_seconds(self) -> builtins.int:
        """
        The timeout in seconds for the task.
        """
        return pulumi.get(self, "timeout_in_seconds")


@pulumi.output_type
class GetRunbookVersionsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        """
        :param builtins.str name: A filter to return only resources that match the entire name given.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        A filter to return only resources that match the entire name given.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetRunbookVersionsRunbookVersionCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetRunbookVersionsRunbookVersionCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetRunbookVersionsRunbookVersionCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetRunbookVersionsRunbookVersionCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: builtins.str,
                 defined_tags: Mapping[str, builtins.str],
                 execution_workflow_details: Sequence['outputs.GetRunbookVersionsRunbookVersionCollectionItemExecutionWorkflowDetailResult'],
                 freeform_tags: Mapping[str, builtins.str],
                 groups: Sequence['outputs.GetRunbookVersionsRunbookVersionCollectionItemGroupResult'],
                 id: builtins.str,
                 is_latest: builtins.bool,
                 lifecycle_details: builtins.str,
                 name: builtins.str,
                 rollback_workflow_details: Sequence['outputs.GetRunbookVersionsRunbookVersionCollectionItemRollbackWorkflowDetailResult'],
                 runbook_id: builtins.str,
                 state: builtins.str,
                 system_tags: Mapping[str, builtins.str],
                 tasks: Sequence['outputs.GetRunbookVersionsRunbookVersionCollectionItemTaskResult'],
                 time_created: builtins.str,
                 time_updated: builtins.str):
        """
        :param builtins.str compartment_id: The ID of the compartment in which to list resources. Empty only if the resource OCID query param is not specified.
        :param Mapping[str, builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param Sequence['GetRunbookVersionsRunbookVersionCollectionItemExecutionWorkflowDetailArgs'] execution_workflow_details: Execution Workflow details.
        :param Mapping[str, builtins.str] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param Sequence['GetRunbookVersionsRunbookVersionCollectionItemGroupArgs'] groups: The groups of the runbook.
        :param builtins.str id: A filter to return runbook versions whose identifier matches the given identifier.
        :param builtins.str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param builtins.str name: A filter to return only resources that match the entire name given.
        :param Sequence['GetRunbookVersionsRunbookVersionCollectionItemRollbackWorkflowDetailArgs'] rollback_workflow_details: Rollback Workflow details.
        :param builtins.str runbook_id: A filter to return only schedule definitions whose associated runbookId matches the given runbookId.
        :param builtins.str state: A filter to return only resources whose lifecycleState matches the given lifecycleState.
        :param Mapping[str, builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param Sequence['GetRunbookVersionsRunbookVersionCollectionItemTaskArgs'] tasks: A set of tasks to execute in the runbook.
        :param builtins.str time_created: The time this resource was created. An RFC3339 formatted datetime string.
        :param builtins.str time_updated: The time this resource was last updated. An RFC3339 formatted datetime string.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "execution_workflow_details", execution_workflow_details)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "groups", groups)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_latest", is_latest)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "rollback_workflow_details", rollback_workflow_details)
        pulumi.set(__self__, "runbook_id", runbook_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "tasks", tasks)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        The ID of the compartment in which to list resources. Empty only if the resource OCID query param is not specified.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="executionWorkflowDetails")
    def execution_workflow_details(self) -> Sequence['outputs.GetRunbookVersionsRunbookVersionCollectionItemExecutionWorkflowDetailResult']:
        """
        Execution Workflow details.
        """
        return pulumi.get(self, "execution_workflow_details")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def groups(self) -> Sequence['outputs.GetRunbookVersionsRunbookVersionCollectionItemGroupResult']:
        """
        The groups of the runbook.
        """
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        A filter to return runbook versions whose identifier matches the given identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isLatest")
    def is_latest(self) -> builtins.bool:
        return pulumi.get(self, "is_latest")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> builtins.str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        A filter to return only resources that match the entire name given.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="rollbackWorkflowDetails")
    def rollback_workflow_details(self) -> Sequence['outputs.GetRunbookVersionsRunbookVersionCollectionItemRollbackWorkflowDetailResult']:
        """
        Rollback Workflow details.
        """
        return pulumi.get(self, "rollback_workflow_details")

    @property
    @pulumi.getter(name="runbookId")
    def runbook_id(self) -> builtins.str:
        """
        A filter to return only schedule definitions whose associated runbookId matches the given runbookId.
        """
        return pulumi.get(self, "runbook_id")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        A filter to return only resources whose lifecycleState matches the given lifecycleState.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter
    def tasks(self) -> Sequence['outputs.GetRunbookVersionsRunbookVersionCollectionItemTaskResult']:
        """
        A set of tasks to execute in the runbook.
        """
        return pulumi.get(self, "tasks")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The time this resource was created. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> builtins.str:
        """
        The time this resource was last updated. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetRunbookVersionsRunbookVersionCollectionItemExecutionWorkflowDetailResult(dict):
    def __init__(__self__, *,
                 workflows: Sequence['outputs.GetRunbookVersionsRunbookVersionCollectionItemExecutionWorkflowDetailWorkflowResult']):
        """
        :param Sequence['GetRunbookVersionsRunbookVersionCollectionItemExecutionWorkflowDetailWorkflowArgs'] workflows: Rollback Workflow for the runbook.
        """
        pulumi.set(__self__, "workflows", workflows)

    @property
    @pulumi.getter
    def workflows(self) -> Sequence['outputs.GetRunbookVersionsRunbookVersionCollectionItemExecutionWorkflowDetailWorkflowResult']:
        """
        Rollback Workflow for the runbook.
        """
        return pulumi.get(self, "workflows")


@pulumi.output_type
class GetRunbookVersionsRunbookVersionCollectionItemExecutionWorkflowDetailWorkflowResult(dict):
    def __init__(__self__, *,
                 group_name: builtins.str,
                 steps: Sequence['outputs.GetRunbookVersionsRunbookVersionCollectionItemExecutionWorkflowDetailWorkflowStepResult'],
                 type: builtins.str):
        """
        :param builtins.str group_name: Name of the group.
        :param Sequence['GetRunbookVersionsRunbookVersionCollectionItemExecutionWorkflowDetailWorkflowStepArgs'] steps: Tasks within the Group. Provide the stepName for all applicable tasks.
        :param builtins.str type: Input argument Type.
        """
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "steps", steps)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> builtins.str:
        """
        Name of the group.
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter
    def steps(self) -> Sequence['outputs.GetRunbookVersionsRunbookVersionCollectionItemExecutionWorkflowDetailWorkflowStepResult']:
        """
        Tasks within the Group. Provide the stepName for all applicable tasks.
        """
        return pulumi.get(self, "steps")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Input argument Type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRunbookVersionsRunbookVersionCollectionItemExecutionWorkflowDetailWorkflowStepResult(dict):
    def __init__(__self__, *,
                 group_name: builtins.str,
                 step_name: builtins.str,
                 steps: Sequence[builtins.str],
                 type: builtins.str):
        """
        :param builtins.str group_name: Name of the group.
        :param builtins.str step_name: The name of the task step the output variable belongs to.
        :param Sequence[builtins.str] steps: Tasks within the Group. Provide the stepName for all applicable tasks.
        :param builtins.str type: Input argument Type.
        """
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "step_name", step_name)
        pulumi.set(__self__, "steps", steps)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> builtins.str:
        """
        Name of the group.
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> builtins.str:
        """
        The name of the task step the output variable belongs to.
        """
        return pulumi.get(self, "step_name")

    @property
    @pulumi.getter
    def steps(self) -> Sequence[builtins.str]:
        """
        Tasks within the Group. Provide the stepName for all applicable tasks.
        """
        return pulumi.get(self, "steps")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Input argument Type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRunbookVersionsRunbookVersionCollectionItemGroupResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 properties: Sequence['outputs.GetRunbookVersionsRunbookVersionCollectionItemGroupPropertyResult'],
                 type: builtins.str):
        """
        :param builtins.str name: A filter to return only resources that match the entire name given.
        :param Sequence['GetRunbookVersionsRunbookVersionCollectionItemGroupPropertyArgs'] properties: The properties of the task.
        :param builtins.str type: Input argument Type.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        A filter to return only resources that match the entire name given.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetRunbookVersionsRunbookVersionCollectionItemGroupPropertyResult']:
        """
        The properties of the task.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Input argument Type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRunbookVersionsRunbookVersionCollectionItemGroupPropertyResult(dict):
    def __init__(__self__, *,
                 action_on_failure: builtins.str,
                 notification_preferences: Sequence['outputs.GetRunbookVersionsRunbookVersionCollectionItemGroupPropertyNotificationPreferenceResult'],
                 pause_details: Sequence['outputs.GetRunbookVersionsRunbookVersionCollectionItemGroupPropertyPauseDetailResult'],
                 pre_condition: builtins.str,
                 run_ons: Sequence['outputs.GetRunbookVersionsRunbookVersionCollectionItemGroupPropertyRunOnResult']):
        """
        :param builtins.str action_on_failure: The action to be taken in case of a failure.
        :param Sequence['GetRunbookVersionsRunbookVersionCollectionItemGroupPropertyNotificationPreferenceArgs'] notification_preferences: Preferences to send notifications on the task activities.
        :param Sequence['GetRunbookVersionsRunbookVersionCollectionItemGroupPropertyPauseDetailArgs'] pause_details: Pause Details
        :param builtins.str pre_condition: Build control flow conditions that determine the relevance of the task execution.
        :param Sequence['GetRunbookVersionsRunbookVersionCollectionItemGroupPropertyRunOnArgs'] run_ons: The runon conditions
        """
        pulumi.set(__self__, "action_on_failure", action_on_failure)
        pulumi.set(__self__, "notification_preferences", notification_preferences)
        pulumi.set(__self__, "pause_details", pause_details)
        pulumi.set(__self__, "pre_condition", pre_condition)
        pulumi.set(__self__, "run_ons", run_ons)

    @property
    @pulumi.getter(name="actionOnFailure")
    def action_on_failure(self) -> builtins.str:
        """
        The action to be taken in case of a failure.
        """
        return pulumi.get(self, "action_on_failure")

    @property
    @pulumi.getter(name="notificationPreferences")
    def notification_preferences(self) -> Sequence['outputs.GetRunbookVersionsRunbookVersionCollectionItemGroupPropertyNotificationPreferenceResult']:
        """
        Preferences to send notifications on the task activities.
        """
        return pulumi.get(self, "notification_preferences")

    @property
    @pulumi.getter(name="pauseDetails")
    def pause_details(self) -> Sequence['outputs.GetRunbookVersionsRunbookVersionCollectionItemGroupPropertyPauseDetailResult']:
        """
        Pause Details
        """
        return pulumi.get(self, "pause_details")

    @property
    @pulumi.getter(name="preCondition")
    def pre_condition(self) -> builtins.str:
        """
        Build control flow conditions that determine the relevance of the task execution.
        """
        return pulumi.get(self, "pre_condition")

    @property
    @pulumi.getter(name="runOns")
    def run_ons(self) -> Sequence['outputs.GetRunbookVersionsRunbookVersionCollectionItemGroupPropertyRunOnResult']:
        """
        The runon conditions
        """
        return pulumi.get(self, "run_ons")


@pulumi.output_type
class GetRunbookVersionsRunbookVersionCollectionItemGroupPropertyNotificationPreferenceResult(dict):
    def __init__(__self__, *,
                 should_notify_on_pause: builtins.bool,
                 should_notify_on_task_failure: builtins.bool,
                 should_notify_on_task_success: builtins.bool):
        """
        :param builtins.bool should_notify_on_pause: Enables notification on pause.
        :param builtins.bool should_notify_on_task_failure: Enables or disables notification on Task Failures.
        :param builtins.bool should_notify_on_task_success: Enables or disables notification on Task Success.
        """
        pulumi.set(__self__, "should_notify_on_pause", should_notify_on_pause)
        pulumi.set(__self__, "should_notify_on_task_failure", should_notify_on_task_failure)
        pulumi.set(__self__, "should_notify_on_task_success", should_notify_on_task_success)

    @property
    @pulumi.getter(name="shouldNotifyOnPause")
    def should_notify_on_pause(self) -> builtins.bool:
        """
        Enables notification on pause.
        """
        return pulumi.get(self, "should_notify_on_pause")

    @property
    @pulumi.getter(name="shouldNotifyOnTaskFailure")
    def should_notify_on_task_failure(self) -> builtins.bool:
        """
        Enables or disables notification on Task Failures.
        """
        return pulumi.get(self, "should_notify_on_task_failure")

    @property
    @pulumi.getter(name="shouldNotifyOnTaskSuccess")
    def should_notify_on_task_success(self) -> builtins.bool:
        """
        Enables or disables notification on Task Success.
        """
        return pulumi.get(self, "should_notify_on_task_success")


@pulumi.output_type
class GetRunbookVersionsRunbookVersionCollectionItemGroupPropertyPauseDetailResult(dict):
    def __init__(__self__, *,
                 duration_in_minutes: builtins.int,
                 kind: builtins.str):
        """
        :param builtins.int duration_in_minutes: Time in minutes to apply Pause.
        :param builtins.str kind: Run on based On.
        """
        pulumi.set(__self__, "duration_in_minutes", duration_in_minutes)
        pulumi.set(__self__, "kind", kind)

    @property
    @pulumi.getter(name="durationInMinutes")
    def duration_in_minutes(self) -> builtins.int:
        """
        Time in minutes to apply Pause.
        """
        return pulumi.get(self, "duration_in_minutes")

    @property
    @pulumi.getter
    def kind(self) -> builtins.str:
        """
        Run on based On.
        """
        return pulumi.get(self, "kind")


@pulumi.output_type
class GetRunbookVersionsRunbookVersionCollectionItemGroupPropertyRunOnResult(dict):
    def __init__(__self__, *,
                 condition: builtins.str,
                 host: builtins.str,
                 kind: builtins.str,
                 previous_task_instance_details: Sequence['outputs.GetRunbookVersionsRunbookVersionCollectionItemGroupPropertyRunOnPreviousTaskInstanceDetailResult']):
        """
        :param builtins.str condition: Build control flow conditions that determine the relevance of the task execution.
        :param builtins.str host: OCID of the self hosted instance.
        :param builtins.str kind: Run on based On.
        :param Sequence['GetRunbookVersionsRunbookVersionCollectionItemGroupPropertyRunOnPreviousTaskInstanceDetailArgs'] previous_task_instance_details: Previous Task Instance Details
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "previous_task_instance_details", previous_task_instance_details)

    @property
    @pulumi.getter
    def condition(self) -> builtins.str:
        """
        Build control flow conditions that determine the relevance of the task execution.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def host(self) -> builtins.str:
        """
        OCID of the self hosted instance.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def kind(self) -> builtins.str:
        """
        Run on based On.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="previousTaskInstanceDetails")
    def previous_task_instance_details(self) -> Sequence['outputs.GetRunbookVersionsRunbookVersionCollectionItemGroupPropertyRunOnPreviousTaskInstanceDetailResult']:
        """
        Previous Task Instance Details
        """
        return pulumi.get(self, "previous_task_instance_details")


@pulumi.output_type
class GetRunbookVersionsRunbookVersionCollectionItemGroupPropertyRunOnPreviousTaskInstanceDetailResult(dict):
    def __init__(__self__, *,
                 output_variable_details: Sequence['outputs.GetRunbookVersionsRunbookVersionCollectionItemGroupPropertyRunOnPreviousTaskInstanceDetailOutputVariableDetailResult'],
                 resource_id: builtins.str,
                 resource_type: builtins.str):
        """
        :param Sequence['GetRunbookVersionsRunbookVersionCollectionItemGroupPropertyRunOnPreviousTaskInstanceDetailOutputVariableDetailArgs'] output_variable_details: The details of the output variable that will be used for mapping.
        :param builtins.str resource_id: Resource Ocid.
        :param builtins.str resource_type: Resource Type.
        """
        pulumi.set(__self__, "output_variable_details", output_variable_details)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter(name="outputVariableDetails")
    def output_variable_details(self) -> Sequence['outputs.GetRunbookVersionsRunbookVersionCollectionItemGroupPropertyRunOnPreviousTaskInstanceDetailOutputVariableDetailResult']:
        """
        The details of the output variable that will be used for mapping.
        """
        return pulumi.get(self, "output_variable_details")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> builtins.str:
        """
        Resource Ocid.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> builtins.str:
        """
        Resource Type.
        """
        return pulumi.get(self, "resource_type")


@pulumi.output_type
class GetRunbookVersionsRunbookVersionCollectionItemGroupPropertyRunOnPreviousTaskInstanceDetailOutputVariableDetailResult(dict):
    def __init__(__self__, *,
                 output_variable_name: builtins.str,
                 step_name: builtins.str):
        """
        :param builtins.str output_variable_name: The name of the output variable whose value has to be mapped.
        :param builtins.str step_name: The name of the task step the output variable belongs to.
        """
        pulumi.set(__self__, "output_variable_name", output_variable_name)
        pulumi.set(__self__, "step_name", step_name)

    @property
    @pulumi.getter(name="outputVariableName")
    def output_variable_name(self) -> builtins.str:
        """
        The name of the output variable whose value has to be mapped.
        """
        return pulumi.get(self, "output_variable_name")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> builtins.str:
        """
        The name of the task step the output variable belongs to.
        """
        return pulumi.get(self, "step_name")


@pulumi.output_type
class GetRunbookVersionsRunbookVersionCollectionItemRollbackWorkflowDetailResult(dict):
    def __init__(__self__, *,
                 scope: builtins.str,
                 workflows: Sequence['outputs.GetRunbookVersionsRunbookVersionCollectionItemRollbackWorkflowDetailWorkflowResult']):
        """
        :param builtins.str scope: The scope of the task.
        :param Sequence['GetRunbookVersionsRunbookVersionCollectionItemRollbackWorkflowDetailWorkflowArgs'] workflows: Rollback Workflow for the runbook.
        """
        pulumi.set(__self__, "scope", scope)
        pulumi.set(__self__, "workflows", workflows)

    @property
    @pulumi.getter
    def scope(self) -> builtins.str:
        """
        The scope of the task.
        """
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter
    def workflows(self) -> Sequence['outputs.GetRunbookVersionsRunbookVersionCollectionItemRollbackWorkflowDetailWorkflowResult']:
        """
        Rollback Workflow for the runbook.
        """
        return pulumi.get(self, "workflows")


@pulumi.output_type
class GetRunbookVersionsRunbookVersionCollectionItemRollbackWorkflowDetailWorkflowResult(dict):
    def __init__(__self__, *,
                 group_name: builtins.str,
                 steps: Sequence['outputs.GetRunbookVersionsRunbookVersionCollectionItemRollbackWorkflowDetailWorkflowStepResult'],
                 type: builtins.str):
        """
        :param builtins.str group_name: Name of the group.
        :param Sequence['GetRunbookVersionsRunbookVersionCollectionItemRollbackWorkflowDetailWorkflowStepArgs'] steps: Tasks within the Group. Provide the stepName for all applicable tasks.
        :param builtins.str type: Input argument Type.
        """
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "steps", steps)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> builtins.str:
        """
        Name of the group.
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter
    def steps(self) -> Sequence['outputs.GetRunbookVersionsRunbookVersionCollectionItemRollbackWorkflowDetailWorkflowStepResult']:
        """
        Tasks within the Group. Provide the stepName for all applicable tasks.
        """
        return pulumi.get(self, "steps")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Input argument Type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRunbookVersionsRunbookVersionCollectionItemRollbackWorkflowDetailWorkflowStepResult(dict):
    def __init__(__self__, *,
                 group_name: builtins.str,
                 step_name: builtins.str,
                 steps: Sequence[builtins.str],
                 type: builtins.str):
        """
        :param builtins.str group_name: Name of the group.
        :param builtins.str step_name: The name of the task step the output variable belongs to.
        :param Sequence[builtins.str] steps: Tasks within the Group. Provide the stepName for all applicable tasks.
        :param builtins.str type: Input argument Type.
        """
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "step_name", step_name)
        pulumi.set(__self__, "steps", steps)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> builtins.str:
        """
        Name of the group.
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> builtins.str:
        """
        The name of the task step the output variable belongs to.
        """
        return pulumi.get(self, "step_name")

    @property
    @pulumi.getter
    def steps(self) -> Sequence[builtins.str]:
        """
        Tasks within the Group. Provide the stepName for all applicable tasks.
        """
        return pulumi.get(self, "steps")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Input argument Type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRunbookVersionsRunbookVersionCollectionItemTaskResult(dict):
    def __init__(__self__, *,
                 output_variable_mappings: Sequence['outputs.GetRunbookVersionsRunbookVersionCollectionItemTaskOutputVariableMappingResult'],
                 step_name: builtins.str,
                 step_properties: Sequence['outputs.GetRunbookVersionsRunbookVersionCollectionItemTaskStepPropertyResult'],
                 task_record_details: Sequence['outputs.GetRunbookVersionsRunbookVersionCollectionItemTaskTaskRecordDetailResult']):
        """
        :param Sequence['GetRunbookVersionsRunbookVersionCollectionItemTaskOutputVariableMappingArgs'] output_variable_mappings: Mapping output variables of previous tasks to the input variables of the current task.
        :param builtins.str step_name: The name of the task step the output variable belongs to.
        :param Sequence['GetRunbookVersionsRunbookVersionCollectionItemTaskStepPropertyArgs'] step_properties: The properties of the component.
        :param Sequence['GetRunbookVersionsRunbookVersionCollectionItemTaskTaskRecordDetailArgs'] task_record_details: The details of the task.
        """
        pulumi.set(__self__, "output_variable_mappings", output_variable_mappings)
        pulumi.set(__self__, "step_name", step_name)
        pulumi.set(__self__, "step_properties", step_properties)
        pulumi.set(__self__, "task_record_details", task_record_details)

    @property
    @pulumi.getter(name="outputVariableMappings")
    def output_variable_mappings(self) -> Sequence['outputs.GetRunbookVersionsRunbookVersionCollectionItemTaskOutputVariableMappingResult']:
        """
        Mapping output variables of previous tasks to the input variables of the current task.
        """
        return pulumi.get(self, "output_variable_mappings")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> builtins.str:
        """
        The name of the task step the output variable belongs to.
        """
        return pulumi.get(self, "step_name")

    @property
    @pulumi.getter(name="stepProperties")
    def step_properties(self) -> Sequence['outputs.GetRunbookVersionsRunbookVersionCollectionItemTaskStepPropertyResult']:
        """
        The properties of the component.
        """
        return pulumi.get(self, "step_properties")

    @property
    @pulumi.getter(name="taskRecordDetails")
    def task_record_details(self) -> Sequence['outputs.GetRunbookVersionsRunbookVersionCollectionItemTaskTaskRecordDetailResult']:
        """
        The details of the task.
        """
        return pulumi.get(self, "task_record_details")


@pulumi.output_type
class GetRunbookVersionsRunbookVersionCollectionItemTaskOutputVariableMappingResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 output_variable_details: Sequence['outputs.GetRunbookVersionsRunbookVersionCollectionItemTaskOutputVariableMappingOutputVariableDetailResult']):
        """
        :param builtins.str name: A filter to return only resources that match the entire name given.
        :param Sequence['GetRunbookVersionsRunbookVersionCollectionItemTaskOutputVariableMappingOutputVariableDetailArgs'] output_variable_details: The details of the output variable that will be used for mapping.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "output_variable_details", output_variable_details)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        A filter to return only resources that match the entire name given.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="outputVariableDetails")
    def output_variable_details(self) -> Sequence['outputs.GetRunbookVersionsRunbookVersionCollectionItemTaskOutputVariableMappingOutputVariableDetailResult']:
        """
        The details of the output variable that will be used for mapping.
        """
        return pulumi.get(self, "output_variable_details")


@pulumi.output_type
class GetRunbookVersionsRunbookVersionCollectionItemTaskOutputVariableMappingOutputVariableDetailResult(dict):
    def __init__(__self__, *,
                 output_variable_name: builtins.str,
                 step_name: builtins.str):
        """
        :param builtins.str output_variable_name: The name of the output variable whose value has to be mapped.
        :param builtins.str step_name: The name of the task step the output variable belongs to.
        """
        pulumi.set(__self__, "output_variable_name", output_variable_name)
        pulumi.set(__self__, "step_name", step_name)

    @property
    @pulumi.getter(name="outputVariableName")
    def output_variable_name(self) -> builtins.str:
        """
        The name of the output variable whose value has to be mapped.
        """
        return pulumi.get(self, "output_variable_name")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> builtins.str:
        """
        The name of the task step the output variable belongs to.
        """
        return pulumi.get(self, "step_name")


@pulumi.output_type
class GetRunbookVersionsRunbookVersionCollectionItemTaskStepPropertyResult(dict):
    def __init__(__self__, *,
                 action_on_failure: builtins.str,
                 notification_preferences: Sequence['outputs.GetRunbookVersionsRunbookVersionCollectionItemTaskStepPropertyNotificationPreferenceResult'],
                 pause_details: Sequence['outputs.GetRunbookVersionsRunbookVersionCollectionItemTaskStepPropertyPauseDetailResult'],
                 pre_condition: builtins.str,
                 run_ons: Sequence['outputs.GetRunbookVersionsRunbookVersionCollectionItemTaskStepPropertyRunOnResult']):
        """
        :param builtins.str action_on_failure: The action to be taken in case of a failure.
        :param Sequence['GetRunbookVersionsRunbookVersionCollectionItemTaskStepPropertyNotificationPreferenceArgs'] notification_preferences: Preferences to send notifications on the task activities.
        :param Sequence['GetRunbookVersionsRunbookVersionCollectionItemTaskStepPropertyPauseDetailArgs'] pause_details: Pause Details
        :param builtins.str pre_condition: Build control flow conditions that determine the relevance of the task execution.
        :param Sequence['GetRunbookVersionsRunbookVersionCollectionItemTaskStepPropertyRunOnArgs'] run_ons: The runon conditions
        """
        pulumi.set(__self__, "action_on_failure", action_on_failure)
        pulumi.set(__self__, "notification_preferences", notification_preferences)
        pulumi.set(__self__, "pause_details", pause_details)
        pulumi.set(__self__, "pre_condition", pre_condition)
        pulumi.set(__self__, "run_ons", run_ons)

    @property
    @pulumi.getter(name="actionOnFailure")
    def action_on_failure(self) -> builtins.str:
        """
        The action to be taken in case of a failure.
        """
        return pulumi.get(self, "action_on_failure")

    @property
    @pulumi.getter(name="notificationPreferences")
    def notification_preferences(self) -> Sequence['outputs.GetRunbookVersionsRunbookVersionCollectionItemTaskStepPropertyNotificationPreferenceResult']:
        """
        Preferences to send notifications on the task activities.
        """
        return pulumi.get(self, "notification_preferences")

    @property
    @pulumi.getter(name="pauseDetails")
    def pause_details(self) -> Sequence['outputs.GetRunbookVersionsRunbookVersionCollectionItemTaskStepPropertyPauseDetailResult']:
        """
        Pause Details
        """
        return pulumi.get(self, "pause_details")

    @property
    @pulumi.getter(name="preCondition")
    def pre_condition(self) -> builtins.str:
        """
        Build control flow conditions that determine the relevance of the task execution.
        """
        return pulumi.get(self, "pre_condition")

    @property
    @pulumi.getter(name="runOns")
    def run_ons(self) -> Sequence['outputs.GetRunbookVersionsRunbookVersionCollectionItemTaskStepPropertyRunOnResult']:
        """
        The runon conditions
        """
        return pulumi.get(self, "run_ons")


@pulumi.output_type
class GetRunbookVersionsRunbookVersionCollectionItemTaskStepPropertyNotificationPreferenceResult(dict):
    def __init__(__self__, *,
                 should_notify_on_pause: builtins.bool,
                 should_notify_on_task_failure: builtins.bool,
                 should_notify_on_task_success: builtins.bool):
        """
        :param builtins.bool should_notify_on_pause: Enables notification on pause.
        :param builtins.bool should_notify_on_task_failure: Enables or disables notification on Task Failures.
        :param builtins.bool should_notify_on_task_success: Enables or disables notification on Task Success.
        """
        pulumi.set(__self__, "should_notify_on_pause", should_notify_on_pause)
        pulumi.set(__self__, "should_notify_on_task_failure", should_notify_on_task_failure)
        pulumi.set(__self__, "should_notify_on_task_success", should_notify_on_task_success)

    @property
    @pulumi.getter(name="shouldNotifyOnPause")
    def should_notify_on_pause(self) -> builtins.bool:
        """
        Enables notification on pause.
        """
        return pulumi.get(self, "should_notify_on_pause")

    @property
    @pulumi.getter(name="shouldNotifyOnTaskFailure")
    def should_notify_on_task_failure(self) -> builtins.bool:
        """
        Enables or disables notification on Task Failures.
        """
        return pulumi.get(self, "should_notify_on_task_failure")

    @property
    @pulumi.getter(name="shouldNotifyOnTaskSuccess")
    def should_notify_on_task_success(self) -> builtins.bool:
        """
        Enables or disables notification on Task Success.
        """
        return pulumi.get(self, "should_notify_on_task_success")


@pulumi.output_type
class GetRunbookVersionsRunbookVersionCollectionItemTaskStepPropertyPauseDetailResult(dict):
    def __init__(__self__, *,
                 duration_in_minutes: builtins.int,
                 kind: builtins.str):
        """
        :param builtins.int duration_in_minutes: Time in minutes to apply Pause.
        :param builtins.str kind: Run on based On.
        """
        pulumi.set(__self__, "duration_in_minutes", duration_in_minutes)
        pulumi.set(__self__, "kind", kind)

    @property
    @pulumi.getter(name="durationInMinutes")
    def duration_in_minutes(self) -> builtins.int:
        """
        Time in minutes to apply Pause.
        """
        return pulumi.get(self, "duration_in_minutes")

    @property
    @pulumi.getter
    def kind(self) -> builtins.str:
        """
        Run on based On.
        """
        return pulumi.get(self, "kind")


@pulumi.output_type
class GetRunbookVersionsRunbookVersionCollectionItemTaskStepPropertyRunOnResult(dict):
    def __init__(__self__, *,
                 condition: builtins.str,
                 host: builtins.str,
                 kind: builtins.str,
                 previous_task_instance_details: Sequence['outputs.GetRunbookVersionsRunbookVersionCollectionItemTaskStepPropertyRunOnPreviousTaskInstanceDetailResult']):
        """
        :param builtins.str condition: Build control flow conditions that determine the relevance of the task execution.
        :param builtins.str host: OCID of the self hosted instance.
        :param builtins.str kind: Run on based On.
        :param Sequence['GetRunbookVersionsRunbookVersionCollectionItemTaskStepPropertyRunOnPreviousTaskInstanceDetailArgs'] previous_task_instance_details: Previous Task Instance Details
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "previous_task_instance_details", previous_task_instance_details)

    @property
    @pulumi.getter
    def condition(self) -> builtins.str:
        """
        Build control flow conditions that determine the relevance of the task execution.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def host(self) -> builtins.str:
        """
        OCID of the self hosted instance.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def kind(self) -> builtins.str:
        """
        Run on based On.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="previousTaskInstanceDetails")
    def previous_task_instance_details(self) -> Sequence['outputs.GetRunbookVersionsRunbookVersionCollectionItemTaskStepPropertyRunOnPreviousTaskInstanceDetailResult']:
        """
        Previous Task Instance Details
        """
        return pulumi.get(self, "previous_task_instance_details")


@pulumi.output_type
class GetRunbookVersionsRunbookVersionCollectionItemTaskStepPropertyRunOnPreviousTaskInstanceDetailResult(dict):
    def __init__(__self__, *,
                 output_variable_details: Sequence['outputs.GetRunbookVersionsRunbookVersionCollectionItemTaskStepPropertyRunOnPreviousTaskInstanceDetailOutputVariableDetailResult'],
                 resource_id: builtins.str,
                 resource_type: builtins.str):
        """
        :param Sequence['GetRunbookVersionsRunbookVersionCollectionItemTaskStepPropertyRunOnPreviousTaskInstanceDetailOutputVariableDetailArgs'] output_variable_details: The details of the output variable that will be used for mapping.
        :param builtins.str resource_id: Resource Ocid.
        :param builtins.str resource_type: Resource Type.
        """
        pulumi.set(__self__, "output_variable_details", output_variable_details)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter(name="outputVariableDetails")
    def output_variable_details(self) -> Sequence['outputs.GetRunbookVersionsRunbookVersionCollectionItemTaskStepPropertyRunOnPreviousTaskInstanceDetailOutputVariableDetailResult']:
        """
        The details of the output variable that will be used for mapping.
        """
        return pulumi.get(self, "output_variable_details")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> builtins.str:
        """
        Resource Ocid.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> builtins.str:
        """
        Resource Type.
        """
        return pulumi.get(self, "resource_type")


@pulumi.output_type
class GetRunbookVersionsRunbookVersionCollectionItemTaskStepPropertyRunOnPreviousTaskInstanceDetailOutputVariableDetailResult(dict):
    def __init__(__self__, *,
                 output_variable_name: builtins.str,
                 step_name: builtins.str):
        """
        :param builtins.str output_variable_name: The name of the output variable whose value has to be mapped.
        :param builtins.str step_name: The name of the task step the output variable belongs to.
        """
        pulumi.set(__self__, "output_variable_name", output_variable_name)
        pulumi.set(__self__, "step_name", step_name)

    @property
    @pulumi.getter(name="outputVariableName")
    def output_variable_name(self) -> builtins.str:
        """
        The name of the output variable whose value has to be mapped.
        """
        return pulumi.get(self, "output_variable_name")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> builtins.str:
        """
        The name of the task step the output variable belongs to.
        """
        return pulumi.get(self, "step_name")


@pulumi.output_type
class GetRunbookVersionsRunbookVersionCollectionItemTaskTaskRecordDetailResult(dict):
    def __init__(__self__, *,
                 description: builtins.str,
                 execution_details: Sequence['outputs.GetRunbookVersionsRunbookVersionCollectionItemTaskTaskRecordDetailExecutionDetailResult'],
                 is_apply_subject_task: builtins.bool,
                 is_copy_to_library_enabled: builtins.bool,
                 is_discovery_output_task: builtins.bool,
                 name: builtins.str,
                 os_type: builtins.str,
                 platform: builtins.str,
                 properties: Sequence['outputs.GetRunbookVersionsRunbookVersionCollectionItemTaskTaskRecordDetailPropertyResult'],
                 scope: builtins.str,
                 task_record_id: builtins.str):
        """
        :param builtins.str description: The description of the argument.
        :param Sequence['GetRunbookVersionsRunbookVersionCollectionItemTaskTaskRecordDetailExecutionDetailArgs'] execution_details: Execution details.
        :param builtins.bool is_apply_subject_task: Is this an Apply Subject Task? Ex. Patch Execution Task
        :param builtins.bool is_copy_to_library_enabled: Make a copy of this task in Library
        :param builtins.bool is_discovery_output_task: Is this a discovery output task?
        :param builtins.str name: A filter to return only resources that match the entire name given.
        :param builtins.str os_type: The OS for the task.
        :param builtins.str platform: The platform of the runbook.
        :param Sequence['GetRunbookVersionsRunbookVersionCollectionItemTaskTaskRecordDetailPropertyArgs'] properties: The properties of the task.
        :param builtins.str scope: The scope of the task.
        :param builtins.str task_record_id: The ID of taskRecord.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "execution_details", execution_details)
        pulumi.set(__self__, "is_apply_subject_task", is_apply_subject_task)
        pulumi.set(__self__, "is_copy_to_library_enabled", is_copy_to_library_enabled)
        pulumi.set(__self__, "is_discovery_output_task", is_discovery_output_task)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "os_type", os_type)
        pulumi.set(__self__, "platform", platform)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "scope", scope)
        pulumi.set(__self__, "task_record_id", task_record_id)

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        The description of the argument.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="executionDetails")
    def execution_details(self) -> Sequence['outputs.GetRunbookVersionsRunbookVersionCollectionItemTaskTaskRecordDetailExecutionDetailResult']:
        """
        Execution details.
        """
        return pulumi.get(self, "execution_details")

    @property
    @pulumi.getter(name="isApplySubjectTask")
    def is_apply_subject_task(self) -> builtins.bool:
        """
        Is this an Apply Subject Task? Ex. Patch Execution Task
        """
        return pulumi.get(self, "is_apply_subject_task")

    @property
    @pulumi.getter(name="isCopyToLibraryEnabled")
    def is_copy_to_library_enabled(self) -> builtins.bool:
        """
        Make a copy of this task in Library
        """
        return pulumi.get(self, "is_copy_to_library_enabled")

    @property
    @pulumi.getter(name="isDiscoveryOutputTask")
    def is_discovery_output_task(self) -> builtins.bool:
        """
        Is this a discovery output task?
        """
        return pulumi.get(self, "is_discovery_output_task")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        A filter to return only resources that match the entire name given.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> builtins.str:
        """
        The OS for the task.
        """
        return pulumi.get(self, "os_type")

    @property
    @pulumi.getter
    def platform(self) -> builtins.str:
        """
        The platform of the runbook.
        """
        return pulumi.get(self, "platform")

    @property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetRunbookVersionsRunbookVersionCollectionItemTaskTaskRecordDetailPropertyResult']:
        """
        The properties of the task.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def scope(self) -> builtins.str:
        """
        The scope of the task.
        """
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter(name="taskRecordId")
    def task_record_id(self) -> builtins.str:
        """
        The ID of taskRecord.
        """
        return pulumi.get(self, "task_record_id")


@pulumi.output_type
class GetRunbookVersionsRunbookVersionCollectionItemTaskTaskRecordDetailExecutionDetailResult(dict):
    def __init__(__self__, *,
                 catalog_id: builtins.str,
                 command: builtins.str,
                 config_file: builtins.str,
                 contents: Sequence['outputs.GetRunbookVersionsRunbookVersionCollectionItemTaskTaskRecordDetailExecutionDetailContentResult'],
                 credentials: Sequence['outputs.GetRunbookVersionsRunbookVersionCollectionItemTaskTaskRecordDetailExecutionDetailCredentialResult'],
                 endpoint: builtins.str,
                 execution_type: builtins.str,
                 is_executable_content: builtins.bool,
                 is_locked: builtins.bool,
                 is_read_output_variable_enabled: builtins.bool,
                 target_compartment_id: builtins.str,
                 variables: Sequence['outputs.GetRunbookVersionsRunbookVersionCollectionItemTaskTaskRecordDetailExecutionDetailVariableResult']):
        """
        :param builtins.str command: Optional command to execute the content. You can provide any commands/arguments that can't be part of the script.
        :param builtins.str config_file: Catalog Id having config file.
        :param Sequence['GetRunbookVersionsRunbookVersionCollectionItemTaskTaskRecordDetailExecutionDetailContentArgs'] contents: Content Source details.
        :param Sequence['GetRunbookVersionsRunbookVersionCollectionItemTaskTaskRecordDetailExecutionDetailCredentialArgs'] credentials: Credentials required for executing the task.
        :param builtins.str endpoint: Endpoint to be invoked.
        :param builtins.str execution_type: The action type of the task
        :param builtins.bool is_executable_content: Is the Content an executable file?
        :param builtins.bool is_locked: Is the script locked to prevent changes directly in Object Storage?
        :param builtins.bool is_read_output_variable_enabled: Is read output variable enabled
        :param builtins.str target_compartment_id: OCID of the compartment to which the resource belongs to.
        :param Sequence['GetRunbookVersionsRunbookVersionCollectionItemTaskTaskRecordDetailExecutionDetailVariableArgs'] variables: The variable of the task. At least one of the dynamicArguments or output needs to be provided.
        """
        pulumi.set(__self__, "catalog_id", catalog_id)
        pulumi.set(__self__, "command", command)
        pulumi.set(__self__, "config_file", config_file)
        pulumi.set(__self__, "contents", contents)
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "execution_type", execution_type)
        pulumi.set(__self__, "is_executable_content", is_executable_content)
        pulumi.set(__self__, "is_locked", is_locked)
        pulumi.set(__self__, "is_read_output_variable_enabled", is_read_output_variable_enabled)
        pulumi.set(__self__, "target_compartment_id", target_compartment_id)
        pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> builtins.str:
        return pulumi.get(self, "catalog_id")

    @property
    @pulumi.getter
    def command(self) -> builtins.str:
        """
        Optional command to execute the content. You can provide any commands/arguments that can't be part of the script.
        """
        return pulumi.get(self, "command")

    @property
    @pulumi.getter(name="configFile")
    def config_file(self) -> builtins.str:
        """
        Catalog Id having config file.
        """
        return pulumi.get(self, "config_file")

    @property
    @pulumi.getter
    def contents(self) -> Sequence['outputs.GetRunbookVersionsRunbookVersionCollectionItemTaskTaskRecordDetailExecutionDetailContentResult']:
        """
        Content Source details.
        """
        return pulumi.get(self, "contents")

    @property
    @pulumi.getter
    def credentials(self) -> Sequence['outputs.GetRunbookVersionsRunbookVersionCollectionItemTaskTaskRecordDetailExecutionDetailCredentialResult']:
        """
        Credentials required for executing the task.
        """
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter
    def endpoint(self) -> builtins.str:
        """
        Endpoint to be invoked.
        """
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="executionType")
    def execution_type(self) -> builtins.str:
        """
        The action type of the task
        """
        return pulumi.get(self, "execution_type")

    @property
    @pulumi.getter(name="isExecutableContent")
    def is_executable_content(self) -> builtins.bool:
        """
        Is the Content an executable file?
        """
        return pulumi.get(self, "is_executable_content")

    @property
    @pulumi.getter(name="isLocked")
    def is_locked(self) -> builtins.bool:
        """
        Is the script locked to prevent changes directly in Object Storage?
        """
        return pulumi.get(self, "is_locked")

    @property
    @pulumi.getter(name="isReadOutputVariableEnabled")
    def is_read_output_variable_enabled(self) -> builtins.bool:
        """
        Is read output variable enabled
        """
        return pulumi.get(self, "is_read_output_variable_enabled")

    @property
    @pulumi.getter(name="targetCompartmentId")
    def target_compartment_id(self) -> builtins.str:
        """
        OCID of the compartment to which the resource belongs to.
        """
        return pulumi.get(self, "target_compartment_id")

    @property
    @pulumi.getter
    def variables(self) -> Sequence['outputs.GetRunbookVersionsRunbookVersionCollectionItemTaskTaskRecordDetailExecutionDetailVariableResult']:
        """
        The variable of the task. At least one of the dynamicArguments or output needs to be provided.
        """
        return pulumi.get(self, "variables")


@pulumi.output_type
class GetRunbookVersionsRunbookVersionCollectionItemTaskTaskRecordDetailExecutionDetailContentResult(dict):
    def __init__(__self__, *,
                 bucket: builtins.str,
                 catalog_id: builtins.str,
                 checksum: builtins.str,
                 namespace: builtins.str,
                 object: builtins.str,
                 source_type: builtins.str):
        """
        :param builtins.str bucket: Bucket Name.
        :param builtins.str checksum: md5 checksum of the artifact.
        :param builtins.str namespace: Namespace.
        :param builtins.str object: Object Name.
        :param builtins.str source_type: Content Source type details.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "catalog_id", catalog_id)
        pulumi.set(__self__, "checksum", checksum)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter
    def bucket(self) -> builtins.str:
        """
        Bucket Name.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> builtins.str:
        return pulumi.get(self, "catalog_id")

    @property
    @pulumi.getter
    def checksum(self) -> builtins.str:
        """
        md5 checksum of the artifact.
        """
        return pulumi.get(self, "checksum")

    @property
    @pulumi.getter
    def namespace(self) -> builtins.str:
        """
        Namespace.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> builtins.str:
        """
        Object Name.
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> builtins.str:
        """
        Content Source type details.
        """
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetRunbookVersionsRunbookVersionCollectionItemTaskTaskRecordDetailExecutionDetailCredentialResult(dict):
    def __init__(__self__, *,
                 display_name: builtins.str,
                 id: builtins.str):
        """
        :param builtins.str display_name: A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        :param builtins.str id: A filter to return runbook versions whose identifier matches the given identifier.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        A filter to return runbook versions whose identifier matches the given identifier.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetRunbookVersionsRunbookVersionCollectionItemTaskTaskRecordDetailExecutionDetailVariableResult(dict):
    def __init__(__self__, *,
                 input_variables: Sequence['outputs.GetRunbookVersionsRunbookVersionCollectionItemTaskTaskRecordDetailExecutionDetailVariableInputVariableResult'],
                 output_variables: Sequence[builtins.str]):
        """
        :param Sequence['GetRunbookVersionsRunbookVersionCollectionItemTaskTaskRecordDetailExecutionDetailVariableInputVariableArgs'] input_variables: The input variables for the task.
        :param Sequence[builtins.str] output_variables: The list of output variables.
        """
        pulumi.set(__self__, "input_variables", input_variables)
        pulumi.set(__self__, "output_variables", output_variables)

    @property
    @pulumi.getter(name="inputVariables")
    def input_variables(self) -> Sequence['outputs.GetRunbookVersionsRunbookVersionCollectionItemTaskTaskRecordDetailExecutionDetailVariableInputVariableResult']:
        """
        The input variables for the task.
        """
        return pulumi.get(self, "input_variables")

    @property
    @pulumi.getter(name="outputVariables")
    def output_variables(self) -> Sequence[builtins.str]:
        """
        The list of output variables.
        """
        return pulumi.get(self, "output_variables")


@pulumi.output_type
class GetRunbookVersionsRunbookVersionCollectionItemTaskTaskRecordDetailExecutionDetailVariableInputVariableResult(dict):
    def __init__(__self__, *,
                 description: builtins.str,
                 name: builtins.str,
                 type: builtins.str):
        """
        :param builtins.str description: The description of the argument.
        :param builtins.str name: A filter to return only resources that match the entire name given.
        :param builtins.str type: Input argument Type.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        The description of the argument.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        A filter to return only resources that match the entire name given.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Input argument Type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRunbookVersionsRunbookVersionCollectionItemTaskTaskRecordDetailPropertyResult(dict):
    def __init__(__self__, *,
                 num_retries: builtins.int,
                 timeout_in_seconds: builtins.int):
        """
        :param builtins.int num_retries: The number of retries allowed.
        :param builtins.int timeout_in_seconds: The timeout in seconds for the task.
        """
        pulumi.set(__self__, "num_retries", num_retries)
        pulumi.set(__self__, "timeout_in_seconds", timeout_in_seconds)

    @property
    @pulumi.getter(name="numRetries")
    def num_retries(self) -> builtins.int:
        """
        The number of retries allowed.
        """
        return pulumi.get(self, "num_retries")

    @property
    @pulumi.getter(name="timeoutInSeconds")
    def timeout_in_seconds(self) -> builtins.int:
        """
        The timeout in seconds for the task.
        """
        return pulumi.get(self, "timeout_in_seconds")


@pulumi.output_type
class GetRunbooksFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        """
        :param builtins.str name: The name of the task
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the task
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetRunbooksRunbookCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetRunbooksRunbookCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetRunbooksRunbookCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetRunbooksRunbookCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: builtins.str,
                 defined_tags: Mapping[str, builtins.str],
                 description: builtins.str,
                 display_name: builtins.str,
                 estimated_time: builtins.str,
                 freeform_tags: Mapping[str, builtins.str],
                 has_draft_version: builtins.bool,
                 id: builtins.str,
                 is_default: builtins.bool,
                 is_sudo_access_needed: builtins.bool,
                 latest_version: builtins.str,
                 lifecycle_details: builtins.str,
                 operation: builtins.str,
                 os_type: builtins.str,
                 platform: builtins.str,
                 resource_region: builtins.str,
                 runbook_versions: Sequence['outputs.GetRunbooksRunbookCollectionItemRunbookVersionResult'],
                 state: builtins.str,
                 system_tags: Mapping[str, builtins.str],
                 time_created: builtins.str,
                 time_updated: builtins.str,
                 type: builtins.str):
        """
        :param builtins.str compartment_id: The ID of the compartment in which to list resources. Empty only if the resource OCID query param is not specified.
        :param Mapping[str, builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param builtins.str description: The description of the argument.
        :param builtins.str display_name: A filter to return only resources that match the entire display name given.
        :param builtins.str estimated_time: Estimated time to successfully complete the runbook execution.
        :param Mapping[str, builtins.str] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param builtins.bool has_draft_version: Does this runbook has draft versions?
        :param builtins.str id: Unique identifier or OCID for listing a single Runbook by id. Either compartmentId or id must be provided.
        :param builtins.bool is_default: Is the runbook default? Sets this runbook as the default for the chosen product/product stack for the specified lifecycle operation.
        :param builtins.bool is_sudo_access_needed: Does this runbook need SUDO access to execute?
        :param builtins.str latest_version: Latest runbook version
        :param builtins.str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param builtins.str operation: A filter to return runbooks whose operation matches the given lifecycle operation.
        :param builtins.str os_type: The OS for the task.
        :param builtins.str platform: A filter to return runbooks whose platform matches the given platform.
        :param builtins.str resource_region: Associated region
        :param Sequence['GetRunbooksRunbookCollectionItemRunbookVersionArgs'] runbook_versions: Version for the runbook.
        :param builtins.str state: A filter to return only resources whose lifecycleState matches the given lifecycleState.
        :param Mapping[str, builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param builtins.str time_created: The time this resource was created. An RFC3339 formatted datetime string.
        :param builtins.str time_updated: The time this resource was last updated. An RFC3339 formatted datetime string.
        :param builtins.str type: A filter to return runbooks whose type matches the given type.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "estimated_time", estimated_time)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "has_draft_version", has_draft_version)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "is_sudo_access_needed", is_sudo_access_needed)
        pulumi.set(__self__, "latest_version", latest_version)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "os_type", os_type)
        pulumi.set(__self__, "platform", platform)
        pulumi.set(__self__, "resource_region", resource_region)
        pulumi.set(__self__, "runbook_versions", runbook_versions)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        The ID of the compartment in which to list resources. Empty only if the resource OCID query param is not specified.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        The description of the argument.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="estimatedTime")
    def estimated_time(self) -> builtins.str:
        """
        Estimated time to successfully complete the runbook execution.
        """
        return pulumi.get(self, "estimated_time")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="hasDraftVersion")
    def has_draft_version(self) -> builtins.bool:
        """
        Does this runbook has draft versions?
        """
        return pulumi.get(self, "has_draft_version")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Unique identifier or OCID for listing a single Runbook by id. Either compartmentId or id must be provided.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> builtins.bool:
        """
        Is the runbook default? Sets this runbook as the default for the chosen product/product stack for the specified lifecycle operation.
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter(name="isSudoAccessNeeded")
    def is_sudo_access_needed(self) -> builtins.bool:
        """
        Does this runbook need SUDO access to execute?
        """
        return pulumi.get(self, "is_sudo_access_needed")

    @property
    @pulumi.getter(name="latestVersion")
    def latest_version(self) -> builtins.str:
        """
        Latest runbook version
        """
        return pulumi.get(self, "latest_version")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> builtins.str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def operation(self) -> builtins.str:
        """
        A filter to return runbooks whose operation matches the given lifecycle operation.
        """
        return pulumi.get(self, "operation")

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> builtins.str:
        """
        The OS for the task.
        """
        return pulumi.get(self, "os_type")

    @property
    @pulumi.getter
    def platform(self) -> builtins.str:
        """
        A filter to return runbooks whose platform matches the given platform.
        """
        return pulumi.get(self, "platform")

    @property
    @pulumi.getter(name="resourceRegion")
    def resource_region(self) -> builtins.str:
        """
        Associated region
        """
        return pulumi.get(self, "resource_region")

    @property
    @pulumi.getter(name="runbookVersions")
    def runbook_versions(self) -> Sequence['outputs.GetRunbooksRunbookCollectionItemRunbookVersionResult']:
        """
        Version for the runbook.
        """
        return pulumi.get(self, "runbook_versions")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        A filter to return only resources whose lifecycleState matches the given lifecycleState.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The time this resource was created. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> builtins.str:
        """
        The time this resource was last updated. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        A filter to return runbooks whose type matches the given type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRunbooksRunbookCollectionItemRunbookVersionResult(dict):
    def __init__(__self__, *,
                 execution_workflow_details: Sequence['outputs.GetRunbooksRunbookCollectionItemRunbookVersionExecutionWorkflowDetailResult'],
                 groups: Sequence['outputs.GetRunbooksRunbookCollectionItemRunbookVersionGroupResult'],
                 is_latest: builtins.bool,
                 rollback_workflow_details: Sequence['outputs.GetRunbooksRunbookCollectionItemRunbookVersionRollbackWorkflowDetailResult'],
                 tasks: Sequence['outputs.GetRunbooksRunbookCollectionItemRunbookVersionTaskResult'],
                 version: builtins.str):
        """
        :param Sequence['GetRunbooksRunbookCollectionItemRunbookVersionExecutionWorkflowDetailArgs'] execution_workflow_details: Execution Workflow details.
        :param Sequence['GetRunbooksRunbookCollectionItemRunbookVersionGroupArgs'] groups: The groups of the runbook.
        :param builtins.bool is_latest: Is this version the latest?
        :param Sequence['GetRunbooksRunbookCollectionItemRunbookVersionRollbackWorkflowDetailArgs'] rollback_workflow_details: Rollback Workflow details.
        :param Sequence['GetRunbooksRunbookCollectionItemRunbookVersionTaskArgs'] tasks: A set of tasks to execute in the runbook.
        :param builtins.str version: The version of the runbook.
        """
        pulumi.set(__self__, "execution_workflow_details", execution_workflow_details)
        pulumi.set(__self__, "groups", groups)
        pulumi.set(__self__, "is_latest", is_latest)
        pulumi.set(__self__, "rollback_workflow_details", rollback_workflow_details)
        pulumi.set(__self__, "tasks", tasks)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="executionWorkflowDetails")
    def execution_workflow_details(self) -> Sequence['outputs.GetRunbooksRunbookCollectionItemRunbookVersionExecutionWorkflowDetailResult']:
        """
        Execution Workflow details.
        """
        return pulumi.get(self, "execution_workflow_details")

    @property
    @pulumi.getter
    def groups(self) -> Sequence['outputs.GetRunbooksRunbookCollectionItemRunbookVersionGroupResult']:
        """
        The groups of the runbook.
        """
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter(name="isLatest")
    def is_latest(self) -> builtins.bool:
        """
        Is this version the latest?
        """
        return pulumi.get(self, "is_latest")

    @property
    @pulumi.getter(name="rollbackWorkflowDetails")
    def rollback_workflow_details(self) -> Sequence['outputs.GetRunbooksRunbookCollectionItemRunbookVersionRollbackWorkflowDetailResult']:
        """
        Rollback Workflow details.
        """
        return pulumi.get(self, "rollback_workflow_details")

    @property
    @pulumi.getter
    def tasks(self) -> Sequence['outputs.GetRunbooksRunbookCollectionItemRunbookVersionTaskResult']:
        """
        A set of tasks to execute in the runbook.
        """
        return pulumi.get(self, "tasks")

    @property
    @pulumi.getter
    def version(self) -> builtins.str:
        """
        The version of the runbook.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetRunbooksRunbookCollectionItemRunbookVersionExecutionWorkflowDetailResult(dict):
    def __init__(__self__, *,
                 workflows: Sequence['outputs.GetRunbooksRunbookCollectionItemRunbookVersionExecutionWorkflowDetailWorkflowResult']):
        """
        :param Sequence['GetRunbooksRunbookCollectionItemRunbookVersionExecutionWorkflowDetailWorkflowArgs'] workflows: Rollback Workflow for the runbook.
        """
        pulumi.set(__self__, "workflows", workflows)

    @property
    @pulumi.getter
    def workflows(self) -> Sequence['outputs.GetRunbooksRunbookCollectionItemRunbookVersionExecutionWorkflowDetailWorkflowResult']:
        """
        Rollback Workflow for the runbook.
        """
        return pulumi.get(self, "workflows")


@pulumi.output_type
class GetRunbooksRunbookCollectionItemRunbookVersionExecutionWorkflowDetailWorkflowResult(dict):
    def __init__(__self__, *,
                 group_name: builtins.str,
                 steps: Sequence['outputs.GetRunbooksRunbookCollectionItemRunbookVersionExecutionWorkflowDetailWorkflowStepResult'],
                 type: builtins.str):
        """
        :param builtins.str group_name: Name of the group.
        :param Sequence['GetRunbooksRunbookCollectionItemRunbookVersionExecutionWorkflowDetailWorkflowStepArgs'] steps: Tasks within the Group. Provide the stepName for all applicable tasks.
        :param builtins.str type: A filter to return runbooks whose type matches the given type.
        """
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "steps", steps)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> builtins.str:
        """
        Name of the group.
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter
    def steps(self) -> Sequence['outputs.GetRunbooksRunbookCollectionItemRunbookVersionExecutionWorkflowDetailWorkflowStepResult']:
        """
        Tasks within the Group. Provide the stepName for all applicable tasks.
        """
        return pulumi.get(self, "steps")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        A filter to return runbooks whose type matches the given type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRunbooksRunbookCollectionItemRunbookVersionExecutionWorkflowDetailWorkflowStepResult(dict):
    def __init__(__self__, *,
                 group_name: builtins.str,
                 step_name: builtins.str,
                 steps: Sequence[builtins.str],
                 type: builtins.str):
        """
        :param builtins.str group_name: Name of the group.
        :param builtins.str step_name: The name of the task step the output variable belongs to.
        :param Sequence[builtins.str] steps: Tasks within the Group. Provide the stepName for all applicable tasks.
        :param builtins.str type: A filter to return runbooks whose type matches the given type.
        """
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "step_name", step_name)
        pulumi.set(__self__, "steps", steps)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> builtins.str:
        """
        Name of the group.
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> builtins.str:
        """
        The name of the task step the output variable belongs to.
        """
        return pulumi.get(self, "step_name")

    @property
    @pulumi.getter
    def steps(self) -> Sequence[builtins.str]:
        """
        Tasks within the Group. Provide the stepName for all applicable tasks.
        """
        return pulumi.get(self, "steps")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        A filter to return runbooks whose type matches the given type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRunbooksRunbookCollectionItemRunbookVersionGroupResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 properties: Sequence['outputs.GetRunbooksRunbookCollectionItemRunbookVersionGroupPropertyResult'],
                 type: builtins.str):
        """
        :param builtins.str name: The name of the task
        :param Sequence['GetRunbooksRunbookCollectionItemRunbookVersionGroupPropertyArgs'] properties: The properties of the task.
        :param builtins.str type: A filter to return runbooks whose type matches the given type.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the task
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetRunbooksRunbookCollectionItemRunbookVersionGroupPropertyResult']:
        """
        The properties of the task.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        A filter to return runbooks whose type matches the given type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRunbooksRunbookCollectionItemRunbookVersionGroupPropertyResult(dict):
    def __init__(__self__, *,
                 action_on_failure: builtins.str,
                 notification_preferences: Sequence['outputs.GetRunbooksRunbookCollectionItemRunbookVersionGroupPropertyNotificationPreferenceResult'],
                 pause_details: Sequence['outputs.GetRunbooksRunbookCollectionItemRunbookVersionGroupPropertyPauseDetailResult'],
                 pre_condition: builtins.str,
                 run_ons: Sequence['outputs.GetRunbooksRunbookCollectionItemRunbookVersionGroupPropertyRunOnResult']):
        """
        :param builtins.str action_on_failure: The action to be taken in case of a failure.
        :param Sequence['GetRunbooksRunbookCollectionItemRunbookVersionGroupPropertyNotificationPreferenceArgs'] notification_preferences: Preferences to send notifications on the task activities.
        :param Sequence['GetRunbooksRunbookCollectionItemRunbookVersionGroupPropertyPauseDetailArgs'] pause_details: Pause Details
        :param builtins.str pre_condition: Build control flow conditions that determine the relevance of the task execution.
        :param Sequence['GetRunbooksRunbookCollectionItemRunbookVersionGroupPropertyRunOnArgs'] run_ons: The runon conditions
        """
        pulumi.set(__self__, "action_on_failure", action_on_failure)
        pulumi.set(__self__, "notification_preferences", notification_preferences)
        pulumi.set(__self__, "pause_details", pause_details)
        pulumi.set(__self__, "pre_condition", pre_condition)
        pulumi.set(__self__, "run_ons", run_ons)

    @property
    @pulumi.getter(name="actionOnFailure")
    def action_on_failure(self) -> builtins.str:
        """
        The action to be taken in case of a failure.
        """
        return pulumi.get(self, "action_on_failure")

    @property
    @pulumi.getter(name="notificationPreferences")
    def notification_preferences(self) -> Sequence['outputs.GetRunbooksRunbookCollectionItemRunbookVersionGroupPropertyNotificationPreferenceResult']:
        """
        Preferences to send notifications on the task activities.
        """
        return pulumi.get(self, "notification_preferences")

    @property
    @pulumi.getter(name="pauseDetails")
    def pause_details(self) -> Sequence['outputs.GetRunbooksRunbookCollectionItemRunbookVersionGroupPropertyPauseDetailResult']:
        """
        Pause Details
        """
        return pulumi.get(self, "pause_details")

    @property
    @pulumi.getter(name="preCondition")
    def pre_condition(self) -> builtins.str:
        """
        Build control flow conditions that determine the relevance of the task execution.
        """
        return pulumi.get(self, "pre_condition")

    @property
    @pulumi.getter(name="runOns")
    def run_ons(self) -> Sequence['outputs.GetRunbooksRunbookCollectionItemRunbookVersionGroupPropertyRunOnResult']:
        """
        The runon conditions
        """
        return pulumi.get(self, "run_ons")


@pulumi.output_type
class GetRunbooksRunbookCollectionItemRunbookVersionGroupPropertyNotificationPreferenceResult(dict):
    def __init__(__self__, *,
                 should_notify_on_pause: builtins.bool,
                 should_notify_on_task_failure: builtins.bool,
                 should_notify_on_task_success: builtins.bool):
        """
        :param builtins.bool should_notify_on_pause: Enables notification on pause.
        :param builtins.bool should_notify_on_task_failure: Enables or disables notification on Task Failures.
        :param builtins.bool should_notify_on_task_success: Enables or disables notification on Task Success.
        """
        pulumi.set(__self__, "should_notify_on_pause", should_notify_on_pause)
        pulumi.set(__self__, "should_notify_on_task_failure", should_notify_on_task_failure)
        pulumi.set(__self__, "should_notify_on_task_success", should_notify_on_task_success)

    @property
    @pulumi.getter(name="shouldNotifyOnPause")
    def should_notify_on_pause(self) -> builtins.bool:
        """
        Enables notification on pause.
        """
        return pulumi.get(self, "should_notify_on_pause")

    @property
    @pulumi.getter(name="shouldNotifyOnTaskFailure")
    def should_notify_on_task_failure(self) -> builtins.bool:
        """
        Enables or disables notification on Task Failures.
        """
        return pulumi.get(self, "should_notify_on_task_failure")

    @property
    @pulumi.getter(name="shouldNotifyOnTaskSuccess")
    def should_notify_on_task_success(self) -> builtins.bool:
        """
        Enables or disables notification on Task Success.
        """
        return pulumi.get(self, "should_notify_on_task_success")


@pulumi.output_type
class GetRunbooksRunbookCollectionItemRunbookVersionGroupPropertyPauseDetailResult(dict):
    def __init__(__self__, *,
                 duration_in_minutes: builtins.int,
                 kind: builtins.str):
        """
        :param builtins.int duration_in_minutes: Time in minutes to apply Pause.
        :param builtins.str kind: Run on based On.
        """
        pulumi.set(__self__, "duration_in_minutes", duration_in_minutes)
        pulumi.set(__self__, "kind", kind)

    @property
    @pulumi.getter(name="durationInMinutes")
    def duration_in_minutes(self) -> builtins.int:
        """
        Time in minutes to apply Pause.
        """
        return pulumi.get(self, "duration_in_minutes")

    @property
    @pulumi.getter
    def kind(self) -> builtins.str:
        """
        Run on based On.
        """
        return pulumi.get(self, "kind")


@pulumi.output_type
class GetRunbooksRunbookCollectionItemRunbookVersionGroupPropertyRunOnResult(dict):
    def __init__(__self__, *,
                 condition: builtins.str,
                 host: builtins.str,
                 kind: builtins.str,
                 previous_task_instance_details: Sequence['outputs.GetRunbooksRunbookCollectionItemRunbookVersionGroupPropertyRunOnPreviousTaskInstanceDetailResult']):
        """
        :param builtins.str condition: Build control flow conditions that determine the relevance of the task execution.
        :param builtins.str host: OCID of the self hosted instance.
        :param builtins.str kind: Run on based On.
        :param Sequence['GetRunbooksRunbookCollectionItemRunbookVersionGroupPropertyRunOnPreviousTaskInstanceDetailArgs'] previous_task_instance_details: Previous Task Instance Details
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "previous_task_instance_details", previous_task_instance_details)

    @property
    @pulumi.getter
    def condition(self) -> builtins.str:
        """
        Build control flow conditions that determine the relevance of the task execution.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def host(self) -> builtins.str:
        """
        OCID of the self hosted instance.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def kind(self) -> builtins.str:
        """
        Run on based On.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="previousTaskInstanceDetails")
    def previous_task_instance_details(self) -> Sequence['outputs.GetRunbooksRunbookCollectionItemRunbookVersionGroupPropertyRunOnPreviousTaskInstanceDetailResult']:
        """
        Previous Task Instance Details
        """
        return pulumi.get(self, "previous_task_instance_details")


@pulumi.output_type
class GetRunbooksRunbookCollectionItemRunbookVersionGroupPropertyRunOnPreviousTaskInstanceDetailResult(dict):
    def __init__(__self__, *,
                 output_variable_details: Sequence['outputs.GetRunbooksRunbookCollectionItemRunbookVersionGroupPropertyRunOnPreviousTaskInstanceDetailOutputVariableDetailResult'],
                 resource_id: builtins.str,
                 resource_type: builtins.str):
        """
        :param Sequence['GetRunbooksRunbookCollectionItemRunbookVersionGroupPropertyRunOnPreviousTaskInstanceDetailOutputVariableDetailArgs'] output_variable_details: The details of the output variable that will be used for mapping.
        :param builtins.str resource_id: Resource Ocid.
        :param builtins.str resource_type: Resource Type.
        """
        pulumi.set(__self__, "output_variable_details", output_variable_details)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter(name="outputVariableDetails")
    def output_variable_details(self) -> Sequence['outputs.GetRunbooksRunbookCollectionItemRunbookVersionGroupPropertyRunOnPreviousTaskInstanceDetailOutputVariableDetailResult']:
        """
        The details of the output variable that will be used for mapping.
        """
        return pulumi.get(self, "output_variable_details")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> builtins.str:
        """
        Resource Ocid.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> builtins.str:
        """
        Resource Type.
        """
        return pulumi.get(self, "resource_type")


@pulumi.output_type
class GetRunbooksRunbookCollectionItemRunbookVersionGroupPropertyRunOnPreviousTaskInstanceDetailOutputVariableDetailResult(dict):
    def __init__(__self__, *,
                 output_variable_name: builtins.str,
                 step_name: builtins.str):
        """
        :param builtins.str output_variable_name: The name of the output variable whose value has to be mapped.
        :param builtins.str step_name: The name of the task step the output variable belongs to.
        """
        pulumi.set(__self__, "output_variable_name", output_variable_name)
        pulumi.set(__self__, "step_name", step_name)

    @property
    @pulumi.getter(name="outputVariableName")
    def output_variable_name(self) -> builtins.str:
        """
        The name of the output variable whose value has to be mapped.
        """
        return pulumi.get(self, "output_variable_name")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> builtins.str:
        """
        The name of the task step the output variable belongs to.
        """
        return pulumi.get(self, "step_name")


@pulumi.output_type
class GetRunbooksRunbookCollectionItemRunbookVersionRollbackWorkflowDetailResult(dict):
    def __init__(__self__, *,
                 scope: builtins.str,
                 workflows: Sequence['outputs.GetRunbooksRunbookCollectionItemRunbookVersionRollbackWorkflowDetailWorkflowResult']):
        """
        :param builtins.str scope: The scope of the task.
        :param Sequence['GetRunbooksRunbookCollectionItemRunbookVersionRollbackWorkflowDetailWorkflowArgs'] workflows: Rollback Workflow for the runbook.
        """
        pulumi.set(__self__, "scope", scope)
        pulumi.set(__self__, "workflows", workflows)

    @property
    @pulumi.getter
    def scope(self) -> builtins.str:
        """
        The scope of the task.
        """
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter
    def workflows(self) -> Sequence['outputs.GetRunbooksRunbookCollectionItemRunbookVersionRollbackWorkflowDetailWorkflowResult']:
        """
        Rollback Workflow for the runbook.
        """
        return pulumi.get(self, "workflows")


@pulumi.output_type
class GetRunbooksRunbookCollectionItemRunbookVersionRollbackWorkflowDetailWorkflowResult(dict):
    def __init__(__self__, *,
                 group_name: builtins.str,
                 steps: Sequence['outputs.GetRunbooksRunbookCollectionItemRunbookVersionRollbackWorkflowDetailWorkflowStepResult'],
                 type: builtins.str):
        """
        :param builtins.str group_name: Name of the group.
        :param Sequence['GetRunbooksRunbookCollectionItemRunbookVersionRollbackWorkflowDetailWorkflowStepArgs'] steps: Tasks within the Group. Provide the stepName for all applicable tasks.
        :param builtins.str type: A filter to return runbooks whose type matches the given type.
        """
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "steps", steps)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> builtins.str:
        """
        Name of the group.
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter
    def steps(self) -> Sequence['outputs.GetRunbooksRunbookCollectionItemRunbookVersionRollbackWorkflowDetailWorkflowStepResult']:
        """
        Tasks within the Group. Provide the stepName for all applicable tasks.
        """
        return pulumi.get(self, "steps")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        A filter to return runbooks whose type matches the given type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRunbooksRunbookCollectionItemRunbookVersionRollbackWorkflowDetailWorkflowStepResult(dict):
    def __init__(__self__, *,
                 group_name: builtins.str,
                 step_name: builtins.str,
                 steps: Sequence[builtins.str],
                 type: builtins.str):
        """
        :param builtins.str group_name: Name of the group.
        :param builtins.str step_name: The name of the task step the output variable belongs to.
        :param Sequence[builtins.str] steps: Tasks within the Group. Provide the stepName for all applicable tasks.
        :param builtins.str type: A filter to return runbooks whose type matches the given type.
        """
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "step_name", step_name)
        pulumi.set(__self__, "steps", steps)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> builtins.str:
        """
        Name of the group.
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> builtins.str:
        """
        The name of the task step the output variable belongs to.
        """
        return pulumi.get(self, "step_name")

    @property
    @pulumi.getter
    def steps(self) -> Sequence[builtins.str]:
        """
        Tasks within the Group. Provide the stepName for all applicable tasks.
        """
        return pulumi.get(self, "steps")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        A filter to return runbooks whose type matches the given type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRunbooksRunbookCollectionItemRunbookVersionTaskResult(dict):
    def __init__(__self__, *,
                 output_variable_mappings: Sequence['outputs.GetRunbooksRunbookCollectionItemRunbookVersionTaskOutputVariableMappingResult'],
                 step_name: builtins.str,
                 step_properties: Sequence['outputs.GetRunbooksRunbookCollectionItemRunbookVersionTaskStepPropertyResult'],
                 task_record_details: Sequence['outputs.GetRunbooksRunbookCollectionItemRunbookVersionTaskTaskRecordDetailResult']):
        """
        :param Sequence['GetRunbooksRunbookCollectionItemRunbookVersionTaskOutputVariableMappingArgs'] output_variable_mappings: Mapping output variables of previous tasks to the input variables of the current task.
        :param builtins.str step_name: The name of the task step the output variable belongs to.
        :param Sequence['GetRunbooksRunbookCollectionItemRunbookVersionTaskStepPropertyArgs'] step_properties: The properties of the component.
        :param Sequence['GetRunbooksRunbookCollectionItemRunbookVersionTaskTaskRecordDetailArgs'] task_record_details: The details of the task.
        """
        pulumi.set(__self__, "output_variable_mappings", output_variable_mappings)
        pulumi.set(__self__, "step_name", step_name)
        pulumi.set(__self__, "step_properties", step_properties)
        pulumi.set(__self__, "task_record_details", task_record_details)

    @property
    @pulumi.getter(name="outputVariableMappings")
    def output_variable_mappings(self) -> Sequence['outputs.GetRunbooksRunbookCollectionItemRunbookVersionTaskOutputVariableMappingResult']:
        """
        Mapping output variables of previous tasks to the input variables of the current task.
        """
        return pulumi.get(self, "output_variable_mappings")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> builtins.str:
        """
        The name of the task step the output variable belongs to.
        """
        return pulumi.get(self, "step_name")

    @property
    @pulumi.getter(name="stepProperties")
    def step_properties(self) -> Sequence['outputs.GetRunbooksRunbookCollectionItemRunbookVersionTaskStepPropertyResult']:
        """
        The properties of the component.
        """
        return pulumi.get(self, "step_properties")

    @property
    @pulumi.getter(name="taskRecordDetails")
    def task_record_details(self) -> Sequence['outputs.GetRunbooksRunbookCollectionItemRunbookVersionTaskTaskRecordDetailResult']:
        """
        The details of the task.
        """
        return pulumi.get(self, "task_record_details")


@pulumi.output_type
class GetRunbooksRunbookCollectionItemRunbookVersionTaskOutputVariableMappingResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 output_variable_details: Sequence['outputs.GetRunbooksRunbookCollectionItemRunbookVersionTaskOutputVariableMappingOutputVariableDetailResult']):
        """
        :param builtins.str name: The name of the task
        :param Sequence['GetRunbooksRunbookCollectionItemRunbookVersionTaskOutputVariableMappingOutputVariableDetailArgs'] output_variable_details: The details of the output variable that will be used for mapping.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "output_variable_details", output_variable_details)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the task
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="outputVariableDetails")
    def output_variable_details(self) -> Sequence['outputs.GetRunbooksRunbookCollectionItemRunbookVersionTaskOutputVariableMappingOutputVariableDetailResult']:
        """
        The details of the output variable that will be used for mapping.
        """
        return pulumi.get(self, "output_variable_details")


@pulumi.output_type
class GetRunbooksRunbookCollectionItemRunbookVersionTaskOutputVariableMappingOutputVariableDetailResult(dict):
    def __init__(__self__, *,
                 output_variable_name: builtins.str,
                 step_name: builtins.str):
        """
        :param builtins.str output_variable_name: The name of the output variable whose value has to be mapped.
        :param builtins.str step_name: The name of the task step the output variable belongs to.
        """
        pulumi.set(__self__, "output_variable_name", output_variable_name)
        pulumi.set(__self__, "step_name", step_name)

    @property
    @pulumi.getter(name="outputVariableName")
    def output_variable_name(self) -> builtins.str:
        """
        The name of the output variable whose value has to be mapped.
        """
        return pulumi.get(self, "output_variable_name")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> builtins.str:
        """
        The name of the task step the output variable belongs to.
        """
        return pulumi.get(self, "step_name")


@pulumi.output_type
class GetRunbooksRunbookCollectionItemRunbookVersionTaskStepPropertyResult(dict):
    def __init__(__self__, *,
                 action_on_failure: builtins.str,
                 notification_preferences: Sequence['outputs.GetRunbooksRunbookCollectionItemRunbookVersionTaskStepPropertyNotificationPreferenceResult'],
                 pause_details: Sequence['outputs.GetRunbooksRunbookCollectionItemRunbookVersionTaskStepPropertyPauseDetailResult'],
                 pre_condition: builtins.str,
                 run_ons: Sequence['outputs.GetRunbooksRunbookCollectionItemRunbookVersionTaskStepPropertyRunOnResult']):
        """
        :param builtins.str action_on_failure: The action to be taken in case of a failure.
        :param Sequence['GetRunbooksRunbookCollectionItemRunbookVersionTaskStepPropertyNotificationPreferenceArgs'] notification_preferences: Preferences to send notifications on the task activities.
        :param Sequence['GetRunbooksRunbookCollectionItemRunbookVersionTaskStepPropertyPauseDetailArgs'] pause_details: Pause Details
        :param builtins.str pre_condition: Build control flow conditions that determine the relevance of the task execution.
        :param Sequence['GetRunbooksRunbookCollectionItemRunbookVersionTaskStepPropertyRunOnArgs'] run_ons: The runon conditions
        """
        pulumi.set(__self__, "action_on_failure", action_on_failure)
        pulumi.set(__self__, "notification_preferences", notification_preferences)
        pulumi.set(__self__, "pause_details", pause_details)
        pulumi.set(__self__, "pre_condition", pre_condition)
        pulumi.set(__self__, "run_ons", run_ons)

    @property
    @pulumi.getter(name="actionOnFailure")
    def action_on_failure(self) -> builtins.str:
        """
        The action to be taken in case of a failure.
        """
        return pulumi.get(self, "action_on_failure")

    @property
    @pulumi.getter(name="notificationPreferences")
    def notification_preferences(self) -> Sequence['outputs.GetRunbooksRunbookCollectionItemRunbookVersionTaskStepPropertyNotificationPreferenceResult']:
        """
        Preferences to send notifications on the task activities.
        """
        return pulumi.get(self, "notification_preferences")

    @property
    @pulumi.getter(name="pauseDetails")
    def pause_details(self) -> Sequence['outputs.GetRunbooksRunbookCollectionItemRunbookVersionTaskStepPropertyPauseDetailResult']:
        """
        Pause Details
        """
        return pulumi.get(self, "pause_details")

    @property
    @pulumi.getter(name="preCondition")
    def pre_condition(self) -> builtins.str:
        """
        Build control flow conditions that determine the relevance of the task execution.
        """
        return pulumi.get(self, "pre_condition")

    @property
    @pulumi.getter(name="runOns")
    def run_ons(self) -> Sequence['outputs.GetRunbooksRunbookCollectionItemRunbookVersionTaskStepPropertyRunOnResult']:
        """
        The runon conditions
        """
        return pulumi.get(self, "run_ons")


@pulumi.output_type
class GetRunbooksRunbookCollectionItemRunbookVersionTaskStepPropertyNotificationPreferenceResult(dict):
    def __init__(__self__, *,
                 should_notify_on_pause: builtins.bool,
                 should_notify_on_task_failure: builtins.bool,
                 should_notify_on_task_success: builtins.bool):
        """
        :param builtins.bool should_notify_on_pause: Enables notification on pause.
        :param builtins.bool should_notify_on_task_failure: Enables or disables notification on Task Failures.
        :param builtins.bool should_notify_on_task_success: Enables or disables notification on Task Success.
        """
        pulumi.set(__self__, "should_notify_on_pause", should_notify_on_pause)
        pulumi.set(__self__, "should_notify_on_task_failure", should_notify_on_task_failure)
        pulumi.set(__self__, "should_notify_on_task_success", should_notify_on_task_success)

    @property
    @pulumi.getter(name="shouldNotifyOnPause")
    def should_notify_on_pause(self) -> builtins.bool:
        """
        Enables notification on pause.
        """
        return pulumi.get(self, "should_notify_on_pause")

    @property
    @pulumi.getter(name="shouldNotifyOnTaskFailure")
    def should_notify_on_task_failure(self) -> builtins.bool:
        """
        Enables or disables notification on Task Failures.
        """
        return pulumi.get(self, "should_notify_on_task_failure")

    @property
    @pulumi.getter(name="shouldNotifyOnTaskSuccess")
    def should_notify_on_task_success(self) -> builtins.bool:
        """
        Enables or disables notification on Task Success.
        """
        return pulumi.get(self, "should_notify_on_task_success")


@pulumi.output_type
class GetRunbooksRunbookCollectionItemRunbookVersionTaskStepPropertyPauseDetailResult(dict):
    def __init__(__self__, *,
                 duration_in_minutes: builtins.int,
                 kind: builtins.str):
        """
        :param builtins.int duration_in_minutes: Time in minutes to apply Pause.
        :param builtins.str kind: Run on based On.
        """
        pulumi.set(__self__, "duration_in_minutes", duration_in_minutes)
        pulumi.set(__self__, "kind", kind)

    @property
    @pulumi.getter(name="durationInMinutes")
    def duration_in_minutes(self) -> builtins.int:
        """
        Time in minutes to apply Pause.
        """
        return pulumi.get(self, "duration_in_minutes")

    @property
    @pulumi.getter
    def kind(self) -> builtins.str:
        """
        Run on based On.
        """
        return pulumi.get(self, "kind")


@pulumi.output_type
class GetRunbooksRunbookCollectionItemRunbookVersionTaskStepPropertyRunOnResult(dict):
    def __init__(__self__, *,
                 condition: builtins.str,
                 host: builtins.str,
                 kind: builtins.str,
                 previous_task_instance_details: Sequence['outputs.GetRunbooksRunbookCollectionItemRunbookVersionTaskStepPropertyRunOnPreviousTaskInstanceDetailResult']):
        """
        :param builtins.str condition: Build control flow conditions that determine the relevance of the task execution.
        :param builtins.str host: OCID of the self hosted instance.
        :param builtins.str kind: Run on based On.
        :param Sequence['GetRunbooksRunbookCollectionItemRunbookVersionTaskStepPropertyRunOnPreviousTaskInstanceDetailArgs'] previous_task_instance_details: Previous Task Instance Details
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "previous_task_instance_details", previous_task_instance_details)

    @property
    @pulumi.getter
    def condition(self) -> builtins.str:
        """
        Build control flow conditions that determine the relevance of the task execution.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def host(self) -> builtins.str:
        """
        OCID of the self hosted instance.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def kind(self) -> builtins.str:
        """
        Run on based On.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="previousTaskInstanceDetails")
    def previous_task_instance_details(self) -> Sequence['outputs.GetRunbooksRunbookCollectionItemRunbookVersionTaskStepPropertyRunOnPreviousTaskInstanceDetailResult']:
        """
        Previous Task Instance Details
        """
        return pulumi.get(self, "previous_task_instance_details")


@pulumi.output_type
class GetRunbooksRunbookCollectionItemRunbookVersionTaskStepPropertyRunOnPreviousTaskInstanceDetailResult(dict):
    def __init__(__self__, *,
                 output_variable_details: Sequence['outputs.GetRunbooksRunbookCollectionItemRunbookVersionTaskStepPropertyRunOnPreviousTaskInstanceDetailOutputVariableDetailResult'],
                 resource_id: builtins.str,
                 resource_type: builtins.str):
        """
        :param Sequence['GetRunbooksRunbookCollectionItemRunbookVersionTaskStepPropertyRunOnPreviousTaskInstanceDetailOutputVariableDetailArgs'] output_variable_details: The details of the output variable that will be used for mapping.
        :param builtins.str resource_id: Resource Ocid.
        :param builtins.str resource_type: Resource Type.
        """
        pulumi.set(__self__, "output_variable_details", output_variable_details)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter(name="outputVariableDetails")
    def output_variable_details(self) -> Sequence['outputs.GetRunbooksRunbookCollectionItemRunbookVersionTaskStepPropertyRunOnPreviousTaskInstanceDetailOutputVariableDetailResult']:
        """
        The details of the output variable that will be used for mapping.
        """
        return pulumi.get(self, "output_variable_details")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> builtins.str:
        """
        Resource Ocid.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> builtins.str:
        """
        Resource Type.
        """
        return pulumi.get(self, "resource_type")


@pulumi.output_type
class GetRunbooksRunbookCollectionItemRunbookVersionTaskStepPropertyRunOnPreviousTaskInstanceDetailOutputVariableDetailResult(dict):
    def __init__(__self__, *,
                 output_variable_name: builtins.str,
                 step_name: builtins.str):
        """
        :param builtins.str output_variable_name: The name of the output variable whose value has to be mapped.
        :param builtins.str step_name: The name of the task step the output variable belongs to.
        """
        pulumi.set(__self__, "output_variable_name", output_variable_name)
        pulumi.set(__self__, "step_name", step_name)

    @property
    @pulumi.getter(name="outputVariableName")
    def output_variable_name(self) -> builtins.str:
        """
        The name of the output variable whose value has to be mapped.
        """
        return pulumi.get(self, "output_variable_name")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> builtins.str:
        """
        The name of the task step the output variable belongs to.
        """
        return pulumi.get(self, "step_name")


@pulumi.output_type
class GetRunbooksRunbookCollectionItemRunbookVersionTaskTaskRecordDetailResult(dict):
    def __init__(__self__, *,
                 description: builtins.str,
                 execution_details: Sequence['outputs.GetRunbooksRunbookCollectionItemRunbookVersionTaskTaskRecordDetailExecutionDetailResult'],
                 is_apply_subject_task: builtins.bool,
                 is_copy_to_library_enabled: builtins.bool,
                 is_discovery_output_task: builtins.bool,
                 name: builtins.str,
                 os_type: builtins.str,
                 platform: builtins.str,
                 properties: Sequence['outputs.GetRunbooksRunbookCollectionItemRunbookVersionTaskTaskRecordDetailPropertyResult'],
                 scope: builtins.str,
                 task_record_id: builtins.str):
        """
        :param builtins.str description: The description of the argument.
        :param Sequence['GetRunbooksRunbookCollectionItemRunbookVersionTaskTaskRecordDetailExecutionDetailArgs'] execution_details: Execution details.
        :param builtins.bool is_apply_subject_task: Is this an Apply Subject Task? Ex. Patch Execution Task
        :param builtins.bool is_copy_to_library_enabled: Make a copy of this task in Library
        :param builtins.bool is_discovery_output_task: Is this a discovery output task?
        :param builtins.str name: The name of the task
        :param builtins.str os_type: The OS for the task.
        :param builtins.str platform: A filter to return runbooks whose platform matches the given platform.
        :param Sequence['GetRunbooksRunbookCollectionItemRunbookVersionTaskTaskRecordDetailPropertyArgs'] properties: The properties of the task.
        :param builtins.str scope: The scope of the task.
        :param builtins.str task_record_id: The ID of taskRecord.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "execution_details", execution_details)
        pulumi.set(__self__, "is_apply_subject_task", is_apply_subject_task)
        pulumi.set(__self__, "is_copy_to_library_enabled", is_copy_to_library_enabled)
        pulumi.set(__self__, "is_discovery_output_task", is_discovery_output_task)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "os_type", os_type)
        pulumi.set(__self__, "platform", platform)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "scope", scope)
        pulumi.set(__self__, "task_record_id", task_record_id)

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        The description of the argument.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="executionDetails")
    def execution_details(self) -> Sequence['outputs.GetRunbooksRunbookCollectionItemRunbookVersionTaskTaskRecordDetailExecutionDetailResult']:
        """
        Execution details.
        """
        return pulumi.get(self, "execution_details")

    @property
    @pulumi.getter(name="isApplySubjectTask")
    def is_apply_subject_task(self) -> builtins.bool:
        """
        Is this an Apply Subject Task? Ex. Patch Execution Task
        """
        return pulumi.get(self, "is_apply_subject_task")

    @property
    @pulumi.getter(name="isCopyToLibraryEnabled")
    def is_copy_to_library_enabled(self) -> builtins.bool:
        """
        Make a copy of this task in Library
        """
        return pulumi.get(self, "is_copy_to_library_enabled")

    @property
    @pulumi.getter(name="isDiscoveryOutputTask")
    def is_discovery_output_task(self) -> builtins.bool:
        """
        Is this a discovery output task?
        """
        return pulumi.get(self, "is_discovery_output_task")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the task
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> builtins.str:
        """
        The OS for the task.
        """
        return pulumi.get(self, "os_type")

    @property
    @pulumi.getter
    def platform(self) -> builtins.str:
        """
        A filter to return runbooks whose platform matches the given platform.
        """
        return pulumi.get(self, "platform")

    @property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetRunbooksRunbookCollectionItemRunbookVersionTaskTaskRecordDetailPropertyResult']:
        """
        The properties of the task.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def scope(self) -> builtins.str:
        """
        The scope of the task.
        """
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter(name="taskRecordId")
    def task_record_id(self) -> builtins.str:
        """
        The ID of taskRecord.
        """
        return pulumi.get(self, "task_record_id")


@pulumi.output_type
class GetRunbooksRunbookCollectionItemRunbookVersionTaskTaskRecordDetailExecutionDetailResult(dict):
    def __init__(__self__, *,
                 catalog_id: builtins.str,
                 command: builtins.str,
                 config_file: builtins.str,
                 contents: Sequence['outputs.GetRunbooksRunbookCollectionItemRunbookVersionTaskTaskRecordDetailExecutionDetailContentResult'],
                 credentials: Sequence['outputs.GetRunbooksRunbookCollectionItemRunbookVersionTaskTaskRecordDetailExecutionDetailCredentialResult'],
                 endpoint: builtins.str,
                 execution_type: builtins.str,
                 is_executable_content: builtins.bool,
                 is_locked: builtins.bool,
                 is_read_output_variable_enabled: builtins.bool,
                 target_compartment_id: builtins.str,
                 variables: Sequence['outputs.GetRunbooksRunbookCollectionItemRunbookVersionTaskTaskRecordDetailExecutionDetailVariableResult']):
        """
        :param builtins.str command: Optional command to execute the content. You can provide any commands/arguments that can't be part of the script.
        :param builtins.str config_file: Catalog Id having config file.
        :param Sequence['GetRunbooksRunbookCollectionItemRunbookVersionTaskTaskRecordDetailExecutionDetailContentArgs'] contents: Content Source details.
        :param Sequence['GetRunbooksRunbookCollectionItemRunbookVersionTaskTaskRecordDetailExecutionDetailCredentialArgs'] credentials: Credentials required for executing the task.
        :param builtins.str endpoint: Endpoint to be invoked.
        :param builtins.str execution_type: The action type of the task
        :param builtins.bool is_executable_content: Is the Content an executable file?
        :param builtins.bool is_locked: Is the script locked to prevent changes directly in Object Storage?
        :param builtins.bool is_read_output_variable_enabled: Is read output variable enabled
        :param builtins.str target_compartment_id: OCID of the compartment to which the resource belongs to.
        :param Sequence['GetRunbooksRunbookCollectionItemRunbookVersionTaskTaskRecordDetailExecutionDetailVariableArgs'] variables: The variable of the task. At least one of the dynamicArguments or output needs to be provided.
        """
        pulumi.set(__self__, "catalog_id", catalog_id)
        pulumi.set(__self__, "command", command)
        pulumi.set(__self__, "config_file", config_file)
        pulumi.set(__self__, "contents", contents)
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "execution_type", execution_type)
        pulumi.set(__self__, "is_executable_content", is_executable_content)
        pulumi.set(__self__, "is_locked", is_locked)
        pulumi.set(__self__, "is_read_output_variable_enabled", is_read_output_variable_enabled)
        pulumi.set(__self__, "target_compartment_id", target_compartment_id)
        pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> builtins.str:
        return pulumi.get(self, "catalog_id")

    @property
    @pulumi.getter
    def command(self) -> builtins.str:
        """
        Optional command to execute the content. You can provide any commands/arguments that can't be part of the script.
        """
        return pulumi.get(self, "command")

    @property
    @pulumi.getter(name="configFile")
    def config_file(self) -> builtins.str:
        """
        Catalog Id having config file.
        """
        return pulumi.get(self, "config_file")

    @property
    @pulumi.getter
    def contents(self) -> Sequence['outputs.GetRunbooksRunbookCollectionItemRunbookVersionTaskTaskRecordDetailExecutionDetailContentResult']:
        """
        Content Source details.
        """
        return pulumi.get(self, "contents")

    @property
    @pulumi.getter
    def credentials(self) -> Sequence['outputs.GetRunbooksRunbookCollectionItemRunbookVersionTaskTaskRecordDetailExecutionDetailCredentialResult']:
        """
        Credentials required for executing the task.
        """
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter
    def endpoint(self) -> builtins.str:
        """
        Endpoint to be invoked.
        """
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="executionType")
    def execution_type(self) -> builtins.str:
        """
        The action type of the task
        """
        return pulumi.get(self, "execution_type")

    @property
    @pulumi.getter(name="isExecutableContent")
    def is_executable_content(self) -> builtins.bool:
        """
        Is the Content an executable file?
        """
        return pulumi.get(self, "is_executable_content")

    @property
    @pulumi.getter(name="isLocked")
    def is_locked(self) -> builtins.bool:
        """
        Is the script locked to prevent changes directly in Object Storage?
        """
        return pulumi.get(self, "is_locked")

    @property
    @pulumi.getter(name="isReadOutputVariableEnabled")
    def is_read_output_variable_enabled(self) -> builtins.bool:
        """
        Is read output variable enabled
        """
        return pulumi.get(self, "is_read_output_variable_enabled")

    @property
    @pulumi.getter(name="targetCompartmentId")
    def target_compartment_id(self) -> builtins.str:
        """
        OCID of the compartment to which the resource belongs to.
        """
        return pulumi.get(self, "target_compartment_id")

    @property
    @pulumi.getter
    def variables(self) -> Sequence['outputs.GetRunbooksRunbookCollectionItemRunbookVersionTaskTaskRecordDetailExecutionDetailVariableResult']:
        """
        The variable of the task. At least one of the dynamicArguments or output needs to be provided.
        """
        return pulumi.get(self, "variables")


@pulumi.output_type
class GetRunbooksRunbookCollectionItemRunbookVersionTaskTaskRecordDetailExecutionDetailContentResult(dict):
    def __init__(__self__, *,
                 bucket: builtins.str,
                 catalog_id: builtins.str,
                 checksum: builtins.str,
                 namespace: builtins.str,
                 object: builtins.str,
                 source_type: builtins.str):
        """
        :param builtins.str bucket: Bucket Name.
        :param builtins.str checksum: md5 checksum of the artifact.
        :param builtins.str namespace: Namespace.
        :param builtins.str object: Object Name.
        :param builtins.str source_type: Content Source type details.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "catalog_id", catalog_id)
        pulumi.set(__self__, "checksum", checksum)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter
    def bucket(self) -> builtins.str:
        """
        Bucket Name.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> builtins.str:
        return pulumi.get(self, "catalog_id")

    @property
    @pulumi.getter
    def checksum(self) -> builtins.str:
        """
        md5 checksum of the artifact.
        """
        return pulumi.get(self, "checksum")

    @property
    @pulumi.getter
    def namespace(self) -> builtins.str:
        """
        Namespace.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> builtins.str:
        """
        Object Name.
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> builtins.str:
        """
        Content Source type details.
        """
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetRunbooksRunbookCollectionItemRunbookVersionTaskTaskRecordDetailExecutionDetailCredentialResult(dict):
    def __init__(__self__, *,
                 display_name: builtins.str,
                 id: builtins.str):
        """
        :param builtins.str display_name: A filter to return only resources that match the entire display name given.
        :param builtins.str id: Unique identifier or OCID for listing a single Runbook by id. Either compartmentId or id must be provided.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Unique identifier or OCID for listing a single Runbook by id. Either compartmentId or id must be provided.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetRunbooksRunbookCollectionItemRunbookVersionTaskTaskRecordDetailExecutionDetailVariableResult(dict):
    def __init__(__self__, *,
                 input_variables: Sequence['outputs.GetRunbooksRunbookCollectionItemRunbookVersionTaskTaskRecordDetailExecutionDetailVariableInputVariableResult'],
                 output_variables: Sequence[builtins.str]):
        """
        :param Sequence['GetRunbooksRunbookCollectionItemRunbookVersionTaskTaskRecordDetailExecutionDetailVariableInputVariableArgs'] input_variables: The input variables for the task.
        :param Sequence[builtins.str] output_variables: The list of output variables.
        """
        pulumi.set(__self__, "input_variables", input_variables)
        pulumi.set(__self__, "output_variables", output_variables)

    @property
    @pulumi.getter(name="inputVariables")
    def input_variables(self) -> Sequence['outputs.GetRunbooksRunbookCollectionItemRunbookVersionTaskTaskRecordDetailExecutionDetailVariableInputVariableResult']:
        """
        The input variables for the task.
        """
        return pulumi.get(self, "input_variables")

    @property
    @pulumi.getter(name="outputVariables")
    def output_variables(self) -> Sequence[builtins.str]:
        """
        The list of output variables.
        """
        return pulumi.get(self, "output_variables")


@pulumi.output_type
class GetRunbooksRunbookCollectionItemRunbookVersionTaskTaskRecordDetailExecutionDetailVariableInputVariableResult(dict):
    def __init__(__self__, *,
                 description: builtins.str,
                 name: builtins.str,
                 type: builtins.str):
        """
        :param builtins.str description: The description of the argument.
        :param builtins.str name: The name of the task
        :param builtins.str type: A filter to return runbooks whose type matches the given type.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        The description of the argument.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the task
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        A filter to return runbooks whose type matches the given type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRunbooksRunbookCollectionItemRunbookVersionTaskTaskRecordDetailPropertyResult(dict):
    def __init__(__self__, *,
                 num_retries: builtins.int,
                 timeout_in_seconds: builtins.int):
        """
        :param builtins.int num_retries: The number of retries allowed.
        :param builtins.int timeout_in_seconds: The timeout in seconds for the task.
        """
        pulumi.set(__self__, "num_retries", num_retries)
        pulumi.set(__self__, "timeout_in_seconds", timeout_in_seconds)

    @property
    @pulumi.getter(name="numRetries")
    def num_retries(self) -> builtins.int:
        """
        The number of retries allowed.
        """
        return pulumi.get(self, "num_retries")

    @property
    @pulumi.getter(name="timeoutInSeconds")
    def timeout_in_seconds(self) -> builtins.int:
        """
        The timeout in seconds for the task.
        """
        return pulumi.get(self, "timeout_in_seconds")


@pulumi.output_type
class GetSchedulerDefinitionActionGroupResult(dict):
    def __init__(__self__, *,
                 display_name: builtins.str,
                 fleet_id: builtins.str,
                 kind: builtins.str,
                 runbook_id: builtins.str,
                 runbook_version_name: builtins.str,
                 sequence: builtins.int):
        """
        :param builtins.str display_name: A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        :param builtins.str fleet_id: ID of the fleet
        :param builtins.str kind: Task argument kind
        :param builtins.str runbook_id: The ID of the Runbook
        :param builtins.str runbook_version_name: The runbook version name
        :param builtins.int sequence: Sequence of the Action Group. Action groups will be executed in a seuential order. All Action Groups having the same sequence will be executed parallely. If no value is provided a default value of 1 will be given.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "fleet_id", fleet_id)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "runbook_id", runbook_id)
        pulumi.set(__self__, "runbook_version_name", runbook_version_name)
        pulumi.set(__self__, "sequence", sequence)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="fleetId")
    def fleet_id(self) -> builtins.str:
        """
        ID of the fleet
        """
        return pulumi.get(self, "fleet_id")

    @property
    @pulumi.getter
    def kind(self) -> builtins.str:
        """
        Task argument kind
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="runbookId")
    def runbook_id(self) -> builtins.str:
        """
        The ID of the Runbook
        """
        return pulumi.get(self, "runbook_id")

    @property
    @pulumi.getter(name="runbookVersionName")
    def runbook_version_name(self) -> builtins.str:
        """
        The runbook version name
        """
        return pulumi.get(self, "runbook_version_name")

    @property
    @pulumi.getter
    def sequence(self) -> builtins.int:
        """
        Sequence of the Action Group. Action groups will be executed in a seuential order. All Action Groups having the same sequence will be executed parallely. If no value is provided a default value of 1 will be given.
        """
        return pulumi.get(self, "sequence")


@pulumi.output_type
class GetSchedulerDefinitionRunBookResult(dict):
    def __init__(__self__, *,
                 input_parameters: Sequence['outputs.GetSchedulerDefinitionRunBookInputParameterResult'],
                 runbook_id: builtins.str,
                 runbook_version_name: builtins.str):
        """
        :param Sequence['GetSchedulerDefinitionRunBookInputParameterArgs'] input_parameters: Input Parameters for the Task
        :param builtins.str runbook_id: The ID of the Runbook
        :param builtins.str runbook_version_name: The runbook version name
        """
        pulumi.set(__self__, "input_parameters", input_parameters)
        pulumi.set(__self__, "runbook_id", runbook_id)
        pulumi.set(__self__, "runbook_version_name", runbook_version_name)

    @property
    @pulumi.getter(name="inputParameters")
    def input_parameters(self) -> Sequence['outputs.GetSchedulerDefinitionRunBookInputParameterResult']:
        """
        Input Parameters for the Task
        """
        return pulumi.get(self, "input_parameters")

    @property
    @pulumi.getter(name="runbookId")
    def runbook_id(self) -> builtins.str:
        """
        The ID of the Runbook
        """
        return pulumi.get(self, "runbook_id")

    @property
    @pulumi.getter(name="runbookVersionName")
    def runbook_version_name(self) -> builtins.str:
        """
        The runbook version name
        """
        return pulumi.get(self, "runbook_version_name")


@pulumi.output_type
class GetSchedulerDefinitionRunBookInputParameterResult(dict):
    def __init__(__self__, *,
                 arguments: Sequence['outputs.GetSchedulerDefinitionRunBookInputParameterArgumentResult'],
                 step_name: builtins.str):
        """
        :param Sequence['GetSchedulerDefinitionRunBookInputParameterArgumentArgs'] arguments: Arguments for the Task
        :param builtins.str step_name: stepName for which the input parameters are provided
        """
        pulumi.set(__self__, "arguments", arguments)
        pulumi.set(__self__, "step_name", step_name)

    @property
    @pulumi.getter
    def arguments(self) -> Sequence['outputs.GetSchedulerDefinitionRunBookInputParameterArgumentResult']:
        """
        Arguments for the Task
        """
        return pulumi.get(self, "arguments")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> builtins.str:
        """
        stepName for which the input parameters are provided
        """
        return pulumi.get(self, "step_name")


@pulumi.output_type
class GetSchedulerDefinitionRunBookInputParameterArgumentResult(dict):
    def __init__(__self__, *,
                 contents: Sequence['outputs.GetSchedulerDefinitionRunBookInputParameterArgumentContentResult'],
                 kind: builtins.str,
                 name: builtins.str,
                 value: builtins.str):
        """
        :param Sequence['GetSchedulerDefinitionRunBookInputParameterArgumentContentArgs'] contents: Content Source details.
        :param builtins.str kind: Task argument kind
        :param builtins.str name: Name of the input variable
        :param builtins.str value: The task input
        """
        pulumi.set(__self__, "contents", contents)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def contents(self) -> Sequence['outputs.GetSchedulerDefinitionRunBookInputParameterArgumentContentResult']:
        """
        Content Source details.
        """
        return pulumi.get(self, "contents")

    @property
    @pulumi.getter
    def kind(self) -> builtins.str:
        """
        Task argument kind
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the input variable
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        The task input
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSchedulerDefinitionRunBookInputParameterArgumentContentResult(dict):
    def __init__(__self__, *,
                 bucket: builtins.str,
                 checksum: builtins.str,
                 namespace: builtins.str,
                 object: builtins.str,
                 source_type: builtins.str):
        """
        :param builtins.str bucket: Bucket Name.
        :param builtins.str checksum: md5 checksum of the artifact.
        :param builtins.str namespace: Namespace.
        :param builtins.str object: Object Name.
        :param builtins.str source_type: Content Source type details.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "checksum", checksum)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter
    def bucket(self) -> builtins.str:
        """
        Bucket Name.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def checksum(self) -> builtins.str:
        """
        md5 checksum of the artifact.
        """
        return pulumi.get(self, "checksum")

    @property
    @pulumi.getter
    def namespace(self) -> builtins.str:
        """
        Namespace.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> builtins.str:
        """
        Object Name.
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> builtins.str:
        """
        Content Source type details.
        """
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSchedulerDefinitionScheduleResult(dict):
    def __init__(__self__, *,
                 duration: builtins.str,
                 execution_startdate: builtins.str,
                 maintenance_window_id: builtins.str,
                 recurrences: builtins.str,
                 type: builtins.str):
        """
        :param builtins.str duration: Duration of the schedule.
        :param builtins.str execution_startdate: Start Date for the schedule. An RFC3339 formatted datetime string
        :param builtins.str maintenance_window_id: Provide MaintenanceWindowId
        :param builtins.str recurrences: Recurrence rule specification if recurring
        :param builtins.str type: Schedule Type
        """
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "execution_startdate", execution_startdate)
        pulumi.set(__self__, "maintenance_window_id", maintenance_window_id)
        pulumi.set(__self__, "recurrences", recurrences)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def duration(self) -> builtins.str:
        """
        Duration of the schedule.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter(name="executionStartdate")
    def execution_startdate(self) -> builtins.str:
        """
        Start Date for the schedule. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "execution_startdate")

    @property
    @pulumi.getter(name="maintenanceWindowId")
    def maintenance_window_id(self) -> builtins.str:
        """
        Provide MaintenanceWindowId
        """
        return pulumi.get(self, "maintenance_window_id")

    @property
    @pulumi.getter
    def recurrences(self) -> builtins.str:
        """
        Recurrence rule specification if recurring
        """
        return pulumi.get(self, "recurrences")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Schedule Type
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetSchedulerDefinitionScheduledFleetsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSchedulerDefinitionScheduledFleetsScheduledFleetCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetSchedulerDefinitionScheduledFleetsScheduledFleetCollectionItemResult']):
        """
        :param Sequence['GetSchedulerDefinitionScheduledFleetsScheduledFleetCollectionItemArgs'] items: List of ScheduledFleets.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetSchedulerDefinitionScheduledFleetsScheduledFleetCollectionItemResult']:
        """
        List of ScheduledFleets.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSchedulerDefinitionScheduledFleetsScheduledFleetCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: builtins.str,
                 count_of_affected_resources: builtins.int,
                 count_of_affected_targets: builtins.int,
                 display_name: builtins.str,
                 id: builtins.str,
                 products: Sequence[builtins.str],
                 system_tags: Mapping[str, builtins.str]):
        """
        :param builtins.str compartment_id: The OCID of the resource.
        :param builtins.int count_of_affected_resources: Count of Resources affected by the Schedule
        :param builtins.int count_of_affected_targets: Count of Targets affected by the Schedule
        :param builtins.str display_name: A filter to return only resources that match the entire display name given.
        :param builtins.str id: The OCID of the resource.
        :param Sequence[builtins.str] products: All products part of the schedule.
        :param Mapping[str, builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "count_of_affected_resources", count_of_affected_resources)
        pulumi.set(__self__, "count_of_affected_targets", count_of_affected_targets)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "products", products)
        pulumi.set(__self__, "system_tags", system_tags)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        The OCID of the resource.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="countOfAffectedResources")
    def count_of_affected_resources(self) -> builtins.int:
        """
        Count of Resources affected by the Schedule
        """
        return pulumi.get(self, "count_of_affected_resources")

    @property
    @pulumi.getter(name="countOfAffectedTargets")
    def count_of_affected_targets(self) -> builtins.int:
        """
        Count of Targets affected by the Schedule
        """
        return pulumi.get(self, "count_of_affected_targets")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The OCID of the resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def products(self) -> Sequence[builtins.str]:
        """
        All products part of the schedule.
        """
        return pulumi.get(self, "products")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")


@pulumi.output_type
class GetSchedulerDefinitionsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        """
        :param builtins.str name: Name of the input variable
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the input variable
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSchedulerDefinitionsSchedulerDefinitionCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetSchedulerDefinitionsSchedulerDefinitionCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetSchedulerDefinitionsSchedulerDefinitionCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSchedulerDefinitionsSchedulerDefinitionCollectionItemResult(dict):
    def __init__(__self__, *,
                 action_groups: Sequence['outputs.GetSchedulerDefinitionsSchedulerDefinitionCollectionItemActionGroupResult'],
                 compartment_id: builtins.str,
                 count_of_affected_action_groups: builtins.int,
                 count_of_affected_resources: builtins.int,
                 count_of_affected_targets: builtins.int,
                 defined_tags: Mapping[str, builtins.str],
                 description: builtins.str,
                 display_name: builtins.str,
                 freeform_tags: Mapping[str, builtins.str],
                 id: builtins.str,
                 lifecycle_details: builtins.str,
                 lifecycle_operations: Sequence[builtins.str],
                 products: Sequence[builtins.str],
                 resource_region: builtins.str,
                 run_books: Sequence['outputs.GetSchedulerDefinitionsSchedulerDefinitionCollectionItemRunBookResult'],
                 schedules: Sequence['outputs.GetSchedulerDefinitionsSchedulerDefinitionCollectionItemScheduleResult'],
                 state: builtins.str,
                 system_tags: Mapping[str, builtins.str],
                 time_created: builtins.str,
                 time_of_next_run: builtins.str,
                 time_updated: builtins.str):
        """
        :param Sequence['GetSchedulerDefinitionsSchedulerDefinitionCollectionItemActionGroupArgs'] action_groups: Action Groups associated with the Schedule.
        :param builtins.str compartment_id: The ID of the compartment in which to list resources. Empty only if the resource OCID query param is not specified.
        :param builtins.int count_of_affected_action_groups: Count of Action Groups affected by the Schedule.
        :param builtins.int count_of_affected_resources: Count of Resources affected by the Schedule.
        :param builtins.int count_of_affected_targets: Count of Targets affected by the Schedule.
        :param Mapping[str, builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param builtins.str description: A user-friendly description. To provide some insight about the resource. Avoid entering confidential information.
        :param builtins.str display_name: A filter to return only resources that match the entire display name given.
        :param Mapping[str, builtins.str] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param builtins.str id: Unique identifier or OCID for listing a single Schedule Definition by id. Either compartmentId or id must be provided.
        :param builtins.str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param Sequence[builtins.str] lifecycle_operations: All LifeCycle Operations that are part of the schedule.
        :param Sequence[builtins.str] products: All products that are part of the schedule for PRODUCT ActionGroup Type.
        :param builtins.str resource_region: Associated region
        :param Sequence['GetSchedulerDefinitionsSchedulerDefinitionCollectionItemRunBookArgs'] run_books: Runbooks.
        :param Sequence['GetSchedulerDefinitionsSchedulerDefinitionCollectionItemScheduleArgs'] schedules: Schedule Information.
        :param builtins.str state: A filter to return only scheduleDefinitions whose lifecycleState matches the given lifecycleState.
        :param Mapping[str, builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param builtins.str time_created: The time this resource was created. An RFC3339 formatted datetime string.
        :param builtins.str time_of_next_run: The scheduled date for the next run of the Job.
        :param builtins.str time_updated: The time this resource was last updated. An RFC3339 formatted datetime string.
        """
        pulumi.set(__self__, "action_groups", action_groups)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "count_of_affected_action_groups", count_of_affected_action_groups)
        pulumi.set(__self__, "count_of_affected_resources", count_of_affected_resources)
        pulumi.set(__self__, "count_of_affected_targets", count_of_affected_targets)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "lifecycle_operations", lifecycle_operations)
        pulumi.set(__self__, "products", products)
        pulumi.set(__self__, "resource_region", resource_region)
        pulumi.set(__self__, "run_books", run_books)
        pulumi.set(__self__, "schedules", schedules)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_of_next_run", time_of_next_run)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="actionGroups")
    def action_groups(self) -> Sequence['outputs.GetSchedulerDefinitionsSchedulerDefinitionCollectionItemActionGroupResult']:
        """
        Action Groups associated with the Schedule.
        """
        return pulumi.get(self, "action_groups")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        The ID of the compartment in which to list resources. Empty only if the resource OCID query param is not specified.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="countOfAffectedActionGroups")
    def count_of_affected_action_groups(self) -> builtins.int:
        """
        Count of Action Groups affected by the Schedule.
        """
        return pulumi.get(self, "count_of_affected_action_groups")

    @property
    @pulumi.getter(name="countOfAffectedResources")
    def count_of_affected_resources(self) -> builtins.int:
        """
        Count of Resources affected by the Schedule.
        """
        return pulumi.get(self, "count_of_affected_resources")

    @property
    @pulumi.getter(name="countOfAffectedTargets")
    def count_of_affected_targets(self) -> builtins.int:
        """
        Count of Targets affected by the Schedule.
        """
        return pulumi.get(self, "count_of_affected_targets")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        A user-friendly description. To provide some insight about the resource. Avoid entering confidential information.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Unique identifier or OCID for listing a single Schedule Definition by id. Either compartmentId or id must be provided.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> builtins.str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="lifecycleOperations")
    def lifecycle_operations(self) -> Sequence[builtins.str]:
        """
        All LifeCycle Operations that are part of the schedule.
        """
        return pulumi.get(self, "lifecycle_operations")

    @property
    @pulumi.getter
    def products(self) -> Sequence[builtins.str]:
        """
        All products that are part of the schedule for PRODUCT ActionGroup Type.
        """
        return pulumi.get(self, "products")

    @property
    @pulumi.getter(name="resourceRegion")
    def resource_region(self) -> builtins.str:
        """
        Associated region
        """
        return pulumi.get(self, "resource_region")

    @property
    @pulumi.getter(name="runBooks")
    def run_books(self) -> Sequence['outputs.GetSchedulerDefinitionsSchedulerDefinitionCollectionItemRunBookResult']:
        """
        Runbooks.
        """
        return pulumi.get(self, "run_books")

    @property
    @pulumi.getter
    def schedules(self) -> Sequence['outputs.GetSchedulerDefinitionsSchedulerDefinitionCollectionItemScheduleResult']:
        """
        Schedule Information.
        """
        return pulumi.get(self, "schedules")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        A filter to return only scheduleDefinitions whose lifecycleState matches the given lifecycleState.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The time this resource was created. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeOfNextRun")
    def time_of_next_run(self) -> builtins.str:
        """
        The scheduled date for the next run of the Job.
        """
        return pulumi.get(self, "time_of_next_run")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> builtins.str:
        """
        The time this resource was last updated. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetSchedulerDefinitionsSchedulerDefinitionCollectionItemActionGroupResult(dict):
    def __init__(__self__, *,
                 display_name: builtins.str,
                 fleet_id: builtins.str,
                 kind: builtins.str,
                 runbook_id: builtins.str,
                 runbook_version_name: builtins.str,
                 sequence: builtins.int):
        """
        :param builtins.str display_name: A filter to return only resources that match the entire display name given.
        :param builtins.str fleet_id: unique Fleet identifier
        :param builtins.str kind: Task argument kind
        :param builtins.str runbook_id: A filter to return only schedule definitions whose associated runbookId matches the given runbookId.
        :param builtins.str runbook_version_name: RunbookVersion Name filter
        :param builtins.int sequence: Sequence of the Action Group. Action groups will be executed in a seuential order. All Action Groups having the same sequence will be executed parallely. If no value is provided a default value of 1 will be given.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "fleet_id", fleet_id)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "runbook_id", runbook_id)
        pulumi.set(__self__, "runbook_version_name", runbook_version_name)
        pulumi.set(__self__, "sequence", sequence)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="fleetId")
    def fleet_id(self) -> builtins.str:
        """
        unique Fleet identifier
        """
        return pulumi.get(self, "fleet_id")

    @property
    @pulumi.getter
    def kind(self) -> builtins.str:
        """
        Task argument kind
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="runbookId")
    def runbook_id(self) -> builtins.str:
        """
        A filter to return only schedule definitions whose associated runbookId matches the given runbookId.
        """
        return pulumi.get(self, "runbook_id")

    @property
    @pulumi.getter(name="runbookVersionName")
    def runbook_version_name(self) -> builtins.str:
        """
        RunbookVersion Name filter
        """
        return pulumi.get(self, "runbook_version_name")

    @property
    @pulumi.getter
    def sequence(self) -> builtins.int:
        """
        Sequence of the Action Group. Action groups will be executed in a seuential order. All Action Groups having the same sequence will be executed parallely. If no value is provided a default value of 1 will be given.
        """
        return pulumi.get(self, "sequence")


@pulumi.output_type
class GetSchedulerDefinitionsSchedulerDefinitionCollectionItemRunBookResult(dict):
    def __init__(__self__, *,
                 input_parameters: Sequence['outputs.GetSchedulerDefinitionsSchedulerDefinitionCollectionItemRunBookInputParameterResult'],
                 runbook_id: builtins.str,
                 runbook_version_name: builtins.str):
        """
        :param Sequence['GetSchedulerDefinitionsSchedulerDefinitionCollectionItemRunBookInputParameterArgs'] input_parameters: Input Parameters for the Task
        :param builtins.str runbook_id: A filter to return only schedule definitions whose associated runbookId matches the given runbookId.
        :param builtins.str runbook_version_name: RunbookVersion Name filter
        """
        pulumi.set(__self__, "input_parameters", input_parameters)
        pulumi.set(__self__, "runbook_id", runbook_id)
        pulumi.set(__self__, "runbook_version_name", runbook_version_name)

    @property
    @pulumi.getter(name="inputParameters")
    def input_parameters(self) -> Sequence['outputs.GetSchedulerDefinitionsSchedulerDefinitionCollectionItemRunBookInputParameterResult']:
        """
        Input Parameters for the Task
        """
        return pulumi.get(self, "input_parameters")

    @property
    @pulumi.getter(name="runbookId")
    def runbook_id(self) -> builtins.str:
        """
        A filter to return only schedule definitions whose associated runbookId matches the given runbookId.
        """
        return pulumi.get(self, "runbook_id")

    @property
    @pulumi.getter(name="runbookVersionName")
    def runbook_version_name(self) -> builtins.str:
        """
        RunbookVersion Name filter
        """
        return pulumi.get(self, "runbook_version_name")


@pulumi.output_type
class GetSchedulerDefinitionsSchedulerDefinitionCollectionItemRunBookInputParameterResult(dict):
    def __init__(__self__, *,
                 arguments: Sequence['outputs.GetSchedulerDefinitionsSchedulerDefinitionCollectionItemRunBookInputParameterArgumentResult'],
                 step_name: builtins.str):
        """
        :param Sequence['GetSchedulerDefinitionsSchedulerDefinitionCollectionItemRunBookInputParameterArgumentArgs'] arguments: Arguments for the Task
        :param builtins.str step_name: stepName for which the input parameters are provided
        """
        pulumi.set(__self__, "arguments", arguments)
        pulumi.set(__self__, "step_name", step_name)

    @property
    @pulumi.getter
    def arguments(self) -> Sequence['outputs.GetSchedulerDefinitionsSchedulerDefinitionCollectionItemRunBookInputParameterArgumentResult']:
        """
        Arguments for the Task
        """
        return pulumi.get(self, "arguments")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> builtins.str:
        """
        stepName for which the input parameters are provided
        """
        return pulumi.get(self, "step_name")


@pulumi.output_type
class GetSchedulerDefinitionsSchedulerDefinitionCollectionItemRunBookInputParameterArgumentResult(dict):
    def __init__(__self__, *,
                 contents: Sequence['outputs.GetSchedulerDefinitionsSchedulerDefinitionCollectionItemRunBookInputParameterArgumentContentResult'],
                 kind: builtins.str,
                 name: builtins.str,
                 value: builtins.str):
        """
        :param Sequence['GetSchedulerDefinitionsSchedulerDefinitionCollectionItemRunBookInputParameterArgumentContentArgs'] contents: Content Source details.
        :param builtins.str kind: Task argument kind
        :param builtins.str name: Name of the input variable
        :param builtins.str value: The task input
        """
        pulumi.set(__self__, "contents", contents)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def contents(self) -> Sequence['outputs.GetSchedulerDefinitionsSchedulerDefinitionCollectionItemRunBookInputParameterArgumentContentResult']:
        """
        Content Source details.
        """
        return pulumi.get(self, "contents")

    @property
    @pulumi.getter
    def kind(self) -> builtins.str:
        """
        Task argument kind
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the input variable
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        The task input
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSchedulerDefinitionsSchedulerDefinitionCollectionItemRunBookInputParameterArgumentContentResult(dict):
    def __init__(__self__, *,
                 bucket: builtins.str,
                 checksum: builtins.str,
                 namespace: builtins.str,
                 object: builtins.str,
                 source_type: builtins.str):
        """
        :param builtins.str bucket: Bucket Name.
        :param builtins.str checksum: md5 checksum of the artifact.
        :param builtins.str namespace: Namespace.
        :param builtins.str object: Object Name.
        :param builtins.str source_type: Content Source type details.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "checksum", checksum)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter
    def bucket(self) -> builtins.str:
        """
        Bucket Name.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def checksum(self) -> builtins.str:
        """
        md5 checksum of the artifact.
        """
        return pulumi.get(self, "checksum")

    @property
    @pulumi.getter
    def namespace(self) -> builtins.str:
        """
        Namespace.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> builtins.str:
        """
        Object Name.
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> builtins.str:
        """
        Content Source type details.
        """
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetSchedulerDefinitionsSchedulerDefinitionCollectionItemScheduleResult(dict):
    def __init__(__self__, *,
                 duration: builtins.str,
                 execution_startdate: builtins.str,
                 maintenance_window_id: builtins.str,
                 recurrences: builtins.str,
                 type: builtins.str):
        """
        :param builtins.str duration: Duration of the schedule.
        :param builtins.str execution_startdate: Start Date for the schedule. An RFC3339 formatted datetime string
        :param builtins.str maintenance_window_id: A filter to return only schedule definitions whose associated maintenanceWindowId matches the given maintenanceWindowId.
        :param builtins.str recurrences: Recurrence rule specification if recurring
        :param builtins.str type: Schedule Type
        """
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "execution_startdate", execution_startdate)
        pulumi.set(__self__, "maintenance_window_id", maintenance_window_id)
        pulumi.set(__self__, "recurrences", recurrences)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def duration(self) -> builtins.str:
        """
        Duration of the schedule.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter(name="executionStartdate")
    def execution_startdate(self) -> builtins.str:
        """
        Start Date for the schedule. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "execution_startdate")

    @property
    @pulumi.getter(name="maintenanceWindowId")
    def maintenance_window_id(self) -> builtins.str:
        """
        A filter to return only schedule definitions whose associated maintenanceWindowId matches the given maintenanceWindowId.
        """
        return pulumi.get(self, "maintenance_window_id")

    @property
    @pulumi.getter
    def recurrences(self) -> builtins.str:
        """
        Recurrence rule specification if recurring
        """
        return pulumi.get(self, "recurrences")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Schedule Type
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetSchedulerExecutionsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSchedulerExecutionsSchedulerExecutionCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetSchedulerExecutionsSchedulerExecutionCollectionItemResult']):
        """
        :param Sequence['GetSchedulerExecutionsSchedulerExecutionCollectionItemArgs'] items: List of schedulerExecutions.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetSchedulerExecutionsSchedulerExecutionCollectionItemResult']:
        """
        List of schedulerExecutions.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSchedulerExecutionsSchedulerExecutionCollectionItemResult(dict):
    def __init__(__self__, *,
                 activity_id: builtins.str,
                 compartment_id: builtins.str,
                 defined_tags: Mapping[str, builtins.str],
                 display_name: builtins.str,
                 freeform_tags: Mapping[str, builtins.str],
                 id: builtins.str,
                 latest_runbook_version_name: builtins.str,
                 lifecycle_details: builtins.str,
                 resource_display_name: builtins.str,
                 resource_id: builtins.str,
                 runbook_display_name: builtins.str,
                 runbook_id: builtins.str,
                 runbook_version_name: builtins.str,
                 scheduler_definitions: Sequence['outputs.GetSchedulerExecutionsSchedulerExecutionCollectionItemSchedulerDefinitionResult'],
                 scheduler_job_id: builtins.str,
                 state: builtins.str,
                 system_tags: Mapping[str, builtins.str],
                 time_created: builtins.str,
                 time_ended: builtins.str,
                 time_scheduled: builtins.str,
                 time_started: builtins.str,
                 time_updated: builtins.str):
        """
        :param builtins.str activity_id: Action Group associated with the Schedule.
        :param builtins.str compartment_id: The ID of the compartment in which to list resources. Empty only if the resource OCID query param is not specified.
        :param Mapping[str, builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param builtins.str display_name: A filter to return only resources that match the entire display name given.
        :param Mapping[str, builtins.str] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param builtins.str id: The OCID of the resource.
        :param builtins.str latest_runbook_version_name: Latest Runbook version available.
        :param builtins.str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param builtins.str resource_display_name: Resource DsiplayName associated with the Schedule.
        :param builtins.str resource_id: ResourceId filter (Example FleetId)
        :param builtins.str runbook_display_name: DsiplayName of Runbook associated with the Schedule.
        :param builtins.str runbook_id: A filter to return only schedule definitions whose associated runbookId matches the given runbookId.
        :param builtins.str runbook_version_name: RunbookVersion Name filter
        :param Sequence['GetSchedulerExecutionsSchedulerExecutionCollectionItemSchedulerDefinitionArgs'] scheduler_definitions: SchedulerDefinition  associated with the job.
        :param builtins.str scheduler_job_id: SchedulerJob identifier filter
        :param builtins.str state: The current state of the Scheduler Execution.
        :param Mapping[str, builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param builtins.str time_created: The time this resource was created. An RFC3339 formatted datetime string.
        :param builtins.str time_ended: Actual end date and time for the Execution.
        :param builtins.str time_scheduled: The scheduled date and time for the Job.
        :param builtins.str time_started: Actual start date and time for the Execution.
        :param builtins.str time_updated: The time this resource was last updated. An RFC3339 formatted datetime string.
        """
        pulumi.set(__self__, "activity_id", activity_id)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "latest_runbook_version_name", latest_runbook_version_name)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "resource_display_name", resource_display_name)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "runbook_display_name", runbook_display_name)
        pulumi.set(__self__, "runbook_id", runbook_id)
        pulumi.set(__self__, "runbook_version_name", runbook_version_name)
        pulumi.set(__self__, "scheduler_definitions", scheduler_definitions)
        pulumi.set(__self__, "scheduler_job_id", scheduler_job_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_ended", time_ended)
        pulumi.set(__self__, "time_scheduled", time_scheduled)
        pulumi.set(__self__, "time_started", time_started)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="activityId")
    def activity_id(self) -> builtins.str:
        """
        Action Group associated with the Schedule.
        """
        return pulumi.get(self, "activity_id")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        The ID of the compartment in which to list resources. Empty only if the resource OCID query param is not specified.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The OCID of the resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="latestRunbookVersionName")
    def latest_runbook_version_name(self) -> builtins.str:
        """
        Latest Runbook version available.
        """
        return pulumi.get(self, "latest_runbook_version_name")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> builtins.str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="resourceDisplayName")
    def resource_display_name(self) -> builtins.str:
        """
        Resource DsiplayName associated with the Schedule.
        """
        return pulumi.get(self, "resource_display_name")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> builtins.str:
        """
        ResourceId filter (Example FleetId)
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="runbookDisplayName")
    def runbook_display_name(self) -> builtins.str:
        """
        DsiplayName of Runbook associated with the Schedule.
        """
        return pulumi.get(self, "runbook_display_name")

    @property
    @pulumi.getter(name="runbookId")
    def runbook_id(self) -> builtins.str:
        """
        A filter to return only schedule definitions whose associated runbookId matches the given runbookId.
        """
        return pulumi.get(self, "runbook_id")

    @property
    @pulumi.getter(name="runbookVersionName")
    def runbook_version_name(self) -> builtins.str:
        """
        RunbookVersion Name filter
        """
        return pulumi.get(self, "runbook_version_name")

    @property
    @pulumi.getter(name="schedulerDefinitions")
    def scheduler_definitions(self) -> Sequence['outputs.GetSchedulerExecutionsSchedulerExecutionCollectionItemSchedulerDefinitionResult']:
        """
        SchedulerDefinition  associated with the job.
        """
        return pulumi.get(self, "scheduler_definitions")

    @property
    @pulumi.getter(name="schedulerJobId")
    def scheduler_job_id(self) -> builtins.str:
        """
        SchedulerJob identifier filter
        """
        return pulumi.get(self, "scheduler_job_id")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        The current state of the Scheduler Execution.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The time this resource was created. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeEnded")
    def time_ended(self) -> builtins.str:
        """
        Actual end date and time for the Execution.
        """
        return pulumi.get(self, "time_ended")

    @property
    @pulumi.getter(name="timeScheduled")
    def time_scheduled(self) -> builtins.str:
        """
        The scheduled date and time for the Job.
        """
        return pulumi.get(self, "time_scheduled")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> builtins.str:
        """
        Actual start date and time for the Execution.
        """
        return pulumi.get(self, "time_started")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> builtins.str:
        """
        The time this resource was last updated. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetSchedulerExecutionsSchedulerExecutionCollectionItemSchedulerDefinitionResult(dict):
    def __init__(__self__, *,
                 display_name: builtins.str,
                 id: builtins.str,
                 is_recurring: builtins.bool):
        """
        :param builtins.str display_name: A filter to return only resources that match the entire display name given.
        :param builtins.str id: The OCID of the resource.
        :param builtins.bool is_recurring: Is this a recurring schedule?
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_recurring", is_recurring)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The OCID of the resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isRecurring")
    def is_recurring(self) -> builtins.bool:
        """
        Is this a recurring schedule?
        """
        return pulumi.get(self, "is_recurring")


@pulumi.output_type
class GetSchedulerJobCountsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSchedulerJobCountsSchedulerJobAggregationCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetSchedulerJobCountsSchedulerJobAggregationCollectionItemResult']):
        """
        :param Sequence['GetSchedulerJobCountsSchedulerJobAggregationCollectionItemArgs'] items: List of SchedulerJobAggregation objects.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetSchedulerJobCountsSchedulerJobAggregationCollectionItemResult']:
        """
        List of SchedulerJobAggregation objects.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSchedulerJobCountsSchedulerJobAggregationCollectionItemResult(dict):
    def __init__(__self__, *,
                 dimensions: Sequence['outputs.GetSchedulerJobCountsSchedulerJobAggregationCollectionItemDimensionResult'],
                 scheduler_job_count_count: builtins.int):
        """
        :param Sequence['GetSchedulerJobCountsSchedulerJobAggregationCollectionItemDimensionArgs'] dimensions: Aggregated summary information for a SchedulerJob.
        :param builtins.int scheduler_job_count_count: Count of jobs in a Compartment.
        """
        pulumi.set(__self__, "dimensions", dimensions)
        pulumi.set(__self__, "scheduler_job_count_count", scheduler_job_count_count)

    @property
    @pulumi.getter
    def dimensions(self) -> Sequence['outputs.GetSchedulerJobCountsSchedulerJobAggregationCollectionItemDimensionResult']:
        """
        Aggregated summary information for a SchedulerJob.
        """
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter(name="schedulerJobCountCount")
    def scheduler_job_count_count(self) -> builtins.int:
        """
        Count of jobs in a Compartment.
        """
        return pulumi.get(self, "scheduler_job_count_count")


@pulumi.output_type
class GetSchedulerJobCountsSchedulerJobAggregationCollectionItemDimensionResult(dict):
    def __init__(__self__, *,
                 lifecycle_details: builtins.str):
        """
        :param builtins.str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> builtins.str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")


@pulumi.output_type
class GetSchedulerJobJobActivityResourcesFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSchedulerJobJobActivityResourcesResourceCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetSchedulerJobJobActivityResourcesResourceCollectionItemResult']):
        """
        :param Sequence['GetSchedulerJobJobActivityResourcesResourceCollectionItemArgs'] items: List of Execution Resources.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetSchedulerJobJobActivityResourcesResourceCollectionItemResult']:
        """
        List of Execution Resources.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSchedulerJobJobActivityResourcesResourceCollectionItemResult(dict):
    def __init__(__self__, *,
                 description: builtins.str,
                 resource_display_name: builtins.str,
                 resource_id: builtins.str,
                 sequence: builtins.str,
                 status: builtins.str,
                 targets: Sequence['outputs.GetSchedulerJobJobActivityResourcesResourceCollectionItemTargetResult'],
                 time_ended: builtins.str,
                 time_started: builtins.str):
        """
        :param builtins.str description: Description of the Execution status. If there are any errors, this can also include a short error message.
        :param builtins.str resource_display_name: Resource Display Name.
        :param builtins.str resource_id: Resource Identifier associated with the Work Request.
        :param builtins.str sequence: Task Order Sequence
        :param builtins.str status: Status of the Job at target Level.
        :param Sequence['GetSchedulerJobJobActivityResourcesResourceCollectionItemTargetArgs'] targets: Targets associated with the resource.
        :param builtins.str time_ended: The time the task ended for the resource. An RFC3339 formatted datetime string
        :param builtins.str time_started: The time the task started for the resource. An RFC3339 formatted datetime string
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "resource_display_name", resource_display_name)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "sequence", sequence)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "targets", targets)
        pulumi.set(__self__, "time_ended", time_ended)
        pulumi.set(__self__, "time_started", time_started)

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        Description of the Execution status. If there are any errors, this can also include a short error message.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="resourceDisplayName")
    def resource_display_name(self) -> builtins.str:
        """
        Resource Display Name.
        """
        return pulumi.get(self, "resource_display_name")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> builtins.str:
        """
        Resource Identifier associated with the Work Request.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter
    def sequence(self) -> builtins.str:
        """
        Task Order Sequence
        """
        return pulumi.get(self, "sequence")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        Status of the Job at target Level.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def targets(self) -> Sequence['outputs.GetSchedulerJobJobActivityResourcesResourceCollectionItemTargetResult']:
        """
        Targets associated with the resource.
        """
        return pulumi.get(self, "targets")

    @property
    @pulumi.getter(name="timeEnded")
    def time_ended(self) -> builtins.str:
        """
        The time the task ended for the resource. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_ended")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> builtins.str:
        """
        The time the task started for the resource. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_started")


@pulumi.output_type
class GetSchedulerJobJobActivityResourcesResourceCollectionItemTargetResult(dict):
    def __init__(__self__, *,
                 description: builtins.str,
                 status: builtins.str,
                 target_name: builtins.str):
        """
        :param builtins.str description: Description of the Execution status. If there are any errors, this can also include a short error message.
        :param builtins.str status: Status of the Job at target Level.
        :param builtins.str target_name: Unique target name
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "target_name", target_name)

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        Description of the Execution status. If there are any errors, this can also include a short error message.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        Status of the Job at target Level.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="targetName")
    def target_name(self) -> builtins.str:
        """
        Unique target name
        """
        return pulumi.get(self, "target_name")


@pulumi.output_type
class GetSchedulerJobJobActivityStepsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSchedulerJobJobActivityStepsStepCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetSchedulerJobJobActivityStepsStepCollectionItemResult']):
        """
        :param Sequence['GetSchedulerJobJobActivityStepsStepCollectionItemArgs'] items: List of Execution steps.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetSchedulerJobJobActivityStepsStepCollectionItemResult']:
        """
        List of Execution steps.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSchedulerJobJobActivityStepsStepCollectionItemResult(dict):
    def __init__(__self__, *,
                 description: builtins.str,
                 is_rollback_task: builtins.bool,
                 sequence: builtins.str,
                 status: builtins.str,
                 step_name: builtins.str,
                 system_tags: Mapping[str, builtins.str],
                 task_record_id: builtins.str,
                 time_ended: builtins.str,
                 time_started: builtins.str):
        """
        :param builtins.str description: Description of the step Execution.
        :param builtins.bool is_rollback_task: Is this a rollback task?
        :param builtins.str sequence: Task Order Sequence
        :param builtins.str status: Status of the Task.
        :param builtins.str step_name: Unique step name
        :param Mapping[str, builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param builtins.str task_record_id: The OCID of taskRecord assocaited with the step.
        :param builtins.str time_ended: The time the task ended. An RFC3339 formatted datetime string
        :param builtins.str time_started: The time the task started. An RFC3339 formatted datetime string
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "is_rollback_task", is_rollback_task)
        pulumi.set(__self__, "sequence", sequence)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "step_name", step_name)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "task_record_id", task_record_id)
        pulumi.set(__self__, "time_ended", time_ended)
        pulumi.set(__self__, "time_started", time_started)

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        Description of the step Execution.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="isRollbackTask")
    def is_rollback_task(self) -> builtins.bool:
        """
        Is this a rollback task?
        """
        return pulumi.get(self, "is_rollback_task")

    @property
    @pulumi.getter
    def sequence(self) -> builtins.str:
        """
        Task Order Sequence
        """
        return pulumi.get(self, "sequence")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        Status of the Task.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> builtins.str:
        """
        Unique step name
        """
        return pulumi.get(self, "step_name")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="taskRecordId")
    def task_record_id(self) -> builtins.str:
        """
        The OCID of taskRecord assocaited with the step.
        """
        return pulumi.get(self, "task_record_id")

    @property
    @pulumi.getter(name="timeEnded")
    def time_ended(self) -> builtins.str:
        """
        The time the task ended. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_ended")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> builtins.str:
        """
        The time the task started. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_started")


@pulumi.output_type
class GetTaskRecordDetailResult(dict):
    def __init__(__self__, *,
                 execution_details: Sequence['outputs.GetTaskRecordDetailExecutionDetailResult'],
                 is_apply_subject_task: builtins.bool,
                 is_discovery_output_task: builtins.bool,
                 operation: builtins.str,
                 os_type: builtins.str,
                 platform: builtins.str,
                 properties: Sequence['outputs.GetTaskRecordDetailPropertyResult'],
                 scope: builtins.str):
        """
        :param Sequence['GetTaskRecordDetailExecutionDetailArgs'] execution_details: Execution details.
        :param builtins.bool is_apply_subject_task: Is this an Apply Subject Task?  Set this to true for a Patch Execution Task which applies patches(subjects) on a target.
        :param builtins.bool is_discovery_output_task: Is this a discovery output task?
        :param builtins.str operation: The lifecycle operation performed by the runbook.
        :param builtins.str os_type: The OS for the task
        :param builtins.str platform: The platform of the runbook.
        :param Sequence['GetTaskRecordDetailPropertyArgs'] properties: The properties of the task.
        :param builtins.str scope: The scope of the task
        """
        pulumi.set(__self__, "execution_details", execution_details)
        pulumi.set(__self__, "is_apply_subject_task", is_apply_subject_task)
        pulumi.set(__self__, "is_discovery_output_task", is_discovery_output_task)
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "os_type", os_type)
        pulumi.set(__self__, "platform", platform)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "scope", scope)

    @property
    @pulumi.getter(name="executionDetails")
    def execution_details(self) -> Sequence['outputs.GetTaskRecordDetailExecutionDetailResult']:
        """
        Execution details.
        """
        return pulumi.get(self, "execution_details")

    @property
    @pulumi.getter(name="isApplySubjectTask")
    def is_apply_subject_task(self) -> builtins.bool:
        """
        Is this an Apply Subject Task?  Set this to true for a Patch Execution Task which applies patches(subjects) on a target.
        """
        return pulumi.get(self, "is_apply_subject_task")

    @property
    @pulumi.getter(name="isDiscoveryOutputTask")
    def is_discovery_output_task(self) -> builtins.bool:
        """
        Is this a discovery output task?
        """
        return pulumi.get(self, "is_discovery_output_task")

    @property
    @pulumi.getter
    def operation(self) -> builtins.str:
        """
        The lifecycle operation performed by the runbook.
        """
        return pulumi.get(self, "operation")

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> builtins.str:
        """
        The OS for the task
        """
        return pulumi.get(self, "os_type")

    @property
    @pulumi.getter
    def platform(self) -> builtins.str:
        """
        The platform of the runbook.
        """
        return pulumi.get(self, "platform")

    @property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetTaskRecordDetailPropertyResult']:
        """
        The properties of the task.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def scope(self) -> builtins.str:
        """
        The scope of the task
        """
        return pulumi.get(self, "scope")


@pulumi.output_type
class GetTaskRecordDetailExecutionDetailResult(dict):
    def __init__(__self__, *,
                 catalog_id: builtins.str,
                 command: builtins.str,
                 config_file: builtins.str,
                 contents: Sequence['outputs.GetTaskRecordDetailExecutionDetailContentResult'],
                 credentials: Sequence['outputs.GetTaskRecordDetailExecutionDetailCredentialResult'],
                 endpoint: builtins.str,
                 execution_type: builtins.str,
                 is_executable_content: builtins.bool,
                 is_locked: builtins.bool,
                 is_read_output_variable_enabled: builtins.bool,
                 target_compartment_id: builtins.str,
                 variables: Sequence['outputs.GetTaskRecordDetailExecutionDetailVariableResult']):
        """
        :param builtins.str command: Optional command to execute the content. You can provide any commands/arguments that can't be part of the script.
        :param builtins.str config_file: Catalog Id having config file.
        :param Sequence['GetTaskRecordDetailExecutionDetailContentArgs'] contents: Content Source details.
        :param Sequence['GetTaskRecordDetailExecutionDetailCredentialArgs'] credentials: Credentials required for executing the task.
        :param builtins.str endpoint: Endpoint to be invoked.
        :param builtins.str execution_type: The action type of the task
        :param builtins.bool is_executable_content: Is the Content an executable file?
        :param builtins.bool is_locked: Is the script locked to prevent changes directly in Object Storage?
        :param builtins.bool is_read_output_variable_enabled: Is read output variable enabled
        :param builtins.str target_compartment_id: OCID of the compartment to which the resource belongs to.
        :param Sequence['GetTaskRecordDetailExecutionDetailVariableArgs'] variables: The variable of the task. At least one of the dynamicArguments or output needs to be provided.
        """
        pulumi.set(__self__, "catalog_id", catalog_id)
        pulumi.set(__self__, "command", command)
        pulumi.set(__self__, "config_file", config_file)
        pulumi.set(__self__, "contents", contents)
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "execution_type", execution_type)
        pulumi.set(__self__, "is_executable_content", is_executable_content)
        pulumi.set(__self__, "is_locked", is_locked)
        pulumi.set(__self__, "is_read_output_variable_enabled", is_read_output_variable_enabled)
        pulumi.set(__self__, "target_compartment_id", target_compartment_id)
        pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> builtins.str:
        return pulumi.get(self, "catalog_id")

    @property
    @pulumi.getter
    def command(self) -> builtins.str:
        """
        Optional command to execute the content. You can provide any commands/arguments that can't be part of the script.
        """
        return pulumi.get(self, "command")

    @property
    @pulumi.getter(name="configFile")
    def config_file(self) -> builtins.str:
        """
        Catalog Id having config file.
        """
        return pulumi.get(self, "config_file")

    @property
    @pulumi.getter
    def contents(self) -> Sequence['outputs.GetTaskRecordDetailExecutionDetailContentResult']:
        """
        Content Source details.
        """
        return pulumi.get(self, "contents")

    @property
    @pulumi.getter
    def credentials(self) -> Sequence['outputs.GetTaskRecordDetailExecutionDetailCredentialResult']:
        """
        Credentials required for executing the task.
        """
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter
    def endpoint(self) -> builtins.str:
        """
        Endpoint to be invoked.
        """
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="executionType")
    def execution_type(self) -> builtins.str:
        """
        The action type of the task
        """
        return pulumi.get(self, "execution_type")

    @property
    @pulumi.getter(name="isExecutableContent")
    def is_executable_content(self) -> builtins.bool:
        """
        Is the Content an executable file?
        """
        return pulumi.get(self, "is_executable_content")

    @property
    @pulumi.getter(name="isLocked")
    def is_locked(self) -> builtins.bool:
        """
        Is the script locked to prevent changes directly in Object Storage?
        """
        return pulumi.get(self, "is_locked")

    @property
    @pulumi.getter(name="isReadOutputVariableEnabled")
    def is_read_output_variable_enabled(self) -> builtins.bool:
        """
        Is read output variable enabled
        """
        return pulumi.get(self, "is_read_output_variable_enabled")

    @property
    @pulumi.getter(name="targetCompartmentId")
    def target_compartment_id(self) -> builtins.str:
        """
        OCID of the compartment to which the resource belongs to.
        """
        return pulumi.get(self, "target_compartment_id")

    @property
    @pulumi.getter
    def variables(self) -> Sequence['outputs.GetTaskRecordDetailExecutionDetailVariableResult']:
        """
        The variable of the task. At least one of the dynamicArguments or output needs to be provided.
        """
        return pulumi.get(self, "variables")


@pulumi.output_type
class GetTaskRecordDetailExecutionDetailContentResult(dict):
    def __init__(__self__, *,
                 bucket: builtins.str,
                 catalog_id: builtins.str,
                 checksum: builtins.str,
                 namespace: builtins.str,
                 object: builtins.str,
                 source_type: builtins.str):
        """
        :param builtins.str bucket: Bucket Name.
        :param builtins.str checksum: md5 checksum of the artifact.
        :param builtins.str namespace: Namespace.
        :param builtins.str object: Object Name.
        :param builtins.str source_type: Content Source type details.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "catalog_id", catalog_id)
        pulumi.set(__self__, "checksum", checksum)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter
    def bucket(self) -> builtins.str:
        """
        Bucket Name.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> builtins.str:
        return pulumi.get(self, "catalog_id")

    @property
    @pulumi.getter
    def checksum(self) -> builtins.str:
        """
        md5 checksum of the artifact.
        """
        return pulumi.get(self, "checksum")

    @property
    @pulumi.getter
    def namespace(self) -> builtins.str:
        """
        Namespace.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> builtins.str:
        """
        Object Name.
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> builtins.str:
        """
        Content Source type details.
        """
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetTaskRecordDetailExecutionDetailCredentialResult(dict):
    def __init__(__self__, *,
                 display_name: builtins.str,
                 id: builtins.str):
        """
        :param builtins.str display_name: A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        :param builtins.str id: The OCID of the resource.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The OCID of the resource.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetTaskRecordDetailExecutionDetailVariableResult(dict):
    def __init__(__self__, *,
                 input_variables: Sequence['outputs.GetTaskRecordDetailExecutionDetailVariableInputVariableResult'],
                 output_variables: Sequence[builtins.str]):
        """
        :param Sequence['GetTaskRecordDetailExecutionDetailVariableInputVariableArgs'] input_variables: The input variables for the task.
        :param Sequence[builtins.str] output_variables: The list of output variables.
        """
        pulumi.set(__self__, "input_variables", input_variables)
        pulumi.set(__self__, "output_variables", output_variables)

    @property
    @pulumi.getter(name="inputVariables")
    def input_variables(self) -> Sequence['outputs.GetTaskRecordDetailExecutionDetailVariableInputVariableResult']:
        """
        The input variables for the task.
        """
        return pulumi.get(self, "input_variables")

    @property
    @pulumi.getter(name="outputVariables")
    def output_variables(self) -> Sequence[builtins.str]:
        """
        The list of output variables.
        """
        return pulumi.get(self, "output_variables")


@pulumi.output_type
class GetTaskRecordDetailExecutionDetailVariableInputVariableResult(dict):
    def __init__(__self__, *,
                 description: builtins.str,
                 name: builtins.str,
                 type: builtins.str):
        """
        :param builtins.str description: The description of the argument.
        :param builtins.str name: The name of the argument.
        :param builtins.str type: Task type.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        The description of the argument.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the argument.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Task type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetTaskRecordDetailPropertyResult(dict):
    def __init__(__self__, *,
                 num_retries: builtins.int,
                 timeout_in_seconds: builtins.int):
        """
        :param builtins.int num_retries: The number of retries allowed.
        :param builtins.int timeout_in_seconds: The timeout in seconds for the task.
        """
        pulumi.set(__self__, "num_retries", num_retries)
        pulumi.set(__self__, "timeout_in_seconds", timeout_in_seconds)

    @property
    @pulumi.getter(name="numRetries")
    def num_retries(self) -> builtins.int:
        """
        The number of retries allowed.
        """
        return pulumi.get(self, "num_retries")

    @property
    @pulumi.getter(name="timeoutInSeconds")
    def timeout_in_seconds(self) -> builtins.int:
        """
        The timeout in seconds for the task.
        """
        return pulumi.get(self, "timeout_in_seconds")


@pulumi.output_type
class GetTaskRecordsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        """
        :param builtins.str name: The name of the argument.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the argument.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetTaskRecordsTaskRecordCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetTaskRecordsTaskRecordCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetTaskRecordsTaskRecordCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetTaskRecordsTaskRecordCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: builtins.str,
                 defined_tags: Mapping[str, builtins.str],
                 description: builtins.str,
                 details: Sequence['outputs.GetTaskRecordsTaskRecordCollectionItemDetailResult'],
                 display_name: builtins.str,
                 freeform_tags: Mapping[str, builtins.str],
                 id: builtins.str,
                 lifecycle_details: builtins.str,
                 resource_region: builtins.str,
                 state: builtins.str,
                 system_tags: Mapping[str, builtins.str],
                 time_created: builtins.str,
                 time_updated: builtins.str,
                 type: builtins.str,
                 version: builtins.str):
        """
        :param builtins.str compartment_id: The ID of the compartment in which to list resources. Empty only if the resource OCID query param is not specified.
        :param Mapping[str, builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param builtins.str description: The description of the argument.
        :param Sequence['GetTaskRecordsTaskRecordCollectionItemDetailArgs'] details: The details of the task.
        :param builtins.str display_name: A filter to return only resources that match the entire display name given.
        :param Mapping[str, builtins.str] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param builtins.str id: Unique identifier or OCID for listing a single task record by id. Either compartmentId or id must be provided.
        :param builtins.str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param builtins.str resource_region: Associated region
        :param builtins.str state: The current state of the task record.
        :param Mapping[str, builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param builtins.str time_created: The time this resource was created. An RFC3339 formatted datetime string.
        :param builtins.str time_updated: The time this resource was last updated. An RFC3339 formatted datetime string.
        :param builtins.str type: The type of the Task.
        :param builtins.str version: The version of the task record.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "resource_region", resource_region)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        The ID of the compartment in which to list resources. Empty only if the resource OCID query param is not specified.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        The description of the argument.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def details(self) -> Sequence['outputs.GetTaskRecordsTaskRecordCollectionItemDetailResult']:
        """
        The details of the task.
        """
        return pulumi.get(self, "details")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Unique identifier or OCID for listing a single task record by id. Either compartmentId or id must be provided.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> builtins.str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="resourceRegion")
    def resource_region(self) -> builtins.str:
        """
        Associated region
        """
        return pulumi.get(self, "resource_region")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        The current state of the task record.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The time this resource was created. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> builtins.str:
        """
        The time this resource was last updated. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of the Task.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def version(self) -> builtins.str:
        """
        The version of the task record.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetTaskRecordsTaskRecordCollectionItemDetailResult(dict):
    def __init__(__self__, *,
                 execution_details: Sequence['outputs.GetTaskRecordsTaskRecordCollectionItemDetailExecutionDetailResult'],
                 is_apply_subject_task: builtins.bool,
                 is_discovery_output_task: builtins.bool,
                 operation: builtins.str,
                 os_type: builtins.str,
                 platform: builtins.str,
                 properties: Sequence['outputs.GetTaskRecordsTaskRecordCollectionItemDetailPropertyResult'],
                 scope: builtins.str):
        """
        :param Sequence['GetTaskRecordsTaskRecordCollectionItemDetailExecutionDetailArgs'] execution_details: Execution details.
        :param builtins.bool is_apply_subject_task: Is this an Apply Subject Task?  Set this to true for a Patch Execution Task which applies patches(subjects) on a target.
        :param builtins.bool is_discovery_output_task: Is this a discovery output task?
        :param builtins.str operation: A filter to return task records whose operation matches the given lifecycle operation.
        :param builtins.str os_type: The OS for the task
        :param builtins.str platform: The platform for the task record.
        :param Sequence['GetTaskRecordsTaskRecordCollectionItemDetailPropertyArgs'] properties: The properties of the task.
        :param builtins.str scope: The scope of the task
        """
        pulumi.set(__self__, "execution_details", execution_details)
        pulumi.set(__self__, "is_apply_subject_task", is_apply_subject_task)
        pulumi.set(__self__, "is_discovery_output_task", is_discovery_output_task)
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "os_type", os_type)
        pulumi.set(__self__, "platform", platform)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "scope", scope)

    @property
    @pulumi.getter(name="executionDetails")
    def execution_details(self) -> Sequence['outputs.GetTaskRecordsTaskRecordCollectionItemDetailExecutionDetailResult']:
        """
        Execution details.
        """
        return pulumi.get(self, "execution_details")

    @property
    @pulumi.getter(name="isApplySubjectTask")
    def is_apply_subject_task(self) -> builtins.bool:
        """
        Is this an Apply Subject Task?  Set this to true for a Patch Execution Task which applies patches(subjects) on a target.
        """
        return pulumi.get(self, "is_apply_subject_task")

    @property
    @pulumi.getter(name="isDiscoveryOutputTask")
    def is_discovery_output_task(self) -> builtins.bool:
        """
        Is this a discovery output task?
        """
        return pulumi.get(self, "is_discovery_output_task")

    @property
    @pulumi.getter
    def operation(self) -> builtins.str:
        """
        A filter to return task records whose operation matches the given lifecycle operation.
        """
        return pulumi.get(self, "operation")

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> builtins.str:
        """
        The OS for the task
        """
        return pulumi.get(self, "os_type")

    @property
    @pulumi.getter
    def platform(self) -> builtins.str:
        """
        The platform for the task record.
        """
        return pulumi.get(self, "platform")

    @property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetTaskRecordsTaskRecordCollectionItemDetailPropertyResult']:
        """
        The properties of the task.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def scope(self) -> builtins.str:
        """
        The scope of the task
        """
        return pulumi.get(self, "scope")


@pulumi.output_type
class GetTaskRecordsTaskRecordCollectionItemDetailExecutionDetailResult(dict):
    def __init__(__self__, *,
                 catalog_id: builtins.str,
                 command: builtins.str,
                 config_file: builtins.str,
                 contents: Sequence['outputs.GetTaskRecordsTaskRecordCollectionItemDetailExecutionDetailContentResult'],
                 credentials: Sequence['outputs.GetTaskRecordsTaskRecordCollectionItemDetailExecutionDetailCredentialResult'],
                 endpoint: builtins.str,
                 execution_type: builtins.str,
                 is_executable_content: builtins.bool,
                 is_locked: builtins.bool,
                 is_read_output_variable_enabled: builtins.bool,
                 target_compartment_id: builtins.str,
                 variables: Sequence['outputs.GetTaskRecordsTaskRecordCollectionItemDetailExecutionDetailVariableResult']):
        """
        :param builtins.str command: Optional command to execute the content. You can provide any commands/arguments that can't be part of the script.
        :param builtins.str config_file: Catalog Id having config file.
        :param Sequence['GetTaskRecordsTaskRecordCollectionItemDetailExecutionDetailContentArgs'] contents: Content Source details.
        :param Sequence['GetTaskRecordsTaskRecordCollectionItemDetailExecutionDetailCredentialArgs'] credentials: Credentials required for executing the task.
        :param builtins.str endpoint: Endpoint to be invoked.
        :param builtins.str execution_type: The action type of the task
        :param builtins.bool is_executable_content: Is the Content an executable file?
        :param builtins.bool is_locked: Is the script locked to prevent changes directly in Object Storage?
        :param builtins.bool is_read_output_variable_enabled: Is read output variable enabled
        :param builtins.str target_compartment_id: OCID of the compartment to which the resource belongs to.
        :param Sequence['GetTaskRecordsTaskRecordCollectionItemDetailExecutionDetailVariableArgs'] variables: The variable of the task. At least one of the dynamicArguments or output needs to be provided.
        """
        pulumi.set(__self__, "catalog_id", catalog_id)
        pulumi.set(__self__, "command", command)
        pulumi.set(__self__, "config_file", config_file)
        pulumi.set(__self__, "contents", contents)
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "execution_type", execution_type)
        pulumi.set(__self__, "is_executable_content", is_executable_content)
        pulumi.set(__self__, "is_locked", is_locked)
        pulumi.set(__self__, "is_read_output_variable_enabled", is_read_output_variable_enabled)
        pulumi.set(__self__, "target_compartment_id", target_compartment_id)
        pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> builtins.str:
        return pulumi.get(self, "catalog_id")

    @property
    @pulumi.getter
    def command(self) -> builtins.str:
        """
        Optional command to execute the content. You can provide any commands/arguments that can't be part of the script.
        """
        return pulumi.get(self, "command")

    @property
    @pulumi.getter(name="configFile")
    def config_file(self) -> builtins.str:
        """
        Catalog Id having config file.
        """
        return pulumi.get(self, "config_file")

    @property
    @pulumi.getter
    def contents(self) -> Sequence['outputs.GetTaskRecordsTaskRecordCollectionItemDetailExecutionDetailContentResult']:
        """
        Content Source details.
        """
        return pulumi.get(self, "contents")

    @property
    @pulumi.getter
    def credentials(self) -> Sequence['outputs.GetTaskRecordsTaskRecordCollectionItemDetailExecutionDetailCredentialResult']:
        """
        Credentials required for executing the task.
        """
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter
    def endpoint(self) -> builtins.str:
        """
        Endpoint to be invoked.
        """
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="executionType")
    def execution_type(self) -> builtins.str:
        """
        The action type of the task
        """
        return pulumi.get(self, "execution_type")

    @property
    @pulumi.getter(name="isExecutableContent")
    def is_executable_content(self) -> builtins.bool:
        """
        Is the Content an executable file?
        """
        return pulumi.get(self, "is_executable_content")

    @property
    @pulumi.getter(name="isLocked")
    def is_locked(self) -> builtins.bool:
        """
        Is the script locked to prevent changes directly in Object Storage?
        """
        return pulumi.get(self, "is_locked")

    @property
    @pulumi.getter(name="isReadOutputVariableEnabled")
    def is_read_output_variable_enabled(self) -> builtins.bool:
        """
        Is read output variable enabled
        """
        return pulumi.get(self, "is_read_output_variable_enabled")

    @property
    @pulumi.getter(name="targetCompartmentId")
    def target_compartment_id(self) -> builtins.str:
        """
        OCID of the compartment to which the resource belongs to.
        """
        return pulumi.get(self, "target_compartment_id")

    @property
    @pulumi.getter
    def variables(self) -> Sequence['outputs.GetTaskRecordsTaskRecordCollectionItemDetailExecutionDetailVariableResult']:
        """
        The variable of the task. At least one of the dynamicArguments or output needs to be provided.
        """
        return pulumi.get(self, "variables")


@pulumi.output_type
class GetTaskRecordsTaskRecordCollectionItemDetailExecutionDetailContentResult(dict):
    def __init__(__self__, *,
                 bucket: builtins.str,
                 catalog_id: builtins.str,
                 checksum: builtins.str,
                 namespace: builtins.str,
                 object: builtins.str,
                 source_type: builtins.str):
        """
        :param builtins.str bucket: Bucket Name.
        :param builtins.str checksum: md5 checksum of the artifact.
        :param builtins.str namespace: Namespace.
        :param builtins.str object: Object Name.
        :param builtins.str source_type: Content Source type details.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "catalog_id", catalog_id)
        pulumi.set(__self__, "checksum", checksum)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter
    def bucket(self) -> builtins.str:
        """
        Bucket Name.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> builtins.str:
        return pulumi.get(self, "catalog_id")

    @property
    @pulumi.getter
    def checksum(self) -> builtins.str:
        """
        md5 checksum of the artifact.
        """
        return pulumi.get(self, "checksum")

    @property
    @pulumi.getter
    def namespace(self) -> builtins.str:
        """
        Namespace.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> builtins.str:
        """
        Object Name.
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> builtins.str:
        """
        Content Source type details.
        """
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetTaskRecordsTaskRecordCollectionItemDetailExecutionDetailCredentialResult(dict):
    def __init__(__self__, *,
                 display_name: builtins.str,
                 id: builtins.str):
        """
        :param builtins.str display_name: A filter to return only resources that match the entire display name given.
        :param builtins.str id: Unique identifier or OCID for listing a single task record by id. Either compartmentId or id must be provided.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Unique identifier or OCID for listing a single task record by id. Either compartmentId or id must be provided.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetTaskRecordsTaskRecordCollectionItemDetailExecutionDetailVariableResult(dict):
    def __init__(__self__, *,
                 input_variables: Sequence['outputs.GetTaskRecordsTaskRecordCollectionItemDetailExecutionDetailVariableInputVariableResult'],
                 output_variables: Sequence[builtins.str]):
        """
        :param Sequence['GetTaskRecordsTaskRecordCollectionItemDetailExecutionDetailVariableInputVariableArgs'] input_variables: The input variables for the task.
        :param Sequence[builtins.str] output_variables: The list of output variables.
        """
        pulumi.set(__self__, "input_variables", input_variables)
        pulumi.set(__self__, "output_variables", output_variables)

    @property
    @pulumi.getter(name="inputVariables")
    def input_variables(self) -> Sequence['outputs.GetTaskRecordsTaskRecordCollectionItemDetailExecutionDetailVariableInputVariableResult']:
        """
        The input variables for the task.
        """
        return pulumi.get(self, "input_variables")

    @property
    @pulumi.getter(name="outputVariables")
    def output_variables(self) -> Sequence[builtins.str]:
        """
        The list of output variables.
        """
        return pulumi.get(self, "output_variables")


@pulumi.output_type
class GetTaskRecordsTaskRecordCollectionItemDetailExecutionDetailVariableInputVariableResult(dict):
    def __init__(__self__, *,
                 description: builtins.str,
                 name: builtins.str,
                 type: builtins.str):
        """
        :param builtins.str description: The description of the argument.
        :param builtins.str name: The name of the argument.
        :param builtins.str type: The type of the Task.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        The description of the argument.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the argument.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of the Task.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetTaskRecordsTaskRecordCollectionItemDetailPropertyResult(dict):
    def __init__(__self__, *,
                 num_retries: builtins.int,
                 timeout_in_seconds: builtins.int):
        """
        :param builtins.int num_retries: The number of retries allowed.
        :param builtins.int timeout_in_seconds: The timeout in seconds for the task.
        """
        pulumi.set(__self__, "num_retries", num_retries)
        pulumi.set(__self__, "timeout_in_seconds", timeout_in_seconds)

    @property
    @pulumi.getter(name="numRetries")
    def num_retries(self) -> builtins.int:
        """
        The number of retries allowed.
        """
        return pulumi.get(self, "num_retries")

    @property
    @pulumi.getter(name="timeoutInSeconds")
    def timeout_in_seconds(self) -> builtins.int:
        """
        The timeout in seconds for the task.
        """
        return pulumi.get(self, "timeout_in_seconds")


