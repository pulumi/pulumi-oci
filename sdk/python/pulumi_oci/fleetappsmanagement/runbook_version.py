# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['RunbookVersionArgs', 'RunbookVersion']

@pulumi.input_type
class RunbookVersionArgs:
    def __init__(__self__, *,
                 execution_workflow_details: pulumi.Input['RunbookVersionExecutionWorkflowDetailsArgs'],
                 groups: pulumi.Input[Sequence[pulumi.Input['RunbookVersionGroupArgs']]],
                 runbook_id: pulumi.Input[builtins.str],
                 tasks: pulumi.Input[Sequence[pulumi.Input['RunbookVersionTaskArgs']]],
                 defined_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 rollback_workflow_details: Optional[pulumi.Input['RunbookVersionRollbackWorkflowDetailsArgs']] = None):
        """
        The set of arguments for constructing a RunbookVersion resource.
        :param pulumi.Input['RunbookVersionExecutionWorkflowDetailsArgs'] execution_workflow_details: (Updatable) Execution Workflow details.
        :param pulumi.Input[Sequence[pulumi.Input['RunbookVersionGroupArgs']]] groups: (Updatable) The groups of the runbook.
        :param pulumi.Input[builtins.str] runbook_id: The OCID of the resource.
        :param pulumi.Input[Sequence[pulumi.Input['RunbookVersionTaskArgs']]] tasks: (Updatable) A set of tasks to execute in the runbook.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example:
               `{"foo-namespace.bar-key": "value"}`
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists
               for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param pulumi.Input['RunbookVersionRollbackWorkflowDetailsArgs'] rollback_workflow_details: (Updatable) Rollback Workflow details.
        """
        pulumi.set(__self__, "execution_workflow_details", execution_workflow_details)
        pulumi.set(__self__, "groups", groups)
        pulumi.set(__self__, "runbook_id", runbook_id)
        pulumi.set(__self__, "tasks", tasks)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if rollback_workflow_details is not None:
            pulumi.set(__self__, "rollback_workflow_details", rollback_workflow_details)

    @property
    @pulumi.getter(name="executionWorkflowDetails")
    def execution_workflow_details(self) -> pulumi.Input['RunbookVersionExecutionWorkflowDetailsArgs']:
        """
        (Updatable) Execution Workflow details.
        """
        return pulumi.get(self, "execution_workflow_details")

    @execution_workflow_details.setter
    def execution_workflow_details(self, value: pulumi.Input['RunbookVersionExecutionWorkflowDetailsArgs']):
        pulumi.set(self, "execution_workflow_details", value)

    @property
    @pulumi.getter
    def groups(self) -> pulumi.Input[Sequence[pulumi.Input['RunbookVersionGroupArgs']]]:
        """
        (Updatable) The groups of the runbook.
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: pulumi.Input[Sequence[pulumi.Input['RunbookVersionGroupArgs']]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter(name="runbookId")
    def runbook_id(self) -> pulumi.Input[builtins.str]:
        """
        The OCID of the resource.
        """
        return pulumi.get(self, "runbook_id")

    @runbook_id.setter
    def runbook_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "runbook_id", value)

    @property
    @pulumi.getter
    def tasks(self) -> pulumi.Input[Sequence[pulumi.Input['RunbookVersionTaskArgs']]]:
        """
        (Updatable) A set of tasks to execute in the runbook.
        """
        return pulumi.get(self, "tasks")

    @tasks.setter
    def tasks(self, value: pulumi.Input[Sequence[pulumi.Input['RunbookVersionTaskArgs']]]):
        pulumi.set(self, "tasks", value)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example:
        `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @defined_tags.setter
    def defined_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "defined_tags", value)

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists
        for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @freeform_tags.setter
    def freeform_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "freeform_tags", value)

    @property
    @pulumi.getter(name="rollbackWorkflowDetails")
    def rollback_workflow_details(self) -> Optional[pulumi.Input['RunbookVersionRollbackWorkflowDetailsArgs']]:
        """
        (Updatable) Rollback Workflow details.
        """
        return pulumi.get(self, "rollback_workflow_details")

    @rollback_workflow_details.setter
    def rollback_workflow_details(self, value: Optional[pulumi.Input['RunbookVersionRollbackWorkflowDetailsArgs']]):
        pulumi.set(self, "rollback_workflow_details", value)


@pulumi.input_type
class _RunbookVersionState:
    def __init__(__self__, *,
                 compartment_id: Optional[pulumi.Input[builtins.str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 execution_workflow_details: Optional[pulumi.Input['RunbookVersionExecutionWorkflowDetailsArgs']] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookVersionGroupArgs']]]] = None,
                 is_latest: Optional[pulumi.Input[builtins.bool]] = None,
                 lifecycle_details: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 rollback_workflow_details: Optional[pulumi.Input['RunbookVersionRollbackWorkflowDetailsArgs']] = None,
                 runbook_id: Optional[pulumi.Input[builtins.str]] = None,
                 state: Optional[pulumi.Input[builtins.str]] = None,
                 system_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 tasks: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookVersionTaskArgs']]]] = None,
                 time_created: Optional[pulumi.Input[builtins.str]] = None,
                 time_updated: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering RunbookVersion resources.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example:
               `{"foo-namespace.bar-key": "value"}`
        :param pulumi.Input['RunbookVersionExecutionWorkflowDetailsArgs'] execution_workflow_details: (Updatable) Execution Workflow details.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists
               for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param pulumi.Input[Sequence[pulumi.Input['RunbookVersionGroupArgs']]] groups: (Updatable) The groups of the runbook.
        :param pulumi.Input[builtins.str] lifecycle_details: A message describing the current state in more detail. For example, can be used to provide
               actionable information for a resource in Failed state.
        :param pulumi.Input[builtins.str] name: The name of the task
        :param pulumi.Input['RunbookVersionRollbackWorkflowDetailsArgs'] rollback_workflow_details: (Updatable) Rollback Workflow details.
        :param pulumi.Input[builtins.str] runbook_id: The OCID of the resource.
        :param pulumi.Input[builtins.str] state: The current state of the FleetResource.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example:
               `{"orcl-cloud.free-tier-retained": "true"}`
        :param pulumi.Input[Sequence[pulumi.Input['RunbookVersionTaskArgs']]] tasks: (Updatable) A set of tasks to execute in the runbook.
        :param pulumi.Input[builtins.str] time_created: The time this resource was created. An RFC3339 formatted datetime string.
        :param pulumi.Input[builtins.str] time_updated: The time this resource was last updated. An RFC3339 formatted datetime string.
        """
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if execution_workflow_details is not None:
            pulumi.set(__self__, "execution_workflow_details", execution_workflow_details)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if is_latest is not None:
            pulumi.set(__self__, "is_latest", is_latest)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if rollback_workflow_details is not None:
            pulumi.set(__self__, "rollback_workflow_details", rollback_workflow_details)
        if runbook_id is not None:
            pulumi.set(__self__, "runbook_id", runbook_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if tasks is not None:
            pulumi.set(__self__, "tasks", tasks)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example:
        `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @defined_tags.setter
    def defined_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "defined_tags", value)

    @property
    @pulumi.getter(name="executionWorkflowDetails")
    def execution_workflow_details(self) -> Optional[pulumi.Input['RunbookVersionExecutionWorkflowDetailsArgs']]:
        """
        (Updatable) Execution Workflow details.
        """
        return pulumi.get(self, "execution_workflow_details")

    @execution_workflow_details.setter
    def execution_workflow_details(self, value: Optional[pulumi.Input['RunbookVersionExecutionWorkflowDetailsArgs']]):
        pulumi.set(self, "execution_workflow_details", value)

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists
        for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @freeform_tags.setter
    def freeform_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "freeform_tags", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RunbookVersionGroupArgs']]]]:
        """
        (Updatable) The groups of the runbook.
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookVersionGroupArgs']]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter(name="isLatest")
    def is_latest(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "is_latest")

    @is_latest.setter
    def is_latest(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_latest", value)

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        A message describing the current state in more detail. For example, can be used to provide
        actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @lifecycle_details.setter
    def lifecycle_details(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "lifecycle_details", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the task
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="rollbackWorkflowDetails")
    def rollback_workflow_details(self) -> Optional[pulumi.Input['RunbookVersionRollbackWorkflowDetailsArgs']]:
        """
        (Updatable) Rollback Workflow details.
        """
        return pulumi.get(self, "rollback_workflow_details")

    @rollback_workflow_details.setter
    def rollback_workflow_details(self, value: Optional[pulumi.Input['RunbookVersionRollbackWorkflowDetailsArgs']]):
        pulumi.set(self, "rollback_workflow_details", value)

    @property
    @pulumi.getter(name="runbookId")
    def runbook_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The OCID of the resource.
        """
        return pulumi.get(self, "runbook_id")

    @runbook_id.setter
    def runbook_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "runbook_id", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The current state of the FleetResource.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example:
        `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @system_tags.setter
    def system_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "system_tags", value)

    @property
    @pulumi.getter
    def tasks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RunbookVersionTaskArgs']]]]:
        """
        (Updatable) A set of tasks to execute in the runbook.
        """
        return pulumi.get(self, "tasks")

    @tasks.setter
    def tasks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookVersionTaskArgs']]]]):
        pulumi.set(self, "tasks", value)

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The time this resource was created. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_created")

    @time_created.setter
    def time_created(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "time_created", value)

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The time this resource was last updated. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_updated")

    @time_updated.setter
    def time_updated(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "time_updated", value)


@pulumi.type_token("oci:FleetAppsManagement/runbookVersion:RunbookVersion")
class RunbookVersion(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 execution_workflow_details: Optional[pulumi.Input[Union['RunbookVersionExecutionWorkflowDetailsArgs', 'RunbookVersionExecutionWorkflowDetailsArgsDict']]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RunbookVersionGroupArgs', 'RunbookVersionGroupArgsDict']]]]] = None,
                 rollback_workflow_details: Optional[pulumi.Input[Union['RunbookVersionRollbackWorkflowDetailsArgs', 'RunbookVersionRollbackWorkflowDetailsArgsDict']]] = None,
                 runbook_id: Optional[pulumi.Input[builtins.str]] = None,
                 tasks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RunbookVersionTaskArgs', 'RunbookVersionTaskArgsDict']]]]] = None,
                 __props__=None):
        """
        This resource provides the Runbook Version resource in Oracle Cloud Infrastructure Fleet Apps Management service.

        Add RunbookVersion in Fleet Application Management.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_oci as oci

        test_runbook_version = oci.fleet_apps_management.RunbookVersion("test_runbook_version",
            execution_workflow_details={
                "workflows": [{
                    "group_name": test_group["name"],
                    "steps": [{
                        "type": runbook_version_execution_workflow_details_workflow_steps_type,
                        "group_name": test_group["name"],
                        "step_name": runbook_version_execution_workflow_details_workflow_steps_step_name,
                        "steps": runbook_version_execution_workflow_details_workflow_steps_steps,
                    }],
                    "type": runbook_version_execution_workflow_details_workflow_type,
                }],
            },
            groups=[{
                "name": runbook_version_groups_name,
                "type": runbook_version_groups_type,
                "properties": {
                    "action_on_failure": runbook_version_groups_properties_action_on_failure,
                    "notification_preferences": {
                        "should_notify_on_pause": runbook_version_groups_properties_notification_preferences_should_notify_on_pause,
                        "should_notify_on_task_failure": runbook_version_groups_properties_notification_preferences_should_notify_on_task_failure,
                        "should_notify_on_task_success": runbook_version_groups_properties_notification_preferences_should_notify_on_task_success,
                    },
                    "pause_details": {
                        "kind": runbook_version_groups_properties_pause_details_kind,
                        "duration_in_minutes": runbook_version_groups_properties_pause_details_duration_in_minutes,
                    },
                    "pre_condition": runbook_version_groups_properties_pre_condition,
                    "run_on": {
                        "kind": runbook_version_groups_properties_run_on_kind,
                        "condition": runbook_version_groups_properties_run_on_condition,
                        "host": runbook_version_groups_properties_run_on_host,
                        "previous_task_instance_details": [{
                            "output_variable_details": {
                                "output_variable_name": runbook_version_groups_properties_run_on_previous_task_instance_details_output_variable_details_output_variable_name,
                                "step_name": runbook_version_groups_properties_run_on_previous_task_instance_details_output_variable_details_step_name,
                            },
                            "resource_id": test_resource["id"],
                            "resource_type": runbook_version_groups_properties_run_on_previous_task_instance_details_resource_type,
                        }],
                    },
                },
            }],
            runbook_id=test_runbook["id"],
            tasks=[{
                "step_name": runbook_version_tasks_step_name,
                "task_record_details": {
                    "scope": runbook_version_tasks_task_record_details_scope,
                    "description": runbook_version_tasks_task_record_details_description,
                    "execution_details": {
                        "execution_type": runbook_version_tasks_task_record_details_execution_details_execution_type,
                        "catalog_id": test_catalog["id"],
                        "command": runbook_version_tasks_task_record_details_execution_details_command,
                        "config_file": runbook_version_tasks_task_record_details_execution_details_config_file,
                        "content": {
                            "source_type": runbook_version_tasks_task_record_details_execution_details_content_source_type,
                            "bucket": runbook_version_tasks_task_record_details_execution_details_content_bucket,
                            "catalog_id": test_catalog["id"],
                            "checksum": runbook_version_tasks_task_record_details_execution_details_content_checksum,
                            "namespace": runbook_version_tasks_task_record_details_execution_details_content_namespace,
                            "object": runbook_version_tasks_task_record_details_execution_details_content_object,
                        },
                        "credentials": [{
                            "display_name": runbook_version_tasks_task_record_details_execution_details_credentials_display_name,
                            "id": runbook_version_tasks_task_record_details_execution_details_credentials_id,
                        }],
                        "endpoint": runbook_version_tasks_task_record_details_execution_details_endpoint,
                        "is_executable_content": runbook_version_tasks_task_record_details_execution_details_is_executable_content,
                        "is_locked": runbook_version_tasks_task_record_details_execution_details_is_locked,
                        "is_read_output_variable_enabled": runbook_version_tasks_task_record_details_execution_details_is_read_output_variable_enabled,
                        "target_compartment_id": test_compartment["id"],
                        "variables": {
                            "input_variables": [{
                                "description": runbook_version_tasks_task_record_details_execution_details_variables_input_variables_description,
                                "name": runbook_version_tasks_task_record_details_execution_details_variables_input_variables_name,
                                "type": runbook_version_tasks_task_record_details_execution_details_variables_input_variables_type,
                            }],
                            "output_variables": runbook_version_tasks_task_record_details_execution_details_variables_output_variables,
                        },
                    },
                    "is_apply_subject_task": runbook_version_tasks_task_record_details_is_apply_subject_task,
                    "is_copy_to_library_enabled": runbook_version_tasks_task_record_details_is_copy_to_library_enabled,
                    "is_discovery_output_task": runbook_version_tasks_task_record_details_is_discovery_output_task,
                    "name": runbook_version_tasks_task_record_details_name,
                    "os_type": runbook_version_tasks_task_record_details_os_type,
                    "platform": runbook_version_tasks_task_record_details_platform,
                    "properties": {
                        "num_retries": runbook_version_tasks_task_record_details_properties_num_retries,
                        "timeout_in_seconds": runbook_version_tasks_task_record_details_properties_timeout_in_seconds,
                    },
                    "task_record_id": test_task_record["id"],
                },
                "output_variable_mappings": [{
                    "name": runbook_version_tasks_output_variable_mappings_name,
                    "output_variable_details": {
                        "output_variable_name": runbook_version_tasks_output_variable_mappings_output_variable_details_output_variable_name,
                        "step_name": runbook_version_tasks_output_variable_mappings_output_variable_details_step_name,
                    },
                }],
                "step_properties": {
                    "action_on_failure": runbook_version_tasks_step_properties_action_on_failure,
                    "notification_preferences": {
                        "should_notify_on_pause": runbook_version_tasks_step_properties_notification_preferences_should_notify_on_pause,
                        "should_notify_on_task_failure": runbook_version_tasks_step_properties_notification_preferences_should_notify_on_task_failure,
                        "should_notify_on_task_success": runbook_version_tasks_step_properties_notification_preferences_should_notify_on_task_success,
                    },
                    "pause_details": {
                        "kind": runbook_version_tasks_step_properties_pause_details_kind,
                        "duration_in_minutes": runbook_version_tasks_step_properties_pause_details_duration_in_minutes,
                    },
                    "pre_condition": runbook_version_tasks_step_properties_pre_condition,
                    "run_on": {
                        "kind": runbook_version_tasks_step_properties_run_on_kind,
                        "condition": runbook_version_tasks_step_properties_run_on_condition,
                        "host": runbook_version_tasks_step_properties_run_on_host,
                        "previous_task_instance_details": [{
                            "output_variable_details": {
                                "output_variable_name": runbook_version_tasks_step_properties_run_on_previous_task_instance_details_output_variable_details_output_variable_name,
                                "step_name": runbook_version_tasks_step_properties_run_on_previous_task_instance_details_output_variable_details_step_name,
                            },
                            "resource_id": test_resource["id"],
                            "resource_type": runbook_version_tasks_step_properties_run_on_previous_task_instance_details_resource_type,
                        }],
                    },
                },
            }],
            defined_tags={
                "foo-namespace.bar-key": "value",
            },
            freeform_tags={
                "bar-key": "value",
            },
            rollback_workflow_details={
                "scope": runbook_version_rollback_workflow_details_scope,
                "workflows": [{
                    "group_name": test_group["name"],
                    "steps": [{
                        "type": runbook_version_rollback_workflow_details_workflow_steps_type,
                        "group_name": test_group["name"],
                        "step_name": runbook_version_rollback_workflow_details_workflow_steps_step_name,
                        "steps": runbook_version_rollback_workflow_details_workflow_steps_steps,
                    }],
                    "type": runbook_version_rollback_workflow_details_workflow_type,
                }],
            })
        ```

        ## Import

        RunbookVersions can be imported using the `id`, e.g.

        ```sh
        $ pulumi import oci:FleetAppsManagement/runbookVersion:RunbookVersion test_runbook_version "id"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example:
               `{"foo-namespace.bar-key": "value"}`
        :param pulumi.Input[Union['RunbookVersionExecutionWorkflowDetailsArgs', 'RunbookVersionExecutionWorkflowDetailsArgsDict']] execution_workflow_details: (Updatable) Execution Workflow details.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists
               for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param pulumi.Input[Sequence[pulumi.Input[Union['RunbookVersionGroupArgs', 'RunbookVersionGroupArgsDict']]]] groups: (Updatable) The groups of the runbook.
        :param pulumi.Input[Union['RunbookVersionRollbackWorkflowDetailsArgs', 'RunbookVersionRollbackWorkflowDetailsArgsDict']] rollback_workflow_details: (Updatable) Rollback Workflow details.
        :param pulumi.Input[builtins.str] runbook_id: The OCID of the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['RunbookVersionTaskArgs', 'RunbookVersionTaskArgsDict']]]] tasks: (Updatable) A set of tasks to execute in the runbook.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RunbookVersionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource provides the Runbook Version resource in Oracle Cloud Infrastructure Fleet Apps Management service.

        Add RunbookVersion in Fleet Application Management.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_oci as oci

        test_runbook_version = oci.fleet_apps_management.RunbookVersion("test_runbook_version",
            execution_workflow_details={
                "workflows": [{
                    "group_name": test_group["name"],
                    "steps": [{
                        "type": runbook_version_execution_workflow_details_workflow_steps_type,
                        "group_name": test_group["name"],
                        "step_name": runbook_version_execution_workflow_details_workflow_steps_step_name,
                        "steps": runbook_version_execution_workflow_details_workflow_steps_steps,
                    }],
                    "type": runbook_version_execution_workflow_details_workflow_type,
                }],
            },
            groups=[{
                "name": runbook_version_groups_name,
                "type": runbook_version_groups_type,
                "properties": {
                    "action_on_failure": runbook_version_groups_properties_action_on_failure,
                    "notification_preferences": {
                        "should_notify_on_pause": runbook_version_groups_properties_notification_preferences_should_notify_on_pause,
                        "should_notify_on_task_failure": runbook_version_groups_properties_notification_preferences_should_notify_on_task_failure,
                        "should_notify_on_task_success": runbook_version_groups_properties_notification_preferences_should_notify_on_task_success,
                    },
                    "pause_details": {
                        "kind": runbook_version_groups_properties_pause_details_kind,
                        "duration_in_minutes": runbook_version_groups_properties_pause_details_duration_in_minutes,
                    },
                    "pre_condition": runbook_version_groups_properties_pre_condition,
                    "run_on": {
                        "kind": runbook_version_groups_properties_run_on_kind,
                        "condition": runbook_version_groups_properties_run_on_condition,
                        "host": runbook_version_groups_properties_run_on_host,
                        "previous_task_instance_details": [{
                            "output_variable_details": {
                                "output_variable_name": runbook_version_groups_properties_run_on_previous_task_instance_details_output_variable_details_output_variable_name,
                                "step_name": runbook_version_groups_properties_run_on_previous_task_instance_details_output_variable_details_step_name,
                            },
                            "resource_id": test_resource["id"],
                            "resource_type": runbook_version_groups_properties_run_on_previous_task_instance_details_resource_type,
                        }],
                    },
                },
            }],
            runbook_id=test_runbook["id"],
            tasks=[{
                "step_name": runbook_version_tasks_step_name,
                "task_record_details": {
                    "scope": runbook_version_tasks_task_record_details_scope,
                    "description": runbook_version_tasks_task_record_details_description,
                    "execution_details": {
                        "execution_type": runbook_version_tasks_task_record_details_execution_details_execution_type,
                        "catalog_id": test_catalog["id"],
                        "command": runbook_version_tasks_task_record_details_execution_details_command,
                        "config_file": runbook_version_tasks_task_record_details_execution_details_config_file,
                        "content": {
                            "source_type": runbook_version_tasks_task_record_details_execution_details_content_source_type,
                            "bucket": runbook_version_tasks_task_record_details_execution_details_content_bucket,
                            "catalog_id": test_catalog["id"],
                            "checksum": runbook_version_tasks_task_record_details_execution_details_content_checksum,
                            "namespace": runbook_version_tasks_task_record_details_execution_details_content_namespace,
                            "object": runbook_version_tasks_task_record_details_execution_details_content_object,
                        },
                        "credentials": [{
                            "display_name": runbook_version_tasks_task_record_details_execution_details_credentials_display_name,
                            "id": runbook_version_tasks_task_record_details_execution_details_credentials_id,
                        }],
                        "endpoint": runbook_version_tasks_task_record_details_execution_details_endpoint,
                        "is_executable_content": runbook_version_tasks_task_record_details_execution_details_is_executable_content,
                        "is_locked": runbook_version_tasks_task_record_details_execution_details_is_locked,
                        "is_read_output_variable_enabled": runbook_version_tasks_task_record_details_execution_details_is_read_output_variable_enabled,
                        "target_compartment_id": test_compartment["id"],
                        "variables": {
                            "input_variables": [{
                                "description": runbook_version_tasks_task_record_details_execution_details_variables_input_variables_description,
                                "name": runbook_version_tasks_task_record_details_execution_details_variables_input_variables_name,
                                "type": runbook_version_tasks_task_record_details_execution_details_variables_input_variables_type,
                            }],
                            "output_variables": runbook_version_tasks_task_record_details_execution_details_variables_output_variables,
                        },
                    },
                    "is_apply_subject_task": runbook_version_tasks_task_record_details_is_apply_subject_task,
                    "is_copy_to_library_enabled": runbook_version_tasks_task_record_details_is_copy_to_library_enabled,
                    "is_discovery_output_task": runbook_version_tasks_task_record_details_is_discovery_output_task,
                    "name": runbook_version_tasks_task_record_details_name,
                    "os_type": runbook_version_tasks_task_record_details_os_type,
                    "platform": runbook_version_tasks_task_record_details_platform,
                    "properties": {
                        "num_retries": runbook_version_tasks_task_record_details_properties_num_retries,
                        "timeout_in_seconds": runbook_version_tasks_task_record_details_properties_timeout_in_seconds,
                    },
                    "task_record_id": test_task_record["id"],
                },
                "output_variable_mappings": [{
                    "name": runbook_version_tasks_output_variable_mappings_name,
                    "output_variable_details": {
                        "output_variable_name": runbook_version_tasks_output_variable_mappings_output_variable_details_output_variable_name,
                        "step_name": runbook_version_tasks_output_variable_mappings_output_variable_details_step_name,
                    },
                }],
                "step_properties": {
                    "action_on_failure": runbook_version_tasks_step_properties_action_on_failure,
                    "notification_preferences": {
                        "should_notify_on_pause": runbook_version_tasks_step_properties_notification_preferences_should_notify_on_pause,
                        "should_notify_on_task_failure": runbook_version_tasks_step_properties_notification_preferences_should_notify_on_task_failure,
                        "should_notify_on_task_success": runbook_version_tasks_step_properties_notification_preferences_should_notify_on_task_success,
                    },
                    "pause_details": {
                        "kind": runbook_version_tasks_step_properties_pause_details_kind,
                        "duration_in_minutes": runbook_version_tasks_step_properties_pause_details_duration_in_minutes,
                    },
                    "pre_condition": runbook_version_tasks_step_properties_pre_condition,
                    "run_on": {
                        "kind": runbook_version_tasks_step_properties_run_on_kind,
                        "condition": runbook_version_tasks_step_properties_run_on_condition,
                        "host": runbook_version_tasks_step_properties_run_on_host,
                        "previous_task_instance_details": [{
                            "output_variable_details": {
                                "output_variable_name": runbook_version_tasks_step_properties_run_on_previous_task_instance_details_output_variable_details_output_variable_name,
                                "step_name": runbook_version_tasks_step_properties_run_on_previous_task_instance_details_output_variable_details_step_name,
                            },
                            "resource_id": test_resource["id"],
                            "resource_type": runbook_version_tasks_step_properties_run_on_previous_task_instance_details_resource_type,
                        }],
                    },
                },
            }],
            defined_tags={
                "foo-namespace.bar-key": "value",
            },
            freeform_tags={
                "bar-key": "value",
            },
            rollback_workflow_details={
                "scope": runbook_version_rollback_workflow_details_scope,
                "workflows": [{
                    "group_name": test_group["name"],
                    "steps": [{
                        "type": runbook_version_rollback_workflow_details_workflow_steps_type,
                        "group_name": test_group["name"],
                        "step_name": runbook_version_rollback_workflow_details_workflow_steps_step_name,
                        "steps": runbook_version_rollback_workflow_details_workflow_steps_steps,
                    }],
                    "type": runbook_version_rollback_workflow_details_workflow_type,
                }],
            })
        ```

        ## Import

        RunbookVersions can be imported using the `id`, e.g.

        ```sh
        $ pulumi import oci:FleetAppsManagement/runbookVersion:RunbookVersion test_runbook_version "id"
        ```

        :param str resource_name: The name of the resource.
        :param RunbookVersionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RunbookVersionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 execution_workflow_details: Optional[pulumi.Input[Union['RunbookVersionExecutionWorkflowDetailsArgs', 'RunbookVersionExecutionWorkflowDetailsArgsDict']]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RunbookVersionGroupArgs', 'RunbookVersionGroupArgsDict']]]]] = None,
                 rollback_workflow_details: Optional[pulumi.Input[Union['RunbookVersionRollbackWorkflowDetailsArgs', 'RunbookVersionRollbackWorkflowDetailsArgsDict']]] = None,
                 runbook_id: Optional[pulumi.Input[builtins.str]] = None,
                 tasks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RunbookVersionTaskArgs', 'RunbookVersionTaskArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RunbookVersionArgs.__new__(RunbookVersionArgs)

            __props__.__dict__["defined_tags"] = defined_tags
            if execution_workflow_details is None and not opts.urn:
                raise TypeError("Missing required property 'execution_workflow_details'")
            __props__.__dict__["execution_workflow_details"] = execution_workflow_details
            __props__.__dict__["freeform_tags"] = freeform_tags
            if groups is None and not opts.urn:
                raise TypeError("Missing required property 'groups'")
            __props__.__dict__["groups"] = groups
            __props__.__dict__["rollback_workflow_details"] = rollback_workflow_details
            if runbook_id is None and not opts.urn:
                raise TypeError("Missing required property 'runbook_id'")
            __props__.__dict__["runbook_id"] = runbook_id
            if tasks is None and not opts.urn:
                raise TypeError("Missing required property 'tasks'")
            __props__.__dict__["tasks"] = tasks
            __props__.__dict__["compartment_id"] = None
            __props__.__dict__["is_latest"] = None
            __props__.__dict__["lifecycle_details"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["system_tags"] = None
            __props__.__dict__["time_created"] = None
            __props__.__dict__["time_updated"] = None
        super(RunbookVersion, __self__).__init__(
            'oci:FleetAppsManagement/runbookVersion:RunbookVersion',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            compartment_id: Optional[pulumi.Input[builtins.str]] = None,
            defined_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
            execution_workflow_details: Optional[pulumi.Input[Union['RunbookVersionExecutionWorkflowDetailsArgs', 'RunbookVersionExecutionWorkflowDetailsArgsDict']]] = None,
            freeform_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
            groups: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RunbookVersionGroupArgs', 'RunbookVersionGroupArgsDict']]]]] = None,
            is_latest: Optional[pulumi.Input[builtins.bool]] = None,
            lifecycle_details: Optional[pulumi.Input[builtins.str]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            rollback_workflow_details: Optional[pulumi.Input[Union['RunbookVersionRollbackWorkflowDetailsArgs', 'RunbookVersionRollbackWorkflowDetailsArgsDict']]] = None,
            runbook_id: Optional[pulumi.Input[builtins.str]] = None,
            state: Optional[pulumi.Input[builtins.str]] = None,
            system_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
            tasks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RunbookVersionTaskArgs', 'RunbookVersionTaskArgsDict']]]]] = None,
            time_created: Optional[pulumi.Input[builtins.str]] = None,
            time_updated: Optional[pulumi.Input[builtins.str]] = None) -> 'RunbookVersion':
        """
        Get an existing RunbookVersion resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example:
               `{"foo-namespace.bar-key": "value"}`
        :param pulumi.Input[Union['RunbookVersionExecutionWorkflowDetailsArgs', 'RunbookVersionExecutionWorkflowDetailsArgsDict']] execution_workflow_details: (Updatable) Execution Workflow details.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists
               for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param pulumi.Input[Sequence[pulumi.Input[Union['RunbookVersionGroupArgs', 'RunbookVersionGroupArgsDict']]]] groups: (Updatable) The groups of the runbook.
        :param pulumi.Input[builtins.str] lifecycle_details: A message describing the current state in more detail. For example, can be used to provide
               actionable information for a resource in Failed state.
        :param pulumi.Input[builtins.str] name: The name of the task
        :param pulumi.Input[Union['RunbookVersionRollbackWorkflowDetailsArgs', 'RunbookVersionRollbackWorkflowDetailsArgsDict']] rollback_workflow_details: (Updatable) Rollback Workflow details.
        :param pulumi.Input[builtins.str] runbook_id: The OCID of the resource.
        :param pulumi.Input[builtins.str] state: The current state of the FleetResource.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example:
               `{"orcl-cloud.free-tier-retained": "true"}`
        :param pulumi.Input[Sequence[pulumi.Input[Union['RunbookVersionTaskArgs', 'RunbookVersionTaskArgsDict']]]] tasks: (Updatable) A set of tasks to execute in the runbook.
        :param pulumi.Input[builtins.str] time_created: The time this resource was created. An RFC3339 formatted datetime string.
        :param pulumi.Input[builtins.str] time_updated: The time this resource was last updated. An RFC3339 formatted datetime string.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RunbookVersionState.__new__(_RunbookVersionState)

        __props__.__dict__["compartment_id"] = compartment_id
        __props__.__dict__["defined_tags"] = defined_tags
        __props__.__dict__["execution_workflow_details"] = execution_workflow_details
        __props__.__dict__["freeform_tags"] = freeform_tags
        __props__.__dict__["groups"] = groups
        __props__.__dict__["is_latest"] = is_latest
        __props__.__dict__["lifecycle_details"] = lifecycle_details
        __props__.__dict__["name"] = name
        __props__.__dict__["rollback_workflow_details"] = rollback_workflow_details
        __props__.__dict__["runbook_id"] = runbook_id
        __props__.__dict__["state"] = state
        __props__.__dict__["system_tags"] = system_tags
        __props__.__dict__["tasks"] = tasks
        __props__.__dict__["time_created"] = time_created
        __props__.__dict__["time_updated"] = time_updated
        return RunbookVersion(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> pulumi.Output[Mapping[str, builtins.str]]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example:
        `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="executionWorkflowDetails")
    def execution_workflow_details(self) -> pulumi.Output['outputs.RunbookVersionExecutionWorkflowDetails']:
        """
        (Updatable) Execution Workflow details.
        """
        return pulumi.get(self, "execution_workflow_details")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> pulumi.Output[Mapping[str, builtins.str]]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists
        for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def groups(self) -> pulumi.Output[Sequence['outputs.RunbookVersionGroup']]:
        """
        (Updatable) The groups of the runbook.
        """
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter(name="isLatest")
    def is_latest(self) -> pulumi.Output[builtins.bool]:
        return pulumi.get(self, "is_latest")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> pulumi.Output[builtins.str]:
        """
        A message describing the current state in more detail. For example, can be used to provide
        actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        The name of the task
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="rollbackWorkflowDetails")
    def rollback_workflow_details(self) -> pulumi.Output['outputs.RunbookVersionRollbackWorkflowDetails']:
        """
        (Updatable) Rollback Workflow details.
        """
        return pulumi.get(self, "rollback_workflow_details")

    @property
    @pulumi.getter(name="runbookId")
    def runbook_id(self) -> pulumi.Output[builtins.str]:
        """
        The OCID of the resource.
        """
        return pulumi.get(self, "runbook_id")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[builtins.str]:
        """
        The current state of the FleetResource.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> pulumi.Output[Mapping[str, builtins.str]]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example:
        `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter
    def tasks(self) -> pulumi.Output[Sequence['outputs.RunbookVersionTask']]:
        """
        (Updatable) A set of tasks to execute in the runbook.
        """
        return pulumi.get(self, "tasks")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> pulumi.Output[builtins.str]:
        """
        The time this resource was created. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> pulumi.Output[builtins.str]:
        """
        The time this resource was last updated. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_updated")

