# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'FsuCollectionActiveFsuCycleArgs',
    'FsuCollectionFleetDiscoveryArgs',
    'FsuCollectionFleetDiscoveryFilterArgs',
    'FsuCollectionFleetDiscoveryFilterTagArgs',
    'FsuCycleApplyActionScheduleArgs',
    'FsuCycleBatchingStrategyArgs',
    'FsuCycleDiagnosticsCollectionArgs',
    'FsuCycleGoalVersionDetailsArgs',
    'FsuCycleNextActionToExecuteArgs',
    'FsuCycleStageActionScheduleArgs',
    'GetFsuCollectionsFilterArgs',
    'GetFsuCyclesFilterArgs',
]

@pulumi.input_type
class FsuCollectionActiveFsuCycleArgs:
    def __init__(__self__, *,
                 display_name: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FsuCollectionFleetDiscoveryArgs:
    def __init__(__self__, *,
                 strategy: pulumi.Input[str],
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input['FsuCollectionFleetDiscoveryFilterArgs']]]] = None,
                 fsu_discovery_id: Optional[pulumi.Input[str]] = None,
                 query: Optional[pulumi.Input[str]] = None,
                 targets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "strategy", strategy)
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if fsu_discovery_id is not None:
            pulumi.set(__self__, "fsu_discovery_id", fsu_discovery_id)
        if query is not None:
            pulumi.set(__self__, "query", query)
        if targets is not None:
            pulumi.set(__self__, "targets", targets)

    @property
    @pulumi.getter
    def strategy(self) -> pulumi.Input[str]:
        return pulumi.get(self, "strategy")

    @strategy.setter
    def strategy(self, value: pulumi.Input[str]):
        pulumi.set(self, "strategy", value)

    @property
    @pulumi.getter
    def filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FsuCollectionFleetDiscoveryFilterArgs']]]]:
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FsuCollectionFleetDiscoveryFilterArgs']]]]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter(name="fsuDiscoveryId")
    def fsu_discovery_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fsu_discovery_id")

    @fsu_discovery_id.setter
    def fsu_discovery_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fsu_discovery_id", value)

    @property
    @pulumi.getter
    def query(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter
    def targets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "targets")

    @targets.setter
    def targets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "targets", value)


@pulumi.input_type
class FsuCollectionFleetDiscoveryFilterArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 entity_type: Optional[pulumi.Input[str]] = None,
                 identifiers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['FsuCollectionFleetDiscoveryFilterTagArgs']]]] = None,
                 versions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "type", type)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if identifiers is not None:
            pulumi.set(__self__, "identifiers", identifiers)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if names is not None:
            pulumi.set(__self__, "names", names)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if versions is not None:
            pulumi.set(__self__, "versions", versions)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entity_type")

    @entity_type.setter
    def entity_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_type", value)

    @property
    @pulumi.getter
    def identifiers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "identifiers")

    @identifiers.setter
    def identifiers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "identifiers", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "names")

    @names.setter
    def names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "names", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FsuCollectionFleetDiscoveryFilterTagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FsuCollectionFleetDiscoveryFilterTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def versions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "versions")

    @versions.setter
    def versions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "versions", value)


@pulumi.input_type
class FsuCollectionFleetDiscoveryFilterTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str],
                 namespace: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class FsuCycleApplyActionScheduleArgs:
    def __init__(__self__, *,
                 time_to_start: pulumi.Input[str],
                 type: pulumi.Input[str]):
        pulumi.set(__self__, "time_to_start", time_to_start)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="timeToStart")
    def time_to_start(self) -> pulumi.Input[str]:
        return pulumi.get(self, "time_to_start")

    @time_to_start.setter
    def time_to_start(self, value: pulumi.Input[str]):
        pulumi.set(self, "time_to_start", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class FsuCycleBatchingStrategyArgs:
    def __init__(__self__, *,
                 is_force_rolling: Optional[pulumi.Input[bool]] = None,
                 is_wait_for_batch_resume: Optional[pulumi.Input[bool]] = None,
                 percentage: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if is_force_rolling is not None:
            pulumi.set(__self__, "is_force_rolling", is_force_rolling)
        if is_wait_for_batch_resume is not None:
            pulumi.set(__self__, "is_wait_for_batch_resume", is_wait_for_batch_resume)
        if percentage is not None:
            pulumi.set(__self__, "percentage", percentage)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="isForceRolling")
    def is_force_rolling(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_force_rolling")

    @is_force_rolling.setter
    def is_force_rolling(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_force_rolling", value)

    @property
    @pulumi.getter(name="isWaitForBatchResume")
    def is_wait_for_batch_resume(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_wait_for_batch_resume")

    @is_wait_for_batch_resume.setter
    def is_wait_for_batch_resume(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_wait_for_batch_resume", value)

    @property
    @pulumi.getter
    def percentage(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "percentage")

    @percentage.setter
    def percentage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "percentage", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class FsuCycleDiagnosticsCollectionArgs:
    def __init__(__self__, *,
                 log_collection_mode: Optional[pulumi.Input[str]] = None):
        if log_collection_mode is not None:
            pulumi.set(__self__, "log_collection_mode", log_collection_mode)

    @property
    @pulumi.getter(name="logCollectionMode")
    def log_collection_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_collection_mode")

    @log_collection_mode.setter
    def log_collection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_collection_mode", value)


@pulumi.input_type
class FsuCycleGoalVersionDetailsArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 home_policy: Optional[pulumi.Input[str]] = None,
                 new_home_prefix: Optional[pulumi.Input[str]] = None,
                 software_image_id: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if home_policy is not None:
            pulumi.set(__self__, "home_policy", home_policy)
        if new_home_prefix is not None:
            pulumi.set(__self__, "new_home_prefix", new_home_prefix)
        if software_image_id is not None:
            pulumi.set(__self__, "software_image_id", software_image_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="homePolicy")
    def home_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "home_policy")

    @home_policy.setter
    def home_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "home_policy", value)

    @property
    @pulumi.getter(name="newHomePrefix")
    def new_home_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "new_home_prefix")

    @new_home_prefix.setter
    def new_home_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "new_home_prefix", value)

    @property
    @pulumi.getter(name="softwareImageId")
    def software_image_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "software_image_id")

    @software_image_id.setter
    def software_image_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "software_image_id", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class FsuCycleNextActionToExecuteArgs:
    def __init__(__self__, *,
                 time_to_start: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if time_to_start is not None:
            pulumi.set(__self__, "time_to_start", time_to_start)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="timeToStart")
    def time_to_start(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_to_start")

    @time_to_start.setter
    def time_to_start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_to_start", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class FsuCycleStageActionScheduleArgs:
    def __init__(__self__, *,
                 time_to_start: pulumi.Input[str],
                 type: pulumi.Input[str]):
        pulumi.set(__self__, "time_to_start", time_to_start)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="timeToStart")
    def time_to_start(self) -> pulumi.Input[str]:
        return pulumi.get(self, "time_to_start")

    @time_to_start.setter
    def time_to_start(self, value: pulumi.Input[str]):
        pulumi.set(self, "time_to_start", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class GetFsuCollectionsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class GetFsuCyclesFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


