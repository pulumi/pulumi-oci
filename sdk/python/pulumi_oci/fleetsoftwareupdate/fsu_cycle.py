# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['FsuCycleArgs', 'FsuCycle']

@pulumi.input_type
class FsuCycleArgs:
    def __init__(__self__, *,
                 compartment_id: pulumi.Input[str],
                 fsu_collection_id: pulumi.Input[str],
                 goal_version_details: pulumi.Input['FsuCycleGoalVersionDetailsArgs'],
                 type: pulumi.Input[str],
                 apply_action_schedule: Optional[pulumi.Input['FsuCycleApplyActionScheduleArgs']] = None,
                 batching_strategy: Optional[pulumi.Input['FsuCycleBatchingStrategyArgs']] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 diagnostics_collection: Optional[pulumi.Input['FsuCycleDiagnosticsCollectionArgs']] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 is_ignore_missing_patches: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 is_ignore_patches: Optional[pulumi.Input[bool]] = None,
                 is_keep_placement: Optional[pulumi.Input[bool]] = None,
                 max_drain_timeout_in_seconds: Optional[pulumi.Input[int]] = None,
                 stage_action_schedule: Optional[pulumi.Input['FsuCycleStageActionScheduleArgs']] = None):
        """
        The set of arguments for constructing a FsuCycle resource.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "fsu_collection_id", fsu_collection_id)
        pulumi.set(__self__, "goal_version_details", goal_version_details)
        pulumi.set(__self__, "type", type)
        if apply_action_schedule is not None:
            pulumi.set(__self__, "apply_action_schedule", apply_action_schedule)
        if batching_strategy is not None:
            pulumi.set(__self__, "batching_strategy", batching_strategy)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if diagnostics_collection is not None:
            pulumi.set(__self__, "diagnostics_collection", diagnostics_collection)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if is_ignore_missing_patches is not None:
            pulumi.set(__self__, "is_ignore_missing_patches", is_ignore_missing_patches)
        if is_ignore_patches is not None:
            pulumi.set(__self__, "is_ignore_patches", is_ignore_patches)
        if is_keep_placement is not None:
            pulumi.set(__self__, "is_keep_placement", is_keep_placement)
        if max_drain_timeout_in_seconds is not None:
            pulumi.set(__self__, "max_drain_timeout_in_seconds", max_drain_timeout_in_seconds)
        if stage_action_schedule is not None:
            pulumi.set(__self__, "stage_action_schedule", stage_action_schedule)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter(name="fsuCollectionId")
    def fsu_collection_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "fsu_collection_id")

    @fsu_collection_id.setter
    def fsu_collection_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "fsu_collection_id", value)

    @property
    @pulumi.getter(name="goalVersionDetails")
    def goal_version_details(self) -> pulumi.Input['FsuCycleGoalVersionDetailsArgs']:
        return pulumi.get(self, "goal_version_details")

    @goal_version_details.setter
    def goal_version_details(self, value: pulumi.Input['FsuCycleGoalVersionDetailsArgs']):
        pulumi.set(self, "goal_version_details", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="applyActionSchedule")
    def apply_action_schedule(self) -> Optional[pulumi.Input['FsuCycleApplyActionScheduleArgs']]:
        return pulumi.get(self, "apply_action_schedule")

    @apply_action_schedule.setter
    def apply_action_schedule(self, value: Optional[pulumi.Input['FsuCycleApplyActionScheduleArgs']]):
        pulumi.set(self, "apply_action_schedule", value)

    @property
    @pulumi.getter(name="batchingStrategy")
    def batching_strategy(self) -> Optional[pulumi.Input['FsuCycleBatchingStrategyArgs']]:
        return pulumi.get(self, "batching_strategy")

    @batching_strategy.setter
    def batching_strategy(self, value: Optional[pulumi.Input['FsuCycleBatchingStrategyArgs']]):
        pulumi.set(self, "batching_strategy", value)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "defined_tags")

    @defined_tags.setter
    def defined_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "defined_tags", value)

    @property
    @pulumi.getter(name="diagnosticsCollection")
    def diagnostics_collection(self) -> Optional[pulumi.Input['FsuCycleDiagnosticsCollectionArgs']]:
        return pulumi.get(self, "diagnostics_collection")

    @diagnostics_collection.setter
    def diagnostics_collection(self, value: Optional[pulumi.Input['FsuCycleDiagnosticsCollectionArgs']]):
        pulumi.set(self, "diagnostics_collection", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "freeform_tags")

    @freeform_tags.setter
    def freeform_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "freeform_tags", value)

    @property
    @pulumi.getter(name="isIgnoreMissingPatches")
    def is_ignore_missing_patches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "is_ignore_missing_patches")

    @is_ignore_missing_patches.setter
    def is_ignore_missing_patches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "is_ignore_missing_patches", value)

    @property
    @pulumi.getter(name="isIgnorePatches")
    def is_ignore_patches(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_ignore_patches")

    @is_ignore_patches.setter
    def is_ignore_patches(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_ignore_patches", value)

    @property
    @pulumi.getter(name="isKeepPlacement")
    def is_keep_placement(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_keep_placement")

    @is_keep_placement.setter
    def is_keep_placement(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_keep_placement", value)

    @property
    @pulumi.getter(name="maxDrainTimeoutInSeconds")
    def max_drain_timeout_in_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_drain_timeout_in_seconds")

    @max_drain_timeout_in_seconds.setter
    def max_drain_timeout_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_drain_timeout_in_seconds", value)

    @property
    @pulumi.getter(name="stageActionSchedule")
    def stage_action_schedule(self) -> Optional[pulumi.Input['FsuCycleStageActionScheduleArgs']]:
        return pulumi.get(self, "stage_action_schedule")

    @stage_action_schedule.setter
    def stage_action_schedule(self, value: Optional[pulumi.Input['FsuCycleStageActionScheduleArgs']]):
        pulumi.set(self, "stage_action_schedule", value)


@pulumi.input_type
class _FsuCycleState:
    def __init__(__self__, *,
                 apply_action_schedule: Optional[pulumi.Input['FsuCycleApplyActionScheduleArgs']] = None,
                 batching_strategy: Optional[pulumi.Input['FsuCycleBatchingStrategyArgs']] = None,
                 collection_type: Optional[pulumi.Input[str]] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 diagnostics_collection: Optional[pulumi.Input['FsuCycleDiagnosticsCollectionArgs']] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 executing_fsu_action_id: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 fsu_collection_id: Optional[pulumi.Input[str]] = None,
                 goal_version_details: Optional[pulumi.Input['FsuCycleGoalVersionDetailsArgs']] = None,
                 is_ignore_missing_patches: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 is_ignore_patches: Optional[pulumi.Input[bool]] = None,
                 is_keep_placement: Optional[pulumi.Input[bool]] = None,
                 last_completed_action: Optional[pulumi.Input[str]] = None,
                 lifecycle_details: Optional[pulumi.Input[str]] = None,
                 max_drain_timeout_in_seconds: Optional[pulumi.Input[int]] = None,
                 next_action_to_executes: Optional[pulumi.Input[Sequence[pulumi.Input['FsuCycleNextActionToExecuteArgs']]]] = None,
                 stage_action_schedule: Optional[pulumi.Input['FsuCycleStageActionScheduleArgs']] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 system_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 time_created: Optional[pulumi.Input[str]] = None,
                 time_finished: Optional[pulumi.Input[str]] = None,
                 time_updated: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering FsuCycle resources.
        """
        if apply_action_schedule is not None:
            pulumi.set(__self__, "apply_action_schedule", apply_action_schedule)
        if batching_strategy is not None:
            pulumi.set(__self__, "batching_strategy", batching_strategy)
        if collection_type is not None:
            pulumi.set(__self__, "collection_type", collection_type)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if diagnostics_collection is not None:
            pulumi.set(__self__, "diagnostics_collection", diagnostics_collection)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if executing_fsu_action_id is not None:
            pulumi.set(__self__, "executing_fsu_action_id", executing_fsu_action_id)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if fsu_collection_id is not None:
            pulumi.set(__self__, "fsu_collection_id", fsu_collection_id)
        if goal_version_details is not None:
            pulumi.set(__self__, "goal_version_details", goal_version_details)
        if is_ignore_missing_patches is not None:
            pulumi.set(__self__, "is_ignore_missing_patches", is_ignore_missing_patches)
        if is_ignore_patches is not None:
            pulumi.set(__self__, "is_ignore_patches", is_ignore_patches)
        if is_keep_placement is not None:
            pulumi.set(__self__, "is_keep_placement", is_keep_placement)
        if last_completed_action is not None:
            pulumi.set(__self__, "last_completed_action", last_completed_action)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if max_drain_timeout_in_seconds is not None:
            pulumi.set(__self__, "max_drain_timeout_in_seconds", max_drain_timeout_in_seconds)
        if next_action_to_executes is not None:
            pulumi.set(__self__, "next_action_to_executes", next_action_to_executes)
        if stage_action_schedule is not None:
            pulumi.set(__self__, "stage_action_schedule", stage_action_schedule)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_finished is not None:
            pulumi.set(__self__, "time_finished", time_finished)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="applyActionSchedule")
    def apply_action_schedule(self) -> Optional[pulumi.Input['FsuCycleApplyActionScheduleArgs']]:
        return pulumi.get(self, "apply_action_schedule")

    @apply_action_schedule.setter
    def apply_action_schedule(self, value: Optional[pulumi.Input['FsuCycleApplyActionScheduleArgs']]):
        pulumi.set(self, "apply_action_schedule", value)

    @property
    @pulumi.getter(name="batchingStrategy")
    def batching_strategy(self) -> Optional[pulumi.Input['FsuCycleBatchingStrategyArgs']]:
        return pulumi.get(self, "batching_strategy")

    @batching_strategy.setter
    def batching_strategy(self, value: Optional[pulumi.Input['FsuCycleBatchingStrategyArgs']]):
        pulumi.set(self, "batching_strategy", value)

    @property
    @pulumi.getter(name="collectionType")
    def collection_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "collection_type")

    @collection_type.setter
    def collection_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "collection_type", value)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "defined_tags")

    @defined_tags.setter
    def defined_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "defined_tags", value)

    @property
    @pulumi.getter(name="diagnosticsCollection")
    def diagnostics_collection(self) -> Optional[pulumi.Input['FsuCycleDiagnosticsCollectionArgs']]:
        return pulumi.get(self, "diagnostics_collection")

    @diagnostics_collection.setter
    def diagnostics_collection(self, value: Optional[pulumi.Input['FsuCycleDiagnosticsCollectionArgs']]):
        pulumi.set(self, "diagnostics_collection", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="executingFsuActionId")
    def executing_fsu_action_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "executing_fsu_action_id")

    @executing_fsu_action_id.setter
    def executing_fsu_action_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "executing_fsu_action_id", value)

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "freeform_tags")

    @freeform_tags.setter
    def freeform_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "freeform_tags", value)

    @property
    @pulumi.getter(name="fsuCollectionId")
    def fsu_collection_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fsu_collection_id")

    @fsu_collection_id.setter
    def fsu_collection_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fsu_collection_id", value)

    @property
    @pulumi.getter(name="goalVersionDetails")
    def goal_version_details(self) -> Optional[pulumi.Input['FsuCycleGoalVersionDetailsArgs']]:
        return pulumi.get(self, "goal_version_details")

    @goal_version_details.setter
    def goal_version_details(self, value: Optional[pulumi.Input['FsuCycleGoalVersionDetailsArgs']]):
        pulumi.set(self, "goal_version_details", value)

    @property
    @pulumi.getter(name="isIgnoreMissingPatches")
    def is_ignore_missing_patches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "is_ignore_missing_patches")

    @is_ignore_missing_patches.setter
    def is_ignore_missing_patches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "is_ignore_missing_patches", value)

    @property
    @pulumi.getter(name="isIgnorePatches")
    def is_ignore_patches(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_ignore_patches")

    @is_ignore_patches.setter
    def is_ignore_patches(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_ignore_patches", value)

    @property
    @pulumi.getter(name="isKeepPlacement")
    def is_keep_placement(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_keep_placement")

    @is_keep_placement.setter
    def is_keep_placement(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_keep_placement", value)

    @property
    @pulumi.getter(name="lastCompletedAction")
    def last_completed_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_completed_action")

    @last_completed_action.setter
    def last_completed_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_completed_action", value)

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lifecycle_details")

    @lifecycle_details.setter
    def lifecycle_details(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lifecycle_details", value)

    @property
    @pulumi.getter(name="maxDrainTimeoutInSeconds")
    def max_drain_timeout_in_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_drain_timeout_in_seconds")

    @max_drain_timeout_in_seconds.setter
    def max_drain_timeout_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_drain_timeout_in_seconds", value)

    @property
    @pulumi.getter(name="nextActionToExecutes")
    def next_action_to_executes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FsuCycleNextActionToExecuteArgs']]]]:
        return pulumi.get(self, "next_action_to_executes")

    @next_action_to_executes.setter
    def next_action_to_executes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FsuCycleNextActionToExecuteArgs']]]]):
        pulumi.set(self, "next_action_to_executes", value)

    @property
    @pulumi.getter(name="stageActionSchedule")
    def stage_action_schedule(self) -> Optional[pulumi.Input['FsuCycleStageActionScheduleArgs']]:
        return pulumi.get(self, "stage_action_schedule")

    @stage_action_schedule.setter
    def stage_action_schedule(self, value: Optional[pulumi.Input['FsuCycleStageActionScheduleArgs']]):
        pulumi.set(self, "stage_action_schedule", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "system_tags")

    @system_tags.setter
    def system_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "system_tags", value)

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_created")

    @time_created.setter
    def time_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_created", value)

    @property
    @pulumi.getter(name="timeFinished")
    def time_finished(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_finished")

    @time_finished.setter
    def time_finished(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_finished", value)

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_updated")

    @time_updated.setter
    def time_updated(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_updated", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


class FsuCycle(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 apply_action_schedule: Optional[pulumi.Input[Union['FsuCycleApplyActionScheduleArgs', 'FsuCycleApplyActionScheduleArgsDict']]] = None,
                 batching_strategy: Optional[pulumi.Input[Union['FsuCycleBatchingStrategyArgs', 'FsuCycleBatchingStrategyArgsDict']]] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 diagnostics_collection: Optional[pulumi.Input[Union['FsuCycleDiagnosticsCollectionArgs', 'FsuCycleDiagnosticsCollectionArgsDict']]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 fsu_collection_id: Optional[pulumi.Input[str]] = None,
                 goal_version_details: Optional[pulumi.Input[Union['FsuCycleGoalVersionDetailsArgs', 'FsuCycleGoalVersionDetailsArgsDict']]] = None,
                 is_ignore_missing_patches: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 is_ignore_patches: Optional[pulumi.Input[bool]] = None,
                 is_keep_placement: Optional[pulumi.Input[bool]] = None,
                 max_drain_timeout_in_seconds: Optional[pulumi.Input[int]] = None,
                 stage_action_schedule: Optional[pulumi.Input[Union['FsuCycleStageActionScheduleArgs', 'FsuCycleStageActionScheduleArgsDict']]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a FsuCycle resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: FsuCycleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a FsuCycle resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param FsuCycleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FsuCycleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 apply_action_schedule: Optional[pulumi.Input[Union['FsuCycleApplyActionScheduleArgs', 'FsuCycleApplyActionScheduleArgsDict']]] = None,
                 batching_strategy: Optional[pulumi.Input[Union['FsuCycleBatchingStrategyArgs', 'FsuCycleBatchingStrategyArgsDict']]] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 diagnostics_collection: Optional[pulumi.Input[Union['FsuCycleDiagnosticsCollectionArgs', 'FsuCycleDiagnosticsCollectionArgsDict']]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 fsu_collection_id: Optional[pulumi.Input[str]] = None,
                 goal_version_details: Optional[pulumi.Input[Union['FsuCycleGoalVersionDetailsArgs', 'FsuCycleGoalVersionDetailsArgsDict']]] = None,
                 is_ignore_missing_patches: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 is_ignore_patches: Optional[pulumi.Input[bool]] = None,
                 is_keep_placement: Optional[pulumi.Input[bool]] = None,
                 max_drain_timeout_in_seconds: Optional[pulumi.Input[int]] = None,
                 stage_action_schedule: Optional[pulumi.Input[Union['FsuCycleStageActionScheduleArgs', 'FsuCycleStageActionScheduleArgsDict']]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FsuCycleArgs.__new__(FsuCycleArgs)

            __props__.__dict__["apply_action_schedule"] = apply_action_schedule
            __props__.__dict__["batching_strategy"] = batching_strategy
            if compartment_id is None and not opts.urn:
                raise TypeError("Missing required property 'compartment_id'")
            __props__.__dict__["compartment_id"] = compartment_id
            __props__.__dict__["defined_tags"] = defined_tags
            __props__.__dict__["diagnostics_collection"] = diagnostics_collection
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["freeform_tags"] = freeform_tags
            if fsu_collection_id is None and not opts.urn:
                raise TypeError("Missing required property 'fsu_collection_id'")
            __props__.__dict__["fsu_collection_id"] = fsu_collection_id
            if goal_version_details is None and not opts.urn:
                raise TypeError("Missing required property 'goal_version_details'")
            __props__.__dict__["goal_version_details"] = goal_version_details
            __props__.__dict__["is_ignore_missing_patches"] = is_ignore_missing_patches
            __props__.__dict__["is_ignore_patches"] = is_ignore_patches
            __props__.__dict__["is_keep_placement"] = is_keep_placement
            __props__.__dict__["max_drain_timeout_in_seconds"] = max_drain_timeout_in_seconds
            __props__.__dict__["stage_action_schedule"] = stage_action_schedule
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["collection_type"] = None
            __props__.__dict__["executing_fsu_action_id"] = None
            __props__.__dict__["last_completed_action"] = None
            __props__.__dict__["lifecycle_details"] = None
            __props__.__dict__["next_action_to_executes"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["system_tags"] = None
            __props__.__dict__["time_created"] = None
            __props__.__dict__["time_finished"] = None
            __props__.__dict__["time_updated"] = None
        super(FsuCycle, __self__).__init__(
            'oci:FleetSoftwareUpdate/fsuCycle:FsuCycle',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            apply_action_schedule: Optional[pulumi.Input[Union['FsuCycleApplyActionScheduleArgs', 'FsuCycleApplyActionScheduleArgsDict']]] = None,
            batching_strategy: Optional[pulumi.Input[Union['FsuCycleBatchingStrategyArgs', 'FsuCycleBatchingStrategyArgsDict']]] = None,
            collection_type: Optional[pulumi.Input[str]] = None,
            compartment_id: Optional[pulumi.Input[str]] = None,
            defined_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            diagnostics_collection: Optional[pulumi.Input[Union['FsuCycleDiagnosticsCollectionArgs', 'FsuCycleDiagnosticsCollectionArgsDict']]] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            executing_fsu_action_id: Optional[pulumi.Input[str]] = None,
            freeform_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            fsu_collection_id: Optional[pulumi.Input[str]] = None,
            goal_version_details: Optional[pulumi.Input[Union['FsuCycleGoalVersionDetailsArgs', 'FsuCycleGoalVersionDetailsArgsDict']]] = None,
            is_ignore_missing_patches: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            is_ignore_patches: Optional[pulumi.Input[bool]] = None,
            is_keep_placement: Optional[pulumi.Input[bool]] = None,
            last_completed_action: Optional[pulumi.Input[str]] = None,
            lifecycle_details: Optional[pulumi.Input[str]] = None,
            max_drain_timeout_in_seconds: Optional[pulumi.Input[int]] = None,
            next_action_to_executes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['FsuCycleNextActionToExecuteArgs', 'FsuCycleNextActionToExecuteArgsDict']]]]] = None,
            stage_action_schedule: Optional[pulumi.Input[Union['FsuCycleStageActionScheduleArgs', 'FsuCycleStageActionScheduleArgsDict']]] = None,
            state: Optional[pulumi.Input[str]] = None,
            system_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            time_created: Optional[pulumi.Input[str]] = None,
            time_finished: Optional[pulumi.Input[str]] = None,
            time_updated: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None) -> 'FsuCycle':
        """
        Get an existing FsuCycle resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FsuCycleState.__new__(_FsuCycleState)

        __props__.__dict__["apply_action_schedule"] = apply_action_schedule
        __props__.__dict__["batching_strategy"] = batching_strategy
        __props__.__dict__["collection_type"] = collection_type
        __props__.__dict__["compartment_id"] = compartment_id
        __props__.__dict__["defined_tags"] = defined_tags
        __props__.__dict__["diagnostics_collection"] = diagnostics_collection
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["executing_fsu_action_id"] = executing_fsu_action_id
        __props__.__dict__["freeform_tags"] = freeform_tags
        __props__.__dict__["fsu_collection_id"] = fsu_collection_id
        __props__.__dict__["goal_version_details"] = goal_version_details
        __props__.__dict__["is_ignore_missing_patches"] = is_ignore_missing_patches
        __props__.__dict__["is_ignore_patches"] = is_ignore_patches
        __props__.__dict__["is_keep_placement"] = is_keep_placement
        __props__.__dict__["last_completed_action"] = last_completed_action
        __props__.__dict__["lifecycle_details"] = lifecycle_details
        __props__.__dict__["max_drain_timeout_in_seconds"] = max_drain_timeout_in_seconds
        __props__.__dict__["next_action_to_executes"] = next_action_to_executes
        __props__.__dict__["stage_action_schedule"] = stage_action_schedule
        __props__.__dict__["state"] = state
        __props__.__dict__["system_tags"] = system_tags
        __props__.__dict__["time_created"] = time_created
        __props__.__dict__["time_finished"] = time_finished
        __props__.__dict__["time_updated"] = time_updated
        __props__.__dict__["type"] = type
        return FsuCycle(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="applyActionSchedule")
    def apply_action_schedule(self) -> pulumi.Output['outputs.FsuCycleApplyActionSchedule']:
        return pulumi.get(self, "apply_action_schedule")

    @property
    @pulumi.getter(name="batchingStrategy")
    def batching_strategy(self) -> pulumi.Output['outputs.FsuCycleBatchingStrategy']:
        return pulumi.get(self, "batching_strategy")

    @property
    @pulumi.getter(name="collectionType")
    def collection_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "collection_type")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> pulumi.Output[Mapping[str, str]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="diagnosticsCollection")
    def diagnostics_collection(self) -> pulumi.Output['outputs.FsuCycleDiagnosticsCollection']:
        return pulumi.get(self, "diagnostics_collection")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="executingFsuActionId")
    def executing_fsu_action_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "executing_fsu_action_id")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> pulumi.Output[Mapping[str, str]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="fsuCollectionId")
    def fsu_collection_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "fsu_collection_id")

    @property
    @pulumi.getter(name="goalVersionDetails")
    def goal_version_details(self) -> pulumi.Output['outputs.FsuCycleGoalVersionDetails']:
        return pulumi.get(self, "goal_version_details")

    @property
    @pulumi.getter(name="isIgnoreMissingPatches")
    def is_ignore_missing_patches(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "is_ignore_missing_patches")

    @property
    @pulumi.getter(name="isIgnorePatches")
    def is_ignore_patches(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "is_ignore_patches")

    @property
    @pulumi.getter(name="isKeepPlacement")
    def is_keep_placement(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "is_keep_placement")

    @property
    @pulumi.getter(name="lastCompletedAction")
    def last_completed_action(self) -> pulumi.Output[str]:
        return pulumi.get(self, "last_completed_action")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> pulumi.Output[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="maxDrainTimeoutInSeconds")
    def max_drain_timeout_in_seconds(self) -> pulumi.Output[int]:
        return pulumi.get(self, "max_drain_timeout_in_seconds")

    @property
    @pulumi.getter(name="nextActionToExecutes")
    def next_action_to_executes(self) -> pulumi.Output[Sequence['outputs.FsuCycleNextActionToExecute']]:
        return pulumi.get(self, "next_action_to_executes")

    @property
    @pulumi.getter(name="stageActionSchedule")
    def stage_action_schedule(self) -> pulumi.Output['outputs.FsuCycleStageActionSchedule']:
        return pulumi.get(self, "stage_action_schedule")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> pulumi.Output[Mapping[str, str]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> pulumi.Output[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeFinished")
    def time_finished(self) -> pulumi.Output[str]:
        return pulumi.get(self, "time_finished")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> pulumi.Output[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "type")

