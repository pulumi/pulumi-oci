# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'FsuCollectionActiveFsuCycle',
    'FsuCollectionFleetDiscovery',
    'FsuCollectionFleetDiscoveryFilter',
    'FsuCollectionFleetDiscoveryFilterTag',
    'FsuCycleApplyActionSchedule',
    'FsuCycleBatchingStrategy',
    'FsuCycleDiagnosticsCollection',
    'FsuCycleGoalVersionDetails',
    'FsuCycleNextActionToExecute',
    'FsuCycleStageActionSchedule',
    'GetFsuCollectionActiveFsuCycleResult',
    'GetFsuCollectionFleetDiscoveryResult',
    'GetFsuCollectionFleetDiscoveryFilterResult',
    'GetFsuCollectionFleetDiscoveryFilterTagResult',
    'GetFsuCollectionsFilterResult',
    'GetFsuCollectionsFsuCollectionSummaryCollectionResult',
    'GetFsuCollectionsFsuCollectionSummaryCollectionItemResult',
    'GetFsuCollectionsFsuCollectionSummaryCollectionItemActiveFsuCycleResult',
    'GetFsuCollectionsFsuCollectionSummaryCollectionItemFleetDiscoveryResult',
    'GetFsuCollectionsFsuCollectionSummaryCollectionItemFleetDiscoveryFilterResult',
    'GetFsuCollectionsFsuCollectionSummaryCollectionItemFleetDiscoveryFilterTagResult',
    'GetFsuCycleApplyActionScheduleResult',
    'GetFsuCycleBatchingStrategyResult',
    'GetFsuCycleDiagnosticsCollectionResult',
    'GetFsuCycleGoalVersionDetailResult',
    'GetFsuCycleNextActionToExecuteResult',
    'GetFsuCycleStageActionScheduleResult',
    'GetFsuCyclesFilterResult',
    'GetFsuCyclesFsuCycleSummaryCollectionResult',
    'GetFsuCyclesFsuCycleSummaryCollectionItemResult',
    'GetFsuCyclesFsuCycleSummaryCollectionItemApplyActionScheduleResult',
    'GetFsuCyclesFsuCycleSummaryCollectionItemBatchingStrategyResult',
    'GetFsuCyclesFsuCycleSummaryCollectionItemDiagnosticsCollectionResult',
    'GetFsuCyclesFsuCycleSummaryCollectionItemGoalVersionDetailResult',
    'GetFsuCyclesFsuCycleSummaryCollectionItemNextActionToExecuteResult',
    'GetFsuCyclesFsuCycleSummaryCollectionItemStageActionScheduleResult',
]

@pulumi.output_type
class FsuCollectionActiveFsuCycle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FsuCollectionActiveFsuCycle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FsuCollectionActiveFsuCycle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FsuCollectionActiveFsuCycle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class FsuCollectionFleetDiscovery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fsuDiscoveryId":
            suggest = "fsu_discovery_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FsuCollectionFleetDiscovery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FsuCollectionFleetDiscovery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FsuCollectionFleetDiscovery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 strategy: str,
                 filters: Optional[Sequence['outputs.FsuCollectionFleetDiscoveryFilter']] = None,
                 fsu_discovery_id: Optional[str] = None,
                 query: Optional[str] = None,
                 targets: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "strategy", strategy)
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if fsu_discovery_id is not None:
            pulumi.set(__self__, "fsu_discovery_id", fsu_discovery_id)
        if query is not None:
            pulumi.set(__self__, "query", query)
        if targets is not None:
            pulumi.set(__self__, "targets", targets)

    @property
    @pulumi.getter
    def strategy(self) -> str:
        return pulumi.get(self, "strategy")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.FsuCollectionFleetDiscoveryFilter']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter(name="fsuDiscoveryId")
    def fsu_discovery_id(self) -> Optional[str]:
        return pulumi.get(self, "fsu_discovery_id")

    @property
    @pulumi.getter
    def query(self) -> Optional[str]:
        return pulumi.get(self, "query")

    @property
    @pulumi.getter
    def targets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "targets")


@pulumi.output_type
class FsuCollectionFleetDiscoveryFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FsuCollectionFleetDiscoveryFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FsuCollectionFleetDiscoveryFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FsuCollectionFleetDiscoveryFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 entity_type: Optional[str] = None,
                 identifiers: Optional[Sequence[str]] = None,
                 mode: Optional[str] = None,
                 names: Optional[Sequence[str]] = None,
                 operator: Optional[str] = None,
                 tags: Optional[Sequence['outputs.FsuCollectionFleetDiscoveryFilterTag']] = None,
                 versions: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "type", type)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if identifiers is not None:
            pulumi.set(__self__, "identifiers", identifiers)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if names is not None:
            pulumi.set(__self__, "names", names)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if versions is not None:
            pulumi.set(__self__, "versions", versions)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[str]:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter
    def identifiers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "identifiers")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "names")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.FsuCollectionFleetDiscoveryFilterTag']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def versions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "versions")


@pulumi.output_type
class FsuCollectionFleetDiscoveryFilterTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str,
                 namespace: Optional[str] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")


@pulumi.output_type
class FsuCycleApplyActionSchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "timeToStart":
            suggest = "time_to_start"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FsuCycleApplyActionSchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FsuCycleApplyActionSchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FsuCycleApplyActionSchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 time_to_start: str,
                 type: str):
        pulumi.set(__self__, "time_to_start", time_to_start)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="timeToStart")
    def time_to_start(self) -> str:
        return pulumi.get(self, "time_to_start")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class FsuCycleBatchingStrategy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isForceRolling":
            suggest = "is_force_rolling"
        elif key == "isWaitForBatchResume":
            suggest = "is_wait_for_batch_resume"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FsuCycleBatchingStrategy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FsuCycleBatchingStrategy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FsuCycleBatchingStrategy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_force_rolling: Optional[bool] = None,
                 is_wait_for_batch_resume: Optional[bool] = None,
                 percentage: Optional[int] = None,
                 type: Optional[str] = None):
        if is_force_rolling is not None:
            pulumi.set(__self__, "is_force_rolling", is_force_rolling)
        if is_wait_for_batch_resume is not None:
            pulumi.set(__self__, "is_wait_for_batch_resume", is_wait_for_batch_resume)
        if percentage is not None:
            pulumi.set(__self__, "percentage", percentage)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="isForceRolling")
    def is_force_rolling(self) -> Optional[bool]:
        return pulumi.get(self, "is_force_rolling")

    @property
    @pulumi.getter(name="isWaitForBatchResume")
    def is_wait_for_batch_resume(self) -> Optional[bool]:
        return pulumi.get(self, "is_wait_for_batch_resume")

    @property
    @pulumi.getter
    def percentage(self) -> Optional[int]:
        return pulumi.get(self, "percentage")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class FsuCycleDiagnosticsCollection(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logCollectionMode":
            suggest = "log_collection_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FsuCycleDiagnosticsCollection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FsuCycleDiagnosticsCollection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FsuCycleDiagnosticsCollection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 log_collection_mode: Optional[str] = None):
        if log_collection_mode is not None:
            pulumi.set(__self__, "log_collection_mode", log_collection_mode)

    @property
    @pulumi.getter(name="logCollectionMode")
    def log_collection_mode(self) -> Optional[str]:
        return pulumi.get(self, "log_collection_mode")


@pulumi.output_type
class FsuCycleGoalVersionDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "homePolicy":
            suggest = "home_policy"
        elif key == "newHomePrefix":
            suggest = "new_home_prefix"
        elif key == "softwareImageId":
            suggest = "software_image_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FsuCycleGoalVersionDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FsuCycleGoalVersionDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FsuCycleGoalVersionDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 home_policy: Optional[str] = None,
                 new_home_prefix: Optional[str] = None,
                 software_image_id: Optional[str] = None,
                 version: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if home_policy is not None:
            pulumi.set(__self__, "home_policy", home_policy)
        if new_home_prefix is not None:
            pulumi.set(__self__, "new_home_prefix", new_home_prefix)
        if software_image_id is not None:
            pulumi.set(__self__, "software_image_id", software_image_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="homePolicy")
    def home_policy(self) -> Optional[str]:
        return pulumi.get(self, "home_policy")

    @property
    @pulumi.getter(name="newHomePrefix")
    def new_home_prefix(self) -> Optional[str]:
        return pulumi.get(self, "new_home_prefix")

    @property
    @pulumi.getter(name="softwareImageId")
    def software_image_id(self) -> Optional[str]:
        return pulumi.get(self, "software_image_id")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class FsuCycleNextActionToExecute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "timeToStart":
            suggest = "time_to_start"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FsuCycleNextActionToExecute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FsuCycleNextActionToExecute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FsuCycleNextActionToExecute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 time_to_start: Optional[str] = None,
                 type: Optional[str] = None):
        if time_to_start is not None:
            pulumi.set(__self__, "time_to_start", time_to_start)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="timeToStart")
    def time_to_start(self) -> Optional[str]:
        return pulumi.get(self, "time_to_start")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class FsuCycleStageActionSchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "timeToStart":
            suggest = "time_to_start"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FsuCycleStageActionSchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FsuCycleStageActionSchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FsuCycleStageActionSchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 time_to_start: str,
                 type: str):
        pulumi.set(__self__, "time_to_start", time_to_start)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="timeToStart")
    def time_to_start(self) -> str:
        return pulumi.get(self, "time_to_start")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetFsuCollectionActiveFsuCycleResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 id: str):
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetFsuCollectionFleetDiscoveryResult(dict):
    def __init__(__self__, *,
                 filters: Sequence['outputs.GetFsuCollectionFleetDiscoveryFilterResult'],
                 fsu_discovery_id: str,
                 query: str,
                 strategy: str,
                 targets: Sequence[str]):
        pulumi.set(__self__, "filters", filters)
        pulumi.set(__self__, "fsu_discovery_id", fsu_discovery_id)
        pulumi.set(__self__, "query", query)
        pulumi.set(__self__, "strategy", strategy)
        pulumi.set(__self__, "targets", targets)

    @property
    @pulumi.getter
    def filters(self) -> Sequence['outputs.GetFsuCollectionFleetDiscoveryFilterResult']:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter(name="fsuDiscoveryId")
    def fsu_discovery_id(self) -> str:
        return pulumi.get(self, "fsu_discovery_id")

    @property
    @pulumi.getter
    def query(self) -> str:
        return pulumi.get(self, "query")

    @property
    @pulumi.getter
    def strategy(self) -> str:
        return pulumi.get(self, "strategy")

    @property
    @pulumi.getter
    def targets(self) -> Sequence[str]:
        return pulumi.get(self, "targets")


@pulumi.output_type
class GetFsuCollectionFleetDiscoveryFilterResult(dict):
    def __init__(__self__, *,
                 entity_type: str,
                 identifiers: Sequence[str],
                 mode: str,
                 names: Sequence[str],
                 operator: str,
                 tags: Sequence['outputs.GetFsuCollectionFleetDiscoveryFilterTagResult'],
                 type: str,
                 versions: Sequence[str]):
        pulumi.set(__self__, "entity_type", entity_type)
        pulumi.set(__self__, "identifiers", identifiers)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "names", names)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "versions", versions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter
    def identifiers(self) -> Sequence[str]:
        return pulumi.get(self, "identifiers")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def names(self) -> Sequence[str]:
        return pulumi.get(self, "names")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetFsuCollectionFleetDiscoveryFilterTagResult']:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def versions(self) -> Sequence[str]:
        return pulumi.get(self, "versions")


@pulumi.output_type
class GetFsuCollectionFleetDiscoveryFilterTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 namespace: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetFsuCollectionsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetFsuCollectionsFsuCollectionSummaryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetFsuCollectionsFsuCollectionSummaryCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetFsuCollectionsFsuCollectionSummaryCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetFsuCollectionsFsuCollectionSummaryCollectionItemResult(dict):
    def __init__(__self__, *,
                 active_fsu_cycles: Sequence['outputs.GetFsuCollectionsFsuCollectionSummaryCollectionItemActiveFsuCycleResult'],
                 compartment_id: str,
                 defined_tags: Mapping[str, str],
                 display_name: str,
                 fleet_discoveries: Sequence['outputs.GetFsuCollectionsFsuCollectionSummaryCollectionItemFleetDiscoveryResult'],
                 freeform_tags: Mapping[str, str],
                 id: str,
                 lifecycle_details: str,
                 service_type: str,
                 source_major_version: str,
                 state: str,
                 system_tags: Mapping[str, str],
                 target_count: int,
                 time_created: str,
                 time_updated: str,
                 type: str):
        pulumi.set(__self__, "active_fsu_cycles", active_fsu_cycles)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "fleet_discoveries", fleet_discoveries)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "service_type", service_type)
        pulumi.set(__self__, "source_major_version", source_major_version)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "target_count", target_count)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="activeFsuCycles")
    def active_fsu_cycles(self) -> Sequence['outputs.GetFsuCollectionsFsuCollectionSummaryCollectionItemActiveFsuCycleResult']:
        return pulumi.get(self, "active_fsu_cycles")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, str]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="fleetDiscoveries")
    def fleet_discoveries(self) -> Sequence['outputs.GetFsuCollectionsFsuCollectionSummaryCollectionItemFleetDiscoveryResult']:
        return pulumi.get(self, "fleet_discoveries")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, str]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> str:
        return pulumi.get(self, "service_type")

    @property
    @pulumi.getter(name="sourceMajorVersion")
    def source_major_version(self) -> str:
        return pulumi.get(self, "source_major_version")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, str]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="targetCount")
    def target_count(self) -> int:
        return pulumi.get(self, "target_count")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetFsuCollectionsFsuCollectionSummaryCollectionItemActiveFsuCycleResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 id: str):
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetFsuCollectionsFsuCollectionSummaryCollectionItemFleetDiscoveryResult(dict):
    def __init__(__self__, *,
                 filters: Sequence['outputs.GetFsuCollectionsFsuCollectionSummaryCollectionItemFleetDiscoveryFilterResult'],
                 fsu_discovery_id: str,
                 query: str,
                 strategy: str,
                 targets: Sequence[str]):
        pulumi.set(__self__, "filters", filters)
        pulumi.set(__self__, "fsu_discovery_id", fsu_discovery_id)
        pulumi.set(__self__, "query", query)
        pulumi.set(__self__, "strategy", strategy)
        pulumi.set(__self__, "targets", targets)

    @property
    @pulumi.getter
    def filters(self) -> Sequence['outputs.GetFsuCollectionsFsuCollectionSummaryCollectionItemFleetDiscoveryFilterResult']:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter(name="fsuDiscoveryId")
    def fsu_discovery_id(self) -> str:
        return pulumi.get(self, "fsu_discovery_id")

    @property
    @pulumi.getter
    def query(self) -> str:
        return pulumi.get(self, "query")

    @property
    @pulumi.getter
    def strategy(self) -> str:
        return pulumi.get(self, "strategy")

    @property
    @pulumi.getter
    def targets(self) -> Sequence[str]:
        return pulumi.get(self, "targets")


@pulumi.output_type
class GetFsuCollectionsFsuCollectionSummaryCollectionItemFleetDiscoveryFilterResult(dict):
    def __init__(__self__, *,
                 entity_type: str,
                 identifiers: Sequence[str],
                 mode: str,
                 names: Sequence[str],
                 operator: str,
                 tags: Sequence['outputs.GetFsuCollectionsFsuCollectionSummaryCollectionItemFleetDiscoveryFilterTagResult'],
                 type: str,
                 versions: Sequence[str]):
        pulumi.set(__self__, "entity_type", entity_type)
        pulumi.set(__self__, "identifiers", identifiers)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "names", names)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "versions", versions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter
    def identifiers(self) -> Sequence[str]:
        return pulumi.get(self, "identifiers")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def names(self) -> Sequence[str]:
        return pulumi.get(self, "names")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetFsuCollectionsFsuCollectionSummaryCollectionItemFleetDiscoveryFilterTagResult']:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def versions(self) -> Sequence[str]:
        return pulumi.get(self, "versions")


@pulumi.output_type
class GetFsuCollectionsFsuCollectionSummaryCollectionItemFleetDiscoveryFilterTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 namespace: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetFsuCycleApplyActionScheduleResult(dict):
    def __init__(__self__, *,
                 time_to_start: str,
                 type: str):
        pulumi.set(__self__, "time_to_start", time_to_start)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="timeToStart")
    def time_to_start(self) -> str:
        return pulumi.get(self, "time_to_start")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetFsuCycleBatchingStrategyResult(dict):
    def __init__(__self__, *,
                 is_force_rolling: bool,
                 is_wait_for_batch_resume: bool,
                 percentage: int,
                 type: str):
        pulumi.set(__self__, "is_force_rolling", is_force_rolling)
        pulumi.set(__self__, "is_wait_for_batch_resume", is_wait_for_batch_resume)
        pulumi.set(__self__, "percentage", percentage)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="isForceRolling")
    def is_force_rolling(self) -> bool:
        return pulumi.get(self, "is_force_rolling")

    @property
    @pulumi.getter(name="isWaitForBatchResume")
    def is_wait_for_batch_resume(self) -> bool:
        return pulumi.get(self, "is_wait_for_batch_resume")

    @property
    @pulumi.getter
    def percentage(self) -> int:
        return pulumi.get(self, "percentage")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetFsuCycleDiagnosticsCollectionResult(dict):
    def __init__(__self__, *,
                 log_collection_mode: str):
        pulumi.set(__self__, "log_collection_mode", log_collection_mode)

    @property
    @pulumi.getter(name="logCollectionMode")
    def log_collection_mode(self) -> str:
        return pulumi.get(self, "log_collection_mode")


@pulumi.output_type
class GetFsuCycleGoalVersionDetailResult(dict):
    def __init__(__self__, *,
                 home_policy: str,
                 new_home_prefix: str,
                 software_image_id: str,
                 type: str,
                 version: str):
        pulumi.set(__self__, "home_policy", home_policy)
        pulumi.set(__self__, "new_home_prefix", new_home_prefix)
        pulumi.set(__self__, "software_image_id", software_image_id)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="homePolicy")
    def home_policy(self) -> str:
        return pulumi.get(self, "home_policy")

    @property
    @pulumi.getter(name="newHomePrefix")
    def new_home_prefix(self) -> str:
        return pulumi.get(self, "new_home_prefix")

    @property
    @pulumi.getter(name="softwareImageId")
    def software_image_id(self) -> str:
        return pulumi.get(self, "software_image_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetFsuCycleNextActionToExecuteResult(dict):
    def __init__(__self__, *,
                 time_to_start: str,
                 type: str):
        pulumi.set(__self__, "time_to_start", time_to_start)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="timeToStart")
    def time_to_start(self) -> str:
        return pulumi.get(self, "time_to_start")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetFsuCycleStageActionScheduleResult(dict):
    def __init__(__self__, *,
                 time_to_start: str,
                 type: str):
        pulumi.set(__self__, "time_to_start", time_to_start)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="timeToStart")
    def time_to_start(self) -> str:
        return pulumi.get(self, "time_to_start")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetFsuCyclesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetFsuCyclesFsuCycleSummaryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetFsuCyclesFsuCycleSummaryCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetFsuCyclesFsuCycleSummaryCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetFsuCyclesFsuCycleSummaryCollectionItemResult(dict):
    def __init__(__self__, *,
                 apply_action_schedules: Sequence['outputs.GetFsuCyclesFsuCycleSummaryCollectionItemApplyActionScheduleResult'],
                 batching_strategies: Sequence['outputs.GetFsuCyclesFsuCycleSummaryCollectionItemBatchingStrategyResult'],
                 collection_type: str,
                 compartment_id: str,
                 defined_tags: Mapping[str, str],
                 diagnostics_collections: Sequence['outputs.GetFsuCyclesFsuCycleSummaryCollectionItemDiagnosticsCollectionResult'],
                 display_name: str,
                 executing_fsu_action_id: str,
                 freeform_tags: Mapping[str, str],
                 fsu_collection_id: str,
                 goal_version_details: Sequence['outputs.GetFsuCyclesFsuCycleSummaryCollectionItemGoalVersionDetailResult'],
                 id: str,
                 is_ignore_missing_patches: Sequence[str],
                 is_ignore_patches: bool,
                 is_keep_placement: bool,
                 last_completed_action: str,
                 lifecycle_details: str,
                 max_drain_timeout_in_seconds: int,
                 next_action_to_executes: Sequence['outputs.GetFsuCyclesFsuCycleSummaryCollectionItemNextActionToExecuteResult'],
                 stage_action_schedules: Sequence['outputs.GetFsuCyclesFsuCycleSummaryCollectionItemStageActionScheduleResult'],
                 state: str,
                 system_tags: Mapping[str, str],
                 time_created: str,
                 time_finished: str,
                 time_updated: str,
                 type: str):
        pulumi.set(__self__, "apply_action_schedules", apply_action_schedules)
        pulumi.set(__self__, "batching_strategies", batching_strategies)
        pulumi.set(__self__, "collection_type", collection_type)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "diagnostics_collections", diagnostics_collections)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "executing_fsu_action_id", executing_fsu_action_id)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "fsu_collection_id", fsu_collection_id)
        pulumi.set(__self__, "goal_version_details", goal_version_details)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_ignore_missing_patches", is_ignore_missing_patches)
        pulumi.set(__self__, "is_ignore_patches", is_ignore_patches)
        pulumi.set(__self__, "is_keep_placement", is_keep_placement)
        pulumi.set(__self__, "last_completed_action", last_completed_action)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "max_drain_timeout_in_seconds", max_drain_timeout_in_seconds)
        pulumi.set(__self__, "next_action_to_executes", next_action_to_executes)
        pulumi.set(__self__, "stage_action_schedules", stage_action_schedules)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_finished", time_finished)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="applyActionSchedules")
    def apply_action_schedules(self) -> Sequence['outputs.GetFsuCyclesFsuCycleSummaryCollectionItemApplyActionScheduleResult']:
        return pulumi.get(self, "apply_action_schedules")

    @property
    @pulumi.getter(name="batchingStrategies")
    def batching_strategies(self) -> Sequence['outputs.GetFsuCyclesFsuCycleSummaryCollectionItemBatchingStrategyResult']:
        return pulumi.get(self, "batching_strategies")

    @property
    @pulumi.getter(name="collectionType")
    def collection_type(self) -> str:
        return pulumi.get(self, "collection_type")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, str]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="diagnosticsCollections")
    def diagnostics_collections(self) -> Sequence['outputs.GetFsuCyclesFsuCycleSummaryCollectionItemDiagnosticsCollectionResult']:
        return pulumi.get(self, "diagnostics_collections")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="executingFsuActionId")
    def executing_fsu_action_id(self) -> str:
        return pulumi.get(self, "executing_fsu_action_id")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, str]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="fsuCollectionId")
    def fsu_collection_id(self) -> str:
        return pulumi.get(self, "fsu_collection_id")

    @property
    @pulumi.getter(name="goalVersionDetails")
    def goal_version_details(self) -> Sequence['outputs.GetFsuCyclesFsuCycleSummaryCollectionItemGoalVersionDetailResult']:
        return pulumi.get(self, "goal_version_details")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isIgnoreMissingPatches")
    def is_ignore_missing_patches(self) -> Sequence[str]:
        return pulumi.get(self, "is_ignore_missing_patches")

    @property
    @pulumi.getter(name="isIgnorePatches")
    def is_ignore_patches(self) -> bool:
        return pulumi.get(self, "is_ignore_patches")

    @property
    @pulumi.getter(name="isKeepPlacement")
    def is_keep_placement(self) -> bool:
        return pulumi.get(self, "is_keep_placement")

    @property
    @pulumi.getter(name="lastCompletedAction")
    def last_completed_action(self) -> str:
        return pulumi.get(self, "last_completed_action")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="maxDrainTimeoutInSeconds")
    def max_drain_timeout_in_seconds(self) -> int:
        return pulumi.get(self, "max_drain_timeout_in_seconds")

    @property
    @pulumi.getter(name="nextActionToExecutes")
    def next_action_to_executes(self) -> Sequence['outputs.GetFsuCyclesFsuCycleSummaryCollectionItemNextActionToExecuteResult']:
        return pulumi.get(self, "next_action_to_executes")

    @property
    @pulumi.getter(name="stageActionSchedules")
    def stage_action_schedules(self) -> Sequence['outputs.GetFsuCyclesFsuCycleSummaryCollectionItemStageActionScheduleResult']:
        return pulumi.get(self, "stage_action_schedules")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, str]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeFinished")
    def time_finished(self) -> str:
        return pulumi.get(self, "time_finished")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetFsuCyclesFsuCycleSummaryCollectionItemApplyActionScheduleResult(dict):
    def __init__(__self__, *,
                 time_to_start: str,
                 type: str):
        pulumi.set(__self__, "time_to_start", time_to_start)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="timeToStart")
    def time_to_start(self) -> str:
        return pulumi.get(self, "time_to_start")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetFsuCyclesFsuCycleSummaryCollectionItemBatchingStrategyResult(dict):
    def __init__(__self__, *,
                 is_force_rolling: bool,
                 is_wait_for_batch_resume: bool,
                 percentage: int,
                 type: str):
        pulumi.set(__self__, "is_force_rolling", is_force_rolling)
        pulumi.set(__self__, "is_wait_for_batch_resume", is_wait_for_batch_resume)
        pulumi.set(__self__, "percentage", percentage)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="isForceRolling")
    def is_force_rolling(self) -> bool:
        return pulumi.get(self, "is_force_rolling")

    @property
    @pulumi.getter(name="isWaitForBatchResume")
    def is_wait_for_batch_resume(self) -> bool:
        return pulumi.get(self, "is_wait_for_batch_resume")

    @property
    @pulumi.getter
    def percentage(self) -> int:
        return pulumi.get(self, "percentage")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetFsuCyclesFsuCycleSummaryCollectionItemDiagnosticsCollectionResult(dict):
    def __init__(__self__, *,
                 log_collection_mode: str):
        pulumi.set(__self__, "log_collection_mode", log_collection_mode)

    @property
    @pulumi.getter(name="logCollectionMode")
    def log_collection_mode(self) -> str:
        return pulumi.get(self, "log_collection_mode")


@pulumi.output_type
class GetFsuCyclesFsuCycleSummaryCollectionItemGoalVersionDetailResult(dict):
    def __init__(__self__, *,
                 home_policy: str,
                 new_home_prefix: str,
                 software_image_id: str,
                 type: str,
                 version: str):
        pulumi.set(__self__, "home_policy", home_policy)
        pulumi.set(__self__, "new_home_prefix", new_home_prefix)
        pulumi.set(__self__, "software_image_id", software_image_id)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="homePolicy")
    def home_policy(self) -> str:
        return pulumi.get(self, "home_policy")

    @property
    @pulumi.getter(name="newHomePrefix")
    def new_home_prefix(self) -> str:
        return pulumi.get(self, "new_home_prefix")

    @property
    @pulumi.getter(name="softwareImageId")
    def software_image_id(self) -> str:
        return pulumi.get(self, "software_image_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetFsuCyclesFsuCycleSummaryCollectionItemNextActionToExecuteResult(dict):
    def __init__(__self__, *,
                 time_to_start: str,
                 type: str):
        pulumi.set(__self__, "time_to_start", time_to_start)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="timeToStart")
    def time_to_start(self) -> str:
        return pulumi.get(self, "time_to_start")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetFsuCyclesFsuCycleSummaryCollectionItemStageActionScheduleResult(dict):
    def __init__(__self__, *,
                 time_to_start: str,
                 type: str):
        pulumi.set(__self__, "time_to_start", time_to_start)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="timeToStart")
    def time_to_start(self) -> str:
        return pulumi.get(self, "time_to_start")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


