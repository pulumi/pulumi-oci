# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ApplicationImagePolicyConfig',
    'ApplicationImagePolicyConfigKeyDetail',
    'ApplicationTraceConfig',
    'FunctionProvisionedConcurrencyConfig',
    'FunctionSourceDetails',
    'FunctionTraceConfig',
    'GetApplicationImagePolicyConfigResult',
    'GetApplicationImagePolicyConfigKeyDetailResult',
    'GetApplicationTraceConfigResult',
    'GetApplicationsApplicationResult',
    'GetApplicationsApplicationImagePolicyConfigResult',
    'GetApplicationsApplicationImagePolicyConfigKeyDetailResult',
    'GetApplicationsApplicationTraceConfigResult',
    'GetApplicationsFilterResult',
    'GetFunctionProvisionedConcurrencyConfigResult',
    'GetFunctionSourceDetailResult',
    'GetFunctionTraceConfigResult',
    'GetFunctionsFilterResult',
    'GetFunctionsFunctionResult',
    'GetFunctionsFunctionProvisionedConcurrencyConfigResult',
    'GetFunctionsFunctionSourceDetailResult',
    'GetFunctionsFunctionTraceConfigResult',
    'GetFusionEnvironmentAdminUserItemResult',
    'GetFusionEnvironmentAdminUsersAdminUserCollectionResult',
    'GetFusionEnvironmentAdminUsersAdminUserCollectionItemResult',
    'GetFusionEnvironmentAdminUsersAdminUserCollectionItemItemResult',
    'GetFusionEnvironmentAdminUsersFilterResult',
    'GetFusionEnvironmentCreateFusionEnvironmentAdminUserDetailResult',
    'GetFusionEnvironmentDataMaskingActivitiesDataMaskingActivityCollectionResult',
    'GetFusionEnvironmentDataMaskingActivitiesDataMaskingActivityCollectionItemResult',
    'GetFusionEnvironmentDataMaskingActivitiesFilterResult',
    'GetFusionEnvironmentFamiliesFilterResult',
    'GetFusionEnvironmentFamiliesFusionEnvironmentFamilyCollectionResult',
    'GetFusionEnvironmentFamiliesFusionEnvironmentFamilyCollectionItemResult',
    'GetFusionEnvironmentFamiliesFusionEnvironmentFamilyCollectionItemFamilyMaintenancePolicyResult',
    'GetFusionEnvironmentFamilyFamilyMaintenancePolicyResult',
    'GetFusionEnvironmentFamilyLimitsAndUsageDevelopmentLimitAndUsageResult',
    'GetFusionEnvironmentFamilyLimitsAndUsageProductionLimitAndUsageResult',
    'GetFusionEnvironmentFamilyLimitsAndUsageTestLimitAndUsageResult',
    'GetFusionEnvironmentFamilySubscriptionDetailSubscriptionResult',
    'GetFusionEnvironmentFamilySubscriptionDetailSubscriptionSkusResult',
    'GetFusionEnvironmentKmsKeyInfoResult',
    'GetFusionEnvironmentMaintenancePolicyResult',
    'GetFusionEnvironmentMaintenancePolicyQuarterlyUpgradeBeginTimeResult',
    'GetFusionEnvironmentRefreshResult',
    'GetFusionEnvironmentRefreshActivitiesFilterResult',
    'GetFusionEnvironmentRefreshActivitiesRefreshActivityCollectionResult',
    'GetFusionEnvironmentRefreshActivitiesRefreshActivityCollectionItemResult',
    'GetFusionEnvironmentRefreshActivitiesRefreshActivityCollectionItemRefreshIssueDetailsListResult',
    'GetFusionEnvironmentRefreshActivityRefreshIssueDetailsListResult',
    'GetFusionEnvironmentRuleResult',
    'GetFusionEnvironmentRuleConditionResult',
    'GetFusionEnvironmentScheduledActivitiesFilterResult',
    'GetFusionEnvironmentScheduledActivitiesScheduledActivityCollectionResult',
    'GetFusionEnvironmentScheduledActivitiesScheduledActivityCollectionItemResult',
    'GetFusionEnvironmentScheduledActivitiesScheduledActivityCollectionItemActionResult',
    'GetFusionEnvironmentScheduledActivityActionResult',
    'GetFusionEnvironmentServiceAttachmentsFilterResult',
    'GetFusionEnvironmentServiceAttachmentsServiceAttachmentCollectionResult',
    'GetFusionEnvironmentServiceAttachmentsServiceAttachmentCollectionItemResult',
    'GetFusionEnvironmentTimeAvailableForRefreshItemResult',
    'GetFusionEnvironmentTimeAvailableForRefreshsFilterResult',
    'GetFusionEnvironmentTimeAvailableForRefreshsTimeAvailableForRefreshCollectionResult',
    'GetFusionEnvironmentTimeAvailableForRefreshsTimeAvailableForRefreshCollectionItemResult',
    'GetFusionEnvironmentsFilterResult',
    'GetFusionEnvironmentsFusionEnvironmentCollectionResult',
    'GetFusionEnvironmentsFusionEnvironmentCollectionItemResult',
    'GetFusionEnvironmentsFusionEnvironmentCollectionItemCreateFusionEnvironmentAdminUserDetailResult',
    'GetFusionEnvironmentsFusionEnvironmentCollectionItemKmsKeyInfoResult',
    'GetFusionEnvironmentsFusionEnvironmentCollectionItemMaintenancePolicyResult',
    'GetFusionEnvironmentsFusionEnvironmentCollectionItemMaintenancePolicyQuarterlyUpgradeBeginTimeResult',
    'GetFusionEnvironmentsFusionEnvironmentCollectionItemRefreshResult',
    'GetFusionEnvironmentsFusionEnvironmentCollectionItemRuleResult',
    'GetFusionEnvironmentsFusionEnvironmentCollectionItemRuleConditionResult',
    'GetPbfListingPublisherDetailResult',
    'GetPbfListingTriggerResult',
    'GetPbfListingTriggersFilterResult',
    'GetPbfListingTriggersTriggersCollectionResult',
    'GetPbfListingTriggersTriggersCollectionItemResult',
    'GetPbfListingVersionConfigResult',
    'GetPbfListingVersionRequirementResult',
    'GetPbfListingVersionRequirementPolicyResult',
    'GetPbfListingVersionTriggerResult',
    'GetPbfListingVersionsFilterResult',
    'GetPbfListingVersionsPbfListingVersionsCollectionResult',
    'GetPbfListingVersionsPbfListingVersionsCollectionItemResult',
    'GetPbfListingVersionsPbfListingVersionsCollectionItemConfigResult',
    'GetPbfListingVersionsPbfListingVersionsCollectionItemRequirementResult',
    'GetPbfListingVersionsPbfListingVersionsCollectionItemRequirementPolicyResult',
    'GetPbfListingVersionsPbfListingVersionsCollectionItemTriggerResult',
    'GetPbfListingsFilterResult',
    'GetPbfListingsPbfListingsCollectionResult',
    'GetPbfListingsPbfListingsCollectionItemResult',
    'GetPbfListingsPbfListingsCollectionItemPublisherDetailResult',
    'GetPbfListingsPbfListingsCollectionItemTriggerResult',
]

@pulumi.output_type
class ApplicationImagePolicyConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isPolicyEnabled":
            suggest = "is_policy_enabled"
        elif key == "keyDetails":
            suggest = "key_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationImagePolicyConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationImagePolicyConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationImagePolicyConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_policy_enabled: bool,
                 key_details: Optional[Sequence['outputs.ApplicationImagePolicyConfigKeyDetail']] = None):
        pulumi.set(__self__, "is_policy_enabled", is_policy_enabled)
        if key_details is not None:
            pulumi.set(__self__, "key_details", key_details)

    @property
    @pulumi.getter(name="isPolicyEnabled")
    def is_policy_enabled(self) -> bool:
        return pulumi.get(self, "is_policy_enabled")

    @property
    @pulumi.getter(name="keyDetails")
    def key_details(self) -> Optional[Sequence['outputs.ApplicationImagePolicyConfigKeyDetail']]:
        return pulumi.get(self, "key_details")


@pulumi.output_type
class ApplicationImagePolicyConfigKeyDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "kmsKeyId":
            suggest = "kms_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationImagePolicyConfigKeyDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationImagePolicyConfigKeyDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationImagePolicyConfigKeyDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kms_key_id: str):
        pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> str:
        return pulumi.get(self, "kms_key_id")


@pulumi.output_type
class ApplicationTraceConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "domainId":
            suggest = "domain_id"
        elif key == "isEnabled":
            suggest = "is_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationTraceConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationTraceConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationTraceConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 domain_id: Optional[str] = None,
                 is_enabled: Optional[bool] = None):
        if domain_id is not None:
            pulumi.set(__self__, "domain_id", domain_id)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)

    @property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> Optional[str]:
        return pulumi.get(self, "domain_id")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")


@pulumi.output_type
class FunctionProvisionedConcurrencyConfig(dict):
    def __init__(__self__, *,
                 strategy: str,
                 count: Optional[int] = None):
        pulumi.set(__self__, "strategy", strategy)
        if count is not None:
            pulumi.set(__self__, "count", count)

    @property
    @pulumi.getter
    def strategy(self) -> str:
        return pulumi.get(self, "strategy")

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        return pulumi.get(self, "count")


@pulumi.output_type
class FunctionSourceDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pbfListingId":
            suggest = "pbf_listing_id"
        elif key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionSourceDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionSourceDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionSourceDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 pbf_listing_id: str,
                 source_type: str):
        pulumi.set(__self__, "pbf_listing_id", pbf_listing_id)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="pbfListingId")
    def pbf_listing_id(self) -> str:
        return pulumi.get(self, "pbf_listing_id")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class FunctionTraceConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isEnabled":
            suggest = "is_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionTraceConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionTraceConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionTraceConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_enabled: Optional[bool] = None):
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")


@pulumi.output_type
class GetApplicationImagePolicyConfigResult(dict):
    def __init__(__self__, *,
                 is_policy_enabled: Optional[bool] = None,
                 key_details: Optional[Sequence['outputs.GetApplicationImagePolicyConfigKeyDetailResult']] = None):
        if is_policy_enabled is not None:
            pulumi.set(__self__, "is_policy_enabled", is_policy_enabled)
        if key_details is not None:
            pulumi.set(__self__, "key_details", key_details)

    @property
    @pulumi.getter(name="isPolicyEnabled")
    def is_policy_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_policy_enabled")

    @property
    @pulumi.getter(name="keyDetails")
    def key_details(self) -> Optional[Sequence['outputs.GetApplicationImagePolicyConfigKeyDetailResult']]:
        return pulumi.get(self, "key_details")


@pulumi.output_type
class GetApplicationImagePolicyConfigKeyDetailResult(dict):
    def __init__(__self__, *,
                 kms_key_id: Optional[str] = None):
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        return pulumi.get(self, "kms_key_id")


@pulumi.output_type
class GetApplicationTraceConfigResult(dict):
    def __init__(__self__, *,
                 domain_id: Optional[str] = None,
                 is_enabled: Optional[bool] = None):
        if domain_id is not None:
            pulumi.set(__self__, "domain_id", domain_id)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)

    @property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> Optional[str]:
        return pulumi.get(self, "domain_id")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")


@pulumi.output_type
class GetApplicationsApplicationResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 config: Optional[Mapping[str, Any]] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 image_policy_configs: Optional[Sequence['outputs.GetApplicationsApplicationImagePolicyConfigResult']] = None,
                 network_security_group_ids: Optional[Sequence[str]] = None,
                 shape: Optional[str] = None,
                 state: Optional[str] = None,
                 subnet_ids: Optional[Sequence[str]] = None,
                 syslog_url: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 trace_configs: Optional[Sequence['outputs.GetApplicationsApplicationTraceConfigResult']] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if config is not None:
            pulumi.set(__self__, "config", config)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if image_policy_configs is not None:
            pulumi.set(__self__, "image_policy_configs", image_policy_configs)
        if network_security_group_ids is not None:
            pulumi.set(__self__, "network_security_group_ids", network_security_group_ids)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if subnet_ids is not None:
            pulumi.set(__self__, "subnet_ids", subnet_ids)
        if syslog_url is not None:
            pulumi.set(__self__, "syslog_url", syslog_url)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if trace_configs is not None:
            pulumi.set(__self__, "trace_configs", trace_configs)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def config(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="imagePolicyConfigs")
    def image_policy_configs(self) -> Optional[Sequence['outputs.GetApplicationsApplicationImagePolicyConfigResult']]:
        return pulumi.get(self, "image_policy_configs")

    @property
    @pulumi.getter(name="networkSecurityGroupIds")
    def network_security_group_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "network_security_group_ids")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "subnet_ids")

    @property
    @pulumi.getter(name="syslogUrl")
    def syslog_url(self) -> Optional[str]:
        return pulumi.get(self, "syslog_url")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="traceConfigs")
    def trace_configs(self) -> Optional[Sequence['outputs.GetApplicationsApplicationTraceConfigResult']]:
        return pulumi.get(self, "trace_configs")


@pulumi.output_type
class GetApplicationsApplicationImagePolicyConfigResult(dict):
    def __init__(__self__, *,
                 is_policy_enabled: Optional[bool] = None,
                 key_details: Optional[Sequence['outputs.GetApplicationsApplicationImagePolicyConfigKeyDetailResult']] = None):
        if is_policy_enabled is not None:
            pulumi.set(__self__, "is_policy_enabled", is_policy_enabled)
        if key_details is not None:
            pulumi.set(__self__, "key_details", key_details)

    @property
    @pulumi.getter(name="isPolicyEnabled")
    def is_policy_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_policy_enabled")

    @property
    @pulumi.getter(name="keyDetails")
    def key_details(self) -> Optional[Sequence['outputs.GetApplicationsApplicationImagePolicyConfigKeyDetailResult']]:
        return pulumi.get(self, "key_details")


@pulumi.output_type
class GetApplicationsApplicationImagePolicyConfigKeyDetailResult(dict):
    def __init__(__self__, *,
                 kms_key_id: Optional[str] = None):
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        return pulumi.get(self, "kms_key_id")


@pulumi.output_type
class GetApplicationsApplicationTraceConfigResult(dict):
    def __init__(__self__, *,
                 domain_id: Optional[str] = None,
                 is_enabled: Optional[bool] = None):
        if domain_id is not None:
            pulumi.set(__self__, "domain_id", domain_id)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)

    @property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> Optional[str]:
        return pulumi.get(self, "domain_id")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")


@pulumi.output_type
class GetApplicationsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetFunctionProvisionedConcurrencyConfigResult(dict):
    def __init__(__self__, *,
                 count: Optional[int] = None,
                 strategy: Optional[str] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)
        if strategy is not None:
            pulumi.set(__self__, "strategy", strategy)

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def strategy(self) -> Optional[str]:
        return pulumi.get(self, "strategy")


@pulumi.output_type
class GetFunctionSourceDetailResult(dict):
    def __init__(__self__, *,
                 pbf_listing_id: Optional[str] = None,
                 source_type: Optional[str] = None):
        if pbf_listing_id is not None:
            pulumi.set(__self__, "pbf_listing_id", pbf_listing_id)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="pbfListingId")
    def pbf_listing_id(self) -> Optional[str]:
        return pulumi.get(self, "pbf_listing_id")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetFunctionTraceConfigResult(dict):
    def __init__(__self__, *,
                 is_enabled: Optional[bool] = None):
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")


@pulumi.output_type
class GetFunctionsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetFunctionsFunctionResult(dict):
    def __init__(__self__, *,
                 application_id: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 config: Optional[Mapping[str, Any]] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 image: Optional[str] = None,
                 image_digest: Optional[str] = None,
                 invoke_endpoint: Optional[str] = None,
                 memory_in_mbs: Optional[str] = None,
                 provisioned_concurrency_configs: Optional[Sequence['outputs.GetFunctionsFunctionProvisionedConcurrencyConfigResult']] = None,
                 shape: Optional[str] = None,
                 source_details: Optional[Sequence['outputs.GetFunctionsFunctionSourceDetailResult']] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 timeout_in_seconds: Optional[int] = None,
                 trace_configs: Optional[Sequence['outputs.GetFunctionsFunctionTraceConfigResult']] = None):
        if application_id is not None:
            pulumi.set(__self__, "application_id", application_id)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if config is not None:
            pulumi.set(__self__, "config", config)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if image_digest is not None:
            pulumi.set(__self__, "image_digest", image_digest)
        if invoke_endpoint is not None:
            pulumi.set(__self__, "invoke_endpoint", invoke_endpoint)
        if memory_in_mbs is not None:
            pulumi.set(__self__, "memory_in_mbs", memory_in_mbs)
        if provisioned_concurrency_configs is not None:
            pulumi.set(__self__, "provisioned_concurrency_configs", provisioned_concurrency_configs)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if source_details is not None:
            pulumi.set(__self__, "source_details", source_details)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if timeout_in_seconds is not None:
            pulumi.set(__self__, "timeout_in_seconds", timeout_in_seconds)
        if trace_configs is not None:
            pulumi.set(__self__, "trace_configs", trace_configs)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> Optional[str]:
        return pulumi.get(self, "application_id")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def config(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="imageDigest")
    def image_digest(self) -> Optional[str]:
        return pulumi.get(self, "image_digest")

    @property
    @pulumi.getter(name="invokeEndpoint")
    def invoke_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "invoke_endpoint")

    @property
    @pulumi.getter(name="memoryInMbs")
    def memory_in_mbs(self) -> Optional[str]:
        return pulumi.get(self, "memory_in_mbs")

    @property
    @pulumi.getter(name="provisionedConcurrencyConfigs")
    def provisioned_concurrency_configs(self) -> Optional[Sequence['outputs.GetFunctionsFunctionProvisionedConcurrencyConfigResult']]:
        return pulumi.get(self, "provisioned_concurrency_configs")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="sourceDetails")
    def source_details(self) -> Optional[Sequence['outputs.GetFunctionsFunctionSourceDetailResult']]:
        return pulumi.get(self, "source_details")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="timeoutInSeconds")
    def timeout_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_in_seconds")

    @property
    @pulumi.getter(name="traceConfigs")
    def trace_configs(self) -> Optional[Sequence['outputs.GetFunctionsFunctionTraceConfigResult']]:
        return pulumi.get(self, "trace_configs")


@pulumi.output_type
class GetFunctionsFunctionProvisionedConcurrencyConfigResult(dict):
    def __init__(__self__, *,
                 count: Optional[int] = None,
                 strategy: Optional[str] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)
        if strategy is not None:
            pulumi.set(__self__, "strategy", strategy)

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def strategy(self) -> Optional[str]:
        return pulumi.get(self, "strategy")


@pulumi.output_type
class GetFunctionsFunctionSourceDetailResult(dict):
    def __init__(__self__, *,
                 pbf_listing_id: Optional[str] = None,
                 source_type: Optional[str] = None):
        if pbf_listing_id is not None:
            pulumi.set(__self__, "pbf_listing_id", pbf_listing_id)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="pbfListingId")
    def pbf_listing_id(self) -> Optional[str]:
        return pulumi.get(self, "pbf_listing_id")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetFunctionsFunctionTraceConfigResult(dict):
    def __init__(__self__, *,
                 is_enabled: Optional[bool] = None):
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")


@pulumi.output_type
class GetFusionEnvironmentAdminUserItemResult(dict):
    def __init__(__self__, *,
                 email_address: Optional[str] = None,
                 first_name: Optional[str] = None,
                 last_name: Optional[str] = None,
                 username: Optional[str] = None):
        if email_address is not None:
            pulumi.set(__self__, "email_address", email_address)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="emailAddress")
    def email_address(self) -> Optional[str]:
        return pulumi.get(self, "email_address")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[str]:
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[str]:
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetFusionEnvironmentAdminUsersAdminUserCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetFusionEnvironmentAdminUsersAdminUserCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetFusionEnvironmentAdminUsersAdminUserCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetFusionEnvironmentAdminUsersAdminUserCollectionItemResult(dict):
    def __init__(__self__, *,
                 email_address: Optional[str] = None,
                 first_name: Optional[str] = None,
                 fusion_environment_id: Optional[str] = None,
                 id: Optional[str] = None,
                 items: Optional[Sequence['outputs.GetFusionEnvironmentAdminUsersAdminUserCollectionItemItemResult']] = None,
                 last_name: Optional[str] = None,
                 password: Optional[str] = None,
                 username: Optional[str] = None):
        if email_address is not None:
            pulumi.set(__self__, "email_address", email_address)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if fusion_environment_id is not None:
            pulumi.set(__self__, "fusion_environment_id", fusion_environment_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="emailAddress")
    def email_address(self) -> Optional[str]:
        return pulumi.get(self, "email_address")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[str]:
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="fusionEnvironmentId")
    def fusion_environment_id(self) -> Optional[str]:
        return pulumi.get(self, "fusion_environment_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetFusionEnvironmentAdminUsersAdminUserCollectionItemItemResult']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[str]:
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetFusionEnvironmentAdminUsersAdminUserCollectionItemItemResult(dict):
    def __init__(__self__, *,
                 email_address: Optional[str] = None,
                 first_name: Optional[str] = None,
                 last_name: Optional[str] = None,
                 username: Optional[str] = None):
        if email_address is not None:
            pulumi.set(__self__, "email_address", email_address)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="emailAddress")
    def email_address(self) -> Optional[str]:
        return pulumi.get(self, "email_address")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[str]:
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[str]:
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetFusionEnvironmentAdminUsersFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetFusionEnvironmentCreateFusionEnvironmentAdminUserDetailResult(dict):
    def __init__(__self__, *,
                 email_address: Optional[str] = None,
                 first_name: Optional[str] = None,
                 last_name: Optional[str] = None,
                 password: Optional[str] = None,
                 username: Optional[str] = None):
        if email_address is not None:
            pulumi.set(__self__, "email_address", email_address)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="emailAddress")
    def email_address(self) -> Optional[str]:
        return pulumi.get(self, "email_address")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[str]:
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[str]:
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetFusionEnvironmentDataMaskingActivitiesDataMaskingActivityCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetFusionEnvironmentDataMaskingActivitiesDataMaskingActivityCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetFusionEnvironmentDataMaskingActivitiesDataMaskingActivityCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetFusionEnvironmentDataMaskingActivitiesDataMaskingActivityCollectionItemResult(dict):
    def __init__(__self__, *,
                 fusion_environment_id: Optional[str] = None,
                 id: Optional[str] = None,
                 is_resume_data_masking: Optional[bool] = None,
                 state: Optional[str] = None,
                 time_masking_finish: Optional[str] = None,
                 time_masking_start: Optional[str] = None):
        if fusion_environment_id is not None:
            pulumi.set(__self__, "fusion_environment_id", fusion_environment_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_resume_data_masking is not None:
            pulumi.set(__self__, "is_resume_data_masking", is_resume_data_masking)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_masking_finish is not None:
            pulumi.set(__self__, "time_masking_finish", time_masking_finish)
        if time_masking_start is not None:
            pulumi.set(__self__, "time_masking_start", time_masking_start)

    @property
    @pulumi.getter(name="fusionEnvironmentId")
    def fusion_environment_id(self) -> Optional[str]:
        return pulumi.get(self, "fusion_environment_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isResumeDataMasking")
    def is_resume_data_masking(self) -> Optional[bool]:
        return pulumi.get(self, "is_resume_data_masking")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeMaskingFinish")
    def time_masking_finish(self) -> Optional[str]:
        return pulumi.get(self, "time_masking_finish")

    @property
    @pulumi.getter(name="timeMaskingStart")
    def time_masking_start(self) -> Optional[str]:
        return pulumi.get(self, "time_masking_start")


@pulumi.output_type
class GetFusionEnvironmentDataMaskingActivitiesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetFusionEnvironmentFamiliesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetFusionEnvironmentFamiliesFusionEnvironmentFamilyCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetFusionEnvironmentFamiliesFusionEnvironmentFamilyCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetFusionEnvironmentFamiliesFusionEnvironmentFamilyCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetFusionEnvironmentFamiliesFusionEnvironmentFamilyCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 family_maintenance_policies: Optional[Sequence['outputs.GetFusionEnvironmentFamiliesFusionEnvironmentFamilyCollectionItemFamilyMaintenancePolicyResult']] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 is_subscription_update_needed: Optional[bool] = None,
                 lifecycle_details: Optional[str] = None,
                 state: Optional[str] = None,
                 subscription_ids: Optional[Sequence[str]] = None,
                 system_name: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if family_maintenance_policies is not None:
            pulumi.set(__self__, "family_maintenance_policies", family_maintenance_policies)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_subscription_update_needed is not None:
            pulumi.set(__self__, "is_subscription_update_needed", is_subscription_update_needed)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if subscription_ids is not None:
            pulumi.set(__self__, "subscription_ids", subscription_ids)
        if system_name is not None:
            pulumi.set(__self__, "system_name", system_name)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="familyMaintenancePolicies")
    def family_maintenance_policies(self) -> Optional[Sequence['outputs.GetFusionEnvironmentFamiliesFusionEnvironmentFamilyCollectionItemFamilyMaintenancePolicyResult']]:
        return pulumi.get(self, "family_maintenance_policies")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isSubscriptionUpdateNeeded")
    def is_subscription_update_needed(self) -> Optional[bool]:
        return pulumi.get(self, "is_subscription_update_needed")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subscriptionIds")
    def subscription_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "subscription_ids")

    @property
    @pulumi.getter(name="systemName")
    def system_name(self) -> Optional[str]:
        return pulumi.get(self, "system_name")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetFusionEnvironmentFamiliesFusionEnvironmentFamilyCollectionItemFamilyMaintenancePolicyResult(dict):
    def __init__(__self__, *,
                 concurrent_maintenance: Optional[str] = None,
                 is_monthly_patching_enabled: Optional[bool] = None,
                 quarterly_upgrade_begin_times: Optional[str] = None):
        if concurrent_maintenance is not None:
            pulumi.set(__self__, "concurrent_maintenance", concurrent_maintenance)
        if is_monthly_patching_enabled is not None:
            pulumi.set(__self__, "is_monthly_patching_enabled", is_monthly_patching_enabled)
        if quarterly_upgrade_begin_times is not None:
            pulumi.set(__self__, "quarterly_upgrade_begin_times", quarterly_upgrade_begin_times)

    @property
    @pulumi.getter(name="concurrentMaintenance")
    def concurrent_maintenance(self) -> Optional[str]:
        return pulumi.get(self, "concurrent_maintenance")

    @property
    @pulumi.getter(name="isMonthlyPatchingEnabled")
    def is_monthly_patching_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_monthly_patching_enabled")

    @property
    @pulumi.getter(name="quarterlyUpgradeBeginTimes")
    def quarterly_upgrade_begin_times(self) -> Optional[str]:
        return pulumi.get(self, "quarterly_upgrade_begin_times")


@pulumi.output_type
class GetFusionEnvironmentFamilyFamilyMaintenancePolicyResult(dict):
    def __init__(__self__, *,
                 concurrent_maintenance: Optional[str] = None,
                 is_monthly_patching_enabled: Optional[bool] = None,
                 quarterly_upgrade_begin_times: Optional[str] = None):
        if concurrent_maintenance is not None:
            pulumi.set(__self__, "concurrent_maintenance", concurrent_maintenance)
        if is_monthly_patching_enabled is not None:
            pulumi.set(__self__, "is_monthly_patching_enabled", is_monthly_patching_enabled)
        if quarterly_upgrade_begin_times is not None:
            pulumi.set(__self__, "quarterly_upgrade_begin_times", quarterly_upgrade_begin_times)

    @property
    @pulumi.getter(name="concurrentMaintenance")
    def concurrent_maintenance(self) -> Optional[str]:
        return pulumi.get(self, "concurrent_maintenance")

    @property
    @pulumi.getter(name="isMonthlyPatchingEnabled")
    def is_monthly_patching_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_monthly_patching_enabled")

    @property
    @pulumi.getter(name="quarterlyUpgradeBeginTimes")
    def quarterly_upgrade_begin_times(self) -> Optional[str]:
        return pulumi.get(self, "quarterly_upgrade_begin_times")


@pulumi.output_type
class GetFusionEnvironmentFamilyLimitsAndUsageDevelopmentLimitAndUsageResult(dict):
    def __init__(__self__, *,
                 limit: Optional[int] = None,
                 usage: Optional[int] = None):
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if usage is not None:
            pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def usage(self) -> Optional[int]:
        return pulumi.get(self, "usage")


@pulumi.output_type
class GetFusionEnvironmentFamilyLimitsAndUsageProductionLimitAndUsageResult(dict):
    def __init__(__self__, *,
                 limit: Optional[int] = None,
                 usage: Optional[int] = None):
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if usage is not None:
            pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def usage(self) -> Optional[int]:
        return pulumi.get(self, "usage")


@pulumi.output_type
class GetFusionEnvironmentFamilyLimitsAndUsageTestLimitAndUsageResult(dict):
    def __init__(__self__, *,
                 limit: Optional[int] = None,
                 usage: Optional[int] = None):
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if usage is not None:
            pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def usage(self) -> Optional[int]:
        return pulumi.get(self, "usage")


@pulumi.output_type
class GetFusionEnvironmentFamilySubscriptionDetailSubscriptionResult(dict):
    def __init__(__self__, *,
                 classic_subscription_id: Optional[str] = None,
                 id: Optional[str] = None,
                 service_name: Optional[str] = None,
                 skuses: Optional[Sequence['outputs.GetFusionEnvironmentFamilySubscriptionDetailSubscriptionSkusResult']] = None):
        if classic_subscription_id is not None:
            pulumi.set(__self__, "classic_subscription_id", classic_subscription_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)
        if skuses is not None:
            pulumi.set(__self__, "skuses", skuses)

    @property
    @pulumi.getter(name="classicSubscriptionId")
    def classic_subscription_id(self) -> Optional[str]:
        return pulumi.get(self, "classic_subscription_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[str]:
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter
    def skuses(self) -> Optional[Sequence['outputs.GetFusionEnvironmentFamilySubscriptionDetailSubscriptionSkusResult']]:
        return pulumi.get(self, "skuses")


@pulumi.output_type
class GetFusionEnvironmentFamilySubscriptionDetailSubscriptionSkusResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 license_part_description: Optional[str] = None,
                 metric_name: Optional[str] = None,
                 quantity: Optional[int] = None,
                 sku: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if license_part_description is not None:
            pulumi.set(__self__, "license_part_description", license_part_description)
        if metric_name is not None:
            pulumi.set(__self__, "metric_name", metric_name)
        if quantity is not None:
            pulumi.set(__self__, "quantity", quantity)
        if sku is not None:
            pulumi.set(__self__, "sku", sku)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="licensePartDescription")
    def license_part_description(self) -> Optional[str]:
        return pulumi.get(self, "license_part_description")

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> Optional[str]:
        return pulumi.get(self, "metric_name")

    @property
    @pulumi.getter
    def quantity(self) -> Optional[int]:
        return pulumi.get(self, "quantity")

    @property
    @pulumi.getter
    def sku(self) -> Optional[str]:
        return pulumi.get(self, "sku")


@pulumi.output_type
class GetFusionEnvironmentKmsKeyInfoResult(dict):
    def __init__(__self__, *,
                 active_key_id: Optional[str] = None,
                 active_key_version: Optional[str] = None,
                 current_key_lifecycle_state: Optional[str] = None,
                 scheduled_key_id: Optional[str] = None,
                 scheduled_key_status: Optional[str] = None,
                 scheduled_key_version: Optional[str] = None,
                 scheduled_lifecycle_state: Optional[str] = None):
        if active_key_id is not None:
            pulumi.set(__self__, "active_key_id", active_key_id)
        if active_key_version is not None:
            pulumi.set(__self__, "active_key_version", active_key_version)
        if current_key_lifecycle_state is not None:
            pulumi.set(__self__, "current_key_lifecycle_state", current_key_lifecycle_state)
        if scheduled_key_id is not None:
            pulumi.set(__self__, "scheduled_key_id", scheduled_key_id)
        if scheduled_key_status is not None:
            pulumi.set(__self__, "scheduled_key_status", scheduled_key_status)
        if scheduled_key_version is not None:
            pulumi.set(__self__, "scheduled_key_version", scheduled_key_version)
        if scheduled_lifecycle_state is not None:
            pulumi.set(__self__, "scheduled_lifecycle_state", scheduled_lifecycle_state)

    @property
    @pulumi.getter(name="activeKeyId")
    def active_key_id(self) -> Optional[str]:
        return pulumi.get(self, "active_key_id")

    @property
    @pulumi.getter(name="activeKeyVersion")
    def active_key_version(self) -> Optional[str]:
        return pulumi.get(self, "active_key_version")

    @property
    @pulumi.getter(name="currentKeyLifecycleState")
    def current_key_lifecycle_state(self) -> Optional[str]:
        return pulumi.get(self, "current_key_lifecycle_state")

    @property
    @pulumi.getter(name="scheduledKeyId")
    def scheduled_key_id(self) -> Optional[str]:
        return pulumi.get(self, "scheduled_key_id")

    @property
    @pulumi.getter(name="scheduledKeyStatus")
    def scheduled_key_status(self) -> Optional[str]:
        return pulumi.get(self, "scheduled_key_status")

    @property
    @pulumi.getter(name="scheduledKeyVersion")
    def scheduled_key_version(self) -> Optional[str]:
        return pulumi.get(self, "scheduled_key_version")

    @property
    @pulumi.getter(name="scheduledLifecycleState")
    def scheduled_lifecycle_state(self) -> Optional[str]:
        return pulumi.get(self, "scheduled_lifecycle_state")


@pulumi.output_type
class GetFusionEnvironmentMaintenancePolicyResult(dict):
    def __init__(__self__, *,
                 environment_maintenance_override: Optional[str] = None,
                 monthly_patching_override: Optional[str] = None,
                 quarterly_upgrade_begin_times: Optional[Sequence['outputs.GetFusionEnvironmentMaintenancePolicyQuarterlyUpgradeBeginTimeResult']] = None):
        if environment_maintenance_override is not None:
            pulumi.set(__self__, "environment_maintenance_override", environment_maintenance_override)
        if monthly_patching_override is not None:
            pulumi.set(__self__, "monthly_patching_override", monthly_patching_override)
        if quarterly_upgrade_begin_times is not None:
            pulumi.set(__self__, "quarterly_upgrade_begin_times", quarterly_upgrade_begin_times)

    @property
    @pulumi.getter(name="environmentMaintenanceOverride")
    def environment_maintenance_override(self) -> Optional[str]:
        return pulumi.get(self, "environment_maintenance_override")

    @property
    @pulumi.getter(name="monthlyPatchingOverride")
    def monthly_patching_override(self) -> Optional[str]:
        return pulumi.get(self, "monthly_patching_override")

    @property
    @pulumi.getter(name="quarterlyUpgradeBeginTimes")
    def quarterly_upgrade_begin_times(self) -> Optional[Sequence['outputs.GetFusionEnvironmentMaintenancePolicyQuarterlyUpgradeBeginTimeResult']]:
        return pulumi.get(self, "quarterly_upgrade_begin_times")


@pulumi.output_type
class GetFusionEnvironmentMaintenancePolicyQuarterlyUpgradeBeginTimeResult(dict):
    def __init__(__self__, *,
                 begin_times_value: Optional[str] = None,
                 override_type: Optional[str] = None):
        if begin_times_value is not None:
            pulumi.set(__self__, "begin_times_value", begin_times_value)
        if override_type is not None:
            pulumi.set(__self__, "override_type", override_type)

    @property
    @pulumi.getter(name="beginTimesValue")
    def begin_times_value(self) -> Optional[str]:
        return pulumi.get(self, "begin_times_value")

    @property
    @pulumi.getter(name="overrideType")
    def override_type(self) -> Optional[str]:
        return pulumi.get(self, "override_type")


@pulumi.output_type
class GetFusionEnvironmentRefreshResult(dict):
    def __init__(__self__, *,
                 source_fusion_environment_id: Optional[str] = None,
                 time_finished: Optional[str] = None,
                 time_of_restoration_point: Optional[str] = None):
        if source_fusion_environment_id is not None:
            pulumi.set(__self__, "source_fusion_environment_id", source_fusion_environment_id)
        if time_finished is not None:
            pulumi.set(__self__, "time_finished", time_finished)
        if time_of_restoration_point is not None:
            pulumi.set(__self__, "time_of_restoration_point", time_of_restoration_point)

    @property
    @pulumi.getter(name="sourceFusionEnvironmentId")
    def source_fusion_environment_id(self) -> Optional[str]:
        return pulumi.get(self, "source_fusion_environment_id")

    @property
    @pulumi.getter(name="timeFinished")
    def time_finished(self) -> Optional[str]:
        return pulumi.get(self, "time_finished")

    @property
    @pulumi.getter(name="timeOfRestorationPoint")
    def time_of_restoration_point(self) -> Optional[str]:
        return pulumi.get(self, "time_of_restoration_point")


@pulumi.output_type
class GetFusionEnvironmentRefreshActivitiesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetFusionEnvironmentRefreshActivitiesRefreshActivityCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetFusionEnvironmentRefreshActivitiesRefreshActivityCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetFusionEnvironmentRefreshActivitiesRefreshActivityCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetFusionEnvironmentRefreshActivitiesRefreshActivityCollectionItemResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 fusion_environment_id: Optional[str] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 refresh_activity_id: Optional[str] = None,
                 refresh_issue_details_lists: Optional[Sequence['outputs.GetFusionEnvironmentRefreshActivitiesRefreshActivityCollectionItemRefreshIssueDetailsListResult']] = None,
                 service_availability: Optional[str] = None,
                 source_fusion_environment_id: Optional[str] = None,
                 state: Optional[str] = None,
                 time_accepted: Optional[str] = None,
                 time_expected_finish: Optional[str] = None,
                 time_finished: Optional[str] = None,
                 time_of_restoration_point: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if fusion_environment_id is not None:
            pulumi.set(__self__, "fusion_environment_id", fusion_environment_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if refresh_activity_id is not None:
            pulumi.set(__self__, "refresh_activity_id", refresh_activity_id)
        if refresh_issue_details_lists is not None:
            pulumi.set(__self__, "refresh_issue_details_lists", refresh_issue_details_lists)
        if service_availability is not None:
            pulumi.set(__self__, "service_availability", service_availability)
        if source_fusion_environment_id is not None:
            pulumi.set(__self__, "source_fusion_environment_id", source_fusion_environment_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_accepted is not None:
            pulumi.set(__self__, "time_accepted", time_accepted)
        if time_expected_finish is not None:
            pulumi.set(__self__, "time_expected_finish", time_expected_finish)
        if time_finished is not None:
            pulumi.set(__self__, "time_finished", time_finished)
        if time_of_restoration_point is not None:
            pulumi.set(__self__, "time_of_restoration_point", time_of_restoration_point)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="fusionEnvironmentId")
    def fusion_environment_id(self) -> Optional[str]:
        return pulumi.get(self, "fusion_environment_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="refreshActivityId")
    def refresh_activity_id(self) -> Optional[str]:
        return pulumi.get(self, "refresh_activity_id")

    @property
    @pulumi.getter(name="refreshIssueDetailsLists")
    def refresh_issue_details_lists(self) -> Optional[Sequence['outputs.GetFusionEnvironmentRefreshActivitiesRefreshActivityCollectionItemRefreshIssueDetailsListResult']]:
        return pulumi.get(self, "refresh_issue_details_lists")

    @property
    @pulumi.getter(name="serviceAvailability")
    def service_availability(self) -> Optional[str]:
        return pulumi.get(self, "service_availability")

    @property
    @pulumi.getter(name="sourceFusionEnvironmentId")
    def source_fusion_environment_id(self) -> Optional[str]:
        return pulumi.get(self, "source_fusion_environment_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeAccepted")
    def time_accepted(self) -> Optional[str]:
        return pulumi.get(self, "time_accepted")

    @property
    @pulumi.getter(name="timeExpectedFinish")
    def time_expected_finish(self) -> Optional[str]:
        return pulumi.get(self, "time_expected_finish")

    @property
    @pulumi.getter(name="timeFinished")
    def time_finished(self) -> Optional[str]:
        return pulumi.get(self, "time_finished")

    @property
    @pulumi.getter(name="timeOfRestorationPoint")
    def time_of_restoration_point(self) -> Optional[str]:
        return pulumi.get(self, "time_of_restoration_point")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetFusionEnvironmentRefreshActivitiesRefreshActivityCollectionItemRefreshIssueDetailsListResult(dict):
    def __init__(__self__, *,
                 refresh_issues: Optional[str] = None):
        if refresh_issues is not None:
            pulumi.set(__self__, "refresh_issues", refresh_issues)

    @property
    @pulumi.getter(name="refreshIssues")
    def refresh_issues(self) -> Optional[str]:
        return pulumi.get(self, "refresh_issues")


@pulumi.output_type
class GetFusionEnvironmentRefreshActivityRefreshIssueDetailsListResult(dict):
    def __init__(__self__, *,
                 refresh_issues: Optional[str] = None):
        if refresh_issues is not None:
            pulumi.set(__self__, "refresh_issues", refresh_issues)

    @property
    @pulumi.getter(name="refreshIssues")
    def refresh_issues(self) -> Optional[str]:
        return pulumi.get(self, "refresh_issues")


@pulumi.output_type
class GetFusionEnvironmentRuleResult(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 conditions: Optional[Sequence['outputs.GetFusionEnvironmentRuleConditionResult']] = None,
                 description: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.GetFusionEnvironmentRuleConditionResult']]:
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")


@pulumi.output_type
class GetFusionEnvironmentRuleConditionResult(dict):
    def __init__(__self__, *,
                 attribute_name: Optional[str] = None,
                 attribute_value: Optional[str] = None):
        if attribute_name is not None:
            pulumi.set(__self__, "attribute_name", attribute_name)
        if attribute_value is not None:
            pulumi.set(__self__, "attribute_value", attribute_value)

    @property
    @pulumi.getter(name="attributeName")
    def attribute_name(self) -> Optional[str]:
        return pulumi.get(self, "attribute_name")

    @property
    @pulumi.getter(name="attributeValue")
    def attribute_value(self) -> Optional[str]:
        return pulumi.get(self, "attribute_value")


@pulumi.output_type
class GetFusionEnvironmentScheduledActivitiesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetFusionEnvironmentScheduledActivitiesScheduledActivityCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetFusionEnvironmentScheduledActivitiesScheduledActivityCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetFusionEnvironmentScheduledActivitiesScheduledActivityCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetFusionEnvironmentScheduledActivitiesScheduledActivityCollectionItemResult(dict):
    def __init__(__self__, *,
                 actions: Optional[Sequence['outputs.GetFusionEnvironmentScheduledActivitiesScheduledActivityCollectionItemActionResult']] = None,
                 delay_in_hours: Optional[int] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 fusion_environment_id: Optional[str] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 run_cycle: Optional[str] = None,
                 service_availability: Optional[str] = None,
                 state: Optional[str] = None,
                 time_accepted: Optional[str] = None,
                 time_expected_finish: Optional[str] = None,
                 time_finished: Optional[str] = None,
                 time_scheduled_start: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if delay_in_hours is not None:
            pulumi.set(__self__, "delay_in_hours", delay_in_hours)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if fusion_environment_id is not None:
            pulumi.set(__self__, "fusion_environment_id", fusion_environment_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if run_cycle is not None:
            pulumi.set(__self__, "run_cycle", run_cycle)
        if service_availability is not None:
            pulumi.set(__self__, "service_availability", service_availability)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_accepted is not None:
            pulumi.set(__self__, "time_accepted", time_accepted)
        if time_expected_finish is not None:
            pulumi.set(__self__, "time_expected_finish", time_expected_finish)
        if time_finished is not None:
            pulumi.set(__self__, "time_finished", time_finished)
        if time_scheduled_start is not None:
            pulumi.set(__self__, "time_scheduled_start", time_scheduled_start)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter
    def actions(self) -> Optional[Sequence['outputs.GetFusionEnvironmentScheduledActivitiesScheduledActivityCollectionItemActionResult']]:
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter(name="delayInHours")
    def delay_in_hours(self) -> Optional[int]:
        return pulumi.get(self, "delay_in_hours")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="fusionEnvironmentId")
    def fusion_environment_id(self) -> Optional[str]:
        return pulumi.get(self, "fusion_environment_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="runCycle")
    def run_cycle(self) -> Optional[str]:
        return pulumi.get(self, "run_cycle")

    @property
    @pulumi.getter(name="serviceAvailability")
    def service_availability(self) -> Optional[str]:
        return pulumi.get(self, "service_availability")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeAccepted")
    def time_accepted(self) -> Optional[str]:
        return pulumi.get(self, "time_accepted")

    @property
    @pulumi.getter(name="timeExpectedFinish")
    def time_expected_finish(self) -> Optional[str]:
        return pulumi.get(self, "time_expected_finish")

    @property
    @pulumi.getter(name="timeFinished")
    def time_finished(self) -> Optional[str]:
        return pulumi.get(self, "time_finished")

    @property
    @pulumi.getter(name="timeScheduledStart")
    def time_scheduled_start(self) -> Optional[str]:
        return pulumi.get(self, "time_scheduled_start")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetFusionEnvironmentScheduledActivitiesScheduledActivityCollectionItemActionResult(dict):
    def __init__(__self__, *,
                 action_type: Optional[str] = None,
                 artifact: Optional[str] = None,
                 category: Optional[str] = None,
                 description: Optional[str] = None,
                 mode: Optional[str] = None,
                 qualifier: Optional[str] = None,
                 reference_key: Optional[str] = None,
                 state: Optional[str] = None,
                 version: Optional[str] = None):
        if action_type is not None:
            pulumi.set(__self__, "action_type", action_type)
        if artifact is not None:
            pulumi.set(__self__, "artifact", artifact)
        if category is not None:
            pulumi.set(__self__, "category", category)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if qualifier is not None:
            pulumi.set(__self__, "qualifier", qualifier)
        if reference_key is not None:
            pulumi.set(__self__, "reference_key", reference_key)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> Optional[str]:
        return pulumi.get(self, "action_type")

    @property
    @pulumi.getter
    def artifact(self) -> Optional[str]:
        return pulumi.get(self, "artifact")

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def qualifier(self) -> Optional[str]:
        return pulumi.get(self, "qualifier")

    @property
    @pulumi.getter(name="referenceKey")
    def reference_key(self) -> Optional[str]:
        return pulumi.get(self, "reference_key")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetFusionEnvironmentScheduledActivityActionResult(dict):
    def __init__(__self__, *,
                 action_type: Optional[str] = None,
                 artifact: Optional[str] = None,
                 category: Optional[str] = None,
                 description: Optional[str] = None,
                 mode: Optional[str] = None,
                 qualifier: Optional[str] = None,
                 reference_key: Optional[str] = None,
                 state: Optional[str] = None,
                 version: Optional[str] = None):
        if action_type is not None:
            pulumi.set(__self__, "action_type", action_type)
        if artifact is not None:
            pulumi.set(__self__, "artifact", artifact)
        if category is not None:
            pulumi.set(__self__, "category", category)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if qualifier is not None:
            pulumi.set(__self__, "qualifier", qualifier)
        if reference_key is not None:
            pulumi.set(__self__, "reference_key", reference_key)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> Optional[str]:
        return pulumi.get(self, "action_type")

    @property
    @pulumi.getter
    def artifact(self) -> Optional[str]:
        return pulumi.get(self, "artifact")

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def qualifier(self) -> Optional[str]:
        return pulumi.get(self, "qualifier")

    @property
    @pulumi.getter(name="referenceKey")
    def reference_key(self) -> Optional[str]:
        return pulumi.get(self, "reference_key")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetFusionEnvironmentServiceAttachmentsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetFusionEnvironmentServiceAttachmentsServiceAttachmentCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetFusionEnvironmentServiceAttachmentsServiceAttachmentCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetFusionEnvironmentServiceAttachmentsServiceAttachmentCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetFusionEnvironmentServiceAttachmentsServiceAttachmentCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 fusion_environment_id: Optional[str] = None,
                 id: Optional[str] = None,
                 is_sku_based: Optional[bool] = None,
                 service_instance_id: Optional[str] = None,
                 service_instance_type: Optional[str] = None,
                 service_url: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if fusion_environment_id is not None:
            pulumi.set(__self__, "fusion_environment_id", fusion_environment_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_sku_based is not None:
            pulumi.set(__self__, "is_sku_based", is_sku_based)
        if service_instance_id is not None:
            pulumi.set(__self__, "service_instance_id", service_instance_id)
        if service_instance_type is not None:
            pulumi.set(__self__, "service_instance_type", service_instance_type)
        if service_url is not None:
            pulumi.set(__self__, "service_url", service_url)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="fusionEnvironmentId")
    def fusion_environment_id(self) -> Optional[str]:
        return pulumi.get(self, "fusion_environment_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isSkuBased")
    def is_sku_based(self) -> Optional[bool]:
        return pulumi.get(self, "is_sku_based")

    @property
    @pulumi.getter(name="serviceInstanceId")
    def service_instance_id(self) -> Optional[str]:
        return pulumi.get(self, "service_instance_id")

    @property
    @pulumi.getter(name="serviceInstanceType")
    def service_instance_type(self) -> Optional[str]:
        return pulumi.get(self, "service_instance_type")

    @property
    @pulumi.getter(name="serviceUrl")
    def service_url(self) -> Optional[str]:
        return pulumi.get(self, "service_url")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetFusionEnvironmentTimeAvailableForRefreshItemResult(dict):
    def __init__(__self__, *,
                 time_available_for_refresh: Optional[str] = None):
        if time_available_for_refresh is not None:
            pulumi.set(__self__, "time_available_for_refresh", time_available_for_refresh)

    @property
    @pulumi.getter(name="timeAvailableForRefresh")
    def time_available_for_refresh(self) -> Optional[str]:
        return pulumi.get(self, "time_available_for_refresh")


@pulumi.output_type
class GetFusionEnvironmentTimeAvailableForRefreshsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetFusionEnvironmentTimeAvailableForRefreshsTimeAvailableForRefreshCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetFusionEnvironmentTimeAvailableForRefreshsTimeAvailableForRefreshCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetFusionEnvironmentTimeAvailableForRefreshsTimeAvailableForRefreshCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetFusionEnvironmentTimeAvailableForRefreshsTimeAvailableForRefreshCollectionItemResult(dict):
    def __init__(__self__, *,
                 time_available_for_refresh: Optional[str] = None):
        if time_available_for_refresh is not None:
            pulumi.set(__self__, "time_available_for_refresh", time_available_for_refresh)

    @property
    @pulumi.getter(name="timeAvailableForRefresh")
    def time_available_for_refresh(self) -> Optional[str]:
        return pulumi.get(self, "time_available_for_refresh")


@pulumi.output_type
class GetFusionEnvironmentsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetFusionEnvironmentsFusionEnvironmentCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetFusionEnvironmentsFusionEnvironmentCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetFusionEnvironmentsFusionEnvironmentCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetFusionEnvironmentsFusionEnvironmentCollectionItemResult(dict):
    def __init__(__self__, *,
                 additional_language_packs: Optional[Sequence[str]] = None,
                 applied_patch_bundles: Optional[Sequence[str]] = None,
                 compartment_id: Optional[str] = None,
                 create_fusion_environment_admin_user_details: Optional[Sequence['outputs.GetFusionEnvironmentsFusionEnvironmentCollectionItemCreateFusionEnvironmentAdminUserDetailResult']] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 dns_prefix: Optional[str] = None,
                 domain_id: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 fusion_environment_family_id: Optional[str] = None,
                 fusion_environment_type: Optional[str] = None,
                 id: Optional[str] = None,
                 idcs_domain_url: Optional[str] = None,
                 is_break_glass_enabled: Optional[bool] = None,
                 kms_key_id: Optional[str] = None,
                 kms_key_infos: Optional[Sequence['outputs.GetFusionEnvironmentsFusionEnvironmentCollectionItemKmsKeyInfoResult']] = None,
                 lifecycle_details: Optional[str] = None,
                 lockbox_id: Optional[str] = None,
                 maintenance_policies: Optional[Sequence['outputs.GetFusionEnvironmentsFusionEnvironmentCollectionItemMaintenancePolicyResult']] = None,
                 public_url: Optional[str] = None,
                 refreshes: Optional[Sequence['outputs.GetFusionEnvironmentsFusionEnvironmentCollectionItemRefreshResult']] = None,
                 rules: Optional[Sequence['outputs.GetFusionEnvironmentsFusionEnvironmentCollectionItemRuleResult']] = None,
                 state: Optional[str] = None,
                 subscription_ids: Optional[Sequence[str]] = None,
                 system_name: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_upcoming_maintenance: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 version: Optional[str] = None):
        if additional_language_packs is not None:
            pulumi.set(__self__, "additional_language_packs", additional_language_packs)
        if applied_patch_bundles is not None:
            pulumi.set(__self__, "applied_patch_bundles", applied_patch_bundles)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if create_fusion_environment_admin_user_details is not None:
            pulumi.set(__self__, "create_fusion_environment_admin_user_details", create_fusion_environment_admin_user_details)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if dns_prefix is not None:
            pulumi.set(__self__, "dns_prefix", dns_prefix)
        if domain_id is not None:
            pulumi.set(__self__, "domain_id", domain_id)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if fusion_environment_family_id is not None:
            pulumi.set(__self__, "fusion_environment_family_id", fusion_environment_family_id)
        if fusion_environment_type is not None:
            pulumi.set(__self__, "fusion_environment_type", fusion_environment_type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if idcs_domain_url is not None:
            pulumi.set(__self__, "idcs_domain_url", idcs_domain_url)
        if is_break_glass_enabled is not None:
            pulumi.set(__self__, "is_break_glass_enabled", is_break_glass_enabled)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if kms_key_infos is not None:
            pulumi.set(__self__, "kms_key_infos", kms_key_infos)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if lockbox_id is not None:
            pulumi.set(__self__, "lockbox_id", lockbox_id)
        if maintenance_policies is not None:
            pulumi.set(__self__, "maintenance_policies", maintenance_policies)
        if public_url is not None:
            pulumi.set(__self__, "public_url", public_url)
        if refreshes is not None:
            pulumi.set(__self__, "refreshes", refreshes)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if subscription_ids is not None:
            pulumi.set(__self__, "subscription_ids", subscription_ids)
        if system_name is not None:
            pulumi.set(__self__, "system_name", system_name)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_upcoming_maintenance is not None:
            pulumi.set(__self__, "time_upcoming_maintenance", time_upcoming_maintenance)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="additionalLanguagePacks")
    def additional_language_packs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "additional_language_packs")

    @property
    @pulumi.getter(name="appliedPatchBundles")
    def applied_patch_bundles(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "applied_patch_bundles")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="createFusionEnvironmentAdminUserDetails")
    def create_fusion_environment_admin_user_details(self) -> Optional[Sequence['outputs.GetFusionEnvironmentsFusionEnvironmentCollectionItemCreateFusionEnvironmentAdminUserDetailResult']]:
        return pulumi.get(self, "create_fusion_environment_admin_user_details")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="dnsPrefix")
    def dns_prefix(self) -> Optional[str]:
        return pulumi.get(self, "dns_prefix")

    @property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> Optional[str]:
        return pulumi.get(self, "domain_id")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="fusionEnvironmentFamilyId")
    def fusion_environment_family_id(self) -> Optional[str]:
        return pulumi.get(self, "fusion_environment_family_id")

    @property
    @pulumi.getter(name="fusionEnvironmentType")
    def fusion_environment_type(self) -> Optional[str]:
        return pulumi.get(self, "fusion_environment_type")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsDomainUrl")
    def idcs_domain_url(self) -> Optional[str]:
        return pulumi.get(self, "idcs_domain_url")

    @property
    @pulumi.getter(name="isBreakGlassEnabled")
    def is_break_glass_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_break_glass_enabled")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter(name="kmsKeyInfos")
    def kms_key_infos(self) -> Optional[Sequence['outputs.GetFusionEnvironmentsFusionEnvironmentCollectionItemKmsKeyInfoResult']]:
        return pulumi.get(self, "kms_key_infos")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="lockboxId")
    def lockbox_id(self) -> Optional[str]:
        return pulumi.get(self, "lockbox_id")

    @property
    @pulumi.getter(name="maintenancePolicies")
    def maintenance_policies(self) -> Optional[Sequence['outputs.GetFusionEnvironmentsFusionEnvironmentCollectionItemMaintenancePolicyResult']]:
        return pulumi.get(self, "maintenance_policies")

    @property
    @pulumi.getter(name="publicUrl")
    def public_url(self) -> Optional[str]:
        return pulumi.get(self, "public_url")

    @property
    @pulumi.getter
    def refreshes(self) -> Optional[Sequence['outputs.GetFusionEnvironmentsFusionEnvironmentCollectionItemRefreshResult']]:
        return pulumi.get(self, "refreshes")

    @property
    @pulumi.getter
    def rules(self) -> Optional[Sequence['outputs.GetFusionEnvironmentsFusionEnvironmentCollectionItemRuleResult']]:
        return pulumi.get(self, "rules")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subscriptionIds")
    def subscription_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "subscription_ids")

    @property
    @pulumi.getter(name="systemName")
    def system_name(self) -> Optional[str]:
        return pulumi.get(self, "system_name")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpcomingMaintenance")
    def time_upcoming_maintenance(self) -> Optional[str]:
        return pulumi.get(self, "time_upcoming_maintenance")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetFusionEnvironmentsFusionEnvironmentCollectionItemCreateFusionEnvironmentAdminUserDetailResult(dict):
    def __init__(__self__, *,
                 email_address: Optional[str] = None,
                 first_name: Optional[str] = None,
                 last_name: Optional[str] = None,
                 password: Optional[str] = None,
                 username: Optional[str] = None):
        if email_address is not None:
            pulumi.set(__self__, "email_address", email_address)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="emailAddress")
    def email_address(self) -> Optional[str]:
        return pulumi.get(self, "email_address")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[str]:
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[str]:
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetFusionEnvironmentsFusionEnvironmentCollectionItemKmsKeyInfoResult(dict):
    def __init__(__self__, *,
                 active_key_id: Optional[str] = None,
                 active_key_version: Optional[str] = None,
                 current_key_lifecycle_state: Optional[str] = None,
                 scheduled_key_id: Optional[str] = None,
                 scheduled_key_status: Optional[str] = None,
                 scheduled_key_version: Optional[str] = None,
                 scheduled_lifecycle_state: Optional[str] = None):
        if active_key_id is not None:
            pulumi.set(__self__, "active_key_id", active_key_id)
        if active_key_version is not None:
            pulumi.set(__self__, "active_key_version", active_key_version)
        if current_key_lifecycle_state is not None:
            pulumi.set(__self__, "current_key_lifecycle_state", current_key_lifecycle_state)
        if scheduled_key_id is not None:
            pulumi.set(__self__, "scheduled_key_id", scheduled_key_id)
        if scheduled_key_status is not None:
            pulumi.set(__self__, "scheduled_key_status", scheduled_key_status)
        if scheduled_key_version is not None:
            pulumi.set(__self__, "scheduled_key_version", scheduled_key_version)
        if scheduled_lifecycle_state is not None:
            pulumi.set(__self__, "scheduled_lifecycle_state", scheduled_lifecycle_state)

    @property
    @pulumi.getter(name="activeKeyId")
    def active_key_id(self) -> Optional[str]:
        return pulumi.get(self, "active_key_id")

    @property
    @pulumi.getter(name="activeKeyVersion")
    def active_key_version(self) -> Optional[str]:
        return pulumi.get(self, "active_key_version")

    @property
    @pulumi.getter(name="currentKeyLifecycleState")
    def current_key_lifecycle_state(self) -> Optional[str]:
        return pulumi.get(self, "current_key_lifecycle_state")

    @property
    @pulumi.getter(name="scheduledKeyId")
    def scheduled_key_id(self) -> Optional[str]:
        return pulumi.get(self, "scheduled_key_id")

    @property
    @pulumi.getter(name="scheduledKeyStatus")
    def scheduled_key_status(self) -> Optional[str]:
        return pulumi.get(self, "scheduled_key_status")

    @property
    @pulumi.getter(name="scheduledKeyVersion")
    def scheduled_key_version(self) -> Optional[str]:
        return pulumi.get(self, "scheduled_key_version")

    @property
    @pulumi.getter(name="scheduledLifecycleState")
    def scheduled_lifecycle_state(self) -> Optional[str]:
        return pulumi.get(self, "scheduled_lifecycle_state")


@pulumi.output_type
class GetFusionEnvironmentsFusionEnvironmentCollectionItemMaintenancePolicyResult(dict):
    def __init__(__self__, *,
                 environment_maintenance_override: Optional[str] = None,
                 monthly_patching_override: Optional[str] = None,
                 quarterly_upgrade_begin_times: Optional[Sequence['outputs.GetFusionEnvironmentsFusionEnvironmentCollectionItemMaintenancePolicyQuarterlyUpgradeBeginTimeResult']] = None):
        if environment_maintenance_override is not None:
            pulumi.set(__self__, "environment_maintenance_override", environment_maintenance_override)
        if monthly_patching_override is not None:
            pulumi.set(__self__, "monthly_patching_override", monthly_patching_override)
        if quarterly_upgrade_begin_times is not None:
            pulumi.set(__self__, "quarterly_upgrade_begin_times", quarterly_upgrade_begin_times)

    @property
    @pulumi.getter(name="environmentMaintenanceOverride")
    def environment_maintenance_override(self) -> Optional[str]:
        return pulumi.get(self, "environment_maintenance_override")

    @property
    @pulumi.getter(name="monthlyPatchingOverride")
    def monthly_patching_override(self) -> Optional[str]:
        return pulumi.get(self, "monthly_patching_override")

    @property
    @pulumi.getter(name="quarterlyUpgradeBeginTimes")
    def quarterly_upgrade_begin_times(self) -> Optional[Sequence['outputs.GetFusionEnvironmentsFusionEnvironmentCollectionItemMaintenancePolicyQuarterlyUpgradeBeginTimeResult']]:
        return pulumi.get(self, "quarterly_upgrade_begin_times")


@pulumi.output_type
class GetFusionEnvironmentsFusionEnvironmentCollectionItemMaintenancePolicyQuarterlyUpgradeBeginTimeResult(dict):
    def __init__(__self__, *,
                 begin_times_value: Optional[str] = None,
                 override_type: Optional[str] = None):
        if begin_times_value is not None:
            pulumi.set(__self__, "begin_times_value", begin_times_value)
        if override_type is not None:
            pulumi.set(__self__, "override_type", override_type)

    @property
    @pulumi.getter(name="beginTimesValue")
    def begin_times_value(self) -> Optional[str]:
        return pulumi.get(self, "begin_times_value")

    @property
    @pulumi.getter(name="overrideType")
    def override_type(self) -> Optional[str]:
        return pulumi.get(self, "override_type")


@pulumi.output_type
class GetFusionEnvironmentsFusionEnvironmentCollectionItemRefreshResult(dict):
    def __init__(__self__, *,
                 source_fusion_environment_id: Optional[str] = None,
                 time_finished: Optional[str] = None,
                 time_of_restoration_point: Optional[str] = None):
        if source_fusion_environment_id is not None:
            pulumi.set(__self__, "source_fusion_environment_id", source_fusion_environment_id)
        if time_finished is not None:
            pulumi.set(__self__, "time_finished", time_finished)
        if time_of_restoration_point is not None:
            pulumi.set(__self__, "time_of_restoration_point", time_of_restoration_point)

    @property
    @pulumi.getter(name="sourceFusionEnvironmentId")
    def source_fusion_environment_id(self) -> Optional[str]:
        return pulumi.get(self, "source_fusion_environment_id")

    @property
    @pulumi.getter(name="timeFinished")
    def time_finished(self) -> Optional[str]:
        return pulumi.get(self, "time_finished")

    @property
    @pulumi.getter(name="timeOfRestorationPoint")
    def time_of_restoration_point(self) -> Optional[str]:
        return pulumi.get(self, "time_of_restoration_point")


@pulumi.output_type
class GetFusionEnvironmentsFusionEnvironmentCollectionItemRuleResult(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 conditions: Optional[Sequence['outputs.GetFusionEnvironmentsFusionEnvironmentCollectionItemRuleConditionResult']] = None,
                 description: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.GetFusionEnvironmentsFusionEnvironmentCollectionItemRuleConditionResult']]:
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")


@pulumi.output_type
class GetFusionEnvironmentsFusionEnvironmentCollectionItemRuleConditionResult(dict):
    def __init__(__self__, *,
                 attribute_name: Optional[str] = None,
                 attribute_value: Optional[str] = None):
        if attribute_name is not None:
            pulumi.set(__self__, "attribute_name", attribute_name)
        if attribute_value is not None:
            pulumi.set(__self__, "attribute_value", attribute_value)

    @property
    @pulumi.getter(name="attributeName")
    def attribute_name(self) -> Optional[str]:
        return pulumi.get(self, "attribute_name")

    @property
    @pulumi.getter(name="attributeValue")
    def attribute_value(self) -> Optional[str]:
        return pulumi.get(self, "attribute_value")


@pulumi.output_type
class GetPbfListingPublisherDetailResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetPbfListingTriggerResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetPbfListingTriggersFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetPbfListingTriggersTriggersCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetPbfListingTriggersTriggersCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetPbfListingTriggersTriggersCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetPbfListingTriggersTriggersCollectionItemResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetPbfListingVersionConfigResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 is_optional: Optional[bool] = None,
                 key: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if is_optional is not None:
            pulumi.set(__self__, "is_optional", is_optional)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="isOptional")
    def is_optional(self) -> Optional[bool]:
        return pulumi.get(self, "is_optional")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")


@pulumi.output_type
class GetPbfListingVersionRequirementResult(dict):
    def __init__(__self__, *,
                 min_memory_required_in_mbs: Optional[str] = None,
                 policies: Optional[Sequence['outputs.GetPbfListingVersionRequirementPolicyResult']] = None):
        if min_memory_required_in_mbs is not None:
            pulumi.set(__self__, "min_memory_required_in_mbs", min_memory_required_in_mbs)
        if policies is not None:
            pulumi.set(__self__, "policies", policies)

    @property
    @pulumi.getter(name="minMemoryRequiredInMbs")
    def min_memory_required_in_mbs(self) -> Optional[str]:
        return pulumi.get(self, "min_memory_required_in_mbs")

    @property
    @pulumi.getter
    def policies(self) -> Optional[Sequence['outputs.GetPbfListingVersionRequirementPolicyResult']]:
        return pulumi.get(self, "policies")


@pulumi.output_type
class GetPbfListingVersionRequirementPolicyResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 policy: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def policy(self) -> Optional[str]:
        return pulumi.get(self, "policy")


@pulumi.output_type
class GetPbfListingVersionTriggerResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetPbfListingVersionsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetPbfListingVersionsPbfListingVersionsCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetPbfListingVersionsPbfListingVersionsCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetPbfListingVersionsPbfListingVersionsCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetPbfListingVersionsPbfListingVersionsCollectionItemResult(dict):
    def __init__(__self__, *,
                 change_summary: Optional[str] = None,
                 configs: Optional[Sequence['outputs.GetPbfListingVersionsPbfListingVersionsCollectionItemConfigResult']] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 pbf_listing_id: Optional[str] = None,
                 requirements: Optional[Sequence['outputs.GetPbfListingVersionsPbfListingVersionsCollectionItemRequirementResult']] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 triggers: Optional[Sequence['outputs.GetPbfListingVersionsPbfListingVersionsCollectionItemTriggerResult']] = None):
        if change_summary is not None:
            pulumi.set(__self__, "change_summary", change_summary)
        if configs is not None:
            pulumi.set(__self__, "configs", configs)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pbf_listing_id is not None:
            pulumi.set(__self__, "pbf_listing_id", pbf_listing_id)
        if requirements is not None:
            pulumi.set(__self__, "requirements", requirements)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if triggers is not None:
            pulumi.set(__self__, "triggers", triggers)

    @property
    @pulumi.getter(name="changeSummary")
    def change_summary(self) -> Optional[str]:
        return pulumi.get(self, "change_summary")

    @property
    @pulumi.getter
    def configs(self) -> Optional[Sequence['outputs.GetPbfListingVersionsPbfListingVersionsCollectionItemConfigResult']]:
        return pulumi.get(self, "configs")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="pbfListingId")
    def pbf_listing_id(self) -> Optional[str]:
        return pulumi.get(self, "pbf_listing_id")

    @property
    @pulumi.getter
    def requirements(self) -> Optional[Sequence['outputs.GetPbfListingVersionsPbfListingVersionsCollectionItemRequirementResult']]:
        return pulumi.get(self, "requirements")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def triggers(self) -> Optional[Sequence['outputs.GetPbfListingVersionsPbfListingVersionsCollectionItemTriggerResult']]:
        return pulumi.get(self, "triggers")


@pulumi.output_type
class GetPbfListingVersionsPbfListingVersionsCollectionItemConfigResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 is_optional: Optional[bool] = None,
                 key: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if is_optional is not None:
            pulumi.set(__self__, "is_optional", is_optional)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="isOptional")
    def is_optional(self) -> Optional[bool]:
        return pulumi.get(self, "is_optional")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")


@pulumi.output_type
class GetPbfListingVersionsPbfListingVersionsCollectionItemRequirementResult(dict):
    def __init__(__self__, *,
                 min_memory_required_in_mbs: Optional[str] = None,
                 policies: Optional[Sequence['outputs.GetPbfListingVersionsPbfListingVersionsCollectionItemRequirementPolicyResult']] = None):
        if min_memory_required_in_mbs is not None:
            pulumi.set(__self__, "min_memory_required_in_mbs", min_memory_required_in_mbs)
        if policies is not None:
            pulumi.set(__self__, "policies", policies)

    @property
    @pulumi.getter(name="minMemoryRequiredInMbs")
    def min_memory_required_in_mbs(self) -> Optional[str]:
        return pulumi.get(self, "min_memory_required_in_mbs")

    @property
    @pulumi.getter
    def policies(self) -> Optional[Sequence['outputs.GetPbfListingVersionsPbfListingVersionsCollectionItemRequirementPolicyResult']]:
        return pulumi.get(self, "policies")


@pulumi.output_type
class GetPbfListingVersionsPbfListingVersionsCollectionItemRequirementPolicyResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 policy: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def policy(self) -> Optional[str]:
        return pulumi.get(self, "policy")


@pulumi.output_type
class GetPbfListingVersionsPbfListingVersionsCollectionItemTriggerResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetPbfListingsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetPbfListingsPbfListingsCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetPbfListingsPbfListingsCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetPbfListingsPbfListingsCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetPbfListingsPbfListingsCollectionItemResult(dict):
    def __init__(__self__, *,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 publisher_details: Optional[Sequence['outputs.GetPbfListingsPbfListingsCollectionItemPublisherDetailResult']] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 triggers: Optional[Sequence['outputs.GetPbfListingsPbfListingsCollectionItemTriggerResult']] = None):
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if publisher_details is not None:
            pulumi.set(__self__, "publisher_details", publisher_details)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if triggers is not None:
            pulumi.set(__self__, "triggers", triggers)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="publisherDetails")
    def publisher_details(self) -> Optional[Sequence['outputs.GetPbfListingsPbfListingsCollectionItemPublisherDetailResult']]:
        return pulumi.get(self, "publisher_details")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def triggers(self) -> Optional[Sequence['outputs.GetPbfListingsPbfListingsCollectionItemTriggerResult']]:
        return pulumi.get(self, "triggers")


@pulumi.output_type
class GetPbfListingsPbfListingsCollectionItemPublisherDetailResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetPbfListingsPbfListingsCollectionItemTriggerResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


