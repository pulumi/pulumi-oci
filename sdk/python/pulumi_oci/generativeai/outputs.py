# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'AgentAgentEndpointContentModerationConfig',
    'AgentAgentEndpointGuardrailConfig',
    'AgentAgentEndpointGuardrailConfigContentModerationConfig',
    'AgentAgentEndpointGuardrailConfigPersonallyIdentifiableInformationConfig',
    'AgentAgentEndpointGuardrailConfigPromptInjectionConfig',
    'AgentAgentEndpointHumanInputConfig',
    'AgentAgentEndpointOutputConfig',
    'AgentAgentEndpointOutputConfigOutputLocation',
    'AgentAgentEndpointSessionConfig',
    'AgentAgentLlmConfig',
    'AgentAgentLlmConfigRoutingLlmCustomization',
    'AgentDataIngestionJobDataIngestionJobStatistic',
    'AgentDataSourceDataSourceConfig',
    'AgentDataSourceDataSourceConfigObjectStoragePrefix',
    'AgentKnowledgeBaseIndexConfig',
    'AgentKnowledgeBaseIndexConfigDatabaseConnection',
    'AgentKnowledgeBaseIndexConfigDatabaseFunction',
    'AgentKnowledgeBaseIndexConfigIndex',
    'AgentKnowledgeBaseIndexConfigIndexSchema',
    'AgentKnowledgeBaseIndexConfigSecretDetail',
    'AgentToolToolConfig',
    'AgentToolToolConfigDatabaseConnection',
    'AgentToolToolConfigDatabaseSchema',
    'AgentToolToolConfigFunction',
    'AgentToolToolConfigGenerationLlmCustomization',
    'AgentToolToolConfigIclExamples',
    'AgentToolToolConfigKnowledgeBaseConfig',
    'AgentToolToolConfigTableAndColumnDescription',
    'DedicatedAiClusterCapacity',
    'EndpointContentModerationConfig',
    'ModelFineTuneDetails',
    'ModelFineTuneDetailsTrainingConfig',
    'ModelFineTuneDetailsTrainingDataset',
    'ModelModelMetric',
    'GetAgentAgentEndpointContentModerationConfigResult',
    'GetAgentAgentEndpointGuardrailConfigResult',
    'GetAgentAgentEndpointGuardrailConfigContentModerationConfigResult',
    'GetAgentAgentEndpointGuardrailConfigPersonallyIdentifiableInformationConfigResult',
    'GetAgentAgentEndpointGuardrailConfigPromptInjectionConfigResult',
    'GetAgentAgentEndpointHumanInputConfigResult',
    'GetAgentAgentEndpointOutputConfigResult',
    'GetAgentAgentEndpointOutputConfigOutputLocationResult',
    'GetAgentAgentEndpointSessionConfigResult',
    'GetAgentAgentEndpointsAgentEndpointCollectionResult',
    'GetAgentAgentEndpointsAgentEndpointCollectionItemResult',
    'GetAgentAgentEndpointsAgentEndpointCollectionItemContentModerationConfigResult',
    'GetAgentAgentEndpointsAgentEndpointCollectionItemGuardrailConfigResult',
    'GetAgentAgentEndpointsAgentEndpointCollectionItemGuardrailConfigContentModerationConfigResult',
    'GetAgentAgentEndpointsAgentEndpointCollectionItemGuardrailConfigPersonallyIdentifiableInformationConfigResult',
    'GetAgentAgentEndpointsAgentEndpointCollectionItemGuardrailConfigPromptInjectionConfigResult',
    'GetAgentAgentEndpointsAgentEndpointCollectionItemHumanInputConfigResult',
    'GetAgentAgentEndpointsAgentEndpointCollectionItemOutputConfigResult',
    'GetAgentAgentEndpointsAgentEndpointCollectionItemOutputConfigOutputLocationResult',
    'GetAgentAgentEndpointsAgentEndpointCollectionItemSessionConfigResult',
    'GetAgentAgentEndpointsFilterResult',
    'GetAgentAgentLlmConfigResult',
    'GetAgentAgentLlmConfigRoutingLlmCustomizationResult',
    'GetAgentAgentsAgentCollectionResult',
    'GetAgentAgentsAgentCollectionItemResult',
    'GetAgentAgentsAgentCollectionItemLlmConfigResult',
    'GetAgentAgentsAgentCollectionItemLlmConfigRoutingLlmCustomizationResult',
    'GetAgentAgentsFilterResult',
    'GetAgentDataIngestionJobDataIngestionJobStatisticResult',
    'GetAgentDataIngestionJobsDataIngestionJobCollectionResult',
    'GetAgentDataIngestionJobsDataIngestionJobCollectionItemResult',
    'GetAgentDataIngestionJobsDataIngestionJobCollectionItemDataIngestionJobStatisticResult',
    'GetAgentDataIngestionJobsFilterResult',
    'GetAgentDataSourceDataSourceConfigResult',
    'GetAgentDataSourceDataSourceConfigObjectStoragePrefixResult',
    'GetAgentDataSourcesDataSourceCollectionResult',
    'GetAgentDataSourcesDataSourceCollectionItemResult',
    'GetAgentDataSourcesDataSourceCollectionItemDataSourceConfigResult',
    'GetAgentDataSourcesDataSourceCollectionItemDataSourceConfigObjectStoragePrefixResult',
    'GetAgentDataSourcesFilterResult',
    'GetAgentKnowledgeBaseIndexConfigResult',
    'GetAgentKnowledgeBaseIndexConfigDatabaseConnectionResult',
    'GetAgentKnowledgeBaseIndexConfigDatabaseFunctionResult',
    'GetAgentKnowledgeBaseIndexConfigIndexResult',
    'GetAgentKnowledgeBaseIndexConfigIndexSchemaResult',
    'GetAgentKnowledgeBaseIndexConfigSecretDetailResult',
    'GetAgentKnowledgeBasesFilterResult',
    'GetAgentKnowledgeBasesKnowledgeBaseCollectionResult',
    'GetAgentKnowledgeBasesKnowledgeBaseCollectionItemResult',
    'GetAgentKnowledgeBasesKnowledgeBaseCollectionItemIndexConfigResult',
    'GetAgentKnowledgeBasesKnowledgeBaseCollectionItemIndexConfigDatabaseConnectionResult',
    'GetAgentKnowledgeBasesKnowledgeBaseCollectionItemIndexConfigDatabaseFunctionResult',
    'GetAgentKnowledgeBasesKnowledgeBaseCollectionItemIndexConfigIndexResult',
    'GetAgentKnowledgeBasesKnowledgeBaseCollectionItemIndexConfigIndexSchemaResult',
    'GetAgentKnowledgeBasesKnowledgeBaseCollectionItemIndexConfigSecretDetailResult',
    'GetAgentToolToolConfigResult',
    'GetAgentToolToolConfigDatabaseConnectionResult',
    'GetAgentToolToolConfigDatabaseSchemaResult',
    'GetAgentToolToolConfigFunctionResult',
    'GetAgentToolToolConfigGenerationLlmCustomizationResult',
    'GetAgentToolToolConfigIclExampleResult',
    'GetAgentToolToolConfigKnowledgeBaseConfigResult',
    'GetAgentToolToolConfigTableAndColumnDescriptionResult',
    'GetAgentToolsFilterResult',
    'GetAgentToolsToolCollectionResult',
    'GetAgentToolsToolCollectionItemResult',
    'GetAgentToolsToolCollectionItemToolConfigResult',
    'GetAgentToolsToolCollectionItemToolConfigDatabaseConnectionResult',
    'GetAgentToolsToolCollectionItemToolConfigDatabaseSchemaResult',
    'GetAgentToolsToolCollectionItemToolConfigFunctionResult',
    'GetAgentToolsToolCollectionItemToolConfigGenerationLlmCustomizationResult',
    'GetAgentToolsToolCollectionItemToolConfigIclExampleResult',
    'GetAgentToolsToolCollectionItemToolConfigKnowledgeBaseConfigResult',
    'GetAgentToolsToolCollectionItemToolConfigTableAndColumnDescriptionResult',
    'GetDedicatedAiClusterCapacityResult',
    'GetDedicatedAiClustersDedicatedAiClusterCollectionResult',
    'GetDedicatedAiClustersDedicatedAiClusterCollectionItemResult',
    'GetDedicatedAiClustersDedicatedAiClusterCollectionItemCapacityResult',
    'GetDedicatedAiClustersFilterResult',
    'GetEndpointContentModerationConfigResult',
    'GetEndpointsEndpointCollectionResult',
    'GetEndpointsEndpointCollectionItemResult',
    'GetEndpointsEndpointCollectionItemContentModerationConfigResult',
    'GetEndpointsFilterResult',
    'GetModelFineTuneDetailResult',
    'GetModelFineTuneDetailTrainingConfigResult',
    'GetModelFineTuneDetailTrainingDatasetResult',
    'GetModelModelMetricResult',
    'GetModelsFilterResult',
    'GetModelsModelCollectionResult',
    'GetModelsModelCollectionItemResult',
    'GetModelsModelCollectionItemFineTuneDetailResult',
    'GetModelsModelCollectionItemFineTuneDetailTrainingConfigResult',
    'GetModelsModelCollectionItemFineTuneDetailTrainingDatasetResult',
    'GetModelsModelCollectionItemModelMetricResult',
]

@pulumi.output_type
class AgentAgentEndpointContentModerationConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "shouldEnableOnInput":
            suggest = "should_enable_on_input"
        elif key == "shouldEnableOnOutput":
            suggest = "should_enable_on_output"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AgentAgentEndpointContentModerationConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AgentAgentEndpointContentModerationConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AgentAgentEndpointContentModerationConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 should_enable_on_input: Optional[_builtins.bool] = None,
                 should_enable_on_output: Optional[_builtins.bool] = None):
        """
        :param _builtins.bool should_enable_on_input: (Updatable) A flag to enable or disable content moderation on input.
        :param _builtins.bool should_enable_on_output: (Updatable) A flag to enable or disable content moderation on output.
        """
        if should_enable_on_input is not None:
            pulumi.set(__self__, "should_enable_on_input", should_enable_on_input)
        if should_enable_on_output is not None:
            pulumi.set(__self__, "should_enable_on_output", should_enable_on_output)

    @_builtins.property
    @pulumi.getter(name="shouldEnableOnInput")
    def should_enable_on_input(self) -> Optional[_builtins.bool]:
        """
        (Updatable) A flag to enable or disable content moderation on input.
        """
        return pulumi.get(self, "should_enable_on_input")

    @_builtins.property
    @pulumi.getter(name="shouldEnableOnOutput")
    def should_enable_on_output(self) -> Optional[_builtins.bool]:
        """
        (Updatable) A flag to enable or disable content moderation on output.
        """
        return pulumi.get(self, "should_enable_on_output")


@pulumi.output_type
class AgentAgentEndpointGuardrailConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contentModerationConfig":
            suggest = "content_moderation_config"
        elif key == "personallyIdentifiableInformationConfig":
            suggest = "personally_identifiable_information_config"
        elif key == "promptInjectionConfig":
            suggest = "prompt_injection_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AgentAgentEndpointGuardrailConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AgentAgentEndpointGuardrailConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AgentAgentEndpointGuardrailConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 content_moderation_config: Optional['outputs.AgentAgentEndpointGuardrailConfigContentModerationConfig'] = None,
                 personally_identifiable_information_config: Optional['outputs.AgentAgentEndpointGuardrailConfigPersonallyIdentifiableInformationConfig'] = None,
                 prompt_injection_config: Optional['outputs.AgentAgentEndpointGuardrailConfigPromptInjectionConfig'] = None):
        """
        :param 'AgentAgentEndpointGuardrailConfigContentModerationConfigArgs' content_moderation_config: (Updatable) The configuration details about whether to apply the content moderation feature to input and output. Content moderation removes toxic and biased content from responses. It is recommended to use content moderation.
        :param 'AgentAgentEndpointGuardrailConfigPersonallyIdentifiableInformationConfigArgs' personally_identifiable_information_config: (Updatable) The configuration details for Personally Identifiable Information.
        :param 'AgentAgentEndpointGuardrailConfigPromptInjectionConfigArgs' prompt_injection_config: (Updatable) The configuration details for Prompt Injection.
        """
        if content_moderation_config is not None:
            pulumi.set(__self__, "content_moderation_config", content_moderation_config)
        if personally_identifiable_information_config is not None:
            pulumi.set(__self__, "personally_identifiable_information_config", personally_identifiable_information_config)
        if prompt_injection_config is not None:
            pulumi.set(__self__, "prompt_injection_config", prompt_injection_config)

    @_builtins.property
    @pulumi.getter(name="contentModerationConfig")
    def content_moderation_config(self) -> Optional['outputs.AgentAgentEndpointGuardrailConfigContentModerationConfig']:
        """
        (Updatable) The configuration details about whether to apply the content moderation feature to input and output. Content moderation removes toxic and biased content from responses. It is recommended to use content moderation.
        """
        return pulumi.get(self, "content_moderation_config")

    @_builtins.property
    @pulumi.getter(name="personallyIdentifiableInformationConfig")
    def personally_identifiable_information_config(self) -> Optional['outputs.AgentAgentEndpointGuardrailConfigPersonallyIdentifiableInformationConfig']:
        """
        (Updatable) The configuration details for Personally Identifiable Information.
        """
        return pulumi.get(self, "personally_identifiable_information_config")

    @_builtins.property
    @pulumi.getter(name="promptInjectionConfig")
    def prompt_injection_config(self) -> Optional['outputs.AgentAgentEndpointGuardrailConfigPromptInjectionConfig']:
        """
        (Updatable) The configuration details for Prompt Injection.
        """
        return pulumi.get(self, "prompt_injection_config")


@pulumi.output_type
class AgentAgentEndpointGuardrailConfigContentModerationConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "inputGuardrailMode":
            suggest = "input_guardrail_mode"
        elif key == "outputGuardrailMode":
            suggest = "output_guardrail_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AgentAgentEndpointGuardrailConfigContentModerationConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AgentAgentEndpointGuardrailConfigContentModerationConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AgentAgentEndpointGuardrailConfigContentModerationConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 input_guardrail_mode: Optional[_builtins.str] = None,
                 output_guardrail_mode: Optional[_builtins.str] = None):
        """
        :param _builtins.str input_guardrail_mode: (Updatable) An input guardrail mode for content moderation.
        :param _builtins.str output_guardrail_mode: (Updatable) An output guardrail mode for content moderation.
        """
        if input_guardrail_mode is not None:
            pulumi.set(__self__, "input_guardrail_mode", input_guardrail_mode)
        if output_guardrail_mode is not None:
            pulumi.set(__self__, "output_guardrail_mode", output_guardrail_mode)

    @_builtins.property
    @pulumi.getter(name="inputGuardrailMode")
    def input_guardrail_mode(self) -> Optional[_builtins.str]:
        """
        (Updatable) An input guardrail mode for content moderation.
        """
        return pulumi.get(self, "input_guardrail_mode")

    @_builtins.property
    @pulumi.getter(name="outputGuardrailMode")
    def output_guardrail_mode(self) -> Optional[_builtins.str]:
        """
        (Updatable) An output guardrail mode for content moderation.
        """
        return pulumi.get(self, "output_guardrail_mode")


@pulumi.output_type
class AgentAgentEndpointGuardrailConfigPersonallyIdentifiableInformationConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "inputGuardrailMode":
            suggest = "input_guardrail_mode"
        elif key == "outputGuardrailMode":
            suggest = "output_guardrail_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AgentAgentEndpointGuardrailConfigPersonallyIdentifiableInformationConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AgentAgentEndpointGuardrailConfigPersonallyIdentifiableInformationConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AgentAgentEndpointGuardrailConfigPersonallyIdentifiableInformationConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 input_guardrail_mode: Optional[_builtins.str] = None,
                 output_guardrail_mode: Optional[_builtins.str] = None):
        """
        :param _builtins.str input_guardrail_mode: (Updatable) An input guardrail mode for personally identifiable information.
        :param _builtins.str output_guardrail_mode: (Updatable) An output guardrail mode for personally identifiable information.
        """
        if input_guardrail_mode is not None:
            pulumi.set(__self__, "input_guardrail_mode", input_guardrail_mode)
        if output_guardrail_mode is not None:
            pulumi.set(__self__, "output_guardrail_mode", output_guardrail_mode)

    @_builtins.property
    @pulumi.getter(name="inputGuardrailMode")
    def input_guardrail_mode(self) -> Optional[_builtins.str]:
        """
        (Updatable) An input guardrail mode for personally identifiable information.
        """
        return pulumi.get(self, "input_guardrail_mode")

    @_builtins.property
    @pulumi.getter(name="outputGuardrailMode")
    def output_guardrail_mode(self) -> Optional[_builtins.str]:
        """
        (Updatable) An output guardrail mode for personally identifiable information.
        """
        return pulumi.get(self, "output_guardrail_mode")


@pulumi.output_type
class AgentAgentEndpointGuardrailConfigPromptInjectionConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "inputGuardrailMode":
            suggest = "input_guardrail_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AgentAgentEndpointGuardrailConfigPromptInjectionConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AgentAgentEndpointGuardrailConfigPromptInjectionConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AgentAgentEndpointGuardrailConfigPromptInjectionConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 input_guardrail_mode: Optional[_builtins.str] = None):
        """
        :param _builtins.str input_guardrail_mode: (Updatable) An input guardrail mode for prompt injection.
        """
        if input_guardrail_mode is not None:
            pulumi.set(__self__, "input_guardrail_mode", input_guardrail_mode)

    @_builtins.property
    @pulumi.getter(name="inputGuardrailMode")
    def input_guardrail_mode(self) -> Optional[_builtins.str]:
        """
        (Updatable) An input guardrail mode for prompt injection.
        """
        return pulumi.get(self, "input_guardrail_mode")


@pulumi.output_type
class AgentAgentEndpointHumanInputConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "shouldEnableHumanInput":
            suggest = "should_enable_human_input"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AgentAgentEndpointHumanInputConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AgentAgentEndpointHumanInputConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AgentAgentEndpointHumanInputConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 should_enable_human_input: _builtins.bool):
        """
        :param _builtins.bool should_enable_human_input: (Updatable) The Agent will request for human input for disambiguation or additional information gathering if this is enabled.
        """
        pulumi.set(__self__, "should_enable_human_input", should_enable_human_input)

    @_builtins.property
    @pulumi.getter(name="shouldEnableHumanInput")
    def should_enable_human_input(self) -> _builtins.bool:
        """
        (Updatable) The Agent will request for human input for disambiguation or additional information gathering if this is enabled.
        """
        return pulumi.get(self, "should_enable_human_input")


@pulumi.output_type
class AgentAgentEndpointOutputConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "outputLocation":
            suggest = "output_location"
        elif key == "retentionPeriodInMinutes":
            suggest = "retention_period_in_minutes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AgentAgentEndpointOutputConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AgentAgentEndpointOutputConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AgentAgentEndpointOutputConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 output_location: 'outputs.AgentAgentEndpointOutputConfigOutputLocation',
                 retention_period_in_minutes: Optional[_builtins.int] = None):
        """
        :param 'AgentAgentEndpointOutputConfigOutputLocationArgs' output_location: (Updatable) Location of the output.
        :param _builtins.int retention_period_in_minutes: (Updatable) Retention duration of the output data.
        """
        pulumi.set(__self__, "output_location", output_location)
        if retention_period_in_minutes is not None:
            pulumi.set(__self__, "retention_period_in_minutes", retention_period_in_minutes)

    @_builtins.property
    @pulumi.getter(name="outputLocation")
    def output_location(self) -> 'outputs.AgentAgentEndpointOutputConfigOutputLocation':
        """
        (Updatable) Location of the output.
        """
        return pulumi.get(self, "output_location")

    @_builtins.property
    @pulumi.getter(name="retentionPeriodInMinutes")
    def retention_period_in_minutes(self) -> Optional[_builtins.int]:
        """
        (Updatable) Retention duration of the output data.
        """
        return pulumi.get(self, "retention_period_in_minutes")


@pulumi.output_type
class AgentAgentEndpointOutputConfigOutputLocation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "outputLocationType":
            suggest = "output_location_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AgentAgentEndpointOutputConfigOutputLocation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AgentAgentEndpointOutputConfigOutputLocation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AgentAgentEndpointOutputConfigOutputLocation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bucket: _builtins.str,
                 namespace: _builtins.str,
                 output_location_type: _builtins.str,
                 prefix: Optional[_builtins.str] = None):
        """
        :param _builtins.str bucket: (Updatable) The name of the bucket.
        :param _builtins.str namespace: (Updatable) The namespace of the object storage.
        :param _builtins.str output_location_type: (Updatable) Type of OutputLocation.
        :param _builtins.str prefix: (Updatable) The prefix of the object storage.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "output_location_type", output_location_type)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> _builtins.str:
        """
        (Updatable) The name of the bucket.
        """
        return pulumi.get(self, "bucket")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        """
        (Updatable) The namespace of the object storage.
        """
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter(name="outputLocationType")
    def output_location_type(self) -> _builtins.str:
        """
        (Updatable) Type of OutputLocation.
        """
        return pulumi.get(self, "output_location_type")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> Optional[_builtins.str]:
        """
        (Updatable) The prefix of the object storage.
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class AgentAgentEndpointSessionConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "idleTimeoutInSeconds":
            suggest = "idle_timeout_in_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AgentAgentEndpointSessionConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AgentAgentEndpointSessionConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AgentAgentEndpointSessionConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 idle_timeout_in_seconds: Optional[_builtins.int] = None):
        """
        :param _builtins.int idle_timeout_in_seconds: (Updatable) The session will become inactive after this timeout.
        """
        if idle_timeout_in_seconds is not None:
            pulumi.set(__self__, "idle_timeout_in_seconds", idle_timeout_in_seconds)

    @_builtins.property
    @pulumi.getter(name="idleTimeoutInSeconds")
    def idle_timeout_in_seconds(self) -> Optional[_builtins.int]:
        """
        (Updatable) The session will become inactive after this timeout.
        """
        return pulumi.get(self, "idle_timeout_in_seconds")


@pulumi.output_type
class AgentAgentLlmConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "routingLlmCustomization":
            suggest = "routing_llm_customization"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AgentAgentLlmConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AgentAgentLlmConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AgentAgentLlmConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 routing_llm_customization: Optional['outputs.AgentAgentLlmConfigRoutingLlmCustomization'] = None):
        """
        :param 'AgentAgentLlmConfigRoutingLlmCustomizationArgs' routing_llm_customization: (Updatable) Configuration to customize LLM.
        """
        if routing_llm_customization is not None:
            pulumi.set(__self__, "routing_llm_customization", routing_llm_customization)

    @_builtins.property
    @pulumi.getter(name="routingLlmCustomization")
    def routing_llm_customization(self) -> Optional['outputs.AgentAgentLlmConfigRoutingLlmCustomization']:
        """
        (Updatable) Configuration to customize LLM.
        """
        return pulumi.get(self, "routing_llm_customization")


@pulumi.output_type
class AgentAgentLlmConfigRoutingLlmCustomization(dict):
    def __init__(__self__, *,
                 instruction: Optional[_builtins.str] = None):
        """
        :param _builtins.str instruction: (Updatable) If specified, the default instruction is replaced with provided instruction.
        """
        if instruction is not None:
            pulumi.set(__self__, "instruction", instruction)

    @_builtins.property
    @pulumi.getter
    def instruction(self) -> Optional[_builtins.str]:
        """
        (Updatable) If specified, the default instruction is replaced with provided instruction.
        """
        return pulumi.get(self, "instruction")


@pulumi.output_type
class AgentDataIngestionJobDataIngestionJobStatistic(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "durationInSeconds":
            suggest = "duration_in_seconds"
        elif key == "numberOfFailedFiles":
            suggest = "number_of_failed_files"
        elif key == "numberOfIngestedFiles":
            suggest = "number_of_ingested_files"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AgentDataIngestionJobDataIngestionJobStatistic. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AgentDataIngestionJobDataIngestionJobStatistic.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AgentDataIngestionJobDataIngestionJobStatistic.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration_in_seconds: Optional[_builtins.int] = None,
                 number_of_failed_files: Optional[_builtins.int] = None,
                 number_of_ingested_files: Optional[_builtins.int] = None):
        """
        :param _builtins.int duration_in_seconds: The duration of this ingestion job.
        :param _builtins.int number_of_failed_files: The number of files that have failed during the ingestion.
        :param _builtins.int number_of_ingested_files: The number of files that have been successfully ingested during the ingestion.
        """
        if duration_in_seconds is not None:
            pulumi.set(__self__, "duration_in_seconds", duration_in_seconds)
        if number_of_failed_files is not None:
            pulumi.set(__self__, "number_of_failed_files", number_of_failed_files)
        if number_of_ingested_files is not None:
            pulumi.set(__self__, "number_of_ingested_files", number_of_ingested_files)

    @_builtins.property
    @pulumi.getter(name="durationInSeconds")
    def duration_in_seconds(self) -> Optional[_builtins.int]:
        """
        The duration of this ingestion job.
        """
        return pulumi.get(self, "duration_in_seconds")

    @_builtins.property
    @pulumi.getter(name="numberOfFailedFiles")
    def number_of_failed_files(self) -> Optional[_builtins.int]:
        """
        The number of files that have failed during the ingestion.
        """
        return pulumi.get(self, "number_of_failed_files")

    @_builtins.property
    @pulumi.getter(name="numberOfIngestedFiles")
    def number_of_ingested_files(self) -> Optional[_builtins.int]:
        """
        The number of files that have been successfully ingested during the ingestion.
        """
        return pulumi.get(self, "number_of_ingested_files")


@pulumi.output_type
class AgentDataSourceDataSourceConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSourceConfigType":
            suggest = "data_source_config_type"
        elif key == "objectStoragePrefixes":
            suggest = "object_storage_prefixes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AgentDataSourceDataSourceConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AgentDataSourceDataSourceConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AgentDataSourceDataSourceConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source_config_type: _builtins.str,
                 object_storage_prefixes: Sequence['outputs.AgentDataSourceDataSourceConfigObjectStoragePrefix']):
        """
        :param _builtins.str data_source_config_type: (Updatable) The type of the tool. The allowed values are:
               * `OCI_OBJECT_STORAGE`: The data source is Oracle Cloud Infrastructure Object Storage.
        :param Sequence['AgentDataSourceDataSourceConfigObjectStoragePrefixArgs'] object_storage_prefixes: (Updatable) The locations of data items in Object Storage, can either be an object (File) or a prefix (folder).
        """
        pulumi.set(__self__, "data_source_config_type", data_source_config_type)
        pulumi.set(__self__, "object_storage_prefixes", object_storage_prefixes)

    @_builtins.property
    @pulumi.getter(name="dataSourceConfigType")
    def data_source_config_type(self) -> _builtins.str:
        """
        (Updatable) The type of the tool. The allowed values are:
        * `OCI_OBJECT_STORAGE`: The data source is Oracle Cloud Infrastructure Object Storage.
        """
        return pulumi.get(self, "data_source_config_type")

    @_builtins.property
    @pulumi.getter(name="objectStoragePrefixes")
    def object_storage_prefixes(self) -> Sequence['outputs.AgentDataSourceDataSourceConfigObjectStoragePrefix']:
        """
        (Updatable) The locations of data items in Object Storage, can either be an object (File) or a prefix (folder).
        """
        return pulumi.get(self, "object_storage_prefixes")


@pulumi.output_type
class AgentDataSourceDataSourceConfigObjectStoragePrefix(dict):
    def __init__(__self__, *,
                 bucket: _builtins.str,
                 namespace: _builtins.str,
                 prefix: Optional[_builtins.str] = None):
        """
        :param _builtins.str bucket: (Updatable) The bucket name of an object.
        :param _builtins.str namespace: (Updatable) The namespace name of an object.
        :param _builtins.str prefix: (Updatable) The name of the object (file) or prefix (folder).
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "namespace", namespace)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> _builtins.str:
        """
        (Updatable) The bucket name of an object.
        """
        return pulumi.get(self, "bucket")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        """
        (Updatable) The namespace name of an object.
        """
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> Optional[_builtins.str]:
        """
        (Updatable) The name of the object (file) or prefix (folder).
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class AgentKnowledgeBaseIndexConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "indexConfigType":
            suggest = "index_config_type"
        elif key == "clusterId":
            suggest = "cluster_id"
        elif key == "databaseConnection":
            suggest = "database_connection"
        elif key == "databaseFunctions":
            suggest = "database_functions"
        elif key == "secretDetail":
            suggest = "secret_detail"
        elif key == "shouldEnableHybridSearch":
            suggest = "should_enable_hybrid_search"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AgentKnowledgeBaseIndexConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AgentKnowledgeBaseIndexConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AgentKnowledgeBaseIndexConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index_config_type: _builtins.str,
                 cluster_id: Optional[_builtins.str] = None,
                 database_connection: Optional['outputs.AgentKnowledgeBaseIndexConfigDatabaseConnection'] = None,
                 database_functions: Optional[Sequence['outputs.AgentKnowledgeBaseIndexConfigDatabaseFunction']] = None,
                 indexes: Optional[Sequence['outputs.AgentKnowledgeBaseIndexConfigIndex']] = None,
                 secret_detail: Optional['outputs.AgentKnowledgeBaseIndexConfigSecretDetail'] = None,
                 should_enable_hybrid_search: Optional[_builtins.bool] = None):
        """
        :param _builtins.str index_config_type: (Updatable) The type of index. The allowed values are:
               * `DEFAULT_INDEX_CONFIG`: DefaultIndexConfig allows the service to create and manage vector store on behalf of the customer.
               * `OCI_OPEN_SEARCH_INDEX_CONFIG`: OciOpenSearchIndexConfig allows customer to configure their OpenSearch cluster.
               * `OCI_DATABASE_CONFIG`: OciDatabaseConfig allows customer to configure their Database.
        :param _builtins.str cluster_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the OpenSearch Cluster.
        :param 'AgentKnowledgeBaseIndexConfigDatabaseConnectionArgs' database_connection: (Updatable) **DatabaseConnection**
               
               The connection type for Databases.
        :param Sequence['AgentKnowledgeBaseIndexConfigDatabaseFunctionArgs'] database_functions: (Updatable) Array of Database functions to be used.
        :param Sequence['AgentKnowledgeBaseIndexConfigIndexArgs'] indexes: (Updatable) Index configuration for open search.
        :param 'AgentKnowledgeBaseIndexConfigSecretDetailArgs' secret_detail: (Updatable) **SecretDetail**
               
               The details of configured security configuration on OpenSearch.
        :param _builtins.bool should_enable_hybrid_search: (Updatable) Whether to enable Hybrid search in service managed OpenSearch.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        pulumi.set(__self__, "index_config_type", index_config_type)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if database_connection is not None:
            pulumi.set(__self__, "database_connection", database_connection)
        if database_functions is not None:
            pulumi.set(__self__, "database_functions", database_functions)
        if indexes is not None:
            pulumi.set(__self__, "indexes", indexes)
        if secret_detail is not None:
            pulumi.set(__self__, "secret_detail", secret_detail)
        if should_enable_hybrid_search is not None:
            pulumi.set(__self__, "should_enable_hybrid_search", should_enable_hybrid_search)

    @_builtins.property
    @pulumi.getter(name="indexConfigType")
    def index_config_type(self) -> _builtins.str:
        """
        (Updatable) The type of index. The allowed values are:
        * `DEFAULT_INDEX_CONFIG`: DefaultIndexConfig allows the service to create and manage vector store on behalf of the customer.
        * `OCI_OPEN_SEARCH_INDEX_CONFIG`: OciOpenSearchIndexConfig allows customer to configure their OpenSearch cluster.
        * `OCI_DATABASE_CONFIG`: OciDatabaseConfig allows customer to configure their Database.
        """
        return pulumi.get(self, "index_config_type")

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[_builtins.str]:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the OpenSearch Cluster.
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter(name="databaseConnection")
    def database_connection(self) -> Optional['outputs.AgentKnowledgeBaseIndexConfigDatabaseConnection']:
        """
        (Updatable) **DatabaseConnection**

        The connection type for Databases.
        """
        return pulumi.get(self, "database_connection")

    @_builtins.property
    @pulumi.getter(name="databaseFunctions")
    def database_functions(self) -> Optional[Sequence['outputs.AgentKnowledgeBaseIndexConfigDatabaseFunction']]:
        """
        (Updatable) Array of Database functions to be used.
        """
        return pulumi.get(self, "database_functions")

    @_builtins.property
    @pulumi.getter
    def indexes(self) -> Optional[Sequence['outputs.AgentKnowledgeBaseIndexConfigIndex']]:
        """
        (Updatable) Index configuration for open search.
        """
        return pulumi.get(self, "indexes")

    @_builtins.property
    @pulumi.getter(name="secretDetail")
    def secret_detail(self) -> Optional['outputs.AgentKnowledgeBaseIndexConfigSecretDetail']:
        """
        (Updatable) **SecretDetail**

        The details of configured security configuration on OpenSearch.
        """
        return pulumi.get(self, "secret_detail")

    @_builtins.property
    @pulumi.getter(name="shouldEnableHybridSearch")
    def should_enable_hybrid_search(self) -> Optional[_builtins.bool]:
        """
        (Updatable) Whether to enable Hybrid search in service managed OpenSearch.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "should_enable_hybrid_search")


@pulumi.output_type
class AgentKnowledgeBaseIndexConfigDatabaseConnection(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectionId":
            suggest = "connection_id"
        elif key == "connectionType":
            suggest = "connection_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AgentKnowledgeBaseIndexConfigDatabaseConnection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AgentKnowledgeBaseIndexConfigDatabaseConnection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AgentKnowledgeBaseIndexConfigDatabaseConnection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connection_id: _builtins.str,
                 connection_type: _builtins.str):
        """
        :param _builtins.str connection_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Tools Connection.
        :param _builtins.str connection_type: (Updatable) The type of Database connection. The allowed values are:
               * `DATABASE_TOOL_CONNECTION`: This allows the service to connect to a vector store via a Database Tools Connection.
        """
        pulumi.set(__self__, "connection_id", connection_id)
        pulumi.set(__self__, "connection_type", connection_type)

    @_builtins.property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> _builtins.str:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Tools Connection.
        """
        return pulumi.get(self, "connection_id")

    @_builtins.property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> _builtins.str:
        """
        (Updatable) The type of Database connection. The allowed values are:
        * `DATABASE_TOOL_CONNECTION`: This allows the service to connect to a vector store via a Database Tools Connection.
        """
        return pulumi.get(self, "connection_type")


@pulumi.output_type
class AgentKnowledgeBaseIndexConfigDatabaseFunction(dict):
    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: (Updatable) The name of the Database function.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        (Updatable) The name of the Database function.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class AgentKnowledgeBaseIndexConfigIndex(dict):
    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 schema: Optional['outputs.AgentKnowledgeBaseIndexConfigIndexSchema'] = None):
        """
        :param _builtins.str name: (Updatable) The index name in opensearch.
        :param 'AgentKnowledgeBaseIndexConfigIndexSchemaArgs' schema: (Updatable) **IndexSchema**
               
               The index schema details.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        (Updatable) The index name in opensearch.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def schema(self) -> Optional['outputs.AgentKnowledgeBaseIndexConfigIndexSchema']:
        """
        (Updatable) **IndexSchema**

        The index schema details.
        """
        return pulumi.get(self, "schema")


@pulumi.output_type
class AgentKnowledgeBaseIndexConfigIndexSchema(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bodyKey":
            suggest = "body_key"
        elif key == "embeddingBodyKey":
            suggest = "embedding_body_key"
        elif key == "titleKey":
            suggest = "title_key"
        elif key == "urlKey":
            suggest = "url_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AgentKnowledgeBaseIndexConfigIndexSchema. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AgentKnowledgeBaseIndexConfigIndexSchema.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AgentKnowledgeBaseIndexConfigIndexSchema.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 body_key: Optional[_builtins.str] = None,
                 embedding_body_key: Optional[_builtins.str] = None,
                 title_key: Optional[_builtins.str] = None,
                 url_key: Optional[_builtins.str] = None):
        """
        :param _builtins.str body_key: (Updatable) Body key name.
        :param _builtins.str embedding_body_key: (Updatable) Field within customer managed Oracle Cloud Infrastructure OpenSearch document containing the vector embedding for queries.
        :param _builtins.str title_key: (Updatable) Title key that stores the Title of a document, if available.
        :param _builtins.str url_key: (Updatable) URL key that stores the URL of a document, if available.
        """
        if body_key is not None:
            pulumi.set(__self__, "body_key", body_key)
        if embedding_body_key is not None:
            pulumi.set(__self__, "embedding_body_key", embedding_body_key)
        if title_key is not None:
            pulumi.set(__self__, "title_key", title_key)
        if url_key is not None:
            pulumi.set(__self__, "url_key", url_key)

    @_builtins.property
    @pulumi.getter(name="bodyKey")
    def body_key(self) -> Optional[_builtins.str]:
        """
        (Updatable) Body key name.
        """
        return pulumi.get(self, "body_key")

    @_builtins.property
    @pulumi.getter(name="embeddingBodyKey")
    def embedding_body_key(self) -> Optional[_builtins.str]:
        """
        (Updatable) Field within customer managed Oracle Cloud Infrastructure OpenSearch document containing the vector embedding for queries.
        """
        return pulumi.get(self, "embedding_body_key")

    @_builtins.property
    @pulumi.getter(name="titleKey")
    def title_key(self) -> Optional[_builtins.str]:
        """
        (Updatable) Title key that stores the Title of a document, if available.
        """
        return pulumi.get(self, "title_key")

    @_builtins.property
    @pulumi.getter(name="urlKey")
    def url_key(self) -> Optional[_builtins.str]:
        """
        (Updatable) URL key that stores the URL of a document, if available.
        """
        return pulumi.get(self, "url_key")


@pulumi.output_type
class AgentKnowledgeBaseIndexConfigSecretDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vaultSecretId":
            suggest = "vault_secret_id"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "idcsUrl":
            suggest = "idcs_url"
        elif key == "scopeUrl":
            suggest = "scope_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AgentKnowledgeBaseIndexConfigSecretDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AgentKnowledgeBaseIndexConfigSecretDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AgentKnowledgeBaseIndexConfigSecretDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: _builtins.str,
                 vault_secret_id: _builtins.str,
                 client_id: Optional[_builtins.str] = None,
                 idcs_url: Optional[_builtins.str] = None,
                 scope_url: Optional[_builtins.str] = None):
        """
        :param _builtins.str type: (Updatable) The type of OpenID. The allowed values are:
               * `IDCS_SECRET`: The OpenID configuration used is OpenSearch is IDCS.
               * `BASIC_AUTH_SECRET`: Basic authentication use for OpenSearch
        :param _builtins.str vault_secret_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the secret for basic authentication.
        :param _builtins.str client_id: (Updatable) The IDCS Connect clientId.
        :param _builtins.str idcs_url: (Updatable) The URL represent authentication url of the IDCS.
        :param _builtins.str scope_url: (Updatable) Fully qualified scope url
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vault_secret_id", vault_secret_id)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if idcs_url is not None:
            pulumi.set(__self__, "idcs_url", idcs_url)
        if scope_url is not None:
            pulumi.set(__self__, "scope_url", scope_url)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        (Updatable) The type of OpenID. The allowed values are:
        * `IDCS_SECRET`: The OpenID configuration used is OpenSearch is IDCS.
        * `BASIC_AUTH_SECRET`: Basic authentication use for OpenSearch
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="vaultSecretId")
    def vault_secret_id(self) -> _builtins.str:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the secret for basic authentication.
        """
        return pulumi.get(self, "vault_secret_id")

    @_builtins.property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[_builtins.str]:
        """
        (Updatable) The IDCS Connect clientId.
        """
        return pulumi.get(self, "client_id")

    @_builtins.property
    @pulumi.getter(name="idcsUrl")
    def idcs_url(self) -> Optional[_builtins.str]:
        """
        (Updatable) The URL represent authentication url of the IDCS.
        """
        return pulumi.get(self, "idcs_url")

    @_builtins.property
    @pulumi.getter(name="scopeUrl")
    def scope_url(self) -> Optional[_builtins.str]:
        """
        (Updatable) Fully qualified scope url
        """
        return pulumi.get(self, "scope_url")


@pulumi.output_type
class AgentToolToolConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "toolConfigType":
            suggest = "tool_config_type"
        elif key == "databaseConnection":
            suggest = "database_connection"
        elif key == "databaseSchema":
            suggest = "database_schema"
        elif key == "generationLlmCustomization":
            suggest = "generation_llm_customization"
        elif key == "iclExamples":
            suggest = "icl_examples"
        elif key == "knowledgeBaseConfigs":
            suggest = "knowledge_base_configs"
        elif key == "modelSize":
            suggest = "model_size"
        elif key == "shouldEnableSelfCorrection":
            suggest = "should_enable_self_correction"
        elif key == "shouldEnableSqlExecution":
            suggest = "should_enable_sql_execution"
        elif key == "tableAndColumnDescription":
            suggest = "table_and_column_description"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AgentToolToolConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AgentToolToolConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AgentToolToolConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tool_config_type: _builtins.str,
                 database_connection: Optional['outputs.AgentToolToolConfigDatabaseConnection'] = None,
                 database_schema: Optional['outputs.AgentToolToolConfigDatabaseSchema'] = None,
                 dialect: Optional[_builtins.str] = None,
                 function: Optional['outputs.AgentToolToolConfigFunction'] = None,
                 generation_llm_customization: Optional['outputs.AgentToolToolConfigGenerationLlmCustomization'] = None,
                 icl_examples: Optional['outputs.AgentToolToolConfigIclExamples'] = None,
                 knowledge_base_configs: Optional[Sequence['outputs.AgentToolToolConfigKnowledgeBaseConfig']] = None,
                 model_size: Optional[_builtins.str] = None,
                 should_enable_self_correction: Optional[_builtins.bool] = None,
                 should_enable_sql_execution: Optional[_builtins.bool] = None,
                 table_and_column_description: Optional['outputs.AgentToolToolConfigTableAndColumnDescription'] = None):
        """
        :param _builtins.str tool_config_type: (Updatable) The type of the Tool config. The allowed values are:
               * `SQL_TOOL_CONFIG`: The config for sql Tool.
               * `RAG_TOOL_CONFIG`: The config for rag Tool.
               * FUNCTION_CALLING_TOOL_CONFIG: The config for Function calling Tool.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param 'AgentToolToolConfigDatabaseConnectionArgs' database_connection: (Updatable) The connection type for Databases.
        :param 'AgentToolToolConfigDatabaseSchemaArgs' database_schema: (Updatable) The input location definition.
        :param _builtins.str dialect: (Updatable) Dialect to be used for SQL generation.
        :param 'AgentToolToolConfigFunctionArgs' function: (Updatable) Details of Function for Function calling tool.
        :param 'AgentToolToolConfigGenerationLlmCustomizationArgs' generation_llm_customization: (Updatable) Configuration to customize LLM.
        :param 'AgentToolToolConfigIclExamplesArgs' icl_examples: (Updatable) The input location definition.
        :param Sequence['AgentToolToolConfigKnowledgeBaseConfigArgs'] knowledge_base_configs: (Updatable) The KnowledgeBase configurations that this RAG Tool uses
        :param _builtins.str model_size: (Updatable) Size of the model.
        :param _builtins.bool should_enable_self_correction: (Updatable) To enable/disable self correction.
        :param _builtins.bool should_enable_sql_execution: (Updatable) To enable/disable SQL execution.
        :param 'AgentToolToolConfigTableAndColumnDescriptionArgs' table_and_column_description: (Updatable) The input location definition.
        """
        pulumi.set(__self__, "tool_config_type", tool_config_type)
        if database_connection is not None:
            pulumi.set(__self__, "database_connection", database_connection)
        if database_schema is not None:
            pulumi.set(__self__, "database_schema", database_schema)
        if dialect is not None:
            pulumi.set(__self__, "dialect", dialect)
        if function is not None:
            pulumi.set(__self__, "function", function)
        if generation_llm_customization is not None:
            pulumi.set(__self__, "generation_llm_customization", generation_llm_customization)
        if icl_examples is not None:
            pulumi.set(__self__, "icl_examples", icl_examples)
        if knowledge_base_configs is not None:
            pulumi.set(__self__, "knowledge_base_configs", knowledge_base_configs)
        if model_size is not None:
            pulumi.set(__self__, "model_size", model_size)
        if should_enable_self_correction is not None:
            pulumi.set(__self__, "should_enable_self_correction", should_enable_self_correction)
        if should_enable_sql_execution is not None:
            pulumi.set(__self__, "should_enable_sql_execution", should_enable_sql_execution)
        if table_and_column_description is not None:
            pulumi.set(__self__, "table_and_column_description", table_and_column_description)

    @_builtins.property
    @pulumi.getter(name="toolConfigType")
    def tool_config_type(self) -> _builtins.str:
        """
        (Updatable) The type of the Tool config. The allowed values are:
        * `SQL_TOOL_CONFIG`: The config for sql Tool.
        * `RAG_TOOL_CONFIG`: The config for rag Tool.
        * FUNCTION_CALLING_TOOL_CONFIG: The config for Function calling Tool.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "tool_config_type")

    @_builtins.property
    @pulumi.getter(name="databaseConnection")
    def database_connection(self) -> Optional['outputs.AgentToolToolConfigDatabaseConnection']:
        """
        (Updatable) The connection type for Databases.
        """
        return pulumi.get(self, "database_connection")

    @_builtins.property
    @pulumi.getter(name="databaseSchema")
    def database_schema(self) -> Optional['outputs.AgentToolToolConfigDatabaseSchema']:
        """
        (Updatable) The input location definition.
        """
        return pulumi.get(self, "database_schema")

    @_builtins.property
    @pulumi.getter
    def dialect(self) -> Optional[_builtins.str]:
        """
        (Updatable) Dialect to be used for SQL generation.
        """
        return pulumi.get(self, "dialect")

    @_builtins.property
    @pulumi.getter
    def function(self) -> Optional['outputs.AgentToolToolConfigFunction']:
        """
        (Updatable) Details of Function for Function calling tool.
        """
        return pulumi.get(self, "function")

    @_builtins.property
    @pulumi.getter(name="generationLlmCustomization")
    def generation_llm_customization(self) -> Optional['outputs.AgentToolToolConfigGenerationLlmCustomization']:
        """
        (Updatable) Configuration to customize LLM.
        """
        return pulumi.get(self, "generation_llm_customization")

    @_builtins.property
    @pulumi.getter(name="iclExamples")
    def icl_examples(self) -> Optional['outputs.AgentToolToolConfigIclExamples']:
        """
        (Updatable) The input location definition.
        """
        return pulumi.get(self, "icl_examples")

    @_builtins.property
    @pulumi.getter(name="knowledgeBaseConfigs")
    def knowledge_base_configs(self) -> Optional[Sequence['outputs.AgentToolToolConfigKnowledgeBaseConfig']]:
        """
        (Updatable) The KnowledgeBase configurations that this RAG Tool uses
        """
        return pulumi.get(self, "knowledge_base_configs")

    @_builtins.property
    @pulumi.getter(name="modelSize")
    def model_size(self) -> Optional[_builtins.str]:
        """
        (Updatable) Size of the model.
        """
        return pulumi.get(self, "model_size")

    @_builtins.property
    @pulumi.getter(name="shouldEnableSelfCorrection")
    def should_enable_self_correction(self) -> Optional[_builtins.bool]:
        """
        (Updatable) To enable/disable self correction.
        """
        return pulumi.get(self, "should_enable_self_correction")

    @_builtins.property
    @pulumi.getter(name="shouldEnableSqlExecution")
    def should_enable_sql_execution(self) -> Optional[_builtins.bool]:
        """
        (Updatable) To enable/disable SQL execution.
        """
        return pulumi.get(self, "should_enable_sql_execution")

    @_builtins.property
    @pulumi.getter(name="tableAndColumnDescription")
    def table_and_column_description(self) -> Optional['outputs.AgentToolToolConfigTableAndColumnDescription']:
        """
        (Updatable) The input location definition.
        """
        return pulumi.get(self, "table_and_column_description")


@pulumi.output_type
class AgentToolToolConfigDatabaseConnection(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectionId":
            suggest = "connection_id"
        elif key == "connectionType":
            suggest = "connection_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AgentToolToolConfigDatabaseConnection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AgentToolToolConfigDatabaseConnection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AgentToolToolConfigDatabaseConnection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connection_id: _builtins.str,
                 connection_type: _builtins.str):
        """
        :param _builtins.str connection_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Tools Connection.
        :param _builtins.str connection_type: (Updatable) The type of Database connection. The allowed values are:
               * `DATABASE_TOOL_CONNECTION`: This allows the service to connect to a vector store via a Database Tools Connection.
        """
        pulumi.set(__self__, "connection_id", connection_id)
        pulumi.set(__self__, "connection_type", connection_type)

    @_builtins.property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> _builtins.str:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Tools Connection.
        """
        return pulumi.get(self, "connection_id")

    @_builtins.property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> _builtins.str:
        """
        (Updatable) The type of Database connection. The allowed values are:
        * `DATABASE_TOOL_CONNECTION`: This allows the service to connect to a vector store via a Database Tools Connection.
        """
        return pulumi.get(self, "connection_type")


@pulumi.output_type
class AgentToolToolConfigDatabaseSchema(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "inputLocationType":
            suggest = "input_location_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AgentToolToolConfigDatabaseSchema. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AgentToolToolConfigDatabaseSchema.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AgentToolToolConfigDatabaseSchema.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 input_location_type: _builtins.str,
                 bucket: Optional[_builtins.str] = None,
                 content: Optional[_builtins.str] = None,
                 namespace: Optional[_builtins.str] = None,
                 prefix: Optional[_builtins.str] = None):
        """
        :param _builtins.str input_location_type: (Updatable) Type of InputLocation. The allowed values are:
               * `INLINE`: The input location is inline.
               * `OBJECT_STORAGE_PREFIX`: The input location is object storage.
        :param _builtins.str bucket: (Updatable) The bucket name of an object.
        :param _builtins.str content: (Updatable) Inline content as input.
        :param _builtins.str namespace: (Updatable) The namespace name of an object.
        :param _builtins.str prefix: (Updatable) The prefix of file object(s) or folder prefix.
        """
        pulumi.set(__self__, "input_location_type", input_location_type)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @_builtins.property
    @pulumi.getter(name="inputLocationType")
    def input_location_type(self) -> _builtins.str:
        """
        (Updatable) Type of InputLocation. The allowed values are:
        * `INLINE`: The input location is inline.
        * `OBJECT_STORAGE_PREFIX`: The input location is object storage.
        """
        return pulumi.get(self, "input_location_type")

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> Optional[_builtins.str]:
        """
        (Updatable) The bucket name of an object.
        """
        return pulumi.get(self, "bucket")

    @_builtins.property
    @pulumi.getter
    def content(self) -> Optional[_builtins.str]:
        """
        (Updatable) Inline content as input.
        """
        return pulumi.get(self, "content")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> Optional[_builtins.str]:
        """
        (Updatable) The namespace name of an object.
        """
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> Optional[_builtins.str]:
        """
        (Updatable) The prefix of file object(s) or folder prefix.
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class AgentToolToolConfigFunction(dict):
    def __init__(__self__, *,
                 description: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 parameters: Optional[Mapping[str, _builtins.str]] = None):
        """
        :param _builtins.str description: (Updatable) A description of the function.
        :param _builtins.str name: (Updatable) The name of the function to invoke.
        :param Mapping[str, _builtins.str] parameters: (Updatable) The parameters the function accepts, defined using a JSON Schema object.  Refer to the guide for examples and the JSON Schema documentation for details on the format.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        (Updatable) A description of the function.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        (Updatable) The name of the function to invoke.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        (Updatable) The parameters the function accepts, defined using a JSON Schema object.  Refer to the guide for examples and the JSON Schema documentation for details on the format.
        """
        return pulumi.get(self, "parameters")


@pulumi.output_type
class AgentToolToolConfigGenerationLlmCustomization(dict):
    def __init__(__self__, *,
                 instruction: Optional[_builtins.str] = None):
        """
        :param _builtins.str instruction: (Updatable) If specified, the default instruction is replaced with provided instruction.
        """
        if instruction is not None:
            pulumi.set(__self__, "instruction", instruction)

    @_builtins.property
    @pulumi.getter
    def instruction(self) -> Optional[_builtins.str]:
        """
        (Updatable) If specified, the default instruction is replaced with provided instruction.
        """
        return pulumi.get(self, "instruction")


@pulumi.output_type
class AgentToolToolConfigIclExamples(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "inputLocationType":
            suggest = "input_location_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AgentToolToolConfigIclExamples. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AgentToolToolConfigIclExamples.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AgentToolToolConfigIclExamples.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 input_location_type: _builtins.str,
                 bucket: Optional[_builtins.str] = None,
                 content: Optional[_builtins.str] = None,
                 namespace: Optional[_builtins.str] = None,
                 prefix: Optional[_builtins.str] = None):
        """
        :param _builtins.str input_location_type: (Updatable) Type of InputLocation. The allowed values are:
               * `INLINE`: The input location is inline.
               * `OBJECT_STORAGE_PREFIX`: The input location is object storage.
        :param _builtins.str bucket: (Updatable) The bucket name of an object.
        :param _builtins.str content: (Updatable) Inline content as input.
        :param _builtins.str namespace: (Updatable) The namespace name of an object.
        :param _builtins.str prefix: (Updatable) The prefix of file object(s) or folder prefix.
        """
        pulumi.set(__self__, "input_location_type", input_location_type)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @_builtins.property
    @pulumi.getter(name="inputLocationType")
    def input_location_type(self) -> _builtins.str:
        """
        (Updatable) Type of InputLocation. The allowed values are:
        * `INLINE`: The input location is inline.
        * `OBJECT_STORAGE_PREFIX`: The input location is object storage.
        """
        return pulumi.get(self, "input_location_type")

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> Optional[_builtins.str]:
        """
        (Updatable) The bucket name of an object.
        """
        return pulumi.get(self, "bucket")

    @_builtins.property
    @pulumi.getter
    def content(self) -> Optional[_builtins.str]:
        """
        (Updatable) Inline content as input.
        """
        return pulumi.get(self, "content")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> Optional[_builtins.str]:
        """
        (Updatable) The namespace name of an object.
        """
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> Optional[_builtins.str]:
        """
        (Updatable) The prefix of file object(s) or folder prefix.
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class AgentToolToolConfigKnowledgeBaseConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "knowledgeBaseId":
            suggest = "knowledge_base_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AgentToolToolConfigKnowledgeBaseConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AgentToolToolConfigKnowledgeBaseConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AgentToolToolConfigKnowledgeBaseConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 knowledge_base_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str knowledge_base_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the knowledgeBase this RAG Tool uses
        """
        if knowledge_base_id is not None:
            pulumi.set(__self__, "knowledge_base_id", knowledge_base_id)

    @_builtins.property
    @pulumi.getter(name="knowledgeBaseId")
    def knowledge_base_id(self) -> Optional[_builtins.str]:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the knowledgeBase this RAG Tool uses
        """
        return pulumi.get(self, "knowledge_base_id")


@pulumi.output_type
class AgentToolToolConfigTableAndColumnDescription(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "inputLocationType":
            suggest = "input_location_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AgentToolToolConfigTableAndColumnDescription. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AgentToolToolConfigTableAndColumnDescription.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AgentToolToolConfigTableAndColumnDescription.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 input_location_type: _builtins.str,
                 bucket: Optional[_builtins.str] = None,
                 content: Optional[_builtins.str] = None,
                 namespace: Optional[_builtins.str] = None,
                 prefix: Optional[_builtins.str] = None):
        """
        :param _builtins.str input_location_type: (Updatable) Type of InputLocation. The allowed values are:
               * `INLINE`: The input location is inline.
               * `OBJECT_STORAGE_PREFIX`: The input location is object storage.
        :param _builtins.str bucket: (Updatable) The bucket name of an object.
        :param _builtins.str content: (Updatable) Inline content as input.
        :param _builtins.str namespace: (Updatable) The namespace name of an object.
        :param _builtins.str prefix: (Updatable) The prefix of file object(s) or folder prefix.
        """
        pulumi.set(__self__, "input_location_type", input_location_type)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @_builtins.property
    @pulumi.getter(name="inputLocationType")
    def input_location_type(self) -> _builtins.str:
        """
        (Updatable) Type of InputLocation. The allowed values are:
        * `INLINE`: The input location is inline.
        * `OBJECT_STORAGE_PREFIX`: The input location is object storage.
        """
        return pulumi.get(self, "input_location_type")

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> Optional[_builtins.str]:
        """
        (Updatable) The bucket name of an object.
        """
        return pulumi.get(self, "bucket")

    @_builtins.property
    @pulumi.getter
    def content(self) -> Optional[_builtins.str]:
        """
        (Updatable) Inline content as input.
        """
        return pulumi.get(self, "content")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> Optional[_builtins.str]:
        """
        (Updatable) The namespace name of an object.
        """
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> Optional[_builtins.str]:
        """
        (Updatable) The prefix of file object(s) or folder prefix.
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class DedicatedAiClusterCapacity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "capacityType":
            suggest = "capacity_type"
        elif key == "totalEndpointCapacity":
            suggest = "total_endpoint_capacity"
        elif key == "usedEndpointCapacity":
            suggest = "used_endpoint_capacity"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DedicatedAiClusterCapacity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DedicatedAiClusterCapacity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DedicatedAiClusterCapacity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 capacity_type: Optional[_builtins.str] = None,
                 total_endpoint_capacity: Optional[_builtins.int] = None,
                 used_endpoint_capacity: Optional[_builtins.int] = None):
        """
        :param _builtins.str capacity_type: The type of the dedicated AI cluster capacity.
        :param _builtins.int total_endpoint_capacity: The total number of endpoints that can be hosted on this dedicated AI cluster.
        :param _builtins.int used_endpoint_capacity: The number of endpoints hosted on this dedicated AI cluster.
        """
        if capacity_type is not None:
            pulumi.set(__self__, "capacity_type", capacity_type)
        if total_endpoint_capacity is not None:
            pulumi.set(__self__, "total_endpoint_capacity", total_endpoint_capacity)
        if used_endpoint_capacity is not None:
            pulumi.set(__self__, "used_endpoint_capacity", used_endpoint_capacity)

    @_builtins.property
    @pulumi.getter(name="capacityType")
    def capacity_type(self) -> Optional[_builtins.str]:
        """
        The type of the dedicated AI cluster capacity.
        """
        return pulumi.get(self, "capacity_type")

    @_builtins.property
    @pulumi.getter(name="totalEndpointCapacity")
    def total_endpoint_capacity(self) -> Optional[_builtins.int]:
        """
        The total number of endpoints that can be hosted on this dedicated AI cluster.
        """
        return pulumi.get(self, "total_endpoint_capacity")

    @_builtins.property
    @pulumi.getter(name="usedEndpointCapacity")
    def used_endpoint_capacity(self) -> Optional[_builtins.int]:
        """
        The number of endpoints hosted on this dedicated AI cluster.
        """
        return pulumi.get(self, "used_endpoint_capacity")


@pulumi.output_type
class EndpointContentModerationConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isEnabled":
            suggest = "is_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointContentModerationConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointContentModerationConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointContentModerationConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_enabled: _builtins.bool):
        """
        :param _builtins.bool is_enabled: (Updatable) Whether to enable the content moderation feature.
        """
        pulumi.set(__self__, "is_enabled", is_enabled)

    @_builtins.property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> _builtins.bool:
        """
        (Updatable) Whether to enable the content moderation feature.
        """
        return pulumi.get(self, "is_enabled")


@pulumi.output_type
class ModelFineTuneDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dedicatedAiClusterId":
            suggest = "dedicated_ai_cluster_id"
        elif key == "trainingDataset":
            suggest = "training_dataset"
        elif key == "trainingConfig":
            suggest = "training_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelFineTuneDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelFineTuneDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelFineTuneDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dedicated_ai_cluster_id: _builtins.str,
                 training_dataset: 'outputs.ModelFineTuneDetailsTrainingDataset',
                 training_config: Optional['outputs.ModelFineTuneDetailsTrainingConfig'] = None):
        """
        :param _builtins.str dedicated_ai_cluster_id: The OCID of the dedicated AI cluster this fine-tuning runs on.
        :param 'ModelFineTuneDetailsTrainingDatasetArgs' training_dataset: The dataset used to fine-tune the model. 
               
               Only one dataset is allowed per custom model, which is split 80-20 for training and validating. You must provide the dataset in a JSON Lines (JSONL) file. Each line in the JSONL file must have the format: `{"prompt": "<first prompt>", "completion": "<expected completion given first prompt>"}`
        :param 'ModelFineTuneDetailsTrainingConfigArgs' training_config: The fine-tuning method and hyperparameters used for fine-tuning a custom model.
        """
        pulumi.set(__self__, "dedicated_ai_cluster_id", dedicated_ai_cluster_id)
        pulumi.set(__self__, "training_dataset", training_dataset)
        if training_config is not None:
            pulumi.set(__self__, "training_config", training_config)

    @_builtins.property
    @pulumi.getter(name="dedicatedAiClusterId")
    def dedicated_ai_cluster_id(self) -> _builtins.str:
        """
        The OCID of the dedicated AI cluster this fine-tuning runs on.
        """
        return pulumi.get(self, "dedicated_ai_cluster_id")

    @_builtins.property
    @pulumi.getter(name="trainingDataset")
    def training_dataset(self) -> 'outputs.ModelFineTuneDetailsTrainingDataset':
        """
        The dataset used to fine-tune the model. 

        Only one dataset is allowed per custom model, which is split 80-20 for training and validating. You must provide the dataset in a JSON Lines (JSONL) file. Each line in the JSONL file must have the format: `{"prompt": "<first prompt>", "completion": "<expected completion given first prompt>"}`
        """
        return pulumi.get(self, "training_dataset")

    @_builtins.property
    @pulumi.getter(name="trainingConfig")
    def training_config(self) -> Optional['outputs.ModelFineTuneDetailsTrainingConfig']:
        """
        The fine-tuning method and hyperparameters used for fine-tuning a custom model.
        """
        return pulumi.get(self, "training_config")


@pulumi.output_type
class ModelFineTuneDetailsTrainingConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "trainingConfigType":
            suggest = "training_config_type"
        elif key == "earlyStoppingPatience":
            suggest = "early_stopping_patience"
        elif key == "earlyStoppingThreshold":
            suggest = "early_stopping_threshold"
        elif key == "learningRate":
            suggest = "learning_rate"
        elif key == "logModelMetricsIntervalInSteps":
            suggest = "log_model_metrics_interval_in_steps"
        elif key == "loraAlpha":
            suggest = "lora_alpha"
        elif key == "loraDropout":
            suggest = "lora_dropout"
        elif key == "loraR":
            suggest = "lora_r"
        elif key == "numOfLastLayers":
            suggest = "num_of_last_layers"
        elif key == "totalTrainingEpochs":
            suggest = "total_training_epochs"
        elif key == "trainingBatchSize":
            suggest = "training_batch_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelFineTuneDetailsTrainingConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelFineTuneDetailsTrainingConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelFineTuneDetailsTrainingConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 training_config_type: _builtins.str,
                 early_stopping_patience: Optional[_builtins.int] = None,
                 early_stopping_threshold: Optional[_builtins.float] = None,
                 learning_rate: Optional[_builtins.float] = None,
                 log_model_metrics_interval_in_steps: Optional[_builtins.int] = None,
                 lora_alpha: Optional[_builtins.int] = None,
                 lora_dropout: Optional[_builtins.float] = None,
                 lora_r: Optional[_builtins.int] = None,
                 num_of_last_layers: Optional[_builtins.int] = None,
                 total_training_epochs: Optional[_builtins.int] = None,
                 training_batch_size: Optional[_builtins.int] = None):
        """
        :param _builtins.str training_config_type: The fine-tuning method for training a custom model.
        :param _builtins.int early_stopping_patience: Stop training if the loss metric does not improve beyond 'early_stopping_threshold' for this many times of evaluation.
        :param _builtins.float early_stopping_threshold: How much the loss must improve to prevent early stopping.
        :param _builtins.float learning_rate: The initial learning rate to be used during training
        :param _builtins.int log_model_metrics_interval_in_steps: Determines how frequently to log model metrics. 
               
               Every step is logged for the first 20 steps and then follows this parameter for log frequency. Set to 0 to disable logging the model metrics.
        :param _builtins.int lora_alpha: This parameter represents the scaling factor for the weight matrices in LoRA.
        :param _builtins.float lora_dropout: This parameter indicates the dropout probability for LoRA layers.
        :param _builtins.int lora_r: This parameter represents the LoRA rank of the update matrices.
        :param _builtins.int num_of_last_layers: The number of last layers to be fine-tuned.
        :param _builtins.int total_training_epochs: The maximum number of training epochs to run for.
        :param _builtins.int training_batch_size: The batch size used during training.
        """
        pulumi.set(__self__, "training_config_type", training_config_type)
        if early_stopping_patience is not None:
            pulumi.set(__self__, "early_stopping_patience", early_stopping_patience)
        if early_stopping_threshold is not None:
            pulumi.set(__self__, "early_stopping_threshold", early_stopping_threshold)
        if learning_rate is not None:
            pulumi.set(__self__, "learning_rate", learning_rate)
        if log_model_metrics_interval_in_steps is not None:
            pulumi.set(__self__, "log_model_metrics_interval_in_steps", log_model_metrics_interval_in_steps)
        if lora_alpha is not None:
            pulumi.set(__self__, "lora_alpha", lora_alpha)
        if lora_dropout is not None:
            pulumi.set(__self__, "lora_dropout", lora_dropout)
        if lora_r is not None:
            pulumi.set(__self__, "lora_r", lora_r)
        if num_of_last_layers is not None:
            pulumi.set(__self__, "num_of_last_layers", num_of_last_layers)
        if total_training_epochs is not None:
            pulumi.set(__self__, "total_training_epochs", total_training_epochs)
        if training_batch_size is not None:
            pulumi.set(__self__, "training_batch_size", training_batch_size)

    @_builtins.property
    @pulumi.getter(name="trainingConfigType")
    def training_config_type(self) -> _builtins.str:
        """
        The fine-tuning method for training a custom model.
        """
        return pulumi.get(self, "training_config_type")

    @_builtins.property
    @pulumi.getter(name="earlyStoppingPatience")
    def early_stopping_patience(self) -> Optional[_builtins.int]:
        """
        Stop training if the loss metric does not improve beyond 'early_stopping_threshold' for this many times of evaluation.
        """
        return pulumi.get(self, "early_stopping_patience")

    @_builtins.property
    @pulumi.getter(name="earlyStoppingThreshold")
    def early_stopping_threshold(self) -> Optional[_builtins.float]:
        """
        How much the loss must improve to prevent early stopping.
        """
        return pulumi.get(self, "early_stopping_threshold")

    @_builtins.property
    @pulumi.getter(name="learningRate")
    def learning_rate(self) -> Optional[_builtins.float]:
        """
        The initial learning rate to be used during training
        """
        return pulumi.get(self, "learning_rate")

    @_builtins.property
    @pulumi.getter(name="logModelMetricsIntervalInSteps")
    def log_model_metrics_interval_in_steps(self) -> Optional[_builtins.int]:
        """
        Determines how frequently to log model metrics. 

        Every step is logged for the first 20 steps and then follows this parameter for log frequency. Set to 0 to disable logging the model metrics.
        """
        return pulumi.get(self, "log_model_metrics_interval_in_steps")

    @_builtins.property
    @pulumi.getter(name="loraAlpha")
    def lora_alpha(self) -> Optional[_builtins.int]:
        """
        This parameter represents the scaling factor for the weight matrices in LoRA.
        """
        return pulumi.get(self, "lora_alpha")

    @_builtins.property
    @pulumi.getter(name="loraDropout")
    def lora_dropout(self) -> Optional[_builtins.float]:
        """
        This parameter indicates the dropout probability for LoRA layers.
        """
        return pulumi.get(self, "lora_dropout")

    @_builtins.property
    @pulumi.getter(name="loraR")
    def lora_r(self) -> Optional[_builtins.int]:
        """
        This parameter represents the LoRA rank of the update matrices.
        """
        return pulumi.get(self, "lora_r")

    @_builtins.property
    @pulumi.getter(name="numOfLastLayers")
    def num_of_last_layers(self) -> Optional[_builtins.int]:
        """
        The number of last layers to be fine-tuned.
        """
        return pulumi.get(self, "num_of_last_layers")

    @_builtins.property
    @pulumi.getter(name="totalTrainingEpochs")
    def total_training_epochs(self) -> Optional[_builtins.int]:
        """
        The maximum number of training epochs to run for.
        """
        return pulumi.get(self, "total_training_epochs")

    @_builtins.property
    @pulumi.getter(name="trainingBatchSize")
    def training_batch_size(self) -> Optional[_builtins.int]:
        """
        The batch size used during training.
        """
        return pulumi.get(self, "training_batch_size")


@pulumi.output_type
class ModelFineTuneDetailsTrainingDataset(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "datasetType":
            suggest = "dataset_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelFineTuneDetailsTrainingDataset. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelFineTuneDetailsTrainingDataset.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelFineTuneDetailsTrainingDataset.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bucket: _builtins.str,
                 dataset_type: _builtins.str,
                 namespace: _builtins.str,
                 object: _builtins.str):
        """
        :param _builtins.str bucket: The Object Storage bucket name.
        :param _builtins.str dataset_type: The type of the data asset.
        :param _builtins.str namespace: The Object Storage namespace.
        :param _builtins.str object: The Object Storage object name.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "dataset_type", dataset_type)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "object", object)

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> _builtins.str:
        """
        The Object Storage bucket name.
        """
        return pulumi.get(self, "bucket")

    @_builtins.property
    @pulumi.getter(name="datasetType")
    def dataset_type(self) -> _builtins.str:
        """
        The type of the data asset.
        """
        return pulumi.get(self, "dataset_type")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        """
        The Object Storage namespace.
        """
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter
    def object(self) -> _builtins.str:
        """
        The Object Storage object name.
        """
        return pulumi.get(self, "object")


@pulumi.output_type
class ModelModelMetric(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "finalAccuracy":
            suggest = "final_accuracy"
        elif key == "finalLoss":
            suggest = "final_loss"
        elif key == "modelMetricsType":
            suggest = "model_metrics_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelModelMetric. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelModelMetric.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelModelMetric.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 final_accuracy: Optional[_builtins.float] = None,
                 final_loss: Optional[_builtins.float] = None,
                 model_metrics_type: Optional[_builtins.str] = None):
        """
        :param _builtins.float final_accuracy: Fine-tuned model accuracy.
        :param _builtins.float final_loss: Fine-tuned model loss.
        :param _builtins.str model_metrics_type: The type of the model metrics. Each type of model can expect a different set of model metrics.
        """
        if final_accuracy is not None:
            pulumi.set(__self__, "final_accuracy", final_accuracy)
        if final_loss is not None:
            pulumi.set(__self__, "final_loss", final_loss)
        if model_metrics_type is not None:
            pulumi.set(__self__, "model_metrics_type", model_metrics_type)

    @_builtins.property
    @pulumi.getter(name="finalAccuracy")
    def final_accuracy(self) -> Optional[_builtins.float]:
        """
        Fine-tuned model accuracy.
        """
        return pulumi.get(self, "final_accuracy")

    @_builtins.property
    @pulumi.getter(name="finalLoss")
    def final_loss(self) -> Optional[_builtins.float]:
        """
        Fine-tuned model loss.
        """
        return pulumi.get(self, "final_loss")

    @_builtins.property
    @pulumi.getter(name="modelMetricsType")
    def model_metrics_type(self) -> Optional[_builtins.str]:
        """
        The type of the model metrics. Each type of model can expect a different set of model metrics.
        """
        return pulumi.get(self, "model_metrics_type")


@pulumi.output_type
class GetAgentAgentEndpointContentModerationConfigResult(dict):
    def __init__(__self__, *,
                 should_enable_on_input: _builtins.bool,
                 should_enable_on_output: _builtins.bool):
        """
        :param _builtins.bool should_enable_on_input: A flag to enable or disable content moderation on input.
        :param _builtins.bool should_enable_on_output: A flag to enable or disable content moderation on output.
        """
        pulumi.set(__self__, "should_enable_on_input", should_enable_on_input)
        pulumi.set(__self__, "should_enable_on_output", should_enable_on_output)

    @_builtins.property
    @pulumi.getter(name="shouldEnableOnInput")
    def should_enable_on_input(self) -> _builtins.bool:
        """
        A flag to enable or disable content moderation on input.
        """
        return pulumi.get(self, "should_enable_on_input")

    @_builtins.property
    @pulumi.getter(name="shouldEnableOnOutput")
    def should_enable_on_output(self) -> _builtins.bool:
        """
        A flag to enable or disable content moderation on output.
        """
        return pulumi.get(self, "should_enable_on_output")


@pulumi.output_type
class GetAgentAgentEndpointGuardrailConfigResult(dict):
    def __init__(__self__, *,
                 content_moderation_configs: Sequence['outputs.GetAgentAgentEndpointGuardrailConfigContentModerationConfigResult'],
                 personally_identifiable_information_configs: Sequence['outputs.GetAgentAgentEndpointGuardrailConfigPersonallyIdentifiableInformationConfigResult'],
                 prompt_injection_configs: Sequence['outputs.GetAgentAgentEndpointGuardrailConfigPromptInjectionConfigResult']):
        """
        :param Sequence['GetAgentAgentEndpointGuardrailConfigContentModerationConfigArgs'] content_moderation_configs: The configuration details about whether to apply the content moderation feature to input and output. Content moderation removes toxic and biased content from responses. It is recommended to use content moderation.
        :param Sequence['GetAgentAgentEndpointGuardrailConfigPersonallyIdentifiableInformationConfigArgs'] personally_identifiable_information_configs: The configuration details for Personally Identifiable Information.
        :param Sequence['GetAgentAgentEndpointGuardrailConfigPromptInjectionConfigArgs'] prompt_injection_configs: The configuration details for Prompt Injection.
        """
        pulumi.set(__self__, "content_moderation_configs", content_moderation_configs)
        pulumi.set(__self__, "personally_identifiable_information_configs", personally_identifiable_information_configs)
        pulumi.set(__self__, "prompt_injection_configs", prompt_injection_configs)

    @_builtins.property
    @pulumi.getter(name="contentModerationConfigs")
    def content_moderation_configs(self) -> Sequence['outputs.GetAgentAgentEndpointGuardrailConfigContentModerationConfigResult']:
        """
        The configuration details about whether to apply the content moderation feature to input and output. Content moderation removes toxic and biased content from responses. It is recommended to use content moderation.
        """
        return pulumi.get(self, "content_moderation_configs")

    @_builtins.property
    @pulumi.getter(name="personallyIdentifiableInformationConfigs")
    def personally_identifiable_information_configs(self) -> Sequence['outputs.GetAgentAgentEndpointGuardrailConfigPersonallyIdentifiableInformationConfigResult']:
        """
        The configuration details for Personally Identifiable Information.
        """
        return pulumi.get(self, "personally_identifiable_information_configs")

    @_builtins.property
    @pulumi.getter(name="promptInjectionConfigs")
    def prompt_injection_configs(self) -> Sequence['outputs.GetAgentAgentEndpointGuardrailConfigPromptInjectionConfigResult']:
        """
        The configuration details for Prompt Injection.
        """
        return pulumi.get(self, "prompt_injection_configs")


@pulumi.output_type
class GetAgentAgentEndpointGuardrailConfigContentModerationConfigResult(dict):
    def __init__(__self__, *,
                 input_guardrail_mode: _builtins.str,
                 output_guardrail_mode: _builtins.str):
        """
        :param _builtins.str input_guardrail_mode: An input guardrail mode for prompt injection.
        :param _builtins.str output_guardrail_mode: An output guardrail mode for personally identifiable information.
        """
        pulumi.set(__self__, "input_guardrail_mode", input_guardrail_mode)
        pulumi.set(__self__, "output_guardrail_mode", output_guardrail_mode)

    @_builtins.property
    @pulumi.getter(name="inputGuardrailMode")
    def input_guardrail_mode(self) -> _builtins.str:
        """
        An input guardrail mode for prompt injection.
        """
        return pulumi.get(self, "input_guardrail_mode")

    @_builtins.property
    @pulumi.getter(name="outputGuardrailMode")
    def output_guardrail_mode(self) -> _builtins.str:
        """
        An output guardrail mode for personally identifiable information.
        """
        return pulumi.get(self, "output_guardrail_mode")


@pulumi.output_type
class GetAgentAgentEndpointGuardrailConfigPersonallyIdentifiableInformationConfigResult(dict):
    def __init__(__self__, *,
                 input_guardrail_mode: _builtins.str,
                 output_guardrail_mode: _builtins.str):
        """
        :param _builtins.str input_guardrail_mode: An input guardrail mode for prompt injection.
        :param _builtins.str output_guardrail_mode: An output guardrail mode for personally identifiable information.
        """
        pulumi.set(__self__, "input_guardrail_mode", input_guardrail_mode)
        pulumi.set(__self__, "output_guardrail_mode", output_guardrail_mode)

    @_builtins.property
    @pulumi.getter(name="inputGuardrailMode")
    def input_guardrail_mode(self) -> _builtins.str:
        """
        An input guardrail mode for prompt injection.
        """
        return pulumi.get(self, "input_guardrail_mode")

    @_builtins.property
    @pulumi.getter(name="outputGuardrailMode")
    def output_guardrail_mode(self) -> _builtins.str:
        """
        An output guardrail mode for personally identifiable information.
        """
        return pulumi.get(self, "output_guardrail_mode")


@pulumi.output_type
class GetAgentAgentEndpointGuardrailConfigPromptInjectionConfigResult(dict):
    def __init__(__self__, *,
                 input_guardrail_mode: _builtins.str):
        """
        :param _builtins.str input_guardrail_mode: An input guardrail mode for prompt injection.
        """
        pulumi.set(__self__, "input_guardrail_mode", input_guardrail_mode)

    @_builtins.property
    @pulumi.getter(name="inputGuardrailMode")
    def input_guardrail_mode(self) -> _builtins.str:
        """
        An input guardrail mode for prompt injection.
        """
        return pulumi.get(self, "input_guardrail_mode")


@pulumi.output_type
class GetAgentAgentEndpointHumanInputConfigResult(dict):
    def __init__(__self__, *,
                 should_enable_human_input: _builtins.bool):
        """
        :param _builtins.bool should_enable_human_input: The Agent will request for human input for disambiguation or additional information gathering if this is enabled.
        """
        pulumi.set(__self__, "should_enable_human_input", should_enable_human_input)

    @_builtins.property
    @pulumi.getter(name="shouldEnableHumanInput")
    def should_enable_human_input(self) -> _builtins.bool:
        """
        The Agent will request for human input for disambiguation or additional information gathering if this is enabled.
        """
        return pulumi.get(self, "should_enable_human_input")


@pulumi.output_type
class GetAgentAgentEndpointOutputConfigResult(dict):
    def __init__(__self__, *,
                 output_locations: Sequence['outputs.GetAgentAgentEndpointOutputConfigOutputLocationResult'],
                 retention_period_in_minutes: _builtins.int):
        """
        :param Sequence['GetAgentAgentEndpointOutputConfigOutputLocationArgs'] output_locations: Location of the output.
        :param _builtins.int retention_period_in_minutes: Retention duration of the output data.
        """
        pulumi.set(__self__, "output_locations", output_locations)
        pulumi.set(__self__, "retention_period_in_minutes", retention_period_in_minutes)

    @_builtins.property
    @pulumi.getter(name="outputLocations")
    def output_locations(self) -> Sequence['outputs.GetAgentAgentEndpointOutputConfigOutputLocationResult']:
        """
        Location of the output.
        """
        return pulumi.get(self, "output_locations")

    @_builtins.property
    @pulumi.getter(name="retentionPeriodInMinutes")
    def retention_period_in_minutes(self) -> _builtins.int:
        """
        Retention duration of the output data.
        """
        return pulumi.get(self, "retention_period_in_minutes")


@pulumi.output_type
class GetAgentAgentEndpointOutputConfigOutputLocationResult(dict):
    def __init__(__self__, *,
                 bucket: _builtins.str,
                 namespace: _builtins.str,
                 output_location_type: _builtins.str,
                 prefix: _builtins.str):
        """
        :param _builtins.str bucket: The name of the bucket.
        :param _builtins.str namespace: The namespace of the object storage.
        :param _builtins.str output_location_type: Type of OutputLocation.
        :param _builtins.str prefix: The prefix of the object storage.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "output_location_type", output_location_type)
        pulumi.set(__self__, "prefix", prefix)

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> _builtins.str:
        """
        The name of the bucket.
        """
        return pulumi.get(self, "bucket")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        """
        The namespace of the object storage.
        """
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter(name="outputLocationType")
    def output_location_type(self) -> _builtins.str:
        """
        Type of OutputLocation.
        """
        return pulumi.get(self, "output_location_type")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> _builtins.str:
        """
        The prefix of the object storage.
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class GetAgentAgentEndpointSessionConfigResult(dict):
    def __init__(__self__, *,
                 idle_timeout_in_seconds: _builtins.int):
        """
        :param _builtins.int idle_timeout_in_seconds: The session will become inactive after this timeout.
        """
        pulumi.set(__self__, "idle_timeout_in_seconds", idle_timeout_in_seconds)

    @_builtins.property
    @pulumi.getter(name="idleTimeoutInSeconds")
    def idle_timeout_in_seconds(self) -> _builtins.int:
        """
        The session will become inactive after this timeout.
        """
        return pulumi.get(self, "idle_timeout_in_seconds")


@pulumi.output_type
class GetAgentAgentEndpointsAgentEndpointCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetAgentAgentEndpointsAgentEndpointCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetAgentAgentEndpointsAgentEndpointCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAgentAgentEndpointsAgentEndpointCollectionItemResult(dict):
    def __init__(__self__, *,
                 agent_id: _builtins.str,
                 compartment_id: _builtins.str,
                 content_moderation_configs: Sequence['outputs.GetAgentAgentEndpointsAgentEndpointCollectionItemContentModerationConfigResult'],
                 defined_tags: Mapping[str, _builtins.str],
                 description: _builtins.str,
                 display_name: _builtins.str,
                 freeform_tags: Mapping[str, _builtins.str],
                 guardrail_configs: Sequence['outputs.GetAgentAgentEndpointsAgentEndpointCollectionItemGuardrailConfigResult'],
                 human_input_configs: Sequence['outputs.GetAgentAgentEndpointsAgentEndpointCollectionItemHumanInputConfigResult'],
                 id: _builtins.str,
                 lifecycle_details: _builtins.str,
                 metadata: Mapping[str, _builtins.str],
                 output_configs: Sequence['outputs.GetAgentAgentEndpointsAgentEndpointCollectionItemOutputConfigResult'],
                 session_configs: Sequence['outputs.GetAgentAgentEndpointsAgentEndpointCollectionItemSessionConfigResult'],
                 should_enable_citation: _builtins.bool,
                 should_enable_multi_language: _builtins.bool,
                 should_enable_session: _builtins.bool,
                 should_enable_trace: _builtins.bool,
                 state: _builtins.str,
                 system_tags: Mapping[str, _builtins.str],
                 time_created: _builtins.str,
                 time_updated: _builtins.str):
        """
        :param _builtins.str agent_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the agent.
        :param _builtins.str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
        :param Sequence['GetAgentAgentEndpointsAgentEndpointCollectionItemContentModerationConfigArgs'] content_moderation_configs: The configuration details about whether to apply the content moderation feature to input and output. Content moderation removes toxic and biased content from responses. It is recommended to use content moderation.
        :param Mapping[str, _builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
        :param _builtins.str description: An optional description of the endpoint.
        :param _builtins.str display_name: A filter to return only resources that match the given display name exactly.
        :param Mapping[str, _builtins.str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        :param Sequence['GetAgentAgentEndpointsAgentEndpointCollectionItemGuardrailConfigArgs'] guardrail_configs: The configuration details about whether to apply the guardrail checks to input and output.
        :param Sequence['GetAgentAgentEndpointsAgentEndpointCollectionItemHumanInputConfigArgs'] human_input_configs: Human Input Configuration for an AgentEndpoint.
        :param _builtins.str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the endpoint.
        :param _builtins.str lifecycle_details: A message that describes the current state of the endpoint in more detail. For example, can be used to provide actionable information for a resource in the Failed state.
        :param Mapping[str, _builtins.str] metadata: Key-value pairs to allow additional configurations.
        :param Sequence['GetAgentAgentEndpointsAgentEndpointCollectionItemOutputConfigArgs'] output_configs: Configuration to store results generated by agent.
        :param Sequence['GetAgentAgentEndpointsAgentEndpointCollectionItemSessionConfigArgs'] session_configs: Session Configuration on AgentEndpoint.
        :param _builtins.bool should_enable_citation: Whether to show citations in the chat result.
        :param _builtins.bool should_enable_multi_language: Whether to enable multi-language for chat.
        :param _builtins.bool should_enable_session: Whether or not to enable Session-based chat.
        :param _builtins.bool should_enable_trace: Whether to show traces in the chat result.
        :param _builtins.str state: A filter to return only resources that match the given lifecycle state. The state value is case-insensitive.
        :param Mapping[str, _builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace.  Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param _builtins.str time_created: The date and time the AgentEndpoint was created, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        :param _builtins.str time_updated: The date and time the endpoint was updated, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        """
        pulumi.set(__self__, "agent_id", agent_id)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "content_moderation_configs", content_moderation_configs)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "guardrail_configs", guardrail_configs)
        pulumi.set(__self__, "human_input_configs", human_input_configs)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "output_configs", output_configs)
        pulumi.set(__self__, "session_configs", session_configs)
        pulumi.set(__self__, "should_enable_citation", should_enable_citation)
        pulumi.set(__self__, "should_enable_multi_language", should_enable_multi_language)
        pulumi.set(__self__, "should_enable_session", should_enable_session)
        pulumi.set(__self__, "should_enable_trace", should_enable_trace)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @_builtins.property
    @pulumi.getter(name="agentId")
    def agent_id(self) -> _builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the agent.
        """
        return pulumi.get(self, "agent_id")

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter(name="contentModerationConfigs")
    def content_moderation_configs(self) -> Sequence['outputs.GetAgentAgentEndpointsAgentEndpointCollectionItemContentModerationConfigResult']:
        """
        The configuration details about whether to apply the content moderation feature to input and output. Content moderation removes toxic and biased content from responses. It is recommended to use content moderation.
        """
        return pulumi.get(self, "content_moderation_configs")

    @_builtins.property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, _builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        An optional description of the endpoint.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        A filter to return only resources that match the given display name exactly.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, _builtins.str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @_builtins.property
    @pulumi.getter(name="guardrailConfigs")
    def guardrail_configs(self) -> Sequence['outputs.GetAgentAgentEndpointsAgentEndpointCollectionItemGuardrailConfigResult']:
        """
        The configuration details about whether to apply the guardrail checks to input and output.
        """
        return pulumi.get(self, "guardrail_configs")

    @_builtins.property
    @pulumi.getter(name="humanInputConfigs")
    def human_input_configs(self) -> Sequence['outputs.GetAgentAgentEndpointsAgentEndpointCollectionItemHumanInputConfigResult']:
        """
        Human Input Configuration for an AgentEndpoint.
        """
        return pulumi.get(self, "human_input_configs")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the endpoint.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> _builtins.str:
        """
        A message that describes the current state of the endpoint in more detail. For example, can be used to provide actionable information for a resource in the Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @_builtins.property
    @pulumi.getter
    def metadata(self) -> Mapping[str, _builtins.str]:
        """
        Key-value pairs to allow additional configurations.
        """
        return pulumi.get(self, "metadata")

    @_builtins.property
    @pulumi.getter(name="outputConfigs")
    def output_configs(self) -> Sequence['outputs.GetAgentAgentEndpointsAgentEndpointCollectionItemOutputConfigResult']:
        """
        Configuration to store results generated by agent.
        """
        return pulumi.get(self, "output_configs")

    @_builtins.property
    @pulumi.getter(name="sessionConfigs")
    def session_configs(self) -> Sequence['outputs.GetAgentAgentEndpointsAgentEndpointCollectionItemSessionConfigResult']:
        """
        Session Configuration on AgentEndpoint.
        """
        return pulumi.get(self, "session_configs")

    @_builtins.property
    @pulumi.getter(name="shouldEnableCitation")
    def should_enable_citation(self) -> _builtins.bool:
        """
        Whether to show citations in the chat result.
        """
        return pulumi.get(self, "should_enable_citation")

    @_builtins.property
    @pulumi.getter(name="shouldEnableMultiLanguage")
    def should_enable_multi_language(self) -> _builtins.bool:
        """
        Whether to enable multi-language for chat.
        """
        return pulumi.get(self, "should_enable_multi_language")

    @_builtins.property
    @pulumi.getter(name="shouldEnableSession")
    def should_enable_session(self) -> _builtins.bool:
        """
        Whether or not to enable Session-based chat.
        """
        return pulumi.get(self, "should_enable_session")

    @_builtins.property
    @pulumi.getter(name="shouldEnableTrace")
    def should_enable_trace(self) -> _builtins.bool:
        """
        Whether to show traces in the chat result.
        """
        return pulumi.get(self, "should_enable_trace")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        A filter to return only resources that match the given lifecycle state. The state value is case-insensitive.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, _builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace.  Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @_builtins.property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> _builtins.str:
        """
        The date and time the AgentEndpoint was created, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_created")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> _builtins.str:
        """
        The date and time the endpoint was updated, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetAgentAgentEndpointsAgentEndpointCollectionItemContentModerationConfigResult(dict):
    def __init__(__self__, *,
                 should_enable_on_input: _builtins.bool,
                 should_enable_on_output: _builtins.bool):
        """
        :param _builtins.bool should_enable_on_input: A flag to enable or disable content moderation on input.
        :param _builtins.bool should_enable_on_output: A flag to enable or disable content moderation on output.
        """
        pulumi.set(__self__, "should_enable_on_input", should_enable_on_input)
        pulumi.set(__self__, "should_enable_on_output", should_enable_on_output)

    @_builtins.property
    @pulumi.getter(name="shouldEnableOnInput")
    def should_enable_on_input(self) -> _builtins.bool:
        """
        A flag to enable or disable content moderation on input.
        """
        return pulumi.get(self, "should_enable_on_input")

    @_builtins.property
    @pulumi.getter(name="shouldEnableOnOutput")
    def should_enable_on_output(self) -> _builtins.bool:
        """
        A flag to enable or disable content moderation on output.
        """
        return pulumi.get(self, "should_enable_on_output")


@pulumi.output_type
class GetAgentAgentEndpointsAgentEndpointCollectionItemGuardrailConfigResult(dict):
    def __init__(__self__, *,
                 content_moderation_configs: Sequence['outputs.GetAgentAgentEndpointsAgentEndpointCollectionItemGuardrailConfigContentModerationConfigResult'],
                 personally_identifiable_information_configs: Sequence['outputs.GetAgentAgentEndpointsAgentEndpointCollectionItemGuardrailConfigPersonallyIdentifiableInformationConfigResult'],
                 prompt_injection_configs: Sequence['outputs.GetAgentAgentEndpointsAgentEndpointCollectionItemGuardrailConfigPromptInjectionConfigResult']):
        """
        :param Sequence['GetAgentAgentEndpointsAgentEndpointCollectionItemGuardrailConfigContentModerationConfigArgs'] content_moderation_configs: The configuration details about whether to apply the content moderation feature to input and output. Content moderation removes toxic and biased content from responses. It is recommended to use content moderation.
        :param Sequence['GetAgentAgentEndpointsAgentEndpointCollectionItemGuardrailConfigPersonallyIdentifiableInformationConfigArgs'] personally_identifiable_information_configs: The configuration details for Personally Identifiable Information.
        :param Sequence['GetAgentAgentEndpointsAgentEndpointCollectionItemGuardrailConfigPromptInjectionConfigArgs'] prompt_injection_configs: The configuration details for Prompt Injection.
        """
        pulumi.set(__self__, "content_moderation_configs", content_moderation_configs)
        pulumi.set(__self__, "personally_identifiable_information_configs", personally_identifiable_information_configs)
        pulumi.set(__self__, "prompt_injection_configs", prompt_injection_configs)

    @_builtins.property
    @pulumi.getter(name="contentModerationConfigs")
    def content_moderation_configs(self) -> Sequence['outputs.GetAgentAgentEndpointsAgentEndpointCollectionItemGuardrailConfigContentModerationConfigResult']:
        """
        The configuration details about whether to apply the content moderation feature to input and output. Content moderation removes toxic and biased content from responses. It is recommended to use content moderation.
        """
        return pulumi.get(self, "content_moderation_configs")

    @_builtins.property
    @pulumi.getter(name="personallyIdentifiableInformationConfigs")
    def personally_identifiable_information_configs(self) -> Sequence['outputs.GetAgentAgentEndpointsAgentEndpointCollectionItemGuardrailConfigPersonallyIdentifiableInformationConfigResult']:
        """
        The configuration details for Personally Identifiable Information.
        """
        return pulumi.get(self, "personally_identifiable_information_configs")

    @_builtins.property
    @pulumi.getter(name="promptInjectionConfigs")
    def prompt_injection_configs(self) -> Sequence['outputs.GetAgentAgentEndpointsAgentEndpointCollectionItemGuardrailConfigPromptInjectionConfigResult']:
        """
        The configuration details for Prompt Injection.
        """
        return pulumi.get(self, "prompt_injection_configs")


@pulumi.output_type
class GetAgentAgentEndpointsAgentEndpointCollectionItemGuardrailConfigContentModerationConfigResult(dict):
    def __init__(__self__, *,
                 input_guardrail_mode: _builtins.str,
                 output_guardrail_mode: _builtins.str):
        """
        :param _builtins.str input_guardrail_mode: An input guardrail mode for prompt injection.
        :param _builtins.str output_guardrail_mode: An output guardrail mode for personally identifiable information.
        """
        pulumi.set(__self__, "input_guardrail_mode", input_guardrail_mode)
        pulumi.set(__self__, "output_guardrail_mode", output_guardrail_mode)

    @_builtins.property
    @pulumi.getter(name="inputGuardrailMode")
    def input_guardrail_mode(self) -> _builtins.str:
        """
        An input guardrail mode for prompt injection.
        """
        return pulumi.get(self, "input_guardrail_mode")

    @_builtins.property
    @pulumi.getter(name="outputGuardrailMode")
    def output_guardrail_mode(self) -> _builtins.str:
        """
        An output guardrail mode for personally identifiable information.
        """
        return pulumi.get(self, "output_guardrail_mode")


@pulumi.output_type
class GetAgentAgentEndpointsAgentEndpointCollectionItemGuardrailConfigPersonallyIdentifiableInformationConfigResult(dict):
    def __init__(__self__, *,
                 input_guardrail_mode: _builtins.str,
                 output_guardrail_mode: _builtins.str):
        """
        :param _builtins.str input_guardrail_mode: An input guardrail mode for prompt injection.
        :param _builtins.str output_guardrail_mode: An output guardrail mode for personally identifiable information.
        """
        pulumi.set(__self__, "input_guardrail_mode", input_guardrail_mode)
        pulumi.set(__self__, "output_guardrail_mode", output_guardrail_mode)

    @_builtins.property
    @pulumi.getter(name="inputGuardrailMode")
    def input_guardrail_mode(self) -> _builtins.str:
        """
        An input guardrail mode for prompt injection.
        """
        return pulumi.get(self, "input_guardrail_mode")

    @_builtins.property
    @pulumi.getter(name="outputGuardrailMode")
    def output_guardrail_mode(self) -> _builtins.str:
        """
        An output guardrail mode for personally identifiable information.
        """
        return pulumi.get(self, "output_guardrail_mode")


@pulumi.output_type
class GetAgentAgentEndpointsAgentEndpointCollectionItemGuardrailConfigPromptInjectionConfigResult(dict):
    def __init__(__self__, *,
                 input_guardrail_mode: _builtins.str):
        """
        :param _builtins.str input_guardrail_mode: An input guardrail mode for prompt injection.
        """
        pulumi.set(__self__, "input_guardrail_mode", input_guardrail_mode)

    @_builtins.property
    @pulumi.getter(name="inputGuardrailMode")
    def input_guardrail_mode(self) -> _builtins.str:
        """
        An input guardrail mode for prompt injection.
        """
        return pulumi.get(self, "input_guardrail_mode")


@pulumi.output_type
class GetAgentAgentEndpointsAgentEndpointCollectionItemHumanInputConfigResult(dict):
    def __init__(__self__, *,
                 should_enable_human_input: _builtins.bool):
        """
        :param _builtins.bool should_enable_human_input: The Agent will request for human input for disambiguation or additional information gathering if this is enabled.
        """
        pulumi.set(__self__, "should_enable_human_input", should_enable_human_input)

    @_builtins.property
    @pulumi.getter(name="shouldEnableHumanInput")
    def should_enable_human_input(self) -> _builtins.bool:
        """
        The Agent will request for human input for disambiguation or additional information gathering if this is enabled.
        """
        return pulumi.get(self, "should_enable_human_input")


@pulumi.output_type
class GetAgentAgentEndpointsAgentEndpointCollectionItemOutputConfigResult(dict):
    def __init__(__self__, *,
                 output_locations: Sequence['outputs.GetAgentAgentEndpointsAgentEndpointCollectionItemOutputConfigOutputLocationResult'],
                 retention_period_in_minutes: _builtins.int):
        """
        :param Sequence['GetAgentAgentEndpointsAgentEndpointCollectionItemOutputConfigOutputLocationArgs'] output_locations: Location of the output.
        :param _builtins.int retention_period_in_minutes: Retention duration of the output data.
        """
        pulumi.set(__self__, "output_locations", output_locations)
        pulumi.set(__self__, "retention_period_in_minutes", retention_period_in_minutes)

    @_builtins.property
    @pulumi.getter(name="outputLocations")
    def output_locations(self) -> Sequence['outputs.GetAgentAgentEndpointsAgentEndpointCollectionItemOutputConfigOutputLocationResult']:
        """
        Location of the output.
        """
        return pulumi.get(self, "output_locations")

    @_builtins.property
    @pulumi.getter(name="retentionPeriodInMinutes")
    def retention_period_in_minutes(self) -> _builtins.int:
        """
        Retention duration of the output data.
        """
        return pulumi.get(self, "retention_period_in_minutes")


@pulumi.output_type
class GetAgentAgentEndpointsAgentEndpointCollectionItemOutputConfigOutputLocationResult(dict):
    def __init__(__self__, *,
                 bucket: _builtins.str,
                 namespace: _builtins.str,
                 output_location_type: _builtins.str,
                 prefix: _builtins.str):
        """
        :param _builtins.str bucket: The name of the bucket.
        :param _builtins.str namespace: The namespace of the object storage.
        :param _builtins.str output_location_type: Type of OutputLocation.
        :param _builtins.str prefix: The prefix of the object storage.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "output_location_type", output_location_type)
        pulumi.set(__self__, "prefix", prefix)

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> _builtins.str:
        """
        The name of the bucket.
        """
        return pulumi.get(self, "bucket")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        """
        The namespace of the object storage.
        """
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter(name="outputLocationType")
    def output_location_type(self) -> _builtins.str:
        """
        Type of OutputLocation.
        """
        return pulumi.get(self, "output_location_type")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> _builtins.str:
        """
        The prefix of the object storage.
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class GetAgentAgentEndpointsAgentEndpointCollectionItemSessionConfigResult(dict):
    def __init__(__self__, *,
                 idle_timeout_in_seconds: _builtins.int):
        """
        :param _builtins.int idle_timeout_in_seconds: The session will become inactive after this timeout.
        """
        pulumi.set(__self__, "idle_timeout_in_seconds", idle_timeout_in_seconds)

    @_builtins.property
    @pulumi.getter(name="idleTimeoutInSeconds")
    def idle_timeout_in_seconds(self) -> _builtins.int:
        """
        The session will become inactive after this timeout.
        """
        return pulumi.get(self, "idle_timeout_in_seconds")


@pulumi.output_type
class GetAgentAgentEndpointsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetAgentAgentLlmConfigResult(dict):
    def __init__(__self__, *,
                 routing_llm_customizations: Sequence['outputs.GetAgentAgentLlmConfigRoutingLlmCustomizationResult']):
        """
        :param Sequence['GetAgentAgentLlmConfigRoutingLlmCustomizationArgs'] routing_llm_customizations: Configuration to customize LLM.
        """
        pulumi.set(__self__, "routing_llm_customizations", routing_llm_customizations)

    @_builtins.property
    @pulumi.getter(name="routingLlmCustomizations")
    def routing_llm_customizations(self) -> Sequence['outputs.GetAgentAgentLlmConfigRoutingLlmCustomizationResult']:
        """
        Configuration to customize LLM.
        """
        return pulumi.get(self, "routing_llm_customizations")


@pulumi.output_type
class GetAgentAgentLlmConfigRoutingLlmCustomizationResult(dict):
    def __init__(__self__, *,
                 instruction: _builtins.str):
        """
        :param _builtins.str instruction: If specified, the default instruction is replaced with provided instruction.
        """
        pulumi.set(__self__, "instruction", instruction)

    @_builtins.property
    @pulumi.getter
    def instruction(self) -> _builtins.str:
        """
        If specified, the default instruction is replaced with provided instruction.
        """
        return pulumi.get(self, "instruction")


@pulumi.output_type
class GetAgentAgentsAgentCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetAgentAgentsAgentCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetAgentAgentsAgentCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAgentAgentsAgentCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: _builtins.str,
                 defined_tags: Mapping[str, _builtins.str],
                 description: _builtins.str,
                 display_name: _builtins.str,
                 freeform_tags: Mapping[str, _builtins.str],
                 id: _builtins.str,
                 knowledge_base_ids: Sequence[_builtins.str],
                 lifecycle_details: _builtins.str,
                 llm_configs: Sequence['outputs.GetAgentAgentsAgentCollectionItemLlmConfigResult'],
                 state: _builtins.str,
                 system_tags: Mapping[str, _builtins.str],
                 time_created: _builtins.str,
                 time_updated: _builtins.str,
                 welcome_message: _builtins.str):
        """
        :param _builtins.str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
        :param Mapping[str, _builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
        :param _builtins.str description: Description about the agent.
        :param _builtins.str display_name: A filter to return only resources that match the given display name exactly.
        :param Mapping[str, _builtins.str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        :param _builtins.str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the agent.
        :param Sequence[_builtins.str] knowledge_base_ids: List of [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the knowledgeBases associated with agent. This field is deprecated and will be removed after March 26 2026.
        :param _builtins.str lifecycle_details: A message that describes the current state of the agent in more detail. For example, can be used to provide actionable information for a resource in the Failed state.
        :param Sequence['GetAgentAgentsAgentCollectionItemLlmConfigArgs'] llm_configs: Configuration to Agent LLM.
        :param _builtins.str state: A filter to return only resources that match the given lifecycle state. The state value is case-insensitive.
        :param Mapping[str, _builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace.  Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param _builtins.str time_created: The date and time the agent was created, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        :param _builtins.str time_updated: The date and time the agent was updated, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        :param _builtins.str welcome_message: Details about purpose and responsibility of the agent
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "knowledge_base_ids", knowledge_base_ids)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "llm_configs", llm_configs)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "welcome_message", welcome_message)

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, _builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Description about the agent.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        A filter to return only resources that match the given display name exactly.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, _builtins.str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the agent.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="knowledgeBaseIds")
    def knowledge_base_ids(self) -> Sequence[_builtins.str]:
        """
        List of [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the knowledgeBases associated with agent. This field is deprecated and will be removed after March 26 2026.
        """
        return pulumi.get(self, "knowledge_base_ids")

    @_builtins.property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> _builtins.str:
        """
        A message that describes the current state of the agent in more detail. For example, can be used to provide actionable information for a resource in the Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @_builtins.property
    @pulumi.getter(name="llmConfigs")
    def llm_configs(self) -> Sequence['outputs.GetAgentAgentsAgentCollectionItemLlmConfigResult']:
        """
        Configuration to Agent LLM.
        """
        return pulumi.get(self, "llm_configs")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        A filter to return only resources that match the given lifecycle state. The state value is case-insensitive.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, _builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace.  Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @_builtins.property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> _builtins.str:
        """
        The date and time the agent was created, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_created")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> _builtins.str:
        """
        The date and time the agent was updated, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_updated")

    @_builtins.property
    @pulumi.getter(name="welcomeMessage")
    def welcome_message(self) -> _builtins.str:
        """
        Details about purpose and responsibility of the agent
        """
        return pulumi.get(self, "welcome_message")


@pulumi.output_type
class GetAgentAgentsAgentCollectionItemLlmConfigResult(dict):
    def __init__(__self__, *,
                 routing_llm_customizations: Sequence['outputs.GetAgentAgentsAgentCollectionItemLlmConfigRoutingLlmCustomizationResult']):
        """
        :param Sequence['GetAgentAgentsAgentCollectionItemLlmConfigRoutingLlmCustomizationArgs'] routing_llm_customizations: Configuration to customize LLM.
        """
        pulumi.set(__self__, "routing_llm_customizations", routing_llm_customizations)

    @_builtins.property
    @pulumi.getter(name="routingLlmCustomizations")
    def routing_llm_customizations(self) -> Sequence['outputs.GetAgentAgentsAgentCollectionItemLlmConfigRoutingLlmCustomizationResult']:
        """
        Configuration to customize LLM.
        """
        return pulumi.get(self, "routing_llm_customizations")


@pulumi.output_type
class GetAgentAgentsAgentCollectionItemLlmConfigRoutingLlmCustomizationResult(dict):
    def __init__(__self__, *,
                 instruction: _builtins.str):
        """
        :param _builtins.str instruction: If specified, the default instruction is replaced with provided instruction.
        """
        pulumi.set(__self__, "instruction", instruction)

    @_builtins.property
    @pulumi.getter
    def instruction(self) -> _builtins.str:
        """
        If specified, the default instruction is replaced with provided instruction.
        """
        return pulumi.get(self, "instruction")


@pulumi.output_type
class GetAgentAgentsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetAgentDataIngestionJobDataIngestionJobStatisticResult(dict):
    def __init__(__self__, *,
                 duration_in_seconds: _builtins.int,
                 number_of_failed_files: _builtins.int,
                 number_of_ingested_files: _builtins.int):
        """
        :param _builtins.int duration_in_seconds: The duration of this ingestion job.
        :param _builtins.int number_of_failed_files: The number of files that have failed during the ingestion.
        :param _builtins.int number_of_ingested_files: The number of files that have been successfully ingested during the ingestion.
        """
        pulumi.set(__self__, "duration_in_seconds", duration_in_seconds)
        pulumi.set(__self__, "number_of_failed_files", number_of_failed_files)
        pulumi.set(__self__, "number_of_ingested_files", number_of_ingested_files)

    @_builtins.property
    @pulumi.getter(name="durationInSeconds")
    def duration_in_seconds(self) -> _builtins.int:
        """
        The duration of this ingestion job.
        """
        return pulumi.get(self, "duration_in_seconds")

    @_builtins.property
    @pulumi.getter(name="numberOfFailedFiles")
    def number_of_failed_files(self) -> _builtins.int:
        """
        The number of files that have failed during the ingestion.
        """
        return pulumi.get(self, "number_of_failed_files")

    @_builtins.property
    @pulumi.getter(name="numberOfIngestedFiles")
    def number_of_ingested_files(self) -> _builtins.int:
        """
        The number of files that have been successfully ingested during the ingestion.
        """
        return pulumi.get(self, "number_of_ingested_files")


@pulumi.output_type
class GetAgentDataIngestionJobsDataIngestionJobCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetAgentDataIngestionJobsDataIngestionJobCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetAgentDataIngestionJobsDataIngestionJobCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAgentDataIngestionJobsDataIngestionJobCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: _builtins.str,
                 data_ingestion_job_statistics: Sequence['outputs.GetAgentDataIngestionJobsDataIngestionJobCollectionItemDataIngestionJobStatisticResult'],
                 data_source_id: _builtins.str,
                 defined_tags: Mapping[str, _builtins.str],
                 description: _builtins.str,
                 display_name: _builtins.str,
                 freeform_tags: Mapping[str, _builtins.str],
                 id: _builtins.str,
                 lifecycle_details: _builtins.str,
                 state: _builtins.str,
                 system_tags: Mapping[str, _builtins.str],
                 time_created: _builtins.str,
                 time_updated: _builtins.str):
        """
        :param _builtins.str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
        :param Sequence['GetAgentDataIngestionJobsDataIngestionJobCollectionItemDataIngestionJobStatisticArgs'] data_ingestion_job_statistics: **DataIngestionJobStatistics**
        :param _builtins.str data_source_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the data source.
        :param Mapping[str, _builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
        :param _builtins.str description: A user-friendly name. Does not have to be unique, and it's changeable.
        :param _builtins.str display_name: A filter to return only resources that match the given display name exactly.
        :param Mapping[str, _builtins.str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        :param _builtins.str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DataIngestionJob.
        :param _builtins.str lifecycle_details: A message that describes the current state of the data ingestion job in more detail. For example, can be used to provide actionable information for a resource in the Failed state.
        :param _builtins.str state: A filter to return only resources that match the given lifecycle state. The state value is case-insensitive.
        :param Mapping[str, _builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace.  Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param _builtins.str time_created: The date and time the data ingestion job was created, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        :param _builtins.str time_updated: The date and time the data ingestion job was updated, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "data_ingestion_job_statistics", data_ingestion_job_statistics)
        pulumi.set(__self__, "data_source_id", data_source_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter(name="dataIngestionJobStatistics")
    def data_ingestion_job_statistics(self) -> Sequence['outputs.GetAgentDataIngestionJobsDataIngestionJobCollectionItemDataIngestionJobStatisticResult']:
        """
        **DataIngestionJobStatistics**
        """
        return pulumi.get(self, "data_ingestion_job_statistics")

    @_builtins.property
    @pulumi.getter(name="dataSourceId")
    def data_source_id(self) -> _builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the data source.
        """
        return pulumi.get(self, "data_source_id")

    @_builtins.property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, _builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        A user-friendly name. Does not have to be unique, and it's changeable.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        A filter to return only resources that match the given display name exactly.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, _builtins.str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DataIngestionJob.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> _builtins.str:
        """
        A message that describes the current state of the data ingestion job in more detail. For example, can be used to provide actionable information for a resource in the Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        A filter to return only resources that match the given lifecycle state. The state value is case-insensitive.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, _builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace.  Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @_builtins.property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> _builtins.str:
        """
        The date and time the data ingestion job was created, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_created")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> _builtins.str:
        """
        The date and time the data ingestion job was updated, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetAgentDataIngestionJobsDataIngestionJobCollectionItemDataIngestionJobStatisticResult(dict):
    def __init__(__self__, *,
                 duration_in_seconds: _builtins.int,
                 number_of_failed_files: _builtins.int,
                 number_of_ingested_files: _builtins.int):
        """
        :param _builtins.int duration_in_seconds: The duration of this ingestion job.
        :param _builtins.int number_of_failed_files: The number of files that have failed during the ingestion.
        :param _builtins.int number_of_ingested_files: The number of files that have been successfully ingested during the ingestion.
        """
        pulumi.set(__self__, "duration_in_seconds", duration_in_seconds)
        pulumi.set(__self__, "number_of_failed_files", number_of_failed_files)
        pulumi.set(__self__, "number_of_ingested_files", number_of_ingested_files)

    @_builtins.property
    @pulumi.getter(name="durationInSeconds")
    def duration_in_seconds(self) -> _builtins.int:
        """
        The duration of this ingestion job.
        """
        return pulumi.get(self, "duration_in_seconds")

    @_builtins.property
    @pulumi.getter(name="numberOfFailedFiles")
    def number_of_failed_files(self) -> _builtins.int:
        """
        The number of files that have failed during the ingestion.
        """
        return pulumi.get(self, "number_of_failed_files")

    @_builtins.property
    @pulumi.getter(name="numberOfIngestedFiles")
    def number_of_ingested_files(self) -> _builtins.int:
        """
        The number of files that have been successfully ingested during the ingestion.
        """
        return pulumi.get(self, "number_of_ingested_files")


@pulumi.output_type
class GetAgentDataIngestionJobsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetAgentDataSourceDataSourceConfigResult(dict):
    def __init__(__self__, *,
                 data_source_config_type: _builtins.str,
                 object_storage_prefixes: Sequence['outputs.GetAgentDataSourceDataSourceConfigObjectStoragePrefixResult']):
        """
        :param _builtins.str data_source_config_type: The type of the tool. The allowed values are:
               * `OCI_OBJECT_STORAGE`: The data source is Oracle Cloud Infrastructure Object Storage.
        :param Sequence['GetAgentDataSourceDataSourceConfigObjectStoragePrefixArgs'] object_storage_prefixes: The locations of data items in Object Storage, can either be an object (File) or a prefix (folder).
        """
        pulumi.set(__self__, "data_source_config_type", data_source_config_type)
        pulumi.set(__self__, "object_storage_prefixes", object_storage_prefixes)

    @_builtins.property
    @pulumi.getter(name="dataSourceConfigType")
    def data_source_config_type(self) -> _builtins.str:
        """
        The type of the tool. The allowed values are:
        * `OCI_OBJECT_STORAGE`: The data source is Oracle Cloud Infrastructure Object Storage.
        """
        return pulumi.get(self, "data_source_config_type")

    @_builtins.property
    @pulumi.getter(name="objectStoragePrefixes")
    def object_storage_prefixes(self) -> Sequence['outputs.GetAgentDataSourceDataSourceConfigObjectStoragePrefixResult']:
        """
        The locations of data items in Object Storage, can either be an object (File) or a prefix (folder).
        """
        return pulumi.get(self, "object_storage_prefixes")


@pulumi.output_type
class GetAgentDataSourceDataSourceConfigObjectStoragePrefixResult(dict):
    def __init__(__self__, *,
                 bucket: _builtins.str,
                 namespace: _builtins.str,
                 prefix: _builtins.str):
        """
        :param _builtins.str bucket: The bucket name of an object.
        :param _builtins.str namespace: The namespace name of an object.
        :param _builtins.str prefix: The name of the object (file) or prefix (folder).
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "prefix", prefix)

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> _builtins.str:
        """
        The bucket name of an object.
        """
        return pulumi.get(self, "bucket")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        """
        The namespace name of an object.
        """
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> _builtins.str:
        """
        The name of the object (file) or prefix (folder).
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class GetAgentDataSourcesDataSourceCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetAgentDataSourcesDataSourceCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetAgentDataSourcesDataSourceCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAgentDataSourcesDataSourceCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: _builtins.str,
                 data_source_configs: Sequence['outputs.GetAgentDataSourcesDataSourceCollectionItemDataSourceConfigResult'],
                 defined_tags: Mapping[str, _builtins.str],
                 description: _builtins.str,
                 display_name: _builtins.str,
                 freeform_tags: Mapping[str, _builtins.str],
                 id: _builtins.str,
                 knowledge_base_id: _builtins.str,
                 lifecycle_details: _builtins.str,
                 metadata: Mapping[str, _builtins.str],
                 state: _builtins.str,
                 system_tags: Mapping[str, _builtins.str],
                 time_created: _builtins.str,
                 time_updated: _builtins.str):
        """
        :param _builtins.str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
        :param Sequence['GetAgentDataSourcesDataSourceCollectionItemDataSourceConfigArgs'] data_source_configs: **DataSourceConfig**
        :param Mapping[str, _builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
        :param _builtins.str description: A description of the data source.
        :param _builtins.str display_name: A filter to return only resources that match the given display name exactly.
        :param Mapping[str, _builtins.str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        :param _builtins.str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the data source.
        :param _builtins.str knowledge_base_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the knowledge base.
        :param _builtins.str lifecycle_details: A message that describes the current state of the data source in more detail. For example, can be used to provide actionable information for a resource in the Failed state.
        :param Mapping[str, _builtins.str] metadata: Key-value pairs to allow additional configurations.
        :param _builtins.str state: A filter to return only resources that match the given lifecycle state. The state value is case-insensitive.
        :param Mapping[str, _builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace.  Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param _builtins.str time_created: The date and time the data source was created, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        :param _builtins.str time_updated: The date and time the data source was updated, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "data_source_configs", data_source_configs)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "knowledge_base_id", knowledge_base_id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter(name="dataSourceConfigs")
    def data_source_configs(self) -> Sequence['outputs.GetAgentDataSourcesDataSourceCollectionItemDataSourceConfigResult']:
        """
        **DataSourceConfig**
        """
        return pulumi.get(self, "data_source_configs")

    @_builtins.property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, _builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        A description of the data source.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        A filter to return only resources that match the given display name exactly.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, _builtins.str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the data source.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="knowledgeBaseId")
    def knowledge_base_id(self) -> _builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the knowledge base.
        """
        return pulumi.get(self, "knowledge_base_id")

    @_builtins.property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> _builtins.str:
        """
        A message that describes the current state of the data source in more detail. For example, can be used to provide actionable information for a resource in the Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @_builtins.property
    @pulumi.getter
    def metadata(self) -> Mapping[str, _builtins.str]:
        """
        Key-value pairs to allow additional configurations.
        """
        return pulumi.get(self, "metadata")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        A filter to return only resources that match the given lifecycle state. The state value is case-insensitive.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, _builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace.  Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @_builtins.property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> _builtins.str:
        """
        The date and time the data source was created, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_created")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> _builtins.str:
        """
        The date and time the data source was updated, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetAgentDataSourcesDataSourceCollectionItemDataSourceConfigResult(dict):
    def __init__(__self__, *,
                 data_source_config_type: _builtins.str,
                 object_storage_prefixes: Sequence['outputs.GetAgentDataSourcesDataSourceCollectionItemDataSourceConfigObjectStoragePrefixResult']):
        """
        :param _builtins.str data_source_config_type: The type of the tool. The allowed values are:
               * `OCI_OBJECT_STORAGE`: The data source is Oracle Cloud Infrastructure Object Storage.
        :param Sequence['GetAgentDataSourcesDataSourceCollectionItemDataSourceConfigObjectStoragePrefixArgs'] object_storage_prefixes: The locations of data items in Object Storage, can either be an object (File) or a prefix (folder).
        """
        pulumi.set(__self__, "data_source_config_type", data_source_config_type)
        pulumi.set(__self__, "object_storage_prefixes", object_storage_prefixes)

    @_builtins.property
    @pulumi.getter(name="dataSourceConfigType")
    def data_source_config_type(self) -> _builtins.str:
        """
        The type of the tool. The allowed values are:
        * `OCI_OBJECT_STORAGE`: The data source is Oracle Cloud Infrastructure Object Storage.
        """
        return pulumi.get(self, "data_source_config_type")

    @_builtins.property
    @pulumi.getter(name="objectStoragePrefixes")
    def object_storage_prefixes(self) -> Sequence['outputs.GetAgentDataSourcesDataSourceCollectionItemDataSourceConfigObjectStoragePrefixResult']:
        """
        The locations of data items in Object Storage, can either be an object (File) or a prefix (folder).
        """
        return pulumi.get(self, "object_storage_prefixes")


@pulumi.output_type
class GetAgentDataSourcesDataSourceCollectionItemDataSourceConfigObjectStoragePrefixResult(dict):
    def __init__(__self__, *,
                 bucket: _builtins.str,
                 namespace: _builtins.str,
                 prefix: _builtins.str):
        """
        :param _builtins.str bucket: The bucket name of an object.
        :param _builtins.str namespace: The namespace name of an object.
        :param _builtins.str prefix: The name of the object (file) or prefix (folder).
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "prefix", prefix)

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> _builtins.str:
        """
        The bucket name of an object.
        """
        return pulumi.get(self, "bucket")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        """
        The namespace name of an object.
        """
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> _builtins.str:
        """
        The name of the object (file) or prefix (folder).
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class GetAgentDataSourcesFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetAgentKnowledgeBaseIndexConfigResult(dict):
    def __init__(__self__, *,
                 cluster_id: _builtins.str,
                 database_connections: Sequence['outputs.GetAgentKnowledgeBaseIndexConfigDatabaseConnectionResult'],
                 database_functions: Sequence['outputs.GetAgentKnowledgeBaseIndexConfigDatabaseFunctionResult'],
                 index_config_type: _builtins.str,
                 indexes: Sequence['outputs.GetAgentKnowledgeBaseIndexConfigIndexResult'],
                 secret_details: Sequence['outputs.GetAgentKnowledgeBaseIndexConfigSecretDetailResult'],
                 should_enable_hybrid_search: _builtins.bool):
        """
        :param _builtins.str cluster_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the OpenSearch Cluster.
        :param Sequence['GetAgentKnowledgeBaseIndexConfigDatabaseConnectionArgs'] database_connections: **DatabaseConnection**
        :param Sequence['GetAgentKnowledgeBaseIndexConfigDatabaseFunctionArgs'] database_functions: Array of Database functions to be used.
        :param _builtins.str index_config_type: The type of index. The allowed values are:
               * `DEFAULT_INDEX_CONFIG`: DefaultIndexConfig allows the service to create and manage vector store on behalf of the customer.
               * `OCI_OPEN_SEARCH_INDEX_CONFIG`: OciOpenSearchIndexConfig allows customer to configure their OpenSearch cluster.
               * `OCI_DATABASE_CONFIG`: OciDatabaseConfig allows customer to configure their Database.
        :param Sequence['GetAgentKnowledgeBaseIndexConfigIndexArgs'] indexes: Index configuration for open search.
        :param Sequence['GetAgentKnowledgeBaseIndexConfigSecretDetailArgs'] secret_details: **SecretDetail**
        :param _builtins.bool should_enable_hybrid_search: Whether to enable Hybrid search in service managed OpenSearch.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "database_connections", database_connections)
        pulumi.set(__self__, "database_functions", database_functions)
        pulumi.set(__self__, "index_config_type", index_config_type)
        pulumi.set(__self__, "indexes", indexes)
        pulumi.set(__self__, "secret_details", secret_details)
        pulumi.set(__self__, "should_enable_hybrid_search", should_enable_hybrid_search)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> _builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the OpenSearch Cluster.
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter(name="databaseConnections")
    def database_connections(self) -> Sequence['outputs.GetAgentKnowledgeBaseIndexConfigDatabaseConnectionResult']:
        """
        **DatabaseConnection**
        """
        return pulumi.get(self, "database_connections")

    @_builtins.property
    @pulumi.getter(name="databaseFunctions")
    def database_functions(self) -> Sequence['outputs.GetAgentKnowledgeBaseIndexConfigDatabaseFunctionResult']:
        """
        Array of Database functions to be used.
        """
        return pulumi.get(self, "database_functions")

    @_builtins.property
    @pulumi.getter(name="indexConfigType")
    def index_config_type(self) -> _builtins.str:
        """
        The type of index. The allowed values are:
        * `DEFAULT_INDEX_CONFIG`: DefaultIndexConfig allows the service to create and manage vector store on behalf of the customer.
        * `OCI_OPEN_SEARCH_INDEX_CONFIG`: OciOpenSearchIndexConfig allows customer to configure their OpenSearch cluster.
        * `OCI_DATABASE_CONFIG`: OciDatabaseConfig allows customer to configure their Database.
        """
        return pulumi.get(self, "index_config_type")

    @_builtins.property
    @pulumi.getter
    def indexes(self) -> Sequence['outputs.GetAgentKnowledgeBaseIndexConfigIndexResult']:
        """
        Index configuration for open search.
        """
        return pulumi.get(self, "indexes")

    @_builtins.property
    @pulumi.getter(name="secretDetails")
    def secret_details(self) -> Sequence['outputs.GetAgentKnowledgeBaseIndexConfigSecretDetailResult']:
        """
        **SecretDetail**
        """
        return pulumi.get(self, "secret_details")

    @_builtins.property
    @pulumi.getter(name="shouldEnableHybridSearch")
    def should_enable_hybrid_search(self) -> _builtins.bool:
        """
        Whether to enable Hybrid search in service managed OpenSearch.
        """
        return pulumi.get(self, "should_enable_hybrid_search")


@pulumi.output_type
class GetAgentKnowledgeBaseIndexConfigDatabaseConnectionResult(dict):
    def __init__(__self__, *,
                 connection_id: _builtins.str,
                 connection_type: _builtins.str):
        """
        :param _builtins.str connection_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Tools Connection.
        :param _builtins.str connection_type: The type of Database connection. The allowed values are:
               * `DATABASE_TOOL_CONNECTION`: This allows the service to connect to a vector store via a Database Tools Connection.
        """
        pulumi.set(__self__, "connection_id", connection_id)
        pulumi.set(__self__, "connection_type", connection_type)

    @_builtins.property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> _builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Tools Connection.
        """
        return pulumi.get(self, "connection_id")

    @_builtins.property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> _builtins.str:
        """
        The type of Database connection. The allowed values are:
        * `DATABASE_TOOL_CONNECTION`: This allows the service to connect to a vector store via a Database Tools Connection.
        """
        return pulumi.get(self, "connection_type")


@pulumi.output_type
class GetAgentKnowledgeBaseIndexConfigDatabaseFunctionResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str):
        """
        :param _builtins.str name: The index name in opensearch.
        """
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The index name in opensearch.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetAgentKnowledgeBaseIndexConfigIndexResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 schemas: Sequence['outputs.GetAgentKnowledgeBaseIndexConfigIndexSchemaResult']):
        """
        :param _builtins.str name: The index name in opensearch.
        :param Sequence['GetAgentKnowledgeBaseIndexConfigIndexSchemaArgs'] schemas: **IndexSchema**
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "schemas", schemas)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The index name in opensearch.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def schemas(self) -> Sequence['outputs.GetAgentKnowledgeBaseIndexConfigIndexSchemaResult']:
        """
        **IndexSchema**
        """
        return pulumi.get(self, "schemas")


@pulumi.output_type
class GetAgentKnowledgeBaseIndexConfigIndexSchemaResult(dict):
    def __init__(__self__, *,
                 body_key: _builtins.str,
                 embedding_body_key: _builtins.str,
                 title_key: _builtins.str,
                 url_key: _builtins.str):
        """
        :param _builtins.str body_key: Body key name.
        :param _builtins.str embedding_body_key: Field within customer managed Oracle Cloud Infrastructure OpenSearch document containing the vector embedding for queries.
        :param _builtins.str title_key: Title key that stores the Title of a document, if available.
        :param _builtins.str url_key: URL key that stores the URL of a document, if available.
        """
        pulumi.set(__self__, "body_key", body_key)
        pulumi.set(__self__, "embedding_body_key", embedding_body_key)
        pulumi.set(__self__, "title_key", title_key)
        pulumi.set(__self__, "url_key", url_key)

    @_builtins.property
    @pulumi.getter(name="bodyKey")
    def body_key(self) -> _builtins.str:
        """
        Body key name.
        """
        return pulumi.get(self, "body_key")

    @_builtins.property
    @pulumi.getter(name="embeddingBodyKey")
    def embedding_body_key(self) -> _builtins.str:
        """
        Field within customer managed Oracle Cloud Infrastructure OpenSearch document containing the vector embedding for queries.
        """
        return pulumi.get(self, "embedding_body_key")

    @_builtins.property
    @pulumi.getter(name="titleKey")
    def title_key(self) -> _builtins.str:
        """
        Title key that stores the Title of a document, if available.
        """
        return pulumi.get(self, "title_key")

    @_builtins.property
    @pulumi.getter(name="urlKey")
    def url_key(self) -> _builtins.str:
        """
        URL key that stores the URL of a document, if available.
        """
        return pulumi.get(self, "url_key")


@pulumi.output_type
class GetAgentKnowledgeBaseIndexConfigSecretDetailResult(dict):
    def __init__(__self__, *,
                 client_id: _builtins.str,
                 idcs_url: _builtins.str,
                 scope_url: _builtins.str,
                 type: _builtins.str,
                 vault_secret_id: _builtins.str):
        """
        :param _builtins.str client_id: The IDCS Connect clientId.
        :param _builtins.str idcs_url: The URL represent authentication url of the IDCS.
        :param _builtins.str scope_url: Fully qualified scope url
        :param _builtins.str type: The type of OpenID. The allowed values are:
               * `IDCS_SECRET`: The OpenID configuration used is OpenSearch is IDCS.
               * `BASIC_AUTH_SECRET`: Basic authentication use for OpenSearch
        :param _builtins.str vault_secret_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the secret for basic authentication.
        """
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "idcs_url", idcs_url)
        pulumi.set(__self__, "scope_url", scope_url)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vault_secret_id", vault_secret_id)

    @_builtins.property
    @pulumi.getter(name="clientId")
    def client_id(self) -> _builtins.str:
        """
        The IDCS Connect clientId.
        """
        return pulumi.get(self, "client_id")

    @_builtins.property
    @pulumi.getter(name="idcsUrl")
    def idcs_url(self) -> _builtins.str:
        """
        The URL represent authentication url of the IDCS.
        """
        return pulumi.get(self, "idcs_url")

    @_builtins.property
    @pulumi.getter(name="scopeUrl")
    def scope_url(self) -> _builtins.str:
        """
        Fully qualified scope url
        """
        return pulumi.get(self, "scope_url")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of OpenID. The allowed values are:
        * `IDCS_SECRET`: The OpenID configuration used is OpenSearch is IDCS.
        * `BASIC_AUTH_SECRET`: Basic authentication use for OpenSearch
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="vaultSecretId")
    def vault_secret_id(self) -> _builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the secret for basic authentication.
        """
        return pulumi.get(self, "vault_secret_id")


@pulumi.output_type
class GetAgentKnowledgeBasesFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        """
        :param _builtins.str name: The index name in opensearch.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The index name in opensearch.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetAgentKnowledgeBasesKnowledgeBaseCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetAgentKnowledgeBasesKnowledgeBaseCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetAgentKnowledgeBasesKnowledgeBaseCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAgentKnowledgeBasesKnowledgeBaseCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: _builtins.str,
                 defined_tags: Mapping[str, _builtins.str],
                 description: _builtins.str,
                 display_name: _builtins.str,
                 freeform_tags: Mapping[str, _builtins.str],
                 id: _builtins.str,
                 index_configs: Sequence['outputs.GetAgentKnowledgeBasesKnowledgeBaseCollectionItemIndexConfigResult'],
                 lifecycle_details: _builtins.str,
                 state: _builtins.str,
                 system_tags: Mapping[str, _builtins.str],
                 time_created: _builtins.str,
                 time_updated: _builtins.str):
        """
        :param _builtins.str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
        :param Mapping[str, _builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
        :param _builtins.str description: A description of the knowledge base.
        :param _builtins.str display_name: A filter to return only resources that match the given display name exactly.
        :param Mapping[str, _builtins.str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        :param _builtins.str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the knowledge base.
        :param Sequence['GetAgentKnowledgeBasesKnowledgeBaseCollectionItemIndexConfigArgs'] index_configs: **IndexConfig**
        :param _builtins.str lifecycle_details: A message that describes the current state of the knowledge base in more detail. For example, can be used to provide actionable information for a resource in the Failed state.
        :param _builtins.str state: A filter to return only resources that match the given lifecycle state. The state value is case-insensitive.
        :param Mapping[str, _builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace.  Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param _builtins.str time_created: The date and time the knowledge base was created, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        :param _builtins.str time_updated: The date and time the knowledge base was updated, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "index_configs", index_configs)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, _builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        A description of the knowledge base.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        A filter to return only resources that match the given display name exactly.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, _builtins.str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the knowledge base.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="indexConfigs")
    def index_configs(self) -> Sequence['outputs.GetAgentKnowledgeBasesKnowledgeBaseCollectionItemIndexConfigResult']:
        """
        **IndexConfig**
        """
        return pulumi.get(self, "index_configs")

    @_builtins.property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> _builtins.str:
        """
        A message that describes the current state of the knowledge base in more detail. For example, can be used to provide actionable information for a resource in the Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        A filter to return only resources that match the given lifecycle state. The state value is case-insensitive.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, _builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace.  Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @_builtins.property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> _builtins.str:
        """
        The date and time the knowledge base was created, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_created")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> _builtins.str:
        """
        The date and time the knowledge base was updated, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetAgentKnowledgeBasesKnowledgeBaseCollectionItemIndexConfigResult(dict):
    def __init__(__self__, *,
                 cluster_id: _builtins.str,
                 database_connections: Sequence['outputs.GetAgentKnowledgeBasesKnowledgeBaseCollectionItemIndexConfigDatabaseConnectionResult'],
                 database_functions: Sequence['outputs.GetAgentKnowledgeBasesKnowledgeBaseCollectionItemIndexConfigDatabaseFunctionResult'],
                 index_config_type: _builtins.str,
                 indexes: Sequence['outputs.GetAgentKnowledgeBasesKnowledgeBaseCollectionItemIndexConfigIndexResult'],
                 secret_details: Sequence['outputs.GetAgentKnowledgeBasesKnowledgeBaseCollectionItemIndexConfigSecretDetailResult'],
                 should_enable_hybrid_search: _builtins.bool):
        """
        :param _builtins.str cluster_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the OpenSearch Cluster.
        :param Sequence['GetAgentKnowledgeBasesKnowledgeBaseCollectionItemIndexConfigDatabaseConnectionArgs'] database_connections: **DatabaseConnection**
        :param Sequence['GetAgentKnowledgeBasesKnowledgeBaseCollectionItemIndexConfigDatabaseFunctionArgs'] database_functions: Array of Database functions to be used.
        :param _builtins.str index_config_type: The type of index. The allowed values are:
               * `DEFAULT_INDEX_CONFIG`: DefaultIndexConfig allows the service to create and manage vector store on behalf of the customer.
               * `OCI_OPEN_SEARCH_INDEX_CONFIG`: OciOpenSearchIndexConfig allows customer to configure their OpenSearch cluster.
               * `OCI_DATABASE_CONFIG`: OciDatabaseConfig allows customer to configure their Database.
        :param Sequence['GetAgentKnowledgeBasesKnowledgeBaseCollectionItemIndexConfigIndexArgs'] indexes: Index configuration for open search.
        :param Sequence['GetAgentKnowledgeBasesKnowledgeBaseCollectionItemIndexConfigSecretDetailArgs'] secret_details: **SecretDetail**
        :param _builtins.bool should_enable_hybrid_search: Whether to enable Hybrid search in service managed OpenSearch.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "database_connections", database_connections)
        pulumi.set(__self__, "database_functions", database_functions)
        pulumi.set(__self__, "index_config_type", index_config_type)
        pulumi.set(__self__, "indexes", indexes)
        pulumi.set(__self__, "secret_details", secret_details)
        pulumi.set(__self__, "should_enable_hybrid_search", should_enable_hybrid_search)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> _builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the OpenSearch Cluster.
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter(name="databaseConnections")
    def database_connections(self) -> Sequence['outputs.GetAgentKnowledgeBasesKnowledgeBaseCollectionItemIndexConfigDatabaseConnectionResult']:
        """
        **DatabaseConnection**
        """
        return pulumi.get(self, "database_connections")

    @_builtins.property
    @pulumi.getter(name="databaseFunctions")
    def database_functions(self) -> Sequence['outputs.GetAgentKnowledgeBasesKnowledgeBaseCollectionItemIndexConfigDatabaseFunctionResult']:
        """
        Array of Database functions to be used.
        """
        return pulumi.get(self, "database_functions")

    @_builtins.property
    @pulumi.getter(name="indexConfigType")
    def index_config_type(self) -> _builtins.str:
        """
        The type of index. The allowed values are:
        * `DEFAULT_INDEX_CONFIG`: DefaultIndexConfig allows the service to create and manage vector store on behalf of the customer.
        * `OCI_OPEN_SEARCH_INDEX_CONFIG`: OciOpenSearchIndexConfig allows customer to configure their OpenSearch cluster.
        * `OCI_DATABASE_CONFIG`: OciDatabaseConfig allows customer to configure their Database.
        """
        return pulumi.get(self, "index_config_type")

    @_builtins.property
    @pulumi.getter
    def indexes(self) -> Sequence['outputs.GetAgentKnowledgeBasesKnowledgeBaseCollectionItemIndexConfigIndexResult']:
        """
        Index configuration for open search.
        """
        return pulumi.get(self, "indexes")

    @_builtins.property
    @pulumi.getter(name="secretDetails")
    def secret_details(self) -> Sequence['outputs.GetAgentKnowledgeBasesKnowledgeBaseCollectionItemIndexConfigSecretDetailResult']:
        """
        **SecretDetail**
        """
        return pulumi.get(self, "secret_details")

    @_builtins.property
    @pulumi.getter(name="shouldEnableHybridSearch")
    def should_enable_hybrid_search(self) -> _builtins.bool:
        """
        Whether to enable Hybrid search in service managed OpenSearch.
        """
        return pulumi.get(self, "should_enable_hybrid_search")


@pulumi.output_type
class GetAgentKnowledgeBasesKnowledgeBaseCollectionItemIndexConfigDatabaseConnectionResult(dict):
    def __init__(__self__, *,
                 connection_id: _builtins.str,
                 connection_type: _builtins.str):
        """
        :param _builtins.str connection_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Tools Connection.
        :param _builtins.str connection_type: The type of Database connection. The allowed values are:
               * `DATABASE_TOOL_CONNECTION`: This allows the service to connect to a vector store via a Database Tools Connection.
        """
        pulumi.set(__self__, "connection_id", connection_id)
        pulumi.set(__self__, "connection_type", connection_type)

    @_builtins.property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> _builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Tools Connection.
        """
        return pulumi.get(self, "connection_id")

    @_builtins.property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> _builtins.str:
        """
        The type of Database connection. The allowed values are:
        * `DATABASE_TOOL_CONNECTION`: This allows the service to connect to a vector store via a Database Tools Connection.
        """
        return pulumi.get(self, "connection_type")


@pulumi.output_type
class GetAgentKnowledgeBasesKnowledgeBaseCollectionItemIndexConfigDatabaseFunctionResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str):
        """
        :param _builtins.str name: The index name in opensearch.
        """
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The index name in opensearch.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetAgentKnowledgeBasesKnowledgeBaseCollectionItemIndexConfigIndexResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 schemas: Sequence['outputs.GetAgentKnowledgeBasesKnowledgeBaseCollectionItemIndexConfigIndexSchemaResult']):
        """
        :param _builtins.str name: The index name in opensearch.
        :param Sequence['GetAgentKnowledgeBasesKnowledgeBaseCollectionItemIndexConfigIndexSchemaArgs'] schemas: **IndexSchema**
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "schemas", schemas)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The index name in opensearch.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def schemas(self) -> Sequence['outputs.GetAgentKnowledgeBasesKnowledgeBaseCollectionItemIndexConfigIndexSchemaResult']:
        """
        **IndexSchema**
        """
        return pulumi.get(self, "schemas")


@pulumi.output_type
class GetAgentKnowledgeBasesKnowledgeBaseCollectionItemIndexConfigIndexSchemaResult(dict):
    def __init__(__self__, *,
                 body_key: _builtins.str,
                 embedding_body_key: _builtins.str,
                 title_key: _builtins.str,
                 url_key: _builtins.str):
        """
        :param _builtins.str body_key: Body key name.
        :param _builtins.str embedding_body_key: Field within customer managed Oracle Cloud Infrastructure OpenSearch document containing the vector embedding for queries.
        :param _builtins.str title_key: Title key that stores the Title of a document, if available.
        :param _builtins.str url_key: URL key that stores the URL of a document, if available.
        """
        pulumi.set(__self__, "body_key", body_key)
        pulumi.set(__self__, "embedding_body_key", embedding_body_key)
        pulumi.set(__self__, "title_key", title_key)
        pulumi.set(__self__, "url_key", url_key)

    @_builtins.property
    @pulumi.getter(name="bodyKey")
    def body_key(self) -> _builtins.str:
        """
        Body key name.
        """
        return pulumi.get(self, "body_key")

    @_builtins.property
    @pulumi.getter(name="embeddingBodyKey")
    def embedding_body_key(self) -> _builtins.str:
        """
        Field within customer managed Oracle Cloud Infrastructure OpenSearch document containing the vector embedding for queries.
        """
        return pulumi.get(self, "embedding_body_key")

    @_builtins.property
    @pulumi.getter(name="titleKey")
    def title_key(self) -> _builtins.str:
        """
        Title key that stores the Title of a document, if available.
        """
        return pulumi.get(self, "title_key")

    @_builtins.property
    @pulumi.getter(name="urlKey")
    def url_key(self) -> _builtins.str:
        """
        URL key that stores the URL of a document, if available.
        """
        return pulumi.get(self, "url_key")


@pulumi.output_type
class GetAgentKnowledgeBasesKnowledgeBaseCollectionItemIndexConfigSecretDetailResult(dict):
    def __init__(__self__, *,
                 client_id: _builtins.str,
                 idcs_url: _builtins.str,
                 scope_url: _builtins.str,
                 type: _builtins.str,
                 vault_secret_id: _builtins.str):
        """
        :param _builtins.str client_id: The IDCS Connect clientId.
        :param _builtins.str idcs_url: The URL represent authentication url of the IDCS.
        :param _builtins.str scope_url: Fully qualified scope url
        :param _builtins.str type: The type of OpenID. The allowed values are:
               * `IDCS_SECRET`: The OpenID configuration used is OpenSearch is IDCS.
               * `BASIC_AUTH_SECRET`: Basic authentication use for OpenSearch
        :param _builtins.str vault_secret_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the secret for basic authentication.
        """
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "idcs_url", idcs_url)
        pulumi.set(__self__, "scope_url", scope_url)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vault_secret_id", vault_secret_id)

    @_builtins.property
    @pulumi.getter(name="clientId")
    def client_id(self) -> _builtins.str:
        """
        The IDCS Connect clientId.
        """
        return pulumi.get(self, "client_id")

    @_builtins.property
    @pulumi.getter(name="idcsUrl")
    def idcs_url(self) -> _builtins.str:
        """
        The URL represent authentication url of the IDCS.
        """
        return pulumi.get(self, "idcs_url")

    @_builtins.property
    @pulumi.getter(name="scopeUrl")
    def scope_url(self) -> _builtins.str:
        """
        Fully qualified scope url
        """
        return pulumi.get(self, "scope_url")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of OpenID. The allowed values are:
        * `IDCS_SECRET`: The OpenID configuration used is OpenSearch is IDCS.
        * `BASIC_AUTH_SECRET`: Basic authentication use for OpenSearch
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="vaultSecretId")
    def vault_secret_id(self) -> _builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the secret for basic authentication.
        """
        return pulumi.get(self, "vault_secret_id")


@pulumi.output_type
class GetAgentToolToolConfigResult(dict):
    def __init__(__self__, *,
                 database_connections: Sequence['outputs.GetAgentToolToolConfigDatabaseConnectionResult'],
                 database_schemas: Sequence['outputs.GetAgentToolToolConfigDatabaseSchemaResult'],
                 dialect: _builtins.str,
                 functions: Sequence['outputs.GetAgentToolToolConfigFunctionResult'],
                 generation_llm_customizations: Sequence['outputs.GetAgentToolToolConfigGenerationLlmCustomizationResult'],
                 icl_examples: Sequence['outputs.GetAgentToolToolConfigIclExampleResult'],
                 knowledge_base_configs: Sequence['outputs.GetAgentToolToolConfigKnowledgeBaseConfigResult'],
                 model_size: _builtins.str,
                 should_enable_self_correction: _builtins.bool,
                 should_enable_sql_execution: _builtins.bool,
                 table_and_column_descriptions: Sequence['outputs.GetAgentToolToolConfigTableAndColumnDescriptionResult'],
                 tool_config_type: _builtins.str):
        """
        :param Sequence['GetAgentToolToolConfigDatabaseConnectionArgs'] database_connections: The connection type for Databases.
        :param Sequence['GetAgentToolToolConfigDatabaseSchemaArgs'] database_schemas: The input location definition.
        :param _builtins.str dialect: Dialect to be used for SQL generation.
        :param Sequence['GetAgentToolToolConfigFunctionArgs'] functions: Details of Function for Function calling tool.
        :param Sequence['GetAgentToolToolConfigGenerationLlmCustomizationArgs'] generation_llm_customizations: Configuration to customize LLM.
        :param Sequence['GetAgentToolToolConfigIclExampleArgs'] icl_examples: The input location definition.
        :param Sequence['GetAgentToolToolConfigKnowledgeBaseConfigArgs'] knowledge_base_configs: The KnowledgeBase configurations that this RAG Tool uses
        :param _builtins.str model_size: Size of the model.
        :param _builtins.bool should_enable_self_correction: To enable/disable self correction.
        :param _builtins.bool should_enable_sql_execution: To enable/disable SQL execution.
        :param Sequence['GetAgentToolToolConfigTableAndColumnDescriptionArgs'] table_and_column_descriptions: The input location definition.
        :param _builtins.str tool_config_type: The type of the Tool config. The allowed values are:
               * `SQL_TOOL_CONFIG`: The config for sql Tool.
               * `RAG_TOOL_CONFIG`: The config for rag Tool.
               * FUNCTION_CALLING_TOOL_CONFIG: The config for Function calling Tool.
        """
        pulumi.set(__self__, "database_connections", database_connections)
        pulumi.set(__self__, "database_schemas", database_schemas)
        pulumi.set(__self__, "dialect", dialect)
        pulumi.set(__self__, "functions", functions)
        pulumi.set(__self__, "generation_llm_customizations", generation_llm_customizations)
        pulumi.set(__self__, "icl_examples", icl_examples)
        pulumi.set(__self__, "knowledge_base_configs", knowledge_base_configs)
        pulumi.set(__self__, "model_size", model_size)
        pulumi.set(__self__, "should_enable_self_correction", should_enable_self_correction)
        pulumi.set(__self__, "should_enable_sql_execution", should_enable_sql_execution)
        pulumi.set(__self__, "table_and_column_descriptions", table_and_column_descriptions)
        pulumi.set(__self__, "tool_config_type", tool_config_type)

    @_builtins.property
    @pulumi.getter(name="databaseConnections")
    def database_connections(self) -> Sequence['outputs.GetAgentToolToolConfigDatabaseConnectionResult']:
        """
        The connection type for Databases.
        """
        return pulumi.get(self, "database_connections")

    @_builtins.property
    @pulumi.getter(name="databaseSchemas")
    def database_schemas(self) -> Sequence['outputs.GetAgentToolToolConfigDatabaseSchemaResult']:
        """
        The input location definition.
        """
        return pulumi.get(self, "database_schemas")

    @_builtins.property
    @pulumi.getter
    def dialect(self) -> _builtins.str:
        """
        Dialect to be used for SQL generation.
        """
        return pulumi.get(self, "dialect")

    @_builtins.property
    @pulumi.getter
    def functions(self) -> Sequence['outputs.GetAgentToolToolConfigFunctionResult']:
        """
        Details of Function for Function calling tool.
        """
        return pulumi.get(self, "functions")

    @_builtins.property
    @pulumi.getter(name="generationLlmCustomizations")
    def generation_llm_customizations(self) -> Sequence['outputs.GetAgentToolToolConfigGenerationLlmCustomizationResult']:
        """
        Configuration to customize LLM.
        """
        return pulumi.get(self, "generation_llm_customizations")

    @_builtins.property
    @pulumi.getter(name="iclExamples")
    def icl_examples(self) -> Sequence['outputs.GetAgentToolToolConfigIclExampleResult']:
        """
        The input location definition.
        """
        return pulumi.get(self, "icl_examples")

    @_builtins.property
    @pulumi.getter(name="knowledgeBaseConfigs")
    def knowledge_base_configs(self) -> Sequence['outputs.GetAgentToolToolConfigKnowledgeBaseConfigResult']:
        """
        The KnowledgeBase configurations that this RAG Tool uses
        """
        return pulumi.get(self, "knowledge_base_configs")

    @_builtins.property
    @pulumi.getter(name="modelSize")
    def model_size(self) -> _builtins.str:
        """
        Size of the model.
        """
        return pulumi.get(self, "model_size")

    @_builtins.property
    @pulumi.getter(name="shouldEnableSelfCorrection")
    def should_enable_self_correction(self) -> _builtins.bool:
        """
        To enable/disable self correction.
        """
        return pulumi.get(self, "should_enable_self_correction")

    @_builtins.property
    @pulumi.getter(name="shouldEnableSqlExecution")
    def should_enable_sql_execution(self) -> _builtins.bool:
        """
        To enable/disable SQL execution.
        """
        return pulumi.get(self, "should_enable_sql_execution")

    @_builtins.property
    @pulumi.getter(name="tableAndColumnDescriptions")
    def table_and_column_descriptions(self) -> Sequence['outputs.GetAgentToolToolConfigTableAndColumnDescriptionResult']:
        """
        The input location definition.
        """
        return pulumi.get(self, "table_and_column_descriptions")

    @_builtins.property
    @pulumi.getter(name="toolConfigType")
    def tool_config_type(self) -> _builtins.str:
        """
        The type of the Tool config. The allowed values are:
        * `SQL_TOOL_CONFIG`: The config for sql Tool.
        * `RAG_TOOL_CONFIG`: The config for rag Tool.
        * FUNCTION_CALLING_TOOL_CONFIG: The config for Function calling Tool.
        """
        return pulumi.get(self, "tool_config_type")


@pulumi.output_type
class GetAgentToolToolConfigDatabaseConnectionResult(dict):
    def __init__(__self__, *,
                 connection_id: _builtins.str,
                 connection_type: _builtins.str):
        """
        :param _builtins.str connection_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Tools Connection.
        :param _builtins.str connection_type: The type of Database connection. The allowed values are:
               * `DATABASE_TOOL_CONNECTION`: This allows the service to connect to a vector store via a Database Tools Connection.
        """
        pulumi.set(__self__, "connection_id", connection_id)
        pulumi.set(__self__, "connection_type", connection_type)

    @_builtins.property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> _builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Tools Connection.
        """
        return pulumi.get(self, "connection_id")

    @_builtins.property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> _builtins.str:
        """
        The type of Database connection. The allowed values are:
        * `DATABASE_TOOL_CONNECTION`: This allows the service to connect to a vector store via a Database Tools Connection.
        """
        return pulumi.get(self, "connection_type")


@pulumi.output_type
class GetAgentToolToolConfigDatabaseSchemaResult(dict):
    def __init__(__self__, *,
                 bucket: _builtins.str,
                 content: _builtins.str,
                 input_location_type: _builtins.str,
                 namespace: _builtins.str,
                 prefix: _builtins.str):
        """
        :param _builtins.str bucket: The bucket name of an object.
        :param _builtins.str content: Inline content as input.
        :param _builtins.str input_location_type: Type of InputLocation. The allowed values are:
               * `INLINE`: The input location is inline.
               * `OBJECT_STORAGE_PREFIX`: The input location is object storage.
        :param _builtins.str namespace: The namespace name of an object.
        :param _builtins.str prefix: The prefix of file object(s) or folder prefix.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "input_location_type", input_location_type)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "prefix", prefix)

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> _builtins.str:
        """
        The bucket name of an object.
        """
        return pulumi.get(self, "bucket")

    @_builtins.property
    @pulumi.getter
    def content(self) -> _builtins.str:
        """
        Inline content as input.
        """
        return pulumi.get(self, "content")

    @_builtins.property
    @pulumi.getter(name="inputLocationType")
    def input_location_type(self) -> _builtins.str:
        """
        Type of InputLocation. The allowed values are:
        * `INLINE`: The input location is inline.
        * `OBJECT_STORAGE_PREFIX`: The input location is object storage.
        """
        return pulumi.get(self, "input_location_type")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        """
        The namespace name of an object.
        """
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> _builtins.str:
        """
        The prefix of file object(s) or folder prefix.
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class GetAgentToolToolConfigFunctionResult(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 name: _builtins.str,
                 parameters: Mapping[str, _builtins.str]):
        """
        :param _builtins.str description: A description of the function.
        :param _builtins.str name: The name of the function to invoke.
        :param Mapping[str, _builtins.str] parameters: The parameters the function accepts, defined using a JSON Schema object.  Refer to the guide for examples and the JSON Schema documentation for details on the format.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "parameters", parameters)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        A description of the function.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the function to invoke.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> Mapping[str, _builtins.str]:
        """
        The parameters the function accepts, defined using a JSON Schema object.  Refer to the guide for examples and the JSON Schema documentation for details on the format.
        """
        return pulumi.get(self, "parameters")


@pulumi.output_type
class GetAgentToolToolConfigGenerationLlmCustomizationResult(dict):
    def __init__(__self__, *,
                 instruction: _builtins.str):
        """
        :param _builtins.str instruction: If specified, the default instruction is replaced with provided instruction.
        """
        pulumi.set(__self__, "instruction", instruction)

    @_builtins.property
    @pulumi.getter
    def instruction(self) -> _builtins.str:
        """
        If specified, the default instruction is replaced with provided instruction.
        """
        return pulumi.get(self, "instruction")


@pulumi.output_type
class GetAgentToolToolConfigIclExampleResult(dict):
    def __init__(__self__, *,
                 bucket: _builtins.str,
                 content: _builtins.str,
                 input_location_type: _builtins.str,
                 namespace: _builtins.str,
                 prefix: _builtins.str):
        """
        :param _builtins.str bucket: The bucket name of an object.
        :param _builtins.str content: Inline content as input.
        :param _builtins.str input_location_type: Type of InputLocation. The allowed values are:
               * `INLINE`: The input location is inline.
               * `OBJECT_STORAGE_PREFIX`: The input location is object storage.
        :param _builtins.str namespace: The namespace name of an object.
        :param _builtins.str prefix: The prefix of file object(s) or folder prefix.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "input_location_type", input_location_type)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "prefix", prefix)

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> _builtins.str:
        """
        The bucket name of an object.
        """
        return pulumi.get(self, "bucket")

    @_builtins.property
    @pulumi.getter
    def content(self) -> _builtins.str:
        """
        Inline content as input.
        """
        return pulumi.get(self, "content")

    @_builtins.property
    @pulumi.getter(name="inputLocationType")
    def input_location_type(self) -> _builtins.str:
        """
        Type of InputLocation. The allowed values are:
        * `INLINE`: The input location is inline.
        * `OBJECT_STORAGE_PREFIX`: The input location is object storage.
        """
        return pulumi.get(self, "input_location_type")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        """
        The namespace name of an object.
        """
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> _builtins.str:
        """
        The prefix of file object(s) or folder prefix.
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class GetAgentToolToolConfigKnowledgeBaseConfigResult(dict):
    def __init__(__self__, *,
                 knowledge_base_id: _builtins.str):
        """
        :param _builtins.str knowledge_base_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the knowledgeBase this RAG Tool uses
        """
        pulumi.set(__self__, "knowledge_base_id", knowledge_base_id)

    @_builtins.property
    @pulumi.getter(name="knowledgeBaseId")
    def knowledge_base_id(self) -> _builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the knowledgeBase this RAG Tool uses
        """
        return pulumi.get(self, "knowledge_base_id")


@pulumi.output_type
class GetAgentToolToolConfigTableAndColumnDescriptionResult(dict):
    def __init__(__self__, *,
                 bucket: _builtins.str,
                 content: _builtins.str,
                 input_location_type: _builtins.str,
                 namespace: _builtins.str,
                 prefix: _builtins.str):
        """
        :param _builtins.str bucket: The bucket name of an object.
        :param _builtins.str content: Inline content as input.
        :param _builtins.str input_location_type: Type of InputLocation. The allowed values are:
               * `INLINE`: The input location is inline.
               * `OBJECT_STORAGE_PREFIX`: The input location is object storage.
        :param _builtins.str namespace: The namespace name of an object.
        :param _builtins.str prefix: The prefix of file object(s) or folder prefix.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "input_location_type", input_location_type)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "prefix", prefix)

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> _builtins.str:
        """
        The bucket name of an object.
        """
        return pulumi.get(self, "bucket")

    @_builtins.property
    @pulumi.getter
    def content(self) -> _builtins.str:
        """
        Inline content as input.
        """
        return pulumi.get(self, "content")

    @_builtins.property
    @pulumi.getter(name="inputLocationType")
    def input_location_type(self) -> _builtins.str:
        """
        Type of InputLocation. The allowed values are:
        * `INLINE`: The input location is inline.
        * `OBJECT_STORAGE_PREFIX`: The input location is object storage.
        """
        return pulumi.get(self, "input_location_type")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        """
        The namespace name of an object.
        """
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> _builtins.str:
        """
        The prefix of file object(s) or folder prefix.
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class GetAgentToolsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        """
        :param _builtins.str name: The name of the function to invoke.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the function to invoke.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetAgentToolsToolCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetAgentToolsToolCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetAgentToolsToolCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAgentToolsToolCollectionItemResult(dict):
    def __init__(__self__, *,
                 agent_id: _builtins.str,
                 compartment_id: _builtins.str,
                 defined_tags: Mapping[str, _builtins.str],
                 description: _builtins.str,
                 display_name: _builtins.str,
                 freeform_tags: Mapping[str, _builtins.str],
                 id: _builtins.str,
                 metadata: Mapping[str, _builtins.str],
                 state: _builtins.str,
                 system_tags: Mapping[str, _builtins.str],
                 time_created: _builtins.str,
                 time_updated: _builtins.str,
                 tool_configs: Sequence['outputs.GetAgentToolsToolCollectionItemToolConfigResult']):
        """
        :param _builtins.str agent_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the agent.
        :param _builtins.str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
        :param Mapping[str, _builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
        :param _builtins.str description: A description of the function.
        :param _builtins.str display_name: A filter to return only resources that match the given display name exactly.
        :param Mapping[str, _builtins.str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        :param _builtins.str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Tool.
        :param Mapping[str, _builtins.str] metadata: Key-value pairs to allow additional configurations.
        :param _builtins.str state: A filter to return only resources that match the given lifecycle state. The state value is case-insensitive.
        :param Mapping[str, _builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace.  Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param _builtins.str time_created: The date and time the Tool was created, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        :param _builtins.str time_updated: The date and time the Tool was updated, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        :param Sequence['GetAgentToolsToolCollectionItemToolConfigArgs'] tool_configs: The configuration and type of Tool.
        """
        pulumi.set(__self__, "agent_id", agent_id)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "tool_configs", tool_configs)

    @_builtins.property
    @pulumi.getter(name="agentId")
    def agent_id(self) -> _builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the agent.
        """
        return pulumi.get(self, "agent_id")

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, _builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        A description of the function.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        A filter to return only resources that match the given display name exactly.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, _builtins.str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Tool.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def metadata(self) -> Mapping[str, _builtins.str]:
        """
        Key-value pairs to allow additional configurations.
        """
        return pulumi.get(self, "metadata")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        A filter to return only resources that match the given lifecycle state. The state value is case-insensitive.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, _builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace.  Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @_builtins.property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> _builtins.str:
        """
        The date and time the Tool was created, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_created")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> _builtins.str:
        """
        The date and time the Tool was updated, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_updated")

    @_builtins.property
    @pulumi.getter(name="toolConfigs")
    def tool_configs(self) -> Sequence['outputs.GetAgentToolsToolCollectionItemToolConfigResult']:
        """
        The configuration and type of Tool.
        """
        return pulumi.get(self, "tool_configs")


@pulumi.output_type
class GetAgentToolsToolCollectionItemToolConfigResult(dict):
    def __init__(__self__, *,
                 database_connections: Sequence['outputs.GetAgentToolsToolCollectionItemToolConfigDatabaseConnectionResult'],
                 database_schemas: Sequence['outputs.GetAgentToolsToolCollectionItemToolConfigDatabaseSchemaResult'],
                 dialect: _builtins.str,
                 functions: Sequence['outputs.GetAgentToolsToolCollectionItemToolConfigFunctionResult'],
                 generation_llm_customizations: Sequence['outputs.GetAgentToolsToolCollectionItemToolConfigGenerationLlmCustomizationResult'],
                 icl_examples: Sequence['outputs.GetAgentToolsToolCollectionItemToolConfigIclExampleResult'],
                 knowledge_base_configs: Sequence['outputs.GetAgentToolsToolCollectionItemToolConfigKnowledgeBaseConfigResult'],
                 model_size: _builtins.str,
                 should_enable_self_correction: _builtins.bool,
                 should_enable_sql_execution: _builtins.bool,
                 table_and_column_descriptions: Sequence['outputs.GetAgentToolsToolCollectionItemToolConfigTableAndColumnDescriptionResult'],
                 tool_config_type: _builtins.str):
        """
        :param Sequence['GetAgentToolsToolCollectionItemToolConfigDatabaseConnectionArgs'] database_connections: The connection type for Databases.
        :param Sequence['GetAgentToolsToolCollectionItemToolConfigDatabaseSchemaArgs'] database_schemas: The input location definition.
        :param _builtins.str dialect: Dialect to be used for SQL generation.
        :param Sequence['GetAgentToolsToolCollectionItemToolConfigFunctionArgs'] functions: Details of Function for Function calling tool.
        :param Sequence['GetAgentToolsToolCollectionItemToolConfigGenerationLlmCustomizationArgs'] generation_llm_customizations: Configuration to customize LLM.
        :param Sequence['GetAgentToolsToolCollectionItemToolConfigIclExampleArgs'] icl_examples: The input location definition.
        :param Sequence['GetAgentToolsToolCollectionItemToolConfigKnowledgeBaseConfigArgs'] knowledge_base_configs: The KnowledgeBase configurations that this RAG Tool uses
        :param _builtins.str model_size: Size of the model.
        :param _builtins.bool should_enable_self_correction: To enable/disable self correction.
        :param _builtins.bool should_enable_sql_execution: To enable/disable SQL execution.
        :param Sequence['GetAgentToolsToolCollectionItemToolConfigTableAndColumnDescriptionArgs'] table_and_column_descriptions: The input location definition.
        :param _builtins.str tool_config_type: The type of the Tool config. The allowed values are:
               * `SQL_TOOL_CONFIG`: The config for sql Tool.
               * `RAG_TOOL_CONFIG`: The config for rag Tool.
               * FUNCTION_CALLING_TOOL_CONFIG: The config for Function calling Tool.
        """
        pulumi.set(__self__, "database_connections", database_connections)
        pulumi.set(__self__, "database_schemas", database_schemas)
        pulumi.set(__self__, "dialect", dialect)
        pulumi.set(__self__, "functions", functions)
        pulumi.set(__self__, "generation_llm_customizations", generation_llm_customizations)
        pulumi.set(__self__, "icl_examples", icl_examples)
        pulumi.set(__self__, "knowledge_base_configs", knowledge_base_configs)
        pulumi.set(__self__, "model_size", model_size)
        pulumi.set(__self__, "should_enable_self_correction", should_enable_self_correction)
        pulumi.set(__self__, "should_enable_sql_execution", should_enable_sql_execution)
        pulumi.set(__self__, "table_and_column_descriptions", table_and_column_descriptions)
        pulumi.set(__self__, "tool_config_type", tool_config_type)

    @_builtins.property
    @pulumi.getter(name="databaseConnections")
    def database_connections(self) -> Sequence['outputs.GetAgentToolsToolCollectionItemToolConfigDatabaseConnectionResult']:
        """
        The connection type for Databases.
        """
        return pulumi.get(self, "database_connections")

    @_builtins.property
    @pulumi.getter(name="databaseSchemas")
    def database_schemas(self) -> Sequence['outputs.GetAgentToolsToolCollectionItemToolConfigDatabaseSchemaResult']:
        """
        The input location definition.
        """
        return pulumi.get(self, "database_schemas")

    @_builtins.property
    @pulumi.getter
    def dialect(self) -> _builtins.str:
        """
        Dialect to be used for SQL generation.
        """
        return pulumi.get(self, "dialect")

    @_builtins.property
    @pulumi.getter
    def functions(self) -> Sequence['outputs.GetAgentToolsToolCollectionItemToolConfigFunctionResult']:
        """
        Details of Function for Function calling tool.
        """
        return pulumi.get(self, "functions")

    @_builtins.property
    @pulumi.getter(name="generationLlmCustomizations")
    def generation_llm_customizations(self) -> Sequence['outputs.GetAgentToolsToolCollectionItemToolConfigGenerationLlmCustomizationResult']:
        """
        Configuration to customize LLM.
        """
        return pulumi.get(self, "generation_llm_customizations")

    @_builtins.property
    @pulumi.getter(name="iclExamples")
    def icl_examples(self) -> Sequence['outputs.GetAgentToolsToolCollectionItemToolConfigIclExampleResult']:
        """
        The input location definition.
        """
        return pulumi.get(self, "icl_examples")

    @_builtins.property
    @pulumi.getter(name="knowledgeBaseConfigs")
    def knowledge_base_configs(self) -> Sequence['outputs.GetAgentToolsToolCollectionItemToolConfigKnowledgeBaseConfigResult']:
        """
        The KnowledgeBase configurations that this RAG Tool uses
        """
        return pulumi.get(self, "knowledge_base_configs")

    @_builtins.property
    @pulumi.getter(name="modelSize")
    def model_size(self) -> _builtins.str:
        """
        Size of the model.
        """
        return pulumi.get(self, "model_size")

    @_builtins.property
    @pulumi.getter(name="shouldEnableSelfCorrection")
    def should_enable_self_correction(self) -> _builtins.bool:
        """
        To enable/disable self correction.
        """
        return pulumi.get(self, "should_enable_self_correction")

    @_builtins.property
    @pulumi.getter(name="shouldEnableSqlExecution")
    def should_enable_sql_execution(self) -> _builtins.bool:
        """
        To enable/disable SQL execution.
        """
        return pulumi.get(self, "should_enable_sql_execution")

    @_builtins.property
    @pulumi.getter(name="tableAndColumnDescriptions")
    def table_and_column_descriptions(self) -> Sequence['outputs.GetAgentToolsToolCollectionItemToolConfigTableAndColumnDescriptionResult']:
        """
        The input location definition.
        """
        return pulumi.get(self, "table_and_column_descriptions")

    @_builtins.property
    @pulumi.getter(name="toolConfigType")
    def tool_config_type(self) -> _builtins.str:
        """
        The type of the Tool config. The allowed values are:
        * `SQL_TOOL_CONFIG`: The config for sql Tool.
        * `RAG_TOOL_CONFIG`: The config for rag Tool.
        * FUNCTION_CALLING_TOOL_CONFIG: The config for Function calling Tool.
        """
        return pulumi.get(self, "tool_config_type")


@pulumi.output_type
class GetAgentToolsToolCollectionItemToolConfigDatabaseConnectionResult(dict):
    def __init__(__self__, *,
                 connection_id: _builtins.str,
                 connection_type: _builtins.str):
        """
        :param _builtins.str connection_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Tools Connection.
        :param _builtins.str connection_type: The type of Database connection. The allowed values are:
               * `DATABASE_TOOL_CONNECTION`: This allows the service to connect to a vector store via a Database Tools Connection.
        """
        pulumi.set(__self__, "connection_id", connection_id)
        pulumi.set(__self__, "connection_type", connection_type)

    @_builtins.property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> _builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Tools Connection.
        """
        return pulumi.get(self, "connection_id")

    @_builtins.property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> _builtins.str:
        """
        The type of Database connection. The allowed values are:
        * `DATABASE_TOOL_CONNECTION`: This allows the service to connect to a vector store via a Database Tools Connection.
        """
        return pulumi.get(self, "connection_type")


@pulumi.output_type
class GetAgentToolsToolCollectionItemToolConfigDatabaseSchemaResult(dict):
    def __init__(__self__, *,
                 bucket: _builtins.str,
                 content: _builtins.str,
                 input_location_type: _builtins.str,
                 namespace: _builtins.str,
                 prefix: _builtins.str):
        """
        :param _builtins.str bucket: The bucket name of an object.
        :param _builtins.str content: Inline content as input.
        :param _builtins.str input_location_type: Type of InputLocation. The allowed values are:
               * `INLINE`: The input location is inline.
               * `OBJECT_STORAGE_PREFIX`: The input location is object storage.
        :param _builtins.str namespace: The namespace name of an object.
        :param _builtins.str prefix: The prefix of file object(s) or folder prefix.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "input_location_type", input_location_type)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "prefix", prefix)

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> _builtins.str:
        """
        The bucket name of an object.
        """
        return pulumi.get(self, "bucket")

    @_builtins.property
    @pulumi.getter
    def content(self) -> _builtins.str:
        """
        Inline content as input.
        """
        return pulumi.get(self, "content")

    @_builtins.property
    @pulumi.getter(name="inputLocationType")
    def input_location_type(self) -> _builtins.str:
        """
        Type of InputLocation. The allowed values are:
        * `INLINE`: The input location is inline.
        * `OBJECT_STORAGE_PREFIX`: The input location is object storage.
        """
        return pulumi.get(self, "input_location_type")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        """
        The namespace name of an object.
        """
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> _builtins.str:
        """
        The prefix of file object(s) or folder prefix.
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class GetAgentToolsToolCollectionItemToolConfigFunctionResult(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 name: _builtins.str,
                 parameters: Mapping[str, _builtins.str]):
        """
        :param _builtins.str description: A description of the function.
        :param _builtins.str name: The name of the function to invoke.
        :param Mapping[str, _builtins.str] parameters: The parameters the function accepts, defined using a JSON Schema object.  Refer to the guide for examples and the JSON Schema documentation for details on the format.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "parameters", parameters)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        A description of the function.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the function to invoke.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> Mapping[str, _builtins.str]:
        """
        The parameters the function accepts, defined using a JSON Schema object.  Refer to the guide for examples and the JSON Schema documentation for details on the format.
        """
        return pulumi.get(self, "parameters")


@pulumi.output_type
class GetAgentToolsToolCollectionItemToolConfigGenerationLlmCustomizationResult(dict):
    def __init__(__self__, *,
                 instruction: _builtins.str):
        """
        :param _builtins.str instruction: If specified, the default instruction is replaced with provided instruction.
        """
        pulumi.set(__self__, "instruction", instruction)

    @_builtins.property
    @pulumi.getter
    def instruction(self) -> _builtins.str:
        """
        If specified, the default instruction is replaced with provided instruction.
        """
        return pulumi.get(self, "instruction")


@pulumi.output_type
class GetAgentToolsToolCollectionItemToolConfigIclExampleResult(dict):
    def __init__(__self__, *,
                 bucket: _builtins.str,
                 content: _builtins.str,
                 input_location_type: _builtins.str,
                 namespace: _builtins.str,
                 prefix: _builtins.str):
        """
        :param _builtins.str bucket: The bucket name of an object.
        :param _builtins.str content: Inline content as input.
        :param _builtins.str input_location_type: Type of InputLocation. The allowed values are:
               * `INLINE`: The input location is inline.
               * `OBJECT_STORAGE_PREFIX`: The input location is object storage.
        :param _builtins.str namespace: The namespace name of an object.
        :param _builtins.str prefix: The prefix of file object(s) or folder prefix.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "input_location_type", input_location_type)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "prefix", prefix)

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> _builtins.str:
        """
        The bucket name of an object.
        """
        return pulumi.get(self, "bucket")

    @_builtins.property
    @pulumi.getter
    def content(self) -> _builtins.str:
        """
        Inline content as input.
        """
        return pulumi.get(self, "content")

    @_builtins.property
    @pulumi.getter(name="inputLocationType")
    def input_location_type(self) -> _builtins.str:
        """
        Type of InputLocation. The allowed values are:
        * `INLINE`: The input location is inline.
        * `OBJECT_STORAGE_PREFIX`: The input location is object storage.
        """
        return pulumi.get(self, "input_location_type")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        """
        The namespace name of an object.
        """
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> _builtins.str:
        """
        The prefix of file object(s) or folder prefix.
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class GetAgentToolsToolCollectionItemToolConfigKnowledgeBaseConfigResult(dict):
    def __init__(__self__, *,
                 knowledge_base_id: _builtins.str):
        """
        :param _builtins.str knowledge_base_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the knowledgeBase this RAG Tool uses
        """
        pulumi.set(__self__, "knowledge_base_id", knowledge_base_id)

    @_builtins.property
    @pulumi.getter(name="knowledgeBaseId")
    def knowledge_base_id(self) -> _builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the knowledgeBase this RAG Tool uses
        """
        return pulumi.get(self, "knowledge_base_id")


@pulumi.output_type
class GetAgentToolsToolCollectionItemToolConfigTableAndColumnDescriptionResult(dict):
    def __init__(__self__, *,
                 bucket: _builtins.str,
                 content: _builtins.str,
                 input_location_type: _builtins.str,
                 namespace: _builtins.str,
                 prefix: _builtins.str):
        """
        :param _builtins.str bucket: The bucket name of an object.
        :param _builtins.str content: Inline content as input.
        :param _builtins.str input_location_type: Type of InputLocation. The allowed values are:
               * `INLINE`: The input location is inline.
               * `OBJECT_STORAGE_PREFIX`: The input location is object storage.
        :param _builtins.str namespace: The namespace name of an object.
        :param _builtins.str prefix: The prefix of file object(s) or folder prefix.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "input_location_type", input_location_type)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "prefix", prefix)

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> _builtins.str:
        """
        The bucket name of an object.
        """
        return pulumi.get(self, "bucket")

    @_builtins.property
    @pulumi.getter
    def content(self) -> _builtins.str:
        """
        Inline content as input.
        """
        return pulumi.get(self, "content")

    @_builtins.property
    @pulumi.getter(name="inputLocationType")
    def input_location_type(self) -> _builtins.str:
        """
        Type of InputLocation. The allowed values are:
        * `INLINE`: The input location is inline.
        * `OBJECT_STORAGE_PREFIX`: The input location is object storage.
        """
        return pulumi.get(self, "input_location_type")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        """
        The namespace name of an object.
        """
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> _builtins.str:
        """
        The prefix of file object(s) or folder prefix.
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class GetDedicatedAiClusterCapacityResult(dict):
    def __init__(__self__, *,
                 capacity_type: _builtins.str,
                 total_endpoint_capacity: _builtins.int,
                 used_endpoint_capacity: _builtins.int):
        pulumi.set(__self__, "capacity_type", capacity_type)
        pulumi.set(__self__, "total_endpoint_capacity", total_endpoint_capacity)
        pulumi.set(__self__, "used_endpoint_capacity", used_endpoint_capacity)

    @_builtins.property
    @pulumi.getter(name="capacityType")
    def capacity_type(self) -> _builtins.str:
        return pulumi.get(self, "capacity_type")

    @_builtins.property
    @pulumi.getter(name="totalEndpointCapacity")
    def total_endpoint_capacity(self) -> _builtins.int:
        return pulumi.get(self, "total_endpoint_capacity")

    @_builtins.property
    @pulumi.getter(name="usedEndpointCapacity")
    def used_endpoint_capacity(self) -> _builtins.int:
        return pulumi.get(self, "used_endpoint_capacity")


@pulumi.output_type
class GetDedicatedAiClustersDedicatedAiClusterCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDedicatedAiClustersDedicatedAiClusterCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDedicatedAiClustersDedicatedAiClusterCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDedicatedAiClustersDedicatedAiClusterCollectionItemResult(dict):
    def __init__(__self__, *,
                 capacities: Sequence['outputs.GetDedicatedAiClustersDedicatedAiClusterCollectionItemCapacityResult'],
                 compartment_id: _builtins.str,
                 defined_tags: Mapping[str, _builtins.str],
                 description: _builtins.str,
                 display_name: _builtins.str,
                 freeform_tags: Mapping[str, _builtins.str],
                 id: _builtins.str,
                 lifecycle_details: _builtins.str,
                 state: _builtins.str,
                 system_tags: Mapping[str, _builtins.str],
                 time_created: _builtins.str,
                 time_updated: _builtins.str,
                 type: _builtins.str,
                 unit_count: _builtins.int,
                 unit_shape: _builtins.str):
        """
        :param _builtins.str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
        :param _builtins.str display_name: A filter to return only resources that match the given display name exactly.
        :param _builtins.str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the dedicated AI cluster.
        :param _builtins.str state: A filter to return only the dedicated AI clusters that their lifecycle state matches the given lifecycle state.
        """
        pulumi.set(__self__, "capacities", capacities)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "unit_count", unit_count)
        pulumi.set(__self__, "unit_shape", unit_shape)

    @_builtins.property
    @pulumi.getter
    def capacities(self) -> Sequence['outputs.GetDedicatedAiClustersDedicatedAiClusterCollectionItemCapacityResult']:
        return pulumi.get(self, "capacities")

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "defined_tags")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        A filter to return only resources that match the given display name exactly.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "freeform_tags")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the dedicated AI cluster.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> _builtins.str:
        return pulumi.get(self, "lifecycle_details")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        A filter to return only the dedicated AI clusters that their lifecycle state matches the given lifecycle state.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "system_tags")

    @_builtins.property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> _builtins.str:
        return pulumi.get(self, "time_created")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> _builtins.str:
        return pulumi.get(self, "time_updated")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="unitCount")
    def unit_count(self) -> _builtins.int:
        return pulumi.get(self, "unit_count")

    @_builtins.property
    @pulumi.getter(name="unitShape")
    def unit_shape(self) -> _builtins.str:
        return pulumi.get(self, "unit_shape")


@pulumi.output_type
class GetDedicatedAiClustersDedicatedAiClusterCollectionItemCapacityResult(dict):
    def __init__(__self__, *,
                 capacity_type: _builtins.str,
                 total_endpoint_capacity: _builtins.int,
                 used_endpoint_capacity: _builtins.int):
        pulumi.set(__self__, "capacity_type", capacity_type)
        pulumi.set(__self__, "total_endpoint_capacity", total_endpoint_capacity)
        pulumi.set(__self__, "used_endpoint_capacity", used_endpoint_capacity)

    @_builtins.property
    @pulumi.getter(name="capacityType")
    def capacity_type(self) -> _builtins.str:
        return pulumi.get(self, "capacity_type")

    @_builtins.property
    @pulumi.getter(name="totalEndpointCapacity")
    def total_endpoint_capacity(self) -> _builtins.int:
        return pulumi.get(self, "total_endpoint_capacity")

    @_builtins.property
    @pulumi.getter(name="usedEndpointCapacity")
    def used_endpoint_capacity(self) -> _builtins.int:
        return pulumi.get(self, "used_endpoint_capacity")


@pulumi.output_type
class GetDedicatedAiClustersFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetEndpointContentModerationConfigResult(dict):
    def __init__(__self__, *,
                 is_enabled: _builtins.bool):
        pulumi.set(__self__, "is_enabled", is_enabled)

    @_builtins.property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "is_enabled")


@pulumi.output_type
class GetEndpointsEndpointCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetEndpointsEndpointCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetEndpointsEndpointCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetEndpointsEndpointCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: _builtins.str,
                 content_moderation_configs: Sequence['outputs.GetEndpointsEndpointCollectionItemContentModerationConfigResult'],
                 dedicated_ai_cluster_id: _builtins.str,
                 defined_tags: Mapping[str, _builtins.str],
                 description: _builtins.str,
                 display_name: _builtins.str,
                 freeform_tags: Mapping[str, _builtins.str],
                 id: _builtins.str,
                 lifecycle_details: _builtins.str,
                 model_id: _builtins.str,
                 state: _builtins.str,
                 system_tags: Mapping[str, _builtins.str],
                 time_created: _builtins.str,
                 time_updated: _builtins.str):
        """
        :param _builtins.str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
        :param _builtins.str description: An optional description of the endpoint.
        :param _builtins.str display_name: A filter to return only resources that match the given display name exactly.
        :param _builtins.str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the endpoint.
        :param _builtins.str model_id: The OCID of the model that's used to create this endpoint.
        :param _builtins.str state: A filter to return only resources that their lifecycle state matches the given lifecycle state.
        :param _builtins.str time_updated: The date and time that the endpoint was updated in the format of an RFC3339 datetime string.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "content_moderation_configs", content_moderation_configs)
        pulumi.set(__self__, "dedicated_ai_cluster_id", dedicated_ai_cluster_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "model_id", model_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter(name="contentModerationConfigs")
    def content_moderation_configs(self) -> Sequence['outputs.GetEndpointsEndpointCollectionItemContentModerationConfigResult']:
        return pulumi.get(self, "content_moderation_configs")

    @_builtins.property
    @pulumi.getter(name="dedicatedAiClusterId")
    def dedicated_ai_cluster_id(self) -> _builtins.str:
        return pulumi.get(self, "dedicated_ai_cluster_id")

    @_builtins.property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "defined_tags")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        An optional description of the endpoint.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        A filter to return only resources that match the given display name exactly.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "freeform_tags")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the endpoint.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> _builtins.str:
        return pulumi.get(self, "lifecycle_details")

    @_builtins.property
    @pulumi.getter(name="modelId")
    def model_id(self) -> _builtins.str:
        """
        The OCID of the model that's used to create this endpoint.
        """
        return pulumi.get(self, "model_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        A filter to return only resources that their lifecycle state matches the given lifecycle state.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "system_tags")

    @_builtins.property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> _builtins.str:
        return pulumi.get(self, "time_created")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> _builtins.str:
        """
        The date and time that the endpoint was updated in the format of an RFC3339 datetime string.
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetEndpointsEndpointCollectionItemContentModerationConfigResult(dict):
    def __init__(__self__, *,
                 is_enabled: _builtins.bool):
        pulumi.set(__self__, "is_enabled", is_enabled)

    @_builtins.property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "is_enabled")


@pulumi.output_type
class GetEndpointsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetModelFineTuneDetailResult(dict):
    def __init__(__self__, *,
                 dedicated_ai_cluster_id: _builtins.str,
                 training_configs: Sequence['outputs.GetModelFineTuneDetailTrainingConfigResult'],
                 training_datasets: Sequence['outputs.GetModelFineTuneDetailTrainingDatasetResult']):
        """
        :param _builtins.str dedicated_ai_cluster_id: The OCID of the dedicated AI cluster this fine-tuning runs on.
        :param Sequence['GetModelFineTuneDetailTrainingConfigArgs'] training_configs: The fine-tuning method and hyperparameters used for fine-tuning a custom model.
        :param Sequence['GetModelFineTuneDetailTrainingDatasetArgs'] training_datasets: The dataset used to fine-tune the model.
        """
        pulumi.set(__self__, "dedicated_ai_cluster_id", dedicated_ai_cluster_id)
        pulumi.set(__self__, "training_configs", training_configs)
        pulumi.set(__self__, "training_datasets", training_datasets)

    @_builtins.property
    @pulumi.getter(name="dedicatedAiClusterId")
    def dedicated_ai_cluster_id(self) -> _builtins.str:
        """
        The OCID of the dedicated AI cluster this fine-tuning runs on.
        """
        return pulumi.get(self, "dedicated_ai_cluster_id")

    @_builtins.property
    @pulumi.getter(name="trainingConfigs")
    def training_configs(self) -> Sequence['outputs.GetModelFineTuneDetailTrainingConfigResult']:
        """
        The fine-tuning method and hyperparameters used for fine-tuning a custom model.
        """
        return pulumi.get(self, "training_configs")

    @_builtins.property
    @pulumi.getter(name="trainingDatasets")
    def training_datasets(self) -> Sequence['outputs.GetModelFineTuneDetailTrainingDatasetResult']:
        """
        The dataset used to fine-tune the model.
        """
        return pulumi.get(self, "training_datasets")


@pulumi.output_type
class GetModelFineTuneDetailTrainingConfigResult(dict):
    def __init__(__self__, *,
                 early_stopping_patience: _builtins.int,
                 early_stopping_threshold: _builtins.float,
                 learning_rate: _builtins.float,
                 log_model_metrics_interval_in_steps: _builtins.int,
                 lora_alpha: _builtins.int,
                 lora_dropout: _builtins.float,
                 lora_r: _builtins.int,
                 num_of_last_layers: _builtins.int,
                 total_training_epochs: _builtins.int,
                 training_batch_size: _builtins.int,
                 training_config_type: _builtins.str):
        """
        :param _builtins.int early_stopping_patience: Stop training if the loss metric does not improve beyond 'early_stopping_threshold' for this many times of evaluation.
        :param _builtins.float early_stopping_threshold: How much the loss must improve to prevent early stopping.
        :param _builtins.float learning_rate: The initial learning rate to be used during training
        :param _builtins.int log_model_metrics_interval_in_steps: Determines how frequently to log model metrics.
        :param _builtins.int lora_alpha: This parameter represents the scaling factor for the weight matrices in LoRA.
        :param _builtins.float lora_dropout: This parameter indicates the dropout probability for LoRA layers.
        :param _builtins.int lora_r: This parameter represents the LoRA rank of the update matrices.
        :param _builtins.int num_of_last_layers: The number of last layers to be fine-tuned.
        :param _builtins.int total_training_epochs: The maximum number of training epochs to run for.
        :param _builtins.int training_batch_size: The batch size used during training.
        :param _builtins.str training_config_type: The fine-tuning method for training a custom model.
        """
        pulumi.set(__self__, "early_stopping_patience", early_stopping_patience)
        pulumi.set(__self__, "early_stopping_threshold", early_stopping_threshold)
        pulumi.set(__self__, "learning_rate", learning_rate)
        pulumi.set(__self__, "log_model_metrics_interval_in_steps", log_model_metrics_interval_in_steps)
        pulumi.set(__self__, "lora_alpha", lora_alpha)
        pulumi.set(__self__, "lora_dropout", lora_dropout)
        pulumi.set(__self__, "lora_r", lora_r)
        pulumi.set(__self__, "num_of_last_layers", num_of_last_layers)
        pulumi.set(__self__, "total_training_epochs", total_training_epochs)
        pulumi.set(__self__, "training_batch_size", training_batch_size)
        pulumi.set(__self__, "training_config_type", training_config_type)

    @_builtins.property
    @pulumi.getter(name="earlyStoppingPatience")
    def early_stopping_patience(self) -> _builtins.int:
        """
        Stop training if the loss metric does not improve beyond 'early_stopping_threshold' for this many times of evaluation.
        """
        return pulumi.get(self, "early_stopping_patience")

    @_builtins.property
    @pulumi.getter(name="earlyStoppingThreshold")
    def early_stopping_threshold(self) -> _builtins.float:
        """
        How much the loss must improve to prevent early stopping.
        """
        return pulumi.get(self, "early_stopping_threshold")

    @_builtins.property
    @pulumi.getter(name="learningRate")
    def learning_rate(self) -> _builtins.float:
        """
        The initial learning rate to be used during training
        """
        return pulumi.get(self, "learning_rate")

    @_builtins.property
    @pulumi.getter(name="logModelMetricsIntervalInSteps")
    def log_model_metrics_interval_in_steps(self) -> _builtins.int:
        """
        Determines how frequently to log model metrics.
        """
        return pulumi.get(self, "log_model_metrics_interval_in_steps")

    @_builtins.property
    @pulumi.getter(name="loraAlpha")
    def lora_alpha(self) -> _builtins.int:
        """
        This parameter represents the scaling factor for the weight matrices in LoRA.
        """
        return pulumi.get(self, "lora_alpha")

    @_builtins.property
    @pulumi.getter(name="loraDropout")
    def lora_dropout(self) -> _builtins.float:
        """
        This parameter indicates the dropout probability for LoRA layers.
        """
        return pulumi.get(self, "lora_dropout")

    @_builtins.property
    @pulumi.getter(name="loraR")
    def lora_r(self) -> _builtins.int:
        """
        This parameter represents the LoRA rank of the update matrices.
        """
        return pulumi.get(self, "lora_r")

    @_builtins.property
    @pulumi.getter(name="numOfLastLayers")
    def num_of_last_layers(self) -> _builtins.int:
        """
        The number of last layers to be fine-tuned.
        """
        return pulumi.get(self, "num_of_last_layers")

    @_builtins.property
    @pulumi.getter(name="totalTrainingEpochs")
    def total_training_epochs(self) -> _builtins.int:
        """
        The maximum number of training epochs to run for.
        """
        return pulumi.get(self, "total_training_epochs")

    @_builtins.property
    @pulumi.getter(name="trainingBatchSize")
    def training_batch_size(self) -> _builtins.int:
        """
        The batch size used during training.
        """
        return pulumi.get(self, "training_batch_size")

    @_builtins.property
    @pulumi.getter(name="trainingConfigType")
    def training_config_type(self) -> _builtins.str:
        """
        The fine-tuning method for training a custom model.
        """
        return pulumi.get(self, "training_config_type")


@pulumi.output_type
class GetModelFineTuneDetailTrainingDatasetResult(dict):
    def __init__(__self__, *,
                 bucket: _builtins.str,
                 dataset_type: _builtins.str,
                 namespace: _builtins.str,
                 object: _builtins.str):
        """
        :param _builtins.str bucket: The Object Storage bucket name.
        :param _builtins.str dataset_type: The type of the data asset.
        :param _builtins.str namespace: The Object Storage namespace.
        :param _builtins.str object: The Object Storage object name.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "dataset_type", dataset_type)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "object", object)

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> _builtins.str:
        """
        The Object Storage bucket name.
        """
        return pulumi.get(self, "bucket")

    @_builtins.property
    @pulumi.getter(name="datasetType")
    def dataset_type(self) -> _builtins.str:
        """
        The type of the data asset.
        """
        return pulumi.get(self, "dataset_type")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        """
        The Object Storage namespace.
        """
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter
    def object(self) -> _builtins.str:
        """
        The Object Storage object name.
        """
        return pulumi.get(self, "object")


@pulumi.output_type
class GetModelModelMetricResult(dict):
    def __init__(__self__, *,
                 final_accuracy: _builtins.float,
                 final_loss: _builtins.float,
                 model_metrics_type: _builtins.str):
        """
        :param _builtins.float final_accuracy: Fine-tuned model accuracy.
        :param _builtins.float final_loss: Fine-tuned model loss.
        :param _builtins.str model_metrics_type: The type of the model metrics. Each type of model can expect a different set of model metrics.
        """
        pulumi.set(__self__, "final_accuracy", final_accuracy)
        pulumi.set(__self__, "final_loss", final_loss)
        pulumi.set(__self__, "model_metrics_type", model_metrics_type)

    @_builtins.property
    @pulumi.getter(name="finalAccuracy")
    def final_accuracy(self) -> _builtins.float:
        """
        Fine-tuned model accuracy.
        """
        return pulumi.get(self, "final_accuracy")

    @_builtins.property
    @pulumi.getter(name="finalLoss")
    def final_loss(self) -> _builtins.float:
        """
        Fine-tuned model loss.
        """
        return pulumi.get(self, "final_loss")

    @_builtins.property
    @pulumi.getter(name="modelMetricsType")
    def model_metrics_type(self) -> _builtins.str:
        """
        The type of the model metrics. Each type of model can expect a different set of model metrics.
        """
        return pulumi.get(self, "model_metrics_type")


@pulumi.output_type
class GetModelsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetModelsModelCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetModelsModelCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetModelsModelCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetModelsModelCollectionItemResult(dict):
    def __init__(__self__, *,
                 base_model_id: _builtins.str,
                 capabilities: Sequence[_builtins.str],
                 compartment_id: _builtins.str,
                 defined_tags: Mapping[str, _builtins.str],
                 description: _builtins.str,
                 display_name: _builtins.str,
                 fine_tune_details: Sequence['outputs.GetModelsModelCollectionItemFineTuneDetailResult'],
                 freeform_tags: Mapping[str, _builtins.str],
                 id: _builtins.str,
                 is_long_term_supported: _builtins.bool,
                 lifecycle_details: _builtins.str,
                 model_metrics: Sequence['outputs.GetModelsModelCollectionItemModelMetricResult'],
                 state: _builtins.str,
                 system_tags: Mapping[str, _builtins.str],
                 time_created: _builtins.str,
                 time_deprecated: _builtins.str,
                 time_updated: _builtins.str,
                 type: _builtins.str,
                 vendor: _builtins.str,
                 version: _builtins.str):
        """
        :param _builtins.str base_model_id: The OCID of the base model that's used for fine-tuning. For pretrained models, the value is null.
        :param Sequence[_builtins.str] capabilities: Describes what this model can be used for.
        :param _builtins.str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
        :param _builtins.str description: An optional description of the model.
        :param _builtins.str display_name: A filter to return only resources that match the given display name exactly.
        :param Sequence['GetModelsModelCollectionItemFineTuneDetailArgs'] fine_tune_details: Details about fine-tuning a custom model.
        :param Mapping[str, _builtins.str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        :param _builtins.str id: The ID of the model.
        :param _builtins.bool is_long_term_supported: Whether a model is supported long-term. Only applicable to base models.
        :param _builtins.str lifecycle_details: A message describing the current state of the model in more detail that can provide actionable information.
        :param Sequence['GetModelsModelCollectionItemModelMetricArgs'] model_metrics: Model metrics during the creation of a new model.
        :param _builtins.str state: A filter to return only resources their lifecycleState matches the given lifecycleState.
        :param Mapping[str, _builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace.  Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param _builtins.str time_created: The date and time that the model was created in the format of an RFC3339 datetime string.
        :param _builtins.str time_deprecated: Corresponds to the time when the custom model and its associated foundation model will be deprecated.
        :param _builtins.str time_updated: The date and time that the model was updated in the format of an RFC3339 datetime string.
        :param _builtins.str type: The model type indicating whether this is a pretrained/base model or a custom/fine-tuned model.
        :param _builtins.str vendor: A filter to return only resources that match the entire vendor given.
        :param _builtins.str version: The version of the model.
        """
        pulumi.set(__self__, "base_model_id", base_model_id)
        pulumi.set(__self__, "capabilities", capabilities)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "fine_tune_details", fine_tune_details)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_long_term_supported", is_long_term_supported)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "model_metrics", model_metrics)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_deprecated", time_deprecated)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vendor", vendor)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="baseModelId")
    def base_model_id(self) -> _builtins.str:
        """
        The OCID of the base model that's used for fine-tuning. For pretrained models, the value is null.
        """
        return pulumi.get(self, "base_model_id")

    @_builtins.property
    @pulumi.getter
    def capabilities(self) -> Sequence[_builtins.str]:
        """
        Describes what this model can be used for.
        """
        return pulumi.get(self, "capabilities")

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "defined_tags")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        An optional description of the model.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        A filter to return only resources that match the given display name exactly.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="fineTuneDetails")
    def fine_tune_details(self) -> Sequence['outputs.GetModelsModelCollectionItemFineTuneDetailResult']:
        """
        Details about fine-tuning a custom model.
        """
        return pulumi.get(self, "fine_tune_details")

    @_builtins.property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, _builtins.str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the model.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isLongTermSupported")
    def is_long_term_supported(self) -> _builtins.bool:
        """
        Whether a model is supported long-term. Only applicable to base models.
        """
        return pulumi.get(self, "is_long_term_supported")

    @_builtins.property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> _builtins.str:
        """
        A message describing the current state of the model in more detail that can provide actionable information.
        """
        return pulumi.get(self, "lifecycle_details")

    @_builtins.property
    @pulumi.getter(name="modelMetrics")
    def model_metrics(self) -> Sequence['outputs.GetModelsModelCollectionItemModelMetricResult']:
        """
        Model metrics during the creation of a new model.
        """
        return pulumi.get(self, "model_metrics")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        A filter to return only resources their lifecycleState matches the given lifecycleState.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, _builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace.  Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @_builtins.property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> _builtins.str:
        """
        The date and time that the model was created in the format of an RFC3339 datetime string.
        """
        return pulumi.get(self, "time_created")

    @_builtins.property
    @pulumi.getter(name="timeDeprecated")
    def time_deprecated(self) -> _builtins.str:
        """
        Corresponds to the time when the custom model and its associated foundation model will be deprecated.
        """
        return pulumi.get(self, "time_deprecated")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> _builtins.str:
        """
        The date and time that the model was updated in the format of an RFC3339 datetime string.
        """
        return pulumi.get(self, "time_updated")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The model type indicating whether this is a pretrained/base model or a custom/fine-tuned model.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def vendor(self) -> _builtins.str:
        """
        A filter to return only resources that match the entire vendor given.
        """
        return pulumi.get(self, "vendor")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        The version of the model.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetModelsModelCollectionItemFineTuneDetailResult(dict):
    def __init__(__self__, *,
                 dedicated_ai_cluster_id: _builtins.str,
                 training_configs: Sequence['outputs.GetModelsModelCollectionItemFineTuneDetailTrainingConfigResult'],
                 training_datasets: Sequence['outputs.GetModelsModelCollectionItemFineTuneDetailTrainingDatasetResult']):
        """
        :param _builtins.str dedicated_ai_cluster_id: The OCID of the dedicated AI cluster this fine-tuning runs on.
        :param Sequence['GetModelsModelCollectionItemFineTuneDetailTrainingConfigArgs'] training_configs: The fine-tuning method and hyperparameters used for fine-tuning a custom model.
        :param Sequence['GetModelsModelCollectionItemFineTuneDetailTrainingDatasetArgs'] training_datasets: The dataset used to fine-tune the model.
        """
        pulumi.set(__self__, "dedicated_ai_cluster_id", dedicated_ai_cluster_id)
        pulumi.set(__self__, "training_configs", training_configs)
        pulumi.set(__self__, "training_datasets", training_datasets)

    @_builtins.property
    @pulumi.getter(name="dedicatedAiClusterId")
    def dedicated_ai_cluster_id(self) -> _builtins.str:
        """
        The OCID of the dedicated AI cluster this fine-tuning runs on.
        """
        return pulumi.get(self, "dedicated_ai_cluster_id")

    @_builtins.property
    @pulumi.getter(name="trainingConfigs")
    def training_configs(self) -> Sequence['outputs.GetModelsModelCollectionItemFineTuneDetailTrainingConfigResult']:
        """
        The fine-tuning method and hyperparameters used for fine-tuning a custom model.
        """
        return pulumi.get(self, "training_configs")

    @_builtins.property
    @pulumi.getter(name="trainingDatasets")
    def training_datasets(self) -> Sequence['outputs.GetModelsModelCollectionItemFineTuneDetailTrainingDatasetResult']:
        """
        The dataset used to fine-tune the model.
        """
        return pulumi.get(self, "training_datasets")


@pulumi.output_type
class GetModelsModelCollectionItemFineTuneDetailTrainingConfigResult(dict):
    def __init__(__self__, *,
                 early_stopping_patience: _builtins.int,
                 early_stopping_threshold: _builtins.float,
                 learning_rate: _builtins.float,
                 log_model_metrics_interval_in_steps: _builtins.int,
                 lora_alpha: _builtins.int,
                 lora_dropout: _builtins.float,
                 lora_r: _builtins.int,
                 num_of_last_layers: _builtins.int,
                 total_training_epochs: _builtins.int,
                 training_batch_size: _builtins.int,
                 training_config_type: _builtins.str):
        """
        :param _builtins.int early_stopping_patience: Stop training if the loss metric does not improve beyond 'early_stopping_threshold' for this many times of evaluation.
        :param _builtins.float early_stopping_threshold: How much the loss must improve to prevent early stopping.
        :param _builtins.float learning_rate: The initial learning rate to be used during training
        :param _builtins.int log_model_metrics_interval_in_steps: Determines how frequently to log model metrics.
        :param _builtins.int lora_alpha: This parameter represents the scaling factor for the weight matrices in LoRA.
        :param _builtins.float lora_dropout: This parameter indicates the dropout probability for LoRA layers.
        :param _builtins.int lora_r: This parameter represents the LoRA rank of the update matrices.
        :param _builtins.int num_of_last_layers: The number of last layers to be fine-tuned.
        :param _builtins.int total_training_epochs: The maximum number of training epochs to run for.
        :param _builtins.int training_batch_size: The batch size used during training.
        :param _builtins.str training_config_type: The fine-tuning method for training a custom model.
        """
        pulumi.set(__self__, "early_stopping_patience", early_stopping_patience)
        pulumi.set(__self__, "early_stopping_threshold", early_stopping_threshold)
        pulumi.set(__self__, "learning_rate", learning_rate)
        pulumi.set(__self__, "log_model_metrics_interval_in_steps", log_model_metrics_interval_in_steps)
        pulumi.set(__self__, "lora_alpha", lora_alpha)
        pulumi.set(__self__, "lora_dropout", lora_dropout)
        pulumi.set(__self__, "lora_r", lora_r)
        pulumi.set(__self__, "num_of_last_layers", num_of_last_layers)
        pulumi.set(__self__, "total_training_epochs", total_training_epochs)
        pulumi.set(__self__, "training_batch_size", training_batch_size)
        pulumi.set(__self__, "training_config_type", training_config_type)

    @_builtins.property
    @pulumi.getter(name="earlyStoppingPatience")
    def early_stopping_patience(self) -> _builtins.int:
        """
        Stop training if the loss metric does not improve beyond 'early_stopping_threshold' for this many times of evaluation.
        """
        return pulumi.get(self, "early_stopping_patience")

    @_builtins.property
    @pulumi.getter(name="earlyStoppingThreshold")
    def early_stopping_threshold(self) -> _builtins.float:
        """
        How much the loss must improve to prevent early stopping.
        """
        return pulumi.get(self, "early_stopping_threshold")

    @_builtins.property
    @pulumi.getter(name="learningRate")
    def learning_rate(self) -> _builtins.float:
        """
        The initial learning rate to be used during training
        """
        return pulumi.get(self, "learning_rate")

    @_builtins.property
    @pulumi.getter(name="logModelMetricsIntervalInSteps")
    def log_model_metrics_interval_in_steps(self) -> _builtins.int:
        """
        Determines how frequently to log model metrics.
        """
        return pulumi.get(self, "log_model_metrics_interval_in_steps")

    @_builtins.property
    @pulumi.getter(name="loraAlpha")
    def lora_alpha(self) -> _builtins.int:
        """
        This parameter represents the scaling factor for the weight matrices in LoRA.
        """
        return pulumi.get(self, "lora_alpha")

    @_builtins.property
    @pulumi.getter(name="loraDropout")
    def lora_dropout(self) -> _builtins.float:
        """
        This parameter indicates the dropout probability for LoRA layers.
        """
        return pulumi.get(self, "lora_dropout")

    @_builtins.property
    @pulumi.getter(name="loraR")
    def lora_r(self) -> _builtins.int:
        """
        This parameter represents the LoRA rank of the update matrices.
        """
        return pulumi.get(self, "lora_r")

    @_builtins.property
    @pulumi.getter(name="numOfLastLayers")
    def num_of_last_layers(self) -> _builtins.int:
        """
        The number of last layers to be fine-tuned.
        """
        return pulumi.get(self, "num_of_last_layers")

    @_builtins.property
    @pulumi.getter(name="totalTrainingEpochs")
    def total_training_epochs(self) -> _builtins.int:
        """
        The maximum number of training epochs to run for.
        """
        return pulumi.get(self, "total_training_epochs")

    @_builtins.property
    @pulumi.getter(name="trainingBatchSize")
    def training_batch_size(self) -> _builtins.int:
        """
        The batch size used during training.
        """
        return pulumi.get(self, "training_batch_size")

    @_builtins.property
    @pulumi.getter(name="trainingConfigType")
    def training_config_type(self) -> _builtins.str:
        """
        The fine-tuning method for training a custom model.
        """
        return pulumi.get(self, "training_config_type")


@pulumi.output_type
class GetModelsModelCollectionItemFineTuneDetailTrainingDatasetResult(dict):
    def __init__(__self__, *,
                 bucket: _builtins.str,
                 dataset_type: _builtins.str,
                 namespace: _builtins.str,
                 object: _builtins.str):
        """
        :param _builtins.str bucket: The Object Storage bucket name.
        :param _builtins.str dataset_type: The type of the data asset.
        :param _builtins.str namespace: The Object Storage namespace.
        :param _builtins.str object: The Object Storage object name.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "dataset_type", dataset_type)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "object", object)

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> _builtins.str:
        """
        The Object Storage bucket name.
        """
        return pulumi.get(self, "bucket")

    @_builtins.property
    @pulumi.getter(name="datasetType")
    def dataset_type(self) -> _builtins.str:
        """
        The type of the data asset.
        """
        return pulumi.get(self, "dataset_type")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        """
        The Object Storage namespace.
        """
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter
    def object(self) -> _builtins.str:
        """
        The Object Storage object name.
        """
        return pulumi.get(self, "object")


@pulumi.output_type
class GetModelsModelCollectionItemModelMetricResult(dict):
    def __init__(__self__, *,
                 final_accuracy: _builtins.float,
                 final_loss: _builtins.float,
                 model_metrics_type: _builtins.str):
        """
        :param _builtins.float final_accuracy: Fine-tuned model accuracy.
        :param _builtins.float final_loss: Fine-tuned model loss.
        :param _builtins.str model_metrics_type: The type of the model metrics. Each type of model can expect a different set of model metrics.
        """
        pulumi.set(__self__, "final_accuracy", final_accuracy)
        pulumi.set(__self__, "final_loss", final_loss)
        pulumi.set(__self__, "model_metrics_type", model_metrics_type)

    @_builtins.property
    @pulumi.getter(name="finalAccuracy")
    def final_accuracy(self) -> _builtins.float:
        """
        Fine-tuned model accuracy.
        """
        return pulumi.get(self, "final_accuracy")

    @_builtins.property
    @pulumi.getter(name="finalLoss")
    def final_loss(self) -> _builtins.float:
        """
        Fine-tuned model loss.
        """
        return pulumi.get(self, "final_loss")

    @_builtins.property
    @pulumi.getter(name="modelMetricsType")
    def model_metrics_type(self) -> _builtins.str:
        """
        The type of the model metrics. Each type of model can expect a different set of model metrics.
        """
        return pulumi.get(self, "model_metrics_type")


