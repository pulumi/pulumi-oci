# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'AgentAgentEndpointContentModerationConfig',
    'AgentAgentEndpointSessionConfig',
    'AgentDataIngestionJobDataIngestionJobStatistic',
    'AgentDataSourceDataSourceConfig',
    'AgentDataSourceDataSourceConfigObjectStoragePrefix',
    'AgentKnowledgeBaseIndexConfig',
    'AgentKnowledgeBaseIndexConfigDatabaseConnection',
    'AgentKnowledgeBaseIndexConfigDatabaseFunction',
    'AgentKnowledgeBaseIndexConfigIndex',
    'AgentKnowledgeBaseIndexConfigIndexSchema',
    'AgentKnowledgeBaseIndexConfigSecretDetail',
    'DedicatedAiClusterCapacity',
    'EndpointContentModerationConfig',
    'ModelFineTuneDetails',
    'ModelFineTuneDetailsTrainingConfig',
    'ModelFineTuneDetailsTrainingDataset',
    'ModelModelMetric',
    'GetAgentAgentEndpointContentModerationConfigResult',
    'GetAgentAgentEndpointSessionConfigResult',
    'GetAgentAgentEndpointsAgentEndpointCollectionResult',
    'GetAgentAgentEndpointsAgentEndpointCollectionItemResult',
    'GetAgentAgentEndpointsAgentEndpointCollectionItemContentModerationConfigResult',
    'GetAgentAgentEndpointsAgentEndpointCollectionItemSessionConfigResult',
    'GetAgentAgentEndpointsFilterResult',
    'GetAgentAgentsAgentCollectionResult',
    'GetAgentAgentsAgentCollectionItemResult',
    'GetAgentAgentsFilterResult',
    'GetAgentDataIngestionJobDataIngestionJobStatisticResult',
    'GetAgentDataIngestionJobsDataIngestionJobCollectionResult',
    'GetAgentDataIngestionJobsDataIngestionJobCollectionItemResult',
    'GetAgentDataIngestionJobsDataIngestionJobCollectionItemDataIngestionJobStatisticResult',
    'GetAgentDataIngestionJobsFilterResult',
    'GetAgentDataSourceDataSourceConfigResult',
    'GetAgentDataSourceDataSourceConfigObjectStoragePrefixResult',
    'GetAgentDataSourcesDataSourceCollectionResult',
    'GetAgentDataSourcesDataSourceCollectionItemResult',
    'GetAgentDataSourcesDataSourceCollectionItemDataSourceConfigResult',
    'GetAgentDataSourcesDataSourceCollectionItemDataSourceConfigObjectStoragePrefixResult',
    'GetAgentDataSourcesFilterResult',
    'GetAgentKnowledgeBaseIndexConfigResult',
    'GetAgentKnowledgeBaseIndexConfigDatabaseConnectionResult',
    'GetAgentKnowledgeBaseIndexConfigDatabaseFunctionResult',
    'GetAgentKnowledgeBaseIndexConfigIndexResult',
    'GetAgentKnowledgeBaseIndexConfigIndexSchemaResult',
    'GetAgentKnowledgeBaseIndexConfigSecretDetailResult',
    'GetAgentKnowledgeBasesFilterResult',
    'GetAgentKnowledgeBasesKnowledgeBaseCollectionResult',
    'GetAgentKnowledgeBasesKnowledgeBaseCollectionItemResult',
    'GetAgentKnowledgeBasesKnowledgeBaseCollectionItemIndexConfigResult',
    'GetAgentKnowledgeBasesKnowledgeBaseCollectionItemIndexConfigDatabaseConnectionResult',
    'GetAgentKnowledgeBasesKnowledgeBaseCollectionItemIndexConfigDatabaseFunctionResult',
    'GetAgentKnowledgeBasesKnowledgeBaseCollectionItemIndexConfigIndexResult',
    'GetAgentKnowledgeBasesKnowledgeBaseCollectionItemIndexConfigIndexSchemaResult',
    'GetAgentKnowledgeBasesKnowledgeBaseCollectionItemIndexConfigSecretDetailResult',
    'GetDedicatedAiClusterCapacityResult',
    'GetDedicatedAiClustersDedicatedAiClusterCollectionResult',
    'GetDedicatedAiClustersDedicatedAiClusterCollectionItemResult',
    'GetDedicatedAiClustersDedicatedAiClusterCollectionItemCapacityResult',
    'GetDedicatedAiClustersFilterResult',
    'GetEndpointContentModerationConfigResult',
    'GetEndpointsEndpointCollectionResult',
    'GetEndpointsEndpointCollectionItemResult',
    'GetEndpointsEndpointCollectionItemContentModerationConfigResult',
    'GetEndpointsFilterResult',
    'GetModelFineTuneDetailResult',
    'GetModelFineTuneDetailTrainingConfigResult',
    'GetModelFineTuneDetailTrainingDatasetResult',
    'GetModelModelMetricResult',
    'GetModelsFilterResult',
    'GetModelsModelCollectionResult',
    'GetModelsModelCollectionItemResult',
    'GetModelsModelCollectionItemFineTuneDetailResult',
    'GetModelsModelCollectionItemFineTuneDetailTrainingConfigResult',
    'GetModelsModelCollectionItemFineTuneDetailTrainingDatasetResult',
    'GetModelsModelCollectionItemModelMetricResult',
]

@pulumi.output_type
class AgentAgentEndpointContentModerationConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "shouldEnableOnInput":
            suggest = "should_enable_on_input"
        elif key == "shouldEnableOnOutput":
            suggest = "should_enable_on_output"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AgentAgentEndpointContentModerationConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AgentAgentEndpointContentModerationConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AgentAgentEndpointContentModerationConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 should_enable_on_input: Optional[bool] = None,
                 should_enable_on_output: Optional[bool] = None):
        """
        :param bool should_enable_on_input: (Updatable) A flag to enable or disable content moderation on input.
        :param bool should_enable_on_output: (Updatable) A flag to enable or disable content moderation on output.
        """
        if should_enable_on_input is not None:
            pulumi.set(__self__, "should_enable_on_input", should_enable_on_input)
        if should_enable_on_output is not None:
            pulumi.set(__self__, "should_enable_on_output", should_enable_on_output)

    @property
    @pulumi.getter(name="shouldEnableOnInput")
    def should_enable_on_input(self) -> Optional[bool]:
        """
        (Updatable) A flag to enable or disable content moderation on input.
        """
        return pulumi.get(self, "should_enable_on_input")

    @property
    @pulumi.getter(name="shouldEnableOnOutput")
    def should_enable_on_output(self) -> Optional[bool]:
        """
        (Updatable) A flag to enable or disable content moderation on output.
        """
        return pulumi.get(self, "should_enable_on_output")


@pulumi.output_type
class AgentAgentEndpointSessionConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "idleTimeoutInSeconds":
            suggest = "idle_timeout_in_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AgentAgentEndpointSessionConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AgentAgentEndpointSessionConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AgentAgentEndpointSessionConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 idle_timeout_in_seconds: Optional[int] = None):
        """
        :param int idle_timeout_in_seconds: (Updatable) The session will become inactive after this timeout.
        """
        if idle_timeout_in_seconds is not None:
            pulumi.set(__self__, "idle_timeout_in_seconds", idle_timeout_in_seconds)

    @property
    @pulumi.getter(name="idleTimeoutInSeconds")
    def idle_timeout_in_seconds(self) -> Optional[int]:
        """
        (Updatable) The session will become inactive after this timeout.
        """
        return pulumi.get(self, "idle_timeout_in_seconds")


@pulumi.output_type
class AgentDataIngestionJobDataIngestionJobStatistic(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "durationInSeconds":
            suggest = "duration_in_seconds"
        elif key == "numberOfFailedFiles":
            suggest = "number_of_failed_files"
        elif key == "numberOfIngestedFiles":
            suggest = "number_of_ingested_files"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AgentDataIngestionJobDataIngestionJobStatistic. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AgentDataIngestionJobDataIngestionJobStatistic.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AgentDataIngestionJobDataIngestionJobStatistic.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration_in_seconds: Optional[int] = None,
                 number_of_failed_files: Optional[int] = None,
                 number_of_ingested_files: Optional[int] = None):
        """
        :param int duration_in_seconds: The duration of this ingestion job.
        :param int number_of_failed_files: The number of files that have failed during the ingestion.
        :param int number_of_ingested_files: The number of files that have been successfully ingested during the ingestion.
        """
        if duration_in_seconds is not None:
            pulumi.set(__self__, "duration_in_seconds", duration_in_seconds)
        if number_of_failed_files is not None:
            pulumi.set(__self__, "number_of_failed_files", number_of_failed_files)
        if number_of_ingested_files is not None:
            pulumi.set(__self__, "number_of_ingested_files", number_of_ingested_files)

    @property
    @pulumi.getter(name="durationInSeconds")
    def duration_in_seconds(self) -> Optional[int]:
        """
        The duration of this ingestion job.
        """
        return pulumi.get(self, "duration_in_seconds")

    @property
    @pulumi.getter(name="numberOfFailedFiles")
    def number_of_failed_files(self) -> Optional[int]:
        """
        The number of files that have failed during the ingestion.
        """
        return pulumi.get(self, "number_of_failed_files")

    @property
    @pulumi.getter(name="numberOfIngestedFiles")
    def number_of_ingested_files(self) -> Optional[int]:
        """
        The number of files that have been successfully ingested during the ingestion.
        """
        return pulumi.get(self, "number_of_ingested_files")


@pulumi.output_type
class AgentDataSourceDataSourceConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSourceConfigType":
            suggest = "data_source_config_type"
        elif key == "objectStoragePrefixes":
            suggest = "object_storage_prefixes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AgentDataSourceDataSourceConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AgentDataSourceDataSourceConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AgentDataSourceDataSourceConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source_config_type: str,
                 object_storage_prefixes: Sequence['outputs.AgentDataSourceDataSourceConfigObjectStoragePrefix']):
        """
        :param str data_source_config_type: (Updatable) The type of the tool. The allowed values are:
               * `OCI_OBJECT_STORAGE`: The data source is Oracle Cloud Infrastructure Object Storage.
        :param Sequence['AgentDataSourceDataSourceConfigObjectStoragePrefixArgs'] object_storage_prefixes: (Updatable) The locations of data items in Object Storage, can either be an object (File) or a prefix (folder).
        """
        pulumi.set(__self__, "data_source_config_type", data_source_config_type)
        pulumi.set(__self__, "object_storage_prefixes", object_storage_prefixes)

    @property
    @pulumi.getter(name="dataSourceConfigType")
    def data_source_config_type(self) -> str:
        """
        (Updatable) The type of the tool. The allowed values are:
        * `OCI_OBJECT_STORAGE`: The data source is Oracle Cloud Infrastructure Object Storage.
        """
        return pulumi.get(self, "data_source_config_type")

    @property
    @pulumi.getter(name="objectStoragePrefixes")
    def object_storage_prefixes(self) -> Sequence['outputs.AgentDataSourceDataSourceConfigObjectStoragePrefix']:
        """
        (Updatable) The locations of data items in Object Storage, can either be an object (File) or a prefix (folder).
        """
        return pulumi.get(self, "object_storage_prefixes")


@pulumi.output_type
class AgentDataSourceDataSourceConfigObjectStoragePrefix(dict):
    def __init__(__self__, *,
                 bucket: str,
                 namespace: str,
                 prefix: Optional[str] = None):
        """
        :param str bucket: (Updatable) The bucket name of an object.
        :param str namespace: (Updatable) The namespace name of an object.
        :param str prefix: (Updatable) The name of the object (file) or prefix (folder).
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "namespace", namespace)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        (Updatable) The bucket name of an object.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        (Updatable) The namespace name of an object.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        """
        (Updatable) The name of the object (file) or prefix (folder).
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class AgentKnowledgeBaseIndexConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "indexConfigType":
            suggest = "index_config_type"
        elif key == "clusterId":
            suggest = "cluster_id"
        elif key == "databaseConnection":
            suggest = "database_connection"
        elif key == "databaseFunctions":
            suggest = "database_functions"
        elif key == "secretDetail":
            suggest = "secret_detail"
        elif key == "shouldEnableHybridSearch":
            suggest = "should_enable_hybrid_search"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AgentKnowledgeBaseIndexConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AgentKnowledgeBaseIndexConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AgentKnowledgeBaseIndexConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index_config_type: str,
                 cluster_id: Optional[str] = None,
                 database_connection: Optional['outputs.AgentKnowledgeBaseIndexConfigDatabaseConnection'] = None,
                 database_functions: Optional[Sequence['outputs.AgentKnowledgeBaseIndexConfigDatabaseFunction']] = None,
                 indexes: Optional[Sequence['outputs.AgentKnowledgeBaseIndexConfigIndex']] = None,
                 secret_detail: Optional['outputs.AgentKnowledgeBaseIndexConfigSecretDetail'] = None,
                 should_enable_hybrid_search: Optional[bool] = None):
        """
        :param str index_config_type: (Updatable) The type of index. The allowed values are:
               * `DEFAULT_INDEX_CONFIG`: DefaultIndexConfig allows the service to create and manage vector store on behalf of the customer.
               * `OCI_OPEN_SEARCH_INDEX_CONFIG`: OciOpenSearchIndexConfig allows customer to configure their OpenSearch cluster.
               * `OCI_DATABASE_CONFIG`: OciDatabaseConfig allows customer to configure their Database.
        :param str cluster_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the OpenSearch Cluster.
        :param 'AgentKnowledgeBaseIndexConfigDatabaseConnectionArgs' database_connection: (Updatable) **DatabaseConnection**
               
               The connection type for Databases.
        :param Sequence['AgentKnowledgeBaseIndexConfigDatabaseFunctionArgs'] database_functions: (Updatable) Array of Database functions to be used.
        :param Sequence['AgentKnowledgeBaseIndexConfigIndexArgs'] indexes: (Updatable) Index configuration for open search.
        :param 'AgentKnowledgeBaseIndexConfigSecretDetailArgs' secret_detail: (Updatable) **SecretDetail**
               
               The details of configured security configuration on OpenSearch.
        :param bool should_enable_hybrid_search: (Updatable) Whether to enable Hybrid search in service managed OpenSearch.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        pulumi.set(__self__, "index_config_type", index_config_type)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if database_connection is not None:
            pulumi.set(__self__, "database_connection", database_connection)
        if database_functions is not None:
            pulumi.set(__self__, "database_functions", database_functions)
        if indexes is not None:
            pulumi.set(__self__, "indexes", indexes)
        if secret_detail is not None:
            pulumi.set(__self__, "secret_detail", secret_detail)
        if should_enable_hybrid_search is not None:
            pulumi.set(__self__, "should_enable_hybrid_search", should_enable_hybrid_search)

    @property
    @pulumi.getter(name="indexConfigType")
    def index_config_type(self) -> str:
        """
        (Updatable) The type of index. The allowed values are:
        * `DEFAULT_INDEX_CONFIG`: DefaultIndexConfig allows the service to create and manage vector store on behalf of the customer.
        * `OCI_OPEN_SEARCH_INDEX_CONFIG`: OciOpenSearchIndexConfig allows customer to configure their OpenSearch cluster.
        * `OCI_DATABASE_CONFIG`: OciDatabaseConfig allows customer to configure their Database.
        """
        return pulumi.get(self, "index_config_type")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[str]:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the OpenSearch Cluster.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="databaseConnection")
    def database_connection(self) -> Optional['outputs.AgentKnowledgeBaseIndexConfigDatabaseConnection']:
        """
        (Updatable) **DatabaseConnection**

        The connection type for Databases.
        """
        return pulumi.get(self, "database_connection")

    @property
    @pulumi.getter(name="databaseFunctions")
    def database_functions(self) -> Optional[Sequence['outputs.AgentKnowledgeBaseIndexConfigDatabaseFunction']]:
        """
        (Updatable) Array of Database functions to be used.
        """
        return pulumi.get(self, "database_functions")

    @property
    @pulumi.getter
    def indexes(self) -> Optional[Sequence['outputs.AgentKnowledgeBaseIndexConfigIndex']]:
        """
        (Updatable) Index configuration for open search.
        """
        return pulumi.get(self, "indexes")

    @property
    @pulumi.getter(name="secretDetail")
    def secret_detail(self) -> Optional['outputs.AgentKnowledgeBaseIndexConfigSecretDetail']:
        """
        (Updatable) **SecretDetail**

        The details of configured security configuration on OpenSearch.
        """
        return pulumi.get(self, "secret_detail")

    @property
    @pulumi.getter(name="shouldEnableHybridSearch")
    def should_enable_hybrid_search(self) -> Optional[bool]:
        """
        (Updatable) Whether to enable Hybrid search in service managed OpenSearch.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "should_enable_hybrid_search")


@pulumi.output_type
class AgentKnowledgeBaseIndexConfigDatabaseConnection(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectionId":
            suggest = "connection_id"
        elif key == "connectionType":
            suggest = "connection_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AgentKnowledgeBaseIndexConfigDatabaseConnection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AgentKnowledgeBaseIndexConfigDatabaseConnection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AgentKnowledgeBaseIndexConfigDatabaseConnection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connection_id: str,
                 connection_type: str):
        """
        :param str connection_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Tools Connection.
        :param str connection_type: (Updatable) The type of Database connection. The allowed values are:
               * `DATABASE_TOOL_CONNECTION`: This allows the service to connect to a vector store via a Database Tools Connection.
        """
        pulumi.set(__self__, "connection_id", connection_id)
        pulumi.set(__self__, "connection_type", connection_type)

    @property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> str:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Tools Connection.
        """
        return pulumi.get(self, "connection_id")

    @property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> str:
        """
        (Updatable) The type of Database connection. The allowed values are:
        * `DATABASE_TOOL_CONNECTION`: This allows the service to connect to a vector store via a Database Tools Connection.
        """
        return pulumi.get(self, "connection_type")


@pulumi.output_type
class AgentKnowledgeBaseIndexConfigDatabaseFunction(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: (Updatable) The name of the Database function.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        (Updatable) The name of the Database function.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class AgentKnowledgeBaseIndexConfigIndex(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 schema: Optional['outputs.AgentKnowledgeBaseIndexConfigIndexSchema'] = None):
        """
        :param str name: (Updatable) The index name in opensearch.
        :param 'AgentKnowledgeBaseIndexConfigIndexSchemaArgs' schema: (Updatable) **IndexSchema**
               
               The index schema details.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        (Updatable) The index name in opensearch.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def schema(self) -> Optional['outputs.AgentKnowledgeBaseIndexConfigIndexSchema']:
        """
        (Updatable) **IndexSchema**

        The index schema details.
        """
        return pulumi.get(self, "schema")


@pulumi.output_type
class AgentKnowledgeBaseIndexConfigIndexSchema(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bodyKey":
            suggest = "body_key"
        elif key == "embeddingBodyKey":
            suggest = "embedding_body_key"
        elif key == "titleKey":
            suggest = "title_key"
        elif key == "urlKey":
            suggest = "url_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AgentKnowledgeBaseIndexConfigIndexSchema. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AgentKnowledgeBaseIndexConfigIndexSchema.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AgentKnowledgeBaseIndexConfigIndexSchema.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 body_key: Optional[str] = None,
                 embedding_body_key: Optional[str] = None,
                 title_key: Optional[str] = None,
                 url_key: Optional[str] = None):
        """
        :param str body_key: (Updatable) Body key name.
        :param str embedding_body_key: (Updatable) Field within customer managed Oracle Cloud Infrastructure OpenSearch document containing the vector embedding for queries.
        :param str title_key: (Updatable) Title key that stores the Title of a document, if available.
        :param str url_key: (Updatable) URL key that stores the URL of a document, if available.
        """
        if body_key is not None:
            pulumi.set(__self__, "body_key", body_key)
        if embedding_body_key is not None:
            pulumi.set(__self__, "embedding_body_key", embedding_body_key)
        if title_key is not None:
            pulumi.set(__self__, "title_key", title_key)
        if url_key is not None:
            pulumi.set(__self__, "url_key", url_key)

    @property
    @pulumi.getter(name="bodyKey")
    def body_key(self) -> Optional[str]:
        """
        (Updatable) Body key name.
        """
        return pulumi.get(self, "body_key")

    @property
    @pulumi.getter(name="embeddingBodyKey")
    def embedding_body_key(self) -> Optional[str]:
        """
        (Updatable) Field within customer managed Oracle Cloud Infrastructure OpenSearch document containing the vector embedding for queries.
        """
        return pulumi.get(self, "embedding_body_key")

    @property
    @pulumi.getter(name="titleKey")
    def title_key(self) -> Optional[str]:
        """
        (Updatable) Title key that stores the Title of a document, if available.
        """
        return pulumi.get(self, "title_key")

    @property
    @pulumi.getter(name="urlKey")
    def url_key(self) -> Optional[str]:
        """
        (Updatable) URL key that stores the URL of a document, if available.
        """
        return pulumi.get(self, "url_key")


@pulumi.output_type
class AgentKnowledgeBaseIndexConfigSecretDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vaultSecretId":
            suggest = "vault_secret_id"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "idcsUrl":
            suggest = "idcs_url"
        elif key == "scopeUrl":
            suggest = "scope_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AgentKnowledgeBaseIndexConfigSecretDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AgentKnowledgeBaseIndexConfigSecretDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AgentKnowledgeBaseIndexConfigSecretDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 vault_secret_id: str,
                 client_id: Optional[str] = None,
                 idcs_url: Optional[str] = None,
                 scope_url: Optional[str] = None):
        """
        :param str type: (Updatable) The type of OpenID. The allowed values are:
               * `IDCS_SECRET`: The OpenID configuration used is OpenSearch is IDCS.
               * `BASIC_AUTH_SECRET`: Basic authentication use for OpenSearch
        :param str vault_secret_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the secret for basic authentication.
        :param str client_id: (Updatable) The IDCS Connect clientId.
        :param str idcs_url: (Updatable) The URL represent authentication url of the IDCS.
        :param str scope_url: (Updatable) Fully qualified scope url
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vault_secret_id", vault_secret_id)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if idcs_url is not None:
            pulumi.set(__self__, "idcs_url", idcs_url)
        if scope_url is not None:
            pulumi.set(__self__, "scope_url", scope_url)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        (Updatable) The type of OpenID. The allowed values are:
        * `IDCS_SECRET`: The OpenID configuration used is OpenSearch is IDCS.
        * `BASIC_AUTH_SECRET`: Basic authentication use for OpenSearch
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vaultSecretId")
    def vault_secret_id(self) -> str:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the secret for basic authentication.
        """
        return pulumi.get(self, "vault_secret_id")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        """
        (Updatable) The IDCS Connect clientId.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="idcsUrl")
    def idcs_url(self) -> Optional[str]:
        """
        (Updatable) The URL represent authentication url of the IDCS.
        """
        return pulumi.get(self, "idcs_url")

    @property
    @pulumi.getter(name="scopeUrl")
    def scope_url(self) -> Optional[str]:
        """
        (Updatable) Fully qualified scope url
        """
        return pulumi.get(self, "scope_url")


@pulumi.output_type
class DedicatedAiClusterCapacity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "capacityType":
            suggest = "capacity_type"
        elif key == "totalEndpointCapacity":
            suggest = "total_endpoint_capacity"
        elif key == "usedEndpointCapacity":
            suggest = "used_endpoint_capacity"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DedicatedAiClusterCapacity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DedicatedAiClusterCapacity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DedicatedAiClusterCapacity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 capacity_type: Optional[str] = None,
                 total_endpoint_capacity: Optional[int] = None,
                 used_endpoint_capacity: Optional[int] = None):
        """
        :param str capacity_type: The type of the dedicated AI cluster capacity.
        :param int total_endpoint_capacity: The total number of endpoints that can be hosted on this dedicated AI cluster.
        :param int used_endpoint_capacity: The number of endpoints hosted on this dedicated AI cluster.
        """
        if capacity_type is not None:
            pulumi.set(__self__, "capacity_type", capacity_type)
        if total_endpoint_capacity is not None:
            pulumi.set(__self__, "total_endpoint_capacity", total_endpoint_capacity)
        if used_endpoint_capacity is not None:
            pulumi.set(__self__, "used_endpoint_capacity", used_endpoint_capacity)

    @property
    @pulumi.getter(name="capacityType")
    def capacity_type(self) -> Optional[str]:
        """
        The type of the dedicated AI cluster capacity.
        """
        return pulumi.get(self, "capacity_type")

    @property
    @pulumi.getter(name="totalEndpointCapacity")
    def total_endpoint_capacity(self) -> Optional[int]:
        """
        The total number of endpoints that can be hosted on this dedicated AI cluster.
        """
        return pulumi.get(self, "total_endpoint_capacity")

    @property
    @pulumi.getter(name="usedEndpointCapacity")
    def used_endpoint_capacity(self) -> Optional[int]:
        """
        The number of endpoints hosted on this dedicated AI cluster.
        """
        return pulumi.get(self, "used_endpoint_capacity")


@pulumi.output_type
class EndpointContentModerationConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isEnabled":
            suggest = "is_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointContentModerationConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointContentModerationConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointContentModerationConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_enabled: bool):
        """
        :param bool is_enabled: (Updatable) Whether to enable the content moderation feature.
        """
        pulumi.set(__self__, "is_enabled", is_enabled)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        """
        (Updatable) Whether to enable the content moderation feature.
        """
        return pulumi.get(self, "is_enabled")


@pulumi.output_type
class ModelFineTuneDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dedicatedAiClusterId":
            suggest = "dedicated_ai_cluster_id"
        elif key == "trainingDataset":
            suggest = "training_dataset"
        elif key == "trainingConfig":
            suggest = "training_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelFineTuneDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelFineTuneDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelFineTuneDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dedicated_ai_cluster_id: str,
                 training_dataset: 'outputs.ModelFineTuneDetailsTrainingDataset',
                 training_config: Optional['outputs.ModelFineTuneDetailsTrainingConfig'] = None):
        """
        :param str dedicated_ai_cluster_id: The OCID of the dedicated AI cluster this fine-tuning runs on.
        :param 'ModelFineTuneDetailsTrainingDatasetArgs' training_dataset: The dataset used to fine-tune the model. 
               
               Only one dataset is allowed per custom model, which is split 80-20 for training and validating. You must provide the dataset in a JSON Lines (JSONL) file. Each line in the JSONL file must have the format: `{"prompt": "<first prompt>", "completion": "<expected completion given first prompt>"}`
        :param 'ModelFineTuneDetailsTrainingConfigArgs' training_config: The fine-tuning method and hyperparameters used for fine-tuning a custom model.
        """
        pulumi.set(__self__, "dedicated_ai_cluster_id", dedicated_ai_cluster_id)
        pulumi.set(__self__, "training_dataset", training_dataset)
        if training_config is not None:
            pulumi.set(__self__, "training_config", training_config)

    @property
    @pulumi.getter(name="dedicatedAiClusterId")
    def dedicated_ai_cluster_id(self) -> str:
        """
        The OCID of the dedicated AI cluster this fine-tuning runs on.
        """
        return pulumi.get(self, "dedicated_ai_cluster_id")

    @property
    @pulumi.getter(name="trainingDataset")
    def training_dataset(self) -> 'outputs.ModelFineTuneDetailsTrainingDataset':
        """
        The dataset used to fine-tune the model. 

        Only one dataset is allowed per custom model, which is split 80-20 for training and validating. You must provide the dataset in a JSON Lines (JSONL) file. Each line in the JSONL file must have the format: `{"prompt": "<first prompt>", "completion": "<expected completion given first prompt>"}`
        """
        return pulumi.get(self, "training_dataset")

    @property
    @pulumi.getter(name="trainingConfig")
    def training_config(self) -> Optional['outputs.ModelFineTuneDetailsTrainingConfig']:
        """
        The fine-tuning method and hyperparameters used for fine-tuning a custom model.
        """
        return pulumi.get(self, "training_config")


@pulumi.output_type
class ModelFineTuneDetailsTrainingConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "trainingConfigType":
            suggest = "training_config_type"
        elif key == "earlyStoppingPatience":
            suggest = "early_stopping_patience"
        elif key == "earlyStoppingThreshold":
            suggest = "early_stopping_threshold"
        elif key == "learningRate":
            suggest = "learning_rate"
        elif key == "logModelMetricsIntervalInSteps":
            suggest = "log_model_metrics_interval_in_steps"
        elif key == "loraAlpha":
            suggest = "lora_alpha"
        elif key == "loraDropout":
            suggest = "lora_dropout"
        elif key == "loraR":
            suggest = "lora_r"
        elif key == "numOfLastLayers":
            suggest = "num_of_last_layers"
        elif key == "totalTrainingEpochs":
            suggest = "total_training_epochs"
        elif key == "trainingBatchSize":
            suggest = "training_batch_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelFineTuneDetailsTrainingConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelFineTuneDetailsTrainingConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelFineTuneDetailsTrainingConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 training_config_type: str,
                 early_stopping_patience: Optional[int] = None,
                 early_stopping_threshold: Optional[float] = None,
                 learning_rate: Optional[float] = None,
                 log_model_metrics_interval_in_steps: Optional[int] = None,
                 lora_alpha: Optional[int] = None,
                 lora_dropout: Optional[float] = None,
                 lora_r: Optional[int] = None,
                 num_of_last_layers: Optional[int] = None,
                 total_training_epochs: Optional[int] = None,
                 training_batch_size: Optional[int] = None):
        """
        :param str training_config_type: The fine-tuning method for training a custom model.
        :param int early_stopping_patience: Stop training if the loss metric does not improve beyond 'early_stopping_threshold' for this many times of evaluation.
        :param float early_stopping_threshold: How much the loss must improve to prevent early stopping.
        :param float learning_rate: The initial learning rate to be used during training
        :param int log_model_metrics_interval_in_steps: Determines how frequently to log model metrics. 
               
               Every step is logged for the first 20 steps and then follows this parameter for log frequency. Set to 0 to disable logging the model metrics.
        :param int lora_alpha: This parameter represents the scaling factor for the weight matrices in LoRA.
        :param float lora_dropout: This parameter indicates the dropout probability for LoRA layers.
        :param int lora_r: This parameter represents the LoRA rank of the update matrices.
        :param int num_of_last_layers: The number of last layers to be fine-tuned.
        :param int total_training_epochs: The maximum number of training epochs to run for.
        :param int training_batch_size: The batch size used during training.
        """
        pulumi.set(__self__, "training_config_type", training_config_type)
        if early_stopping_patience is not None:
            pulumi.set(__self__, "early_stopping_patience", early_stopping_patience)
        if early_stopping_threshold is not None:
            pulumi.set(__self__, "early_stopping_threshold", early_stopping_threshold)
        if learning_rate is not None:
            pulumi.set(__self__, "learning_rate", learning_rate)
        if log_model_metrics_interval_in_steps is not None:
            pulumi.set(__self__, "log_model_metrics_interval_in_steps", log_model_metrics_interval_in_steps)
        if lora_alpha is not None:
            pulumi.set(__self__, "lora_alpha", lora_alpha)
        if lora_dropout is not None:
            pulumi.set(__self__, "lora_dropout", lora_dropout)
        if lora_r is not None:
            pulumi.set(__self__, "lora_r", lora_r)
        if num_of_last_layers is not None:
            pulumi.set(__self__, "num_of_last_layers", num_of_last_layers)
        if total_training_epochs is not None:
            pulumi.set(__self__, "total_training_epochs", total_training_epochs)
        if training_batch_size is not None:
            pulumi.set(__self__, "training_batch_size", training_batch_size)

    @property
    @pulumi.getter(name="trainingConfigType")
    def training_config_type(self) -> str:
        """
        The fine-tuning method for training a custom model.
        """
        return pulumi.get(self, "training_config_type")

    @property
    @pulumi.getter(name="earlyStoppingPatience")
    def early_stopping_patience(self) -> Optional[int]:
        """
        Stop training if the loss metric does not improve beyond 'early_stopping_threshold' for this many times of evaluation.
        """
        return pulumi.get(self, "early_stopping_patience")

    @property
    @pulumi.getter(name="earlyStoppingThreshold")
    def early_stopping_threshold(self) -> Optional[float]:
        """
        How much the loss must improve to prevent early stopping.
        """
        return pulumi.get(self, "early_stopping_threshold")

    @property
    @pulumi.getter(name="learningRate")
    def learning_rate(self) -> Optional[float]:
        """
        The initial learning rate to be used during training
        """
        return pulumi.get(self, "learning_rate")

    @property
    @pulumi.getter(name="logModelMetricsIntervalInSteps")
    def log_model_metrics_interval_in_steps(self) -> Optional[int]:
        """
        Determines how frequently to log model metrics. 

        Every step is logged for the first 20 steps and then follows this parameter for log frequency. Set to 0 to disable logging the model metrics.
        """
        return pulumi.get(self, "log_model_metrics_interval_in_steps")

    @property
    @pulumi.getter(name="loraAlpha")
    def lora_alpha(self) -> Optional[int]:
        """
        This parameter represents the scaling factor for the weight matrices in LoRA.
        """
        return pulumi.get(self, "lora_alpha")

    @property
    @pulumi.getter(name="loraDropout")
    def lora_dropout(self) -> Optional[float]:
        """
        This parameter indicates the dropout probability for LoRA layers.
        """
        return pulumi.get(self, "lora_dropout")

    @property
    @pulumi.getter(name="loraR")
    def lora_r(self) -> Optional[int]:
        """
        This parameter represents the LoRA rank of the update matrices.
        """
        return pulumi.get(self, "lora_r")

    @property
    @pulumi.getter(name="numOfLastLayers")
    def num_of_last_layers(self) -> Optional[int]:
        """
        The number of last layers to be fine-tuned.
        """
        return pulumi.get(self, "num_of_last_layers")

    @property
    @pulumi.getter(name="totalTrainingEpochs")
    def total_training_epochs(self) -> Optional[int]:
        """
        The maximum number of training epochs to run for.
        """
        return pulumi.get(self, "total_training_epochs")

    @property
    @pulumi.getter(name="trainingBatchSize")
    def training_batch_size(self) -> Optional[int]:
        """
        The batch size used during training.
        """
        return pulumi.get(self, "training_batch_size")


@pulumi.output_type
class ModelFineTuneDetailsTrainingDataset(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "datasetType":
            suggest = "dataset_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelFineTuneDetailsTrainingDataset. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelFineTuneDetailsTrainingDataset.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelFineTuneDetailsTrainingDataset.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bucket: str,
                 dataset_type: str,
                 namespace: str,
                 object: str):
        """
        :param str bucket: The Object Storage bucket name.
        :param str dataset_type: The type of the data asset.
        :param str namespace: The Object Storage namespace.
        :param str object: The Object Storage object name.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "dataset_type", dataset_type)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "object", object)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The Object Storage bucket name.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="datasetType")
    def dataset_type(self) -> str:
        """
        The type of the data asset.
        """
        return pulumi.get(self, "dataset_type")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        The Object Storage namespace.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        The Object Storage object name.
        """
        return pulumi.get(self, "object")


@pulumi.output_type
class ModelModelMetric(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "finalAccuracy":
            suggest = "final_accuracy"
        elif key == "finalLoss":
            suggest = "final_loss"
        elif key == "modelMetricsType":
            suggest = "model_metrics_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelModelMetric. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelModelMetric.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelModelMetric.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 final_accuracy: Optional[float] = None,
                 final_loss: Optional[float] = None,
                 model_metrics_type: Optional[str] = None):
        """
        :param float final_accuracy: Fine-tuned model accuracy.
        :param float final_loss: Fine-tuned model loss.
        :param str model_metrics_type: The type of the model metrics. Each type of model can expect a different set of model metrics.
        """
        if final_accuracy is not None:
            pulumi.set(__self__, "final_accuracy", final_accuracy)
        if final_loss is not None:
            pulumi.set(__self__, "final_loss", final_loss)
        if model_metrics_type is not None:
            pulumi.set(__self__, "model_metrics_type", model_metrics_type)

    @property
    @pulumi.getter(name="finalAccuracy")
    def final_accuracy(self) -> Optional[float]:
        """
        Fine-tuned model accuracy.
        """
        return pulumi.get(self, "final_accuracy")

    @property
    @pulumi.getter(name="finalLoss")
    def final_loss(self) -> Optional[float]:
        """
        Fine-tuned model loss.
        """
        return pulumi.get(self, "final_loss")

    @property
    @pulumi.getter(name="modelMetricsType")
    def model_metrics_type(self) -> Optional[str]:
        """
        The type of the model metrics. Each type of model can expect a different set of model metrics.
        """
        return pulumi.get(self, "model_metrics_type")


@pulumi.output_type
class GetAgentAgentEndpointContentModerationConfigResult(dict):
    def __init__(__self__, *,
                 should_enable_on_input: bool,
                 should_enable_on_output: bool):
        """
        :param bool should_enable_on_input: A flag to enable or disable content moderation on input.
        :param bool should_enable_on_output: A flag to enable or disable content moderation on output.
        """
        pulumi.set(__self__, "should_enable_on_input", should_enable_on_input)
        pulumi.set(__self__, "should_enable_on_output", should_enable_on_output)

    @property
    @pulumi.getter(name="shouldEnableOnInput")
    def should_enable_on_input(self) -> bool:
        """
        A flag to enable or disable content moderation on input.
        """
        return pulumi.get(self, "should_enable_on_input")

    @property
    @pulumi.getter(name="shouldEnableOnOutput")
    def should_enable_on_output(self) -> bool:
        """
        A flag to enable or disable content moderation on output.
        """
        return pulumi.get(self, "should_enable_on_output")


@pulumi.output_type
class GetAgentAgentEndpointSessionConfigResult(dict):
    def __init__(__self__, *,
                 idle_timeout_in_seconds: int):
        """
        :param int idle_timeout_in_seconds: The session will become inactive after this timeout.
        """
        pulumi.set(__self__, "idle_timeout_in_seconds", idle_timeout_in_seconds)

    @property
    @pulumi.getter(name="idleTimeoutInSeconds")
    def idle_timeout_in_seconds(self) -> int:
        """
        The session will become inactive after this timeout.
        """
        return pulumi.get(self, "idle_timeout_in_seconds")


@pulumi.output_type
class GetAgentAgentEndpointsAgentEndpointCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetAgentAgentEndpointsAgentEndpointCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetAgentAgentEndpointsAgentEndpointCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAgentAgentEndpointsAgentEndpointCollectionItemResult(dict):
    def __init__(__self__, *,
                 agent_id: str,
                 compartment_id: str,
                 content_moderation_configs: Sequence['outputs.GetAgentAgentEndpointsAgentEndpointCollectionItemContentModerationConfigResult'],
                 defined_tags: Mapping[str, str],
                 description: str,
                 display_name: str,
                 freeform_tags: Mapping[str, str],
                 id: str,
                 lifecycle_details: str,
                 session_configs: Sequence['outputs.GetAgentAgentEndpointsAgentEndpointCollectionItemSessionConfigResult'],
                 should_enable_citation: bool,
                 should_enable_session: bool,
                 should_enable_trace: bool,
                 state: str,
                 system_tags: Mapping[str, str],
                 time_created: str,
                 time_updated: str):
        """
        :param str agent_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the agent.
        :param str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
        :param Sequence['GetAgentAgentEndpointsAgentEndpointCollectionItemContentModerationConfigArgs'] content_moderation_configs: The configuration details about whether to apply the content moderation feature to input and output. Content moderation removes toxic and biased content from responses. It is recommended to use content moderation.
        :param Mapping[str, str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
        :param str description: An optional description of the endpoint.
        :param str display_name: A filter to return only resources that match the given display name exactly.
        :param Mapping[str, str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the endpoint.
        :param str lifecycle_details: A message that describes the current state of the endpoint in more detail. For example, can be used to provide actionable information for a resource in the Failed state.
        :param Sequence['GetAgentAgentEndpointsAgentEndpointCollectionItemSessionConfigArgs'] session_configs: **SessionConfig**
        :param bool should_enable_citation: Whether to show citations in the chat result.
        :param bool should_enable_session: Whether or not to enable Session-based chat.
        :param bool should_enable_trace: Whether to show traces in the chat result.
        :param str state: A filter to return only resources that match the given lifecycle state. The state value is case-insensitive.
        :param Mapping[str, str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace.  Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param str time_created: The date and time the AgentEndpoint was created, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        :param str time_updated: The date and time the endpoint was updated, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        """
        pulumi.set(__self__, "agent_id", agent_id)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "content_moderation_configs", content_moderation_configs)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "session_configs", session_configs)
        pulumi.set(__self__, "should_enable_citation", should_enable_citation)
        pulumi.set(__self__, "should_enable_session", should_enable_session)
        pulumi.set(__self__, "should_enable_trace", should_enable_trace)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="agentId")
    def agent_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the agent.
        """
        return pulumi.get(self, "agent_id")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="contentModerationConfigs")
    def content_moderation_configs(self) -> Sequence['outputs.GetAgentAgentEndpointsAgentEndpointCollectionItemContentModerationConfigResult']:
        """
        The configuration details about whether to apply the content moderation feature to input and output. Content moderation removes toxic and biased content from responses. It is recommended to use content moderation.
        """
        return pulumi.get(self, "content_moderation_configs")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        An optional description of the endpoint.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return only resources that match the given display name exactly.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the endpoint.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        A message that describes the current state of the endpoint in more detail. For example, can be used to provide actionable information for a resource in the Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="sessionConfigs")
    def session_configs(self) -> Sequence['outputs.GetAgentAgentEndpointsAgentEndpointCollectionItemSessionConfigResult']:
        """
        **SessionConfig**
        """
        return pulumi.get(self, "session_configs")

    @property
    @pulumi.getter(name="shouldEnableCitation")
    def should_enable_citation(self) -> bool:
        """
        Whether to show citations in the chat result.
        """
        return pulumi.get(self, "should_enable_citation")

    @property
    @pulumi.getter(name="shouldEnableSession")
    def should_enable_session(self) -> bool:
        """
        Whether or not to enable Session-based chat.
        """
        return pulumi.get(self, "should_enable_session")

    @property
    @pulumi.getter(name="shouldEnableTrace")
    def should_enable_trace(self) -> bool:
        """
        Whether to show traces in the chat result.
        """
        return pulumi.get(self, "should_enable_trace")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to return only resources that match the given lifecycle state. The state value is case-insensitive.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace.  Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time the AgentEndpoint was created, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The date and time the endpoint was updated, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetAgentAgentEndpointsAgentEndpointCollectionItemContentModerationConfigResult(dict):
    def __init__(__self__, *,
                 should_enable_on_input: bool,
                 should_enable_on_output: bool):
        """
        :param bool should_enable_on_input: A flag to enable or disable content moderation on input.
        :param bool should_enable_on_output: A flag to enable or disable content moderation on output.
        """
        pulumi.set(__self__, "should_enable_on_input", should_enable_on_input)
        pulumi.set(__self__, "should_enable_on_output", should_enable_on_output)

    @property
    @pulumi.getter(name="shouldEnableOnInput")
    def should_enable_on_input(self) -> bool:
        """
        A flag to enable or disable content moderation on input.
        """
        return pulumi.get(self, "should_enable_on_input")

    @property
    @pulumi.getter(name="shouldEnableOnOutput")
    def should_enable_on_output(self) -> bool:
        """
        A flag to enable or disable content moderation on output.
        """
        return pulumi.get(self, "should_enable_on_output")


@pulumi.output_type
class GetAgentAgentEndpointsAgentEndpointCollectionItemSessionConfigResult(dict):
    def __init__(__self__, *,
                 idle_timeout_in_seconds: int):
        """
        :param int idle_timeout_in_seconds: The session will become inactive after this timeout.
        """
        pulumi.set(__self__, "idle_timeout_in_seconds", idle_timeout_in_seconds)

    @property
    @pulumi.getter(name="idleTimeoutInSeconds")
    def idle_timeout_in_seconds(self) -> int:
        """
        The session will become inactive after this timeout.
        """
        return pulumi.get(self, "idle_timeout_in_seconds")


@pulumi.output_type
class GetAgentAgentEndpointsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetAgentAgentsAgentCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetAgentAgentsAgentCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetAgentAgentsAgentCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAgentAgentsAgentCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 defined_tags: Mapping[str, str],
                 description: str,
                 display_name: str,
                 freeform_tags: Mapping[str, str],
                 id: str,
                 knowledge_base_ids: Sequence[str],
                 lifecycle_details: str,
                 state: str,
                 system_tags: Mapping[str, str],
                 time_created: str,
                 time_updated: str,
                 welcome_message: str):
        """
        :param str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
        :param Mapping[str, str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
        :param str description: Description about the agent.
        :param str display_name: A filter to return only resources that match the given display name exactly.
        :param Mapping[str, str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the agent.
        :param Sequence[str] knowledge_base_ids: List of [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the knowledgeBases associated with agent.
        :param str lifecycle_details: A message that describes the current state of the agent in more detail. For example, can be used to provide actionable information for a resource in the Failed state.
        :param str state: A filter to return only resources that match the given lifecycle state. The state value is case-insensitive.
        :param Mapping[str, str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace.  Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param str time_created: The date and time the agent was created, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        :param str time_updated: The date and time the agent was updated, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        :param str welcome_message: Details about purpose and responsibility of the agent
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "knowledge_base_ids", knowledge_base_ids)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "welcome_message", welcome_message)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description about the agent.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return only resources that match the given display name exactly.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the agent.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="knowledgeBaseIds")
    def knowledge_base_ids(self) -> Sequence[str]:
        """
        List of [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the knowledgeBases associated with agent.
        """
        return pulumi.get(self, "knowledge_base_ids")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        A message that describes the current state of the agent in more detail. For example, can be used to provide actionable information for a resource in the Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to return only resources that match the given lifecycle state. The state value is case-insensitive.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace.  Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time the agent was created, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The date and time the agent was updated, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="welcomeMessage")
    def welcome_message(self) -> str:
        """
        Details about purpose and responsibility of the agent
        """
        return pulumi.get(self, "welcome_message")


@pulumi.output_type
class GetAgentAgentsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetAgentDataIngestionJobDataIngestionJobStatisticResult(dict):
    def __init__(__self__, *,
                 duration_in_seconds: int,
                 number_of_failed_files: int,
                 number_of_ingested_files: int):
        """
        :param int duration_in_seconds: The duration of this ingestion job.
        :param int number_of_failed_files: The number of files that have failed during the ingestion.
        :param int number_of_ingested_files: The number of files that have been successfully ingested during the ingestion.
        """
        pulumi.set(__self__, "duration_in_seconds", duration_in_seconds)
        pulumi.set(__self__, "number_of_failed_files", number_of_failed_files)
        pulumi.set(__self__, "number_of_ingested_files", number_of_ingested_files)

    @property
    @pulumi.getter(name="durationInSeconds")
    def duration_in_seconds(self) -> int:
        """
        The duration of this ingestion job.
        """
        return pulumi.get(self, "duration_in_seconds")

    @property
    @pulumi.getter(name="numberOfFailedFiles")
    def number_of_failed_files(self) -> int:
        """
        The number of files that have failed during the ingestion.
        """
        return pulumi.get(self, "number_of_failed_files")

    @property
    @pulumi.getter(name="numberOfIngestedFiles")
    def number_of_ingested_files(self) -> int:
        """
        The number of files that have been successfully ingested during the ingestion.
        """
        return pulumi.get(self, "number_of_ingested_files")


@pulumi.output_type
class GetAgentDataIngestionJobsDataIngestionJobCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetAgentDataIngestionJobsDataIngestionJobCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetAgentDataIngestionJobsDataIngestionJobCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAgentDataIngestionJobsDataIngestionJobCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 data_ingestion_job_statistics: Sequence['outputs.GetAgentDataIngestionJobsDataIngestionJobCollectionItemDataIngestionJobStatisticResult'],
                 data_source_id: str,
                 defined_tags: Mapping[str, str],
                 description: str,
                 display_name: str,
                 freeform_tags: Mapping[str, str],
                 id: str,
                 lifecycle_details: str,
                 state: str,
                 system_tags: Mapping[str, str],
                 time_created: str,
                 time_updated: str):
        """
        :param str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
        :param Sequence['GetAgentDataIngestionJobsDataIngestionJobCollectionItemDataIngestionJobStatisticArgs'] data_ingestion_job_statistics: **DataIngestionJobStatistics**
        :param str data_source_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the data source.
        :param Mapping[str, str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
        :param str description: A user-friendly name. Does not have to be unique, and it's changeable.
        :param str display_name: A filter to return only resources that match the given display name exactly.
        :param Mapping[str, str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DataIngestionJob.
        :param str lifecycle_details: A message that describes the current state of the data ingestion job in more detail. For example, can be used to provide actionable information for a resource in the Failed state.
        :param str state: A filter to return only resources that match the given lifecycle state. The state value is case-insensitive.
        :param Mapping[str, str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace.  Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param str time_created: The date and time the data ingestion job was created, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        :param str time_updated: The date and time the data ingestion job was updated, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "data_ingestion_job_statistics", data_ingestion_job_statistics)
        pulumi.set(__self__, "data_source_id", data_source_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="dataIngestionJobStatistics")
    def data_ingestion_job_statistics(self) -> Sequence['outputs.GetAgentDataIngestionJobsDataIngestionJobCollectionItemDataIngestionJobStatisticResult']:
        """
        **DataIngestionJobStatistics**
        """
        return pulumi.get(self, "data_ingestion_job_statistics")

    @property
    @pulumi.getter(name="dataSourceId")
    def data_source_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the data source.
        """
        return pulumi.get(self, "data_source_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A user-friendly name. Does not have to be unique, and it's changeable.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return only resources that match the given display name exactly.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DataIngestionJob.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        A message that describes the current state of the data ingestion job in more detail. For example, can be used to provide actionable information for a resource in the Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to return only resources that match the given lifecycle state. The state value is case-insensitive.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace.  Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time the data ingestion job was created, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The date and time the data ingestion job was updated, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetAgentDataIngestionJobsDataIngestionJobCollectionItemDataIngestionJobStatisticResult(dict):
    def __init__(__self__, *,
                 duration_in_seconds: int,
                 number_of_failed_files: int,
                 number_of_ingested_files: int):
        """
        :param int duration_in_seconds: The duration of this ingestion job.
        :param int number_of_failed_files: The number of files that have failed during the ingestion.
        :param int number_of_ingested_files: The number of files that have been successfully ingested during the ingestion.
        """
        pulumi.set(__self__, "duration_in_seconds", duration_in_seconds)
        pulumi.set(__self__, "number_of_failed_files", number_of_failed_files)
        pulumi.set(__self__, "number_of_ingested_files", number_of_ingested_files)

    @property
    @pulumi.getter(name="durationInSeconds")
    def duration_in_seconds(self) -> int:
        """
        The duration of this ingestion job.
        """
        return pulumi.get(self, "duration_in_seconds")

    @property
    @pulumi.getter(name="numberOfFailedFiles")
    def number_of_failed_files(self) -> int:
        """
        The number of files that have failed during the ingestion.
        """
        return pulumi.get(self, "number_of_failed_files")

    @property
    @pulumi.getter(name="numberOfIngestedFiles")
    def number_of_ingested_files(self) -> int:
        """
        The number of files that have been successfully ingested during the ingestion.
        """
        return pulumi.get(self, "number_of_ingested_files")


@pulumi.output_type
class GetAgentDataIngestionJobsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetAgentDataSourceDataSourceConfigResult(dict):
    def __init__(__self__, *,
                 data_source_config_type: str,
                 object_storage_prefixes: Sequence['outputs.GetAgentDataSourceDataSourceConfigObjectStoragePrefixResult']):
        """
        :param str data_source_config_type: The type of the tool. The allowed values are:
               * `OCI_OBJECT_STORAGE`: The data source is Oracle Cloud Infrastructure Object Storage.
        :param Sequence['GetAgentDataSourceDataSourceConfigObjectStoragePrefixArgs'] object_storage_prefixes: The locations of data items in Object Storage, can either be an object (File) or a prefix (folder).
        """
        pulumi.set(__self__, "data_source_config_type", data_source_config_type)
        pulumi.set(__self__, "object_storage_prefixes", object_storage_prefixes)

    @property
    @pulumi.getter(name="dataSourceConfigType")
    def data_source_config_type(self) -> str:
        """
        The type of the tool. The allowed values are:
        * `OCI_OBJECT_STORAGE`: The data source is Oracle Cloud Infrastructure Object Storage.
        """
        return pulumi.get(self, "data_source_config_type")

    @property
    @pulumi.getter(name="objectStoragePrefixes")
    def object_storage_prefixes(self) -> Sequence['outputs.GetAgentDataSourceDataSourceConfigObjectStoragePrefixResult']:
        """
        The locations of data items in Object Storage, can either be an object (File) or a prefix (folder).
        """
        return pulumi.get(self, "object_storage_prefixes")


@pulumi.output_type
class GetAgentDataSourceDataSourceConfigObjectStoragePrefixResult(dict):
    def __init__(__self__, *,
                 bucket: str,
                 namespace: str,
                 prefix: str):
        """
        :param str bucket: The bucket name of an object.
        :param str namespace: The namespace name of an object.
        :param str prefix: The name of the object (file) or prefix (folder).
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The bucket name of an object.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        The namespace name of an object.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        """
        The name of the object (file) or prefix (folder).
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class GetAgentDataSourcesDataSourceCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetAgentDataSourcesDataSourceCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetAgentDataSourcesDataSourceCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAgentDataSourcesDataSourceCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 data_source_configs: Sequence['outputs.GetAgentDataSourcesDataSourceCollectionItemDataSourceConfigResult'],
                 defined_tags: Mapping[str, str],
                 description: str,
                 display_name: str,
                 freeform_tags: Mapping[str, str],
                 id: str,
                 knowledge_base_id: str,
                 lifecycle_details: str,
                 state: str,
                 system_tags: Mapping[str, str],
                 time_created: str,
                 time_updated: str):
        """
        :param str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
        :param Sequence['GetAgentDataSourcesDataSourceCollectionItemDataSourceConfigArgs'] data_source_configs: **DataSourceConfig**
        :param Mapping[str, str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
        :param str description: A description of the data source.
        :param str display_name: A filter to return only resources that match the given display name exactly.
        :param Mapping[str, str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the data source.
        :param str knowledge_base_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the knowledge base.
        :param str lifecycle_details: A message that describes the current state of the data source in more detail. For example, can be used to provide actionable information for a resource in the Failed state.
        :param str state: A filter to return only resources that match the given lifecycle state. The state value is case-insensitive.
        :param Mapping[str, str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace.  Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param str time_created: The date and time the data source was created, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        :param str time_updated: The date and time the data source was updated, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "data_source_configs", data_source_configs)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "knowledge_base_id", knowledge_base_id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="dataSourceConfigs")
    def data_source_configs(self) -> Sequence['outputs.GetAgentDataSourcesDataSourceCollectionItemDataSourceConfigResult']:
        """
        **DataSourceConfig**
        """
        return pulumi.get(self, "data_source_configs")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A description of the data source.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return only resources that match the given display name exactly.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the data source.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="knowledgeBaseId")
    def knowledge_base_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the knowledge base.
        """
        return pulumi.get(self, "knowledge_base_id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        A message that describes the current state of the data source in more detail. For example, can be used to provide actionable information for a resource in the Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to return only resources that match the given lifecycle state. The state value is case-insensitive.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace.  Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time the data source was created, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The date and time the data source was updated, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetAgentDataSourcesDataSourceCollectionItemDataSourceConfigResult(dict):
    def __init__(__self__, *,
                 data_source_config_type: str,
                 object_storage_prefixes: Sequence['outputs.GetAgentDataSourcesDataSourceCollectionItemDataSourceConfigObjectStoragePrefixResult']):
        """
        :param str data_source_config_type: The type of the tool. The allowed values are:
               * `OCI_OBJECT_STORAGE`: The data source is Oracle Cloud Infrastructure Object Storage.
        :param Sequence['GetAgentDataSourcesDataSourceCollectionItemDataSourceConfigObjectStoragePrefixArgs'] object_storage_prefixes: The locations of data items in Object Storage, can either be an object (File) or a prefix (folder).
        """
        pulumi.set(__self__, "data_source_config_type", data_source_config_type)
        pulumi.set(__self__, "object_storage_prefixes", object_storage_prefixes)

    @property
    @pulumi.getter(name="dataSourceConfigType")
    def data_source_config_type(self) -> str:
        """
        The type of the tool. The allowed values are:
        * `OCI_OBJECT_STORAGE`: The data source is Oracle Cloud Infrastructure Object Storage.
        """
        return pulumi.get(self, "data_source_config_type")

    @property
    @pulumi.getter(name="objectStoragePrefixes")
    def object_storage_prefixes(self) -> Sequence['outputs.GetAgentDataSourcesDataSourceCollectionItemDataSourceConfigObjectStoragePrefixResult']:
        """
        The locations of data items in Object Storage, can either be an object (File) or a prefix (folder).
        """
        return pulumi.get(self, "object_storage_prefixes")


@pulumi.output_type
class GetAgentDataSourcesDataSourceCollectionItemDataSourceConfigObjectStoragePrefixResult(dict):
    def __init__(__self__, *,
                 bucket: str,
                 namespace: str,
                 prefix: str):
        """
        :param str bucket: The bucket name of an object.
        :param str namespace: The namespace name of an object.
        :param str prefix: The name of the object (file) or prefix (folder).
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The bucket name of an object.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        The namespace name of an object.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        """
        The name of the object (file) or prefix (folder).
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class GetAgentDataSourcesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetAgentKnowledgeBaseIndexConfigResult(dict):
    def __init__(__self__, *,
                 cluster_id: str,
                 database_connections: Sequence['outputs.GetAgentKnowledgeBaseIndexConfigDatabaseConnectionResult'],
                 database_functions: Sequence['outputs.GetAgentKnowledgeBaseIndexConfigDatabaseFunctionResult'],
                 index_config_type: str,
                 indexes: Sequence['outputs.GetAgentKnowledgeBaseIndexConfigIndexResult'],
                 secret_details: Sequence['outputs.GetAgentKnowledgeBaseIndexConfigSecretDetailResult'],
                 should_enable_hybrid_search: bool):
        """
        :param str cluster_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the OpenSearch Cluster.
        :param Sequence['GetAgentKnowledgeBaseIndexConfigDatabaseConnectionArgs'] database_connections: **DatabaseConnection**
        :param Sequence['GetAgentKnowledgeBaseIndexConfigDatabaseFunctionArgs'] database_functions: Array of Database functions to be used.
        :param str index_config_type: The type of index. The allowed values are:
               * `DEFAULT_INDEX_CONFIG`: DefaultIndexConfig allows the service to create and manage vector store on behalf of the customer.
               * `OCI_OPEN_SEARCH_INDEX_CONFIG`: OciOpenSearchIndexConfig allows customer to configure their OpenSearch cluster.
               * `OCI_DATABASE_CONFIG`: OciDatabaseConfig allows customer to configure their Database.
        :param Sequence['GetAgentKnowledgeBaseIndexConfigIndexArgs'] indexes: Index configuration for open search.
        :param Sequence['GetAgentKnowledgeBaseIndexConfigSecretDetailArgs'] secret_details: **SecretDetail**
        :param bool should_enable_hybrid_search: Whether to enable Hybrid search in service managed OpenSearch.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "database_connections", database_connections)
        pulumi.set(__self__, "database_functions", database_functions)
        pulumi.set(__self__, "index_config_type", index_config_type)
        pulumi.set(__self__, "indexes", indexes)
        pulumi.set(__self__, "secret_details", secret_details)
        pulumi.set(__self__, "should_enable_hybrid_search", should_enable_hybrid_search)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the OpenSearch Cluster.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="databaseConnections")
    def database_connections(self) -> Sequence['outputs.GetAgentKnowledgeBaseIndexConfigDatabaseConnectionResult']:
        """
        **DatabaseConnection**
        """
        return pulumi.get(self, "database_connections")

    @property
    @pulumi.getter(name="databaseFunctions")
    def database_functions(self) -> Sequence['outputs.GetAgentKnowledgeBaseIndexConfigDatabaseFunctionResult']:
        """
        Array of Database functions to be used.
        """
        return pulumi.get(self, "database_functions")

    @property
    @pulumi.getter(name="indexConfigType")
    def index_config_type(self) -> str:
        """
        The type of index. The allowed values are:
        * `DEFAULT_INDEX_CONFIG`: DefaultIndexConfig allows the service to create and manage vector store on behalf of the customer.
        * `OCI_OPEN_SEARCH_INDEX_CONFIG`: OciOpenSearchIndexConfig allows customer to configure their OpenSearch cluster.
        * `OCI_DATABASE_CONFIG`: OciDatabaseConfig allows customer to configure their Database.
        """
        return pulumi.get(self, "index_config_type")

    @property
    @pulumi.getter
    def indexes(self) -> Sequence['outputs.GetAgentKnowledgeBaseIndexConfigIndexResult']:
        """
        Index configuration for open search.
        """
        return pulumi.get(self, "indexes")

    @property
    @pulumi.getter(name="secretDetails")
    def secret_details(self) -> Sequence['outputs.GetAgentKnowledgeBaseIndexConfigSecretDetailResult']:
        """
        **SecretDetail**
        """
        return pulumi.get(self, "secret_details")

    @property
    @pulumi.getter(name="shouldEnableHybridSearch")
    def should_enable_hybrid_search(self) -> bool:
        """
        Whether to enable Hybrid search in service managed OpenSearch.
        """
        return pulumi.get(self, "should_enable_hybrid_search")


@pulumi.output_type
class GetAgentKnowledgeBaseIndexConfigDatabaseConnectionResult(dict):
    def __init__(__self__, *,
                 connection_id: str,
                 connection_type: str):
        """
        :param str connection_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Tools Connection.
        :param str connection_type: The type of Database connection. The allowed values are:
               * `DATABASE_TOOL_CONNECTION`: This allows the service to connect to a vector store via a Database Tools Connection.
        """
        pulumi.set(__self__, "connection_id", connection_id)
        pulumi.set(__self__, "connection_type", connection_type)

    @property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Tools Connection.
        """
        return pulumi.get(self, "connection_id")

    @property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> str:
        """
        The type of Database connection. The allowed values are:
        * `DATABASE_TOOL_CONNECTION`: This allows the service to connect to a vector store via a Database Tools Connection.
        """
        return pulumi.get(self, "connection_type")


@pulumi.output_type
class GetAgentKnowledgeBaseIndexConfigDatabaseFunctionResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: The index name in opensearch.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The index name in opensearch.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetAgentKnowledgeBaseIndexConfigIndexResult(dict):
    def __init__(__self__, *,
                 name: str,
                 schemas: Sequence['outputs.GetAgentKnowledgeBaseIndexConfigIndexSchemaResult']):
        """
        :param str name: The index name in opensearch.
        :param Sequence['GetAgentKnowledgeBaseIndexConfigIndexSchemaArgs'] schemas: **IndexSchema**
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "schemas", schemas)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The index name in opensearch.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def schemas(self) -> Sequence['outputs.GetAgentKnowledgeBaseIndexConfigIndexSchemaResult']:
        """
        **IndexSchema**
        """
        return pulumi.get(self, "schemas")


@pulumi.output_type
class GetAgentKnowledgeBaseIndexConfigIndexSchemaResult(dict):
    def __init__(__self__, *,
                 body_key: str,
                 embedding_body_key: str,
                 title_key: str,
                 url_key: str):
        """
        :param str body_key: Body key name.
        :param str embedding_body_key: Field within customer managed Oracle Cloud Infrastructure OpenSearch document containing the vector embedding for queries.
        :param str title_key: Title key that stores the Title of a document, if available.
        :param str url_key: URL key that stores the URL of a document, if available.
        """
        pulumi.set(__self__, "body_key", body_key)
        pulumi.set(__self__, "embedding_body_key", embedding_body_key)
        pulumi.set(__self__, "title_key", title_key)
        pulumi.set(__self__, "url_key", url_key)

    @property
    @pulumi.getter(name="bodyKey")
    def body_key(self) -> str:
        """
        Body key name.
        """
        return pulumi.get(self, "body_key")

    @property
    @pulumi.getter(name="embeddingBodyKey")
    def embedding_body_key(self) -> str:
        """
        Field within customer managed Oracle Cloud Infrastructure OpenSearch document containing the vector embedding for queries.
        """
        return pulumi.get(self, "embedding_body_key")

    @property
    @pulumi.getter(name="titleKey")
    def title_key(self) -> str:
        """
        Title key that stores the Title of a document, if available.
        """
        return pulumi.get(self, "title_key")

    @property
    @pulumi.getter(name="urlKey")
    def url_key(self) -> str:
        """
        URL key that stores the URL of a document, if available.
        """
        return pulumi.get(self, "url_key")


@pulumi.output_type
class GetAgentKnowledgeBaseIndexConfigSecretDetailResult(dict):
    def __init__(__self__, *,
                 client_id: str,
                 idcs_url: str,
                 scope_url: str,
                 type: str,
                 vault_secret_id: str):
        """
        :param str client_id: The IDCS Connect clientId.
        :param str idcs_url: The URL represent authentication url of the IDCS.
        :param str scope_url: Fully qualified scope url
        :param str type: The type of OpenID. The allowed values are:
               * `IDCS_SECRET`: The OpenID configuration used is OpenSearch is IDCS.
               * `BASIC_AUTH_SECRET`: Basic authentication use for OpenSearch
        :param str vault_secret_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the secret for basic authentication.
        """
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "idcs_url", idcs_url)
        pulumi.set(__self__, "scope_url", scope_url)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vault_secret_id", vault_secret_id)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        """
        The IDCS Connect clientId.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="idcsUrl")
    def idcs_url(self) -> str:
        """
        The URL represent authentication url of the IDCS.
        """
        return pulumi.get(self, "idcs_url")

    @property
    @pulumi.getter(name="scopeUrl")
    def scope_url(self) -> str:
        """
        Fully qualified scope url
        """
        return pulumi.get(self, "scope_url")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of OpenID. The allowed values are:
        * `IDCS_SECRET`: The OpenID configuration used is OpenSearch is IDCS.
        * `BASIC_AUTH_SECRET`: Basic authentication use for OpenSearch
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vaultSecretId")
    def vault_secret_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the secret for basic authentication.
        """
        return pulumi.get(self, "vault_secret_id")


@pulumi.output_type
class GetAgentKnowledgeBasesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: The index name in opensearch.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The index name in opensearch.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetAgentKnowledgeBasesKnowledgeBaseCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetAgentKnowledgeBasesKnowledgeBaseCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetAgentKnowledgeBasesKnowledgeBaseCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAgentKnowledgeBasesKnowledgeBaseCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 defined_tags: Mapping[str, str],
                 description: str,
                 display_name: str,
                 freeform_tags: Mapping[str, str],
                 id: str,
                 index_configs: Sequence['outputs.GetAgentKnowledgeBasesKnowledgeBaseCollectionItemIndexConfigResult'],
                 lifecycle_details: str,
                 state: str,
                 system_tags: Mapping[str, str],
                 time_created: str,
                 time_updated: str):
        """
        :param str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
        :param Mapping[str, str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
        :param str description: A description of the knowledge base.
        :param str display_name: A filter to return only resources that match the given display name exactly.
        :param Mapping[str, str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the knowledge base.
        :param Sequence['GetAgentKnowledgeBasesKnowledgeBaseCollectionItemIndexConfigArgs'] index_configs: **IndexConfig**
        :param str lifecycle_details: A message that describes the current state of the knowledge base in more detail. For example, can be used to provide actionable information for a resource in the Failed state.
        :param str state: A filter to return only resources that match the given lifecycle state. The state value is case-insensitive.
        :param Mapping[str, str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace.  Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param str time_created: The date and time the knowledge base was created, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        :param str time_updated: The date and time the knowledge base was updated, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "index_configs", index_configs)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A description of the knowledge base.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return only resources that match the given display name exactly.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the knowledge base.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="indexConfigs")
    def index_configs(self) -> Sequence['outputs.GetAgentKnowledgeBasesKnowledgeBaseCollectionItemIndexConfigResult']:
        """
        **IndexConfig**
        """
        return pulumi.get(self, "index_configs")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        A message that describes the current state of the knowledge base in more detail. For example, can be used to provide actionable information for a resource in the Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to return only resources that match the given lifecycle state. The state value is case-insensitive.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace.  Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time the knowledge base was created, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The date and time the knowledge base was updated, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetAgentKnowledgeBasesKnowledgeBaseCollectionItemIndexConfigResult(dict):
    def __init__(__self__, *,
                 cluster_id: str,
                 database_connections: Sequence['outputs.GetAgentKnowledgeBasesKnowledgeBaseCollectionItemIndexConfigDatabaseConnectionResult'],
                 database_functions: Sequence['outputs.GetAgentKnowledgeBasesKnowledgeBaseCollectionItemIndexConfigDatabaseFunctionResult'],
                 index_config_type: str,
                 indexes: Sequence['outputs.GetAgentKnowledgeBasesKnowledgeBaseCollectionItemIndexConfigIndexResult'],
                 secret_details: Sequence['outputs.GetAgentKnowledgeBasesKnowledgeBaseCollectionItemIndexConfigSecretDetailResult'],
                 should_enable_hybrid_search: bool):
        """
        :param str cluster_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the OpenSearch Cluster.
        :param Sequence['GetAgentKnowledgeBasesKnowledgeBaseCollectionItemIndexConfigDatabaseConnectionArgs'] database_connections: **DatabaseConnection**
        :param Sequence['GetAgentKnowledgeBasesKnowledgeBaseCollectionItemIndexConfigDatabaseFunctionArgs'] database_functions: Array of Database functions to be used.
        :param str index_config_type: The type of index. The allowed values are:
               * `DEFAULT_INDEX_CONFIG`: DefaultIndexConfig allows the service to create and manage vector store on behalf of the customer.
               * `OCI_OPEN_SEARCH_INDEX_CONFIG`: OciOpenSearchIndexConfig allows customer to configure their OpenSearch cluster.
               * `OCI_DATABASE_CONFIG`: OciDatabaseConfig allows customer to configure their Database.
        :param Sequence['GetAgentKnowledgeBasesKnowledgeBaseCollectionItemIndexConfigIndexArgs'] indexes: Index configuration for open search.
        :param Sequence['GetAgentKnowledgeBasesKnowledgeBaseCollectionItemIndexConfigSecretDetailArgs'] secret_details: **SecretDetail**
        :param bool should_enable_hybrid_search: Whether to enable Hybrid search in service managed OpenSearch.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "database_connections", database_connections)
        pulumi.set(__self__, "database_functions", database_functions)
        pulumi.set(__self__, "index_config_type", index_config_type)
        pulumi.set(__self__, "indexes", indexes)
        pulumi.set(__self__, "secret_details", secret_details)
        pulumi.set(__self__, "should_enable_hybrid_search", should_enable_hybrid_search)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the OpenSearch Cluster.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="databaseConnections")
    def database_connections(self) -> Sequence['outputs.GetAgentKnowledgeBasesKnowledgeBaseCollectionItemIndexConfigDatabaseConnectionResult']:
        """
        **DatabaseConnection**
        """
        return pulumi.get(self, "database_connections")

    @property
    @pulumi.getter(name="databaseFunctions")
    def database_functions(self) -> Sequence['outputs.GetAgentKnowledgeBasesKnowledgeBaseCollectionItemIndexConfigDatabaseFunctionResult']:
        """
        Array of Database functions to be used.
        """
        return pulumi.get(self, "database_functions")

    @property
    @pulumi.getter(name="indexConfigType")
    def index_config_type(self) -> str:
        """
        The type of index. The allowed values are:
        * `DEFAULT_INDEX_CONFIG`: DefaultIndexConfig allows the service to create and manage vector store on behalf of the customer.
        * `OCI_OPEN_SEARCH_INDEX_CONFIG`: OciOpenSearchIndexConfig allows customer to configure their OpenSearch cluster.
        * `OCI_DATABASE_CONFIG`: OciDatabaseConfig allows customer to configure their Database.
        """
        return pulumi.get(self, "index_config_type")

    @property
    @pulumi.getter
    def indexes(self) -> Sequence['outputs.GetAgentKnowledgeBasesKnowledgeBaseCollectionItemIndexConfigIndexResult']:
        """
        Index configuration for open search.
        """
        return pulumi.get(self, "indexes")

    @property
    @pulumi.getter(name="secretDetails")
    def secret_details(self) -> Sequence['outputs.GetAgentKnowledgeBasesKnowledgeBaseCollectionItemIndexConfigSecretDetailResult']:
        """
        **SecretDetail**
        """
        return pulumi.get(self, "secret_details")

    @property
    @pulumi.getter(name="shouldEnableHybridSearch")
    def should_enable_hybrid_search(self) -> bool:
        """
        Whether to enable Hybrid search in service managed OpenSearch.
        """
        return pulumi.get(self, "should_enable_hybrid_search")


@pulumi.output_type
class GetAgentKnowledgeBasesKnowledgeBaseCollectionItemIndexConfigDatabaseConnectionResult(dict):
    def __init__(__self__, *,
                 connection_id: str,
                 connection_type: str):
        """
        :param str connection_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Tools Connection.
        :param str connection_type: The type of Database connection. The allowed values are:
               * `DATABASE_TOOL_CONNECTION`: This allows the service to connect to a vector store via a Database Tools Connection.
        """
        pulumi.set(__self__, "connection_id", connection_id)
        pulumi.set(__self__, "connection_type", connection_type)

    @property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Tools Connection.
        """
        return pulumi.get(self, "connection_id")

    @property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> str:
        """
        The type of Database connection. The allowed values are:
        * `DATABASE_TOOL_CONNECTION`: This allows the service to connect to a vector store via a Database Tools Connection.
        """
        return pulumi.get(self, "connection_type")


@pulumi.output_type
class GetAgentKnowledgeBasesKnowledgeBaseCollectionItemIndexConfigDatabaseFunctionResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: The index name in opensearch.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The index name in opensearch.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetAgentKnowledgeBasesKnowledgeBaseCollectionItemIndexConfigIndexResult(dict):
    def __init__(__self__, *,
                 name: str,
                 schemas: Sequence['outputs.GetAgentKnowledgeBasesKnowledgeBaseCollectionItemIndexConfigIndexSchemaResult']):
        """
        :param str name: The index name in opensearch.
        :param Sequence['GetAgentKnowledgeBasesKnowledgeBaseCollectionItemIndexConfigIndexSchemaArgs'] schemas: **IndexSchema**
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "schemas", schemas)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The index name in opensearch.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def schemas(self) -> Sequence['outputs.GetAgentKnowledgeBasesKnowledgeBaseCollectionItemIndexConfigIndexSchemaResult']:
        """
        **IndexSchema**
        """
        return pulumi.get(self, "schemas")


@pulumi.output_type
class GetAgentKnowledgeBasesKnowledgeBaseCollectionItemIndexConfigIndexSchemaResult(dict):
    def __init__(__self__, *,
                 body_key: str,
                 embedding_body_key: str,
                 title_key: str,
                 url_key: str):
        """
        :param str body_key: Body key name.
        :param str embedding_body_key: Field within customer managed Oracle Cloud Infrastructure OpenSearch document containing the vector embedding for queries.
        :param str title_key: Title key that stores the Title of a document, if available.
        :param str url_key: URL key that stores the URL of a document, if available.
        """
        pulumi.set(__self__, "body_key", body_key)
        pulumi.set(__self__, "embedding_body_key", embedding_body_key)
        pulumi.set(__self__, "title_key", title_key)
        pulumi.set(__self__, "url_key", url_key)

    @property
    @pulumi.getter(name="bodyKey")
    def body_key(self) -> str:
        """
        Body key name.
        """
        return pulumi.get(self, "body_key")

    @property
    @pulumi.getter(name="embeddingBodyKey")
    def embedding_body_key(self) -> str:
        """
        Field within customer managed Oracle Cloud Infrastructure OpenSearch document containing the vector embedding for queries.
        """
        return pulumi.get(self, "embedding_body_key")

    @property
    @pulumi.getter(name="titleKey")
    def title_key(self) -> str:
        """
        Title key that stores the Title of a document, if available.
        """
        return pulumi.get(self, "title_key")

    @property
    @pulumi.getter(name="urlKey")
    def url_key(self) -> str:
        """
        URL key that stores the URL of a document, if available.
        """
        return pulumi.get(self, "url_key")


@pulumi.output_type
class GetAgentKnowledgeBasesKnowledgeBaseCollectionItemIndexConfigSecretDetailResult(dict):
    def __init__(__self__, *,
                 client_id: str,
                 idcs_url: str,
                 scope_url: str,
                 type: str,
                 vault_secret_id: str):
        """
        :param str client_id: The IDCS Connect clientId.
        :param str idcs_url: The URL represent authentication url of the IDCS.
        :param str scope_url: Fully qualified scope url
        :param str type: The type of OpenID. The allowed values are:
               * `IDCS_SECRET`: The OpenID configuration used is OpenSearch is IDCS.
               * `BASIC_AUTH_SECRET`: Basic authentication use for OpenSearch
        :param str vault_secret_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the secret for basic authentication.
        """
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "idcs_url", idcs_url)
        pulumi.set(__self__, "scope_url", scope_url)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vault_secret_id", vault_secret_id)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        """
        The IDCS Connect clientId.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="idcsUrl")
    def idcs_url(self) -> str:
        """
        The URL represent authentication url of the IDCS.
        """
        return pulumi.get(self, "idcs_url")

    @property
    @pulumi.getter(name="scopeUrl")
    def scope_url(self) -> str:
        """
        Fully qualified scope url
        """
        return pulumi.get(self, "scope_url")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of OpenID. The allowed values are:
        * `IDCS_SECRET`: The OpenID configuration used is OpenSearch is IDCS.
        * `BASIC_AUTH_SECRET`: Basic authentication use for OpenSearch
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vaultSecretId")
    def vault_secret_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the secret for basic authentication.
        """
        return pulumi.get(self, "vault_secret_id")


@pulumi.output_type
class GetDedicatedAiClusterCapacityResult(dict):
    def __init__(__self__, *,
                 capacity_type: str,
                 total_endpoint_capacity: int,
                 used_endpoint_capacity: int):
        pulumi.set(__self__, "capacity_type", capacity_type)
        pulumi.set(__self__, "total_endpoint_capacity", total_endpoint_capacity)
        pulumi.set(__self__, "used_endpoint_capacity", used_endpoint_capacity)

    @property
    @pulumi.getter(name="capacityType")
    def capacity_type(self) -> str:
        return pulumi.get(self, "capacity_type")

    @property
    @pulumi.getter(name="totalEndpointCapacity")
    def total_endpoint_capacity(self) -> int:
        return pulumi.get(self, "total_endpoint_capacity")

    @property
    @pulumi.getter(name="usedEndpointCapacity")
    def used_endpoint_capacity(self) -> int:
        return pulumi.get(self, "used_endpoint_capacity")


@pulumi.output_type
class GetDedicatedAiClustersDedicatedAiClusterCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDedicatedAiClustersDedicatedAiClusterCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDedicatedAiClustersDedicatedAiClusterCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDedicatedAiClustersDedicatedAiClusterCollectionItemResult(dict):
    def __init__(__self__, *,
                 capacities: Sequence['outputs.GetDedicatedAiClustersDedicatedAiClusterCollectionItemCapacityResult'],
                 compartment_id: str,
                 defined_tags: Mapping[str, str],
                 description: str,
                 display_name: str,
                 freeform_tags: Mapping[str, str],
                 id: str,
                 lifecycle_details: str,
                 state: str,
                 system_tags: Mapping[str, str],
                 time_created: str,
                 time_updated: str,
                 type: str,
                 unit_count: int,
                 unit_shape: str):
        """
        :param str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
        :param str display_name: A filter to return only resources that match the given display name exactly.
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the dedicated AI cluster.
        :param str state: A filter to return only the dedicated AI clusters that their lifecycle state matches the given lifecycle state.
        """
        pulumi.set(__self__, "capacities", capacities)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "unit_count", unit_count)
        pulumi.set(__self__, "unit_shape", unit_shape)

    @property
    @pulumi.getter
    def capacities(self) -> Sequence['outputs.GetDedicatedAiClustersDedicatedAiClusterCollectionItemCapacityResult']:
        return pulumi.get(self, "capacities")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, str]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return only resources that match the given display name exactly.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, str]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the dedicated AI cluster.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to return only the dedicated AI clusters that their lifecycle state matches the given lifecycle state.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, str]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="unitCount")
    def unit_count(self) -> int:
        return pulumi.get(self, "unit_count")

    @property
    @pulumi.getter(name="unitShape")
    def unit_shape(self) -> str:
        return pulumi.get(self, "unit_shape")


@pulumi.output_type
class GetDedicatedAiClustersDedicatedAiClusterCollectionItemCapacityResult(dict):
    def __init__(__self__, *,
                 capacity_type: str,
                 total_endpoint_capacity: int,
                 used_endpoint_capacity: int):
        pulumi.set(__self__, "capacity_type", capacity_type)
        pulumi.set(__self__, "total_endpoint_capacity", total_endpoint_capacity)
        pulumi.set(__self__, "used_endpoint_capacity", used_endpoint_capacity)

    @property
    @pulumi.getter(name="capacityType")
    def capacity_type(self) -> str:
        return pulumi.get(self, "capacity_type")

    @property
    @pulumi.getter(name="totalEndpointCapacity")
    def total_endpoint_capacity(self) -> int:
        return pulumi.get(self, "total_endpoint_capacity")

    @property
    @pulumi.getter(name="usedEndpointCapacity")
    def used_endpoint_capacity(self) -> int:
        return pulumi.get(self, "used_endpoint_capacity")


@pulumi.output_type
class GetDedicatedAiClustersFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetEndpointContentModerationConfigResult(dict):
    def __init__(__self__, *,
                 is_enabled: bool):
        pulumi.set(__self__, "is_enabled", is_enabled)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        return pulumi.get(self, "is_enabled")


@pulumi.output_type
class GetEndpointsEndpointCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetEndpointsEndpointCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetEndpointsEndpointCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetEndpointsEndpointCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 content_moderation_configs: Sequence['outputs.GetEndpointsEndpointCollectionItemContentModerationConfigResult'],
                 dedicated_ai_cluster_id: str,
                 defined_tags: Mapping[str, str],
                 description: str,
                 display_name: str,
                 freeform_tags: Mapping[str, str],
                 id: str,
                 lifecycle_details: str,
                 model_id: str,
                 state: str,
                 system_tags: Mapping[str, str],
                 time_created: str,
                 time_updated: str):
        """
        :param str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
        :param str description: An optional description of the endpoint.
        :param str display_name: A filter to return only resources that match the given display name exactly.
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the endpoint.
        :param str model_id: The OCID of the model that's used to create this endpoint.
        :param str state: A filter to return only resources that their lifecycle state matches the given lifecycle state.
        :param str time_updated: The date and time that the endpoint was updated in the format of an RFC3339 datetime string.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "content_moderation_configs", content_moderation_configs)
        pulumi.set(__self__, "dedicated_ai_cluster_id", dedicated_ai_cluster_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "model_id", model_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="contentModerationConfigs")
    def content_moderation_configs(self) -> Sequence['outputs.GetEndpointsEndpointCollectionItemContentModerationConfigResult']:
        return pulumi.get(self, "content_moderation_configs")

    @property
    @pulumi.getter(name="dedicatedAiClusterId")
    def dedicated_ai_cluster_id(self) -> str:
        return pulumi.get(self, "dedicated_ai_cluster_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, str]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        An optional description of the endpoint.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return only resources that match the given display name exactly.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, str]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the endpoint.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="modelId")
    def model_id(self) -> str:
        """
        The OCID of the model that's used to create this endpoint.
        """
        return pulumi.get(self, "model_id")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to return only resources that their lifecycle state matches the given lifecycle state.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, str]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The date and time that the endpoint was updated in the format of an RFC3339 datetime string.
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetEndpointsEndpointCollectionItemContentModerationConfigResult(dict):
    def __init__(__self__, *,
                 is_enabled: bool):
        pulumi.set(__self__, "is_enabled", is_enabled)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        return pulumi.get(self, "is_enabled")


@pulumi.output_type
class GetEndpointsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetModelFineTuneDetailResult(dict):
    def __init__(__self__, *,
                 dedicated_ai_cluster_id: str,
                 training_configs: Sequence['outputs.GetModelFineTuneDetailTrainingConfigResult'],
                 training_datasets: Sequence['outputs.GetModelFineTuneDetailTrainingDatasetResult']):
        """
        :param str dedicated_ai_cluster_id: The OCID of the dedicated AI cluster this fine-tuning runs on.
        :param Sequence['GetModelFineTuneDetailTrainingConfigArgs'] training_configs: The fine-tuning method and hyperparameters used for fine-tuning a custom model.
        :param Sequence['GetModelFineTuneDetailTrainingDatasetArgs'] training_datasets: The dataset used to fine-tune the model.
        """
        pulumi.set(__self__, "dedicated_ai_cluster_id", dedicated_ai_cluster_id)
        pulumi.set(__self__, "training_configs", training_configs)
        pulumi.set(__self__, "training_datasets", training_datasets)

    @property
    @pulumi.getter(name="dedicatedAiClusterId")
    def dedicated_ai_cluster_id(self) -> str:
        """
        The OCID of the dedicated AI cluster this fine-tuning runs on.
        """
        return pulumi.get(self, "dedicated_ai_cluster_id")

    @property
    @pulumi.getter(name="trainingConfigs")
    def training_configs(self) -> Sequence['outputs.GetModelFineTuneDetailTrainingConfigResult']:
        """
        The fine-tuning method and hyperparameters used for fine-tuning a custom model.
        """
        return pulumi.get(self, "training_configs")

    @property
    @pulumi.getter(name="trainingDatasets")
    def training_datasets(self) -> Sequence['outputs.GetModelFineTuneDetailTrainingDatasetResult']:
        """
        The dataset used to fine-tune the model.
        """
        return pulumi.get(self, "training_datasets")


@pulumi.output_type
class GetModelFineTuneDetailTrainingConfigResult(dict):
    def __init__(__self__, *,
                 early_stopping_patience: int,
                 early_stopping_threshold: float,
                 learning_rate: float,
                 log_model_metrics_interval_in_steps: int,
                 lora_alpha: int,
                 lora_dropout: float,
                 lora_r: int,
                 num_of_last_layers: int,
                 total_training_epochs: int,
                 training_batch_size: int,
                 training_config_type: str):
        """
        :param int early_stopping_patience: Stop training if the loss metric does not improve beyond 'early_stopping_threshold' for this many times of evaluation.
        :param float early_stopping_threshold: How much the loss must improve to prevent early stopping.
        :param float learning_rate: The initial learning rate to be used during training
        :param int log_model_metrics_interval_in_steps: Determines how frequently to log model metrics.
        :param int lora_alpha: This parameter represents the scaling factor for the weight matrices in LoRA.
        :param float lora_dropout: This parameter indicates the dropout probability for LoRA layers.
        :param int lora_r: This parameter represents the LoRA rank of the update matrices.
        :param int num_of_last_layers: The number of last layers to be fine-tuned.
        :param int total_training_epochs: The maximum number of training epochs to run for.
        :param int training_batch_size: The batch size used during training.
        :param str training_config_type: The fine-tuning method for training a custom model.
        """
        pulumi.set(__self__, "early_stopping_patience", early_stopping_patience)
        pulumi.set(__self__, "early_stopping_threshold", early_stopping_threshold)
        pulumi.set(__self__, "learning_rate", learning_rate)
        pulumi.set(__self__, "log_model_metrics_interval_in_steps", log_model_metrics_interval_in_steps)
        pulumi.set(__self__, "lora_alpha", lora_alpha)
        pulumi.set(__self__, "lora_dropout", lora_dropout)
        pulumi.set(__self__, "lora_r", lora_r)
        pulumi.set(__self__, "num_of_last_layers", num_of_last_layers)
        pulumi.set(__self__, "total_training_epochs", total_training_epochs)
        pulumi.set(__self__, "training_batch_size", training_batch_size)
        pulumi.set(__self__, "training_config_type", training_config_type)

    @property
    @pulumi.getter(name="earlyStoppingPatience")
    def early_stopping_patience(self) -> int:
        """
        Stop training if the loss metric does not improve beyond 'early_stopping_threshold' for this many times of evaluation.
        """
        return pulumi.get(self, "early_stopping_patience")

    @property
    @pulumi.getter(name="earlyStoppingThreshold")
    def early_stopping_threshold(self) -> float:
        """
        How much the loss must improve to prevent early stopping.
        """
        return pulumi.get(self, "early_stopping_threshold")

    @property
    @pulumi.getter(name="learningRate")
    def learning_rate(self) -> float:
        """
        The initial learning rate to be used during training
        """
        return pulumi.get(self, "learning_rate")

    @property
    @pulumi.getter(name="logModelMetricsIntervalInSteps")
    def log_model_metrics_interval_in_steps(self) -> int:
        """
        Determines how frequently to log model metrics.
        """
        return pulumi.get(self, "log_model_metrics_interval_in_steps")

    @property
    @pulumi.getter(name="loraAlpha")
    def lora_alpha(self) -> int:
        """
        This parameter represents the scaling factor for the weight matrices in LoRA.
        """
        return pulumi.get(self, "lora_alpha")

    @property
    @pulumi.getter(name="loraDropout")
    def lora_dropout(self) -> float:
        """
        This parameter indicates the dropout probability for LoRA layers.
        """
        return pulumi.get(self, "lora_dropout")

    @property
    @pulumi.getter(name="loraR")
    def lora_r(self) -> int:
        """
        This parameter represents the LoRA rank of the update matrices.
        """
        return pulumi.get(self, "lora_r")

    @property
    @pulumi.getter(name="numOfLastLayers")
    def num_of_last_layers(self) -> int:
        """
        The number of last layers to be fine-tuned.
        """
        return pulumi.get(self, "num_of_last_layers")

    @property
    @pulumi.getter(name="totalTrainingEpochs")
    def total_training_epochs(self) -> int:
        """
        The maximum number of training epochs to run for.
        """
        return pulumi.get(self, "total_training_epochs")

    @property
    @pulumi.getter(name="trainingBatchSize")
    def training_batch_size(self) -> int:
        """
        The batch size used during training.
        """
        return pulumi.get(self, "training_batch_size")

    @property
    @pulumi.getter(name="trainingConfigType")
    def training_config_type(self) -> str:
        """
        The fine-tuning method for training a custom model.
        """
        return pulumi.get(self, "training_config_type")


@pulumi.output_type
class GetModelFineTuneDetailTrainingDatasetResult(dict):
    def __init__(__self__, *,
                 bucket: str,
                 dataset_type: str,
                 namespace: str,
                 object: str):
        """
        :param str bucket: The Object Storage bucket name.
        :param str dataset_type: The type of the data asset.
        :param str namespace: The Object Storage namespace.
        :param str object: The Object Storage object name.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "dataset_type", dataset_type)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "object", object)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The Object Storage bucket name.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="datasetType")
    def dataset_type(self) -> str:
        """
        The type of the data asset.
        """
        return pulumi.get(self, "dataset_type")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        The Object Storage namespace.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        The Object Storage object name.
        """
        return pulumi.get(self, "object")


@pulumi.output_type
class GetModelModelMetricResult(dict):
    def __init__(__self__, *,
                 final_accuracy: float,
                 final_loss: float,
                 model_metrics_type: str):
        """
        :param float final_accuracy: Fine-tuned model accuracy.
        :param float final_loss: Fine-tuned model loss.
        :param str model_metrics_type: The type of the model metrics. Each type of model can expect a different set of model metrics.
        """
        pulumi.set(__self__, "final_accuracy", final_accuracy)
        pulumi.set(__self__, "final_loss", final_loss)
        pulumi.set(__self__, "model_metrics_type", model_metrics_type)

    @property
    @pulumi.getter(name="finalAccuracy")
    def final_accuracy(self) -> float:
        """
        Fine-tuned model accuracy.
        """
        return pulumi.get(self, "final_accuracy")

    @property
    @pulumi.getter(name="finalLoss")
    def final_loss(self) -> float:
        """
        Fine-tuned model loss.
        """
        return pulumi.get(self, "final_loss")

    @property
    @pulumi.getter(name="modelMetricsType")
    def model_metrics_type(self) -> str:
        """
        The type of the model metrics. Each type of model can expect a different set of model metrics.
        """
        return pulumi.get(self, "model_metrics_type")


@pulumi.output_type
class GetModelsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetModelsModelCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetModelsModelCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetModelsModelCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetModelsModelCollectionItemResult(dict):
    def __init__(__self__, *,
                 base_model_id: str,
                 capabilities: Sequence[str],
                 compartment_id: str,
                 defined_tags: Mapping[str, str],
                 description: str,
                 display_name: str,
                 fine_tune_details: Sequence['outputs.GetModelsModelCollectionItemFineTuneDetailResult'],
                 freeform_tags: Mapping[str, str],
                 id: str,
                 is_long_term_supported: bool,
                 lifecycle_details: str,
                 model_metrics: Sequence['outputs.GetModelsModelCollectionItemModelMetricResult'],
                 state: str,
                 system_tags: Mapping[str, str],
                 time_created: str,
                 time_deprecated: str,
                 time_updated: str,
                 type: str,
                 vendor: str,
                 version: str):
        """
        :param str base_model_id: The OCID of the base model that's used for fine-tuning. For pretrained models, the value is null.
        :param Sequence[str] capabilities: Describes what this model can be used for.
        :param str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
        :param str description: An optional description of the model.
        :param str display_name: A filter to return only resources that match the given display name exactly.
        :param Sequence['GetModelsModelCollectionItemFineTuneDetailArgs'] fine_tune_details: Details about fine-tuning a custom model.
        :param Mapping[str, str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        :param str id: The ID of the model.
        :param bool is_long_term_supported: Whether a model is supported long-term. Only applicable to base models.
        :param str lifecycle_details: A message describing the current state of the model in more detail that can provide actionable information.
        :param Sequence['GetModelsModelCollectionItemModelMetricArgs'] model_metrics: Model metrics during the creation of a new model.
        :param str state: A filter to return only resources their lifecycleState matches the given lifecycleState.
        :param Mapping[str, str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace.  Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param str time_created: The date and time that the model was created in the format of an RFC3339 datetime string.
        :param str time_deprecated: Corresponds to the time when the custom model and its associated foundation model will be deprecated.
        :param str time_updated: The date and time that the model was updated in the format of an RFC3339 datetime string.
        :param str type: The model type indicating whether this is a pretrained/base model or a custom/fine-tuned model.
        :param str vendor: A filter to return only resources that match the entire vendor given.
        :param str version: The version of the model.
        """
        pulumi.set(__self__, "base_model_id", base_model_id)
        pulumi.set(__self__, "capabilities", capabilities)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "fine_tune_details", fine_tune_details)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_long_term_supported", is_long_term_supported)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "model_metrics", model_metrics)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_deprecated", time_deprecated)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vendor", vendor)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="baseModelId")
    def base_model_id(self) -> str:
        """
        The OCID of the base model that's used for fine-tuning. For pretrained models, the value is null.
        """
        return pulumi.get(self, "base_model_id")

    @property
    @pulumi.getter
    def capabilities(self) -> Sequence[str]:
        """
        Describes what this model can be used for.
        """
        return pulumi.get(self, "capabilities")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, str]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        An optional description of the model.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return only resources that match the given display name exactly.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="fineTuneDetails")
    def fine_tune_details(self) -> Sequence['outputs.GetModelsModelCollectionItemFineTuneDetailResult']:
        """
        Details about fine-tuning a custom model.
        """
        return pulumi.get(self, "fine_tune_details")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the model.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isLongTermSupported")
    def is_long_term_supported(self) -> bool:
        """
        Whether a model is supported long-term. Only applicable to base models.
        """
        return pulumi.get(self, "is_long_term_supported")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        A message describing the current state of the model in more detail that can provide actionable information.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="modelMetrics")
    def model_metrics(self) -> Sequence['outputs.GetModelsModelCollectionItemModelMetricResult']:
        """
        Model metrics during the creation of a new model.
        """
        return pulumi.get(self, "model_metrics")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to return only resources their lifecycleState matches the given lifecycleState.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace.  Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time that the model was created in the format of an RFC3339 datetime string.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeDeprecated")
    def time_deprecated(self) -> str:
        """
        Corresponds to the time when the custom model and its associated foundation model will be deprecated.
        """
        return pulumi.get(self, "time_deprecated")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The date and time that the model was updated in the format of an RFC3339 datetime string.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The model type indicating whether this is a pretrained/base model or a custom/fine-tuned model.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def vendor(self) -> str:
        """
        A filter to return only resources that match the entire vendor given.
        """
        return pulumi.get(self, "vendor")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the model.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetModelsModelCollectionItemFineTuneDetailResult(dict):
    def __init__(__self__, *,
                 dedicated_ai_cluster_id: str,
                 training_configs: Sequence['outputs.GetModelsModelCollectionItemFineTuneDetailTrainingConfigResult'],
                 training_datasets: Sequence['outputs.GetModelsModelCollectionItemFineTuneDetailTrainingDatasetResult']):
        """
        :param str dedicated_ai_cluster_id: The OCID of the dedicated AI cluster this fine-tuning runs on.
        :param Sequence['GetModelsModelCollectionItemFineTuneDetailTrainingConfigArgs'] training_configs: The fine-tuning method and hyperparameters used for fine-tuning a custom model.
        :param Sequence['GetModelsModelCollectionItemFineTuneDetailTrainingDatasetArgs'] training_datasets: The dataset used to fine-tune the model.
        """
        pulumi.set(__self__, "dedicated_ai_cluster_id", dedicated_ai_cluster_id)
        pulumi.set(__self__, "training_configs", training_configs)
        pulumi.set(__self__, "training_datasets", training_datasets)

    @property
    @pulumi.getter(name="dedicatedAiClusterId")
    def dedicated_ai_cluster_id(self) -> str:
        """
        The OCID of the dedicated AI cluster this fine-tuning runs on.
        """
        return pulumi.get(self, "dedicated_ai_cluster_id")

    @property
    @pulumi.getter(name="trainingConfigs")
    def training_configs(self) -> Sequence['outputs.GetModelsModelCollectionItemFineTuneDetailTrainingConfigResult']:
        """
        The fine-tuning method and hyperparameters used for fine-tuning a custom model.
        """
        return pulumi.get(self, "training_configs")

    @property
    @pulumi.getter(name="trainingDatasets")
    def training_datasets(self) -> Sequence['outputs.GetModelsModelCollectionItemFineTuneDetailTrainingDatasetResult']:
        """
        The dataset used to fine-tune the model.
        """
        return pulumi.get(self, "training_datasets")


@pulumi.output_type
class GetModelsModelCollectionItemFineTuneDetailTrainingConfigResult(dict):
    def __init__(__self__, *,
                 early_stopping_patience: int,
                 early_stopping_threshold: float,
                 learning_rate: float,
                 log_model_metrics_interval_in_steps: int,
                 lora_alpha: int,
                 lora_dropout: float,
                 lora_r: int,
                 num_of_last_layers: int,
                 total_training_epochs: int,
                 training_batch_size: int,
                 training_config_type: str):
        """
        :param int early_stopping_patience: Stop training if the loss metric does not improve beyond 'early_stopping_threshold' for this many times of evaluation.
        :param float early_stopping_threshold: How much the loss must improve to prevent early stopping.
        :param float learning_rate: The initial learning rate to be used during training
        :param int log_model_metrics_interval_in_steps: Determines how frequently to log model metrics.
        :param int lora_alpha: This parameter represents the scaling factor for the weight matrices in LoRA.
        :param float lora_dropout: This parameter indicates the dropout probability for LoRA layers.
        :param int lora_r: This parameter represents the LoRA rank of the update matrices.
        :param int num_of_last_layers: The number of last layers to be fine-tuned.
        :param int total_training_epochs: The maximum number of training epochs to run for.
        :param int training_batch_size: The batch size used during training.
        :param str training_config_type: The fine-tuning method for training a custom model.
        """
        pulumi.set(__self__, "early_stopping_patience", early_stopping_patience)
        pulumi.set(__self__, "early_stopping_threshold", early_stopping_threshold)
        pulumi.set(__self__, "learning_rate", learning_rate)
        pulumi.set(__self__, "log_model_metrics_interval_in_steps", log_model_metrics_interval_in_steps)
        pulumi.set(__self__, "lora_alpha", lora_alpha)
        pulumi.set(__self__, "lora_dropout", lora_dropout)
        pulumi.set(__self__, "lora_r", lora_r)
        pulumi.set(__self__, "num_of_last_layers", num_of_last_layers)
        pulumi.set(__self__, "total_training_epochs", total_training_epochs)
        pulumi.set(__self__, "training_batch_size", training_batch_size)
        pulumi.set(__self__, "training_config_type", training_config_type)

    @property
    @pulumi.getter(name="earlyStoppingPatience")
    def early_stopping_patience(self) -> int:
        """
        Stop training if the loss metric does not improve beyond 'early_stopping_threshold' for this many times of evaluation.
        """
        return pulumi.get(self, "early_stopping_patience")

    @property
    @pulumi.getter(name="earlyStoppingThreshold")
    def early_stopping_threshold(self) -> float:
        """
        How much the loss must improve to prevent early stopping.
        """
        return pulumi.get(self, "early_stopping_threshold")

    @property
    @pulumi.getter(name="learningRate")
    def learning_rate(self) -> float:
        """
        The initial learning rate to be used during training
        """
        return pulumi.get(self, "learning_rate")

    @property
    @pulumi.getter(name="logModelMetricsIntervalInSteps")
    def log_model_metrics_interval_in_steps(self) -> int:
        """
        Determines how frequently to log model metrics.
        """
        return pulumi.get(self, "log_model_metrics_interval_in_steps")

    @property
    @pulumi.getter(name="loraAlpha")
    def lora_alpha(self) -> int:
        """
        This parameter represents the scaling factor for the weight matrices in LoRA.
        """
        return pulumi.get(self, "lora_alpha")

    @property
    @pulumi.getter(name="loraDropout")
    def lora_dropout(self) -> float:
        """
        This parameter indicates the dropout probability for LoRA layers.
        """
        return pulumi.get(self, "lora_dropout")

    @property
    @pulumi.getter(name="loraR")
    def lora_r(self) -> int:
        """
        This parameter represents the LoRA rank of the update matrices.
        """
        return pulumi.get(self, "lora_r")

    @property
    @pulumi.getter(name="numOfLastLayers")
    def num_of_last_layers(self) -> int:
        """
        The number of last layers to be fine-tuned.
        """
        return pulumi.get(self, "num_of_last_layers")

    @property
    @pulumi.getter(name="totalTrainingEpochs")
    def total_training_epochs(self) -> int:
        """
        The maximum number of training epochs to run for.
        """
        return pulumi.get(self, "total_training_epochs")

    @property
    @pulumi.getter(name="trainingBatchSize")
    def training_batch_size(self) -> int:
        """
        The batch size used during training.
        """
        return pulumi.get(self, "training_batch_size")

    @property
    @pulumi.getter(name="trainingConfigType")
    def training_config_type(self) -> str:
        """
        The fine-tuning method for training a custom model.
        """
        return pulumi.get(self, "training_config_type")


@pulumi.output_type
class GetModelsModelCollectionItemFineTuneDetailTrainingDatasetResult(dict):
    def __init__(__self__, *,
                 bucket: str,
                 dataset_type: str,
                 namespace: str,
                 object: str):
        """
        :param str bucket: The Object Storage bucket name.
        :param str dataset_type: The type of the data asset.
        :param str namespace: The Object Storage namespace.
        :param str object: The Object Storage object name.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "dataset_type", dataset_type)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "object", object)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The Object Storage bucket name.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="datasetType")
    def dataset_type(self) -> str:
        """
        The type of the data asset.
        """
        return pulumi.get(self, "dataset_type")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        The Object Storage namespace.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        The Object Storage object name.
        """
        return pulumi.get(self, "object")


@pulumi.output_type
class GetModelsModelCollectionItemModelMetricResult(dict):
    def __init__(__self__, *,
                 final_accuracy: float,
                 final_loss: float,
                 model_metrics_type: str):
        """
        :param float final_accuracy: Fine-tuned model accuracy.
        :param float final_loss: Fine-tuned model loss.
        :param str model_metrics_type: The type of the model metrics. Each type of model can expect a different set of model metrics.
        """
        pulumi.set(__self__, "final_accuracy", final_accuracy)
        pulumi.set(__self__, "final_loss", final_loss)
        pulumi.set(__self__, "model_metrics_type", model_metrics_type)

    @property
    @pulumi.getter(name="finalAccuracy")
    def final_accuracy(self) -> float:
        """
        Fine-tuned model accuracy.
        """
        return pulumi.get(self, "final_accuracy")

    @property
    @pulumi.getter(name="finalLoss")
    def final_loss(self) -> float:
        """
        Fine-tuned model loss.
        """
        return pulumi.get(self, "final_loss")

    @property
    @pulumi.getter(name="modelMetricsType")
    def model_metrics_type(self) -> str:
        """
        The type of the model metrics. Each type of model can expect a different set of model metrics.
        """
        return pulumi.get(self, "model_metrics_type")


