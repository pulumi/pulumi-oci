# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetConnectionResult',
    'AwaitableGetConnectionResult',
    'get_connection',
    'get_connection_output',
]

@pulumi.output_type
class GetConnectionResult:
    """
    A collection of values returned by getConnection.
    """
    def __init__(__self__, access_key_id=None, account_key=None, account_key_secret_id=None, account_name=None, additional_attributes=None, authentication_mode=None, authentication_type=None, azure_authority_host=None, azure_tenant_id=None, bootstrap_servers=None, catalogs=None, client_id=None, client_secret=None, client_secret_secret_id=None, compartment_id=None, connection_factory=None, connection_id=None, connection_string=None, connection_type=None, connection_url=None, consumer_properties=None, core_site_xml=None, database_id=None, database_name=None, db_system_id=None, defined_tags=None, deployment_id=None, description=None, display_name=None, does_use_secret_ids=None, endpoint=None, fingerprint=None, freeform_tags=None, host=None, id=None, ingress_ips=None, is_lock_override=None, jndi_connection_factory=None, jndi_initial_context_factory=None, jndi_provider_url=None, jndi_security_credentials=None, jndi_security_credentials_secret_id=None, jndi_security_principal=None, key_id=None, key_store=None, key_store_password=None, key_store_password_secret_id=None, key_store_secret_id=None, lifecycle_details=None, locks=None, nsg_ids=None, password=None, password_secret_id=None, port=None, private_ip=None, private_key_file=None, private_key_file_secret_id=None, private_key_passphrase=None, private_key_passphrase_secret_id=None, producer_properties=None, public_key_fingerprint=None, redis_cluster_id=None, region=None, routing_method=None, sas_token=None, sas_token_secret_id=None, secret_access_key=None, secret_access_key_secret_id=None, security_protocol=None, servers=None, service_account_key_file=None, service_account_key_file_secret_id=None, session_mode=None, should_use_jndi=None, should_use_resource_principal=None, should_validate_server_certificate=None, ssl_ca=None, ssl_cert=None, ssl_client_keystash=None, ssl_client_keystash_secret_id=None, ssl_client_keystoredb=None, ssl_client_keystoredb_secret_id=None, ssl_crl=None, ssl_key=None, ssl_key_password=None, ssl_key_password_secret_id=None, ssl_key_secret_id=None, ssl_mode=None, ssl_server_certificate=None, state=None, storage_credential_name=None, storages=None, stream_pool_id=None, subnet_id=None, system_tags=None, technology_type=None, tenancy_id=None, tenant_id=None, time_created=None, time_updated=None, tls_ca_file=None, tls_certificate_key_file=None, tls_certificate_key_file_password=None, tls_certificate_key_file_password_secret_id=None, tls_certificate_key_file_secret_id=None, trigger_refresh=None, trust_store=None, trust_store_password=None, trust_store_password_secret_id=None, trust_store_secret_id=None, url=None, user_id=None, username=None, vault_id=None, wallet=None, wallet_secret_id=None):
        if access_key_id and not isinstance(access_key_id, str):
            raise TypeError("Expected argument 'access_key_id' to be a str")
        pulumi.set(__self__, "access_key_id", access_key_id)
        if account_key and not isinstance(account_key, str):
            raise TypeError("Expected argument 'account_key' to be a str")
        pulumi.set(__self__, "account_key", account_key)
        if account_key_secret_id and not isinstance(account_key_secret_id, str):
            raise TypeError("Expected argument 'account_key_secret_id' to be a str")
        pulumi.set(__self__, "account_key_secret_id", account_key_secret_id)
        if account_name and not isinstance(account_name, str):
            raise TypeError("Expected argument 'account_name' to be a str")
        pulumi.set(__self__, "account_name", account_name)
        if additional_attributes and not isinstance(additional_attributes, list):
            raise TypeError("Expected argument 'additional_attributes' to be a list")
        pulumi.set(__self__, "additional_attributes", additional_attributes)
        if authentication_mode and not isinstance(authentication_mode, str):
            raise TypeError("Expected argument 'authentication_mode' to be a str")
        pulumi.set(__self__, "authentication_mode", authentication_mode)
        if authentication_type and not isinstance(authentication_type, str):
            raise TypeError("Expected argument 'authentication_type' to be a str")
        pulumi.set(__self__, "authentication_type", authentication_type)
        if azure_authority_host and not isinstance(azure_authority_host, str):
            raise TypeError("Expected argument 'azure_authority_host' to be a str")
        pulumi.set(__self__, "azure_authority_host", azure_authority_host)
        if azure_tenant_id and not isinstance(azure_tenant_id, str):
            raise TypeError("Expected argument 'azure_tenant_id' to be a str")
        pulumi.set(__self__, "azure_tenant_id", azure_tenant_id)
        if bootstrap_servers and not isinstance(bootstrap_servers, list):
            raise TypeError("Expected argument 'bootstrap_servers' to be a list")
        pulumi.set(__self__, "bootstrap_servers", bootstrap_servers)
        if catalogs and not isinstance(catalogs, list):
            raise TypeError("Expected argument 'catalogs' to be a list")
        pulumi.set(__self__, "catalogs", catalogs)
        if client_id and not isinstance(client_id, str):
            raise TypeError("Expected argument 'client_id' to be a str")
        pulumi.set(__self__, "client_id", client_id)
        if client_secret and not isinstance(client_secret, str):
            raise TypeError("Expected argument 'client_secret' to be a str")
        pulumi.set(__self__, "client_secret", client_secret)
        if client_secret_secret_id and not isinstance(client_secret_secret_id, str):
            raise TypeError("Expected argument 'client_secret_secret_id' to be a str")
        pulumi.set(__self__, "client_secret_secret_id", client_secret_secret_id)
        if compartment_id and not isinstance(compartment_id, str):
            raise TypeError("Expected argument 'compartment_id' to be a str")
        pulumi.set(__self__, "compartment_id", compartment_id)
        if connection_factory and not isinstance(connection_factory, str):
            raise TypeError("Expected argument 'connection_factory' to be a str")
        pulumi.set(__self__, "connection_factory", connection_factory)
        if connection_id and not isinstance(connection_id, str):
            raise TypeError("Expected argument 'connection_id' to be a str")
        pulumi.set(__self__, "connection_id", connection_id)
        if connection_string and not isinstance(connection_string, str):
            raise TypeError("Expected argument 'connection_string' to be a str")
        pulumi.set(__self__, "connection_string", connection_string)
        if connection_type and not isinstance(connection_type, str):
            raise TypeError("Expected argument 'connection_type' to be a str")
        pulumi.set(__self__, "connection_type", connection_type)
        if connection_url and not isinstance(connection_url, str):
            raise TypeError("Expected argument 'connection_url' to be a str")
        pulumi.set(__self__, "connection_url", connection_url)
        if consumer_properties and not isinstance(consumer_properties, str):
            raise TypeError("Expected argument 'consumer_properties' to be a str")
        pulumi.set(__self__, "consumer_properties", consumer_properties)
        if core_site_xml and not isinstance(core_site_xml, str):
            raise TypeError("Expected argument 'core_site_xml' to be a str")
        pulumi.set(__self__, "core_site_xml", core_site_xml)
        if database_id and not isinstance(database_id, str):
            raise TypeError("Expected argument 'database_id' to be a str")
        pulumi.set(__self__, "database_id", database_id)
        if database_name and not isinstance(database_name, str):
            raise TypeError("Expected argument 'database_name' to be a str")
        pulumi.set(__self__, "database_name", database_name)
        if db_system_id and not isinstance(db_system_id, str):
            raise TypeError("Expected argument 'db_system_id' to be a str")
        pulumi.set(__self__, "db_system_id", db_system_id)
        if defined_tags and not isinstance(defined_tags, dict):
            raise TypeError("Expected argument 'defined_tags' to be a dict")
        pulumi.set(__self__, "defined_tags", defined_tags)
        if deployment_id and not isinstance(deployment_id, str):
            raise TypeError("Expected argument 'deployment_id' to be a str")
        pulumi.set(__self__, "deployment_id", deployment_id)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if does_use_secret_ids and not isinstance(does_use_secret_ids, bool):
            raise TypeError("Expected argument 'does_use_secret_ids' to be a bool")
        pulumi.set(__self__, "does_use_secret_ids", does_use_secret_ids)
        if endpoint and not isinstance(endpoint, str):
            raise TypeError("Expected argument 'endpoint' to be a str")
        pulumi.set(__self__, "endpoint", endpoint)
        if fingerprint and not isinstance(fingerprint, str):
            raise TypeError("Expected argument 'fingerprint' to be a str")
        pulumi.set(__self__, "fingerprint", fingerprint)
        if freeform_tags and not isinstance(freeform_tags, dict):
            raise TypeError("Expected argument 'freeform_tags' to be a dict")
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        if host and not isinstance(host, str):
            raise TypeError("Expected argument 'host' to be a str")
        pulumi.set(__self__, "host", host)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ingress_ips and not isinstance(ingress_ips, list):
            raise TypeError("Expected argument 'ingress_ips' to be a list")
        pulumi.set(__self__, "ingress_ips", ingress_ips)
        if is_lock_override and not isinstance(is_lock_override, bool):
            raise TypeError("Expected argument 'is_lock_override' to be a bool")
        pulumi.set(__self__, "is_lock_override", is_lock_override)
        if jndi_connection_factory and not isinstance(jndi_connection_factory, str):
            raise TypeError("Expected argument 'jndi_connection_factory' to be a str")
        pulumi.set(__self__, "jndi_connection_factory", jndi_connection_factory)
        if jndi_initial_context_factory and not isinstance(jndi_initial_context_factory, str):
            raise TypeError("Expected argument 'jndi_initial_context_factory' to be a str")
        pulumi.set(__self__, "jndi_initial_context_factory", jndi_initial_context_factory)
        if jndi_provider_url and not isinstance(jndi_provider_url, str):
            raise TypeError("Expected argument 'jndi_provider_url' to be a str")
        pulumi.set(__self__, "jndi_provider_url", jndi_provider_url)
        if jndi_security_credentials and not isinstance(jndi_security_credentials, str):
            raise TypeError("Expected argument 'jndi_security_credentials' to be a str")
        pulumi.set(__self__, "jndi_security_credentials", jndi_security_credentials)
        if jndi_security_credentials_secret_id and not isinstance(jndi_security_credentials_secret_id, str):
            raise TypeError("Expected argument 'jndi_security_credentials_secret_id' to be a str")
        pulumi.set(__self__, "jndi_security_credentials_secret_id", jndi_security_credentials_secret_id)
        if jndi_security_principal and not isinstance(jndi_security_principal, str):
            raise TypeError("Expected argument 'jndi_security_principal' to be a str")
        pulumi.set(__self__, "jndi_security_principal", jndi_security_principal)
        if key_id and not isinstance(key_id, str):
            raise TypeError("Expected argument 'key_id' to be a str")
        pulumi.set(__self__, "key_id", key_id)
        if key_store and not isinstance(key_store, str):
            raise TypeError("Expected argument 'key_store' to be a str")
        pulumi.set(__self__, "key_store", key_store)
        if key_store_password and not isinstance(key_store_password, str):
            raise TypeError("Expected argument 'key_store_password' to be a str")
        pulumi.set(__self__, "key_store_password", key_store_password)
        if key_store_password_secret_id and not isinstance(key_store_password_secret_id, str):
            raise TypeError("Expected argument 'key_store_password_secret_id' to be a str")
        pulumi.set(__self__, "key_store_password_secret_id", key_store_password_secret_id)
        if key_store_secret_id and not isinstance(key_store_secret_id, str):
            raise TypeError("Expected argument 'key_store_secret_id' to be a str")
        pulumi.set(__self__, "key_store_secret_id", key_store_secret_id)
        if lifecycle_details and not isinstance(lifecycle_details, str):
            raise TypeError("Expected argument 'lifecycle_details' to be a str")
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if locks and not isinstance(locks, list):
            raise TypeError("Expected argument 'locks' to be a list")
        pulumi.set(__self__, "locks", locks)
        if nsg_ids and not isinstance(nsg_ids, list):
            raise TypeError("Expected argument 'nsg_ids' to be a list")
        pulumi.set(__self__, "nsg_ids", nsg_ids)
        if password and not isinstance(password, str):
            raise TypeError("Expected argument 'password' to be a str")
        pulumi.set(__self__, "password", password)
        if password_secret_id and not isinstance(password_secret_id, str):
            raise TypeError("Expected argument 'password_secret_id' to be a str")
        pulumi.set(__self__, "password_secret_id", password_secret_id)
        if port and not isinstance(port, int):
            raise TypeError("Expected argument 'port' to be a int")
        pulumi.set(__self__, "port", port)
        if private_ip and not isinstance(private_ip, str):
            raise TypeError("Expected argument 'private_ip' to be a str")
        pulumi.set(__self__, "private_ip", private_ip)
        if private_key_file and not isinstance(private_key_file, str):
            raise TypeError("Expected argument 'private_key_file' to be a str")
        pulumi.set(__self__, "private_key_file", private_key_file)
        if private_key_file_secret_id and not isinstance(private_key_file_secret_id, str):
            raise TypeError("Expected argument 'private_key_file_secret_id' to be a str")
        pulumi.set(__self__, "private_key_file_secret_id", private_key_file_secret_id)
        if private_key_passphrase and not isinstance(private_key_passphrase, str):
            raise TypeError("Expected argument 'private_key_passphrase' to be a str")
        pulumi.set(__self__, "private_key_passphrase", private_key_passphrase)
        if private_key_passphrase_secret_id and not isinstance(private_key_passphrase_secret_id, str):
            raise TypeError("Expected argument 'private_key_passphrase_secret_id' to be a str")
        pulumi.set(__self__, "private_key_passphrase_secret_id", private_key_passphrase_secret_id)
        if producer_properties and not isinstance(producer_properties, str):
            raise TypeError("Expected argument 'producer_properties' to be a str")
        pulumi.set(__self__, "producer_properties", producer_properties)
        if public_key_fingerprint and not isinstance(public_key_fingerprint, str):
            raise TypeError("Expected argument 'public_key_fingerprint' to be a str")
        pulumi.set(__self__, "public_key_fingerprint", public_key_fingerprint)
        if redis_cluster_id and not isinstance(redis_cluster_id, str):
            raise TypeError("Expected argument 'redis_cluster_id' to be a str")
        pulumi.set(__self__, "redis_cluster_id", redis_cluster_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if routing_method and not isinstance(routing_method, str):
            raise TypeError("Expected argument 'routing_method' to be a str")
        pulumi.set(__self__, "routing_method", routing_method)
        if sas_token and not isinstance(sas_token, str):
            raise TypeError("Expected argument 'sas_token' to be a str")
        pulumi.set(__self__, "sas_token", sas_token)
        if sas_token_secret_id and not isinstance(sas_token_secret_id, str):
            raise TypeError("Expected argument 'sas_token_secret_id' to be a str")
        pulumi.set(__self__, "sas_token_secret_id", sas_token_secret_id)
        if secret_access_key and not isinstance(secret_access_key, str):
            raise TypeError("Expected argument 'secret_access_key' to be a str")
        pulumi.set(__self__, "secret_access_key", secret_access_key)
        if secret_access_key_secret_id and not isinstance(secret_access_key_secret_id, str):
            raise TypeError("Expected argument 'secret_access_key_secret_id' to be a str")
        pulumi.set(__self__, "secret_access_key_secret_id", secret_access_key_secret_id)
        if security_protocol and not isinstance(security_protocol, str):
            raise TypeError("Expected argument 'security_protocol' to be a str")
        pulumi.set(__self__, "security_protocol", security_protocol)
        if servers and not isinstance(servers, str):
            raise TypeError("Expected argument 'servers' to be a str")
        pulumi.set(__self__, "servers", servers)
        if service_account_key_file and not isinstance(service_account_key_file, str):
            raise TypeError("Expected argument 'service_account_key_file' to be a str")
        pulumi.set(__self__, "service_account_key_file", service_account_key_file)
        if service_account_key_file_secret_id and not isinstance(service_account_key_file_secret_id, str):
            raise TypeError("Expected argument 'service_account_key_file_secret_id' to be a str")
        pulumi.set(__self__, "service_account_key_file_secret_id", service_account_key_file_secret_id)
        if session_mode and not isinstance(session_mode, str):
            raise TypeError("Expected argument 'session_mode' to be a str")
        pulumi.set(__self__, "session_mode", session_mode)
        if should_use_jndi and not isinstance(should_use_jndi, bool):
            raise TypeError("Expected argument 'should_use_jndi' to be a bool")
        pulumi.set(__self__, "should_use_jndi", should_use_jndi)
        if should_use_resource_principal and not isinstance(should_use_resource_principal, bool):
            raise TypeError("Expected argument 'should_use_resource_principal' to be a bool")
        pulumi.set(__self__, "should_use_resource_principal", should_use_resource_principal)
        if should_validate_server_certificate and not isinstance(should_validate_server_certificate, bool):
            raise TypeError("Expected argument 'should_validate_server_certificate' to be a bool")
        pulumi.set(__self__, "should_validate_server_certificate", should_validate_server_certificate)
        if ssl_ca and not isinstance(ssl_ca, str):
            raise TypeError("Expected argument 'ssl_ca' to be a str")
        pulumi.set(__self__, "ssl_ca", ssl_ca)
        if ssl_cert and not isinstance(ssl_cert, str):
            raise TypeError("Expected argument 'ssl_cert' to be a str")
        pulumi.set(__self__, "ssl_cert", ssl_cert)
        if ssl_client_keystash and not isinstance(ssl_client_keystash, str):
            raise TypeError("Expected argument 'ssl_client_keystash' to be a str")
        pulumi.set(__self__, "ssl_client_keystash", ssl_client_keystash)
        if ssl_client_keystash_secret_id and not isinstance(ssl_client_keystash_secret_id, str):
            raise TypeError("Expected argument 'ssl_client_keystash_secret_id' to be a str")
        pulumi.set(__self__, "ssl_client_keystash_secret_id", ssl_client_keystash_secret_id)
        if ssl_client_keystoredb and not isinstance(ssl_client_keystoredb, str):
            raise TypeError("Expected argument 'ssl_client_keystoredb' to be a str")
        pulumi.set(__self__, "ssl_client_keystoredb", ssl_client_keystoredb)
        if ssl_client_keystoredb_secret_id and not isinstance(ssl_client_keystoredb_secret_id, str):
            raise TypeError("Expected argument 'ssl_client_keystoredb_secret_id' to be a str")
        pulumi.set(__self__, "ssl_client_keystoredb_secret_id", ssl_client_keystoredb_secret_id)
        if ssl_crl and not isinstance(ssl_crl, str):
            raise TypeError("Expected argument 'ssl_crl' to be a str")
        pulumi.set(__self__, "ssl_crl", ssl_crl)
        if ssl_key and not isinstance(ssl_key, str):
            raise TypeError("Expected argument 'ssl_key' to be a str")
        pulumi.set(__self__, "ssl_key", ssl_key)
        if ssl_key_password and not isinstance(ssl_key_password, str):
            raise TypeError("Expected argument 'ssl_key_password' to be a str")
        pulumi.set(__self__, "ssl_key_password", ssl_key_password)
        if ssl_key_password_secret_id and not isinstance(ssl_key_password_secret_id, str):
            raise TypeError("Expected argument 'ssl_key_password_secret_id' to be a str")
        pulumi.set(__self__, "ssl_key_password_secret_id", ssl_key_password_secret_id)
        if ssl_key_secret_id and not isinstance(ssl_key_secret_id, str):
            raise TypeError("Expected argument 'ssl_key_secret_id' to be a str")
        pulumi.set(__self__, "ssl_key_secret_id", ssl_key_secret_id)
        if ssl_mode and not isinstance(ssl_mode, str):
            raise TypeError("Expected argument 'ssl_mode' to be a str")
        pulumi.set(__self__, "ssl_mode", ssl_mode)
        if ssl_server_certificate and not isinstance(ssl_server_certificate, str):
            raise TypeError("Expected argument 'ssl_server_certificate' to be a str")
        pulumi.set(__self__, "ssl_server_certificate", ssl_server_certificate)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if storage_credential_name and not isinstance(storage_credential_name, str):
            raise TypeError("Expected argument 'storage_credential_name' to be a str")
        pulumi.set(__self__, "storage_credential_name", storage_credential_name)
        if storages and not isinstance(storages, list):
            raise TypeError("Expected argument 'storages' to be a list")
        pulumi.set(__self__, "storages", storages)
        if stream_pool_id and not isinstance(stream_pool_id, str):
            raise TypeError("Expected argument 'stream_pool_id' to be a str")
        pulumi.set(__self__, "stream_pool_id", stream_pool_id)
        if subnet_id and not isinstance(subnet_id, str):
            raise TypeError("Expected argument 'subnet_id' to be a str")
        pulumi.set(__self__, "subnet_id", subnet_id)
        if system_tags and not isinstance(system_tags, dict):
            raise TypeError("Expected argument 'system_tags' to be a dict")
        pulumi.set(__self__, "system_tags", system_tags)
        if technology_type and not isinstance(technology_type, str):
            raise TypeError("Expected argument 'technology_type' to be a str")
        pulumi.set(__self__, "technology_type", technology_type)
        if tenancy_id and not isinstance(tenancy_id, str):
            raise TypeError("Expected argument 'tenancy_id' to be a str")
        pulumi.set(__self__, "tenancy_id", tenancy_id)
        if tenant_id and not isinstance(tenant_id, str):
            raise TypeError("Expected argument 'tenant_id' to be a str")
        pulumi.set(__self__, "tenant_id", tenant_id)
        if time_created and not isinstance(time_created, str):
            raise TypeError("Expected argument 'time_created' to be a str")
        pulumi.set(__self__, "time_created", time_created)
        if time_updated and not isinstance(time_updated, str):
            raise TypeError("Expected argument 'time_updated' to be a str")
        pulumi.set(__self__, "time_updated", time_updated)
        if tls_ca_file and not isinstance(tls_ca_file, str):
            raise TypeError("Expected argument 'tls_ca_file' to be a str")
        pulumi.set(__self__, "tls_ca_file", tls_ca_file)
        if tls_certificate_key_file and not isinstance(tls_certificate_key_file, str):
            raise TypeError("Expected argument 'tls_certificate_key_file' to be a str")
        pulumi.set(__self__, "tls_certificate_key_file", tls_certificate_key_file)
        if tls_certificate_key_file_password and not isinstance(tls_certificate_key_file_password, str):
            raise TypeError("Expected argument 'tls_certificate_key_file_password' to be a str")
        pulumi.set(__self__, "tls_certificate_key_file_password", tls_certificate_key_file_password)
        if tls_certificate_key_file_password_secret_id and not isinstance(tls_certificate_key_file_password_secret_id, str):
            raise TypeError("Expected argument 'tls_certificate_key_file_password_secret_id' to be a str")
        pulumi.set(__self__, "tls_certificate_key_file_password_secret_id", tls_certificate_key_file_password_secret_id)
        if tls_certificate_key_file_secret_id and not isinstance(tls_certificate_key_file_secret_id, str):
            raise TypeError("Expected argument 'tls_certificate_key_file_secret_id' to be a str")
        pulumi.set(__self__, "tls_certificate_key_file_secret_id", tls_certificate_key_file_secret_id)
        if trigger_refresh and not isinstance(trigger_refresh, bool):
            raise TypeError("Expected argument 'trigger_refresh' to be a bool")
        pulumi.set(__self__, "trigger_refresh", trigger_refresh)
        if trust_store and not isinstance(trust_store, str):
            raise TypeError("Expected argument 'trust_store' to be a str")
        pulumi.set(__self__, "trust_store", trust_store)
        if trust_store_password and not isinstance(trust_store_password, str):
            raise TypeError("Expected argument 'trust_store_password' to be a str")
        pulumi.set(__self__, "trust_store_password", trust_store_password)
        if trust_store_password_secret_id and not isinstance(trust_store_password_secret_id, str):
            raise TypeError("Expected argument 'trust_store_password_secret_id' to be a str")
        pulumi.set(__self__, "trust_store_password_secret_id", trust_store_password_secret_id)
        if trust_store_secret_id and not isinstance(trust_store_secret_id, str):
            raise TypeError("Expected argument 'trust_store_secret_id' to be a str")
        pulumi.set(__self__, "trust_store_secret_id", trust_store_secret_id)
        if url and not isinstance(url, str):
            raise TypeError("Expected argument 'url' to be a str")
        pulumi.set(__self__, "url", url)
        if user_id and not isinstance(user_id, str):
            raise TypeError("Expected argument 'user_id' to be a str")
        pulumi.set(__self__, "user_id", user_id)
        if username and not isinstance(username, str):
            raise TypeError("Expected argument 'username' to be a str")
        pulumi.set(__self__, "username", username)
        if vault_id and not isinstance(vault_id, str):
            raise TypeError("Expected argument 'vault_id' to be a str")
        pulumi.set(__self__, "vault_id", vault_id)
        if wallet and not isinstance(wallet, str):
            raise TypeError("Expected argument 'wallet' to be a str")
        pulumi.set(__self__, "wallet", wallet)
        if wallet_secret_id and not isinstance(wallet_secret_id, str):
            raise TypeError("Expected argument 'wallet_secret_id' to be a str")
        pulumi.set(__self__, "wallet_secret_id", wallet_secret_id)

    @_builtins.property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> _builtins.str:
        """
        Access key ID to access the Amazon S3 bucket.
        """
        return pulumi.get(self, "access_key_id")

    @_builtins.property
    @pulumi.getter(name="accountKey")
    def account_key(self) -> _builtins.str:
        return pulumi.get(self, "account_key")

    @_builtins.property
    @pulumi.getter(name="accountKeySecretId")
    def account_key_secret_id(self) -> _builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the account key is stored.
        """
        return pulumi.get(self, "account_key_secret_id")

    @_builtins.property
    @pulumi.getter(name="accountName")
    def account_name(self) -> _builtins.str:
        """
        Sets the Azure storage account name.
        """
        return pulumi.get(self, "account_name")

    @_builtins.property
    @pulumi.getter(name="additionalAttributes")
    def additional_attributes(self) -> Sequence['outputs.GetConnectionAdditionalAttributeResult']:
        """
        An array of name-value pair attribute entries. Used as additional parameters in connection string.
        """
        return pulumi.get(self, "additional_attributes")

    @_builtins.property
    @pulumi.getter(name="authenticationMode")
    def authentication_mode(self) -> _builtins.str:
        """
        Authentication mode. It can be provided at creation of Oracle Autonomous Database Serverless connections, when a databaseId is provided. The default value is MTLS.
        """
        return pulumi.get(self, "authentication_mode")

    @_builtins.property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> _builtins.str:
        """
        Used authentication mechanism to be provided for the following connection types:
        * AZURE_DATA_LAKE_STORAGE, ELASTICSEARCH, KAFKA_SCHEMA_REGISTRY, REDIS, SNOWFLAKE
        * JAVA_MESSAGE_SERVICE - If not provided, default is NONE. Optional until 2024-06-27, in the release after it will be made required.
        * DATABRICKS - Required fields by authentication types:
        * PERSONAL_ACCESS_TOKEN: username is always 'token', user must enter password
        * OAUTH_M2M: user must enter clientId and clientSecret
        """
        return pulumi.get(self, "authentication_type")

    @_builtins.property
    @pulumi.getter(name="azureAuthorityHost")
    def azure_authority_host(self) -> _builtins.str:
        """
        The endpoint used for authentication with Microsoft Entra ID (formerly Azure Active Directory). Default value: https://login.microsoftonline.com When connecting to a non-public Azure Cloud, the endpoint must be provided, eg:
        * Azure China: https://login.chinacloudapi.cn/
        * Azure US Government: https://login.microsoftonline.us/
        """
        return pulumi.get(self, "azure_authority_host")

    @_builtins.property
    @pulumi.getter(name="azureTenantId")
    def azure_tenant_id(self) -> _builtins.str:
        """
        Azure tenant ID of the application. This property is required when 'authenticationType' is set to 'AZURE_ACTIVE_DIRECTORY'. e.g.: 14593954-d337-4a61-a364-9f758c64f97f
        """
        return pulumi.get(self, "azure_tenant_id")

    @_builtins.property
    @pulumi.getter(name="bootstrapServers")
    def bootstrap_servers(self) -> Sequence['outputs.GetConnectionBootstrapServerResult']:
        """
        Kafka bootstrap. Equivalent of bootstrap.servers configuration property in Kafka: list of KafkaBootstrapServer objects specified by host/port. Used for establishing the initial connection to the Kafka cluster. Example: `"server1.example.com:9092,server2.example.com:9092"`
        """
        return pulumi.get(self, "bootstrap_servers")

    @_builtins.property
    @pulumi.getter
    def catalogs(self) -> Sequence['outputs.GetConnectionCatalogResult']:
        """
        Represents the catalog of given type used in an Iceberg connection.
        """
        return pulumi.get(self, "catalogs")

    @_builtins.property
    @pulumi.getter(name="clientId")
    def client_id(self) -> _builtins.str:
        """
        Azure client ID of the application. This property is required when 'authenticationType' is set to 'AZURE_ACTIVE_DIRECTORY'. e.g.: 06ecaabf-8b80-4ec8-a0ec-20cbf463703d
        """
        return pulumi.get(self, "client_id")

    @_builtins.property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> _builtins.str:
        return pulumi.get(self, "client_secret")

    @_builtins.property
    @pulumi.getter(name="clientSecretSecretId")
    def client_secret_secret_id(self) -> _builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the client secret is stored. Note: When provided, 'clientSecret' field must not be provided.
        """
        return pulumi.get(self, "client_secret_secret_id")

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment being referenced.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter(name="connectionFactory")
    def connection_factory(self) -> _builtins.str:
        """
        The of Java class implementing javax.jms.ConnectionFactory interface supplied by the Java Message Service provider. e.g.: 'com.stc.jmsjca.core.JConnectionFactoryXA'
        """
        return pulumi.get(self, "connection_factory")

    @_builtins.property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> _builtins.str:
        return pulumi.get(self, "connection_id")

    @_builtins.property
    @pulumi.getter(name="connectionString")
    def connection_string(self) -> _builtins.str:
        """
        * ORACLE: Connect descriptor or Easy Connect Naming method used to connect to a database.
        * MONGODB: MongoDB connection string. e.g.: 'mongodb://mongodb0.example.com:27017/recordsrecords'
        * AZURE_SYNAPSE_ANALYTICS: JDBC connection string. e.g.: 'jdbc:sqlserver://<synapse-workspace>.sql.azuresynapse.net:1433;database=<db-name>;encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.sql.azuresynapse.net;loginTimeout=300;'
        """
        return pulumi.get(self, "connection_string")

    @_builtins.property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> _builtins.str:
        """
        The connection type.
        """
        return pulumi.get(self, "connection_type")

    @_builtins.property
    @pulumi.getter(name="connectionUrl")
    def connection_url(self) -> _builtins.str:
        """
        * JAVA_MESSAGE_SERVICE: Connection URL of the Java Message Service, specifying the protocol, host, and port. e.g.: 'mq://myjms.host.domain:7676'
        * SNOWFLAKE: JDBC connection URL. e.g.: 'jdbc:snowflake://<account_name>.snowflakecomputing.com/?warehouse=<warehouse-name>&db=<db-name>'
        * AMAZON_REDSHIFT: Connection URL. e.g.: 'jdbc:redshift://aws-redshift-instance.aaaaaaaaaaaa.us-east-2.redshift.amazonaws.com:5439/mydb'
        * DATABRICKS: Connection URL. e.g.: 'jdbc:databricks://adb-33934.4.azuredatabricks.net:443/default;transportMode=http;ssl=1;httpPath=sql/protocolv1/o/3393########44/0##3-7-hlrb'
        """
        return pulumi.get(self, "connection_url")

    @_builtins.property
    @pulumi.getter(name="consumerProperties")
    def consumer_properties(self) -> _builtins.str:
        """
        The base64 encoded content of the consumer.properties file.
        """
        return pulumi.get(self, "consumer_properties")

    @_builtins.property
    @pulumi.getter(name="coreSiteXml")
    def core_site_xml(self) -> _builtins.str:
        """
        The base64 encoded content of the Hadoop Distributed File System configuration file (core-site.xml). It is not included in GET responses if the `view=COMPACT` query parameter is specified.
        """
        return pulumi.get(self, "core_site_xml")

    @_builtins.property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> _builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database being referenced.
        """
        return pulumi.get(self, "database_id")

    @_builtins.property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> _builtins.str:
        """
        The name of the database.
        """
        return pulumi.get(self, "database_name")

    @_builtins.property
    @pulumi.getter(name="dbSystemId")
    def db_system_id(self) -> _builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database system being referenced.
        """
        return pulumi.get(self, "db_system_id")

    @_builtins.property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, _builtins.str]:
        """
        Tags defined for this resource. Each key is predefined and scoped to a namespace.  Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @_builtins.property
    @pulumi.getter(name="deploymentId")
    def deployment_id(self) -> _builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the deployment being referenced.
        """
        return pulumi.get(self, "deployment_id")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Metadata about this specific object.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        An object's Display Name.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="doesUseSecretIds")
    def does_use_secret_ids(self) -> _builtins.bool:
        """
        Indicates that sensitive attributes are provided via Secrets.
        """
        return pulumi.get(self, "does_use_secret_ids")

    @_builtins.property
    @pulumi.getter
    def endpoint(self) -> _builtins.str:
        """
        The Azure Blob Storage endpoint where Iceberg data is stored. e.g.: 'https://my-azure-storage-account.blob.core.windows.net'
        """
        return pulumi.get(self, "endpoint")

    @_builtins.property
    @pulumi.getter
    def fingerprint(self) -> _builtins.str:
        """
        Fingerprint required by TLS security protocol. Eg.: '6152b2dfbff200f973c5074a5b91d06ab3b472c07c09a1ea57bb7fd406cdce9c'
        """
        return pulumi.get(self, "fingerprint")

    @_builtins.property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, _builtins.str]:
        """
        A simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only.  Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @_builtins.property
    @pulumi.getter
    def host(self) -> _builtins.str:
        """
        The name or address of a host.
        In case of Generic connection type it represents the Host and port separated by colon. Example: `"server.example.com:1234"`
        For multiple hosts, provide a comma separated list. Example: `"server1.example.com:1000,server1.example.com:2000"`
        """
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the connection being referenced.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ingressIps")
    def ingress_ips(self) -> Sequence['outputs.GetConnectionIngressIpResult']:
        """
        List of ingress IP addresses from where the GoldenGate deployment connects to this connection's privateIp.  Customers may optionally set up ingress security rules to restrict traffic from these IP addresses.
        """
        return pulumi.get(self, "ingress_ips")

    @_builtins.property
    @pulumi.getter(name="isLockOverride")
    def is_lock_override(self) -> _builtins.bool:
        return pulumi.get(self, "is_lock_override")

    @_builtins.property
    @pulumi.getter(name="jndiConnectionFactory")
    def jndi_connection_factory(self) -> _builtins.str:
        """
        The Connection Factory can be looked up using this name. e.g.: 'ConnectionFactory'
        """
        return pulumi.get(self, "jndi_connection_factory")

    @_builtins.property
    @pulumi.getter(name="jndiInitialContextFactory")
    def jndi_initial_context_factory(self) -> _builtins.str:
        """
        The implementation of javax.naming.spi.InitialContextFactory interface that the client uses to obtain initial naming context. e.g.: 'org.apache.activemq.jndi.ActiveMQInitialContextFactory'
        """
        return pulumi.get(self, "jndi_initial_context_factory")

    @_builtins.property
    @pulumi.getter(name="jndiProviderUrl")
    def jndi_provider_url(self) -> _builtins.str:
        """
        The URL that Java Message Service will use to contact the JNDI provider. e.g.: 'tcp://myjms.host.domain:61616?jms.prefetchPolicy.all=1000'
        """
        return pulumi.get(self, "jndi_provider_url")

    @_builtins.property
    @pulumi.getter(name="jndiSecurityCredentials")
    def jndi_security_credentials(self) -> _builtins.str:
        return pulumi.get(self, "jndi_security_credentials")

    @_builtins.property
    @pulumi.getter(name="jndiSecurityCredentialsSecretId")
    def jndi_security_credentials_secret_id(self) -> _builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the security credentials are stored associated to the principal. Note: When provided, 'jndiSecurityCredentials' field must not be provided.
        """
        return pulumi.get(self, "jndi_security_credentials_secret_id")

    @_builtins.property
    @pulumi.getter(name="jndiSecurityPrincipal")
    def jndi_security_principal(self) -> _builtins.str:
        """
        Specifies the identity of the principal (user) to be authenticated. e.g.: 'admin2'
        """
        return pulumi.get(self, "jndi_security_principal")

    @_builtins.property
    @pulumi.getter(name="keyId")
    def key_id(self) -> _builtins.str:
        """
        Refers to the customer's master key OCID.  If provided, it references a key to manage secrets. Customers must add policies to permit GoldenGate to use this key.
        """
        return pulumi.get(self, "key_id")

    @_builtins.property
    @pulumi.getter(name="keyStore")
    def key_store(self) -> _builtins.str:
        return pulumi.get(self, "key_store")

    @_builtins.property
    @pulumi.getter(name="keyStorePassword")
    def key_store_password(self) -> _builtins.str:
        return pulumi.get(self, "key_store_password")

    @_builtins.property
    @pulumi.getter(name="keyStorePasswordSecretId")
    def key_store_password_secret_id(self) -> _builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the kafka Ssl KeyStore password is stored. Note: When provided, 'keyStorePassword' field must not be provided.
        """
        return pulumi.get(self, "key_store_password_secret_id")

    @_builtins.property
    @pulumi.getter(name="keyStoreSecretId")
    def key_store_secret_id(self) -> _builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the content of the KeyStore file is stored. Note: When provided, 'keyStore' field must not be provided.
        """
        return pulumi.get(self, "key_store_secret_id")

    @_builtins.property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> _builtins.str:
        """
        Describes the object's current state in detail. For example, it can be used to provide actionable information for a resource in a Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @_builtins.property
    @pulumi.getter
    def locks(self) -> Sequence['outputs.GetConnectionLockResult']:
        """
        Locks associated with this resource.
        """
        return pulumi.get(self, "locks")

    @_builtins.property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Sequence[_builtins.str]:
        """
        An array of Network Security Group OCIDs used to define network access for either Deployments or Connections.
        """
        return pulumi.get(self, "nsg_ids")

    @_builtins.property
    @pulumi.getter
    def password(self) -> _builtins.str:
        return pulumi.get(self, "password")

    @_builtins.property
    @pulumi.getter(name="passwordSecretId")
    def password_secret_id(self) -> _builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the password is stored. The password Oracle GoldenGate uses to connect the associated system of the given technology. It must conform to the specific security requirements including length, case sensitivity, and so on. Note: When provided, 'password' field must not be provided.
        """
        return pulumi.get(self, "password_secret_id")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.int:
        """
        The port of an endpoint usually specified for a connection.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> _builtins.str:
        """
        Deprecated: this field will be removed in future versions. Either specify the private IP in the connectionString or host  field, or make sure the host name is resolvable in the target VCN.
        The private IP address of the connection's endpoint in the customer's VCN, typically a database endpoint or a big data endpoint (e.g. Kafka bootstrap server). In case the privateIp is provided, the subnetId must also be provided. In case the privateIp (and the subnetId) is not provided it is assumed the datasource is publicly accessible. In case the connection is accessible only privately, the lack of privateIp will result in not being able to access the connection.
        """
        return pulumi.get(self, "private_ip")

    @_builtins.property
    @pulumi.getter(name="privateKeyFile")
    def private_key_file(self) -> _builtins.str:
        return pulumi.get(self, "private_key_file")

    @_builtins.property
    @pulumi.getter(name="privateKeyFileSecretId")
    def private_key_file_secret_id(self) -> _builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret that stores the content of the private key file (PEM file) corresponding to the API key of the fingerprint. See documentation: https://docs.oracle.com/en-us/iaas/Content/Identity/Tasks/managingcredentials.htm Note: When provided, 'privateKeyFile' field must not be provided.
        """
        return pulumi.get(self, "private_key_file_secret_id")

    @_builtins.property
    @pulumi.getter(name="privateKeyPassphrase")
    def private_key_passphrase(self) -> _builtins.str:
        return pulumi.get(self, "private_key_passphrase")

    @_builtins.property
    @pulumi.getter(name="privateKeyPassphraseSecretId")
    def private_key_passphrase_secret_id(self) -> _builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret that stores the password for the private key file. Note: When provided, 'privateKeyPassphrase' field must not be provided.
        """
        return pulumi.get(self, "private_key_passphrase_secret_id")

    @_builtins.property
    @pulumi.getter(name="producerProperties")
    def producer_properties(self) -> _builtins.str:
        """
        The base64 encoded content of the producer.properties file.
        """
        return pulumi.get(self, "producer_properties")

    @_builtins.property
    @pulumi.getter(name="publicKeyFingerprint")
    def public_key_fingerprint(self) -> _builtins.str:
        """
        The fingerprint of the API Key of the user specified by the userId. See documentation: https://docs.oracle.com/en-us/iaas/Content/Identity/Tasks/managingcredentials.htm
        """
        return pulumi.get(self, "public_key_fingerprint")

    @_builtins.property
    @pulumi.getter(name="redisClusterId")
    def redis_cluster_id(self) -> _builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Redis cluster.
        """
        return pulumi.get(self, "redis_cluster_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        """
        The AMAZON region where the S3 bucket is hosted. e.g.: 'us-east-2'
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="routingMethod")
    def routing_method(self) -> _builtins.str:
        """
        Controls the network traffic direction to the target: SHARED_SERVICE_ENDPOINT: Traffic flows through the Goldengate Service's network to public hosts. Cannot be used for private targets.  SHARED_DEPLOYMENT_ENDPOINT: Network traffic flows from the assigned deployment's private endpoint through the deployment's subnet. DEDICATED_ENDPOINT: A dedicated private endpoint is created in the target VCN subnet for the connection. The subnetId is required when DEDICATED_ENDPOINT networking is selected.
        """
        return pulumi.get(self, "routing_method")

    @_builtins.property
    @pulumi.getter(name="sasToken")
    def sas_token(self) -> _builtins.str:
        return pulumi.get(self, "sas_token")

    @_builtins.property
    @pulumi.getter(name="sasTokenSecretId")
    def sas_token_secret_id(self) -> _builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the sas token is stored. Note: When provided, 'sasToken' field must not be provided.
        """
        return pulumi.get(self, "sas_token_secret_id")

    @_builtins.property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> _builtins.str:
        return pulumi.get(self, "secret_access_key")

    @_builtins.property
    @pulumi.getter(name="secretAccessKeySecretId")
    def secret_access_key_secret_id(self) -> _builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the Secret Access Key is stored.
        """
        return pulumi.get(self, "secret_access_key_secret_id")

    @_builtins.property
    @pulumi.getter(name="securityProtocol")
    def security_protocol(self) -> _builtins.str:
        """
        Security Protocol to be provided for the following connection types:
        * DB2, ELASTICSEARCH, KAFKA, MICROSOFT_SQLSERVER, MYSQL, POSTGRESQL, REDIS
        * JAVA_MESSAGE_SERVICE - If not provided, default is PLAIN. Optional until 2024-06-27, in the release after it will be made required.
        """
        return pulumi.get(self, "security_protocol")

    @_builtins.property
    @pulumi.getter
    def servers(self) -> _builtins.str:
        """
        Comma separated list of server addresses, specified as host:port entries, where :port is optional. Example: `"server1.example.com:4000,server2.example.com:4000"`
        If port is not specified, a default value is set, in case of ELASTICSEARCH: 9200, for REDIS 6379.
        """
        return pulumi.get(self, "servers")

    @_builtins.property
    @pulumi.getter(name="serviceAccountKeyFile")
    def service_account_key_file(self) -> _builtins.str:
        return pulumi.get(self, "service_account_key_file")

    @_builtins.property
    @pulumi.getter(name="serviceAccountKeyFileSecretId")
    def service_account_key_file_secret_id(self) -> _builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the content of the service account key file is stored, which contains the credentials required to use Google Cloud Storage.
        """
        return pulumi.get(self, "service_account_key_file_secret_id")

    @_builtins.property
    @pulumi.getter(name="sessionMode")
    def session_mode(self) -> _builtins.str:
        """
        The mode of the database connection session to be established by the data client. 'REDIRECT' - for a RAC database, 'DIRECT' - for a non-RAC database. Connection to a RAC database involves a redirection received from the SCAN listeners to the database node to connect to. By default the mode would be DIRECT.
        """
        return pulumi.get(self, "session_mode")

    @_builtins.property
    @pulumi.getter(name="shouldUseJndi")
    def should_use_jndi(self) -> _builtins.bool:
        """
        If set to true, Java Naming and Directory Interface (JNDI) properties should be provided.
        """
        return pulumi.get(self, "should_use_jndi")

    @_builtins.property
    @pulumi.getter(name="shouldUseResourcePrincipal")
    def should_use_resource_principal(self) -> _builtins.bool:
        """
        Specifies that the user intends to authenticate to the instance using a resource principal. Default: false
        """
        return pulumi.get(self, "should_use_resource_principal")

    @_builtins.property
    @pulumi.getter(name="shouldValidateServerCertificate")
    def should_validate_server_certificate(self) -> _builtins.bool:
        """
        If set to true, the driver validates the certificate that is sent by the database server.
        """
        return pulumi.get(self, "should_validate_server_certificate")

    @_builtins.property
    @pulumi.getter(name="sslCa")
    def ssl_ca(self) -> _builtins.str:
        """
        Database Certificate - The base64 encoded content of a .pem or .crt file. containing the server public key (for 1-way SSL). The supported file formats are .pem and .crt. In case of MYSQL and POSTGRESQL connections it is not included in GET responses if the `view=COMPACT` query parameter is specified.
        """
        return pulumi.get(self, "ssl_ca")

    @_builtins.property
    @pulumi.getter(name="sslCert")
    def ssl_cert(self) -> _builtins.str:
        """
        Client Certificate - The base64 encoded content of a .pem or .crt file containing the client public key (for 2-way SSL). It is not included in GET responses if the `view=COMPACT` query parameter is specified.
        """
        return pulumi.get(self, "ssl_cert")

    @_builtins.property
    @pulumi.getter(name="sslClientKeystash")
    def ssl_client_keystash(self) -> _builtins.str:
        return pulumi.get(self, "ssl_client_keystash")

    @_builtins.property
    @pulumi.getter(name="sslClientKeystashSecretId")
    def ssl_client_keystash_secret_id(self) -> _builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the keystash file is stored,  which contains the encrypted password to the key database file. This property is not supported for IBM Db2 for i, as client TLS mode is not available.
        """
        return pulumi.get(self, "ssl_client_keystash_secret_id")

    @_builtins.property
    @pulumi.getter(name="sslClientKeystoredb")
    def ssl_client_keystoredb(self) -> _builtins.str:
        return pulumi.get(self, "ssl_client_keystoredb")

    @_builtins.property
    @pulumi.getter(name="sslClientKeystoredbSecretId")
    def ssl_client_keystoredb_secret_id(self) -> _builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the keystore file stored,  which created at the client containing the server certificate / CA root certificate. This property is not supported for IBM Db2 for i, as client TLS mode is not available.
        """
        return pulumi.get(self, "ssl_client_keystoredb_secret_id")

    @_builtins.property
    @pulumi.getter(name="sslCrl")
    def ssl_crl(self) -> _builtins.str:
        """
        The base64 encoded list of certificates revoked by the trusted certificate authorities (Trusted CA). Note: This is an optional property and only applicable if TLS/MTLS option is selected. It is not included in GET responses if the `view=COMPACT` query parameter is specified.
        """
        return pulumi.get(self, "ssl_crl")

    @_builtins.property
    @pulumi.getter(name="sslKey")
    def ssl_key(self) -> _builtins.str:
        return pulumi.get(self, "ssl_key")

    @_builtins.property
    @pulumi.getter(name="sslKeyPassword")
    def ssl_key_password(self) -> _builtins.str:
        return pulumi.get(self, "ssl_key_password")

    @_builtins.property
    @pulumi.getter(name="sslKeyPasswordSecretId")
    def ssl_key_password_secret_id(self) -> _builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the password is stored for the cert inside of the Keystore. In case it differs from the KeyStore password, it should be provided. Note: When provided, 'sslKeyPassword' field must not be provided.
        """
        return pulumi.get(self, "ssl_key_password_secret_id")

    @_builtins.property
    @pulumi.getter(name="sslKeySecretId")
    def ssl_key_secret_id(self) -> _builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret that stores the Client Key
        * The content of a .pem or .crt file containing the client private key (for 2-way SSL). Note: When provided, 'sslKey' field must not be provided.
        """
        return pulumi.get(self, "ssl_key_secret_id")

    @_builtins.property
    @pulumi.getter(name="sslMode")
    def ssl_mode(self) -> _builtins.str:
        """
        SSL mode to be provided for the following connection types: MYSQL, POSTGRESQL.
        """
        return pulumi.get(self, "ssl_mode")

    @_builtins.property
    @pulumi.getter(name="sslServerCertificate")
    def ssl_server_certificate(self) -> _builtins.str:
        """
        The base64 encoded file which contains the self-signed server certificate / Certificate Authority (CA) certificate. It is not included in GET responses if the `view=COMPACT` query parameter is specified.
        """
        return pulumi.get(self, "ssl_server_certificate")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        Possible lifecycle states for connection.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="storageCredentialName")
    def storage_credential_name(self) -> _builtins.str:
        """
        Optional. External storage credential name to access files on object storage such as ADLS Gen2, S3 or GCS.
        """
        return pulumi.get(self, "storage_credential_name")

    @_builtins.property
    @pulumi.getter
    def storages(self) -> Sequence['outputs.GetConnectionStorageResult']:
        """
        Represents the storage of given type used in an Iceberg connection.
        """
        return pulumi.get(self, "storages")

    @_builtins.property
    @pulumi.getter(name="streamPoolId")
    def stream_pool_id(self) -> _builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the stream pool being referenced.
        """
        return pulumi.get(self, "stream_pool_id")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the target subnet of the dedicated connection.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, _builtins.str]:
        """
        The system tags associated with this resource, if any. The system tags are set by Oracle Cloud Infrastructure services. Each key is predefined and scoped to namespaces.  For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{orcl-cloud: {free-tier-retain: true}}`
        """
        return pulumi.get(self, "system_tags")

    @_builtins.property
    @pulumi.getter(name="technologyType")
    def technology_type(self) -> _builtins.str:
        """
        The technology type.
        """
        return pulumi.get(self, "technology_type")

    @_builtins.property
    @pulumi.getter(name="tenancyId")
    def tenancy_id(self) -> _builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the related Oracle Cloud Infrastructure tenancy.
        """
        return pulumi.get(self, "tenancy_id")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> _builtins.str:
        """
        Azure tenant ID of the application. e.g.: 14593954-d337-4a61-a364-9f758c64f97f
        """
        return pulumi.get(self, "tenant_id")

    @_builtins.property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> _builtins.str:
        """
        The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        return pulumi.get(self, "time_created")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> _builtins.str:
        """
        The time the resource was last updated. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        return pulumi.get(self, "time_updated")

    @_builtins.property
    @pulumi.getter(name="tlsCaFile")
    def tls_ca_file(self) -> _builtins.str:
        """
        Database Certificate - The base64 encoded content of a .pem file, containing the server public key (for 1 and 2-way SSL). It is not included in GET responses if the `view=COMPACT` query parameter is specified.
        """
        return pulumi.get(self, "tls_ca_file")

    @_builtins.property
    @pulumi.getter(name="tlsCertificateKeyFile")
    def tls_certificate_key_file(self) -> _builtins.str:
        return pulumi.get(self, "tls_certificate_key_file")

    @_builtins.property
    @pulumi.getter(name="tlsCertificateKeyFilePassword")
    def tls_certificate_key_file_password(self) -> _builtins.str:
        return pulumi.get(self, "tls_certificate_key_file_password")

    @_builtins.property
    @pulumi.getter(name="tlsCertificateKeyFilePasswordSecretId")
    def tls_certificate_key_file_password_secret_id(self) -> _builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret that stores the password of the tls certificate key file. Note: When provided, 'tlsCertificateKeyFilePassword' field must not be provided.
        """
        return pulumi.get(self, "tls_certificate_key_file_password_secret_id")

    @_builtins.property
    @pulumi.getter(name="tlsCertificateKeyFileSecretId")
    def tls_certificate_key_file_secret_id(self) -> _builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret that stores the certificate key file of the mtls connection.
        * The content of a .pem file containing the client private key (for 2-way SSL). Note: When provided, 'tlsCertificateKeyFile' field must not be provided.
        """
        return pulumi.get(self, "tls_certificate_key_file_secret_id")

    @_builtins.property
    @pulumi.getter(name="triggerRefresh")
    def trigger_refresh(self) -> _builtins.bool:
        return pulumi.get(self, "trigger_refresh")

    @_builtins.property
    @pulumi.getter(name="trustStore")
    def trust_store(self) -> _builtins.str:
        return pulumi.get(self, "trust_store")

    @_builtins.property
    @pulumi.getter(name="trustStorePassword")
    def trust_store_password(self) -> _builtins.str:
        return pulumi.get(self, "trust_store_password")

    @_builtins.property
    @pulumi.getter(name="trustStorePasswordSecretId")
    def trust_store_password_secret_id(self) -> _builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the kafka Ssl TrustStore password is stored. Note: When provided, 'trustStorePassword' field must not be provided.
        """
        return pulumi.get(self, "trust_store_password_secret_id")

    @_builtins.property
    @pulumi.getter(name="trustStoreSecretId")
    def trust_store_secret_id(self) -> _builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the content of the TrustStore file is stored. Note: When provided, 'trustStore' field must not be provided.
        """
        return pulumi.get(self, "trust_store_secret_id")

    @_builtins.property
    @pulumi.getter
    def url(self) -> _builtins.str:
        """
        Kafka Schema Registry URL. e.g.: 'https://server1.us.oracle.com:8081'
        """
        return pulumi.get(self, "url")

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> _builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure user who will access the Oracle NoSQL database. The user must have write access to the table they want to connect to. If the user is not provided, backend will default to the user who is calling the API endpoint.
        """
        return pulumi.get(self, "user_id")

    @_builtins.property
    @pulumi.getter
    def username(self) -> _builtins.str:
        """
        The username Oracle GoldenGate uses to connect the associated system of the given technology. This username must already exist and be available by the system/application to be connected to and must conform to the case sensitivty requirments defined in it.
        """
        return pulumi.get(self, "username")

    @_builtins.property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> _builtins.str:
        """
        Refers to the customer's vault OCID.  If provided, it references a vault where GoldenGate can manage secrets. Customers must add policies to permit GoldenGate to manage secrets contained within this vault.
        """
        return pulumi.get(self, "vault_id")

    @_builtins.property
    @pulumi.getter
    def wallet(self) -> _builtins.str:
        return pulumi.get(self, "wallet")

    @_builtins.property
    @pulumi.getter(name="walletSecretId")
    def wallet_secret_id(self) -> _builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the wallet file is stored.  The wallet contents Oracle GoldenGate uses to make connections to a database. Note: When provided, 'wallet' field must not be provided.
        """
        return pulumi.get(self, "wallet_secret_id")


class AwaitableGetConnectionResult(GetConnectionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetConnectionResult(
            access_key_id=self.access_key_id,
            account_key=self.account_key,
            account_key_secret_id=self.account_key_secret_id,
            account_name=self.account_name,
            additional_attributes=self.additional_attributes,
            authentication_mode=self.authentication_mode,
            authentication_type=self.authentication_type,
            azure_authority_host=self.azure_authority_host,
            azure_tenant_id=self.azure_tenant_id,
            bootstrap_servers=self.bootstrap_servers,
            catalogs=self.catalogs,
            client_id=self.client_id,
            client_secret=self.client_secret,
            client_secret_secret_id=self.client_secret_secret_id,
            compartment_id=self.compartment_id,
            connection_factory=self.connection_factory,
            connection_id=self.connection_id,
            connection_string=self.connection_string,
            connection_type=self.connection_type,
            connection_url=self.connection_url,
            consumer_properties=self.consumer_properties,
            core_site_xml=self.core_site_xml,
            database_id=self.database_id,
            database_name=self.database_name,
            db_system_id=self.db_system_id,
            defined_tags=self.defined_tags,
            deployment_id=self.deployment_id,
            description=self.description,
            display_name=self.display_name,
            does_use_secret_ids=self.does_use_secret_ids,
            endpoint=self.endpoint,
            fingerprint=self.fingerprint,
            freeform_tags=self.freeform_tags,
            host=self.host,
            id=self.id,
            ingress_ips=self.ingress_ips,
            is_lock_override=self.is_lock_override,
            jndi_connection_factory=self.jndi_connection_factory,
            jndi_initial_context_factory=self.jndi_initial_context_factory,
            jndi_provider_url=self.jndi_provider_url,
            jndi_security_credentials=self.jndi_security_credentials,
            jndi_security_credentials_secret_id=self.jndi_security_credentials_secret_id,
            jndi_security_principal=self.jndi_security_principal,
            key_id=self.key_id,
            key_store=self.key_store,
            key_store_password=self.key_store_password,
            key_store_password_secret_id=self.key_store_password_secret_id,
            key_store_secret_id=self.key_store_secret_id,
            lifecycle_details=self.lifecycle_details,
            locks=self.locks,
            nsg_ids=self.nsg_ids,
            password=self.password,
            password_secret_id=self.password_secret_id,
            port=self.port,
            private_ip=self.private_ip,
            private_key_file=self.private_key_file,
            private_key_file_secret_id=self.private_key_file_secret_id,
            private_key_passphrase=self.private_key_passphrase,
            private_key_passphrase_secret_id=self.private_key_passphrase_secret_id,
            producer_properties=self.producer_properties,
            public_key_fingerprint=self.public_key_fingerprint,
            redis_cluster_id=self.redis_cluster_id,
            region=self.region,
            routing_method=self.routing_method,
            sas_token=self.sas_token,
            sas_token_secret_id=self.sas_token_secret_id,
            secret_access_key=self.secret_access_key,
            secret_access_key_secret_id=self.secret_access_key_secret_id,
            security_protocol=self.security_protocol,
            servers=self.servers,
            service_account_key_file=self.service_account_key_file,
            service_account_key_file_secret_id=self.service_account_key_file_secret_id,
            session_mode=self.session_mode,
            should_use_jndi=self.should_use_jndi,
            should_use_resource_principal=self.should_use_resource_principal,
            should_validate_server_certificate=self.should_validate_server_certificate,
            ssl_ca=self.ssl_ca,
            ssl_cert=self.ssl_cert,
            ssl_client_keystash=self.ssl_client_keystash,
            ssl_client_keystash_secret_id=self.ssl_client_keystash_secret_id,
            ssl_client_keystoredb=self.ssl_client_keystoredb,
            ssl_client_keystoredb_secret_id=self.ssl_client_keystoredb_secret_id,
            ssl_crl=self.ssl_crl,
            ssl_key=self.ssl_key,
            ssl_key_password=self.ssl_key_password,
            ssl_key_password_secret_id=self.ssl_key_password_secret_id,
            ssl_key_secret_id=self.ssl_key_secret_id,
            ssl_mode=self.ssl_mode,
            ssl_server_certificate=self.ssl_server_certificate,
            state=self.state,
            storage_credential_name=self.storage_credential_name,
            storages=self.storages,
            stream_pool_id=self.stream_pool_id,
            subnet_id=self.subnet_id,
            system_tags=self.system_tags,
            technology_type=self.technology_type,
            tenancy_id=self.tenancy_id,
            tenant_id=self.tenant_id,
            time_created=self.time_created,
            time_updated=self.time_updated,
            tls_ca_file=self.tls_ca_file,
            tls_certificate_key_file=self.tls_certificate_key_file,
            tls_certificate_key_file_password=self.tls_certificate_key_file_password,
            tls_certificate_key_file_password_secret_id=self.tls_certificate_key_file_password_secret_id,
            tls_certificate_key_file_secret_id=self.tls_certificate_key_file_secret_id,
            trigger_refresh=self.trigger_refresh,
            trust_store=self.trust_store,
            trust_store_password=self.trust_store_password,
            trust_store_password_secret_id=self.trust_store_password_secret_id,
            trust_store_secret_id=self.trust_store_secret_id,
            url=self.url,
            user_id=self.user_id,
            username=self.username,
            vault_id=self.vault_id,
            wallet=self.wallet,
            wallet_secret_id=self.wallet_secret_id)


def get_connection(connection_id: Optional[_builtins.str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetConnectionResult:
    """
    This data source provides details about a specific Connection resource in Oracle Cloud Infrastructure Golden Gate service.

    Retrieves a Connection.


    :param _builtins.str connection_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a Connection.
    """
    __args__ = dict()
    __args__['connectionId'] = connection_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:GoldenGate/getConnection:getConnection', __args__, opts=opts, typ=GetConnectionResult).value

    return AwaitableGetConnectionResult(
        access_key_id=pulumi.get(__ret__, 'access_key_id'),
        account_key=pulumi.get(__ret__, 'account_key'),
        account_key_secret_id=pulumi.get(__ret__, 'account_key_secret_id'),
        account_name=pulumi.get(__ret__, 'account_name'),
        additional_attributes=pulumi.get(__ret__, 'additional_attributes'),
        authentication_mode=pulumi.get(__ret__, 'authentication_mode'),
        authentication_type=pulumi.get(__ret__, 'authentication_type'),
        azure_authority_host=pulumi.get(__ret__, 'azure_authority_host'),
        azure_tenant_id=pulumi.get(__ret__, 'azure_tenant_id'),
        bootstrap_servers=pulumi.get(__ret__, 'bootstrap_servers'),
        catalogs=pulumi.get(__ret__, 'catalogs'),
        client_id=pulumi.get(__ret__, 'client_id'),
        client_secret=pulumi.get(__ret__, 'client_secret'),
        client_secret_secret_id=pulumi.get(__ret__, 'client_secret_secret_id'),
        compartment_id=pulumi.get(__ret__, 'compartment_id'),
        connection_factory=pulumi.get(__ret__, 'connection_factory'),
        connection_id=pulumi.get(__ret__, 'connection_id'),
        connection_string=pulumi.get(__ret__, 'connection_string'),
        connection_type=pulumi.get(__ret__, 'connection_type'),
        connection_url=pulumi.get(__ret__, 'connection_url'),
        consumer_properties=pulumi.get(__ret__, 'consumer_properties'),
        core_site_xml=pulumi.get(__ret__, 'core_site_xml'),
        database_id=pulumi.get(__ret__, 'database_id'),
        database_name=pulumi.get(__ret__, 'database_name'),
        db_system_id=pulumi.get(__ret__, 'db_system_id'),
        defined_tags=pulumi.get(__ret__, 'defined_tags'),
        deployment_id=pulumi.get(__ret__, 'deployment_id'),
        description=pulumi.get(__ret__, 'description'),
        display_name=pulumi.get(__ret__, 'display_name'),
        does_use_secret_ids=pulumi.get(__ret__, 'does_use_secret_ids'),
        endpoint=pulumi.get(__ret__, 'endpoint'),
        fingerprint=pulumi.get(__ret__, 'fingerprint'),
        freeform_tags=pulumi.get(__ret__, 'freeform_tags'),
        host=pulumi.get(__ret__, 'host'),
        id=pulumi.get(__ret__, 'id'),
        ingress_ips=pulumi.get(__ret__, 'ingress_ips'),
        is_lock_override=pulumi.get(__ret__, 'is_lock_override'),
        jndi_connection_factory=pulumi.get(__ret__, 'jndi_connection_factory'),
        jndi_initial_context_factory=pulumi.get(__ret__, 'jndi_initial_context_factory'),
        jndi_provider_url=pulumi.get(__ret__, 'jndi_provider_url'),
        jndi_security_credentials=pulumi.get(__ret__, 'jndi_security_credentials'),
        jndi_security_credentials_secret_id=pulumi.get(__ret__, 'jndi_security_credentials_secret_id'),
        jndi_security_principal=pulumi.get(__ret__, 'jndi_security_principal'),
        key_id=pulumi.get(__ret__, 'key_id'),
        key_store=pulumi.get(__ret__, 'key_store'),
        key_store_password=pulumi.get(__ret__, 'key_store_password'),
        key_store_password_secret_id=pulumi.get(__ret__, 'key_store_password_secret_id'),
        key_store_secret_id=pulumi.get(__ret__, 'key_store_secret_id'),
        lifecycle_details=pulumi.get(__ret__, 'lifecycle_details'),
        locks=pulumi.get(__ret__, 'locks'),
        nsg_ids=pulumi.get(__ret__, 'nsg_ids'),
        password=pulumi.get(__ret__, 'password'),
        password_secret_id=pulumi.get(__ret__, 'password_secret_id'),
        port=pulumi.get(__ret__, 'port'),
        private_ip=pulumi.get(__ret__, 'private_ip'),
        private_key_file=pulumi.get(__ret__, 'private_key_file'),
        private_key_file_secret_id=pulumi.get(__ret__, 'private_key_file_secret_id'),
        private_key_passphrase=pulumi.get(__ret__, 'private_key_passphrase'),
        private_key_passphrase_secret_id=pulumi.get(__ret__, 'private_key_passphrase_secret_id'),
        producer_properties=pulumi.get(__ret__, 'producer_properties'),
        public_key_fingerprint=pulumi.get(__ret__, 'public_key_fingerprint'),
        redis_cluster_id=pulumi.get(__ret__, 'redis_cluster_id'),
        region=pulumi.get(__ret__, 'region'),
        routing_method=pulumi.get(__ret__, 'routing_method'),
        sas_token=pulumi.get(__ret__, 'sas_token'),
        sas_token_secret_id=pulumi.get(__ret__, 'sas_token_secret_id'),
        secret_access_key=pulumi.get(__ret__, 'secret_access_key'),
        secret_access_key_secret_id=pulumi.get(__ret__, 'secret_access_key_secret_id'),
        security_protocol=pulumi.get(__ret__, 'security_protocol'),
        servers=pulumi.get(__ret__, 'servers'),
        service_account_key_file=pulumi.get(__ret__, 'service_account_key_file'),
        service_account_key_file_secret_id=pulumi.get(__ret__, 'service_account_key_file_secret_id'),
        session_mode=pulumi.get(__ret__, 'session_mode'),
        should_use_jndi=pulumi.get(__ret__, 'should_use_jndi'),
        should_use_resource_principal=pulumi.get(__ret__, 'should_use_resource_principal'),
        should_validate_server_certificate=pulumi.get(__ret__, 'should_validate_server_certificate'),
        ssl_ca=pulumi.get(__ret__, 'ssl_ca'),
        ssl_cert=pulumi.get(__ret__, 'ssl_cert'),
        ssl_client_keystash=pulumi.get(__ret__, 'ssl_client_keystash'),
        ssl_client_keystash_secret_id=pulumi.get(__ret__, 'ssl_client_keystash_secret_id'),
        ssl_client_keystoredb=pulumi.get(__ret__, 'ssl_client_keystoredb'),
        ssl_client_keystoredb_secret_id=pulumi.get(__ret__, 'ssl_client_keystoredb_secret_id'),
        ssl_crl=pulumi.get(__ret__, 'ssl_crl'),
        ssl_key=pulumi.get(__ret__, 'ssl_key'),
        ssl_key_password=pulumi.get(__ret__, 'ssl_key_password'),
        ssl_key_password_secret_id=pulumi.get(__ret__, 'ssl_key_password_secret_id'),
        ssl_key_secret_id=pulumi.get(__ret__, 'ssl_key_secret_id'),
        ssl_mode=pulumi.get(__ret__, 'ssl_mode'),
        ssl_server_certificate=pulumi.get(__ret__, 'ssl_server_certificate'),
        state=pulumi.get(__ret__, 'state'),
        storage_credential_name=pulumi.get(__ret__, 'storage_credential_name'),
        storages=pulumi.get(__ret__, 'storages'),
        stream_pool_id=pulumi.get(__ret__, 'stream_pool_id'),
        subnet_id=pulumi.get(__ret__, 'subnet_id'),
        system_tags=pulumi.get(__ret__, 'system_tags'),
        technology_type=pulumi.get(__ret__, 'technology_type'),
        tenancy_id=pulumi.get(__ret__, 'tenancy_id'),
        tenant_id=pulumi.get(__ret__, 'tenant_id'),
        time_created=pulumi.get(__ret__, 'time_created'),
        time_updated=pulumi.get(__ret__, 'time_updated'),
        tls_ca_file=pulumi.get(__ret__, 'tls_ca_file'),
        tls_certificate_key_file=pulumi.get(__ret__, 'tls_certificate_key_file'),
        tls_certificate_key_file_password=pulumi.get(__ret__, 'tls_certificate_key_file_password'),
        tls_certificate_key_file_password_secret_id=pulumi.get(__ret__, 'tls_certificate_key_file_password_secret_id'),
        tls_certificate_key_file_secret_id=pulumi.get(__ret__, 'tls_certificate_key_file_secret_id'),
        trigger_refresh=pulumi.get(__ret__, 'trigger_refresh'),
        trust_store=pulumi.get(__ret__, 'trust_store'),
        trust_store_password=pulumi.get(__ret__, 'trust_store_password'),
        trust_store_password_secret_id=pulumi.get(__ret__, 'trust_store_password_secret_id'),
        trust_store_secret_id=pulumi.get(__ret__, 'trust_store_secret_id'),
        url=pulumi.get(__ret__, 'url'),
        user_id=pulumi.get(__ret__, 'user_id'),
        username=pulumi.get(__ret__, 'username'),
        vault_id=pulumi.get(__ret__, 'vault_id'),
        wallet=pulumi.get(__ret__, 'wallet'),
        wallet_secret_id=pulumi.get(__ret__, 'wallet_secret_id'))
def get_connection_output(connection_id: Optional[pulumi.Input[_builtins.str]] = None,
                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetConnectionResult]:
    """
    This data source provides details about a specific Connection resource in Oracle Cloud Infrastructure Golden Gate service.

    Retrieves a Connection.


    :param _builtins.str connection_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a Connection.
    """
    __args__ = dict()
    __args__['connectionId'] = connection_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('oci:GoldenGate/getConnection:getConnection', __args__, opts=opts, typ=GetConnectionResult)
    return __ret__.apply(lambda __response__: GetConnectionResult(
        access_key_id=pulumi.get(__response__, 'access_key_id'),
        account_key=pulumi.get(__response__, 'account_key'),
        account_key_secret_id=pulumi.get(__response__, 'account_key_secret_id'),
        account_name=pulumi.get(__response__, 'account_name'),
        additional_attributes=pulumi.get(__response__, 'additional_attributes'),
        authentication_mode=pulumi.get(__response__, 'authentication_mode'),
        authentication_type=pulumi.get(__response__, 'authentication_type'),
        azure_authority_host=pulumi.get(__response__, 'azure_authority_host'),
        azure_tenant_id=pulumi.get(__response__, 'azure_tenant_id'),
        bootstrap_servers=pulumi.get(__response__, 'bootstrap_servers'),
        catalogs=pulumi.get(__response__, 'catalogs'),
        client_id=pulumi.get(__response__, 'client_id'),
        client_secret=pulumi.get(__response__, 'client_secret'),
        client_secret_secret_id=pulumi.get(__response__, 'client_secret_secret_id'),
        compartment_id=pulumi.get(__response__, 'compartment_id'),
        connection_factory=pulumi.get(__response__, 'connection_factory'),
        connection_id=pulumi.get(__response__, 'connection_id'),
        connection_string=pulumi.get(__response__, 'connection_string'),
        connection_type=pulumi.get(__response__, 'connection_type'),
        connection_url=pulumi.get(__response__, 'connection_url'),
        consumer_properties=pulumi.get(__response__, 'consumer_properties'),
        core_site_xml=pulumi.get(__response__, 'core_site_xml'),
        database_id=pulumi.get(__response__, 'database_id'),
        database_name=pulumi.get(__response__, 'database_name'),
        db_system_id=pulumi.get(__response__, 'db_system_id'),
        defined_tags=pulumi.get(__response__, 'defined_tags'),
        deployment_id=pulumi.get(__response__, 'deployment_id'),
        description=pulumi.get(__response__, 'description'),
        display_name=pulumi.get(__response__, 'display_name'),
        does_use_secret_ids=pulumi.get(__response__, 'does_use_secret_ids'),
        endpoint=pulumi.get(__response__, 'endpoint'),
        fingerprint=pulumi.get(__response__, 'fingerprint'),
        freeform_tags=pulumi.get(__response__, 'freeform_tags'),
        host=pulumi.get(__response__, 'host'),
        id=pulumi.get(__response__, 'id'),
        ingress_ips=pulumi.get(__response__, 'ingress_ips'),
        is_lock_override=pulumi.get(__response__, 'is_lock_override'),
        jndi_connection_factory=pulumi.get(__response__, 'jndi_connection_factory'),
        jndi_initial_context_factory=pulumi.get(__response__, 'jndi_initial_context_factory'),
        jndi_provider_url=pulumi.get(__response__, 'jndi_provider_url'),
        jndi_security_credentials=pulumi.get(__response__, 'jndi_security_credentials'),
        jndi_security_credentials_secret_id=pulumi.get(__response__, 'jndi_security_credentials_secret_id'),
        jndi_security_principal=pulumi.get(__response__, 'jndi_security_principal'),
        key_id=pulumi.get(__response__, 'key_id'),
        key_store=pulumi.get(__response__, 'key_store'),
        key_store_password=pulumi.get(__response__, 'key_store_password'),
        key_store_password_secret_id=pulumi.get(__response__, 'key_store_password_secret_id'),
        key_store_secret_id=pulumi.get(__response__, 'key_store_secret_id'),
        lifecycle_details=pulumi.get(__response__, 'lifecycle_details'),
        locks=pulumi.get(__response__, 'locks'),
        nsg_ids=pulumi.get(__response__, 'nsg_ids'),
        password=pulumi.get(__response__, 'password'),
        password_secret_id=pulumi.get(__response__, 'password_secret_id'),
        port=pulumi.get(__response__, 'port'),
        private_ip=pulumi.get(__response__, 'private_ip'),
        private_key_file=pulumi.get(__response__, 'private_key_file'),
        private_key_file_secret_id=pulumi.get(__response__, 'private_key_file_secret_id'),
        private_key_passphrase=pulumi.get(__response__, 'private_key_passphrase'),
        private_key_passphrase_secret_id=pulumi.get(__response__, 'private_key_passphrase_secret_id'),
        producer_properties=pulumi.get(__response__, 'producer_properties'),
        public_key_fingerprint=pulumi.get(__response__, 'public_key_fingerprint'),
        redis_cluster_id=pulumi.get(__response__, 'redis_cluster_id'),
        region=pulumi.get(__response__, 'region'),
        routing_method=pulumi.get(__response__, 'routing_method'),
        sas_token=pulumi.get(__response__, 'sas_token'),
        sas_token_secret_id=pulumi.get(__response__, 'sas_token_secret_id'),
        secret_access_key=pulumi.get(__response__, 'secret_access_key'),
        secret_access_key_secret_id=pulumi.get(__response__, 'secret_access_key_secret_id'),
        security_protocol=pulumi.get(__response__, 'security_protocol'),
        servers=pulumi.get(__response__, 'servers'),
        service_account_key_file=pulumi.get(__response__, 'service_account_key_file'),
        service_account_key_file_secret_id=pulumi.get(__response__, 'service_account_key_file_secret_id'),
        session_mode=pulumi.get(__response__, 'session_mode'),
        should_use_jndi=pulumi.get(__response__, 'should_use_jndi'),
        should_use_resource_principal=pulumi.get(__response__, 'should_use_resource_principal'),
        should_validate_server_certificate=pulumi.get(__response__, 'should_validate_server_certificate'),
        ssl_ca=pulumi.get(__response__, 'ssl_ca'),
        ssl_cert=pulumi.get(__response__, 'ssl_cert'),
        ssl_client_keystash=pulumi.get(__response__, 'ssl_client_keystash'),
        ssl_client_keystash_secret_id=pulumi.get(__response__, 'ssl_client_keystash_secret_id'),
        ssl_client_keystoredb=pulumi.get(__response__, 'ssl_client_keystoredb'),
        ssl_client_keystoredb_secret_id=pulumi.get(__response__, 'ssl_client_keystoredb_secret_id'),
        ssl_crl=pulumi.get(__response__, 'ssl_crl'),
        ssl_key=pulumi.get(__response__, 'ssl_key'),
        ssl_key_password=pulumi.get(__response__, 'ssl_key_password'),
        ssl_key_password_secret_id=pulumi.get(__response__, 'ssl_key_password_secret_id'),
        ssl_key_secret_id=pulumi.get(__response__, 'ssl_key_secret_id'),
        ssl_mode=pulumi.get(__response__, 'ssl_mode'),
        ssl_server_certificate=pulumi.get(__response__, 'ssl_server_certificate'),
        state=pulumi.get(__response__, 'state'),
        storage_credential_name=pulumi.get(__response__, 'storage_credential_name'),
        storages=pulumi.get(__response__, 'storages'),
        stream_pool_id=pulumi.get(__response__, 'stream_pool_id'),
        subnet_id=pulumi.get(__response__, 'subnet_id'),
        system_tags=pulumi.get(__response__, 'system_tags'),
        technology_type=pulumi.get(__response__, 'technology_type'),
        tenancy_id=pulumi.get(__response__, 'tenancy_id'),
        tenant_id=pulumi.get(__response__, 'tenant_id'),
        time_created=pulumi.get(__response__, 'time_created'),
        time_updated=pulumi.get(__response__, 'time_updated'),
        tls_ca_file=pulumi.get(__response__, 'tls_ca_file'),
        tls_certificate_key_file=pulumi.get(__response__, 'tls_certificate_key_file'),
        tls_certificate_key_file_password=pulumi.get(__response__, 'tls_certificate_key_file_password'),
        tls_certificate_key_file_password_secret_id=pulumi.get(__response__, 'tls_certificate_key_file_password_secret_id'),
        tls_certificate_key_file_secret_id=pulumi.get(__response__, 'tls_certificate_key_file_secret_id'),
        trigger_refresh=pulumi.get(__response__, 'trigger_refresh'),
        trust_store=pulumi.get(__response__, 'trust_store'),
        trust_store_password=pulumi.get(__response__, 'trust_store_password'),
        trust_store_password_secret_id=pulumi.get(__response__, 'trust_store_password_secret_id'),
        trust_store_secret_id=pulumi.get(__response__, 'trust_store_secret_id'),
        url=pulumi.get(__response__, 'url'),
        user_id=pulumi.get(__response__, 'user_id'),
        username=pulumi.get(__response__, 'username'),
        vault_id=pulumi.get(__response__, 'vault_id'),
        wallet=pulumi.get(__response__, 'wallet'),
        wallet_secret_id=pulumi.get(__response__, 'wallet_secret_id')))
