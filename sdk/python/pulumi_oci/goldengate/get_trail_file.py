# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetTrailFileResult',
    'AwaitableGetTrailFileResult',
    'get_trail_file',
    'get_trail_file_output',
]

@pulumi.output_type
class GetTrailFileResult:
    """
    A collection of values returned by getTrailFile.
    """
    def __init__(__self__, deployment_id=None, display_name=None, id=None, items=None, time_last_fetched=None, trail_file_id=None):
        if deployment_id and not isinstance(deployment_id, str):
            raise TypeError("Expected argument 'deployment_id' to be a str")
        pulumi.set(__self__, "deployment_id", deployment_id)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if items and not isinstance(items, list):
            raise TypeError("Expected argument 'items' to be a list")
        pulumi.set(__self__, "items", items)
        if time_last_fetched and not isinstance(time_last_fetched, str):
            raise TypeError("Expected argument 'time_last_fetched' to be a str")
        pulumi.set(__self__, "time_last_fetched", time_last_fetched)
        if trail_file_id and not isinstance(trail_file_id, str):
            raise TypeError("Expected argument 'trail_file_id' to be a str")
        pulumi.set(__self__, "trail_file_id", trail_file_id)

    @property
    @pulumi.getter(name="deploymentId")
    def deployment_id(self) -> str:
        return pulumi.get(self, "deployment_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetTrailFileItemResult']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter(name="timeLastFetched")
    def time_last_fetched(self) -> Optional[str]:
        return pulumi.get(self, "time_last_fetched")

    @property
    @pulumi.getter(name="trailFileId")
    def trail_file_id(self) -> str:
        return pulumi.get(self, "trail_file_id")


class AwaitableGetTrailFileResult(GetTrailFileResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTrailFileResult(
            deployment_id=self.deployment_id,
            display_name=self.display_name,
            id=self.id,
            items=self.items,
            time_last_fetched=self.time_last_fetched,
            trail_file_id=self.trail_file_id)


def get_trail_file(deployment_id: Optional[str] = None,
                   display_name: Optional[str] = None,
                   trail_file_id: Optional[str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTrailFileResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['deploymentId'] = deployment_id
    __args__['displayName'] = display_name
    __args__['trailFileId'] = trail_file_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:GoldenGate/getTrailFile:getTrailFile', __args__, opts=opts, typ=GetTrailFileResult).value

    return AwaitableGetTrailFileResult(
        deployment_id=pulumi.get(__ret__, 'deployment_id'),
        display_name=pulumi.get(__ret__, 'display_name'),
        id=pulumi.get(__ret__, 'id'),
        items=pulumi.get(__ret__, 'items'),
        time_last_fetched=pulumi.get(__ret__, 'time_last_fetched'),
        trail_file_id=pulumi.get(__ret__, 'trail_file_id'))


@_utilities.lift_output_func(get_trail_file)
def get_trail_file_output(deployment_id: Optional[pulumi.Input[str]] = None,
                          display_name: Optional[pulumi.Input[Optional[str]]] = None,
                          trail_file_id: Optional[pulumi.Input[str]] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetTrailFileResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
