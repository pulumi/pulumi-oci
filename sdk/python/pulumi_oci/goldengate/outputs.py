# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ConnectionAdditionalAttribute',
    'ConnectionBootstrapServer',
    'ConnectionIngressIp',
    'DeploymentDeploymentDiagnosticData',
    'DeploymentMaintenanceConfiguration',
    'DeploymentMaintenanceWindow',
    'DeploymentOggData',
    'GetConnectionAdditionalAttributeResult',
    'GetConnectionAssignmentsConnectionAssignmentCollectionResult',
    'GetConnectionAssignmentsConnectionAssignmentCollectionItemResult',
    'GetConnectionAssignmentsFilterResult',
    'GetConnectionBootstrapServerResult',
    'GetConnectionIngressIpResult',
    'GetConnectionsConnectionCollectionResult',
    'GetConnectionsConnectionCollectionItemResult',
    'GetConnectionsConnectionCollectionItemAdditionalAttributeResult',
    'GetConnectionsConnectionCollectionItemBootstrapServerResult',
    'GetConnectionsConnectionCollectionItemIngressIpResult',
    'GetConnectionsFilterResult',
    'GetDatabaseRegistrationsDatabaseRegistrationCollectionResult',
    'GetDatabaseRegistrationsDatabaseRegistrationCollectionItemResult',
    'GetDatabaseRegistrationsFilterResult',
    'GetDeploymentBackupsDeploymentBackupCollectionResult',
    'GetDeploymentBackupsDeploymentBackupCollectionItemResult',
    'GetDeploymentBackupsFilterResult',
    'GetDeploymentDeploymentDiagnosticDataResult',
    'GetDeploymentMaintenanceConfigurationResult',
    'GetDeploymentMaintenanceWindowResult',
    'GetDeploymentOggDataResult',
    'GetDeploymentTypeItemResult',
    'GetDeploymentTypesDeploymentTypeCollectionResult',
    'GetDeploymentTypesDeploymentTypeCollectionItemResult',
    'GetDeploymentTypesFilterResult',
    'GetDeploymentUpgradesDeploymentUpgradeCollectionResult',
    'GetDeploymentUpgradesDeploymentUpgradeCollectionItemResult',
    'GetDeploymentUpgradesFilterResult',
    'GetDeploymentVersionsDeploymentVersionCollectionResult',
    'GetDeploymentVersionsDeploymentVersionCollectionItemResult',
    'GetDeploymentVersionsFilterResult',
    'GetDeploymentsDeploymentCollectionResult',
    'GetDeploymentsDeploymentCollectionItemResult',
    'GetDeploymentsDeploymentCollectionItemDeploymentDiagnosticDataResult',
    'GetDeploymentsDeploymentCollectionItemMaintenanceConfigurationResult',
    'GetDeploymentsDeploymentCollectionItemMaintenanceWindowResult',
    'GetDeploymentsDeploymentCollectionItemOggDataResult',
    'GetDeploymentsFilterResult',
    'GetMessageItemResult',
    'GetMessagesDeploymentMessagesCollectionResult',
    'GetMessagesDeploymentMessagesCollectionItemResult',
    'GetMessagesFilterResult',
    'GetTrailFileItemResult',
    'GetTrailFilesFilterResult',
    'GetTrailFilesTrailFileCollectionResult',
    'GetTrailFilesTrailFileCollectionItemResult',
    'GetTrailSequenceItemResult',
    'GetTrailSequencesFilterResult',
    'GetTrailSequencesTrailSequenceCollectionResult',
    'GetTrailSequencesTrailSequenceCollectionItemResult',
]

@pulumi.output_type
class ConnectionAdditionalAttribute(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ConnectionBootstrapServer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "privateIp":
            suggest = "private_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionBootstrapServer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionBootstrapServer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionBootstrapServer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host: Optional[str] = None,
                 port: Optional[int] = None,
                 private_ip: Optional[str] = None):
        if host is not None:
            pulumi.set(__self__, "host", host)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[str]:
        return pulumi.get(self, "private_ip")


@pulumi.output_type
class ConnectionIngressIp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ingressIp":
            suggest = "ingress_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionIngressIp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionIngressIp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionIngressIp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ingress_ip: Optional[str] = None):
        if ingress_ip is not None:
            pulumi.set(__self__, "ingress_ip", ingress_ip)

    @property
    @pulumi.getter(name="ingressIp")
    def ingress_ip(self) -> Optional[str]:
        return pulumi.get(self, "ingress_ip")


@pulumi.output_type
class DeploymentDeploymentDiagnosticData(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diagnosticState":
            suggest = "diagnostic_state"
        elif key == "timeDiagnosticEnd":
            suggest = "time_diagnostic_end"
        elif key == "timeDiagnosticStart":
            suggest = "time_diagnostic_start"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentDeploymentDiagnosticData. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentDeploymentDiagnosticData.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentDeploymentDiagnosticData.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 diagnostic_state: Optional[str] = None,
                 namespace: Optional[str] = None,
                 object: Optional[str] = None,
                 time_diagnostic_end: Optional[str] = None,
                 time_diagnostic_start: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if diagnostic_state is not None:
            pulumi.set(__self__, "diagnostic_state", diagnostic_state)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if object is not None:
            pulumi.set(__self__, "object", object)
        if time_diagnostic_end is not None:
            pulumi.set(__self__, "time_diagnostic_end", time_diagnostic_end)
        if time_diagnostic_start is not None:
            pulumi.set(__self__, "time_diagnostic_start", time_diagnostic_start)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="diagnosticState")
    def diagnostic_state(self) -> Optional[str]:
        return pulumi.get(self, "diagnostic_state")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> Optional[str]:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter(name="timeDiagnosticEnd")
    def time_diagnostic_end(self) -> Optional[str]:
        return pulumi.get(self, "time_diagnostic_end")

    @property
    @pulumi.getter(name="timeDiagnosticStart")
    def time_diagnostic_start(self) -> Optional[str]:
        return pulumi.get(self, "time_diagnostic_start")


@pulumi.output_type
class DeploymentMaintenanceConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bundleReleaseUpgradePeriodInDays":
            suggest = "bundle_release_upgrade_period_in_days"
        elif key == "interimReleaseUpgradePeriodInDays":
            suggest = "interim_release_upgrade_period_in_days"
        elif key == "isInterimReleaseAutoUpgradeEnabled":
            suggest = "is_interim_release_auto_upgrade_enabled"
        elif key == "majorReleaseUpgradePeriodInDays":
            suggest = "major_release_upgrade_period_in_days"
        elif key == "securityPatchUpgradePeriodInDays":
            suggest = "security_patch_upgrade_period_in_days"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentMaintenanceConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentMaintenanceConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentMaintenanceConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bundle_release_upgrade_period_in_days: Optional[int] = None,
                 interim_release_upgrade_period_in_days: Optional[int] = None,
                 is_interim_release_auto_upgrade_enabled: Optional[bool] = None,
                 major_release_upgrade_period_in_days: Optional[int] = None,
                 security_patch_upgrade_period_in_days: Optional[int] = None):
        if bundle_release_upgrade_period_in_days is not None:
            pulumi.set(__self__, "bundle_release_upgrade_period_in_days", bundle_release_upgrade_period_in_days)
        if interim_release_upgrade_period_in_days is not None:
            pulumi.set(__self__, "interim_release_upgrade_period_in_days", interim_release_upgrade_period_in_days)
        if is_interim_release_auto_upgrade_enabled is not None:
            pulumi.set(__self__, "is_interim_release_auto_upgrade_enabled", is_interim_release_auto_upgrade_enabled)
        if major_release_upgrade_period_in_days is not None:
            pulumi.set(__self__, "major_release_upgrade_period_in_days", major_release_upgrade_period_in_days)
        if security_patch_upgrade_period_in_days is not None:
            pulumi.set(__self__, "security_patch_upgrade_period_in_days", security_patch_upgrade_period_in_days)

    @property
    @pulumi.getter(name="bundleReleaseUpgradePeriodInDays")
    def bundle_release_upgrade_period_in_days(self) -> Optional[int]:
        return pulumi.get(self, "bundle_release_upgrade_period_in_days")

    @property
    @pulumi.getter(name="interimReleaseUpgradePeriodInDays")
    def interim_release_upgrade_period_in_days(self) -> Optional[int]:
        return pulumi.get(self, "interim_release_upgrade_period_in_days")

    @property
    @pulumi.getter(name="isInterimReleaseAutoUpgradeEnabled")
    def is_interim_release_auto_upgrade_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_interim_release_auto_upgrade_enabled")

    @property
    @pulumi.getter(name="majorReleaseUpgradePeriodInDays")
    def major_release_upgrade_period_in_days(self) -> Optional[int]:
        return pulumi.get(self, "major_release_upgrade_period_in_days")

    @property
    @pulumi.getter(name="securityPatchUpgradePeriodInDays")
    def security_patch_upgrade_period_in_days(self) -> Optional[int]:
        return pulumi.get(self, "security_patch_upgrade_period_in_days")


@pulumi.output_type
class DeploymentMaintenanceWindow(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "startHour":
            suggest = "start_hour"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentMaintenanceWindow. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentMaintenanceWindow.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentMaintenanceWindow.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 day: str,
                 start_hour: int):
        pulumi.set(__self__, "day", day)
        pulumi.set(__self__, "start_hour", start_hour)

    @property
    @pulumi.getter
    def day(self) -> str:
        return pulumi.get(self, "day")

    @property
    @pulumi.getter(name="startHour")
    def start_hour(self) -> int:
        return pulumi.get(self, "start_hour")


@pulumi.output_type
class DeploymentOggData(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deploymentName":
            suggest = "deployment_name"
        elif key == "adminPassword":
            suggest = "admin_password"
        elif key == "adminUsername":
            suggest = "admin_username"
        elif key == "credentialStore":
            suggest = "credential_store"
        elif key == "identityDomainId":
            suggest = "identity_domain_id"
        elif key == "oggVersion":
            suggest = "ogg_version"
        elif key == "passwordSecretId":
            suggest = "password_secret_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentOggData. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentOggData.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentOggData.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deployment_name: str,
                 admin_password: Optional[str] = None,
                 admin_username: Optional[str] = None,
                 certificate: Optional[str] = None,
                 credential_store: Optional[str] = None,
                 identity_domain_id: Optional[str] = None,
                 key: Optional[str] = None,
                 ogg_version: Optional[str] = None,
                 password_secret_id: Optional[str] = None):
        pulumi.set(__self__, "deployment_name", deployment_name)
        if admin_password is not None:
            pulumi.set(__self__, "admin_password", admin_password)
        if admin_username is not None:
            pulumi.set(__self__, "admin_username", admin_username)
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if credential_store is not None:
            pulumi.set(__self__, "credential_store", credential_store)
        if identity_domain_id is not None:
            pulumi.set(__self__, "identity_domain_id", identity_domain_id)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if ogg_version is not None:
            pulumi.set(__self__, "ogg_version", ogg_version)
        if password_secret_id is not None:
            pulumi.set(__self__, "password_secret_id", password_secret_id)

    @property
    @pulumi.getter(name="deploymentName")
    def deployment_name(self) -> str:
        return pulumi.get(self, "deployment_name")

    @property
    @pulumi.getter(name="adminPassword")
    def admin_password(self) -> Optional[str]:
        return pulumi.get(self, "admin_password")

    @property
    @pulumi.getter(name="adminUsername")
    def admin_username(self) -> Optional[str]:
        return pulumi.get(self, "admin_username")

    @property
    @pulumi.getter
    def certificate(self) -> Optional[str]:
        return pulumi.get(self, "certificate")

    @property
    @pulumi.getter(name="credentialStore")
    def credential_store(self) -> Optional[str]:
        return pulumi.get(self, "credential_store")

    @property
    @pulumi.getter(name="identityDomainId")
    def identity_domain_id(self) -> Optional[str]:
        return pulumi.get(self, "identity_domain_id")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="oggVersion")
    def ogg_version(self) -> Optional[str]:
        return pulumi.get(self, "ogg_version")

    @property
    @pulumi.getter(name="passwordSecretId")
    def password_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "password_secret_id")


@pulumi.output_type
class GetConnectionAdditionalAttributeResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetConnectionAssignmentsConnectionAssignmentCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetConnectionAssignmentsConnectionAssignmentCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetConnectionAssignmentsConnectionAssignmentCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetConnectionAssignmentsConnectionAssignmentCollectionItemResult(dict):
    def __init__(__self__, *,
                 alias_name: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 connection_id: Optional[str] = None,
                 deployment_id: Optional[str] = None,
                 id: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if alias_name is not None:
            pulumi.set(__self__, "alias_name", alias_name)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if connection_id is not None:
            pulumi.set(__self__, "connection_id", connection_id)
        if deployment_id is not None:
            pulumi.set(__self__, "deployment_id", deployment_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="aliasName")
    def alias_name(self) -> Optional[str]:
        return pulumi.get(self, "alias_name")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> Optional[str]:
        return pulumi.get(self, "connection_id")

    @property
    @pulumi.getter(name="deploymentId")
    def deployment_id(self) -> Optional[str]:
        return pulumi.get(self, "deployment_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetConnectionAssignmentsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetConnectionBootstrapServerResult(dict):
    def __init__(__self__, *,
                 host: Optional[str] = None,
                 port: Optional[int] = None,
                 private_ip: Optional[str] = None):
        if host is not None:
            pulumi.set(__self__, "host", host)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[str]:
        return pulumi.get(self, "private_ip")


@pulumi.output_type
class GetConnectionIngressIpResult(dict):
    def __init__(__self__, *,
                 ingress_ip: Optional[str] = None):
        if ingress_ip is not None:
            pulumi.set(__self__, "ingress_ip", ingress_ip)

    @property
    @pulumi.getter(name="ingressIp")
    def ingress_ip(self) -> Optional[str]:
        return pulumi.get(self, "ingress_ip")


@pulumi.output_type
class GetConnectionsConnectionCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetConnectionsConnectionCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetConnectionsConnectionCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetConnectionsConnectionCollectionItemResult(dict):
    def __init__(__self__, *,
                 access_key_id: Optional[str] = None,
                 account_key: Optional[str] = None,
                 account_name: Optional[str] = None,
                 additional_attributes: Optional[Sequence['outputs.GetConnectionsConnectionCollectionItemAdditionalAttributeResult']] = None,
                 authentication_type: Optional[str] = None,
                 azure_tenant_id: Optional[str] = None,
                 bootstrap_servers: Optional[Sequence['outputs.GetConnectionsConnectionCollectionItemBootstrapServerResult']] = None,
                 client_id: Optional[str] = None,
                 client_secret: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 connection_factory: Optional[str] = None,
                 connection_string: Optional[str] = None,
                 connection_type: Optional[str] = None,
                 connection_url: Optional[str] = None,
                 consumer_properties: Optional[str] = None,
                 core_site_xml: Optional[str] = None,
                 database_id: Optional[str] = None,
                 database_name: Optional[str] = None,
                 db_system_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 deployment_id: Optional[str] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 endpoint: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 host: Optional[str] = None,
                 id: Optional[str] = None,
                 ingress_ips: Optional[Sequence['outputs.GetConnectionsConnectionCollectionItemIngressIpResult']] = None,
                 jndi_connection_factory: Optional[str] = None,
                 jndi_initial_context_factory: Optional[str] = None,
                 jndi_provider_url: Optional[str] = None,
                 jndi_security_credentials: Optional[str] = None,
                 jndi_security_principal: Optional[str] = None,
                 key_id: Optional[str] = None,
                 key_store: Optional[str] = None,
                 key_store_password: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 nsg_ids: Optional[Sequence[str]] = None,
                 password: Optional[str] = None,
                 port: Optional[int] = None,
                 private_ip: Optional[str] = None,
                 private_key_file: Optional[str] = None,
                 private_key_passphrase: Optional[str] = None,
                 producer_properties: Optional[str] = None,
                 public_key_fingerprint: Optional[str] = None,
                 region: Optional[str] = None,
                 sas_token: Optional[str] = None,
                 secret_access_key: Optional[str] = None,
                 security_protocol: Optional[str] = None,
                 session_mode: Optional[str] = None,
                 should_use_jndi: Optional[bool] = None,
                 should_validate_server_certificate: Optional[bool] = None,
                 ssl_ca: Optional[str] = None,
                 ssl_cert: Optional[str] = None,
                 ssl_crl: Optional[str] = None,
                 ssl_key: Optional[str] = None,
                 ssl_key_password: Optional[str] = None,
                 ssl_mode: Optional[str] = None,
                 state: Optional[str] = None,
                 stream_pool_id: Optional[str] = None,
                 subnet_id: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 technology_type: Optional[str] = None,
                 tenancy_id: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 trust_store: Optional[str] = None,
                 trust_store_password: Optional[str] = None,
                 url: Optional[str] = None,
                 user_id: Optional[str] = None,
                 username: Optional[str] = None,
                 vault_id: Optional[str] = None,
                 wallet: Optional[str] = None):
        if access_key_id is not None:
            pulumi.set(__self__, "access_key_id", access_key_id)
        if account_key is not None:
            pulumi.set(__self__, "account_key", account_key)
        if account_name is not None:
            pulumi.set(__self__, "account_name", account_name)
        if additional_attributes is not None:
            pulumi.set(__self__, "additional_attributes", additional_attributes)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if azure_tenant_id is not None:
            pulumi.set(__self__, "azure_tenant_id", azure_tenant_id)
        if bootstrap_servers is not None:
            pulumi.set(__self__, "bootstrap_servers", bootstrap_servers)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if connection_factory is not None:
            pulumi.set(__self__, "connection_factory", connection_factory)
        if connection_string is not None:
            pulumi.set(__self__, "connection_string", connection_string)
        if connection_type is not None:
            pulumi.set(__self__, "connection_type", connection_type)
        if connection_url is not None:
            pulumi.set(__self__, "connection_url", connection_url)
        if consumer_properties is not None:
            pulumi.set(__self__, "consumer_properties", consumer_properties)
        if core_site_xml is not None:
            pulumi.set(__self__, "core_site_xml", core_site_xml)
        if database_id is not None:
            pulumi.set(__self__, "database_id", database_id)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if db_system_id is not None:
            pulumi.set(__self__, "db_system_id", db_system_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if deployment_id is not None:
            pulumi.set(__self__, "deployment_id", deployment_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if endpoint is not None:
            pulumi.set(__self__, "endpoint", endpoint)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ingress_ips is not None:
            pulumi.set(__self__, "ingress_ips", ingress_ips)
        if jndi_connection_factory is not None:
            pulumi.set(__self__, "jndi_connection_factory", jndi_connection_factory)
        if jndi_initial_context_factory is not None:
            pulumi.set(__self__, "jndi_initial_context_factory", jndi_initial_context_factory)
        if jndi_provider_url is not None:
            pulumi.set(__self__, "jndi_provider_url", jndi_provider_url)
        if jndi_security_credentials is not None:
            pulumi.set(__self__, "jndi_security_credentials", jndi_security_credentials)
        if jndi_security_principal is not None:
            pulumi.set(__self__, "jndi_security_principal", jndi_security_principal)
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if key_store is not None:
            pulumi.set(__self__, "key_store", key_store)
        if key_store_password is not None:
            pulumi.set(__self__, "key_store_password", key_store_password)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if nsg_ids is not None:
            pulumi.set(__self__, "nsg_ids", nsg_ids)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if private_key_file is not None:
            pulumi.set(__self__, "private_key_file", private_key_file)
        if private_key_passphrase is not None:
            pulumi.set(__self__, "private_key_passphrase", private_key_passphrase)
        if producer_properties is not None:
            pulumi.set(__self__, "producer_properties", producer_properties)
        if public_key_fingerprint is not None:
            pulumi.set(__self__, "public_key_fingerprint", public_key_fingerprint)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if sas_token is not None:
            pulumi.set(__self__, "sas_token", sas_token)
        if secret_access_key is not None:
            pulumi.set(__self__, "secret_access_key", secret_access_key)
        if security_protocol is not None:
            pulumi.set(__self__, "security_protocol", security_protocol)
        if session_mode is not None:
            pulumi.set(__self__, "session_mode", session_mode)
        if should_use_jndi is not None:
            pulumi.set(__self__, "should_use_jndi", should_use_jndi)
        if should_validate_server_certificate is not None:
            pulumi.set(__self__, "should_validate_server_certificate", should_validate_server_certificate)
        if ssl_ca is not None:
            pulumi.set(__self__, "ssl_ca", ssl_ca)
        if ssl_cert is not None:
            pulumi.set(__self__, "ssl_cert", ssl_cert)
        if ssl_crl is not None:
            pulumi.set(__self__, "ssl_crl", ssl_crl)
        if ssl_key is not None:
            pulumi.set(__self__, "ssl_key", ssl_key)
        if ssl_key_password is not None:
            pulumi.set(__self__, "ssl_key_password", ssl_key_password)
        if ssl_mode is not None:
            pulumi.set(__self__, "ssl_mode", ssl_mode)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if stream_pool_id is not None:
            pulumi.set(__self__, "stream_pool_id", stream_pool_id)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if technology_type is not None:
            pulumi.set(__self__, "technology_type", technology_type)
        if tenancy_id is not None:
            pulumi.set(__self__, "tenancy_id", tenancy_id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if trust_store is not None:
            pulumi.set(__self__, "trust_store", trust_store)
        if trust_store_password is not None:
            pulumi.set(__self__, "trust_store_password", trust_store_password)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if vault_id is not None:
            pulumi.set(__self__, "vault_id", vault_id)
        if wallet is not None:
            pulumi.set(__self__, "wallet", wallet)

    @property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> Optional[str]:
        return pulumi.get(self, "access_key_id")

    @property
    @pulumi.getter(name="accountKey")
    def account_key(self) -> Optional[str]:
        return pulumi.get(self, "account_key")

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> Optional[str]:
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter(name="additionalAttributes")
    def additional_attributes(self) -> Optional[Sequence['outputs.GetConnectionsConnectionCollectionItemAdditionalAttributeResult']]:
        return pulumi.get(self, "additional_attributes")

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[str]:
        return pulumi.get(self, "authentication_type")

    @property
    @pulumi.getter(name="azureTenantId")
    def azure_tenant_id(self) -> Optional[str]:
        return pulumi.get(self, "azure_tenant_id")

    @property
    @pulumi.getter(name="bootstrapServers")
    def bootstrap_servers(self) -> Optional[Sequence['outputs.GetConnectionsConnectionCollectionItemBootstrapServerResult']]:
        return pulumi.get(self, "bootstrap_servers")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[str]:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="connectionFactory")
    def connection_factory(self) -> Optional[str]:
        return pulumi.get(self, "connection_factory")

    @property
    @pulumi.getter(name="connectionString")
    def connection_string(self) -> Optional[str]:
        return pulumi.get(self, "connection_string")

    @property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> Optional[str]:
        return pulumi.get(self, "connection_type")

    @property
    @pulumi.getter(name="connectionUrl")
    def connection_url(self) -> Optional[str]:
        return pulumi.get(self, "connection_url")

    @property
    @pulumi.getter(name="consumerProperties")
    def consumer_properties(self) -> Optional[str]:
        return pulumi.get(self, "consumer_properties")

    @property
    @pulumi.getter(name="coreSiteXml")
    def core_site_xml(self) -> Optional[str]:
        return pulumi.get(self, "core_site_xml")

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> Optional[str]:
        return pulumi.get(self, "database_id")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[str]:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="dbSystemId")
    def db_system_id(self) -> Optional[str]:
        return pulumi.get(self, "db_system_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="deploymentId")
    def deployment_id(self) -> Optional[str]:
        return pulumi.get(self, "deployment_id")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[str]:
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ingressIps")
    def ingress_ips(self) -> Optional[Sequence['outputs.GetConnectionsConnectionCollectionItemIngressIpResult']]:
        return pulumi.get(self, "ingress_ips")

    @property
    @pulumi.getter(name="jndiConnectionFactory")
    def jndi_connection_factory(self) -> Optional[str]:
        return pulumi.get(self, "jndi_connection_factory")

    @property
    @pulumi.getter(name="jndiInitialContextFactory")
    def jndi_initial_context_factory(self) -> Optional[str]:
        return pulumi.get(self, "jndi_initial_context_factory")

    @property
    @pulumi.getter(name="jndiProviderUrl")
    def jndi_provider_url(self) -> Optional[str]:
        return pulumi.get(self, "jndi_provider_url")

    @property
    @pulumi.getter(name="jndiSecurityCredentials")
    def jndi_security_credentials(self) -> Optional[str]:
        return pulumi.get(self, "jndi_security_credentials")

    @property
    @pulumi.getter(name="jndiSecurityPrincipal")
    def jndi_security_principal(self) -> Optional[str]:
        return pulumi.get(self, "jndi_security_principal")

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[str]:
        return pulumi.get(self, "key_id")

    @property
    @pulumi.getter(name="keyStore")
    def key_store(self) -> Optional[str]:
        return pulumi.get(self, "key_store")

    @property
    @pulumi.getter(name="keyStorePassword")
    def key_store_password(self) -> Optional[str]:
        return pulumi.get(self, "key_store_password")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "nsg_ids")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[str]:
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="privateKeyFile")
    def private_key_file(self) -> Optional[str]:
        return pulumi.get(self, "private_key_file")

    @property
    @pulumi.getter(name="privateKeyPassphrase")
    def private_key_passphrase(self) -> Optional[str]:
        return pulumi.get(self, "private_key_passphrase")

    @property
    @pulumi.getter(name="producerProperties")
    def producer_properties(self) -> Optional[str]:
        return pulumi.get(self, "producer_properties")

    @property
    @pulumi.getter(name="publicKeyFingerprint")
    def public_key_fingerprint(self) -> Optional[str]:
        return pulumi.get(self, "public_key_fingerprint")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="sasToken")
    def sas_token(self) -> Optional[str]:
        return pulumi.get(self, "sas_token")

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> Optional[str]:
        return pulumi.get(self, "secret_access_key")

    @property
    @pulumi.getter(name="securityProtocol")
    def security_protocol(self) -> Optional[str]:
        return pulumi.get(self, "security_protocol")

    @property
    @pulumi.getter(name="sessionMode")
    def session_mode(self) -> Optional[str]:
        return pulumi.get(self, "session_mode")

    @property
    @pulumi.getter(name="shouldUseJndi")
    def should_use_jndi(self) -> Optional[bool]:
        return pulumi.get(self, "should_use_jndi")

    @property
    @pulumi.getter(name="shouldValidateServerCertificate")
    def should_validate_server_certificate(self) -> Optional[bool]:
        return pulumi.get(self, "should_validate_server_certificate")

    @property
    @pulumi.getter(name="sslCa")
    def ssl_ca(self) -> Optional[str]:
        return pulumi.get(self, "ssl_ca")

    @property
    @pulumi.getter(name="sslCert")
    def ssl_cert(self) -> Optional[str]:
        return pulumi.get(self, "ssl_cert")

    @property
    @pulumi.getter(name="sslCrl")
    def ssl_crl(self) -> Optional[str]:
        return pulumi.get(self, "ssl_crl")

    @property
    @pulumi.getter(name="sslKey")
    def ssl_key(self) -> Optional[str]:
        return pulumi.get(self, "ssl_key")

    @property
    @pulumi.getter(name="sslKeyPassword")
    def ssl_key_password(self) -> Optional[str]:
        return pulumi.get(self, "ssl_key_password")

    @property
    @pulumi.getter(name="sslMode")
    def ssl_mode(self) -> Optional[str]:
        return pulumi.get(self, "ssl_mode")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="streamPoolId")
    def stream_pool_id(self) -> Optional[str]:
        return pulumi.get(self, "stream_pool_id")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="technologyType")
    def technology_type(self) -> Optional[str]:
        return pulumi.get(self, "technology_type")

    @property
    @pulumi.getter(name="tenancyId")
    def tenancy_id(self) -> Optional[str]:
        return pulumi.get(self, "tenancy_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="trustStore")
    def trust_store(self) -> Optional[str]:
        return pulumi.get(self, "trust_store")

    @property
    @pulumi.getter(name="trustStorePassword")
    def trust_store_password(self) -> Optional[str]:
        return pulumi.get(self, "trust_store_password")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[str]:
        return pulumi.get(self, "user_id")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")

    @property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> Optional[str]:
        return pulumi.get(self, "vault_id")

    @property
    @pulumi.getter
    def wallet(self) -> Optional[str]:
        return pulumi.get(self, "wallet")


@pulumi.output_type
class GetConnectionsConnectionCollectionItemAdditionalAttributeResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetConnectionsConnectionCollectionItemBootstrapServerResult(dict):
    def __init__(__self__, *,
                 host: Optional[str] = None,
                 port: Optional[int] = None,
                 private_ip: Optional[str] = None):
        if host is not None:
            pulumi.set(__self__, "host", host)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[str]:
        return pulumi.get(self, "private_ip")


@pulumi.output_type
class GetConnectionsConnectionCollectionItemIngressIpResult(dict):
    def __init__(__self__, *,
                 ingress_ip: Optional[str] = None):
        if ingress_ip is not None:
            pulumi.set(__self__, "ingress_ip", ingress_ip)

    @property
    @pulumi.getter(name="ingressIp")
    def ingress_ip(self) -> Optional[str]:
        return pulumi.get(self, "ingress_ip")


@pulumi.output_type
class GetConnectionsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDatabaseRegistrationsDatabaseRegistrationCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDatabaseRegistrationsDatabaseRegistrationCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDatabaseRegistrationsDatabaseRegistrationCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDatabaseRegistrationsDatabaseRegistrationCollectionItemResult(dict):
    def __init__(__self__, *,
                 alias_name: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 connection_string: Optional[str] = None,
                 database_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 fqdn: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 ip_address: Optional[str] = None,
                 key_id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 password: Optional[str] = None,
                 rce_private_ip: Optional[str] = None,
                 secret_compartment_id: Optional[str] = None,
                 secret_id: Optional[str] = None,
                 session_mode: Optional[str] = None,
                 state: Optional[str] = None,
                 subnet_id: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 username: Optional[str] = None,
                 vault_id: Optional[str] = None,
                 wallet: Optional[str] = None):
        if alias_name is not None:
            pulumi.set(__self__, "alias_name", alias_name)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if connection_string is not None:
            pulumi.set(__self__, "connection_string", connection_string)
        if database_id is not None:
            pulumi.set(__self__, "database_id", database_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if fqdn is not None:
            pulumi.set(__self__, "fqdn", fqdn)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if rce_private_ip is not None:
            pulumi.set(__self__, "rce_private_ip", rce_private_ip)
        if secret_compartment_id is not None:
            pulumi.set(__self__, "secret_compartment_id", secret_compartment_id)
        if secret_id is not None:
            pulumi.set(__self__, "secret_id", secret_id)
        if session_mode is not None:
            pulumi.set(__self__, "session_mode", session_mode)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if vault_id is not None:
            pulumi.set(__self__, "vault_id", vault_id)
        if wallet is not None:
            pulumi.set(__self__, "wallet", wallet)

    @property
    @pulumi.getter(name="aliasName")
    def alias_name(self) -> Optional[str]:
        return pulumi.get(self, "alias_name")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="connectionString")
    def connection_string(self) -> Optional[str]:
        return pulumi.get(self, "connection_string")

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> Optional[str]:
        return pulumi.get(self, "database_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def fqdn(self) -> Optional[str]:
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[str]:
        return pulumi.get(self, "key_id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="rcePrivateIp")
    def rce_private_ip(self) -> Optional[str]:
        return pulumi.get(self, "rce_private_ip")

    @property
    @pulumi.getter(name="secretCompartmentId")
    def secret_compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "secret_compartment_id")

    @property
    @pulumi.getter(name="secretId")
    def secret_id(self) -> Optional[str]:
        return pulumi.get(self, "secret_id")

    @property
    @pulumi.getter(name="sessionMode")
    def session_mode(self) -> Optional[str]:
        return pulumi.get(self, "session_mode")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")

    @property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> Optional[str]:
        return pulumi.get(self, "vault_id")

    @property
    @pulumi.getter
    def wallet(self) -> Optional[str]:
        return pulumi.get(self, "wallet")


@pulumi.output_type
class GetDatabaseRegistrationsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDeploymentBackupsDeploymentBackupCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeploymentBackupsDeploymentBackupCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeploymentBackupsDeploymentBackupCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentBackupsDeploymentBackupCollectionItemResult(dict):
    def __init__(__self__, *,
                 backup_type: Optional[str] = None,
                 bucket: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 deployment_id: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 is_automatic: Optional[bool] = None,
                 lifecycle_details: Optional[str] = None,
                 namespace: Optional[str] = None,
                 object: Optional[str] = None,
                 ogg_version: Optional[str] = None,
                 size_in_bytes: Optional[float] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_backup_finished: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_of_backup: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if backup_type is not None:
            pulumi.set(__self__, "backup_type", backup_type)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if deployment_id is not None:
            pulumi.set(__self__, "deployment_id", deployment_id)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_automatic is not None:
            pulumi.set(__self__, "is_automatic", is_automatic)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if object is not None:
            pulumi.set(__self__, "object", object)
        if ogg_version is not None:
            pulumi.set(__self__, "ogg_version", ogg_version)
        if size_in_bytes is not None:
            pulumi.set(__self__, "size_in_bytes", size_in_bytes)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_backup_finished is not None:
            pulumi.set(__self__, "time_backup_finished", time_backup_finished)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_of_backup is not None:
            pulumi.set(__self__, "time_of_backup", time_of_backup)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="backupType")
    def backup_type(self) -> Optional[str]:
        return pulumi.get(self, "backup_type")

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="deploymentId")
    def deployment_id(self) -> Optional[str]:
        return pulumi.get(self, "deployment_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isAutomatic")
    def is_automatic(self) -> Optional[bool]:
        return pulumi.get(self, "is_automatic")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> Optional[str]:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter(name="oggVersion")
    def ogg_version(self) -> Optional[str]:
        return pulumi.get(self, "ogg_version")

    @property
    @pulumi.getter(name="sizeInBytes")
    def size_in_bytes(self) -> Optional[float]:
        return pulumi.get(self, "size_in_bytes")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeBackupFinished")
    def time_backup_finished(self) -> Optional[str]:
        return pulumi.get(self, "time_backup_finished")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeOfBackup")
    def time_of_backup(self) -> Optional[str]:
        return pulumi.get(self, "time_of_backup")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetDeploymentBackupsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDeploymentDeploymentDiagnosticDataResult(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 diagnostic_state: Optional[str] = None,
                 namespace: Optional[str] = None,
                 object: Optional[str] = None,
                 time_diagnostic_end: Optional[str] = None,
                 time_diagnostic_start: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if diagnostic_state is not None:
            pulumi.set(__self__, "diagnostic_state", diagnostic_state)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if object is not None:
            pulumi.set(__self__, "object", object)
        if time_diagnostic_end is not None:
            pulumi.set(__self__, "time_diagnostic_end", time_diagnostic_end)
        if time_diagnostic_start is not None:
            pulumi.set(__self__, "time_diagnostic_start", time_diagnostic_start)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="diagnosticState")
    def diagnostic_state(self) -> Optional[str]:
        return pulumi.get(self, "diagnostic_state")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> Optional[str]:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter(name="timeDiagnosticEnd")
    def time_diagnostic_end(self) -> Optional[str]:
        return pulumi.get(self, "time_diagnostic_end")

    @property
    @pulumi.getter(name="timeDiagnosticStart")
    def time_diagnostic_start(self) -> Optional[str]:
        return pulumi.get(self, "time_diagnostic_start")


@pulumi.output_type
class GetDeploymentMaintenanceConfigurationResult(dict):
    def __init__(__self__, *,
                 bundle_release_upgrade_period_in_days: Optional[int] = None,
                 interim_release_upgrade_period_in_days: Optional[int] = None,
                 is_interim_release_auto_upgrade_enabled: Optional[bool] = None,
                 major_release_upgrade_period_in_days: Optional[int] = None,
                 security_patch_upgrade_period_in_days: Optional[int] = None):
        if bundle_release_upgrade_period_in_days is not None:
            pulumi.set(__self__, "bundle_release_upgrade_period_in_days", bundle_release_upgrade_period_in_days)
        if interim_release_upgrade_period_in_days is not None:
            pulumi.set(__self__, "interim_release_upgrade_period_in_days", interim_release_upgrade_period_in_days)
        if is_interim_release_auto_upgrade_enabled is not None:
            pulumi.set(__self__, "is_interim_release_auto_upgrade_enabled", is_interim_release_auto_upgrade_enabled)
        if major_release_upgrade_period_in_days is not None:
            pulumi.set(__self__, "major_release_upgrade_period_in_days", major_release_upgrade_period_in_days)
        if security_patch_upgrade_period_in_days is not None:
            pulumi.set(__self__, "security_patch_upgrade_period_in_days", security_patch_upgrade_period_in_days)

    @property
    @pulumi.getter(name="bundleReleaseUpgradePeriodInDays")
    def bundle_release_upgrade_period_in_days(self) -> Optional[int]:
        return pulumi.get(self, "bundle_release_upgrade_period_in_days")

    @property
    @pulumi.getter(name="interimReleaseUpgradePeriodInDays")
    def interim_release_upgrade_period_in_days(self) -> Optional[int]:
        return pulumi.get(self, "interim_release_upgrade_period_in_days")

    @property
    @pulumi.getter(name="isInterimReleaseAutoUpgradeEnabled")
    def is_interim_release_auto_upgrade_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_interim_release_auto_upgrade_enabled")

    @property
    @pulumi.getter(name="majorReleaseUpgradePeriodInDays")
    def major_release_upgrade_period_in_days(self) -> Optional[int]:
        return pulumi.get(self, "major_release_upgrade_period_in_days")

    @property
    @pulumi.getter(name="securityPatchUpgradePeriodInDays")
    def security_patch_upgrade_period_in_days(self) -> Optional[int]:
        return pulumi.get(self, "security_patch_upgrade_period_in_days")


@pulumi.output_type
class GetDeploymentMaintenanceWindowResult(dict):
    def __init__(__self__, *,
                 day: Optional[str] = None,
                 start_hour: Optional[int] = None):
        if day is not None:
            pulumi.set(__self__, "day", day)
        if start_hour is not None:
            pulumi.set(__self__, "start_hour", start_hour)

    @property
    @pulumi.getter
    def day(self) -> Optional[str]:
        return pulumi.get(self, "day")

    @property
    @pulumi.getter(name="startHour")
    def start_hour(self) -> Optional[int]:
        return pulumi.get(self, "start_hour")


@pulumi.output_type
class GetDeploymentOggDataResult(dict):
    def __init__(__self__, *,
                 admin_password: Optional[str] = None,
                 admin_username: Optional[str] = None,
                 certificate: Optional[str] = None,
                 credential_store: Optional[str] = None,
                 deployment_name: Optional[str] = None,
                 identity_domain_id: Optional[str] = None,
                 key: Optional[str] = None,
                 ogg_version: Optional[str] = None,
                 password_secret_id: Optional[str] = None):
        if admin_password is not None:
            pulumi.set(__self__, "admin_password", admin_password)
        if admin_username is not None:
            pulumi.set(__self__, "admin_username", admin_username)
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if credential_store is not None:
            pulumi.set(__self__, "credential_store", credential_store)
        if deployment_name is not None:
            pulumi.set(__self__, "deployment_name", deployment_name)
        if identity_domain_id is not None:
            pulumi.set(__self__, "identity_domain_id", identity_domain_id)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if ogg_version is not None:
            pulumi.set(__self__, "ogg_version", ogg_version)
        if password_secret_id is not None:
            pulumi.set(__self__, "password_secret_id", password_secret_id)

    @property
    @pulumi.getter(name="adminPassword")
    def admin_password(self) -> Optional[str]:
        return pulumi.get(self, "admin_password")

    @property
    @pulumi.getter(name="adminUsername")
    def admin_username(self) -> Optional[str]:
        return pulumi.get(self, "admin_username")

    @property
    @pulumi.getter
    def certificate(self) -> Optional[str]:
        return pulumi.get(self, "certificate")

    @property
    @pulumi.getter(name="credentialStore")
    def credential_store(self) -> Optional[str]:
        return pulumi.get(self, "credential_store")

    @property
    @pulumi.getter(name="deploymentName")
    def deployment_name(self) -> Optional[str]:
        return pulumi.get(self, "deployment_name")

    @property
    @pulumi.getter(name="identityDomainId")
    def identity_domain_id(self) -> Optional[str]:
        return pulumi.get(self, "identity_domain_id")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="oggVersion")
    def ogg_version(self) -> Optional[str]:
        return pulumi.get(self, "ogg_version")

    @property
    @pulumi.getter(name="passwordSecretId")
    def password_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "password_secret_id")


@pulumi.output_type
class GetDeploymentTypeItemResult(dict):
    def __init__(__self__, *,
                 category: Optional[str] = None,
                 connection_types: Optional[Sequence[str]] = None,
                 deployment_type: Optional[str] = None,
                 display_name: Optional[str] = None,
                 source_technologies: Optional[Sequence[str]] = None,
                 target_technologies: Optional[Sequence[str]] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if connection_types is not None:
            pulumi.set(__self__, "connection_types", connection_types)
        if deployment_type is not None:
            pulumi.set(__self__, "deployment_type", deployment_type)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if source_technologies is not None:
            pulumi.set(__self__, "source_technologies", source_technologies)
        if target_technologies is not None:
            pulumi.set(__self__, "target_technologies", target_technologies)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter(name="connectionTypes")
    def connection_types(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "connection_types")

    @property
    @pulumi.getter(name="deploymentType")
    def deployment_type(self) -> Optional[str]:
        return pulumi.get(self, "deployment_type")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="sourceTechnologies")
    def source_technologies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "source_technologies")

    @property
    @pulumi.getter(name="targetTechnologies")
    def target_technologies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "target_technologies")


@pulumi.output_type
class GetDeploymentTypesDeploymentTypeCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeploymentTypesDeploymentTypeCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeploymentTypesDeploymentTypeCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentTypesDeploymentTypeCollectionItemResult(dict):
    def __init__(__self__, *,
                 category: Optional[str] = None,
                 connection_types: Optional[Sequence[str]] = None,
                 deployment_type: Optional[str] = None,
                 display_name: Optional[str] = None,
                 ogg_version: Optional[str] = None,
                 source_technologies: Optional[Sequence[str]] = None,
                 target_technologies: Optional[Sequence[str]] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if connection_types is not None:
            pulumi.set(__self__, "connection_types", connection_types)
        if deployment_type is not None:
            pulumi.set(__self__, "deployment_type", deployment_type)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if ogg_version is not None:
            pulumi.set(__self__, "ogg_version", ogg_version)
        if source_technologies is not None:
            pulumi.set(__self__, "source_technologies", source_technologies)
        if target_technologies is not None:
            pulumi.set(__self__, "target_technologies", target_technologies)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter(name="connectionTypes")
    def connection_types(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "connection_types")

    @property
    @pulumi.getter(name="deploymentType")
    def deployment_type(self) -> Optional[str]:
        return pulumi.get(self, "deployment_type")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="oggVersion")
    def ogg_version(self) -> Optional[str]:
        return pulumi.get(self, "ogg_version")

    @property
    @pulumi.getter(name="sourceTechnologies")
    def source_technologies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "source_technologies")

    @property
    @pulumi.getter(name="targetTechnologies")
    def target_technologies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "target_technologies")


@pulumi.output_type
class GetDeploymentTypesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDeploymentUpgradesDeploymentUpgradeCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeploymentUpgradesDeploymentUpgradeCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeploymentUpgradesDeploymentUpgradeCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentUpgradesDeploymentUpgradeCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 deployment_id: Optional[str] = None,
                 deployment_upgrade_type: Optional[str] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 is_cancel_allowed: Optional[bool] = None,
                 is_reschedule_allowed: Optional[bool] = None,
                 is_rollback_allowed: Optional[bool] = None,
                 is_security_fix: Optional[bool] = None,
                 is_snoozed: Optional[bool] = None,
                 lifecycle_details: Optional[str] = None,
                 lifecycle_sub_state: Optional[str] = None,
                 ogg_version: Optional[str] = None,
                 previous_ogg_version: Optional[str] = None,
                 release_type: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_finished: Optional[str] = None,
                 time_ogg_version_supported_until: Optional[str] = None,
                 time_released: Optional[str] = None,
                 time_schedule: Optional[str] = None,
                 time_schedule_max: Optional[str] = None,
                 time_snoozed_until: Optional[str] = None,
                 time_started: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if deployment_id is not None:
            pulumi.set(__self__, "deployment_id", deployment_id)
        if deployment_upgrade_type is not None:
            pulumi.set(__self__, "deployment_upgrade_type", deployment_upgrade_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_cancel_allowed is not None:
            pulumi.set(__self__, "is_cancel_allowed", is_cancel_allowed)
        if is_reschedule_allowed is not None:
            pulumi.set(__self__, "is_reschedule_allowed", is_reschedule_allowed)
        if is_rollback_allowed is not None:
            pulumi.set(__self__, "is_rollback_allowed", is_rollback_allowed)
        if is_security_fix is not None:
            pulumi.set(__self__, "is_security_fix", is_security_fix)
        if is_snoozed is not None:
            pulumi.set(__self__, "is_snoozed", is_snoozed)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if lifecycle_sub_state is not None:
            pulumi.set(__self__, "lifecycle_sub_state", lifecycle_sub_state)
        if ogg_version is not None:
            pulumi.set(__self__, "ogg_version", ogg_version)
        if previous_ogg_version is not None:
            pulumi.set(__self__, "previous_ogg_version", previous_ogg_version)
        if release_type is not None:
            pulumi.set(__self__, "release_type", release_type)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_finished is not None:
            pulumi.set(__self__, "time_finished", time_finished)
        if time_ogg_version_supported_until is not None:
            pulumi.set(__self__, "time_ogg_version_supported_until", time_ogg_version_supported_until)
        if time_released is not None:
            pulumi.set(__self__, "time_released", time_released)
        if time_schedule is not None:
            pulumi.set(__self__, "time_schedule", time_schedule)
        if time_schedule_max is not None:
            pulumi.set(__self__, "time_schedule_max", time_schedule_max)
        if time_snoozed_until is not None:
            pulumi.set(__self__, "time_snoozed_until", time_snoozed_until)
        if time_started is not None:
            pulumi.set(__self__, "time_started", time_started)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="deploymentId")
    def deployment_id(self) -> Optional[str]:
        return pulumi.get(self, "deployment_id")

    @property
    @pulumi.getter(name="deploymentUpgradeType")
    def deployment_upgrade_type(self) -> Optional[str]:
        return pulumi.get(self, "deployment_upgrade_type")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isCancelAllowed")
    def is_cancel_allowed(self) -> Optional[bool]:
        return pulumi.get(self, "is_cancel_allowed")

    @property
    @pulumi.getter(name="isRescheduleAllowed")
    def is_reschedule_allowed(self) -> Optional[bool]:
        return pulumi.get(self, "is_reschedule_allowed")

    @property
    @pulumi.getter(name="isRollbackAllowed")
    def is_rollback_allowed(self) -> Optional[bool]:
        return pulumi.get(self, "is_rollback_allowed")

    @property
    @pulumi.getter(name="isSecurityFix")
    def is_security_fix(self) -> Optional[bool]:
        return pulumi.get(self, "is_security_fix")

    @property
    @pulumi.getter(name="isSnoozed")
    def is_snoozed(self) -> Optional[bool]:
        return pulumi.get(self, "is_snoozed")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="lifecycleSubState")
    def lifecycle_sub_state(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_sub_state")

    @property
    @pulumi.getter(name="oggVersion")
    def ogg_version(self) -> Optional[str]:
        return pulumi.get(self, "ogg_version")

    @property
    @pulumi.getter(name="previousOggVersion")
    def previous_ogg_version(self) -> Optional[str]:
        return pulumi.get(self, "previous_ogg_version")

    @property
    @pulumi.getter(name="releaseType")
    def release_type(self) -> Optional[str]:
        return pulumi.get(self, "release_type")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeFinished")
    def time_finished(self) -> Optional[str]:
        return pulumi.get(self, "time_finished")

    @property
    @pulumi.getter(name="timeOggVersionSupportedUntil")
    def time_ogg_version_supported_until(self) -> Optional[str]:
        return pulumi.get(self, "time_ogg_version_supported_until")

    @property
    @pulumi.getter(name="timeReleased")
    def time_released(self) -> Optional[str]:
        return pulumi.get(self, "time_released")

    @property
    @pulumi.getter(name="timeSchedule")
    def time_schedule(self) -> Optional[str]:
        return pulumi.get(self, "time_schedule")

    @property
    @pulumi.getter(name="timeScheduleMax")
    def time_schedule_max(self) -> Optional[str]:
        return pulumi.get(self, "time_schedule_max")

    @property
    @pulumi.getter(name="timeSnoozedUntil")
    def time_snoozed_until(self) -> Optional[str]:
        return pulumi.get(self, "time_snoozed_until")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> Optional[str]:
        return pulumi.get(self, "time_started")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetDeploymentUpgradesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDeploymentVersionsDeploymentVersionCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeploymentVersionsDeploymentVersionCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeploymentVersionsDeploymentVersionCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentVersionsDeploymentVersionCollectionItemResult(dict):
    def __init__(__self__, *,
                 deployment_type: Optional[str] = None,
                 is_security_fix: Optional[bool] = None,
                 ogg_version: Optional[str] = None,
                 release_type: Optional[str] = None,
                 time_released: Optional[str] = None,
                 time_supported_until: Optional[str] = None):
        if deployment_type is not None:
            pulumi.set(__self__, "deployment_type", deployment_type)
        if is_security_fix is not None:
            pulumi.set(__self__, "is_security_fix", is_security_fix)
        if ogg_version is not None:
            pulumi.set(__self__, "ogg_version", ogg_version)
        if release_type is not None:
            pulumi.set(__self__, "release_type", release_type)
        if time_released is not None:
            pulumi.set(__self__, "time_released", time_released)
        if time_supported_until is not None:
            pulumi.set(__self__, "time_supported_until", time_supported_until)

    @property
    @pulumi.getter(name="deploymentType")
    def deployment_type(self) -> Optional[str]:
        return pulumi.get(self, "deployment_type")

    @property
    @pulumi.getter(name="isSecurityFix")
    def is_security_fix(self) -> Optional[bool]:
        return pulumi.get(self, "is_security_fix")

    @property
    @pulumi.getter(name="oggVersion")
    def ogg_version(self) -> Optional[str]:
        return pulumi.get(self, "ogg_version")

    @property
    @pulumi.getter(name="releaseType")
    def release_type(self) -> Optional[str]:
        return pulumi.get(self, "release_type")

    @property
    @pulumi.getter(name="timeReleased")
    def time_released(self) -> Optional[str]:
        return pulumi.get(self, "time_released")

    @property
    @pulumi.getter(name="timeSupportedUntil")
    def time_supported_until(self) -> Optional[str]:
        return pulumi.get(self, "time_supported_until")


@pulumi.output_type
class GetDeploymentVersionsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 cpu_core_count: Optional[int] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 deployment_backup_id: Optional[str] = None,
                 deployment_diagnostic_datas: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionItemDeploymentDiagnosticDataResult']] = None,
                 deployment_type: Optional[str] = None,
                 deployment_url: Optional[str] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 fqdn: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 is_auto_scaling_enabled: Optional[bool] = None,
                 is_healthy: Optional[bool] = None,
                 is_latest_version: Optional[bool] = None,
                 is_public: Optional[bool] = None,
                 is_storage_utilization_limit_exceeded: Optional[bool] = None,
                 license_model: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 lifecycle_sub_state: Optional[str] = None,
                 maintenance_configurations: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionItemMaintenanceConfigurationResult']] = None,
                 maintenance_windows: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionItemMaintenanceWindowResult']] = None,
                 next_maintenance_action_type: Optional[str] = None,
                 next_maintenance_description: Optional[str] = None,
                 nsg_ids: Optional[Sequence[str]] = None,
                 ogg_datas: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionItemOggDataResult']] = None,
                 private_ip_address: Optional[str] = None,
                 public_ip_address: Optional[str] = None,
                 state: Optional[str] = None,
                 storage_utilization_in_bytes: Optional[str] = None,
                 subnet_id: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_of_next_maintenance: Optional[str] = None,
                 time_ogg_version_supported_until: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 time_upgrade_required: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if cpu_core_count is not None:
            pulumi.set(__self__, "cpu_core_count", cpu_core_count)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if deployment_backup_id is not None:
            pulumi.set(__self__, "deployment_backup_id", deployment_backup_id)
        if deployment_diagnostic_datas is not None:
            pulumi.set(__self__, "deployment_diagnostic_datas", deployment_diagnostic_datas)
        if deployment_type is not None:
            pulumi.set(__self__, "deployment_type", deployment_type)
        if deployment_url is not None:
            pulumi.set(__self__, "deployment_url", deployment_url)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if fqdn is not None:
            pulumi.set(__self__, "fqdn", fqdn)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_auto_scaling_enabled is not None:
            pulumi.set(__self__, "is_auto_scaling_enabled", is_auto_scaling_enabled)
        if is_healthy is not None:
            pulumi.set(__self__, "is_healthy", is_healthy)
        if is_latest_version is not None:
            pulumi.set(__self__, "is_latest_version", is_latest_version)
        if is_public is not None:
            pulumi.set(__self__, "is_public", is_public)
        if is_storage_utilization_limit_exceeded is not None:
            pulumi.set(__self__, "is_storage_utilization_limit_exceeded", is_storage_utilization_limit_exceeded)
        if license_model is not None:
            pulumi.set(__self__, "license_model", license_model)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if lifecycle_sub_state is not None:
            pulumi.set(__self__, "lifecycle_sub_state", lifecycle_sub_state)
        if maintenance_configurations is not None:
            pulumi.set(__self__, "maintenance_configurations", maintenance_configurations)
        if maintenance_windows is not None:
            pulumi.set(__self__, "maintenance_windows", maintenance_windows)
        if next_maintenance_action_type is not None:
            pulumi.set(__self__, "next_maintenance_action_type", next_maintenance_action_type)
        if next_maintenance_description is not None:
            pulumi.set(__self__, "next_maintenance_description", next_maintenance_description)
        if nsg_ids is not None:
            pulumi.set(__self__, "nsg_ids", nsg_ids)
        if ogg_datas is not None:
            pulumi.set(__self__, "ogg_datas", ogg_datas)
        if private_ip_address is not None:
            pulumi.set(__self__, "private_ip_address", private_ip_address)
        if public_ip_address is not None:
            pulumi.set(__self__, "public_ip_address", public_ip_address)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if storage_utilization_in_bytes is not None:
            pulumi.set(__self__, "storage_utilization_in_bytes", storage_utilization_in_bytes)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_of_next_maintenance is not None:
            pulumi.set(__self__, "time_of_next_maintenance", time_of_next_maintenance)
        if time_ogg_version_supported_until is not None:
            pulumi.set(__self__, "time_ogg_version_supported_until", time_ogg_version_supported_until)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if time_upgrade_required is not None:
            pulumi.set(__self__, "time_upgrade_required", time_upgrade_required)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="cpuCoreCount")
    def cpu_core_count(self) -> Optional[int]:
        return pulumi.get(self, "cpu_core_count")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="deploymentBackupId")
    def deployment_backup_id(self) -> Optional[str]:
        return pulumi.get(self, "deployment_backup_id")

    @property
    @pulumi.getter(name="deploymentDiagnosticDatas")
    def deployment_diagnostic_datas(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionItemDeploymentDiagnosticDataResult']]:
        return pulumi.get(self, "deployment_diagnostic_datas")

    @property
    @pulumi.getter(name="deploymentType")
    def deployment_type(self) -> Optional[str]:
        return pulumi.get(self, "deployment_type")

    @property
    @pulumi.getter(name="deploymentUrl")
    def deployment_url(self) -> Optional[str]:
        return pulumi.get(self, "deployment_url")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def fqdn(self) -> Optional[str]:
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isAutoScalingEnabled")
    def is_auto_scaling_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_auto_scaling_enabled")

    @property
    @pulumi.getter(name="isHealthy")
    def is_healthy(self) -> Optional[bool]:
        return pulumi.get(self, "is_healthy")

    @property
    @pulumi.getter(name="isLatestVersion")
    def is_latest_version(self) -> Optional[bool]:
        return pulumi.get(self, "is_latest_version")

    @property
    @pulumi.getter(name="isPublic")
    def is_public(self) -> Optional[bool]:
        return pulumi.get(self, "is_public")

    @property
    @pulumi.getter(name="isStorageUtilizationLimitExceeded")
    def is_storage_utilization_limit_exceeded(self) -> Optional[bool]:
        return pulumi.get(self, "is_storage_utilization_limit_exceeded")

    @property
    @pulumi.getter(name="licenseModel")
    def license_model(self) -> Optional[str]:
        return pulumi.get(self, "license_model")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="lifecycleSubState")
    def lifecycle_sub_state(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_sub_state")

    @property
    @pulumi.getter(name="maintenanceConfigurations")
    def maintenance_configurations(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionItemMaintenanceConfigurationResult']]:
        return pulumi.get(self, "maintenance_configurations")

    @property
    @pulumi.getter(name="maintenanceWindows")
    def maintenance_windows(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionItemMaintenanceWindowResult']]:
        return pulumi.get(self, "maintenance_windows")

    @property
    @pulumi.getter(name="nextMaintenanceActionType")
    def next_maintenance_action_type(self) -> Optional[str]:
        return pulumi.get(self, "next_maintenance_action_type")

    @property
    @pulumi.getter(name="nextMaintenanceDescription")
    def next_maintenance_description(self) -> Optional[str]:
        return pulumi.get(self, "next_maintenance_description")

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "nsg_ids")

    @property
    @pulumi.getter(name="oggDatas")
    def ogg_datas(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionItemOggDataResult']]:
        return pulumi.get(self, "ogg_datas")

    @property
    @pulumi.getter(name="privateIpAddress")
    def private_ip_address(self) -> Optional[str]:
        return pulumi.get(self, "private_ip_address")

    @property
    @pulumi.getter(name="publicIpAddress")
    def public_ip_address(self) -> Optional[str]:
        return pulumi.get(self, "public_ip_address")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="storageUtilizationInBytes")
    def storage_utilization_in_bytes(self) -> Optional[str]:
        return pulumi.get(self, "storage_utilization_in_bytes")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeOfNextMaintenance")
    def time_of_next_maintenance(self) -> Optional[str]:
        return pulumi.get(self, "time_of_next_maintenance")

    @property
    @pulumi.getter(name="timeOggVersionSupportedUntil")
    def time_ogg_version_supported_until(self) -> Optional[str]:
        return pulumi.get(self, "time_ogg_version_supported_until")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="timeUpgradeRequired")
    def time_upgrade_required(self) -> Optional[str]:
        return pulumi.get(self, "time_upgrade_required")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionItemDeploymentDiagnosticDataResult(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 diagnostic_state: Optional[str] = None,
                 namespace: Optional[str] = None,
                 object: Optional[str] = None,
                 time_diagnostic_end: Optional[str] = None,
                 time_diagnostic_start: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if diagnostic_state is not None:
            pulumi.set(__self__, "diagnostic_state", diagnostic_state)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if object is not None:
            pulumi.set(__self__, "object", object)
        if time_diagnostic_end is not None:
            pulumi.set(__self__, "time_diagnostic_end", time_diagnostic_end)
        if time_diagnostic_start is not None:
            pulumi.set(__self__, "time_diagnostic_start", time_diagnostic_start)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="diagnosticState")
    def diagnostic_state(self) -> Optional[str]:
        return pulumi.get(self, "diagnostic_state")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> Optional[str]:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter(name="timeDiagnosticEnd")
    def time_diagnostic_end(self) -> Optional[str]:
        return pulumi.get(self, "time_diagnostic_end")

    @property
    @pulumi.getter(name="timeDiagnosticStart")
    def time_diagnostic_start(self) -> Optional[str]:
        return pulumi.get(self, "time_diagnostic_start")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionItemMaintenanceConfigurationResult(dict):
    def __init__(__self__, *,
                 bundle_release_upgrade_period_in_days: Optional[int] = None,
                 interim_release_upgrade_period_in_days: Optional[int] = None,
                 is_interim_release_auto_upgrade_enabled: Optional[bool] = None,
                 major_release_upgrade_period_in_days: Optional[int] = None,
                 security_patch_upgrade_period_in_days: Optional[int] = None):
        if bundle_release_upgrade_period_in_days is not None:
            pulumi.set(__self__, "bundle_release_upgrade_period_in_days", bundle_release_upgrade_period_in_days)
        if interim_release_upgrade_period_in_days is not None:
            pulumi.set(__self__, "interim_release_upgrade_period_in_days", interim_release_upgrade_period_in_days)
        if is_interim_release_auto_upgrade_enabled is not None:
            pulumi.set(__self__, "is_interim_release_auto_upgrade_enabled", is_interim_release_auto_upgrade_enabled)
        if major_release_upgrade_period_in_days is not None:
            pulumi.set(__self__, "major_release_upgrade_period_in_days", major_release_upgrade_period_in_days)
        if security_patch_upgrade_period_in_days is not None:
            pulumi.set(__self__, "security_patch_upgrade_period_in_days", security_patch_upgrade_period_in_days)

    @property
    @pulumi.getter(name="bundleReleaseUpgradePeriodInDays")
    def bundle_release_upgrade_period_in_days(self) -> Optional[int]:
        return pulumi.get(self, "bundle_release_upgrade_period_in_days")

    @property
    @pulumi.getter(name="interimReleaseUpgradePeriodInDays")
    def interim_release_upgrade_period_in_days(self) -> Optional[int]:
        return pulumi.get(self, "interim_release_upgrade_period_in_days")

    @property
    @pulumi.getter(name="isInterimReleaseAutoUpgradeEnabled")
    def is_interim_release_auto_upgrade_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_interim_release_auto_upgrade_enabled")

    @property
    @pulumi.getter(name="majorReleaseUpgradePeriodInDays")
    def major_release_upgrade_period_in_days(self) -> Optional[int]:
        return pulumi.get(self, "major_release_upgrade_period_in_days")

    @property
    @pulumi.getter(name="securityPatchUpgradePeriodInDays")
    def security_patch_upgrade_period_in_days(self) -> Optional[int]:
        return pulumi.get(self, "security_patch_upgrade_period_in_days")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionItemMaintenanceWindowResult(dict):
    def __init__(__self__, *,
                 day: Optional[str] = None,
                 start_hour: Optional[int] = None):
        if day is not None:
            pulumi.set(__self__, "day", day)
        if start_hour is not None:
            pulumi.set(__self__, "start_hour", start_hour)

    @property
    @pulumi.getter
    def day(self) -> Optional[str]:
        return pulumi.get(self, "day")

    @property
    @pulumi.getter(name="startHour")
    def start_hour(self) -> Optional[int]:
        return pulumi.get(self, "start_hour")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionItemOggDataResult(dict):
    def __init__(__self__, *,
                 admin_password: Optional[str] = None,
                 admin_username: Optional[str] = None,
                 certificate: Optional[str] = None,
                 credential_store: Optional[str] = None,
                 deployment_name: Optional[str] = None,
                 identity_domain_id: Optional[str] = None,
                 key: Optional[str] = None,
                 ogg_version: Optional[str] = None,
                 password_secret_id: Optional[str] = None):
        if admin_password is not None:
            pulumi.set(__self__, "admin_password", admin_password)
        if admin_username is not None:
            pulumi.set(__self__, "admin_username", admin_username)
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if credential_store is not None:
            pulumi.set(__self__, "credential_store", credential_store)
        if deployment_name is not None:
            pulumi.set(__self__, "deployment_name", deployment_name)
        if identity_domain_id is not None:
            pulumi.set(__self__, "identity_domain_id", identity_domain_id)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if ogg_version is not None:
            pulumi.set(__self__, "ogg_version", ogg_version)
        if password_secret_id is not None:
            pulumi.set(__self__, "password_secret_id", password_secret_id)

    @property
    @pulumi.getter(name="adminPassword")
    def admin_password(self) -> Optional[str]:
        return pulumi.get(self, "admin_password")

    @property
    @pulumi.getter(name="adminUsername")
    def admin_username(self) -> Optional[str]:
        return pulumi.get(self, "admin_username")

    @property
    @pulumi.getter
    def certificate(self) -> Optional[str]:
        return pulumi.get(self, "certificate")

    @property
    @pulumi.getter(name="credentialStore")
    def credential_store(self) -> Optional[str]:
        return pulumi.get(self, "credential_store")

    @property
    @pulumi.getter(name="deploymentName")
    def deployment_name(self) -> Optional[str]:
        return pulumi.get(self, "deployment_name")

    @property
    @pulumi.getter(name="identityDomainId")
    def identity_domain_id(self) -> Optional[str]:
        return pulumi.get(self, "identity_domain_id")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="oggVersion")
    def ogg_version(self) -> Optional[str]:
        return pulumi.get(self, "ogg_version")

    @property
    @pulumi.getter(name="passwordSecretId")
    def password_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "password_secret_id")


@pulumi.output_type
class GetDeploymentsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetMessageItemResult(dict):
    def __init__(__self__, *,
                 deployment_message: Optional[str] = None,
                 deployment_message_status: Optional[str] = None,
                 id: Optional[str] = None):
        if deployment_message is not None:
            pulumi.set(__self__, "deployment_message", deployment_message)
        if deployment_message_status is not None:
            pulumi.set(__self__, "deployment_message_status", deployment_message_status)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="deploymentMessage")
    def deployment_message(self) -> Optional[str]:
        return pulumi.get(self, "deployment_message")

    @property
    @pulumi.getter(name="deploymentMessageStatus")
    def deployment_message_status(self) -> Optional[str]:
        return pulumi.get(self, "deployment_message_status")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetMessagesDeploymentMessagesCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetMessagesDeploymentMessagesCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetMessagesDeploymentMessagesCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetMessagesDeploymentMessagesCollectionItemResult(dict):
    def __init__(__self__, *,
                 deployment_message: Optional[str] = None,
                 deployment_message_status: Optional[str] = None,
                 id: Optional[str] = None):
        if deployment_message is not None:
            pulumi.set(__self__, "deployment_message", deployment_message)
        if deployment_message_status is not None:
            pulumi.set(__self__, "deployment_message_status", deployment_message_status)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="deploymentMessage")
    def deployment_message(self) -> Optional[str]:
        return pulumi.get(self, "deployment_message")

    @property
    @pulumi.getter(name="deploymentMessageStatus")
    def deployment_message_status(self) -> Optional[str]:
        return pulumi.get(self, "deployment_message_status")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetMessagesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetTrailFileItemResult(dict):
    def __init__(__self__, *,
                 consumers: Optional[Sequence[str]] = None,
                 display_name: Optional[str] = None,
                 max_sequence_number: Optional[str] = None,
                 min_sequence_number: Optional[str] = None,
                 number_of_sequences: Optional[int] = None,
                 producer: Optional[str] = None,
                 size_in_bytes: Optional[float] = None,
                 time_last_updated: Optional[str] = None,
                 trail_file_id: Optional[str] = None):
        if consumers is not None:
            pulumi.set(__self__, "consumers", consumers)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if max_sequence_number is not None:
            pulumi.set(__self__, "max_sequence_number", max_sequence_number)
        if min_sequence_number is not None:
            pulumi.set(__self__, "min_sequence_number", min_sequence_number)
        if number_of_sequences is not None:
            pulumi.set(__self__, "number_of_sequences", number_of_sequences)
        if producer is not None:
            pulumi.set(__self__, "producer", producer)
        if size_in_bytes is not None:
            pulumi.set(__self__, "size_in_bytes", size_in_bytes)
        if time_last_updated is not None:
            pulumi.set(__self__, "time_last_updated", time_last_updated)
        if trail_file_id is not None:
            pulumi.set(__self__, "trail_file_id", trail_file_id)

    @property
    @pulumi.getter
    def consumers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "consumers")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="maxSequenceNumber")
    def max_sequence_number(self) -> Optional[str]:
        return pulumi.get(self, "max_sequence_number")

    @property
    @pulumi.getter(name="minSequenceNumber")
    def min_sequence_number(self) -> Optional[str]:
        return pulumi.get(self, "min_sequence_number")

    @property
    @pulumi.getter(name="numberOfSequences")
    def number_of_sequences(self) -> Optional[int]:
        return pulumi.get(self, "number_of_sequences")

    @property
    @pulumi.getter
    def producer(self) -> Optional[str]:
        return pulumi.get(self, "producer")

    @property
    @pulumi.getter(name="sizeInBytes")
    def size_in_bytes(self) -> Optional[float]:
        return pulumi.get(self, "size_in_bytes")

    @property
    @pulumi.getter(name="timeLastUpdated")
    def time_last_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_last_updated")

    @property
    @pulumi.getter(name="trailFileId")
    def trail_file_id(self) -> Optional[str]:
        return pulumi.get(self, "trail_file_id")


@pulumi.output_type
class GetTrailFilesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetTrailFilesTrailFileCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetTrailFilesTrailFileCollectionItemResult']] = None,
                 time_last_fetched: Optional[str] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)
        if time_last_fetched is not None:
            pulumi.set(__self__, "time_last_fetched", time_last_fetched)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetTrailFilesTrailFileCollectionItemResult']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter(name="timeLastFetched")
    def time_last_fetched(self) -> Optional[str]:
        return pulumi.get(self, "time_last_fetched")


@pulumi.output_type
class GetTrailFilesTrailFileCollectionItemResult(dict):
    def __init__(__self__, *,
                 consumers: Optional[Sequence[str]] = None,
                 display_name: Optional[str] = None,
                 max_sequence_number: Optional[str] = None,
                 min_sequence_number: Optional[str] = None,
                 number_of_sequences: Optional[int] = None,
                 producer: Optional[str] = None,
                 size_in_bytes: Optional[float] = None,
                 time_last_updated: Optional[str] = None,
                 trail_file_id: Optional[str] = None):
        if consumers is not None:
            pulumi.set(__self__, "consumers", consumers)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if max_sequence_number is not None:
            pulumi.set(__self__, "max_sequence_number", max_sequence_number)
        if min_sequence_number is not None:
            pulumi.set(__self__, "min_sequence_number", min_sequence_number)
        if number_of_sequences is not None:
            pulumi.set(__self__, "number_of_sequences", number_of_sequences)
        if producer is not None:
            pulumi.set(__self__, "producer", producer)
        if size_in_bytes is not None:
            pulumi.set(__self__, "size_in_bytes", size_in_bytes)
        if time_last_updated is not None:
            pulumi.set(__self__, "time_last_updated", time_last_updated)
        if trail_file_id is not None:
            pulumi.set(__self__, "trail_file_id", trail_file_id)

    @property
    @pulumi.getter
    def consumers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "consumers")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="maxSequenceNumber")
    def max_sequence_number(self) -> Optional[str]:
        return pulumi.get(self, "max_sequence_number")

    @property
    @pulumi.getter(name="minSequenceNumber")
    def min_sequence_number(self) -> Optional[str]:
        return pulumi.get(self, "min_sequence_number")

    @property
    @pulumi.getter(name="numberOfSequences")
    def number_of_sequences(self) -> Optional[int]:
        return pulumi.get(self, "number_of_sequences")

    @property
    @pulumi.getter
    def producer(self) -> Optional[str]:
        return pulumi.get(self, "producer")

    @property
    @pulumi.getter(name="sizeInBytes")
    def size_in_bytes(self) -> Optional[float]:
        return pulumi.get(self, "size_in_bytes")

    @property
    @pulumi.getter(name="timeLastUpdated")
    def time_last_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_last_updated")

    @property
    @pulumi.getter(name="trailFileId")
    def trail_file_id(self) -> Optional[str]:
        return pulumi.get(self, "trail_file_id")


@pulumi.output_type
class GetTrailSequenceItemResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 sequence_id: Optional[str] = None,
                 size_in_bytes: Optional[float] = None,
                 time_last_updated: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if sequence_id is not None:
            pulumi.set(__self__, "sequence_id", sequence_id)
        if size_in_bytes is not None:
            pulumi.set(__self__, "size_in_bytes", size_in_bytes)
        if time_last_updated is not None:
            pulumi.set(__self__, "time_last_updated", time_last_updated)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="sequenceId")
    def sequence_id(self) -> Optional[str]:
        return pulumi.get(self, "sequence_id")

    @property
    @pulumi.getter(name="sizeInBytes")
    def size_in_bytes(self) -> Optional[float]:
        return pulumi.get(self, "size_in_bytes")

    @property
    @pulumi.getter(name="timeLastUpdated")
    def time_last_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_last_updated")


@pulumi.output_type
class GetTrailSequencesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetTrailSequencesTrailSequenceCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetTrailSequencesTrailSequenceCollectionItemResult']] = None,
                 time_last_fetched: Optional[str] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)
        if time_last_fetched is not None:
            pulumi.set(__self__, "time_last_fetched", time_last_fetched)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetTrailSequencesTrailSequenceCollectionItemResult']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter(name="timeLastFetched")
    def time_last_fetched(self) -> Optional[str]:
        return pulumi.get(self, "time_last_fetched")


@pulumi.output_type
class GetTrailSequencesTrailSequenceCollectionItemResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 sequence_id: Optional[str] = None,
                 size_in_bytes: Optional[float] = None,
                 time_last_updated: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if sequence_id is not None:
            pulumi.set(__self__, "sequence_id", sequence_id)
        if size_in_bytes is not None:
            pulumi.set(__self__, "size_in_bytes", size_in_bytes)
        if time_last_updated is not None:
            pulumi.set(__self__, "time_last_updated", time_last_updated)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="sequenceId")
    def sequence_id(self) -> Optional[str]:
        return pulumi.get(self, "sequence_id")

    @property
    @pulumi.getter(name="sizeInBytes")
    def size_in_bytes(self) -> Optional[float]:
        return pulumi.get(self, "size_in_bytes")

    @property
    @pulumi.getter(name="timeLastUpdated")
    def time_last_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_last_updated")


