# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'ConnectionAdditionalAttribute',
    'ConnectionBootstrapServer',
    'ConnectionIngressIp',
    'ConnectionLock',
    'DeploymentBackupLock',
    'DeploymentBackupSchedule',
    'DeploymentDeploymentDiagnosticData',
    'DeploymentIngressIp',
    'DeploymentLock',
    'DeploymentMaintenanceConfiguration',
    'DeploymentMaintenanceWindow',
    'DeploymentOggData',
    'DeploymentOggDataGroupToRolesMapping',
    'PipelineLock',
    'PipelineMappingRule',
    'PipelineProcessOptions',
    'PipelineProcessOptionsInitialDataLoad',
    'PipelineProcessOptionsReplicateSchemaChange',
    'PipelineSourceConnectionDetails',
    'PipelineTargetConnectionDetails',
    'GetConnectionAdditionalAttributeResult',
    'GetConnectionAssignmentsConnectionAssignmentCollectionResult',
    'GetConnectionAssignmentsConnectionAssignmentCollectionItemResult',
    'GetConnectionAssignmentsFilterResult',
    'GetConnectionBootstrapServerResult',
    'GetConnectionIngressIpResult',
    'GetConnectionLockResult',
    'GetConnectionsConnectionCollectionResult',
    'GetConnectionsConnectionCollectionItemResult',
    'GetConnectionsConnectionCollectionItemAdditionalAttributeResult',
    'GetConnectionsConnectionCollectionItemBootstrapServerResult',
    'GetConnectionsConnectionCollectionItemIngressIpResult',
    'GetConnectionsConnectionCollectionItemLockResult',
    'GetConnectionsFilterResult',
    'GetDatabaseRegistrationsDatabaseRegistrationCollectionResult',
    'GetDatabaseRegistrationsDatabaseRegistrationCollectionItemResult',
    'GetDatabaseRegistrationsFilterResult',
    'GetDeploymentBackupLockResult',
    'GetDeploymentBackupScheduleResult',
    'GetDeploymentBackupsDeploymentBackupCollectionResult',
    'GetDeploymentBackupsDeploymentBackupCollectionItemResult',
    'GetDeploymentBackupsDeploymentBackupCollectionItemLockResult',
    'GetDeploymentBackupsFilterResult',
    'GetDeploymentCertificatesCertificateCollectionResult',
    'GetDeploymentCertificatesCertificateCollectionItemResult',
    'GetDeploymentCertificatesFilterResult',
    'GetDeploymentDeploymentDiagnosticDataResult',
    'GetDeploymentEnvironmentsDeploymentEnvironmentCollectionResult',
    'GetDeploymentEnvironmentsDeploymentEnvironmentCollectionItemResult',
    'GetDeploymentEnvironmentsFilterResult',
    'GetDeploymentIngressIpResult',
    'GetDeploymentLockResult',
    'GetDeploymentMaintenanceConfigurationResult',
    'GetDeploymentMaintenanceWindowResult',
    'GetDeploymentOggDataResult',
    'GetDeploymentOggDataGroupToRolesMappingResult',
    'GetDeploymentTypeItemResult',
    'GetDeploymentTypesDeploymentTypeCollectionResult',
    'GetDeploymentTypesDeploymentTypeCollectionItemResult',
    'GetDeploymentTypesFilterResult',
    'GetDeploymentUpgradesDeploymentUpgradeCollectionResult',
    'GetDeploymentUpgradesDeploymentUpgradeCollectionItemResult',
    'GetDeploymentUpgradesFilterResult',
    'GetDeploymentVersionsDeploymentVersionCollectionResult',
    'GetDeploymentVersionsDeploymentVersionCollectionItemResult',
    'GetDeploymentVersionsFilterResult',
    'GetDeploymentsDeploymentCollectionResult',
    'GetDeploymentsDeploymentCollectionItemResult',
    'GetDeploymentsDeploymentCollectionItemBackupScheduleResult',
    'GetDeploymentsDeploymentCollectionItemDeploymentDiagnosticDataResult',
    'GetDeploymentsDeploymentCollectionItemIngressIpResult',
    'GetDeploymentsDeploymentCollectionItemLockResult',
    'GetDeploymentsDeploymentCollectionItemMaintenanceConfigurationResult',
    'GetDeploymentsDeploymentCollectionItemMaintenanceWindowResult',
    'GetDeploymentsDeploymentCollectionItemOggDataResult',
    'GetDeploymentsDeploymentCollectionItemOggDataGroupToRolesMappingResult',
    'GetDeploymentsFilterResult',
    'GetMessageItemResult',
    'GetMessagesDeploymentMessagesCollectionResult',
    'GetMessagesDeploymentMessagesCollectionItemResult',
    'GetMessagesFilterResult',
    'GetPipelineLockResult',
    'GetPipelineMappingRuleResult',
    'GetPipelineProcessOptionResult',
    'GetPipelineProcessOptionInitialDataLoadResult',
    'GetPipelineProcessOptionReplicateSchemaChangeResult',
    'GetPipelineRunningProcessesFilterResult',
    'GetPipelineRunningProcessesPipelineRunningProcessCollectionResult',
    'GetPipelineRunningProcessesPipelineRunningProcessCollectionItemResult',
    'GetPipelineSchemaTablesFilterResult',
    'GetPipelineSchemaTablesPipelineSchemaTableCollectionResult',
    'GetPipelineSchemaTablesPipelineSchemaTableCollectionItemResult',
    'GetPipelineSchemasFilterResult',
    'GetPipelineSchemasPipelineSchemaCollectionResult',
    'GetPipelineSchemasPipelineSchemaCollectionItemResult',
    'GetPipelineSourceConnectionDetailResult',
    'GetPipelineTargetConnectionDetailResult',
    'GetPipelinesFilterResult',
    'GetPipelinesPipelineCollectionResult',
    'GetPipelinesPipelineCollectionItemResult',
    'GetPipelinesPipelineCollectionItemLockResult',
    'GetPipelinesPipelineCollectionItemMappingRuleResult',
    'GetPipelinesPipelineCollectionItemProcessOptionResult',
    'GetPipelinesPipelineCollectionItemProcessOptionInitialDataLoadResult',
    'GetPipelinesPipelineCollectionItemProcessOptionReplicateSchemaChangeResult',
    'GetPipelinesPipelineCollectionItemSourceConnectionDetailResult',
    'GetPipelinesPipelineCollectionItemTargetConnectionDetailResult',
    'GetRecipesFilterResult',
    'GetRecipesRecipeSummaryCollectionResult',
    'GetRecipesRecipeSummaryCollectionItemResult',
    'GetTrailFileItemResult',
    'GetTrailFilesFilterResult',
    'GetTrailFilesTrailFileCollectionResult',
    'GetTrailFilesTrailFileCollectionItemResult',
    'GetTrailSequenceItemResult',
    'GetTrailSequencesFilterResult',
    'GetTrailSequencesTrailSequenceCollectionResult',
    'GetTrailSequencesTrailSequenceCollectionItemResult',
]

@pulumi.output_type
class ConnectionAdditionalAttribute(dict):
    def __init__(__self__, *,
                 name: Optional[builtins.str] = None,
                 value: Optional[builtins.str] = None):
        """
        :param builtins.str name: (Updatable) The name of the property entry.
        :param builtins.str value: (Updatable) The value of the property entry.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        (Updatable) The name of the property entry.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[builtins.str]:
        """
        (Updatable) The value of the property entry.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ConnectionBootstrapServer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "privateIp":
            suggest = "private_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionBootstrapServer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionBootstrapServer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionBootstrapServer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host: Optional[builtins.str] = None,
                 port: Optional[builtins.int] = None,
                 private_ip: Optional[builtins.str] = None):
        """
        :param builtins.str host: (Updatable) The name or address of a host.
        :param builtins.int port: (Updatable) The port of an endpoint usually specified for a connection.
        :param builtins.str private_ip: (Updatable) Deprecated: this field will be removed in future versions. Either specify the private IP in the connectionString or host  field, or make sure the host name is resolvable in the target VCN.
               
               The private IP address of the connection's endpoint in the customer's VCN, typically a database endpoint or a big data endpoint (e.g. Kafka bootstrap server). In case the privateIp is provided, the subnetId must also be provided. In case the privateIp (and the subnetId) is not provided it is assumed the datasource is publicly accessible. In case the connection is accessible only privately, the lack of privateIp will result in not being able to access the connection.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)

    @property
    @pulumi.getter
    def host(self) -> Optional[builtins.str]:
        """
        (Updatable) The name or address of a host.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> Optional[builtins.int]:
        """
        (Updatable) The port of an endpoint usually specified for a connection.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[builtins.str]:
        """
        (Updatable) Deprecated: this field will be removed in future versions. Either specify the private IP in the connectionString or host  field, or make sure the host name is resolvable in the target VCN.

        The private IP address of the connection's endpoint in the customer's VCN, typically a database endpoint or a big data endpoint (e.g. Kafka bootstrap server). In case the privateIp is provided, the subnetId must also be provided. In case the privateIp (and the subnetId) is not provided it is assumed the datasource is publicly accessible. In case the connection is accessible only privately, the lack of privateIp will result in not being able to access the connection.
        """
        return pulumi.get(self, "private_ip")


@pulumi.output_type
class ConnectionIngressIp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ingressIp":
            suggest = "ingress_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionIngressIp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionIngressIp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionIngressIp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ingress_ip: Optional[builtins.str] = None):
        """
        :param builtins.str ingress_ip: A Private Endpoint IPv4 or IPv6 Address created in the customer's subnet.
        """
        if ingress_ip is not None:
            pulumi.set(__self__, "ingress_ip", ingress_ip)

    @property
    @pulumi.getter(name="ingressIp")
    def ingress_ip(self) -> Optional[builtins.str]:
        """
        A Private Endpoint IPv4 or IPv6 Address created in the customer's subnet.
        """
        return pulumi.get(self, "ingress_ip")


@pulumi.output_type
class ConnectionLock(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "relatedResourceId":
            suggest = "related_resource_id"
        elif key == "timeCreated":
            suggest = "time_created"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionLock. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionLock.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionLock.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: builtins.str,
                 message: Optional[builtins.str] = None,
                 related_resource_id: Optional[builtins.str] = None,
                 time_created: Optional[builtins.str] = None):
        """
        :param builtins.str type: Type of the lock.
        :param builtins.str message: A message added by the creator of the lock. This is typically used to give an indication of why the resource is locked.
        :param builtins.str related_resource_id: The id of the resource that is locking this resource. Indicates that deleting this resource will remove the lock.
        :param builtins.str time_created: The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        pulumi.set(__self__, "type", type)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if related_resource_id is not None:
            pulumi.set(__self__, "related_resource_id", related_resource_id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Type of the lock.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def message(self) -> Optional[builtins.str]:
        """
        A message added by the creator of the lock. This is typically used to give an indication of why the resource is locked.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter(name="relatedResourceId")
    def related_resource_id(self) -> Optional[builtins.str]:
        """
        The id of the resource that is locking this resource. Indicates that deleting this resource will remove the lock.
        """
        return pulumi.get(self, "related_resource_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[builtins.str]:
        """
        The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        return pulumi.get(self, "time_created")


@pulumi.output_type
class DeploymentBackupLock(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "relatedResourceId":
            suggest = "related_resource_id"
        elif key == "timeCreated":
            suggest = "time_created"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentBackupLock. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentBackupLock.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentBackupLock.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: builtins.str,
                 message: Optional[builtins.str] = None,
                 related_resource_id: Optional[builtins.str] = None,
                 time_created: Optional[builtins.str] = None):
        """
        :param builtins.str type: Type of the lock.
        :param builtins.str message: A message added by the creator of the lock. This is typically used to give an indication of why the resource is locked.
        :param builtins.str related_resource_id: The id of the resource that is locking this resource. Indicates that deleting this resource will remove the lock.
        :param builtins.str time_created: The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        pulumi.set(__self__, "type", type)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if related_resource_id is not None:
            pulumi.set(__self__, "related_resource_id", related_resource_id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Type of the lock.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def message(self) -> Optional[builtins.str]:
        """
        A message added by the creator of the lock. This is typically used to give an indication of why the resource is locked.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter(name="relatedResourceId")
    def related_resource_id(self) -> Optional[builtins.str]:
        """
        The id of the resource that is locking this resource. Indicates that deleting this resource will remove the lock.
        """
        return pulumi.get(self, "related_resource_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[builtins.str]:
        """
        The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        return pulumi.get(self, "time_created")


@pulumi.output_type
class DeploymentBackupSchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compartmentId":
            suggest = "compartment_id"
        elif key == "frequencyBackupScheduled":
            suggest = "frequency_backup_scheduled"
        elif key == "isMetadataOnly":
            suggest = "is_metadata_only"
        elif key == "timeBackupScheduled":
            suggest = "time_backup_scheduled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentBackupSchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentBackupSchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentBackupSchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bucket: builtins.str,
                 compartment_id: builtins.str,
                 frequency_backup_scheduled: builtins.str,
                 is_metadata_only: builtins.bool,
                 namespace: builtins.str,
                 time_backup_scheduled: builtins.str):
        """
        :param builtins.str bucket: (Updatable) Name of the bucket where the object is to be uploaded in the object storage
        :param builtins.str compartment_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment being referenced.
        :param builtins.str frequency_backup_scheduled: (Updatable) The frequency of the deployment backup schedule. Frequency can be DAILY, WEEKLY or MONTHLY.
        :param builtins.bool is_metadata_only: (Updatable) Parameter to allow users to create backup without trails
        :param builtins.str namespace: (Updatable) Name of namespace that serves as a container for all of your buckets
        :param builtins.str time_backup_scheduled: (Updatable) The start timestamp for the deployment backup schedule. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2024-10-25T18:19:29.600Z`.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "frequency_backup_scheduled", frequency_backup_scheduled)
        pulumi.set(__self__, "is_metadata_only", is_metadata_only)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "time_backup_scheduled", time_backup_scheduled)

    @property
    @pulumi.getter
    def bucket(self) -> builtins.str:
        """
        (Updatable) Name of the bucket where the object is to be uploaded in the object storage
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment being referenced.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="frequencyBackupScheduled")
    def frequency_backup_scheduled(self) -> builtins.str:
        """
        (Updatable) The frequency of the deployment backup schedule. Frequency can be DAILY, WEEKLY or MONTHLY.
        """
        return pulumi.get(self, "frequency_backup_scheduled")

    @property
    @pulumi.getter(name="isMetadataOnly")
    def is_metadata_only(self) -> builtins.bool:
        """
        (Updatable) Parameter to allow users to create backup without trails
        """
        return pulumi.get(self, "is_metadata_only")

    @property
    @pulumi.getter
    def namespace(self) -> builtins.str:
        """
        (Updatable) Name of namespace that serves as a container for all of your buckets
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="timeBackupScheduled")
    def time_backup_scheduled(self) -> builtins.str:
        """
        (Updatable) The start timestamp for the deployment backup schedule. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2024-10-25T18:19:29.600Z`.
        """
        return pulumi.get(self, "time_backup_scheduled")


@pulumi.output_type
class DeploymentDeploymentDiagnosticData(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diagnosticState":
            suggest = "diagnostic_state"
        elif key == "timeDiagnosticEnd":
            suggest = "time_diagnostic_end"
        elif key == "timeDiagnosticStart":
            suggest = "time_diagnostic_start"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentDeploymentDiagnosticData. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentDeploymentDiagnosticData.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentDeploymentDiagnosticData.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bucket: Optional[builtins.str] = None,
                 diagnostic_state: Optional[builtins.str] = None,
                 namespace: Optional[builtins.str] = None,
                 object: Optional[builtins.str] = None,
                 time_diagnostic_end: Optional[builtins.str] = None,
                 time_diagnostic_start: Optional[builtins.str] = None):
        """
        :param builtins.str bucket: Name of the bucket where the object is to be uploaded in the object storage
        :param builtins.str diagnostic_state: The state of the deployment diagnostic collection.
        :param builtins.str namespace: Name of namespace that serves as a container for all of your buckets
        :param builtins.str object: Name of the diagnostic collected and uploaded to object storage
        :param builtins.str time_diagnostic_end: The time until which the diagnostic collection should collect the logs. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        :param builtins.str time_diagnostic_start: The time from which the diagnostic collection should collect the logs. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if diagnostic_state is not None:
            pulumi.set(__self__, "diagnostic_state", diagnostic_state)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if object is not None:
            pulumi.set(__self__, "object", object)
        if time_diagnostic_end is not None:
            pulumi.set(__self__, "time_diagnostic_end", time_diagnostic_end)
        if time_diagnostic_start is not None:
            pulumi.set(__self__, "time_diagnostic_start", time_diagnostic_start)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[builtins.str]:
        """
        Name of the bucket where the object is to be uploaded in the object storage
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="diagnosticState")
    def diagnostic_state(self) -> Optional[builtins.str]:
        """
        The state of the deployment diagnostic collection.
        """
        return pulumi.get(self, "diagnostic_state")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[builtins.str]:
        """
        Name of namespace that serves as a container for all of your buckets
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> Optional[builtins.str]:
        """
        Name of the diagnostic collected and uploaded to object storage
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter(name="timeDiagnosticEnd")
    def time_diagnostic_end(self) -> Optional[builtins.str]:
        """
        The time until which the diagnostic collection should collect the logs. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        return pulumi.get(self, "time_diagnostic_end")

    @property
    @pulumi.getter(name="timeDiagnosticStart")
    def time_diagnostic_start(self) -> Optional[builtins.str]:
        """
        The time from which the diagnostic collection should collect the logs. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        return pulumi.get(self, "time_diagnostic_start")


@pulumi.output_type
class DeploymentIngressIp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ingressIp":
            suggest = "ingress_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentIngressIp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentIngressIp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentIngressIp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ingress_ip: Optional[builtins.str] = None):
        """
        :param builtins.str ingress_ip: A Private Endpoint IPv4 or IPv6 Address created in the customer's subnet.
        """
        if ingress_ip is not None:
            pulumi.set(__self__, "ingress_ip", ingress_ip)

    @property
    @pulumi.getter(name="ingressIp")
    def ingress_ip(self) -> Optional[builtins.str]:
        """
        A Private Endpoint IPv4 or IPv6 Address created in the customer's subnet.
        """
        return pulumi.get(self, "ingress_ip")


@pulumi.output_type
class DeploymentLock(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "relatedResourceId":
            suggest = "related_resource_id"
        elif key == "timeCreated":
            suggest = "time_created"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentLock. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentLock.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentLock.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: builtins.str,
                 message: Optional[builtins.str] = None,
                 related_resource_id: Optional[builtins.str] = None,
                 time_created: Optional[builtins.str] = None):
        """
        :param builtins.str type: Type of the lock.
        :param builtins.str message: A message added by the creator of the lock. This is typically used to give an indication of why the resource is locked.
        :param builtins.str related_resource_id: The id of the resource that is locking this resource. Indicates that deleting this resource will remove the lock.
        :param builtins.str time_created: The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        pulumi.set(__self__, "type", type)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if related_resource_id is not None:
            pulumi.set(__self__, "related_resource_id", related_resource_id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Type of the lock.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def message(self) -> Optional[builtins.str]:
        """
        A message added by the creator of the lock. This is typically used to give an indication of why the resource is locked.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter(name="relatedResourceId")
    def related_resource_id(self) -> Optional[builtins.str]:
        """
        The id of the resource that is locking this resource. Indicates that deleting this resource will remove the lock.
        """
        return pulumi.get(self, "related_resource_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[builtins.str]:
        """
        The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        return pulumi.get(self, "time_created")


@pulumi.output_type
class DeploymentMaintenanceConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bundleReleaseUpgradePeriodInDays":
            suggest = "bundle_release_upgrade_period_in_days"
        elif key == "interimReleaseUpgradePeriodInDays":
            suggest = "interim_release_upgrade_period_in_days"
        elif key == "isInterimReleaseAutoUpgradeEnabled":
            suggest = "is_interim_release_auto_upgrade_enabled"
        elif key == "majorReleaseUpgradePeriodInDays":
            suggest = "major_release_upgrade_period_in_days"
        elif key == "securityPatchUpgradePeriodInDays":
            suggest = "security_patch_upgrade_period_in_days"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentMaintenanceConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentMaintenanceConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentMaintenanceConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bundle_release_upgrade_period_in_days: Optional[builtins.int] = None,
                 interim_release_upgrade_period_in_days: Optional[builtins.int] = None,
                 is_interim_release_auto_upgrade_enabled: Optional[builtins.bool] = None,
                 major_release_upgrade_period_in_days: Optional[builtins.int] = None,
                 security_patch_upgrade_period_in_days: Optional[builtins.int] = None):
        """
        :param builtins.int bundle_release_upgrade_period_in_days: (Updatable) Defines auto upgrade period for bundle releases. Manually configured period cannot be longer than service defined period for bundle releases. This period must be shorter or equal to major release upgrade period. Not passing this field during create will equate to using the service default.
        :param builtins.int interim_release_upgrade_period_in_days: (Updatable) Defines auto upgrade period for interim releases. This period must be shorter or equal to bundle release upgrade period.
        :param builtins.bool is_interim_release_auto_upgrade_enabled: (Updatable) By default auto upgrade for interim releases are not enabled. If auto-upgrade is enabled for interim release,  you have to specify interimReleaseUpgradePeriodInDays too.
        :param builtins.int major_release_upgrade_period_in_days: (Updatable) Defines auto upgrade period for major releases. Manually configured period cannot be longer than service defined period for major releases. Not passing this field during create will equate to using the service default.
        :param builtins.int security_patch_upgrade_period_in_days: (Updatable) Defines auto upgrade period for releases with security fix. Manually configured period cannot be longer than service defined period for security releases. Not passing this field during create will equate to using the service default.
        """
        if bundle_release_upgrade_period_in_days is not None:
            pulumi.set(__self__, "bundle_release_upgrade_period_in_days", bundle_release_upgrade_period_in_days)
        if interim_release_upgrade_period_in_days is not None:
            pulumi.set(__self__, "interim_release_upgrade_period_in_days", interim_release_upgrade_period_in_days)
        if is_interim_release_auto_upgrade_enabled is not None:
            pulumi.set(__self__, "is_interim_release_auto_upgrade_enabled", is_interim_release_auto_upgrade_enabled)
        if major_release_upgrade_period_in_days is not None:
            pulumi.set(__self__, "major_release_upgrade_period_in_days", major_release_upgrade_period_in_days)
        if security_patch_upgrade_period_in_days is not None:
            pulumi.set(__self__, "security_patch_upgrade_period_in_days", security_patch_upgrade_period_in_days)

    @property
    @pulumi.getter(name="bundleReleaseUpgradePeriodInDays")
    def bundle_release_upgrade_period_in_days(self) -> Optional[builtins.int]:
        """
        (Updatable) Defines auto upgrade period for bundle releases. Manually configured period cannot be longer than service defined period for bundle releases. This period must be shorter or equal to major release upgrade period. Not passing this field during create will equate to using the service default.
        """
        return pulumi.get(self, "bundle_release_upgrade_period_in_days")

    @property
    @pulumi.getter(name="interimReleaseUpgradePeriodInDays")
    def interim_release_upgrade_period_in_days(self) -> Optional[builtins.int]:
        """
        (Updatable) Defines auto upgrade period for interim releases. This period must be shorter or equal to bundle release upgrade period.
        """
        return pulumi.get(self, "interim_release_upgrade_period_in_days")

    @property
    @pulumi.getter(name="isInterimReleaseAutoUpgradeEnabled")
    def is_interim_release_auto_upgrade_enabled(self) -> Optional[builtins.bool]:
        """
        (Updatable) By default auto upgrade for interim releases are not enabled. If auto-upgrade is enabled for interim release,  you have to specify interimReleaseUpgradePeriodInDays too.
        """
        return pulumi.get(self, "is_interim_release_auto_upgrade_enabled")

    @property
    @pulumi.getter(name="majorReleaseUpgradePeriodInDays")
    def major_release_upgrade_period_in_days(self) -> Optional[builtins.int]:
        """
        (Updatable) Defines auto upgrade period for major releases. Manually configured period cannot be longer than service defined period for major releases. Not passing this field during create will equate to using the service default.
        """
        return pulumi.get(self, "major_release_upgrade_period_in_days")

    @property
    @pulumi.getter(name="securityPatchUpgradePeriodInDays")
    def security_patch_upgrade_period_in_days(self) -> Optional[builtins.int]:
        """
        (Updatable) Defines auto upgrade period for releases with security fix. Manually configured period cannot be longer than service defined period for security releases. Not passing this field during create will equate to using the service default.
        """
        return pulumi.get(self, "security_patch_upgrade_period_in_days")


@pulumi.output_type
class DeploymentMaintenanceWindow(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "startHour":
            suggest = "start_hour"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentMaintenanceWindow. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentMaintenanceWindow.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentMaintenanceWindow.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 day: builtins.str,
                 start_hour: builtins.int):
        """
        :param builtins.str day: (Updatable) Days of the week.
        :param builtins.int start_hour: (Updatable) Start hour for maintenance period. Hour is in UTC.
        """
        pulumi.set(__self__, "day", day)
        pulumi.set(__self__, "start_hour", start_hour)

    @property
    @pulumi.getter
    def day(self) -> builtins.str:
        """
        (Updatable) Days of the week.
        """
        return pulumi.get(self, "day")

    @property
    @pulumi.getter(name="startHour")
    def start_hour(self) -> builtins.int:
        """
        (Updatable) Start hour for maintenance period. Hour is in UTC.
        """
        return pulumi.get(self, "start_hour")


@pulumi.output_type
class DeploymentOggData(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deploymentName":
            suggest = "deployment_name"
        elif key == "adminPassword":
            suggest = "admin_password"
        elif key == "adminUsername":
            suggest = "admin_username"
        elif key == "credentialStore":
            suggest = "credential_store"
        elif key == "groupToRolesMapping":
            suggest = "group_to_roles_mapping"
        elif key == "identityDomainId":
            suggest = "identity_domain_id"
        elif key == "oggVersion":
            suggest = "ogg_version"
        elif key == "passwordSecretId":
            suggest = "password_secret_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentOggData. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentOggData.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentOggData.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deployment_name: builtins.str,
                 admin_password: Optional[builtins.str] = None,
                 admin_username: Optional[builtins.str] = None,
                 certificate: Optional[builtins.str] = None,
                 credential_store: Optional[builtins.str] = None,
                 group_to_roles_mapping: Optional['outputs.DeploymentOggDataGroupToRolesMapping'] = None,
                 identity_domain_id: Optional[builtins.str] = None,
                 key: Optional[builtins.str] = None,
                 ogg_version: Optional[builtins.str] = None,
                 password_secret_id: Optional[builtins.str] = None):
        """
        :param builtins.str deployment_name: The name given to the GoldenGate service deployment. The name must be 1 to 32 characters long, must contain only alphanumeric characters and must start with a letter.
        :param builtins.str admin_password: (Updatable) The password associated with the GoldenGate deployment console username. The password must be 8 to 30 characters long and must contain at least 1 uppercase, 1 lowercase, 1 numeric, and 1 special character. Special characters such as ‘$’, ‘^’, or ‘?’ are not allowed. This field will be deprecated and replaced by "passwordSecretId".
        :param builtins.str admin_username: (Updatable) The GoldenGate deployment console username.
        :param builtins.str certificate: (Updatable) The base64 encoded content of the PEM file containing the SSL certificate.
        :param builtins.str credential_store: (Updatable) The type of credential store for OGG.
        :param 'DeploymentOggDataGroupToRolesMappingArgs' group_to_roles_mapping: (Updatable) Defines the IDP Groups to GoldenGate roles mapping. This field is used only for IAM deployment and does not have any impact on non-IAM deployments. For IAM deployment, when user does not specify this mapping, then it has null value and default mapping is used. User belonging to each group can only perform the actions according to the role the respective group is mapped to.
        :param builtins.str identity_domain_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Identity Domain when IAM credential store is used.
        :param builtins.str key: (Updatable) The base64 encoded content of the PEM file containing the private key.
        :param builtins.str ogg_version: Version of OGG
        :param builtins.str password_secret_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the deployment password is stored.
        """
        pulumi.set(__self__, "deployment_name", deployment_name)
        if admin_password is not None:
            pulumi.set(__self__, "admin_password", admin_password)
        if admin_username is not None:
            pulumi.set(__self__, "admin_username", admin_username)
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if credential_store is not None:
            pulumi.set(__self__, "credential_store", credential_store)
        if group_to_roles_mapping is not None:
            pulumi.set(__self__, "group_to_roles_mapping", group_to_roles_mapping)
        if identity_domain_id is not None:
            pulumi.set(__self__, "identity_domain_id", identity_domain_id)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if ogg_version is not None:
            pulumi.set(__self__, "ogg_version", ogg_version)
        if password_secret_id is not None:
            pulumi.set(__self__, "password_secret_id", password_secret_id)

    @property
    @pulumi.getter(name="deploymentName")
    def deployment_name(self) -> builtins.str:
        """
        The name given to the GoldenGate service deployment. The name must be 1 to 32 characters long, must contain only alphanumeric characters and must start with a letter.
        """
        return pulumi.get(self, "deployment_name")

    @property
    @pulumi.getter(name="adminPassword")
    def admin_password(self) -> Optional[builtins.str]:
        """
        (Updatable) The password associated with the GoldenGate deployment console username. The password must be 8 to 30 characters long and must contain at least 1 uppercase, 1 lowercase, 1 numeric, and 1 special character. Special characters such as ‘$’, ‘^’, or ‘?’ are not allowed. This field will be deprecated and replaced by "passwordSecretId".
        """
        return pulumi.get(self, "admin_password")

    @property
    @pulumi.getter(name="adminUsername")
    def admin_username(self) -> Optional[builtins.str]:
        """
        (Updatable) The GoldenGate deployment console username.
        """
        return pulumi.get(self, "admin_username")

    @property
    @pulumi.getter
    def certificate(self) -> Optional[builtins.str]:
        """
        (Updatable) The base64 encoded content of the PEM file containing the SSL certificate.
        """
        return pulumi.get(self, "certificate")

    @property
    @pulumi.getter(name="credentialStore")
    def credential_store(self) -> Optional[builtins.str]:
        """
        (Updatable) The type of credential store for OGG.
        """
        return pulumi.get(self, "credential_store")

    @property
    @pulumi.getter(name="groupToRolesMapping")
    def group_to_roles_mapping(self) -> Optional['outputs.DeploymentOggDataGroupToRolesMapping']:
        """
        (Updatable) Defines the IDP Groups to GoldenGate roles mapping. This field is used only for IAM deployment and does not have any impact on non-IAM deployments. For IAM deployment, when user does not specify this mapping, then it has null value and default mapping is used. User belonging to each group can only perform the actions according to the role the respective group is mapped to.
        """
        return pulumi.get(self, "group_to_roles_mapping")

    @property
    @pulumi.getter(name="identityDomainId")
    def identity_domain_id(self) -> Optional[builtins.str]:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Identity Domain when IAM credential store is used.
        """
        return pulumi.get(self, "identity_domain_id")

    @property
    @pulumi.getter
    def key(self) -> Optional[builtins.str]:
        """
        (Updatable) The base64 encoded content of the PEM file containing the private key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="oggVersion")
    def ogg_version(self) -> Optional[builtins.str]:
        """
        Version of OGG
        """
        return pulumi.get(self, "ogg_version")

    @property
    @pulumi.getter(name="passwordSecretId")
    def password_secret_id(self) -> Optional[builtins.str]:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the deployment password is stored.
        """
        return pulumi.get(self, "password_secret_id")


@pulumi.output_type
class DeploymentOggDataGroupToRolesMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "securityGroupId":
            suggest = "security_group_id"
        elif key == "administratorGroupId":
            suggest = "administrator_group_id"
        elif key == "operatorGroupId":
            suggest = "operator_group_id"
        elif key == "userGroupId":
            suggest = "user_group_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentOggDataGroupToRolesMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentOggDataGroupToRolesMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentOggDataGroupToRolesMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 security_group_id: builtins.str,
                 administrator_group_id: Optional[builtins.str] = None,
                 operator_group_id: Optional[builtins.str] = None,
                 user_group_id: Optional[builtins.str] = None):
        """
        :param builtins.str security_group_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the IDP group which will be mapped to goldengate role securityGroup. It grants administration of security related objects and invoke security related service requests. This role has full privileges.
        :param builtins.str administrator_group_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the IDP group which will be mapped to goldengate role administratorGroup. It grants full access to the user, including the ability to alter general, non-security related operational parameters and profiles of the server.
        :param builtins.str operator_group_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the IDP group which will be mapped to goldengate role operatorGroup. It allows users to perform only operational actions, like starting and stopping resources. Operators cannot alter the operational parameters or profiles of the MA server.
        :param builtins.str user_group_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the IDP group which will be mapped to goldengate role userGroup. It allows information-only service requests, which do not alter or affect the operation of either the MA. Examples of query and read-only information include performance metric information and resource status and monitoring information
        """
        pulumi.set(__self__, "security_group_id", security_group_id)
        if administrator_group_id is not None:
            pulumi.set(__self__, "administrator_group_id", administrator_group_id)
        if operator_group_id is not None:
            pulumi.set(__self__, "operator_group_id", operator_group_id)
        if user_group_id is not None:
            pulumi.set(__self__, "user_group_id", user_group_id)

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> builtins.str:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the IDP group which will be mapped to goldengate role securityGroup. It grants administration of security related objects and invoke security related service requests. This role has full privileges.
        """
        return pulumi.get(self, "security_group_id")

    @property
    @pulumi.getter(name="administratorGroupId")
    def administrator_group_id(self) -> Optional[builtins.str]:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the IDP group which will be mapped to goldengate role administratorGroup. It grants full access to the user, including the ability to alter general, non-security related operational parameters and profiles of the server.
        """
        return pulumi.get(self, "administrator_group_id")

    @property
    @pulumi.getter(name="operatorGroupId")
    def operator_group_id(self) -> Optional[builtins.str]:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the IDP group which will be mapped to goldengate role operatorGroup. It allows users to perform only operational actions, like starting and stopping resources. Operators cannot alter the operational parameters or profiles of the MA server.
        """
        return pulumi.get(self, "operator_group_id")

    @property
    @pulumi.getter(name="userGroupId")
    def user_group_id(self) -> Optional[builtins.str]:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the IDP group which will be mapped to goldengate role userGroup. It allows information-only service requests, which do not alter or affect the operation of either the MA. Examples of query and read-only information include performance metric information and resource status and monitoring information
        """
        return pulumi.get(self, "user_group_id")


@pulumi.output_type
class PipelineLock(dict):
    def __init__(__self__, *,
                 type: builtins.str,
                 message: Optional[builtins.str] = None):
        """
        :param builtins.str type: Type of the lock.
        :param builtins.str message: A message added by the creator of the lock. This is typically used to give an indication of why the resource is locked.
        """
        pulumi.set(__self__, "type", type)
        if message is not None:
            pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Type of the lock.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def message(self) -> Optional[builtins.str]:
        """
        A message added by the creator of the lock. This is typically used to give an indication of why the resource is locked.
        """
        return pulumi.get(self, "message")


@pulumi.output_type
class PipelineMappingRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mappingType":
            suggest = "mapping_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineMappingRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineMappingRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineMappingRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mapping_type: Optional[builtins.str] = None,
                 source: Optional[builtins.str] = None,
                 target: Optional[builtins.str] = None):
        """
        :param builtins.str mapping_type: Defines the exclude/include rules of source and target schemas and tables when replicating from source to target. This option applies when creating and updating a pipeline.
        :param builtins.str source: The source schema/table combination for replication to target.
        :param builtins.str target: The target schema/table combination for replication from the source.
        """
        if mapping_type is not None:
            pulumi.set(__self__, "mapping_type", mapping_type)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter(name="mappingType")
    def mapping_type(self) -> Optional[builtins.str]:
        """
        Defines the exclude/include rules of source and target schemas and tables when replicating from source to target. This option applies when creating and updating a pipeline.
        """
        return pulumi.get(self, "mapping_type")

    @property
    @pulumi.getter
    def source(self) -> Optional[builtins.str]:
        """
        The source schema/table combination for replication to target.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def target(self) -> Optional[builtins.str]:
        """
        The target schema/table combination for replication from the source.
        """
        return pulumi.get(self, "target")


@pulumi.output_type
class PipelineProcessOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "initialDataLoad":
            suggest = "initial_data_load"
        elif key == "replicateSchemaChange":
            suggest = "replicate_schema_change"
        elif key == "shouldRestartOnFailure":
            suggest = "should_restart_on_failure"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineProcessOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineProcessOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineProcessOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 initial_data_load: 'outputs.PipelineProcessOptionsInitialDataLoad',
                 replicate_schema_change: 'outputs.PipelineProcessOptionsReplicateSchemaChange',
                 should_restart_on_failure: builtins.str):
        """
        :param 'PipelineProcessOptionsInitialDataLoadArgs' initial_data_load: (Updatable) Options required for the pipeline Initial Data Load. If enabled, copies existing data from source to target before replication.
        :param 'PipelineProcessOptionsReplicateSchemaChangeArgs' replicate_schema_change: (Updatable) Options required for pipeline Initial Data Load. If enabled, copies existing data from source to target before replication.
        :param builtins.str should_restart_on_failure: (Updatable) If ENABLED, then the replication process restarts itself upon failure. This option applies when creating or updating a pipeline.
        """
        pulumi.set(__self__, "initial_data_load", initial_data_load)
        pulumi.set(__self__, "replicate_schema_change", replicate_schema_change)
        pulumi.set(__self__, "should_restart_on_failure", should_restart_on_failure)

    @property
    @pulumi.getter(name="initialDataLoad")
    def initial_data_load(self) -> 'outputs.PipelineProcessOptionsInitialDataLoad':
        """
        (Updatable) Options required for the pipeline Initial Data Load. If enabled, copies existing data from source to target before replication.
        """
        return pulumi.get(self, "initial_data_load")

    @property
    @pulumi.getter(name="replicateSchemaChange")
    def replicate_schema_change(self) -> 'outputs.PipelineProcessOptionsReplicateSchemaChange':
        """
        (Updatable) Options required for pipeline Initial Data Load. If enabled, copies existing data from source to target before replication.
        """
        return pulumi.get(self, "replicate_schema_change")

    @property
    @pulumi.getter(name="shouldRestartOnFailure")
    def should_restart_on_failure(self) -> builtins.str:
        """
        (Updatable) If ENABLED, then the replication process restarts itself upon failure. This option applies when creating or updating a pipeline.
        """
        return pulumi.get(self, "should_restart_on_failure")


@pulumi.output_type
class PipelineProcessOptionsInitialDataLoad(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isInitialLoad":
            suggest = "is_initial_load"
        elif key == "actionOnExistingTable":
            suggest = "action_on_existing_table"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineProcessOptionsInitialDataLoad. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineProcessOptionsInitialDataLoad.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineProcessOptionsInitialDataLoad.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_initial_load: builtins.str,
                 action_on_existing_table: Optional[builtins.str] = None):
        """
        :param builtins.str is_initial_load: (Updatable) If ENABLED, then existing source data is also synchronized to the target when creating or updating the pipeline.
        :param builtins.str action_on_existing_table: (Updatable) Action upon existing tables in target when initial Data Load is set i.e., isInitialLoad=true.
        """
        pulumi.set(__self__, "is_initial_load", is_initial_load)
        if action_on_existing_table is not None:
            pulumi.set(__self__, "action_on_existing_table", action_on_existing_table)

    @property
    @pulumi.getter(name="isInitialLoad")
    def is_initial_load(self) -> builtins.str:
        """
        (Updatable) If ENABLED, then existing source data is also synchronized to the target when creating or updating the pipeline.
        """
        return pulumi.get(self, "is_initial_load")

    @property
    @pulumi.getter(name="actionOnExistingTable")
    def action_on_existing_table(self) -> Optional[builtins.str]:
        """
        (Updatable) Action upon existing tables in target when initial Data Load is set i.e., isInitialLoad=true.
        """
        return pulumi.get(self, "action_on_existing_table")


@pulumi.output_type
class PipelineProcessOptionsReplicateSchemaChange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "canReplicateSchemaChange":
            suggest = "can_replicate_schema_change"
        elif key == "actionOnDdlError":
            suggest = "action_on_ddl_error"
        elif key == "actionOnDmlError":
            suggest = "action_on_dml_error"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineProcessOptionsReplicateSchemaChange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineProcessOptionsReplicateSchemaChange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineProcessOptionsReplicateSchemaChange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 can_replicate_schema_change: builtins.str,
                 action_on_ddl_error: Optional[builtins.str] = None,
                 action_on_dml_error: Optional[builtins.str] = None):
        """
        :param builtins.str can_replicate_schema_change: (Updatable) If ENABLED, then addition or removal of schema is also replicated, apart from individual tables and records when creating or updating the pipeline.
        :param builtins.str action_on_ddl_error: (Updatable) Action upon DDL Error (active only if 'Replicate schema changes (DDL)' is selected) i.e canReplicateSchemaChange=true
        :param builtins.str action_on_dml_error: (Updatable) Action upon DML Error (active only if 'Replicate schema changes (DDL)' is selected) i.e canReplicateSchemaChange=true
        """
        pulumi.set(__self__, "can_replicate_schema_change", can_replicate_schema_change)
        if action_on_ddl_error is not None:
            pulumi.set(__self__, "action_on_ddl_error", action_on_ddl_error)
        if action_on_dml_error is not None:
            pulumi.set(__self__, "action_on_dml_error", action_on_dml_error)

    @property
    @pulumi.getter(name="canReplicateSchemaChange")
    def can_replicate_schema_change(self) -> builtins.str:
        """
        (Updatable) If ENABLED, then addition or removal of schema is also replicated, apart from individual tables and records when creating or updating the pipeline.
        """
        return pulumi.get(self, "can_replicate_schema_change")

    @property
    @pulumi.getter(name="actionOnDdlError")
    def action_on_ddl_error(self) -> Optional[builtins.str]:
        """
        (Updatable) Action upon DDL Error (active only if 'Replicate schema changes (DDL)' is selected) i.e canReplicateSchemaChange=true
        """
        return pulumi.get(self, "action_on_ddl_error")

    @property
    @pulumi.getter(name="actionOnDmlError")
    def action_on_dml_error(self) -> Optional[builtins.str]:
        """
        (Updatable) Action upon DML Error (active only if 'Replicate schema changes (DDL)' is selected) i.e canReplicateSchemaChange=true
        """
        return pulumi.get(self, "action_on_dml_error")


@pulumi.output_type
class PipelineSourceConnectionDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectionId":
            suggest = "connection_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineSourceConnectionDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineSourceConnectionDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineSourceConnectionDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connection_id: builtins.str):
        """
        :param builtins.str connection_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the connection being referenced.
        """
        pulumi.set(__self__, "connection_id", connection_id)

    @property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the connection being referenced.
        """
        return pulumi.get(self, "connection_id")


@pulumi.output_type
class PipelineTargetConnectionDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectionId":
            suggest = "connection_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineTargetConnectionDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineTargetConnectionDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineTargetConnectionDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connection_id: builtins.str):
        """
        :param builtins.str connection_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the connection being referenced. 
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        pulumi.set(__self__, "connection_id", connection_id)

    @property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the connection being referenced. 


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "connection_id")


@pulumi.output_type
class GetConnectionAdditionalAttributeResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str name: The name of the property entry.
        :param builtins.str value: The value of the property entry.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the property entry.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        The value of the property entry.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetConnectionAssignmentsConnectionAssignmentCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetConnectionAssignmentsConnectionAssignmentCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetConnectionAssignmentsConnectionAssignmentCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetConnectionAssignmentsConnectionAssignmentCollectionItemResult(dict):
    def __init__(__self__, *,
                 alias_name: builtins.str,
                 compartment_id: builtins.str,
                 connection_id: builtins.str,
                 deployment_id: builtins.str,
                 id: builtins.str,
                 is_lock_override: builtins.bool,
                 state: builtins.str,
                 time_created: builtins.str,
                 time_updated: builtins.str):
        """
        :param builtins.str alias_name: Credential store alias.
        :param builtins.str compartment_id: The OCID of the compartment that contains the work request. Work requests should be scoped  to the same compartment as the resource the work request affects. If the work request concerns  multiple resources, and those resources are not in the same compartment, it is up to the service team  to pick the primary resource whose compartment should be used.
        :param builtins.str connection_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the connection.
        :param builtins.str deployment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the deployment in which to list resources.
        :param builtins.str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the connection assignment being referenced.
        :param builtins.str state: A filter to return only connection assignments having the 'lifecycleState' given.
        :param builtins.str time_created: The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        :param builtins.str time_updated: The time the resource was last updated. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        pulumi.set(__self__, "alias_name", alias_name)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "connection_id", connection_id)
        pulumi.set(__self__, "deployment_id", deployment_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_lock_override", is_lock_override)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="aliasName")
    def alias_name(self) -> builtins.str:
        """
        Credential store alias.
        """
        return pulumi.get(self, "alias_name")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        The OCID of the compartment that contains the work request. Work requests should be scoped  to the same compartment as the resource the work request affects. If the work request concerns  multiple resources, and those resources are not in the same compartment, it is up to the service team  to pick the primary resource whose compartment should be used.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the connection.
        """
        return pulumi.get(self, "connection_id")

    @property
    @pulumi.getter(name="deploymentId")
    def deployment_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the deployment in which to list resources.
        """
        return pulumi.get(self, "deployment_id")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the connection assignment being referenced.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isLockOverride")
    def is_lock_override(self) -> builtins.bool:
        return pulumi.get(self, "is_lock_override")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        A filter to return only connection assignments having the 'lifecycleState' given.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> builtins.str:
        """
        The time the resource was last updated. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetConnectionAssignmentsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        """
        :param builtins.str name: The name of the connection in the assignment (aliasName).
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the connection in the assignment (aliasName).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetConnectionBootstrapServerResult(dict):
    def __init__(__self__, *,
                 host: builtins.str,
                 port: builtins.int,
                 private_ip: builtins.str):
        """
        :param builtins.str host: The name or address of a host.
               In case of Generic connection type it represents the Host and port separated by colon. Example: `"server.example.com:1234"`
               For multiple hosts, provide a comma separated list. Example: `"server1.example.com:1000,server1.example.com:2000"`
        :param builtins.int port: The port of an endpoint usually specified for a connection.
        :param builtins.str private_ip: Deprecated: this field will be removed in future versions. Either specify the private IP in the connectionString or host  field, or make sure the host name is resolvable in the target VCN.
               The private IP address of the connection's endpoint in the customer's VCN, typically a database endpoint or a big data endpoint (e.g. Kafka bootstrap server). In case the privateIp is provided, the subnetId must also be provided. In case the privateIp (and the subnetId) is not provided it is assumed the datasource is publicly accessible. In case the connection is accessible only privately, the lack of privateIp will result in not being able to access the connection.
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "private_ip", private_ip)

    @property
    @pulumi.getter
    def host(self) -> builtins.str:
        """
        The name or address of a host.
        In case of Generic connection type it represents the Host and port separated by colon. Example: `"server.example.com:1234"`
        For multiple hosts, provide a comma separated list. Example: `"server1.example.com:1000,server1.example.com:2000"`
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> builtins.int:
        """
        The port of an endpoint usually specified for a connection.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> builtins.str:
        """
        Deprecated: this field will be removed in future versions. Either specify the private IP in the connectionString or host  field, or make sure the host name is resolvable in the target VCN.
        The private IP address of the connection's endpoint in the customer's VCN, typically a database endpoint or a big data endpoint (e.g. Kafka bootstrap server). In case the privateIp is provided, the subnetId must also be provided. In case the privateIp (and the subnetId) is not provided it is assumed the datasource is publicly accessible. In case the connection is accessible only privately, the lack of privateIp will result in not being able to access the connection.
        """
        return pulumi.get(self, "private_ip")


@pulumi.output_type
class GetConnectionIngressIpResult(dict):
    def __init__(__self__, *,
                 ingress_ip: builtins.str):
        """
        :param builtins.str ingress_ip: A Private Endpoint IPv4 or IPv6 Address created in the customer's subnet.
        """
        pulumi.set(__self__, "ingress_ip", ingress_ip)

    @property
    @pulumi.getter(name="ingressIp")
    def ingress_ip(self) -> builtins.str:
        """
        A Private Endpoint IPv4 or IPv6 Address created in the customer's subnet.
        """
        return pulumi.get(self, "ingress_ip")


@pulumi.output_type
class GetConnectionLockResult(dict):
    def __init__(__self__, *,
                 message: builtins.str,
                 related_resource_id: builtins.str,
                 time_created: builtins.str,
                 type: builtins.str):
        """
        :param builtins.str message: A message added by the creator of the lock. This is typically used to give an indication of why the resource is locked.
        :param builtins.str related_resource_id: The id of the resource that is locking this resource. Indicates that deleting this resource will remove the lock.
        :param builtins.str time_created: The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        :param builtins.str type: Type of the lock.
        """
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "related_resource_id", related_resource_id)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def message(self) -> builtins.str:
        """
        A message added by the creator of the lock. This is typically used to give an indication of why the resource is locked.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter(name="relatedResourceId")
    def related_resource_id(self) -> builtins.str:
        """
        The id of the resource that is locking this resource. Indicates that deleting this resource will remove the lock.
        """
        return pulumi.get(self, "related_resource_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Type of the lock.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetConnectionsConnectionCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetConnectionsConnectionCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetConnectionsConnectionCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetConnectionsConnectionCollectionItemResult(dict):
    def __init__(__self__, *,
                 access_key_id: builtins.str,
                 account_key: builtins.str,
                 account_key_secret_id: builtins.str,
                 account_name: builtins.str,
                 additional_attributes: Sequence['outputs.GetConnectionsConnectionCollectionItemAdditionalAttributeResult'],
                 authentication_mode: builtins.str,
                 authentication_type: builtins.str,
                 azure_tenant_id: builtins.str,
                 bootstrap_servers: Sequence['outputs.GetConnectionsConnectionCollectionItemBootstrapServerResult'],
                 client_id: builtins.str,
                 client_secret: builtins.str,
                 client_secret_secret_id: builtins.str,
                 compartment_id: builtins.str,
                 connection_factory: builtins.str,
                 connection_string: builtins.str,
                 connection_type: builtins.str,
                 connection_url: builtins.str,
                 consumer_properties: builtins.str,
                 core_site_xml: builtins.str,
                 database_id: builtins.str,
                 database_name: builtins.str,
                 db_system_id: builtins.str,
                 defined_tags: Mapping[str, builtins.str],
                 deployment_id: builtins.str,
                 description: builtins.str,
                 display_name: builtins.str,
                 does_use_secret_ids: builtins.bool,
                 endpoint: builtins.str,
                 fingerprint: builtins.str,
                 freeform_tags: Mapping[str, builtins.str],
                 host: builtins.str,
                 id: builtins.str,
                 ingress_ips: Sequence['outputs.GetConnectionsConnectionCollectionItemIngressIpResult'],
                 is_lock_override: builtins.bool,
                 jndi_connection_factory: builtins.str,
                 jndi_initial_context_factory: builtins.str,
                 jndi_provider_url: builtins.str,
                 jndi_security_credentials: builtins.str,
                 jndi_security_credentials_secret_id: builtins.str,
                 jndi_security_principal: builtins.str,
                 key_id: builtins.str,
                 key_store: builtins.str,
                 key_store_password: builtins.str,
                 key_store_password_secret_id: builtins.str,
                 key_store_secret_id: builtins.str,
                 lifecycle_details: builtins.str,
                 locks: Sequence['outputs.GetConnectionsConnectionCollectionItemLockResult'],
                 nsg_ids: Sequence[builtins.str],
                 password: builtins.str,
                 password_secret_id: builtins.str,
                 port: builtins.int,
                 private_ip: builtins.str,
                 private_key_file: builtins.str,
                 private_key_file_secret_id: builtins.str,
                 private_key_passphrase: builtins.str,
                 private_key_passphrase_secret_id: builtins.str,
                 producer_properties: builtins.str,
                 public_key_fingerprint: builtins.str,
                 redis_cluster_id: builtins.str,
                 region: builtins.str,
                 routing_method: builtins.str,
                 sas_token: builtins.str,
                 sas_token_secret_id: builtins.str,
                 secret_access_key: builtins.str,
                 secret_access_key_secret_id: builtins.str,
                 security_protocol: builtins.str,
                 servers: builtins.str,
                 service_account_key_file: builtins.str,
                 service_account_key_file_secret_id: builtins.str,
                 session_mode: builtins.str,
                 should_use_jndi: builtins.bool,
                 should_use_resource_principal: builtins.bool,
                 should_validate_server_certificate: builtins.bool,
                 ssl_ca: builtins.str,
                 ssl_cert: builtins.str,
                 ssl_client_keystash: builtins.str,
                 ssl_client_keystash_secret_id: builtins.str,
                 ssl_client_keystoredb: builtins.str,
                 ssl_client_keystoredb_secret_id: builtins.str,
                 ssl_crl: builtins.str,
                 ssl_key: builtins.str,
                 ssl_key_password: builtins.str,
                 ssl_key_password_secret_id: builtins.str,
                 ssl_key_secret_id: builtins.str,
                 ssl_mode: builtins.str,
                 ssl_server_certificate: builtins.str,
                 state: builtins.str,
                 storage_credential_name: builtins.str,
                 stream_pool_id: builtins.str,
                 subnet_id: builtins.str,
                 system_tags: Mapping[str, builtins.str],
                 technology_type: builtins.str,
                 tenancy_id: builtins.str,
                 tenant_id: builtins.str,
                 time_created: builtins.str,
                 time_updated: builtins.str,
                 tls_ca_file: builtins.str,
                 tls_certificate_key_file: builtins.str,
                 tls_certificate_key_file_password: builtins.str,
                 tls_certificate_key_file_password_secret_id: builtins.str,
                 tls_certificate_key_file_secret_id: builtins.str,
                 trigger_refresh: builtins.bool,
                 trust_store: builtins.str,
                 trust_store_password: builtins.str,
                 trust_store_password_secret_id: builtins.str,
                 trust_store_secret_id: builtins.str,
                 url: builtins.str,
                 user_id: builtins.str,
                 username: builtins.str,
                 vault_id: builtins.str,
                 wallet: builtins.str,
                 wallet_secret_id: builtins.str):
        """
        :param builtins.str access_key_id: Access key ID to access the Amazon S3 bucket. e.g.: "this-is-not-the-secret"
        :param builtins.str account_key_secret_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the account key is stored. Note: When provided, 'accountKey' field must not be provided.
        :param builtins.str account_name: Sets the Azure storage account name.
        :param Sequence['GetConnectionsConnectionCollectionItemAdditionalAttributeArgs'] additional_attributes: An array of name-value pair attribute entries. Used as additional parameters in connection string.
        :param builtins.str authentication_mode: Authentication mode. It can be provided at creation of Oracle Autonomous Database Serverless connections, when a databaseId is provided. The default value is MTLS.
        :param builtins.str authentication_type: Used authentication mechanism to be provided for the following connection types:
               * SNOWFLAKE, AZURE_DATA_LAKE_STORAGE, ELASTICSEARCH, KAFKA_SCHEMA_REGISTRY, REDIS
               * JAVA_MESSAGE_SERVICE - If not provided, default is NONE. Optional until 2024-06-27, in the release after it will be made required.
               * DATABRICKS - Required fields by authentication types:
               * PERSONAL_ACCESS_TOKEN: username is always 'token', user must enter password
               * OAUTH_M2M: user must enter clientId and clientSecret
        :param builtins.str azure_tenant_id: Azure tenant ID of the application. This property is required when 'authenticationType' is set to 'AZURE_ACTIVE_DIRECTORY'. e.g.: 14593954-d337-4a61-a364-9f758c64f97f
        :param Sequence['GetConnectionsConnectionCollectionItemBootstrapServerArgs'] bootstrap_servers: Kafka bootstrap. Equivalent of bootstrap.servers configuration property in Kafka: list of KafkaBootstrapServer objects specified by host/port. Used for establishing the initial connection to the Kafka cluster. Example: `"server1.example.com:9092,server2.example.com:9092"`
        :param builtins.str client_id: Azure client ID of the application. This property is required when 'authenticationType' is set to 'AZURE_ACTIVE_DIRECTORY'. e.g.: 06ecaabf-8b80-4ec8-a0ec-20cbf463703d
        :param builtins.str client_secret_secret_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the client secret is stored. Note: When provided, 'clientSecret' field must not be provided.
        :param builtins.str compartment_id: The OCID of the compartment that contains the work request. Work requests should be scoped  to the same compartment as the resource the work request affects. If the work request concerns  multiple resources, and those resources are not in the same compartment, it is up to the service team  to pick the primary resource whose compartment should be used.
        :param builtins.str connection_factory: The of Java class implementing javax.jms.ConnectionFactory interface supplied by the Java Message Service provider. e.g.: 'com.stc.jmsjca.core.JConnectionFactoryXA'
        :param builtins.str connection_string: * ORACLE: Connect descriptor or Easy Connect Naming method used to connect to a database.
               * MONGODB: MongoDB connection string. e.g.: 'mongodb://mongodb0.example.com:27017/recordsrecords'
               * AZURE_SYNAPSE_ANALYTICS: JDBC connection string. e.g.: 'jdbc:sqlserver://<synapse-workspace>.sql.azuresynapse.net:1433;database=<db-name>;encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.sql.azuresynapse.net;loginTimeout=300;'
        :param builtins.str connection_type: The array of connection types.
        :param builtins.str connection_url: * JAVA_MESSAGE_SERVICE: Connection URL of the Java Message Service, specifying the protocol, host, and port. e.g.: 'mq://myjms.host.domain:7676'
               * SNOWFLAKE: JDBC connection URL. e.g.: 'jdbc:snowflake://<account_name>.snowflakecomputing.com/?warehouse=<warehouse-name>&db=<db-name>'
               * AMAZON_REDSHIFT: Connection URL. e.g.: 'jdbc:redshift://aws-redshift-instance.aaaaaaaaaaaa.us-east-2.redshift.amazonaws.com:5439/mydb'
               * DATABRICKS: Connection URL. e.g.: 'jdbc:databricks://adb-33934.4.azuredatabricks.net:443/default;transportMode=http;ssl=1;httpPath=sql/protocolv1/o/3393########44/0##3-7-hlrb'
        :param builtins.str consumer_properties: The base64 encoded content of the consumer.properties file.
        :param builtins.str database_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database being referenced.
        :param builtins.str database_name: The name of the database.
        :param builtins.str db_system_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database system being referenced.
        :param Mapping[str, builtins.str] defined_tags: Tags defined for this resource. Each key is predefined and scoped to a namespace.  Example: `{"foo-namespace.bar-key": "value"}`
        :param builtins.str deployment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the deployment being referenced.
        :param builtins.str description: Metadata about this specific object.
        :param builtins.str display_name: A filter to return only the resources that match the entire 'displayName' given.
        :param builtins.bool does_use_secret_ids: Indicates that sensitive attributes are provided via Secrets.
        :param builtins.str endpoint: Service endpoint. e.g for Azure Storage service: https://test.blob.core.windows.net. Optional for Microsoft Fabric service endpoint. Default value: https://onelake.dfs.fabric.microsoft.com
        :param Mapping[str, builtins.str] freeform_tags: A simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only.  Example: `{"bar-key": "value"}`
        :param builtins.str host: The name or address of a host.
               In case of Generic connection type it represents the Host and port separated by colon. Example: `"server.example.com:1234"`
               For multiple hosts, provide a comma separated list. Example: `"server1.example.com:1000,server1.example.com:2000"`
        :param builtins.str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the connection being referenced.
        :param Sequence['GetConnectionsConnectionCollectionItemIngressIpArgs'] ingress_ips: List of ingress IP addresses from where the GoldenGate deployment connects to this connection's privateIp.  Customers may optionally set up ingress security rules to restrict traffic from these IP addresses.
        :param builtins.str jndi_connection_factory: The Connection Factory can be looked up using this name. e.g.: 'ConnectionFactory'
        :param builtins.str jndi_initial_context_factory: The implementation of javax.naming.spi.InitialContextFactory interface that the client uses to obtain initial naming context. e.g.: 'org.apache.activemq.jndi.ActiveMQInitialContextFactory'
        :param builtins.str jndi_provider_url: The URL that Java Message Service will use to contact the JNDI provider. e.g.: 'tcp://myjms.host.domain:61616?jms.prefetchPolicy.all=1000'
        :param builtins.str jndi_security_credentials_secret_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the security credentials are stored associated to the principal. Note: When provided, 'jndiSecurityCredentials' field must not be provided.
        :param builtins.str jndi_security_principal: Specifies the identity of the principal (user) to be authenticated. e.g.: 'admin2'
        :param builtins.str key_id: Refers to the customer's master key OCID.  If provided, it references a key to manage secrets. Customers must add policies to permit GoldenGate to use this key.
        :param builtins.str key_store_password_secret_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the kafka Ssl KeyStore password is stored. Note: When provided, 'keyStorePassword' field must not be provided.
        :param builtins.str key_store_secret_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the content of the KeyStore file is stored. Note: When provided, 'keyStore' field must not be provided.
        :param builtins.str lifecycle_details: Describes the object's current state in detail. For example, it can be used to provide actionable information for a resource in a Failed state.
        :param Sequence['GetConnectionsConnectionCollectionItemLockArgs'] locks: Locks associated with this resource.
        :param Sequence[builtins.str] nsg_ids: An array of Network Security Group OCIDs used to define network access for either Deployments or Connections.
        :param builtins.str password_secret_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the password is stored. The password Oracle GoldenGate uses to connect the associated system of the given technology. It must conform to the specific security requirements including length, case sensitivity, and so on. Note: When provided, 'password' field must not be provided.
        :param builtins.int port: The port of an endpoint usually specified for a connection.
        :param builtins.str private_ip: Deprecated: this field will be removed in future versions. Either specify the private IP in the connectionString or host  field, or make sure the host name is resolvable in the target VCN.
               The private IP address of the connection's endpoint in the customer's VCN, typically a database endpoint or a big data endpoint (e.g. Kafka bootstrap server). In case the privateIp is provided, the subnetId must also be provided. In case the privateIp (and the subnetId) is not provided it is assumed the datasource is publicly accessible. In case the connection is accessible only privately, the lack of privateIp will result in not being able to access the connection.
        :param builtins.str private_key_file_secret_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret that stores the content of the private key file (PEM file) corresponding to the API key of the fingerprint. See documentation: https://docs.oracle.com/en-us/iaas/Content/Identity/Tasks/managingcredentials.htm Note: When provided, 'privateKeyFile' field must not be provided.
        :param builtins.str private_key_passphrase_secret_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret that stores the password for the private key file. Note: When provided, 'privateKeyPassphrase' field must not be provided.
        :param builtins.str producer_properties: The base64 encoded content of the producer.properties file.
        :param builtins.str redis_cluster_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Redis cluster.
        :param builtins.str region: The name of the region. e.g.: us-ashburn-1 If the region is not provided, backend will default to the default region.
        :param builtins.str routing_method: Controls the network traffic direction to the target: SHARED_SERVICE_ENDPOINT: Traffic flows through the Goldengate Service's network to public hosts. Cannot be used for private targets.  SHARED_DEPLOYMENT_ENDPOINT: Network traffic flows from the assigned deployment's private endpoint through the deployment's subnet. DEDICATED_ENDPOINT: A dedicated private endpoint is created in the target VCN subnet for the connection. The subnetId is required when DEDICATED_ENDPOINT networking is selected.
        :param builtins.str sas_token_secret_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the sas token is stored. Note: When provided, 'sasToken' field must not be provided.
        :param builtins.str secret_access_key_secret_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the secret access key is stored. Note: When provided, 'secretAccessKey' field must not be provided.
        :param builtins.str security_protocol: Security Protocol to be provided for the following connection types:
               * ELASTICSEARCH, KAFKA, MICROSOFT_SQLSERVER, MYSQL, POSTGRESQL, REDIS
               * JAVA_MESSAGE_SERVICE - If not provided, default is NONE. Optional until 2024-06-27, in the release after it will be made required.
        :param builtins.str servers: Comma separated list of server addresses, specified as host:port entries, where :port is optional. Example: `"server1.example.com:4000,server2.example.com:4000"`
               If port is not specified, a default value is set, in case of ELASTICSEARCH: 9200, for REDIS 6379.
        :param builtins.str service_account_key_file_secret_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the content of the service account key file is stored, which containing the credentials required to use Google Cloud Storage. Note: When provided, 'serviceAccountKeyFile' field must not be provided.
        :param builtins.str session_mode: The mode of the database connection session to be established by the data client. 'REDIRECT' - for a RAC database, 'DIRECT' - for a non-RAC database. Connection to a RAC database involves a redirection received from the SCAN listeners to the database node to connect to. By default the mode would be DIRECT.
        :param builtins.bool should_use_jndi: If set to true, Java Naming and Directory Interface (JNDI) properties should be provided.
        :param builtins.bool should_use_resource_principal: Indicates that the user intents to connect to the instance through resource principal.
        :param builtins.bool should_validate_server_certificate: If set to true, the driver validates the certificate that is sent by the database server.
        :param builtins.str ssl_ca: Database Certificate - The base64 encoded content of a .pem or .crt file. containing the server public key (for 1-way SSL).
        :param builtins.str ssl_client_keystash_secret_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the keystash file is stored,  which contains the encrypted password to the key database file. Note: When provided, 'sslClientKeystash' field must not be provided.
        :param builtins.str ssl_client_keystoredb_secret_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the keystore file stored,  which created at the client containing the server certificate / CA root certificate. Note: When provided, 'sslClientKeystoredb' field must not be provided.
        :param builtins.str ssl_key_password_secret_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the password is stored for the cert inside of the Keystore. In case it differs from the KeyStore password, it should be provided. Note: When provided, 'sslKeyPassword' field must not be provided.
        :param builtins.str ssl_key_secret_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret that stores the Client Key
               * The content of a .pem or .crt file containing the client private key (for 2-way SSL). Note: When provided, 'sslKey' field must not be provided.
        :param builtins.str ssl_mode: SSL mode to be provided for the following connection types: MYSQL, POSTGRESQL.
        :param builtins.str state: A filter to return only connections having the 'lifecycleState' given.
        :param builtins.str storage_credential_name: Optional. External storage credential name to access files on object storage such as ADLS Gen2, S3 or GCS.
        :param builtins.str stream_pool_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the stream pool being referenced.
        :param builtins.str subnet_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the target subnet of the dedicated connection.
        :param Mapping[str, builtins.str] system_tags: The system tags associated with this resource, if any. The system tags are set by Oracle Cloud Infrastructure services. Each key is predefined and scoped to namespaces.  For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{orcl-cloud: {free-tier-retain: true}}`
        :param builtins.str technology_type: The array of technology types.
        :param builtins.str tenancy_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the related Oracle Cloud Infrastructure tenancy.
        :param builtins.str tenant_id: Azure tenant ID of the application. e.g.: 14593954-d337-4a61-a364-9f758c64f97f
        :param builtins.str time_created: The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        :param builtins.str time_updated: The time the resource was last updated. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        :param builtins.str tls_certificate_key_file_password_secret_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret that stores the password of the tls certificate key file. Note: When provided, 'tlsCertificateKeyFilePassword' field must not be provided.
        :param builtins.str tls_certificate_key_file_secret_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret that stores the certificate key file of the mtls connection.
               * The content of a .pem file containing the client private key (for 2-way SSL). Note: When provided, 'tlsCertificateKeyFile' field must not be provided.
        :param builtins.str trust_store_password_secret_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the kafka Ssl TrustStore password is stored. Note: When provided, 'trustStorePassword' field must not be provided.
        :param builtins.str trust_store_secret_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the content of the TrustStore file is stored. Note: When provided, 'trustStore' field must not be provided.
        :param builtins.str url: Kafka Schema Registry URL. e.g.: 'https://server1.us.oracle.com:8081'
        :param builtins.str user_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure user who will access the Oracle NoSQL database. The user must have write access to the table they want to connect to. If the user is not provided, backend will default to the user who is calling the API endpoint.
        :param builtins.str username: The username Oracle GoldenGate uses to connect the associated system of the given technology. This username must already exist and be available by the system/application to be connected to and must conform to the case sensitivty requirments defined in it.
        :param builtins.str vault_id: Refers to the customer's vault OCID.  If provided, it references a vault where GoldenGate can manage secrets. Customers must add policies to permit GoldenGate to manage secrets contained within this vault.
        :param builtins.str wallet_secret_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the wallet file is stored.  The wallet contents Oracle GoldenGate uses to make connections to a database. Note: When provided, 'wallet' field must not be provided.
        """
        pulumi.set(__self__, "access_key_id", access_key_id)
        pulumi.set(__self__, "account_key", account_key)
        pulumi.set(__self__, "account_key_secret_id", account_key_secret_id)
        pulumi.set(__self__, "account_name", account_name)
        pulumi.set(__self__, "additional_attributes", additional_attributes)
        pulumi.set(__self__, "authentication_mode", authentication_mode)
        pulumi.set(__self__, "authentication_type", authentication_type)
        pulumi.set(__self__, "azure_tenant_id", azure_tenant_id)
        pulumi.set(__self__, "bootstrap_servers", bootstrap_servers)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "client_secret_secret_id", client_secret_secret_id)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "connection_factory", connection_factory)
        pulumi.set(__self__, "connection_string", connection_string)
        pulumi.set(__self__, "connection_type", connection_type)
        pulumi.set(__self__, "connection_url", connection_url)
        pulumi.set(__self__, "consumer_properties", consumer_properties)
        pulumi.set(__self__, "core_site_xml", core_site_xml)
        pulumi.set(__self__, "database_id", database_id)
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "db_system_id", db_system_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "deployment_id", deployment_id)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "does_use_secret_ids", does_use_secret_ids)
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "fingerprint", fingerprint)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ingress_ips", ingress_ips)
        pulumi.set(__self__, "is_lock_override", is_lock_override)
        pulumi.set(__self__, "jndi_connection_factory", jndi_connection_factory)
        pulumi.set(__self__, "jndi_initial_context_factory", jndi_initial_context_factory)
        pulumi.set(__self__, "jndi_provider_url", jndi_provider_url)
        pulumi.set(__self__, "jndi_security_credentials", jndi_security_credentials)
        pulumi.set(__self__, "jndi_security_credentials_secret_id", jndi_security_credentials_secret_id)
        pulumi.set(__self__, "jndi_security_principal", jndi_security_principal)
        pulumi.set(__self__, "key_id", key_id)
        pulumi.set(__self__, "key_store", key_store)
        pulumi.set(__self__, "key_store_password", key_store_password)
        pulumi.set(__self__, "key_store_password_secret_id", key_store_password_secret_id)
        pulumi.set(__self__, "key_store_secret_id", key_store_secret_id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "locks", locks)
        pulumi.set(__self__, "nsg_ids", nsg_ids)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "password_secret_id", password_secret_id)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "private_ip", private_ip)
        pulumi.set(__self__, "private_key_file", private_key_file)
        pulumi.set(__self__, "private_key_file_secret_id", private_key_file_secret_id)
        pulumi.set(__self__, "private_key_passphrase", private_key_passphrase)
        pulumi.set(__self__, "private_key_passphrase_secret_id", private_key_passphrase_secret_id)
        pulumi.set(__self__, "producer_properties", producer_properties)
        pulumi.set(__self__, "public_key_fingerprint", public_key_fingerprint)
        pulumi.set(__self__, "redis_cluster_id", redis_cluster_id)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "routing_method", routing_method)
        pulumi.set(__self__, "sas_token", sas_token)
        pulumi.set(__self__, "sas_token_secret_id", sas_token_secret_id)
        pulumi.set(__self__, "secret_access_key", secret_access_key)
        pulumi.set(__self__, "secret_access_key_secret_id", secret_access_key_secret_id)
        pulumi.set(__self__, "security_protocol", security_protocol)
        pulumi.set(__self__, "servers", servers)
        pulumi.set(__self__, "service_account_key_file", service_account_key_file)
        pulumi.set(__self__, "service_account_key_file_secret_id", service_account_key_file_secret_id)
        pulumi.set(__self__, "session_mode", session_mode)
        pulumi.set(__self__, "should_use_jndi", should_use_jndi)
        pulumi.set(__self__, "should_use_resource_principal", should_use_resource_principal)
        pulumi.set(__self__, "should_validate_server_certificate", should_validate_server_certificate)
        pulumi.set(__self__, "ssl_ca", ssl_ca)
        pulumi.set(__self__, "ssl_cert", ssl_cert)
        pulumi.set(__self__, "ssl_client_keystash", ssl_client_keystash)
        pulumi.set(__self__, "ssl_client_keystash_secret_id", ssl_client_keystash_secret_id)
        pulumi.set(__self__, "ssl_client_keystoredb", ssl_client_keystoredb)
        pulumi.set(__self__, "ssl_client_keystoredb_secret_id", ssl_client_keystoredb_secret_id)
        pulumi.set(__self__, "ssl_crl", ssl_crl)
        pulumi.set(__self__, "ssl_key", ssl_key)
        pulumi.set(__self__, "ssl_key_password", ssl_key_password)
        pulumi.set(__self__, "ssl_key_password_secret_id", ssl_key_password_secret_id)
        pulumi.set(__self__, "ssl_key_secret_id", ssl_key_secret_id)
        pulumi.set(__self__, "ssl_mode", ssl_mode)
        pulumi.set(__self__, "ssl_server_certificate", ssl_server_certificate)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "storage_credential_name", storage_credential_name)
        pulumi.set(__self__, "stream_pool_id", stream_pool_id)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "technology_type", technology_type)
        pulumi.set(__self__, "tenancy_id", tenancy_id)
        pulumi.set(__self__, "tenant_id", tenant_id)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "tls_ca_file", tls_ca_file)
        pulumi.set(__self__, "tls_certificate_key_file", tls_certificate_key_file)
        pulumi.set(__self__, "tls_certificate_key_file_password", tls_certificate_key_file_password)
        pulumi.set(__self__, "tls_certificate_key_file_password_secret_id", tls_certificate_key_file_password_secret_id)
        pulumi.set(__self__, "tls_certificate_key_file_secret_id", tls_certificate_key_file_secret_id)
        pulumi.set(__self__, "trigger_refresh", trigger_refresh)
        pulumi.set(__self__, "trust_store", trust_store)
        pulumi.set(__self__, "trust_store_password", trust_store_password)
        pulumi.set(__self__, "trust_store_password_secret_id", trust_store_password_secret_id)
        pulumi.set(__self__, "trust_store_secret_id", trust_store_secret_id)
        pulumi.set(__self__, "url", url)
        pulumi.set(__self__, "user_id", user_id)
        pulumi.set(__self__, "username", username)
        pulumi.set(__self__, "vault_id", vault_id)
        pulumi.set(__self__, "wallet", wallet)
        pulumi.set(__self__, "wallet_secret_id", wallet_secret_id)

    @property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> builtins.str:
        """
        Access key ID to access the Amazon S3 bucket. e.g.: "this-is-not-the-secret"
        """
        return pulumi.get(self, "access_key_id")

    @property
    @pulumi.getter(name="accountKey")
    def account_key(self) -> builtins.str:
        return pulumi.get(self, "account_key")

    @property
    @pulumi.getter(name="accountKeySecretId")
    def account_key_secret_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the account key is stored. Note: When provided, 'accountKey' field must not be provided.
        """
        return pulumi.get(self, "account_key_secret_id")

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> builtins.str:
        """
        Sets the Azure storage account name.
        """
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter(name="additionalAttributes")
    def additional_attributes(self) -> Sequence['outputs.GetConnectionsConnectionCollectionItemAdditionalAttributeResult']:
        """
        An array of name-value pair attribute entries. Used as additional parameters in connection string.
        """
        return pulumi.get(self, "additional_attributes")

    @property
    @pulumi.getter(name="authenticationMode")
    def authentication_mode(self) -> builtins.str:
        """
        Authentication mode. It can be provided at creation of Oracle Autonomous Database Serverless connections, when a databaseId is provided. The default value is MTLS.
        """
        return pulumi.get(self, "authentication_mode")

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> builtins.str:
        """
        Used authentication mechanism to be provided for the following connection types:
        * SNOWFLAKE, AZURE_DATA_LAKE_STORAGE, ELASTICSEARCH, KAFKA_SCHEMA_REGISTRY, REDIS
        * JAVA_MESSAGE_SERVICE - If not provided, default is NONE. Optional until 2024-06-27, in the release after it will be made required.
        * DATABRICKS - Required fields by authentication types:
        * PERSONAL_ACCESS_TOKEN: username is always 'token', user must enter password
        * OAUTH_M2M: user must enter clientId and clientSecret
        """
        return pulumi.get(self, "authentication_type")

    @property
    @pulumi.getter(name="azureTenantId")
    def azure_tenant_id(self) -> builtins.str:
        """
        Azure tenant ID of the application. This property is required when 'authenticationType' is set to 'AZURE_ACTIVE_DIRECTORY'. e.g.: 14593954-d337-4a61-a364-9f758c64f97f
        """
        return pulumi.get(self, "azure_tenant_id")

    @property
    @pulumi.getter(name="bootstrapServers")
    def bootstrap_servers(self) -> Sequence['outputs.GetConnectionsConnectionCollectionItemBootstrapServerResult']:
        """
        Kafka bootstrap. Equivalent of bootstrap.servers configuration property in Kafka: list of KafkaBootstrapServer objects specified by host/port. Used for establishing the initial connection to the Kafka cluster. Example: `"server1.example.com:9092,server2.example.com:9092"`
        """
        return pulumi.get(self, "bootstrap_servers")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> builtins.str:
        """
        Azure client ID of the application. This property is required when 'authenticationType' is set to 'AZURE_ACTIVE_DIRECTORY'. e.g.: 06ecaabf-8b80-4ec8-a0ec-20cbf463703d
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> builtins.str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="clientSecretSecretId")
    def client_secret_secret_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the client secret is stored. Note: When provided, 'clientSecret' field must not be provided.
        """
        return pulumi.get(self, "client_secret_secret_id")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        The OCID of the compartment that contains the work request. Work requests should be scoped  to the same compartment as the resource the work request affects. If the work request concerns  multiple resources, and those resources are not in the same compartment, it is up to the service team  to pick the primary resource whose compartment should be used.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="connectionFactory")
    def connection_factory(self) -> builtins.str:
        """
        The of Java class implementing javax.jms.ConnectionFactory interface supplied by the Java Message Service provider. e.g.: 'com.stc.jmsjca.core.JConnectionFactoryXA'
        """
        return pulumi.get(self, "connection_factory")

    @property
    @pulumi.getter(name="connectionString")
    def connection_string(self) -> builtins.str:
        """
        * ORACLE: Connect descriptor or Easy Connect Naming method used to connect to a database.
        * MONGODB: MongoDB connection string. e.g.: 'mongodb://mongodb0.example.com:27017/recordsrecords'
        * AZURE_SYNAPSE_ANALYTICS: JDBC connection string. e.g.: 'jdbc:sqlserver://<synapse-workspace>.sql.azuresynapse.net:1433;database=<db-name>;encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.sql.azuresynapse.net;loginTimeout=300;'
        """
        return pulumi.get(self, "connection_string")

    @property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> builtins.str:
        """
        The array of connection types.
        """
        return pulumi.get(self, "connection_type")

    @property
    @pulumi.getter(name="connectionUrl")
    def connection_url(self) -> builtins.str:
        """
        * JAVA_MESSAGE_SERVICE: Connection URL of the Java Message Service, specifying the protocol, host, and port. e.g.: 'mq://myjms.host.domain:7676'
        * SNOWFLAKE: JDBC connection URL. e.g.: 'jdbc:snowflake://<account_name>.snowflakecomputing.com/?warehouse=<warehouse-name>&db=<db-name>'
        * AMAZON_REDSHIFT: Connection URL. e.g.: 'jdbc:redshift://aws-redshift-instance.aaaaaaaaaaaa.us-east-2.redshift.amazonaws.com:5439/mydb'
        * DATABRICKS: Connection URL. e.g.: 'jdbc:databricks://adb-33934.4.azuredatabricks.net:443/default;transportMode=http;ssl=1;httpPath=sql/protocolv1/o/3393########44/0##3-7-hlrb'
        """
        return pulumi.get(self, "connection_url")

    @property
    @pulumi.getter(name="consumerProperties")
    def consumer_properties(self) -> builtins.str:
        """
        The base64 encoded content of the consumer.properties file.
        """
        return pulumi.get(self, "consumer_properties")

    @property
    @pulumi.getter(name="coreSiteXml")
    def core_site_xml(self) -> builtins.str:
        return pulumi.get(self, "core_site_xml")

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database being referenced.
        """
        return pulumi.get(self, "database_id")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> builtins.str:
        """
        The name of the database.
        """
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="dbSystemId")
    def db_system_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database system being referenced.
        """
        return pulumi.get(self, "db_system_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Tags defined for this resource. Each key is predefined and scoped to a namespace.  Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="deploymentId")
    def deployment_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the deployment being referenced.
        """
        return pulumi.get(self, "deployment_id")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        Metadata about this specific object.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A filter to return only the resources that match the entire 'displayName' given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="doesUseSecretIds")
    def does_use_secret_ids(self) -> builtins.bool:
        """
        Indicates that sensitive attributes are provided via Secrets.
        """
        return pulumi.get(self, "does_use_secret_ids")

    @property
    @pulumi.getter
    def endpoint(self) -> builtins.str:
        """
        Service endpoint. e.g for Azure Storage service: https://test.blob.core.windows.net. Optional for Microsoft Fabric service endpoint. Default value: https://onelake.dfs.fabric.microsoft.com
        """
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter
    def fingerprint(self) -> builtins.str:
        return pulumi.get(self, "fingerprint")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        A simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only.  Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def host(self) -> builtins.str:
        """
        The name or address of a host.
        In case of Generic connection type it represents the Host and port separated by colon. Example: `"server.example.com:1234"`
        For multiple hosts, provide a comma separated list. Example: `"server1.example.com:1000,server1.example.com:2000"`
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the connection being referenced.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ingressIps")
    def ingress_ips(self) -> Sequence['outputs.GetConnectionsConnectionCollectionItemIngressIpResult']:
        """
        List of ingress IP addresses from where the GoldenGate deployment connects to this connection's privateIp.  Customers may optionally set up ingress security rules to restrict traffic from these IP addresses.
        """
        return pulumi.get(self, "ingress_ips")

    @property
    @pulumi.getter(name="isLockOverride")
    def is_lock_override(self) -> builtins.bool:
        return pulumi.get(self, "is_lock_override")

    @property
    @pulumi.getter(name="jndiConnectionFactory")
    def jndi_connection_factory(self) -> builtins.str:
        """
        The Connection Factory can be looked up using this name. e.g.: 'ConnectionFactory'
        """
        return pulumi.get(self, "jndi_connection_factory")

    @property
    @pulumi.getter(name="jndiInitialContextFactory")
    def jndi_initial_context_factory(self) -> builtins.str:
        """
        The implementation of javax.naming.spi.InitialContextFactory interface that the client uses to obtain initial naming context. e.g.: 'org.apache.activemq.jndi.ActiveMQInitialContextFactory'
        """
        return pulumi.get(self, "jndi_initial_context_factory")

    @property
    @pulumi.getter(name="jndiProviderUrl")
    def jndi_provider_url(self) -> builtins.str:
        """
        The URL that Java Message Service will use to contact the JNDI provider. e.g.: 'tcp://myjms.host.domain:61616?jms.prefetchPolicy.all=1000'
        """
        return pulumi.get(self, "jndi_provider_url")

    @property
    @pulumi.getter(name="jndiSecurityCredentials")
    def jndi_security_credentials(self) -> builtins.str:
        return pulumi.get(self, "jndi_security_credentials")

    @property
    @pulumi.getter(name="jndiSecurityCredentialsSecretId")
    def jndi_security_credentials_secret_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the security credentials are stored associated to the principal. Note: When provided, 'jndiSecurityCredentials' field must not be provided.
        """
        return pulumi.get(self, "jndi_security_credentials_secret_id")

    @property
    @pulumi.getter(name="jndiSecurityPrincipal")
    def jndi_security_principal(self) -> builtins.str:
        """
        Specifies the identity of the principal (user) to be authenticated. e.g.: 'admin2'
        """
        return pulumi.get(self, "jndi_security_principal")

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> builtins.str:
        """
        Refers to the customer's master key OCID.  If provided, it references a key to manage secrets. Customers must add policies to permit GoldenGate to use this key.
        """
        return pulumi.get(self, "key_id")

    @property
    @pulumi.getter(name="keyStore")
    def key_store(self) -> builtins.str:
        return pulumi.get(self, "key_store")

    @property
    @pulumi.getter(name="keyStorePassword")
    def key_store_password(self) -> builtins.str:
        return pulumi.get(self, "key_store_password")

    @property
    @pulumi.getter(name="keyStorePasswordSecretId")
    def key_store_password_secret_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the kafka Ssl KeyStore password is stored. Note: When provided, 'keyStorePassword' field must not be provided.
        """
        return pulumi.get(self, "key_store_password_secret_id")

    @property
    @pulumi.getter(name="keyStoreSecretId")
    def key_store_secret_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the content of the KeyStore file is stored. Note: When provided, 'keyStore' field must not be provided.
        """
        return pulumi.get(self, "key_store_secret_id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> builtins.str:
        """
        Describes the object's current state in detail. For example, it can be used to provide actionable information for a resource in a Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def locks(self) -> Sequence['outputs.GetConnectionsConnectionCollectionItemLockResult']:
        """
        Locks associated with this resource.
        """
        return pulumi.get(self, "locks")

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Sequence[builtins.str]:
        """
        An array of Network Security Group OCIDs used to define network access for either Deployments or Connections.
        """
        return pulumi.get(self, "nsg_ids")

    @property
    @pulumi.getter
    def password(self) -> builtins.str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="passwordSecretId")
    def password_secret_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the password is stored. The password Oracle GoldenGate uses to connect the associated system of the given technology. It must conform to the specific security requirements including length, case sensitivity, and so on. Note: When provided, 'password' field must not be provided.
        """
        return pulumi.get(self, "password_secret_id")

    @property
    @pulumi.getter
    def port(self) -> builtins.int:
        """
        The port of an endpoint usually specified for a connection.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> builtins.str:
        """
        Deprecated: this field will be removed in future versions. Either specify the private IP in the connectionString or host  field, or make sure the host name is resolvable in the target VCN.
        The private IP address of the connection's endpoint in the customer's VCN, typically a database endpoint or a big data endpoint (e.g. Kafka bootstrap server). In case the privateIp is provided, the subnetId must also be provided. In case the privateIp (and the subnetId) is not provided it is assumed the datasource is publicly accessible. In case the connection is accessible only privately, the lack of privateIp will result in not being able to access the connection.
        """
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="privateKeyFile")
    def private_key_file(self) -> builtins.str:
        return pulumi.get(self, "private_key_file")

    @property
    @pulumi.getter(name="privateKeyFileSecretId")
    def private_key_file_secret_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret that stores the content of the private key file (PEM file) corresponding to the API key of the fingerprint. See documentation: https://docs.oracle.com/en-us/iaas/Content/Identity/Tasks/managingcredentials.htm Note: When provided, 'privateKeyFile' field must not be provided.
        """
        return pulumi.get(self, "private_key_file_secret_id")

    @property
    @pulumi.getter(name="privateKeyPassphrase")
    def private_key_passphrase(self) -> builtins.str:
        return pulumi.get(self, "private_key_passphrase")

    @property
    @pulumi.getter(name="privateKeyPassphraseSecretId")
    def private_key_passphrase_secret_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret that stores the password for the private key file. Note: When provided, 'privateKeyPassphrase' field must not be provided.
        """
        return pulumi.get(self, "private_key_passphrase_secret_id")

    @property
    @pulumi.getter(name="producerProperties")
    def producer_properties(self) -> builtins.str:
        """
        The base64 encoded content of the producer.properties file.
        """
        return pulumi.get(self, "producer_properties")

    @property
    @pulumi.getter(name="publicKeyFingerprint")
    def public_key_fingerprint(self) -> builtins.str:
        return pulumi.get(self, "public_key_fingerprint")

    @property
    @pulumi.getter(name="redisClusterId")
    def redis_cluster_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Redis cluster.
        """
        return pulumi.get(self, "redis_cluster_id")

    @property
    @pulumi.getter
    def region(self) -> builtins.str:
        """
        The name of the region. e.g.: us-ashburn-1 If the region is not provided, backend will default to the default region.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="routingMethod")
    def routing_method(self) -> builtins.str:
        """
        Controls the network traffic direction to the target: SHARED_SERVICE_ENDPOINT: Traffic flows through the Goldengate Service's network to public hosts. Cannot be used for private targets.  SHARED_DEPLOYMENT_ENDPOINT: Network traffic flows from the assigned deployment's private endpoint through the deployment's subnet. DEDICATED_ENDPOINT: A dedicated private endpoint is created in the target VCN subnet for the connection. The subnetId is required when DEDICATED_ENDPOINT networking is selected.
        """
        return pulumi.get(self, "routing_method")

    @property
    @pulumi.getter(name="sasToken")
    def sas_token(self) -> builtins.str:
        return pulumi.get(self, "sas_token")

    @property
    @pulumi.getter(name="sasTokenSecretId")
    def sas_token_secret_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the sas token is stored. Note: When provided, 'sasToken' field must not be provided.
        """
        return pulumi.get(self, "sas_token_secret_id")

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> builtins.str:
        return pulumi.get(self, "secret_access_key")

    @property
    @pulumi.getter(name="secretAccessKeySecretId")
    def secret_access_key_secret_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the secret access key is stored. Note: When provided, 'secretAccessKey' field must not be provided.
        """
        return pulumi.get(self, "secret_access_key_secret_id")

    @property
    @pulumi.getter(name="securityProtocol")
    def security_protocol(self) -> builtins.str:
        """
        Security Protocol to be provided for the following connection types:
        * ELASTICSEARCH, KAFKA, MICROSOFT_SQLSERVER, MYSQL, POSTGRESQL, REDIS
        * JAVA_MESSAGE_SERVICE - If not provided, default is NONE. Optional until 2024-06-27, in the release after it will be made required.
        """
        return pulumi.get(self, "security_protocol")

    @property
    @pulumi.getter
    def servers(self) -> builtins.str:
        """
        Comma separated list of server addresses, specified as host:port entries, where :port is optional. Example: `"server1.example.com:4000,server2.example.com:4000"`
        If port is not specified, a default value is set, in case of ELASTICSEARCH: 9200, for REDIS 6379.
        """
        return pulumi.get(self, "servers")

    @property
    @pulumi.getter(name="serviceAccountKeyFile")
    def service_account_key_file(self) -> builtins.str:
        return pulumi.get(self, "service_account_key_file")

    @property
    @pulumi.getter(name="serviceAccountKeyFileSecretId")
    def service_account_key_file_secret_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the content of the service account key file is stored, which containing the credentials required to use Google Cloud Storage. Note: When provided, 'serviceAccountKeyFile' field must not be provided.
        """
        return pulumi.get(self, "service_account_key_file_secret_id")

    @property
    @pulumi.getter(name="sessionMode")
    def session_mode(self) -> builtins.str:
        """
        The mode of the database connection session to be established by the data client. 'REDIRECT' - for a RAC database, 'DIRECT' - for a non-RAC database. Connection to a RAC database involves a redirection received from the SCAN listeners to the database node to connect to. By default the mode would be DIRECT.
        """
        return pulumi.get(self, "session_mode")

    @property
    @pulumi.getter(name="shouldUseJndi")
    def should_use_jndi(self) -> builtins.bool:
        """
        If set to true, Java Naming and Directory Interface (JNDI) properties should be provided.
        """
        return pulumi.get(self, "should_use_jndi")

    @property
    @pulumi.getter(name="shouldUseResourcePrincipal")
    def should_use_resource_principal(self) -> builtins.bool:
        """
        Indicates that the user intents to connect to the instance through resource principal.
        """
        return pulumi.get(self, "should_use_resource_principal")

    @property
    @pulumi.getter(name="shouldValidateServerCertificate")
    def should_validate_server_certificate(self) -> builtins.bool:
        """
        If set to true, the driver validates the certificate that is sent by the database server.
        """
        return pulumi.get(self, "should_validate_server_certificate")

    @property
    @pulumi.getter(name="sslCa")
    def ssl_ca(self) -> builtins.str:
        """
        Database Certificate - The base64 encoded content of a .pem or .crt file. containing the server public key (for 1-way SSL).
        """
        return pulumi.get(self, "ssl_ca")

    @property
    @pulumi.getter(name="sslCert")
    def ssl_cert(self) -> builtins.str:
        return pulumi.get(self, "ssl_cert")

    @property
    @pulumi.getter(name="sslClientKeystash")
    def ssl_client_keystash(self) -> builtins.str:
        return pulumi.get(self, "ssl_client_keystash")

    @property
    @pulumi.getter(name="sslClientKeystashSecretId")
    def ssl_client_keystash_secret_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the keystash file is stored,  which contains the encrypted password to the key database file. Note: When provided, 'sslClientKeystash' field must not be provided.
        """
        return pulumi.get(self, "ssl_client_keystash_secret_id")

    @property
    @pulumi.getter(name="sslClientKeystoredb")
    def ssl_client_keystoredb(self) -> builtins.str:
        return pulumi.get(self, "ssl_client_keystoredb")

    @property
    @pulumi.getter(name="sslClientKeystoredbSecretId")
    def ssl_client_keystoredb_secret_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the keystore file stored,  which created at the client containing the server certificate / CA root certificate. Note: When provided, 'sslClientKeystoredb' field must not be provided.
        """
        return pulumi.get(self, "ssl_client_keystoredb_secret_id")

    @property
    @pulumi.getter(name="sslCrl")
    def ssl_crl(self) -> builtins.str:
        return pulumi.get(self, "ssl_crl")

    @property
    @pulumi.getter(name="sslKey")
    def ssl_key(self) -> builtins.str:
        return pulumi.get(self, "ssl_key")

    @property
    @pulumi.getter(name="sslKeyPassword")
    def ssl_key_password(self) -> builtins.str:
        return pulumi.get(self, "ssl_key_password")

    @property
    @pulumi.getter(name="sslKeyPasswordSecretId")
    def ssl_key_password_secret_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the password is stored for the cert inside of the Keystore. In case it differs from the KeyStore password, it should be provided. Note: When provided, 'sslKeyPassword' field must not be provided.
        """
        return pulumi.get(self, "ssl_key_password_secret_id")

    @property
    @pulumi.getter(name="sslKeySecretId")
    def ssl_key_secret_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret that stores the Client Key
        * The content of a .pem or .crt file containing the client private key (for 2-way SSL). Note: When provided, 'sslKey' field must not be provided.
        """
        return pulumi.get(self, "ssl_key_secret_id")

    @property
    @pulumi.getter(name="sslMode")
    def ssl_mode(self) -> builtins.str:
        """
        SSL mode to be provided for the following connection types: MYSQL, POSTGRESQL.
        """
        return pulumi.get(self, "ssl_mode")

    @property
    @pulumi.getter(name="sslServerCertificate")
    def ssl_server_certificate(self) -> builtins.str:
        return pulumi.get(self, "ssl_server_certificate")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        A filter to return only connections having the 'lifecycleState' given.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="storageCredentialName")
    def storage_credential_name(self) -> builtins.str:
        """
        Optional. External storage credential name to access files on object storage such as ADLS Gen2, S3 or GCS.
        """
        return pulumi.get(self, "storage_credential_name")

    @property
    @pulumi.getter(name="streamPoolId")
    def stream_pool_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the stream pool being referenced.
        """
        return pulumi.get(self, "stream_pool_id")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the target subnet of the dedicated connection.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        The system tags associated with this resource, if any. The system tags are set by Oracle Cloud Infrastructure services. Each key is predefined and scoped to namespaces.  For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{orcl-cloud: {free-tier-retain: true}}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="technologyType")
    def technology_type(self) -> builtins.str:
        """
        The array of technology types.
        """
        return pulumi.get(self, "technology_type")

    @property
    @pulumi.getter(name="tenancyId")
    def tenancy_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the related Oracle Cloud Infrastructure tenancy.
        """
        return pulumi.get(self, "tenancy_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> builtins.str:
        """
        Azure tenant ID of the application. e.g.: 14593954-d337-4a61-a364-9f758c64f97f
        """
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> builtins.str:
        """
        The time the resource was last updated. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="tlsCaFile")
    def tls_ca_file(self) -> builtins.str:
        return pulumi.get(self, "tls_ca_file")

    @property
    @pulumi.getter(name="tlsCertificateKeyFile")
    def tls_certificate_key_file(self) -> builtins.str:
        return pulumi.get(self, "tls_certificate_key_file")

    @property
    @pulumi.getter(name="tlsCertificateKeyFilePassword")
    def tls_certificate_key_file_password(self) -> builtins.str:
        return pulumi.get(self, "tls_certificate_key_file_password")

    @property
    @pulumi.getter(name="tlsCertificateKeyFilePasswordSecretId")
    def tls_certificate_key_file_password_secret_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret that stores the password of the tls certificate key file. Note: When provided, 'tlsCertificateKeyFilePassword' field must not be provided.
        """
        return pulumi.get(self, "tls_certificate_key_file_password_secret_id")

    @property
    @pulumi.getter(name="tlsCertificateKeyFileSecretId")
    def tls_certificate_key_file_secret_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret that stores the certificate key file of the mtls connection.
        * The content of a .pem file containing the client private key (for 2-way SSL). Note: When provided, 'tlsCertificateKeyFile' field must not be provided.
        """
        return pulumi.get(self, "tls_certificate_key_file_secret_id")

    @property
    @pulumi.getter(name="triggerRefresh")
    def trigger_refresh(self) -> builtins.bool:
        return pulumi.get(self, "trigger_refresh")

    @property
    @pulumi.getter(name="trustStore")
    def trust_store(self) -> builtins.str:
        return pulumi.get(self, "trust_store")

    @property
    @pulumi.getter(name="trustStorePassword")
    def trust_store_password(self) -> builtins.str:
        return pulumi.get(self, "trust_store_password")

    @property
    @pulumi.getter(name="trustStorePasswordSecretId")
    def trust_store_password_secret_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the kafka Ssl TrustStore password is stored. Note: When provided, 'trustStorePassword' field must not be provided.
        """
        return pulumi.get(self, "trust_store_password_secret_id")

    @property
    @pulumi.getter(name="trustStoreSecretId")
    def trust_store_secret_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the content of the TrustStore file is stored. Note: When provided, 'trustStore' field must not be provided.
        """
        return pulumi.get(self, "trust_store_secret_id")

    @property
    @pulumi.getter
    def url(self) -> builtins.str:
        """
        Kafka Schema Registry URL. e.g.: 'https://server1.us.oracle.com:8081'
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure user who will access the Oracle NoSQL database. The user must have write access to the table they want to connect to. If the user is not provided, backend will default to the user who is calling the API endpoint.
        """
        return pulumi.get(self, "user_id")

    @property
    @pulumi.getter
    def username(self) -> builtins.str:
        """
        The username Oracle GoldenGate uses to connect the associated system of the given technology. This username must already exist and be available by the system/application to be connected to and must conform to the case sensitivty requirments defined in it.
        """
        return pulumi.get(self, "username")

    @property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> builtins.str:
        """
        Refers to the customer's vault OCID.  If provided, it references a vault where GoldenGate can manage secrets. Customers must add policies to permit GoldenGate to manage secrets contained within this vault.
        """
        return pulumi.get(self, "vault_id")

    @property
    @pulumi.getter
    def wallet(self) -> builtins.str:
        return pulumi.get(self, "wallet")

    @property
    @pulumi.getter(name="walletSecretId")
    def wallet_secret_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the wallet file is stored.  The wallet contents Oracle GoldenGate uses to make connections to a database. Note: When provided, 'wallet' field must not be provided.
        """
        return pulumi.get(self, "wallet_secret_id")


@pulumi.output_type
class GetConnectionsConnectionCollectionItemAdditionalAttributeResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str name: The name of the property entry.
        :param builtins.str value: The value of the property entry.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the property entry.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        The value of the property entry.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetConnectionsConnectionCollectionItemBootstrapServerResult(dict):
    def __init__(__self__, *,
                 host: builtins.str,
                 port: builtins.int,
                 private_ip: builtins.str):
        """
        :param builtins.str host: The name or address of a host.
               In case of Generic connection type it represents the Host and port separated by colon. Example: `"server.example.com:1234"`
               For multiple hosts, provide a comma separated list. Example: `"server1.example.com:1000,server1.example.com:2000"`
        :param builtins.int port: The port of an endpoint usually specified for a connection.
        :param builtins.str private_ip: Deprecated: this field will be removed in future versions. Either specify the private IP in the connectionString or host  field, or make sure the host name is resolvable in the target VCN.
               The private IP address of the connection's endpoint in the customer's VCN, typically a database endpoint or a big data endpoint (e.g. Kafka bootstrap server). In case the privateIp is provided, the subnetId must also be provided. In case the privateIp (and the subnetId) is not provided it is assumed the datasource is publicly accessible. In case the connection is accessible only privately, the lack of privateIp will result in not being able to access the connection.
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "private_ip", private_ip)

    @property
    @pulumi.getter
    def host(self) -> builtins.str:
        """
        The name or address of a host.
        In case of Generic connection type it represents the Host and port separated by colon. Example: `"server.example.com:1234"`
        For multiple hosts, provide a comma separated list. Example: `"server1.example.com:1000,server1.example.com:2000"`
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> builtins.int:
        """
        The port of an endpoint usually specified for a connection.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> builtins.str:
        """
        Deprecated: this field will be removed in future versions. Either specify the private IP in the connectionString or host  field, or make sure the host name is resolvable in the target VCN.
        The private IP address of the connection's endpoint in the customer's VCN, typically a database endpoint or a big data endpoint (e.g. Kafka bootstrap server). In case the privateIp is provided, the subnetId must also be provided. In case the privateIp (and the subnetId) is not provided it is assumed the datasource is publicly accessible. In case the connection is accessible only privately, the lack of privateIp will result in not being able to access the connection.
        """
        return pulumi.get(self, "private_ip")


@pulumi.output_type
class GetConnectionsConnectionCollectionItemIngressIpResult(dict):
    def __init__(__self__, *,
                 ingress_ip: builtins.str):
        """
        :param builtins.str ingress_ip: A Private Endpoint IPv4 or IPv6 Address created in the customer's subnet.
        """
        pulumi.set(__self__, "ingress_ip", ingress_ip)

    @property
    @pulumi.getter(name="ingressIp")
    def ingress_ip(self) -> builtins.str:
        """
        A Private Endpoint IPv4 or IPv6 Address created in the customer's subnet.
        """
        return pulumi.get(self, "ingress_ip")


@pulumi.output_type
class GetConnectionsConnectionCollectionItemLockResult(dict):
    def __init__(__self__, *,
                 message: builtins.str,
                 related_resource_id: builtins.str,
                 time_created: builtins.str,
                 type: builtins.str):
        """
        :param builtins.str message: A message added by the creator of the lock. This is typically used to give an indication of why the resource is locked.
        :param builtins.str related_resource_id: The id of the resource that is locking this resource. Indicates that deleting this resource will remove the lock.
        :param builtins.str time_created: The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        :param builtins.str type: Type of the lock.
        """
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "related_resource_id", related_resource_id)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def message(self) -> builtins.str:
        """
        A message added by the creator of the lock. This is typically used to give an indication of why the resource is locked.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter(name="relatedResourceId")
    def related_resource_id(self) -> builtins.str:
        """
        The id of the resource that is locking this resource. Indicates that deleting this resource will remove the lock.
        """
        return pulumi.get(self, "related_resource_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Type of the lock.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetConnectionsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        """
        :param builtins.str name: The name of the property entry.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the property entry.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDatabaseRegistrationsDatabaseRegistrationCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDatabaseRegistrationsDatabaseRegistrationCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDatabaseRegistrationsDatabaseRegistrationCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDatabaseRegistrationsDatabaseRegistrationCollectionItemResult(dict):
    def __init__(__self__, *,
                 alias_name: builtins.str,
                 compartment_id: builtins.str,
                 connection_string: builtins.str,
                 database_id: builtins.str,
                 defined_tags: Mapping[str, builtins.str],
                 description: builtins.str,
                 display_name: builtins.str,
                 fqdn: builtins.str,
                 freeform_tags: Mapping[str, builtins.str],
                 id: builtins.str,
                 ip_address: builtins.str,
                 key_id: builtins.str,
                 lifecycle_details: builtins.str,
                 password: builtins.str,
                 rce_private_ip: builtins.str,
                 secret_compartment_id: builtins.str,
                 secret_id: builtins.str,
                 session_mode: builtins.str,
                 state: builtins.str,
                 subnet_id: builtins.str,
                 system_tags: Mapping[str, builtins.str],
                 time_created: builtins.str,
                 time_updated: builtins.str,
                 username: builtins.str,
                 vault_id: builtins.str,
                 wallet: builtins.str):
        """
        :param builtins.str alias_name: Credential store alias.
        :param builtins.str compartment_id: The OCID of the compartment that contains the work request. Work requests should be scoped  to the same compartment as the resource the work request affects. If the work request concerns  multiple resources, and those resources are not in the same compartment, it is up to the service team  to pick the primary resource whose compartment should be used.
        :param builtins.str connection_string: Connect descriptor or Easy Connect Naming method used to connect to a database.
        :param builtins.str database_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database being referenced.
        :param Mapping[str, builtins.str] defined_tags: Tags defined for this resource. Each key is predefined and scoped to a namespace.  Example: `{"foo-namespace.bar-key": "value"}`
        :param builtins.str description: Metadata about this specific object.
        :param builtins.str display_name: A filter to return only the resources that match the entire 'displayName' given.
        :param builtins.str fqdn: A three-label Fully Qualified Domain Name (FQDN) for a resource.
        :param Mapping[str, builtins.str] freeform_tags: A simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only.  Example: `{"bar-key": "value"}`
        :param builtins.str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the databaseRegistration being referenced.
        :param builtins.str ip_address: The private IP address in the customer's VCN of the customer's endpoint, typically a database.
        :param builtins.str key_id: Refers to the customer's master key OCID.  If provided, it references a key to manage secrets. Customers must add policies to permit GoldenGate to use this key.
        :param builtins.str lifecycle_details: Describes the object's current state in detail. For example, it can be used to provide actionable information for a resource in a Failed state.
        :param builtins.str rce_private_ip: A Private Endpoint IP address created in the customer's subnet.  A customer database can expect network traffic initiated by GoldenGate Service from this IP address.  It can also send network traffic to this IP address, typically in response to requests from GoldenGate Service.  The customer may use this IP address in Security Lists or Network Security Groups (NSG) as needed.
        :param builtins.str secret_compartment_id: The OCID of the compartment where the GoldenGate Secret will be created.  If provided, it references a key to manage secrets. Customers must add policies to permit GoldenGate to use this key.
        :param builtins.str secret_id: The OCID of the customer's GoldenGate Service Secret.  If provided, it references a key that customers will be required to ensure the policies are established  to permit GoldenGate to use this Secret.
        :param builtins.str session_mode: The mode of the database connection session to be established by the data client. 'REDIRECT' - for a RAC database, 'DIRECT' - for a non-RAC database. Connection to a RAC database involves a redirection received from the SCAN listeners to the database node to connect to. By default the mode would be DIRECT.
        :param builtins.str state: A filter to return only the resources that match the 'lifecycleState' given.
        :param builtins.str subnet_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the target subnet of the dedicated connection.
        :param Mapping[str, builtins.str] system_tags: The system tags associated with this resource, if any. The system tags are set by Oracle Cloud Infrastructure services. Each key is predefined and scoped to namespaces.  For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{orcl-cloud: {free-tier-retain: true}}`
        :param builtins.str time_created: The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        :param builtins.str time_updated: The time the resource was last updated. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        :param builtins.str username: The username Oracle GoldenGate uses to connect the associated system of the given technology. This username must already exist and be available by the system/application to be connected to and must conform to the case sensitivty requirments defined in it.
        :param builtins.str vault_id: Refers to the customer's vault OCID.  If provided, it references a vault where GoldenGate can manage secrets. Customers must add policies to permit GoldenGate to manage secrets contained within this vault.
        """
        pulumi.set(__self__, "alias_name", alias_name)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "connection_string", connection_string)
        pulumi.set(__self__, "database_id", database_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "fqdn", fqdn)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "key_id", key_id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "rce_private_ip", rce_private_ip)
        pulumi.set(__self__, "secret_compartment_id", secret_compartment_id)
        pulumi.set(__self__, "secret_id", secret_id)
        pulumi.set(__self__, "session_mode", session_mode)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "username", username)
        pulumi.set(__self__, "vault_id", vault_id)
        pulumi.set(__self__, "wallet", wallet)

    @property
    @pulumi.getter(name="aliasName")
    def alias_name(self) -> builtins.str:
        """
        Credential store alias.
        """
        return pulumi.get(self, "alias_name")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        The OCID of the compartment that contains the work request. Work requests should be scoped  to the same compartment as the resource the work request affects. If the work request concerns  multiple resources, and those resources are not in the same compartment, it is up to the service team  to pick the primary resource whose compartment should be used.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="connectionString")
    def connection_string(self) -> builtins.str:
        """
        Connect descriptor or Easy Connect Naming method used to connect to a database.
        """
        return pulumi.get(self, "connection_string")

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database being referenced.
        """
        return pulumi.get(self, "database_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Tags defined for this resource. Each key is predefined and scoped to a namespace.  Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        Metadata about this specific object.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A filter to return only the resources that match the entire 'displayName' given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def fqdn(self) -> builtins.str:
        """
        A three-label Fully Qualified Domain Name (FQDN) for a resource.
        """
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        A simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only.  Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the databaseRegistration being referenced.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> builtins.str:
        """
        The private IP address in the customer's VCN of the customer's endpoint, typically a database.
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> builtins.str:
        """
        Refers to the customer's master key OCID.  If provided, it references a key to manage secrets. Customers must add policies to permit GoldenGate to use this key.
        """
        return pulumi.get(self, "key_id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> builtins.str:
        """
        Describes the object's current state in detail. For example, it can be used to provide actionable information for a resource in a Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def password(self) -> builtins.str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="rcePrivateIp")
    def rce_private_ip(self) -> builtins.str:
        """
        A Private Endpoint IP address created in the customer's subnet.  A customer database can expect network traffic initiated by GoldenGate Service from this IP address.  It can also send network traffic to this IP address, typically in response to requests from GoldenGate Service.  The customer may use this IP address in Security Lists or Network Security Groups (NSG) as needed.
        """
        return pulumi.get(self, "rce_private_ip")

    @property
    @pulumi.getter(name="secretCompartmentId")
    def secret_compartment_id(self) -> builtins.str:
        """
        The OCID of the compartment where the GoldenGate Secret will be created.  If provided, it references a key to manage secrets. Customers must add policies to permit GoldenGate to use this key.
        """
        return pulumi.get(self, "secret_compartment_id")

    @property
    @pulumi.getter(name="secretId")
    def secret_id(self) -> builtins.str:
        """
        The OCID of the customer's GoldenGate Service Secret.  If provided, it references a key that customers will be required to ensure the policies are established  to permit GoldenGate to use this Secret.
        """
        return pulumi.get(self, "secret_id")

    @property
    @pulumi.getter(name="sessionMode")
    def session_mode(self) -> builtins.str:
        """
        The mode of the database connection session to be established by the data client. 'REDIRECT' - for a RAC database, 'DIRECT' - for a non-RAC database. Connection to a RAC database involves a redirection received from the SCAN listeners to the database node to connect to. By default the mode would be DIRECT.
        """
        return pulumi.get(self, "session_mode")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        A filter to return only the resources that match the 'lifecycleState' given.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the target subnet of the dedicated connection.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        The system tags associated with this resource, if any. The system tags are set by Oracle Cloud Infrastructure services. Each key is predefined and scoped to namespaces.  For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{orcl-cloud: {free-tier-retain: true}}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> builtins.str:
        """
        The time the resource was last updated. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def username(self) -> builtins.str:
        """
        The username Oracle GoldenGate uses to connect the associated system of the given technology. This username must already exist and be available by the system/application to be connected to and must conform to the case sensitivty requirments defined in it.
        """
        return pulumi.get(self, "username")

    @property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> builtins.str:
        """
        Refers to the customer's vault OCID.  If provided, it references a vault where GoldenGate can manage secrets. Customers must add policies to permit GoldenGate to manage secrets contained within this vault.
        """
        return pulumi.get(self, "vault_id")

    @property
    @pulumi.getter
    def wallet(self) -> builtins.str:
        return pulumi.get(self, "wallet")


@pulumi.output_type
class GetDatabaseRegistrationsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDeploymentBackupLockResult(dict):
    def __init__(__self__, *,
                 message: builtins.str,
                 related_resource_id: builtins.str,
                 time_created: builtins.str,
                 type: builtins.str):
        """
        :param builtins.str message: A message added by the creator of the lock. This is typically used to give an indication of why the resource is locked.
        :param builtins.str related_resource_id: The id of the resource that is locking this resource. Indicates that deleting this resource will remove the lock.
        :param builtins.str time_created: The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        :param builtins.str type: Type of the lock.
        """
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "related_resource_id", related_resource_id)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def message(self) -> builtins.str:
        """
        A message added by the creator of the lock. This is typically used to give an indication of why the resource is locked.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter(name="relatedResourceId")
    def related_resource_id(self) -> builtins.str:
        """
        The id of the resource that is locking this resource. Indicates that deleting this resource will remove the lock.
        """
        return pulumi.get(self, "related_resource_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Type of the lock.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDeploymentBackupScheduleResult(dict):
    def __init__(__self__, *,
                 bucket: builtins.str,
                 compartment_id: builtins.str,
                 frequency_backup_scheduled: builtins.str,
                 is_metadata_only: builtins.bool,
                 namespace: builtins.str,
                 time_backup_scheduled: builtins.str):
        """
        :param builtins.str bucket: Name of the bucket where the object is to be uploaded in the object storage
        :param builtins.str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment being referenced.
        :param builtins.str frequency_backup_scheduled: The frequency of the deployment backup schedule. Frequency can be DAILY, WEEKLY or MONTHLY.
        :param builtins.bool is_metadata_only: Parameter to allow users to create backup without trails
        :param builtins.str namespace: Name of namespace that serves as a container for all of your buckets
        :param builtins.str time_backup_scheduled: The start timestamp for the deployment backup schedule. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2024-10-25T18:19:29.600Z`.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "frequency_backup_scheduled", frequency_backup_scheduled)
        pulumi.set(__self__, "is_metadata_only", is_metadata_only)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "time_backup_scheduled", time_backup_scheduled)

    @property
    @pulumi.getter
    def bucket(self) -> builtins.str:
        """
        Name of the bucket where the object is to be uploaded in the object storage
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment being referenced.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="frequencyBackupScheduled")
    def frequency_backup_scheduled(self) -> builtins.str:
        """
        The frequency of the deployment backup schedule. Frequency can be DAILY, WEEKLY or MONTHLY.
        """
        return pulumi.get(self, "frequency_backup_scheduled")

    @property
    @pulumi.getter(name="isMetadataOnly")
    def is_metadata_only(self) -> builtins.bool:
        """
        Parameter to allow users to create backup without trails
        """
        return pulumi.get(self, "is_metadata_only")

    @property
    @pulumi.getter
    def namespace(self) -> builtins.str:
        """
        Name of namespace that serves as a container for all of your buckets
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="timeBackupScheduled")
    def time_backup_scheduled(self) -> builtins.str:
        """
        The start timestamp for the deployment backup schedule. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2024-10-25T18:19:29.600Z`.
        """
        return pulumi.get(self, "time_backup_scheduled")


@pulumi.output_type
class GetDeploymentBackupsDeploymentBackupCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDeploymentBackupsDeploymentBackupCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDeploymentBackupsDeploymentBackupCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentBackupsDeploymentBackupCollectionItemResult(dict):
    def __init__(__self__, *,
                 backup_source_type: builtins.str,
                 backup_type: builtins.str,
                 bucket: builtins.str,
                 compartment_id: builtins.str,
                 defined_tags: Mapping[str, builtins.str],
                 deployment_id: builtins.str,
                 deployment_type: builtins.str,
                 display_name: builtins.str,
                 freeform_tags: Mapping[str, builtins.str],
                 id: builtins.str,
                 is_automatic: builtins.bool,
                 is_lock_override: builtins.bool,
                 is_metadata_only: builtins.bool,
                 lifecycle_details: builtins.str,
                 locks: Sequence['outputs.GetDeploymentBackupsDeploymentBackupCollectionItemLockResult'],
                 namespace: builtins.str,
                 object: builtins.str,
                 ogg_version: builtins.str,
                 size_in_bytes: builtins.float,
                 state: builtins.str,
                 system_tags: Mapping[str, builtins.str],
                 time_backup_finished: builtins.str,
                 time_created: builtins.str,
                 time_of_backup: builtins.str,
                 time_updated: builtins.str):
        """
        :param builtins.str backup_source_type: Possible deployment backup source types.
        :param builtins.str backup_type: Possible Deployment backup types.
        :param builtins.str bucket: Name of the bucket where the object is to be uploaded in the object storage
        :param builtins.str compartment_id: The OCID of the compartment that contains the work request. Work requests should be scoped  to the same compartment as the resource the work request affects. If the work request concerns  multiple resources, and those resources are not in the same compartment, it is up to the service team  to pick the primary resource whose compartment should be used.
        :param Mapping[str, builtins.str] defined_tags: Tags defined for this resource. Each key is predefined and scoped to a namespace.  Example: `{"foo-namespace.bar-key": "value"}`
        :param builtins.str deployment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the deployment in which to list resources.
        :param builtins.str deployment_type: The type of deployment, which can be any one of the Allowed values.  NOTE: Use of the value 'OGG' is maintained for backward compatibility purposes.  Its use is discouraged in favor of 'DATABASE_ORACLE'.
        :param builtins.str display_name: A filter to return only the resources that match the entire 'displayName' given.
        :param Mapping[str, builtins.str] freeform_tags: A simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only.  Example: `{"bar-key": "value"}`
        :param builtins.str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the backup being referenced.
        :param builtins.bool is_automatic: True if this object is automatically created
        :param builtins.bool is_metadata_only: Parameter to allow users to create backup without trails
        :param builtins.str lifecycle_details: Describes the object's current state in detail. For example, it can be used to provide actionable information for a resource in a Failed state.
        :param Sequence['GetDeploymentBackupsDeploymentBackupCollectionItemLockArgs'] locks: Locks associated with this resource.
        :param builtins.str namespace: Name of namespace that serves as a container for all of your buckets
        :param builtins.str object: Name of the object to be uploaded to object storage
        :param builtins.str ogg_version: Version of OGG
        :param builtins.float size_in_bytes: The size of the backup stored in object storage (in bytes)
        :param builtins.str state: A filter to return only the resources that match the 'lifecycleState' given.
        :param Mapping[str, builtins.str] system_tags: The system tags associated with this resource, if any. The system tags are set by Oracle Cloud Infrastructure services. Each key is predefined and scoped to namespaces.  For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{orcl-cloud: {free-tier-retain: true}}`
        :param builtins.str time_backup_finished: The time of the resource backup finish. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        :param builtins.str time_created: The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        :param builtins.str time_of_backup: The time of the resource backup. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        :param builtins.str time_updated: The time the resource was last updated. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        pulumi.set(__self__, "backup_source_type", backup_source_type)
        pulumi.set(__self__, "backup_type", backup_type)
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "deployment_id", deployment_id)
        pulumi.set(__self__, "deployment_type", deployment_type)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_automatic", is_automatic)
        pulumi.set(__self__, "is_lock_override", is_lock_override)
        pulumi.set(__self__, "is_metadata_only", is_metadata_only)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "locks", locks)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "ogg_version", ogg_version)
        pulumi.set(__self__, "size_in_bytes", size_in_bytes)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_backup_finished", time_backup_finished)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_of_backup", time_of_backup)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="backupSourceType")
    def backup_source_type(self) -> builtins.str:
        """
        Possible deployment backup source types.
        """
        return pulumi.get(self, "backup_source_type")

    @property
    @pulumi.getter(name="backupType")
    def backup_type(self) -> builtins.str:
        """
        Possible Deployment backup types.
        """
        return pulumi.get(self, "backup_type")

    @property
    @pulumi.getter
    def bucket(self) -> builtins.str:
        """
        Name of the bucket where the object is to be uploaded in the object storage
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        The OCID of the compartment that contains the work request. Work requests should be scoped  to the same compartment as the resource the work request affects. If the work request concerns  multiple resources, and those resources are not in the same compartment, it is up to the service team  to pick the primary resource whose compartment should be used.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Tags defined for this resource. Each key is predefined and scoped to a namespace.  Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="deploymentId")
    def deployment_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the deployment in which to list resources.
        """
        return pulumi.get(self, "deployment_id")

    @property
    @pulumi.getter(name="deploymentType")
    def deployment_type(self) -> builtins.str:
        """
        The type of deployment, which can be any one of the Allowed values.  NOTE: Use of the value 'OGG' is maintained for backward compatibility purposes.  Its use is discouraged in favor of 'DATABASE_ORACLE'.
        """
        return pulumi.get(self, "deployment_type")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A filter to return only the resources that match the entire 'displayName' given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        A simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only.  Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the backup being referenced.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isAutomatic")
    def is_automatic(self) -> builtins.bool:
        """
        True if this object is automatically created
        """
        return pulumi.get(self, "is_automatic")

    @property
    @pulumi.getter(name="isLockOverride")
    def is_lock_override(self) -> builtins.bool:
        return pulumi.get(self, "is_lock_override")

    @property
    @pulumi.getter(name="isMetadataOnly")
    def is_metadata_only(self) -> builtins.bool:
        """
        Parameter to allow users to create backup without trails
        """
        return pulumi.get(self, "is_metadata_only")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> builtins.str:
        """
        Describes the object's current state in detail. For example, it can be used to provide actionable information for a resource in a Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def locks(self) -> Sequence['outputs.GetDeploymentBackupsDeploymentBackupCollectionItemLockResult']:
        """
        Locks associated with this resource.
        """
        return pulumi.get(self, "locks")

    @property
    @pulumi.getter
    def namespace(self) -> builtins.str:
        """
        Name of namespace that serves as a container for all of your buckets
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> builtins.str:
        """
        Name of the object to be uploaded to object storage
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter(name="oggVersion")
    def ogg_version(self) -> builtins.str:
        """
        Version of OGG
        """
        return pulumi.get(self, "ogg_version")

    @property
    @pulumi.getter(name="sizeInBytes")
    def size_in_bytes(self) -> builtins.float:
        """
        The size of the backup stored in object storage (in bytes)
        """
        return pulumi.get(self, "size_in_bytes")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        A filter to return only the resources that match the 'lifecycleState' given.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        The system tags associated with this resource, if any. The system tags are set by Oracle Cloud Infrastructure services. Each key is predefined and scoped to namespaces.  For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{orcl-cloud: {free-tier-retain: true}}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeBackupFinished")
    def time_backup_finished(self) -> builtins.str:
        """
        The time of the resource backup finish. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        return pulumi.get(self, "time_backup_finished")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeOfBackup")
    def time_of_backup(self) -> builtins.str:
        """
        The time of the resource backup. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        return pulumi.get(self, "time_of_backup")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> builtins.str:
        """
        The time the resource was last updated. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetDeploymentBackupsDeploymentBackupCollectionItemLockResult(dict):
    def __init__(__self__, *,
                 message: builtins.str,
                 related_resource_id: builtins.str,
                 time_created: builtins.str,
                 type: builtins.str):
        """
        :param builtins.str message: A message added by the creator of the lock. This is typically used to give an indication of why the resource is locked.
        :param builtins.str related_resource_id: The id of the resource that is locking this resource. Indicates that deleting this resource will remove the lock.
        :param builtins.str time_created: The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        :param builtins.str type: Type of the lock.
        """
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "related_resource_id", related_resource_id)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def message(self) -> builtins.str:
        """
        A message added by the creator of the lock. This is typically used to give an indication of why the resource is locked.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter(name="relatedResourceId")
    def related_resource_id(self) -> builtins.str:
        """
        The id of the resource that is locking this resource. Indicates that deleting this resource will remove the lock.
        """
        return pulumi.get(self, "related_resource_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Type of the lock.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDeploymentBackupsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDeploymentCertificatesCertificateCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDeploymentCertificatesCertificateCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDeploymentCertificatesCertificateCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentCertificatesCertificateCollectionItemResult(dict):
    def __init__(__self__, *,
                 authority_key_id: builtins.str,
                 certificate_content: builtins.str,
                 deployment_id: builtins.str,
                 is_ca: builtins.bool,
                 is_lock_override: builtins.bool,
                 is_self_signed: builtins.bool,
                 issuer: builtins.str,
                 key: builtins.str,
                 md5hash: builtins.str,
                 public_key: builtins.str,
                 public_key_algorithm: builtins.str,
                 public_key_size: builtins.str,
                 serial: builtins.str,
                 sha1hash: builtins.str,
                 state: builtins.str,
                 subject: builtins.str,
                 subject_key_id: builtins.str,
                 time_created: builtins.str,
                 time_valid_from: builtins.str,
                 time_valid_to: builtins.str,
                 version: builtins.str):
        """
        :param builtins.str authority_key_id: The Certificate authority key id.
        :param builtins.str certificate_content: The base64 encoded content of the PEM file containing the SSL certificate.
        :param builtins.str deployment_id: A unique Deployment identifier.
        :param builtins.bool is_ca: Indicates if the certificate is ca.
        :param builtins.bool is_self_signed: Indicates if the certificate is self signed.
        :param builtins.str issuer: The Certificate issuer.
        :param builtins.str key: The identifier key (unique name in the scope of the deployment) of the certificate being referenced.  It must be 1 to 32 characters long, must contain only alphanumeric characters and must start with a letter.
        :param builtins.str md5hash: The Certificate md5Hash.
        :param builtins.str public_key: The Certificate public key.
        :param builtins.str public_key_algorithm: The Certificate public key algorithm.
        :param builtins.str public_key_size: The Certificate public key size.
        :param builtins.str serial: The Certificate serial.
        :param builtins.str sha1hash: The Certificate sha1 hash.
        :param builtins.str state: A filter to return only connections having the 'lifecycleState' given.
        :param builtins.str subject: The Certificate subject.
        :param builtins.str subject_key_id: The Certificate subject key id.
        :param builtins.str time_created: The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        :param builtins.str time_valid_from: The time the certificate is valid from. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        :param builtins.str time_valid_to: The time the certificate is valid to. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        :param builtins.str version: The Certificate version.
        """
        pulumi.set(__self__, "authority_key_id", authority_key_id)
        pulumi.set(__self__, "certificate_content", certificate_content)
        pulumi.set(__self__, "deployment_id", deployment_id)
        pulumi.set(__self__, "is_ca", is_ca)
        pulumi.set(__self__, "is_lock_override", is_lock_override)
        pulumi.set(__self__, "is_self_signed", is_self_signed)
        pulumi.set(__self__, "issuer", issuer)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "md5hash", md5hash)
        pulumi.set(__self__, "public_key", public_key)
        pulumi.set(__self__, "public_key_algorithm", public_key_algorithm)
        pulumi.set(__self__, "public_key_size", public_key_size)
        pulumi.set(__self__, "serial", serial)
        pulumi.set(__self__, "sha1hash", sha1hash)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "subject", subject)
        pulumi.set(__self__, "subject_key_id", subject_key_id)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_valid_from", time_valid_from)
        pulumi.set(__self__, "time_valid_to", time_valid_to)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="authorityKeyId")
    def authority_key_id(self) -> builtins.str:
        """
        The Certificate authority key id.
        """
        return pulumi.get(self, "authority_key_id")

    @property
    @pulumi.getter(name="certificateContent")
    def certificate_content(self) -> builtins.str:
        """
        The base64 encoded content of the PEM file containing the SSL certificate.
        """
        return pulumi.get(self, "certificate_content")

    @property
    @pulumi.getter(name="deploymentId")
    def deployment_id(self) -> builtins.str:
        """
        A unique Deployment identifier.
        """
        return pulumi.get(self, "deployment_id")

    @property
    @pulumi.getter(name="isCa")
    def is_ca(self) -> builtins.bool:
        """
        Indicates if the certificate is ca.
        """
        return pulumi.get(self, "is_ca")

    @property
    @pulumi.getter(name="isLockOverride")
    def is_lock_override(self) -> builtins.bool:
        return pulumi.get(self, "is_lock_override")

    @property
    @pulumi.getter(name="isSelfSigned")
    def is_self_signed(self) -> builtins.bool:
        """
        Indicates if the certificate is self signed.
        """
        return pulumi.get(self, "is_self_signed")

    @property
    @pulumi.getter
    def issuer(self) -> builtins.str:
        """
        The Certificate issuer.
        """
        return pulumi.get(self, "issuer")

    @property
    @pulumi.getter
    def key(self) -> builtins.str:
        """
        The identifier key (unique name in the scope of the deployment) of the certificate being referenced.  It must be 1 to 32 characters long, must contain only alphanumeric characters and must start with a letter.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def md5hash(self) -> builtins.str:
        """
        The Certificate md5Hash.
        """
        return pulumi.get(self, "md5hash")

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> builtins.str:
        """
        The Certificate public key.
        """
        return pulumi.get(self, "public_key")

    @property
    @pulumi.getter(name="publicKeyAlgorithm")
    def public_key_algorithm(self) -> builtins.str:
        """
        The Certificate public key algorithm.
        """
        return pulumi.get(self, "public_key_algorithm")

    @property
    @pulumi.getter(name="publicKeySize")
    def public_key_size(self) -> builtins.str:
        """
        The Certificate public key size.
        """
        return pulumi.get(self, "public_key_size")

    @property
    @pulumi.getter
    def serial(self) -> builtins.str:
        """
        The Certificate serial.
        """
        return pulumi.get(self, "serial")

    @property
    @pulumi.getter
    def sha1hash(self) -> builtins.str:
        """
        The Certificate sha1 hash.
        """
        return pulumi.get(self, "sha1hash")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        A filter to return only connections having the 'lifecycleState' given.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def subject(self) -> builtins.str:
        """
        The Certificate subject.
        """
        return pulumi.get(self, "subject")

    @property
    @pulumi.getter(name="subjectKeyId")
    def subject_key_id(self) -> builtins.str:
        """
        The Certificate subject key id.
        """
        return pulumi.get(self, "subject_key_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeValidFrom")
    def time_valid_from(self) -> builtins.str:
        """
        The time the certificate is valid from. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        return pulumi.get(self, "time_valid_from")

    @property
    @pulumi.getter(name="timeValidTo")
    def time_valid_to(self) -> builtins.str:
        """
        The time the certificate is valid to. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        return pulumi.get(self, "time_valid_to")

    @property
    @pulumi.getter
    def version(self) -> builtins.str:
        """
        The Certificate version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDeploymentCertificatesFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDeploymentDeploymentDiagnosticDataResult(dict):
    def __init__(__self__, *,
                 bucket: builtins.str,
                 diagnostic_state: builtins.str,
                 namespace: builtins.str,
                 object: builtins.str,
                 time_diagnostic_end: builtins.str,
                 time_diagnostic_start: builtins.str):
        """
        :param builtins.str bucket: Name of the bucket where the object is to be uploaded in the object storage
        :param builtins.str diagnostic_state: The state of the deployment diagnostic collection.
        :param builtins.str namespace: Name of namespace that serves as a container for all of your buckets
        :param builtins.str object: Name of the diagnostic collected and uploaded to object storage
        :param builtins.str time_diagnostic_end: The time until which the diagnostic collection should collect the logs. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        :param builtins.str time_diagnostic_start: The time from which the diagnostic collection should collect the logs. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "diagnostic_state", diagnostic_state)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "time_diagnostic_end", time_diagnostic_end)
        pulumi.set(__self__, "time_diagnostic_start", time_diagnostic_start)

    @property
    @pulumi.getter
    def bucket(self) -> builtins.str:
        """
        Name of the bucket where the object is to be uploaded in the object storage
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="diagnosticState")
    def diagnostic_state(self) -> builtins.str:
        """
        The state of the deployment diagnostic collection.
        """
        return pulumi.get(self, "diagnostic_state")

    @property
    @pulumi.getter
    def namespace(self) -> builtins.str:
        """
        Name of namespace that serves as a container for all of your buckets
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> builtins.str:
        """
        Name of the diagnostic collected and uploaded to object storage
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter(name="timeDiagnosticEnd")
    def time_diagnostic_end(self) -> builtins.str:
        """
        The time until which the diagnostic collection should collect the logs. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        return pulumi.get(self, "time_diagnostic_end")

    @property
    @pulumi.getter(name="timeDiagnosticStart")
    def time_diagnostic_start(self) -> builtins.str:
        """
        The time from which the diagnostic collection should collect the logs. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        return pulumi.get(self, "time_diagnostic_start")


@pulumi.output_type
class GetDeploymentEnvironmentsDeploymentEnvironmentCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDeploymentEnvironmentsDeploymentEnvironmentCollectionItemResult']):
        """
        :param Sequence['GetDeploymentEnvironmentsDeploymentEnvironmentCollectionItemArgs'] items: Array of DeploymentEnvironmentSummary objects.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDeploymentEnvironmentsDeploymentEnvironmentCollectionItemResult']:
        """
        Array of DeploymentEnvironmentSummary objects.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentEnvironmentsDeploymentEnvironmentCollectionItemResult(dict):
    def __init__(__self__, *,
                 category: builtins.str,
                 default_cpu_core_count: builtins.int,
                 display_name: builtins.str,
                 environment_type: builtins.str,
                 is_auto_scaling_enabled_by_default: builtins.bool,
                 max_cpu_core_count: builtins.int,
                 memory_per_ocpu_in_gbs: builtins.int,
                 min_cpu_core_count: builtins.int,
                 network_bandwidth_per_ocpu_in_gbps: builtins.int,
                 storage_usage_limit_per_ocpu_in_gbs: builtins.int):
        """
        :param builtins.str category: The deployment category defines the broad separation of the deployment type into three categories. Currently the separation is 'DATA_REPLICATION', 'STREAM_ANALYTICS' and 'DATA_TRANSFORMS'.
        :param builtins.int default_cpu_core_count: The default CPU core count.
        :param builtins.str display_name: An object's Display Name.
        :param builtins.str environment_type: Specifies whether the deployment is used in a production or development/testing environment.
        :param builtins.bool is_auto_scaling_enabled_by_default: Specifies whether the "Auto scaling" option should be enabled by default or not.
        :param builtins.int max_cpu_core_count: The maximum CPU core count.
        :param builtins.int memory_per_ocpu_in_gbs: The multiplier value between CPU core count and memory size.
        :param builtins.int min_cpu_core_count: The minimum CPU core count.
        :param builtins.int network_bandwidth_per_ocpu_in_gbps: The multiplier value between CPU core count and network bandwidth.
        :param builtins.int storage_usage_limit_per_ocpu_in_gbs: The multiplier value between CPU core count and storage usage limit size.
        """
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "default_cpu_core_count", default_cpu_core_count)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "environment_type", environment_type)
        pulumi.set(__self__, "is_auto_scaling_enabled_by_default", is_auto_scaling_enabled_by_default)
        pulumi.set(__self__, "max_cpu_core_count", max_cpu_core_count)
        pulumi.set(__self__, "memory_per_ocpu_in_gbs", memory_per_ocpu_in_gbs)
        pulumi.set(__self__, "min_cpu_core_count", min_cpu_core_count)
        pulumi.set(__self__, "network_bandwidth_per_ocpu_in_gbps", network_bandwidth_per_ocpu_in_gbps)
        pulumi.set(__self__, "storage_usage_limit_per_ocpu_in_gbs", storage_usage_limit_per_ocpu_in_gbs)

    @property
    @pulumi.getter
    def category(self) -> builtins.str:
        """
        The deployment category defines the broad separation of the deployment type into three categories. Currently the separation is 'DATA_REPLICATION', 'STREAM_ANALYTICS' and 'DATA_TRANSFORMS'.
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter(name="defaultCpuCoreCount")
    def default_cpu_core_count(self) -> builtins.int:
        """
        The default CPU core count.
        """
        return pulumi.get(self, "default_cpu_core_count")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        An object's Display Name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="environmentType")
    def environment_type(self) -> builtins.str:
        """
        Specifies whether the deployment is used in a production or development/testing environment.
        """
        return pulumi.get(self, "environment_type")

    @property
    @pulumi.getter(name="isAutoScalingEnabledByDefault")
    def is_auto_scaling_enabled_by_default(self) -> builtins.bool:
        """
        Specifies whether the "Auto scaling" option should be enabled by default or not.
        """
        return pulumi.get(self, "is_auto_scaling_enabled_by_default")

    @property
    @pulumi.getter(name="maxCpuCoreCount")
    def max_cpu_core_count(self) -> builtins.int:
        """
        The maximum CPU core count.
        """
        return pulumi.get(self, "max_cpu_core_count")

    @property
    @pulumi.getter(name="memoryPerOcpuInGbs")
    def memory_per_ocpu_in_gbs(self) -> builtins.int:
        """
        The multiplier value between CPU core count and memory size.
        """
        return pulumi.get(self, "memory_per_ocpu_in_gbs")

    @property
    @pulumi.getter(name="minCpuCoreCount")
    def min_cpu_core_count(self) -> builtins.int:
        """
        The minimum CPU core count.
        """
        return pulumi.get(self, "min_cpu_core_count")

    @property
    @pulumi.getter(name="networkBandwidthPerOcpuInGbps")
    def network_bandwidth_per_ocpu_in_gbps(self) -> builtins.int:
        """
        The multiplier value between CPU core count and network bandwidth.
        """
        return pulumi.get(self, "network_bandwidth_per_ocpu_in_gbps")

    @property
    @pulumi.getter(name="storageUsageLimitPerOcpuInGbs")
    def storage_usage_limit_per_ocpu_in_gbs(self) -> builtins.int:
        """
        The multiplier value between CPU core count and storage usage limit size.
        """
        return pulumi.get(self, "storage_usage_limit_per_ocpu_in_gbs")


@pulumi.output_type
class GetDeploymentEnvironmentsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDeploymentIngressIpResult(dict):
    def __init__(__self__, *,
                 ingress_ip: builtins.str):
        """
        :param builtins.str ingress_ip: A Private Endpoint IPv4 or IPv6 Address created in the customer's subnet.
        """
        pulumi.set(__self__, "ingress_ip", ingress_ip)

    @property
    @pulumi.getter(name="ingressIp")
    def ingress_ip(self) -> builtins.str:
        """
        A Private Endpoint IPv4 or IPv6 Address created in the customer's subnet.
        """
        return pulumi.get(self, "ingress_ip")


@pulumi.output_type
class GetDeploymentLockResult(dict):
    def __init__(__self__, *,
                 message: builtins.str,
                 related_resource_id: builtins.str,
                 time_created: builtins.str,
                 type: builtins.str):
        """
        :param builtins.str message: A message added by the creator of the lock. This is typically used to give an indication of why the resource is locked.
        :param builtins.str related_resource_id: The id of the resource that is locking this resource. Indicates that deleting this resource will remove the lock.
        :param builtins.str time_created: The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        :param builtins.str type: Type of the lock.
        """
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "related_resource_id", related_resource_id)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def message(self) -> builtins.str:
        """
        A message added by the creator of the lock. This is typically used to give an indication of why the resource is locked.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter(name="relatedResourceId")
    def related_resource_id(self) -> builtins.str:
        """
        The id of the resource that is locking this resource. Indicates that deleting this resource will remove the lock.
        """
        return pulumi.get(self, "related_resource_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Type of the lock.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDeploymentMaintenanceConfigurationResult(dict):
    def __init__(__self__, *,
                 bundle_release_upgrade_period_in_days: builtins.int,
                 interim_release_upgrade_period_in_days: builtins.int,
                 is_interim_release_auto_upgrade_enabled: builtins.bool,
                 major_release_upgrade_period_in_days: builtins.int,
                 security_patch_upgrade_period_in_days: builtins.int):
        """
        :param builtins.int bundle_release_upgrade_period_in_days: Defines auto upgrade period for bundle releases. Manually configured period cannot be longer than service defined period for bundle releases. This period must be shorter or equal to major release upgrade period. Not passing this field during create will equate to using the service default.
        :param builtins.int interim_release_upgrade_period_in_days: Defines auto upgrade period for interim releases. This period must be shorter or equal to bundle release upgrade period.
        :param builtins.bool is_interim_release_auto_upgrade_enabled: By default auto upgrade for interim releases are not enabled. If auto-upgrade is enabled for interim release,  you have to specify interimReleaseUpgradePeriodInDays too.
        :param builtins.int major_release_upgrade_period_in_days: Defines auto upgrade period for major releases. Manually configured period cannot be longer than service defined period for major releases. Not passing this field during create will equate to using the service default.
        :param builtins.int security_patch_upgrade_period_in_days: Defines auto upgrade period for releases with security fix. Manually configured period cannot be longer than service defined period for security releases. Not passing this field during create will equate to using the service default.
        """
        pulumi.set(__self__, "bundle_release_upgrade_period_in_days", bundle_release_upgrade_period_in_days)
        pulumi.set(__self__, "interim_release_upgrade_period_in_days", interim_release_upgrade_period_in_days)
        pulumi.set(__self__, "is_interim_release_auto_upgrade_enabled", is_interim_release_auto_upgrade_enabled)
        pulumi.set(__self__, "major_release_upgrade_period_in_days", major_release_upgrade_period_in_days)
        pulumi.set(__self__, "security_patch_upgrade_period_in_days", security_patch_upgrade_period_in_days)

    @property
    @pulumi.getter(name="bundleReleaseUpgradePeriodInDays")
    def bundle_release_upgrade_period_in_days(self) -> builtins.int:
        """
        Defines auto upgrade period for bundle releases. Manually configured period cannot be longer than service defined period for bundle releases. This period must be shorter or equal to major release upgrade period. Not passing this field during create will equate to using the service default.
        """
        return pulumi.get(self, "bundle_release_upgrade_period_in_days")

    @property
    @pulumi.getter(name="interimReleaseUpgradePeriodInDays")
    def interim_release_upgrade_period_in_days(self) -> builtins.int:
        """
        Defines auto upgrade period for interim releases. This period must be shorter or equal to bundle release upgrade period.
        """
        return pulumi.get(self, "interim_release_upgrade_period_in_days")

    @property
    @pulumi.getter(name="isInterimReleaseAutoUpgradeEnabled")
    def is_interim_release_auto_upgrade_enabled(self) -> builtins.bool:
        """
        By default auto upgrade for interim releases are not enabled. If auto-upgrade is enabled for interim release,  you have to specify interimReleaseUpgradePeriodInDays too.
        """
        return pulumi.get(self, "is_interim_release_auto_upgrade_enabled")

    @property
    @pulumi.getter(name="majorReleaseUpgradePeriodInDays")
    def major_release_upgrade_period_in_days(self) -> builtins.int:
        """
        Defines auto upgrade period for major releases. Manually configured period cannot be longer than service defined period for major releases. Not passing this field during create will equate to using the service default.
        """
        return pulumi.get(self, "major_release_upgrade_period_in_days")

    @property
    @pulumi.getter(name="securityPatchUpgradePeriodInDays")
    def security_patch_upgrade_period_in_days(self) -> builtins.int:
        """
        Defines auto upgrade period for releases with security fix. Manually configured period cannot be longer than service defined period for security releases. Not passing this field during create will equate to using the service default.
        """
        return pulumi.get(self, "security_patch_upgrade_period_in_days")


@pulumi.output_type
class GetDeploymentMaintenanceWindowResult(dict):
    def __init__(__self__, *,
                 day: builtins.str,
                 start_hour: builtins.int):
        """
        :param builtins.str day: Days of the week.
        :param builtins.int start_hour: Start hour for maintenance period. Hour is in UTC.
        """
        pulumi.set(__self__, "day", day)
        pulumi.set(__self__, "start_hour", start_hour)

    @property
    @pulumi.getter
    def day(self) -> builtins.str:
        """
        Days of the week.
        """
        return pulumi.get(self, "day")

    @property
    @pulumi.getter(name="startHour")
    def start_hour(self) -> builtins.int:
        """
        Start hour for maintenance period. Hour is in UTC.
        """
        return pulumi.get(self, "start_hour")


@pulumi.output_type
class GetDeploymentOggDataResult(dict):
    def __init__(__self__, *,
                 admin_password: builtins.str,
                 admin_username: builtins.str,
                 certificate: builtins.str,
                 credential_store: builtins.str,
                 deployment_name: builtins.str,
                 group_to_roles_mappings: Sequence['outputs.GetDeploymentOggDataGroupToRolesMappingResult'],
                 identity_domain_id: builtins.str,
                 key: builtins.str,
                 ogg_version: builtins.str,
                 password_secret_id: builtins.str):
        """
        :param builtins.str admin_username: The GoldenGate deployment console username.
        :param builtins.str certificate: The base64 encoded content of the PEM file containing the SSL certificate.
        :param builtins.str credential_store: The type of credential store for OGG.
        :param builtins.str deployment_name: The name given to the GoldenGate service deployment. The name must be 1 to 32 characters long, must contain only alphanumeric characters and must start with a letter.
        :param Sequence['GetDeploymentOggDataGroupToRolesMappingArgs'] group_to_roles_mappings: Defines the IDP Groups to GoldenGate roles mapping. This field is used only for IAM deployment and does not have any impact on non-IAM deployments. For IAM deployment, when user does not specify this mapping, then it has null value and default mapping is used. User belonging to each group can only perform the actions according to the role the respective group is mapped to.
        :param builtins.str identity_domain_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Identity Domain when IAM credential store is used.
        :param builtins.str ogg_version: Version of OGG
        :param builtins.str password_secret_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the deployment password is stored.
        """
        pulumi.set(__self__, "admin_password", admin_password)
        pulumi.set(__self__, "admin_username", admin_username)
        pulumi.set(__self__, "certificate", certificate)
        pulumi.set(__self__, "credential_store", credential_store)
        pulumi.set(__self__, "deployment_name", deployment_name)
        pulumi.set(__self__, "group_to_roles_mappings", group_to_roles_mappings)
        pulumi.set(__self__, "identity_domain_id", identity_domain_id)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "ogg_version", ogg_version)
        pulumi.set(__self__, "password_secret_id", password_secret_id)

    @property
    @pulumi.getter(name="adminPassword")
    def admin_password(self) -> builtins.str:
        return pulumi.get(self, "admin_password")

    @property
    @pulumi.getter(name="adminUsername")
    def admin_username(self) -> builtins.str:
        """
        The GoldenGate deployment console username.
        """
        return pulumi.get(self, "admin_username")

    @property
    @pulumi.getter
    def certificate(self) -> builtins.str:
        """
        The base64 encoded content of the PEM file containing the SSL certificate.
        """
        return pulumi.get(self, "certificate")

    @property
    @pulumi.getter(name="credentialStore")
    def credential_store(self) -> builtins.str:
        """
        The type of credential store for OGG.
        """
        return pulumi.get(self, "credential_store")

    @property
    @pulumi.getter(name="deploymentName")
    def deployment_name(self) -> builtins.str:
        """
        The name given to the GoldenGate service deployment. The name must be 1 to 32 characters long, must contain only alphanumeric characters and must start with a letter.
        """
        return pulumi.get(self, "deployment_name")

    @property
    @pulumi.getter(name="groupToRolesMappings")
    def group_to_roles_mappings(self) -> Sequence['outputs.GetDeploymentOggDataGroupToRolesMappingResult']:
        """
        Defines the IDP Groups to GoldenGate roles mapping. This field is used only for IAM deployment and does not have any impact on non-IAM deployments. For IAM deployment, when user does not specify this mapping, then it has null value and default mapping is used. User belonging to each group can only perform the actions according to the role the respective group is mapped to.
        """
        return pulumi.get(self, "group_to_roles_mappings")

    @property
    @pulumi.getter(name="identityDomainId")
    def identity_domain_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Identity Domain when IAM credential store is used.
        """
        return pulumi.get(self, "identity_domain_id")

    @property
    @pulumi.getter
    def key(self) -> builtins.str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="oggVersion")
    def ogg_version(self) -> builtins.str:
        """
        Version of OGG
        """
        return pulumi.get(self, "ogg_version")

    @property
    @pulumi.getter(name="passwordSecretId")
    def password_secret_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the deployment password is stored.
        """
        return pulumi.get(self, "password_secret_id")


@pulumi.output_type
class GetDeploymentOggDataGroupToRolesMappingResult(dict):
    def __init__(__self__, *,
                 administrator_group_id: builtins.str,
                 operator_group_id: builtins.str,
                 security_group_id: builtins.str,
                 user_group_id: builtins.str):
        """
        :param builtins.str administrator_group_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the IDP group which will be mapped to goldengate role administratorGroup. It grants full access to the user, including the ability to alter general, non-security related operational parameters and profiles of the server.
        :param builtins.str operator_group_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the IDP group which will be mapped to goldengate role operatorGroup. It allows users to perform only operational actions, like starting and stopping resources. Operators cannot alter the operational parameters or profiles of the MA server.
        :param builtins.str security_group_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the IDP group which will be mapped to goldengate role securityGroup. It grants administration of security related objects and invoke security related service requests. This role has full privileges.
        :param builtins.str user_group_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the IDP group which will be mapped to goldengate role userGroup. It allows information-only service requests, which do not alter or affect the operation of either the MA. Examples of query and read-only information include performance metric information and resource status and monitoring information
        """
        pulumi.set(__self__, "administrator_group_id", administrator_group_id)
        pulumi.set(__self__, "operator_group_id", operator_group_id)
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "user_group_id", user_group_id)

    @property
    @pulumi.getter(name="administratorGroupId")
    def administrator_group_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the IDP group which will be mapped to goldengate role administratorGroup. It grants full access to the user, including the ability to alter general, non-security related operational parameters and profiles of the server.
        """
        return pulumi.get(self, "administrator_group_id")

    @property
    @pulumi.getter(name="operatorGroupId")
    def operator_group_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the IDP group which will be mapped to goldengate role operatorGroup. It allows users to perform only operational actions, like starting and stopping resources. Operators cannot alter the operational parameters or profiles of the MA server.
        """
        return pulumi.get(self, "operator_group_id")

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the IDP group which will be mapped to goldengate role securityGroup. It grants administration of security related objects and invoke security related service requests. This role has full privileges.
        """
        return pulumi.get(self, "security_group_id")

    @property
    @pulumi.getter(name="userGroupId")
    def user_group_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the IDP group which will be mapped to goldengate role userGroup. It allows information-only service requests, which do not alter or affect the operation of either the MA. Examples of query and read-only information include performance metric information and resource status and monitoring information
        """
        return pulumi.get(self, "user_group_id")


@pulumi.output_type
class GetDeploymentTypeItemResult(dict):
    def __init__(__self__, *,
                 category: builtins.str,
                 connection_types: Sequence[builtins.str],
                 deployment_type: builtins.str,
                 display_name: builtins.str,
                 source_technologies: Sequence[builtins.str],
                 target_technologies: Sequence[builtins.str]):
        """
        :param builtins.str category: The deployment category defines the broad separation of the deployment type into categories.  Currently the separation is 'DATA_REPLICATION' and 'STREAM_ANALYTICS'.
        :param Sequence[builtins.str] connection_types: An array of connectionTypes.
        :param builtins.str deployment_type: The type of deployment, the value determines the exact 'type' of service executed in the Deployment. NOTE: Use of the value 'OGG' is maintained for backward compatibility purposes.  Its use is discouraged in favor of the equivalent 'DATABASE_ORACLE' value.
        :param builtins.str display_name: A filter to return only the resources that match the entire 'displayName' given.
        :param Sequence[builtins.str] source_technologies: List of the supported technologies generally.  The value is a freeform text string generally consisting of a description of the technology and optionally the speific version(s) support.  For example, [ "Oracle Database 19c", "Oracle Exadata", "OCI Streaming" ]
        :param Sequence[builtins.str] target_technologies: List of the supported technologies generally.  The value is a freeform text string generally consisting of a description of the technology and optionally the speific version(s) support.  For example, [ "Oracle Database 19c", "Oracle Exadata", "OCI Streaming" ]
        """
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "connection_types", connection_types)
        pulumi.set(__self__, "deployment_type", deployment_type)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "source_technologies", source_technologies)
        pulumi.set(__self__, "target_technologies", target_technologies)

    @property
    @pulumi.getter
    def category(self) -> builtins.str:
        """
        The deployment category defines the broad separation of the deployment type into categories.  Currently the separation is 'DATA_REPLICATION' and 'STREAM_ANALYTICS'.
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter(name="connectionTypes")
    def connection_types(self) -> Sequence[builtins.str]:
        """
        An array of connectionTypes.
        """
        return pulumi.get(self, "connection_types")

    @property
    @pulumi.getter(name="deploymentType")
    def deployment_type(self) -> builtins.str:
        """
        The type of deployment, the value determines the exact 'type' of service executed in the Deployment. NOTE: Use of the value 'OGG' is maintained for backward compatibility purposes.  Its use is discouraged in favor of the equivalent 'DATABASE_ORACLE' value.
        """
        return pulumi.get(self, "deployment_type")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A filter to return only the resources that match the entire 'displayName' given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="sourceTechnologies")
    def source_technologies(self) -> Sequence[builtins.str]:
        """
        List of the supported technologies generally.  The value is a freeform text string generally consisting of a description of the technology and optionally the speific version(s) support.  For example, [ "Oracle Database 19c", "Oracle Exadata", "OCI Streaming" ]
        """
        return pulumi.get(self, "source_technologies")

    @property
    @pulumi.getter(name="targetTechnologies")
    def target_technologies(self) -> Sequence[builtins.str]:
        """
        List of the supported technologies generally.  The value is a freeform text string generally consisting of a description of the technology and optionally the speific version(s) support.  For example, [ "Oracle Database 19c", "Oracle Exadata", "OCI Streaming" ]
        """
        return pulumi.get(self, "target_technologies")


@pulumi.output_type
class GetDeploymentTypesDeploymentTypeCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDeploymentTypesDeploymentTypeCollectionItemResult']):
        """
        :param Sequence['GetDeploymentTypesDeploymentTypeCollectionItemArgs'] items: Array of DeploymentTypeSummary
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDeploymentTypesDeploymentTypeCollectionItemResult']:
        """
        Array of DeploymentTypeSummary
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentTypesDeploymentTypeCollectionItemResult(dict):
    def __init__(__self__, *,
                 category: builtins.str,
                 connection_types: Sequence[builtins.str],
                 default_username: builtins.str,
                 deployment_type: builtins.str,
                 display_name: builtins.str,
                 ogg_version: builtins.str,
                 source_technologies: Sequence[builtins.str],
                 supported_technologies_url: builtins.str,
                 target_technologies: Sequence[builtins.str]):
        """
        :param builtins.str category: The deployment category defines the broad separation of the deployment type into three categories. Currently the separation is 'DATA_REPLICATION', 'STREAM_ANALYTICS' and 'DATA_TRANSFORMS'.
        :param Sequence[builtins.str] connection_types: An array of connectionTypes.
        :param builtins.str default_username: The default admin username used by deployment.
        :param builtins.str deployment_type: The type of deployment, the value determines the exact 'type' of the service executed in the deployment. Default value is DATABASE_ORACLE.
        :param builtins.str display_name: A filter to return only the resources that match the entire 'displayName' given.
        :param builtins.str ogg_version: Allows to query by a specific GoldenGate version.
        :param Sequence[builtins.str] source_technologies: List of the supported technologies generally.  The value is a freeform text string generally consisting of a description of the technology and optionally the speific version(s) support.  For example, [ "Oracle Database 19c", "Oracle Exadata", "OCI Streaming" ]
        :param builtins.str supported_technologies_url: The URL to the webpage listing the supported technologies.
        :param Sequence[builtins.str] target_technologies: List of the supported technologies generally.  The value is a freeform text string generally consisting of a description of the technology and optionally the speific version(s) support.  For example, [ "Oracle Database 19c", "Oracle Exadata", "OCI Streaming" ]
        """
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "connection_types", connection_types)
        pulumi.set(__self__, "default_username", default_username)
        pulumi.set(__self__, "deployment_type", deployment_type)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "ogg_version", ogg_version)
        pulumi.set(__self__, "source_technologies", source_technologies)
        pulumi.set(__self__, "supported_technologies_url", supported_technologies_url)
        pulumi.set(__self__, "target_technologies", target_technologies)

    @property
    @pulumi.getter
    def category(self) -> builtins.str:
        """
        The deployment category defines the broad separation of the deployment type into three categories. Currently the separation is 'DATA_REPLICATION', 'STREAM_ANALYTICS' and 'DATA_TRANSFORMS'.
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter(name="connectionTypes")
    def connection_types(self) -> Sequence[builtins.str]:
        """
        An array of connectionTypes.
        """
        return pulumi.get(self, "connection_types")

    @property
    @pulumi.getter(name="defaultUsername")
    def default_username(self) -> builtins.str:
        """
        The default admin username used by deployment.
        """
        return pulumi.get(self, "default_username")

    @property
    @pulumi.getter(name="deploymentType")
    def deployment_type(self) -> builtins.str:
        """
        The type of deployment, the value determines the exact 'type' of the service executed in the deployment. Default value is DATABASE_ORACLE.
        """
        return pulumi.get(self, "deployment_type")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A filter to return only the resources that match the entire 'displayName' given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="oggVersion")
    def ogg_version(self) -> builtins.str:
        """
        Allows to query by a specific GoldenGate version.
        """
        return pulumi.get(self, "ogg_version")

    @property
    @pulumi.getter(name="sourceTechnologies")
    def source_technologies(self) -> Sequence[builtins.str]:
        """
        List of the supported technologies generally.  The value is a freeform text string generally consisting of a description of the technology and optionally the speific version(s) support.  For example, [ "Oracle Database 19c", "Oracle Exadata", "OCI Streaming" ]
        """
        return pulumi.get(self, "source_technologies")

    @property
    @pulumi.getter(name="supportedTechnologiesUrl")
    def supported_technologies_url(self) -> builtins.str:
        """
        The URL to the webpage listing the supported technologies.
        """
        return pulumi.get(self, "supported_technologies_url")

    @property
    @pulumi.getter(name="targetTechnologies")
    def target_technologies(self) -> Sequence[builtins.str]:
        """
        List of the supported technologies generally.  The value is a freeform text string generally consisting of a description of the technology and optionally the speific version(s) support.  For example, [ "Oracle Database 19c", "Oracle Exadata", "OCI Streaming" ]
        """
        return pulumi.get(self, "target_technologies")


@pulumi.output_type
class GetDeploymentTypesFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDeploymentUpgradesDeploymentUpgradeCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDeploymentUpgradesDeploymentUpgradeCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDeploymentUpgradesDeploymentUpgradeCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentUpgradesDeploymentUpgradeCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: builtins.str,
                 defined_tags: Mapping[str, builtins.str],
                 deployment_id: builtins.str,
                 deployment_upgrade_type: builtins.str,
                 description: builtins.str,
                 display_name: builtins.str,
                 freeform_tags: Mapping[str, builtins.str],
                 id: builtins.str,
                 is_cancel_allowed: builtins.bool,
                 is_reschedule_allowed: builtins.bool,
                 is_rollback_allowed: builtins.bool,
                 is_security_fix: builtins.bool,
                 is_snoozed: builtins.bool,
                 lifecycle_details: builtins.str,
                 lifecycle_sub_state: builtins.str,
                 ogg_version: builtins.str,
                 previous_ogg_version: builtins.str,
                 release_type: builtins.str,
                 state: builtins.str,
                 system_tags: Mapping[str, builtins.str],
                 time_created: builtins.str,
                 time_finished: builtins.str,
                 time_ogg_version_supported_until: builtins.str,
                 time_released: builtins.str,
                 time_schedule: builtins.str,
                 time_schedule_max: builtins.str,
                 time_snoozed_until: builtins.str,
                 time_started: builtins.str,
                 time_updated: builtins.str):
        """
        :param builtins.str compartment_id: The OCID of the compartment that contains the work request. Work requests should be scoped  to the same compartment as the resource the work request affects. If the work request concerns  multiple resources, and those resources are not in the same compartment, it is up to the service team  to pick the primary resource whose compartment should be used.
        :param Mapping[str, builtins.str] defined_tags: Tags defined for this resource. Each key is predefined and scoped to a namespace.  Example: `{"foo-namespace.bar-key": "value"}`
        :param builtins.str deployment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the deployment in which to list resources.
        :param builtins.str deployment_upgrade_type: The type of the deployment upgrade: MANUAL or AUTOMATIC
        :param builtins.str description: Metadata about this specific object.
        :param builtins.str display_name: A filter to return only the resources that match the entire 'displayName' given.
        :param Mapping[str, builtins.str] freeform_tags: A simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only.  Example: `{"bar-key": "value"}`
        :param builtins.str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the deployment upgrade being referenced.
        :param builtins.bool is_cancel_allowed: Indicates if cancel is allowed. Scheduled upgrade can be cancelled only if target version is not forced by service,  otherwise only reschedule allowed.
        :param builtins.bool is_reschedule_allowed: Indicates if reschedule is allowed. Upgrade can be rescheduled postponed until the end of the service defined auto-upgrade period.
        :param builtins.bool is_rollback_allowed: Indicates if rollback is allowed. In practice only the last upgrade can be rolled back.
               * Manual upgrade is allowed to rollback only until the old version isn't deprecated yet.
               * Automatic upgrade by default is not allowed, unless a serious issue does not justify.
        :param builtins.bool is_security_fix: Indicates if OGG release contains security fix.
        :param builtins.bool is_snoozed: Indicates if upgrade notifications are snoozed or not.
        :param builtins.str lifecycle_details: Describes the object's current state in detail. For example, it can be used to provide actionable information for a resource in a Failed state.
        :param builtins.str lifecycle_sub_state: Possible GGS lifecycle sub-states.
        :param builtins.str ogg_version: Version of OGG
        :param builtins.str previous_ogg_version: Version of OGG
        :param builtins.str release_type: The type of release.
        :param builtins.str state: A filter to return only the resources that match the 'lifecycleState' given.
        :param Mapping[str, builtins.str] system_tags: The system tags associated with this resource, if any. The system tags are set by Oracle Cloud Infrastructure services. Each key is predefined and scoped to namespaces.  For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{orcl-cloud: {free-tier-retain: true}}`
        :param builtins.str time_created: The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        :param builtins.str time_finished: The date and time the request was finished. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        :param builtins.str time_ogg_version_supported_until: The time until OGG version is supported. After this date has passed OGG version will not be available anymore. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        :param builtins.str time_released: The time the resource was released. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        :param builtins.str time_schedule: The time of upgrade schedule. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        :param builtins.str time_schedule_max: Indicates the latest time until the deployment upgrade could be rescheduled. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        :param builtins.str time_snoozed_until: The time the upgrade notifications are snoozed until. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        :param builtins.str time_started: The date and time the request was started. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        :param builtins.str time_updated: The time the resource was last updated. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "deployment_id", deployment_id)
        pulumi.set(__self__, "deployment_upgrade_type", deployment_upgrade_type)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_cancel_allowed", is_cancel_allowed)
        pulumi.set(__self__, "is_reschedule_allowed", is_reschedule_allowed)
        pulumi.set(__self__, "is_rollback_allowed", is_rollback_allowed)
        pulumi.set(__self__, "is_security_fix", is_security_fix)
        pulumi.set(__self__, "is_snoozed", is_snoozed)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "lifecycle_sub_state", lifecycle_sub_state)
        pulumi.set(__self__, "ogg_version", ogg_version)
        pulumi.set(__self__, "previous_ogg_version", previous_ogg_version)
        pulumi.set(__self__, "release_type", release_type)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_finished", time_finished)
        pulumi.set(__self__, "time_ogg_version_supported_until", time_ogg_version_supported_until)
        pulumi.set(__self__, "time_released", time_released)
        pulumi.set(__self__, "time_schedule", time_schedule)
        pulumi.set(__self__, "time_schedule_max", time_schedule_max)
        pulumi.set(__self__, "time_snoozed_until", time_snoozed_until)
        pulumi.set(__self__, "time_started", time_started)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        The OCID of the compartment that contains the work request. Work requests should be scoped  to the same compartment as the resource the work request affects. If the work request concerns  multiple resources, and those resources are not in the same compartment, it is up to the service team  to pick the primary resource whose compartment should be used.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Tags defined for this resource. Each key is predefined and scoped to a namespace.  Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="deploymentId")
    def deployment_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the deployment in which to list resources.
        """
        return pulumi.get(self, "deployment_id")

    @property
    @pulumi.getter(name="deploymentUpgradeType")
    def deployment_upgrade_type(self) -> builtins.str:
        """
        The type of the deployment upgrade: MANUAL or AUTOMATIC
        """
        return pulumi.get(self, "deployment_upgrade_type")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        Metadata about this specific object.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A filter to return only the resources that match the entire 'displayName' given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        A simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only.  Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the deployment upgrade being referenced.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isCancelAllowed")
    def is_cancel_allowed(self) -> builtins.bool:
        """
        Indicates if cancel is allowed. Scheduled upgrade can be cancelled only if target version is not forced by service,  otherwise only reschedule allowed.
        """
        return pulumi.get(self, "is_cancel_allowed")

    @property
    @pulumi.getter(name="isRescheduleAllowed")
    def is_reschedule_allowed(self) -> builtins.bool:
        """
        Indicates if reschedule is allowed. Upgrade can be rescheduled postponed until the end of the service defined auto-upgrade period.
        """
        return pulumi.get(self, "is_reschedule_allowed")

    @property
    @pulumi.getter(name="isRollbackAllowed")
    def is_rollback_allowed(self) -> builtins.bool:
        """
        Indicates if rollback is allowed. In practice only the last upgrade can be rolled back.
        * Manual upgrade is allowed to rollback only until the old version isn't deprecated yet.
        * Automatic upgrade by default is not allowed, unless a serious issue does not justify.
        """
        return pulumi.get(self, "is_rollback_allowed")

    @property
    @pulumi.getter(name="isSecurityFix")
    def is_security_fix(self) -> builtins.bool:
        """
        Indicates if OGG release contains security fix.
        """
        return pulumi.get(self, "is_security_fix")

    @property
    @pulumi.getter(name="isSnoozed")
    def is_snoozed(self) -> builtins.bool:
        """
        Indicates if upgrade notifications are snoozed or not.
        """
        return pulumi.get(self, "is_snoozed")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> builtins.str:
        """
        Describes the object's current state in detail. For example, it can be used to provide actionable information for a resource in a Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="lifecycleSubState")
    def lifecycle_sub_state(self) -> builtins.str:
        """
        Possible GGS lifecycle sub-states.
        """
        return pulumi.get(self, "lifecycle_sub_state")

    @property
    @pulumi.getter(name="oggVersion")
    def ogg_version(self) -> builtins.str:
        """
        Version of OGG
        """
        return pulumi.get(self, "ogg_version")

    @property
    @pulumi.getter(name="previousOggVersion")
    def previous_ogg_version(self) -> builtins.str:
        """
        Version of OGG
        """
        return pulumi.get(self, "previous_ogg_version")

    @property
    @pulumi.getter(name="releaseType")
    def release_type(self) -> builtins.str:
        """
        The type of release.
        """
        return pulumi.get(self, "release_type")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        A filter to return only the resources that match the 'lifecycleState' given.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        The system tags associated with this resource, if any. The system tags are set by Oracle Cloud Infrastructure services. Each key is predefined and scoped to namespaces.  For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{orcl-cloud: {free-tier-retain: true}}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeFinished")
    def time_finished(self) -> builtins.str:
        """
        The date and time the request was finished. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        return pulumi.get(self, "time_finished")

    @property
    @pulumi.getter(name="timeOggVersionSupportedUntil")
    def time_ogg_version_supported_until(self) -> builtins.str:
        """
        The time until OGG version is supported. After this date has passed OGG version will not be available anymore. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        return pulumi.get(self, "time_ogg_version_supported_until")

    @property
    @pulumi.getter(name="timeReleased")
    def time_released(self) -> builtins.str:
        """
        The time the resource was released. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        return pulumi.get(self, "time_released")

    @property
    @pulumi.getter(name="timeSchedule")
    def time_schedule(self) -> builtins.str:
        """
        The time of upgrade schedule. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        return pulumi.get(self, "time_schedule")

    @property
    @pulumi.getter(name="timeScheduleMax")
    def time_schedule_max(self) -> builtins.str:
        """
        Indicates the latest time until the deployment upgrade could be rescheduled. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        return pulumi.get(self, "time_schedule_max")

    @property
    @pulumi.getter(name="timeSnoozedUntil")
    def time_snoozed_until(self) -> builtins.str:
        """
        The time the upgrade notifications are snoozed until. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        return pulumi.get(self, "time_snoozed_until")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> builtins.str:
        """
        The date and time the request was started. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        return pulumi.get(self, "time_started")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> builtins.str:
        """
        The time the resource was last updated. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetDeploymentUpgradesFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDeploymentVersionsDeploymentVersionCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDeploymentVersionsDeploymentVersionCollectionItemResult']):
        """
        :param Sequence['GetDeploymentVersionsDeploymentVersionCollectionItemArgs'] items: Array of DeploymentVersionSummary.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDeploymentVersionsDeploymentVersionCollectionItemResult']:
        """
        Array of DeploymentVersionSummary.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentVersionsDeploymentVersionCollectionItemResult(dict):
    def __init__(__self__, *,
                 deployment_type: builtins.str,
                 is_security_fix: builtins.bool,
                 ogg_version: builtins.str,
                 release_type: builtins.str,
                 time_released: builtins.str,
                 time_supported_until: builtins.str):
        """
        :param builtins.str deployment_type: The type of deployment, the value determines the exact 'type' of the service executed in the deployment. Default value is DATABASE_ORACLE.
        :param builtins.bool is_security_fix: Indicates if OGG release contains security fix.
        :param builtins.str ogg_version: Version of OGG
        :param builtins.str release_type: The type of release.
        :param builtins.str time_released: The time the resource was released. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        :param builtins.str time_supported_until: The time until OGG version is supported. After this date has passed OGG version will not be available anymore. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        pulumi.set(__self__, "deployment_type", deployment_type)
        pulumi.set(__self__, "is_security_fix", is_security_fix)
        pulumi.set(__self__, "ogg_version", ogg_version)
        pulumi.set(__self__, "release_type", release_type)
        pulumi.set(__self__, "time_released", time_released)
        pulumi.set(__self__, "time_supported_until", time_supported_until)

    @property
    @pulumi.getter(name="deploymentType")
    def deployment_type(self) -> builtins.str:
        """
        The type of deployment, the value determines the exact 'type' of the service executed in the deployment. Default value is DATABASE_ORACLE.
        """
        return pulumi.get(self, "deployment_type")

    @property
    @pulumi.getter(name="isSecurityFix")
    def is_security_fix(self) -> builtins.bool:
        """
        Indicates if OGG release contains security fix.
        """
        return pulumi.get(self, "is_security_fix")

    @property
    @pulumi.getter(name="oggVersion")
    def ogg_version(self) -> builtins.str:
        """
        Version of OGG
        """
        return pulumi.get(self, "ogg_version")

    @property
    @pulumi.getter(name="releaseType")
    def release_type(self) -> builtins.str:
        """
        The type of release.
        """
        return pulumi.get(self, "release_type")

    @property
    @pulumi.getter(name="timeReleased")
    def time_released(self) -> builtins.str:
        """
        The time the resource was released. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        return pulumi.get(self, "time_released")

    @property
    @pulumi.getter(name="timeSupportedUntil")
    def time_supported_until(self) -> builtins.str:
        """
        The time until OGG version is supported. After this date has passed OGG version will not be available anymore. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        return pulumi.get(self, "time_supported_until")


@pulumi.output_type
class GetDeploymentVersionsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDeploymentsDeploymentCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDeploymentsDeploymentCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionItemResult(dict):
    def __init__(__self__, *,
                 backup_schedules: Sequence['outputs.GetDeploymentsDeploymentCollectionItemBackupScheduleResult'],
                 category: builtins.str,
                 compartment_id: builtins.str,
                 cpu_core_count: builtins.int,
                 defined_tags: Mapping[str, builtins.str],
                 deployment_backup_id: builtins.str,
                 deployment_diagnostic_datas: Sequence['outputs.GetDeploymentsDeploymentCollectionItemDeploymentDiagnosticDataResult'],
                 deployment_type: builtins.str,
                 deployment_url: builtins.str,
                 description: builtins.str,
                 display_name: builtins.str,
                 environment_type: builtins.str,
                 fqdn: builtins.str,
                 freeform_tags: Mapping[str, builtins.str],
                 id: builtins.str,
                 ingress_ips: Sequence['outputs.GetDeploymentsDeploymentCollectionItemIngressIpResult'],
                 is_auto_scaling_enabled: builtins.bool,
                 is_healthy: builtins.bool,
                 is_latest_version: builtins.bool,
                 is_lock_override: builtins.bool,
                 is_public: builtins.bool,
                 is_storage_utilization_limit_exceeded: builtins.bool,
                 license_model: builtins.str,
                 lifecycle_details: builtins.str,
                 lifecycle_sub_state: builtins.str,
                 load_balancer_id: builtins.str,
                 load_balancer_subnet_id: builtins.str,
                 locks: Sequence['outputs.GetDeploymentsDeploymentCollectionItemLockResult'],
                 maintenance_configurations: Sequence['outputs.GetDeploymentsDeploymentCollectionItemMaintenanceConfigurationResult'],
                 maintenance_windows: Sequence['outputs.GetDeploymentsDeploymentCollectionItemMaintenanceWindowResult'],
                 next_maintenance_action_type: builtins.str,
                 next_maintenance_description: builtins.str,
                 nsg_ids: Sequence[builtins.str],
                 ogg_datas: Sequence['outputs.GetDeploymentsDeploymentCollectionItemOggDataResult'],
                 private_ip_address: builtins.str,
                 public_ip_address: builtins.str,
                 state: builtins.str,
                 storage_utilization_in_bytes: builtins.str,
                 subnet_id: builtins.str,
                 system_tags: Mapping[str, builtins.str],
                 time_created: builtins.str,
                 time_last_backup_scheduled: builtins.str,
                 time_next_backup_scheduled: builtins.str,
                 time_of_next_maintenance: builtins.str,
                 time_ogg_version_supported_until: builtins.str,
                 time_updated: builtins.str,
                 time_upgrade_required: builtins.str):
        """
        :param Sequence['GetDeploymentsDeploymentCollectionItemBackupScheduleArgs'] backup_schedules: Defines the schedule of the deployment backup.
        :param builtins.str category: The deployment category defines the broad separation of the deployment type into three categories. Currently the separation is 'DATA_REPLICATION', 'STREAM_ANALYTICS' and 'DATA_TRANSFORMS'.
        :param builtins.str compartment_id: The OCID of the compartment that contains the work request. Work requests should be scoped  to the same compartment as the resource the work request affects. If the work request concerns  multiple resources, and those resources are not in the same compartment, it is up to the service team  to pick the primary resource whose compartment should be used.
        :param builtins.int cpu_core_count: The Minimum number of OCPUs to be made available for this Deployment.
        :param Mapping[str, builtins.str] defined_tags: Tags defined for this resource. Each key is predefined and scoped to a namespace.  Example: `{"foo-namespace.bar-key": "value"}`
        :param builtins.str deployment_backup_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the backup being referenced.
        :param Sequence['GetDeploymentsDeploymentCollectionItemDeploymentDiagnosticDataArgs'] deployment_diagnostic_datas: Information regarding the deployment diagnostic collection
        :param builtins.str deployment_type: The type of deployment, which can be any one of the Allowed values.  NOTE: Use of the value 'OGG' is maintained for backward compatibility purposes.  Its use is discouraged in favor of 'DATABASE_ORACLE'.
        :param builtins.str deployment_url: The URL of a resource.
        :param builtins.str description: Metadata about this specific object.
        :param builtins.str display_name: A filter to return only the resources that match the entire 'displayName' given.
        :param builtins.str environment_type: Specifies whether the deployment is used in a production or development/testing environment.
        :param builtins.str fqdn: A filter to return only the resources that match the 'fqdn' given.
        :param Mapping[str, builtins.str] freeform_tags: A simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only.  Example: `{"bar-key": "value"}`
        :param builtins.str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the deployment being referenced.
        :param Sequence['GetDeploymentsDeploymentCollectionItemIngressIpArgs'] ingress_ips: List of ingress IP addresses from where the GoldenGate deployment connects to this connection's privateIp.  Customers may optionally set up ingress security rules to restrict traffic from these IP addresses.
        :param builtins.bool is_auto_scaling_enabled: Indicates if auto scaling is enabled for the Deployment's CPU core count.
        :param builtins.bool is_healthy: True if all of the aggregate resources are working correctly.
        :param builtins.bool is_latest_version: Indicates if the resource is the the latest available version.
        :param builtins.bool is_public: True if this object is publicly available.
        :param builtins.bool is_storage_utilization_limit_exceeded: Deprecated: This field is not updated and will be removed in future versions. If storage utilization exceeds the limit, the respective warning message will appear in deployment messages, which can be accessed through /messages?deploymentId=. Indicator will be true if the amount of storage being utilized exceeds the allowable storage utilization limit.  Exceeding the limit may be an indication of a misconfiguration of the deployment's GoldenGate service.
        :param builtins.str license_model: The Oracle license model that applies to a Deployment.
        :param builtins.str lifecycle_details: Describes the object's current state in detail. For example, it can be used to provide actionable information for a resource in a Failed state.
        :param builtins.str lifecycle_sub_state: A filter to return only the resources that match the 'lifecycleSubState' given.
        :param builtins.str load_balancer_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the loadbalancer in the customer's subnet. The loadbalancer of the public deployment created in the customer subnet.
        :param builtins.str load_balancer_subnet_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a public subnet in the customer tenancy. Can be provided only for public deployments. If provided, the loadbalancer will be created in this subnet instead of the service tenancy. For backward compatibility, this is an optional property. It will become mandatory for public deployments after October 1, 2024.
        :param Sequence['GetDeploymentsDeploymentCollectionItemLockArgs'] locks: Locks associated with this resource.
        :param Sequence['GetDeploymentsDeploymentCollectionItemMaintenanceConfigurationArgs'] maintenance_configurations: Attributes for configuring automatic deployment maintenance.
        :param Sequence['GetDeploymentsDeploymentCollectionItemMaintenanceWindowArgs'] maintenance_windows: Defines the maintenance window, when automatic actions can be performed.
        :param builtins.str next_maintenance_action_type: Type of the next maintenance.
        :param builtins.str next_maintenance_description: Description of the next maintenance.
        :param Sequence[builtins.str] nsg_ids: An array of Network Security Group OCIDs used to define network access for either Deployments or Connections.
        :param Sequence['GetDeploymentsDeploymentCollectionItemOggDataArgs'] ogg_datas: Deployment Data for an OggDeployment
        :param builtins.str private_ip_address: The private IP address in the customer's VCN representing the access point for the associated endpoint service in the GoldenGate service VCN.
        :param builtins.str public_ip_address: The public IP address representing the access point for the Deployment.
        :param builtins.str state: A filter to return only the resources that match the 'lifecycleState' given.
        :param builtins.str storage_utilization_in_bytes: The amount of storage being utilized (in bytes)
        :param builtins.str subnet_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet of the deployment's private endpoint. The subnet must be a private subnet. For backward compatibility, public subnets are allowed until May 31 2025, after which the private subnet will be enforced.
        :param Mapping[str, builtins.str] system_tags: The system tags associated with this resource, if any. The system tags are set by Oracle Cloud Infrastructure services. Each key is predefined and scoped to namespaces.  For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{orcl-cloud: {free-tier-retain: true}}`
        :param builtins.str time_created: The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        :param builtins.str time_last_backup_scheduled: The timestamp of last deployment backup scheduled. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2024-10-25T18:19:29.600Z`.
        :param builtins.str time_next_backup_scheduled: The timestamp of next deployment backup scheduled. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2024-10-26T20:19:29.600Z`.
        :param builtins.str time_of_next_maintenance: The time of next maintenance schedule. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        :param builtins.str time_ogg_version_supported_until: The time until OGG version is supported. After this date has passed OGG version will not be available anymore. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        :param builtins.str time_updated: The time the resource was last updated. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        :param builtins.str time_upgrade_required: Note: Deprecated: Use timeOfNextMaintenance instead, or related upgrade records  to check, when deployment will be forced to upgrade to a newer version. Old description: The date the existing version in use will no longer be considered as usable and an upgrade will be required.  This date is typically 6 months after the version was released for use by GGS.  The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        pulumi.set(__self__, "backup_schedules", backup_schedules)
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "cpu_core_count", cpu_core_count)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "deployment_backup_id", deployment_backup_id)
        pulumi.set(__self__, "deployment_diagnostic_datas", deployment_diagnostic_datas)
        pulumi.set(__self__, "deployment_type", deployment_type)
        pulumi.set(__self__, "deployment_url", deployment_url)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "environment_type", environment_type)
        pulumi.set(__self__, "fqdn", fqdn)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ingress_ips", ingress_ips)
        pulumi.set(__self__, "is_auto_scaling_enabled", is_auto_scaling_enabled)
        pulumi.set(__self__, "is_healthy", is_healthy)
        pulumi.set(__self__, "is_latest_version", is_latest_version)
        pulumi.set(__self__, "is_lock_override", is_lock_override)
        pulumi.set(__self__, "is_public", is_public)
        pulumi.set(__self__, "is_storage_utilization_limit_exceeded", is_storage_utilization_limit_exceeded)
        pulumi.set(__self__, "license_model", license_model)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "lifecycle_sub_state", lifecycle_sub_state)
        pulumi.set(__self__, "load_balancer_id", load_balancer_id)
        pulumi.set(__self__, "load_balancer_subnet_id", load_balancer_subnet_id)
        pulumi.set(__self__, "locks", locks)
        pulumi.set(__self__, "maintenance_configurations", maintenance_configurations)
        pulumi.set(__self__, "maintenance_windows", maintenance_windows)
        pulumi.set(__self__, "next_maintenance_action_type", next_maintenance_action_type)
        pulumi.set(__self__, "next_maintenance_description", next_maintenance_description)
        pulumi.set(__self__, "nsg_ids", nsg_ids)
        pulumi.set(__self__, "ogg_datas", ogg_datas)
        pulumi.set(__self__, "private_ip_address", private_ip_address)
        pulumi.set(__self__, "public_ip_address", public_ip_address)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "storage_utilization_in_bytes", storage_utilization_in_bytes)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_last_backup_scheduled", time_last_backup_scheduled)
        pulumi.set(__self__, "time_next_backup_scheduled", time_next_backup_scheduled)
        pulumi.set(__self__, "time_of_next_maintenance", time_of_next_maintenance)
        pulumi.set(__self__, "time_ogg_version_supported_until", time_ogg_version_supported_until)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "time_upgrade_required", time_upgrade_required)

    @property
    @pulumi.getter(name="backupSchedules")
    def backup_schedules(self) -> Sequence['outputs.GetDeploymentsDeploymentCollectionItemBackupScheduleResult']:
        """
        Defines the schedule of the deployment backup.
        """
        return pulumi.get(self, "backup_schedules")

    @property
    @pulumi.getter
    def category(self) -> builtins.str:
        """
        The deployment category defines the broad separation of the deployment type into three categories. Currently the separation is 'DATA_REPLICATION', 'STREAM_ANALYTICS' and 'DATA_TRANSFORMS'.
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        The OCID of the compartment that contains the work request. Work requests should be scoped  to the same compartment as the resource the work request affects. If the work request concerns  multiple resources, and those resources are not in the same compartment, it is up to the service team  to pick the primary resource whose compartment should be used.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="cpuCoreCount")
    def cpu_core_count(self) -> builtins.int:
        """
        The Minimum number of OCPUs to be made available for this Deployment.
        """
        return pulumi.get(self, "cpu_core_count")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Tags defined for this resource. Each key is predefined and scoped to a namespace.  Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="deploymentBackupId")
    def deployment_backup_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the backup being referenced.
        """
        return pulumi.get(self, "deployment_backup_id")

    @property
    @pulumi.getter(name="deploymentDiagnosticDatas")
    def deployment_diagnostic_datas(self) -> Sequence['outputs.GetDeploymentsDeploymentCollectionItemDeploymentDiagnosticDataResult']:
        """
        Information regarding the deployment diagnostic collection
        """
        return pulumi.get(self, "deployment_diagnostic_datas")

    @property
    @pulumi.getter(name="deploymentType")
    def deployment_type(self) -> builtins.str:
        """
        The type of deployment, which can be any one of the Allowed values.  NOTE: Use of the value 'OGG' is maintained for backward compatibility purposes.  Its use is discouraged in favor of 'DATABASE_ORACLE'.
        """
        return pulumi.get(self, "deployment_type")

    @property
    @pulumi.getter(name="deploymentUrl")
    def deployment_url(self) -> builtins.str:
        """
        The URL of a resource.
        """
        return pulumi.get(self, "deployment_url")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        Metadata about this specific object.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A filter to return only the resources that match the entire 'displayName' given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="environmentType")
    def environment_type(self) -> builtins.str:
        """
        Specifies whether the deployment is used in a production or development/testing environment.
        """
        return pulumi.get(self, "environment_type")

    @property
    @pulumi.getter
    def fqdn(self) -> builtins.str:
        """
        A filter to return only the resources that match the 'fqdn' given.
        """
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        A simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only.  Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the deployment being referenced.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ingressIps")
    def ingress_ips(self) -> Sequence['outputs.GetDeploymentsDeploymentCollectionItemIngressIpResult']:
        """
        List of ingress IP addresses from where the GoldenGate deployment connects to this connection's privateIp.  Customers may optionally set up ingress security rules to restrict traffic from these IP addresses.
        """
        return pulumi.get(self, "ingress_ips")

    @property
    @pulumi.getter(name="isAutoScalingEnabled")
    def is_auto_scaling_enabled(self) -> builtins.bool:
        """
        Indicates if auto scaling is enabled for the Deployment's CPU core count.
        """
        return pulumi.get(self, "is_auto_scaling_enabled")

    @property
    @pulumi.getter(name="isHealthy")
    def is_healthy(self) -> builtins.bool:
        """
        True if all of the aggregate resources are working correctly.
        """
        return pulumi.get(self, "is_healthy")

    @property
    @pulumi.getter(name="isLatestVersion")
    def is_latest_version(self) -> builtins.bool:
        """
        Indicates if the resource is the the latest available version.
        """
        return pulumi.get(self, "is_latest_version")

    @property
    @pulumi.getter(name="isLockOverride")
    def is_lock_override(self) -> builtins.bool:
        return pulumi.get(self, "is_lock_override")

    @property
    @pulumi.getter(name="isPublic")
    def is_public(self) -> builtins.bool:
        """
        True if this object is publicly available.
        """
        return pulumi.get(self, "is_public")

    @property
    @pulumi.getter(name="isStorageUtilizationLimitExceeded")
    def is_storage_utilization_limit_exceeded(self) -> builtins.bool:
        """
        Deprecated: This field is not updated and will be removed in future versions. If storage utilization exceeds the limit, the respective warning message will appear in deployment messages, which can be accessed through /messages?deploymentId=. Indicator will be true if the amount of storage being utilized exceeds the allowable storage utilization limit.  Exceeding the limit may be an indication of a misconfiguration of the deployment's GoldenGate service.
        """
        return pulumi.get(self, "is_storage_utilization_limit_exceeded")

    @property
    @pulumi.getter(name="licenseModel")
    def license_model(self) -> builtins.str:
        """
        The Oracle license model that applies to a Deployment.
        """
        return pulumi.get(self, "license_model")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> builtins.str:
        """
        Describes the object's current state in detail. For example, it can be used to provide actionable information for a resource in a Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="lifecycleSubState")
    def lifecycle_sub_state(self) -> builtins.str:
        """
        A filter to return only the resources that match the 'lifecycleSubState' given.
        """
        return pulumi.get(self, "lifecycle_sub_state")

    @property
    @pulumi.getter(name="loadBalancerId")
    def load_balancer_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the loadbalancer in the customer's subnet. The loadbalancer of the public deployment created in the customer subnet.
        """
        return pulumi.get(self, "load_balancer_id")

    @property
    @pulumi.getter(name="loadBalancerSubnetId")
    def load_balancer_subnet_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a public subnet in the customer tenancy. Can be provided only for public deployments. If provided, the loadbalancer will be created in this subnet instead of the service tenancy. For backward compatibility, this is an optional property. It will become mandatory for public deployments after October 1, 2024.
        """
        return pulumi.get(self, "load_balancer_subnet_id")

    @property
    @pulumi.getter
    def locks(self) -> Sequence['outputs.GetDeploymentsDeploymentCollectionItemLockResult']:
        """
        Locks associated with this resource.
        """
        return pulumi.get(self, "locks")

    @property
    @pulumi.getter(name="maintenanceConfigurations")
    def maintenance_configurations(self) -> Sequence['outputs.GetDeploymentsDeploymentCollectionItemMaintenanceConfigurationResult']:
        """
        Attributes for configuring automatic deployment maintenance.
        """
        return pulumi.get(self, "maintenance_configurations")

    @property
    @pulumi.getter(name="maintenanceWindows")
    def maintenance_windows(self) -> Sequence['outputs.GetDeploymentsDeploymentCollectionItemMaintenanceWindowResult']:
        """
        Defines the maintenance window, when automatic actions can be performed.
        """
        return pulumi.get(self, "maintenance_windows")

    @property
    @pulumi.getter(name="nextMaintenanceActionType")
    def next_maintenance_action_type(self) -> builtins.str:
        """
        Type of the next maintenance.
        """
        return pulumi.get(self, "next_maintenance_action_type")

    @property
    @pulumi.getter(name="nextMaintenanceDescription")
    def next_maintenance_description(self) -> builtins.str:
        """
        Description of the next maintenance.
        """
        return pulumi.get(self, "next_maintenance_description")

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Sequence[builtins.str]:
        """
        An array of Network Security Group OCIDs used to define network access for either Deployments or Connections.
        """
        return pulumi.get(self, "nsg_ids")

    @property
    @pulumi.getter(name="oggDatas")
    def ogg_datas(self) -> Sequence['outputs.GetDeploymentsDeploymentCollectionItemOggDataResult']:
        """
        Deployment Data for an OggDeployment
        """
        return pulumi.get(self, "ogg_datas")

    @property
    @pulumi.getter(name="privateIpAddress")
    def private_ip_address(self) -> builtins.str:
        """
        The private IP address in the customer's VCN representing the access point for the associated endpoint service in the GoldenGate service VCN.
        """
        return pulumi.get(self, "private_ip_address")

    @property
    @pulumi.getter(name="publicIpAddress")
    def public_ip_address(self) -> builtins.str:
        """
        The public IP address representing the access point for the Deployment.
        """
        return pulumi.get(self, "public_ip_address")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        A filter to return only the resources that match the 'lifecycleState' given.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="storageUtilizationInBytes")
    def storage_utilization_in_bytes(self) -> builtins.str:
        """
        The amount of storage being utilized (in bytes)
        """
        return pulumi.get(self, "storage_utilization_in_bytes")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet of the deployment's private endpoint. The subnet must be a private subnet. For backward compatibility, public subnets are allowed until May 31 2025, after which the private subnet will be enforced.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        The system tags associated with this resource, if any. The system tags are set by Oracle Cloud Infrastructure services. Each key is predefined and scoped to namespaces.  For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{orcl-cloud: {free-tier-retain: true}}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeLastBackupScheduled")
    def time_last_backup_scheduled(self) -> builtins.str:
        """
        The timestamp of last deployment backup scheduled. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2024-10-25T18:19:29.600Z`.
        """
        return pulumi.get(self, "time_last_backup_scheduled")

    @property
    @pulumi.getter(name="timeNextBackupScheduled")
    def time_next_backup_scheduled(self) -> builtins.str:
        """
        The timestamp of next deployment backup scheduled. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2024-10-26T20:19:29.600Z`.
        """
        return pulumi.get(self, "time_next_backup_scheduled")

    @property
    @pulumi.getter(name="timeOfNextMaintenance")
    def time_of_next_maintenance(self) -> builtins.str:
        """
        The time of next maintenance schedule. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        return pulumi.get(self, "time_of_next_maintenance")

    @property
    @pulumi.getter(name="timeOggVersionSupportedUntil")
    def time_ogg_version_supported_until(self) -> builtins.str:
        """
        The time until OGG version is supported. After this date has passed OGG version will not be available anymore. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        return pulumi.get(self, "time_ogg_version_supported_until")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> builtins.str:
        """
        The time the resource was last updated. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="timeUpgradeRequired")
    def time_upgrade_required(self) -> builtins.str:
        """
        Note: Deprecated: Use timeOfNextMaintenance instead, or related upgrade records  to check, when deployment will be forced to upgrade to a newer version. Old description: The date the existing version in use will no longer be considered as usable and an upgrade will be required.  This date is typically 6 months after the version was released for use by GGS.  The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        return pulumi.get(self, "time_upgrade_required")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionItemBackupScheduleResult(dict):
    def __init__(__self__, *,
                 bucket: builtins.str,
                 compartment_id: builtins.str,
                 frequency_backup_scheduled: builtins.str,
                 is_metadata_only: builtins.bool,
                 namespace: builtins.str,
                 time_backup_scheduled: builtins.str):
        """
        :param builtins.str bucket: Name of the bucket where the object is to be uploaded in the object storage
        :param builtins.str compartment_id: The OCID of the compartment that contains the work request. Work requests should be scoped  to the same compartment as the resource the work request affects. If the work request concerns  multiple resources, and those resources are not in the same compartment, it is up to the service team  to pick the primary resource whose compartment should be used.
        :param builtins.str frequency_backup_scheduled: The frequency of the deployment backup schedule. Frequency can be DAILY, WEEKLY or MONTHLY.
        :param builtins.bool is_metadata_only: Parameter to allow users to create backup without trails
        :param builtins.str namespace: Name of namespace that serves as a container for all of your buckets
        :param builtins.str time_backup_scheduled: The start timestamp for the deployment backup schedule. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2024-10-25T18:19:29.600Z`.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "frequency_backup_scheduled", frequency_backup_scheduled)
        pulumi.set(__self__, "is_metadata_only", is_metadata_only)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "time_backup_scheduled", time_backup_scheduled)

    @property
    @pulumi.getter
    def bucket(self) -> builtins.str:
        """
        Name of the bucket where the object is to be uploaded in the object storage
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        The OCID of the compartment that contains the work request. Work requests should be scoped  to the same compartment as the resource the work request affects. If the work request concerns  multiple resources, and those resources are not in the same compartment, it is up to the service team  to pick the primary resource whose compartment should be used.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="frequencyBackupScheduled")
    def frequency_backup_scheduled(self) -> builtins.str:
        """
        The frequency of the deployment backup schedule. Frequency can be DAILY, WEEKLY or MONTHLY.
        """
        return pulumi.get(self, "frequency_backup_scheduled")

    @property
    @pulumi.getter(name="isMetadataOnly")
    def is_metadata_only(self) -> builtins.bool:
        """
        Parameter to allow users to create backup without trails
        """
        return pulumi.get(self, "is_metadata_only")

    @property
    @pulumi.getter
    def namespace(self) -> builtins.str:
        """
        Name of namespace that serves as a container for all of your buckets
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="timeBackupScheduled")
    def time_backup_scheduled(self) -> builtins.str:
        """
        The start timestamp for the deployment backup schedule. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2024-10-25T18:19:29.600Z`.
        """
        return pulumi.get(self, "time_backup_scheduled")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionItemDeploymentDiagnosticDataResult(dict):
    def __init__(__self__, *,
                 bucket: builtins.str,
                 diagnostic_state: builtins.str,
                 namespace: builtins.str,
                 object: builtins.str,
                 time_diagnostic_end: builtins.str,
                 time_diagnostic_start: builtins.str):
        """
        :param builtins.str bucket: Name of the bucket where the object is to be uploaded in the object storage
        :param builtins.str diagnostic_state: The state of the deployment diagnostic collection.
        :param builtins.str namespace: Name of namespace that serves as a container for all of your buckets
        :param builtins.str object: Name of the diagnostic collected and uploaded to object storage
        :param builtins.str time_diagnostic_end: The time until which the diagnostic collection should collect the logs. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        :param builtins.str time_diagnostic_start: The time from which the diagnostic collection should collect the logs. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "diagnostic_state", diagnostic_state)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "time_diagnostic_end", time_diagnostic_end)
        pulumi.set(__self__, "time_diagnostic_start", time_diagnostic_start)

    @property
    @pulumi.getter
    def bucket(self) -> builtins.str:
        """
        Name of the bucket where the object is to be uploaded in the object storage
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="diagnosticState")
    def diagnostic_state(self) -> builtins.str:
        """
        The state of the deployment diagnostic collection.
        """
        return pulumi.get(self, "diagnostic_state")

    @property
    @pulumi.getter
    def namespace(self) -> builtins.str:
        """
        Name of namespace that serves as a container for all of your buckets
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> builtins.str:
        """
        Name of the diagnostic collected and uploaded to object storage
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter(name="timeDiagnosticEnd")
    def time_diagnostic_end(self) -> builtins.str:
        """
        The time until which the diagnostic collection should collect the logs. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        return pulumi.get(self, "time_diagnostic_end")

    @property
    @pulumi.getter(name="timeDiagnosticStart")
    def time_diagnostic_start(self) -> builtins.str:
        """
        The time from which the diagnostic collection should collect the logs. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        return pulumi.get(self, "time_diagnostic_start")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionItemIngressIpResult(dict):
    def __init__(__self__, *,
                 ingress_ip: builtins.str):
        """
        :param builtins.str ingress_ip: A Private Endpoint IPv4 or IPv6 Address created in the customer's subnet.
        """
        pulumi.set(__self__, "ingress_ip", ingress_ip)

    @property
    @pulumi.getter(name="ingressIp")
    def ingress_ip(self) -> builtins.str:
        """
        A Private Endpoint IPv4 or IPv6 Address created in the customer's subnet.
        """
        return pulumi.get(self, "ingress_ip")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionItemLockResult(dict):
    def __init__(__self__, *,
                 message: builtins.str,
                 related_resource_id: builtins.str,
                 time_created: builtins.str,
                 type: builtins.str):
        """
        :param builtins.str message: A message added by the creator of the lock. This is typically used to give an indication of why the resource is locked.
        :param builtins.str related_resource_id: The id of the resource that is locking this resource. Indicates that deleting this resource will remove the lock.
        :param builtins.str time_created: The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        :param builtins.str type: Type of the lock.
        """
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "related_resource_id", related_resource_id)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def message(self) -> builtins.str:
        """
        A message added by the creator of the lock. This is typically used to give an indication of why the resource is locked.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter(name="relatedResourceId")
    def related_resource_id(self) -> builtins.str:
        """
        The id of the resource that is locking this resource. Indicates that deleting this resource will remove the lock.
        """
        return pulumi.get(self, "related_resource_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Type of the lock.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionItemMaintenanceConfigurationResult(dict):
    def __init__(__self__, *,
                 bundle_release_upgrade_period_in_days: builtins.int,
                 interim_release_upgrade_period_in_days: builtins.int,
                 is_interim_release_auto_upgrade_enabled: builtins.bool,
                 major_release_upgrade_period_in_days: builtins.int,
                 security_patch_upgrade_period_in_days: builtins.int):
        """
        :param builtins.int bundle_release_upgrade_period_in_days: Defines auto upgrade period for bundle releases. Manually configured period cannot be longer than service defined period for bundle releases. This period must be shorter or equal to major release upgrade period. Not passing this field during create will equate to using the service default.
        :param builtins.int interim_release_upgrade_period_in_days: Defines auto upgrade period for interim releases. This period must be shorter or equal to bundle release upgrade period.
        :param builtins.bool is_interim_release_auto_upgrade_enabled: By default auto upgrade for interim releases are not enabled. If auto-upgrade is enabled for interim release,  you have to specify interimReleaseUpgradePeriodInDays too.
        :param builtins.int major_release_upgrade_period_in_days: Defines auto upgrade period for major releases. Manually configured period cannot be longer than service defined period for major releases. Not passing this field during create will equate to using the service default.
        :param builtins.int security_patch_upgrade_period_in_days: Defines auto upgrade period for releases with security fix. Manually configured period cannot be longer than service defined period for security releases. Not passing this field during create will equate to using the service default.
        """
        pulumi.set(__self__, "bundle_release_upgrade_period_in_days", bundle_release_upgrade_period_in_days)
        pulumi.set(__self__, "interim_release_upgrade_period_in_days", interim_release_upgrade_period_in_days)
        pulumi.set(__self__, "is_interim_release_auto_upgrade_enabled", is_interim_release_auto_upgrade_enabled)
        pulumi.set(__self__, "major_release_upgrade_period_in_days", major_release_upgrade_period_in_days)
        pulumi.set(__self__, "security_patch_upgrade_period_in_days", security_patch_upgrade_period_in_days)

    @property
    @pulumi.getter(name="bundleReleaseUpgradePeriodInDays")
    def bundle_release_upgrade_period_in_days(self) -> builtins.int:
        """
        Defines auto upgrade period for bundle releases. Manually configured period cannot be longer than service defined period for bundle releases. This period must be shorter or equal to major release upgrade period. Not passing this field during create will equate to using the service default.
        """
        return pulumi.get(self, "bundle_release_upgrade_period_in_days")

    @property
    @pulumi.getter(name="interimReleaseUpgradePeriodInDays")
    def interim_release_upgrade_period_in_days(self) -> builtins.int:
        """
        Defines auto upgrade period for interim releases. This period must be shorter or equal to bundle release upgrade period.
        """
        return pulumi.get(self, "interim_release_upgrade_period_in_days")

    @property
    @pulumi.getter(name="isInterimReleaseAutoUpgradeEnabled")
    def is_interim_release_auto_upgrade_enabled(self) -> builtins.bool:
        """
        By default auto upgrade for interim releases are not enabled. If auto-upgrade is enabled for interim release,  you have to specify interimReleaseUpgradePeriodInDays too.
        """
        return pulumi.get(self, "is_interim_release_auto_upgrade_enabled")

    @property
    @pulumi.getter(name="majorReleaseUpgradePeriodInDays")
    def major_release_upgrade_period_in_days(self) -> builtins.int:
        """
        Defines auto upgrade period for major releases. Manually configured period cannot be longer than service defined period for major releases. Not passing this field during create will equate to using the service default.
        """
        return pulumi.get(self, "major_release_upgrade_period_in_days")

    @property
    @pulumi.getter(name="securityPatchUpgradePeriodInDays")
    def security_patch_upgrade_period_in_days(self) -> builtins.int:
        """
        Defines auto upgrade period for releases with security fix. Manually configured period cannot be longer than service defined period for security releases. Not passing this field during create will equate to using the service default.
        """
        return pulumi.get(self, "security_patch_upgrade_period_in_days")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionItemMaintenanceWindowResult(dict):
    def __init__(__self__, *,
                 day: builtins.str,
                 start_hour: builtins.int):
        """
        :param builtins.str day: Days of the week.
        :param builtins.int start_hour: Start hour for maintenance period. Hour is in UTC.
        """
        pulumi.set(__self__, "day", day)
        pulumi.set(__self__, "start_hour", start_hour)

    @property
    @pulumi.getter
    def day(self) -> builtins.str:
        """
        Days of the week.
        """
        return pulumi.get(self, "day")

    @property
    @pulumi.getter(name="startHour")
    def start_hour(self) -> builtins.int:
        """
        Start hour for maintenance period. Hour is in UTC.
        """
        return pulumi.get(self, "start_hour")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionItemOggDataResult(dict):
    def __init__(__self__, *,
                 admin_password: builtins.str,
                 admin_username: builtins.str,
                 certificate: builtins.str,
                 credential_store: builtins.str,
                 deployment_name: builtins.str,
                 group_to_roles_mappings: Sequence['outputs.GetDeploymentsDeploymentCollectionItemOggDataGroupToRolesMappingResult'],
                 identity_domain_id: builtins.str,
                 key: builtins.str,
                 ogg_version: builtins.str,
                 password_secret_id: builtins.str):
        """
        :param builtins.str admin_username: The GoldenGate deployment console username.
        :param builtins.str certificate: The base64 encoded content of the PEM file containing the SSL certificate.
        :param builtins.str credential_store: The type of credential store for OGG.
        :param builtins.str deployment_name: The name given to the GoldenGate service deployment. The name must be 1 to 32 characters long, must contain only alphanumeric characters and must start with a letter.
        :param Sequence['GetDeploymentsDeploymentCollectionItemOggDataGroupToRolesMappingArgs'] group_to_roles_mappings: Defines the IDP Groups to GoldenGate roles mapping. This field is used only for IAM deployment and does not have any impact on non-IAM deployments. For IAM deployment, when user does not specify this mapping, then it has null value and default mapping is used. User belonging to each group can only perform the actions according to the role the respective group is mapped to.
        :param builtins.str identity_domain_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Identity Domain when IAM credential store is used.
        :param builtins.str ogg_version: Version of OGG
        :param builtins.str password_secret_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the deployment password is stored.
        """
        pulumi.set(__self__, "admin_password", admin_password)
        pulumi.set(__self__, "admin_username", admin_username)
        pulumi.set(__self__, "certificate", certificate)
        pulumi.set(__self__, "credential_store", credential_store)
        pulumi.set(__self__, "deployment_name", deployment_name)
        pulumi.set(__self__, "group_to_roles_mappings", group_to_roles_mappings)
        pulumi.set(__self__, "identity_domain_id", identity_domain_id)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "ogg_version", ogg_version)
        pulumi.set(__self__, "password_secret_id", password_secret_id)

    @property
    @pulumi.getter(name="adminPassword")
    def admin_password(self) -> builtins.str:
        return pulumi.get(self, "admin_password")

    @property
    @pulumi.getter(name="adminUsername")
    def admin_username(self) -> builtins.str:
        """
        The GoldenGate deployment console username.
        """
        return pulumi.get(self, "admin_username")

    @property
    @pulumi.getter
    def certificate(self) -> builtins.str:
        """
        The base64 encoded content of the PEM file containing the SSL certificate.
        """
        return pulumi.get(self, "certificate")

    @property
    @pulumi.getter(name="credentialStore")
    def credential_store(self) -> builtins.str:
        """
        The type of credential store for OGG.
        """
        return pulumi.get(self, "credential_store")

    @property
    @pulumi.getter(name="deploymentName")
    def deployment_name(self) -> builtins.str:
        """
        The name given to the GoldenGate service deployment. The name must be 1 to 32 characters long, must contain only alphanumeric characters and must start with a letter.
        """
        return pulumi.get(self, "deployment_name")

    @property
    @pulumi.getter(name="groupToRolesMappings")
    def group_to_roles_mappings(self) -> Sequence['outputs.GetDeploymentsDeploymentCollectionItemOggDataGroupToRolesMappingResult']:
        """
        Defines the IDP Groups to GoldenGate roles mapping. This field is used only for IAM deployment and does not have any impact on non-IAM deployments. For IAM deployment, when user does not specify this mapping, then it has null value and default mapping is used. User belonging to each group can only perform the actions according to the role the respective group is mapped to.
        """
        return pulumi.get(self, "group_to_roles_mappings")

    @property
    @pulumi.getter(name="identityDomainId")
    def identity_domain_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Identity Domain when IAM credential store is used.
        """
        return pulumi.get(self, "identity_domain_id")

    @property
    @pulumi.getter
    def key(self) -> builtins.str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="oggVersion")
    def ogg_version(self) -> builtins.str:
        """
        Version of OGG
        """
        return pulumi.get(self, "ogg_version")

    @property
    @pulumi.getter(name="passwordSecretId")
    def password_secret_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the deployment password is stored.
        """
        return pulumi.get(self, "password_secret_id")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionItemOggDataGroupToRolesMappingResult(dict):
    def __init__(__self__, *,
                 administrator_group_id: builtins.str,
                 operator_group_id: builtins.str,
                 security_group_id: builtins.str,
                 user_group_id: builtins.str):
        """
        :param builtins.str administrator_group_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the IDP group which will be mapped to goldengate role administratorGroup. It grants full access to the user, including the ability to alter general, non-security related operational parameters and profiles of the server.
        :param builtins.str operator_group_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the IDP group which will be mapped to goldengate role operatorGroup. It allows users to perform only operational actions, like starting and stopping resources. Operators cannot alter the operational parameters or profiles of the MA server.
        :param builtins.str security_group_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the IDP group which will be mapped to goldengate role securityGroup. It grants administration of security related objects and invoke security related service requests. This role has full privileges.
        :param builtins.str user_group_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the IDP group which will be mapped to goldengate role userGroup. It allows information-only service requests, which do not alter or affect the operation of either the MA. Examples of query and read-only information include performance metric information and resource status and monitoring information
        """
        pulumi.set(__self__, "administrator_group_id", administrator_group_id)
        pulumi.set(__self__, "operator_group_id", operator_group_id)
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "user_group_id", user_group_id)

    @property
    @pulumi.getter(name="administratorGroupId")
    def administrator_group_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the IDP group which will be mapped to goldengate role administratorGroup. It grants full access to the user, including the ability to alter general, non-security related operational parameters and profiles of the server.
        """
        return pulumi.get(self, "administrator_group_id")

    @property
    @pulumi.getter(name="operatorGroupId")
    def operator_group_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the IDP group which will be mapped to goldengate role operatorGroup. It allows users to perform only operational actions, like starting and stopping resources. Operators cannot alter the operational parameters or profiles of the MA server.
        """
        return pulumi.get(self, "operator_group_id")

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the IDP group which will be mapped to goldengate role securityGroup. It grants administration of security related objects and invoke security related service requests. This role has full privileges.
        """
        return pulumi.get(self, "security_group_id")

    @property
    @pulumi.getter(name="userGroupId")
    def user_group_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the IDP group which will be mapped to goldengate role userGroup. It allows information-only service requests, which do not alter or affect the operation of either the MA. Examples of query and read-only information include performance metric information and resource status and monitoring information
        """
        return pulumi.get(self, "user_group_id")


@pulumi.output_type
class GetDeploymentsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetMessageItemResult(dict):
    def __init__(__self__, *,
                 deployment_message: builtins.str,
                 deployment_message_status: builtins.str,
                 id: builtins.str):
        """
        :param builtins.str deployment_message: The deployment Message in plain text with optional HTML anchor tags.
        :param builtins.str deployment_message_status: The deployment Message Status.
        :param builtins.str id: The deployment Message Id.
        """
        pulumi.set(__self__, "deployment_message", deployment_message)
        pulumi.set(__self__, "deployment_message_status", deployment_message_status)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="deploymentMessage")
    def deployment_message(self) -> builtins.str:
        """
        The deployment Message in plain text with optional HTML anchor tags.
        """
        return pulumi.get(self, "deployment_message")

    @property
    @pulumi.getter(name="deploymentMessageStatus")
    def deployment_message_status(self) -> builtins.str:
        """
        The deployment Message Status.
        """
        return pulumi.get(self, "deployment_message_status")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The deployment Message Id.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetMessagesDeploymentMessagesCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetMessagesDeploymentMessagesCollectionItemResult']):
        """
        :param Sequence['GetMessagesDeploymentMessagesCollectionItemArgs'] items: An array of DeploymentMessages.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetMessagesDeploymentMessagesCollectionItemResult']:
        """
        An array of DeploymentMessages.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetMessagesDeploymentMessagesCollectionItemResult(dict):
    def __init__(__self__, *,
                 deployment_message: builtins.str,
                 deployment_message_status: builtins.str,
                 id: builtins.str):
        """
        :param builtins.str deployment_message: The deployment Message in plain text with optional HTML anchor tags.
        :param builtins.str deployment_message_status: The deployment Message Status.
        :param builtins.str id: The deployment Message Id.
        """
        pulumi.set(__self__, "deployment_message", deployment_message)
        pulumi.set(__self__, "deployment_message_status", deployment_message_status)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="deploymentMessage")
    def deployment_message(self) -> builtins.str:
        """
        The deployment Message in plain text with optional HTML anchor tags.
        """
        return pulumi.get(self, "deployment_message")

    @property
    @pulumi.getter(name="deploymentMessageStatus")
    def deployment_message_status(self) -> builtins.str:
        """
        The deployment Message Status.
        """
        return pulumi.get(self, "deployment_message_status")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The deployment Message Id.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetMessagesFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetPipelineLockResult(dict):
    def __init__(__self__, *,
                 message: builtins.str,
                 type: builtins.str):
        """
        :param builtins.str message: A message added by the creator of the lock. This is typically used to give an indication of why the resource is locked.
        :param builtins.str type: Type of the lock.
        """
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def message(self) -> builtins.str:
        """
        A message added by the creator of the lock. This is typically used to give an indication of why the resource is locked.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Type of the lock.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetPipelineMappingRuleResult(dict):
    def __init__(__self__, *,
                 mapping_type: builtins.str,
                 source: builtins.str,
                 target: builtins.str):
        """
        :param builtins.str mapping_type: Defines the exclude/include rules of source and target schemas and tables when replicating from source to target. This option applies when creating and updating a pipeline.
        :param builtins.str source: The source schema/table combination for replication to target.
        :param builtins.str target: The target schema/table combination for replication from the source.
        """
        pulumi.set(__self__, "mapping_type", mapping_type)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter(name="mappingType")
    def mapping_type(self) -> builtins.str:
        """
        Defines the exclude/include rules of source and target schemas and tables when replicating from source to target. This option applies when creating and updating a pipeline.
        """
        return pulumi.get(self, "mapping_type")

    @property
    @pulumi.getter
    def source(self) -> builtins.str:
        """
        The source schema/table combination for replication to target.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def target(self) -> builtins.str:
        """
        The target schema/table combination for replication from the source.
        """
        return pulumi.get(self, "target")


@pulumi.output_type
class GetPipelineProcessOptionResult(dict):
    def __init__(__self__, *,
                 initial_data_loads: Sequence['outputs.GetPipelineProcessOptionInitialDataLoadResult'],
                 replicate_schema_changes: Sequence['outputs.GetPipelineProcessOptionReplicateSchemaChangeResult'],
                 should_restart_on_failure: builtins.str):
        """
        :param Sequence['GetPipelineProcessOptionInitialDataLoadArgs'] initial_data_loads: Options required for the pipeline Initial Data Load. If enabled, copies existing data from source to target before replication.
        :param Sequence['GetPipelineProcessOptionReplicateSchemaChangeArgs'] replicate_schema_changes: Options required for pipeline Initial Data Load. If enabled, copies existing data from source to target before replication.
        :param builtins.str should_restart_on_failure: If ENABLED, then the replication process restarts itself upon failure. This option applies when creating or updating a pipeline.
        """
        pulumi.set(__self__, "initial_data_loads", initial_data_loads)
        pulumi.set(__self__, "replicate_schema_changes", replicate_schema_changes)
        pulumi.set(__self__, "should_restart_on_failure", should_restart_on_failure)

    @property
    @pulumi.getter(name="initialDataLoads")
    def initial_data_loads(self) -> Sequence['outputs.GetPipelineProcessOptionInitialDataLoadResult']:
        """
        Options required for the pipeline Initial Data Load. If enabled, copies existing data from source to target before replication.
        """
        return pulumi.get(self, "initial_data_loads")

    @property
    @pulumi.getter(name="replicateSchemaChanges")
    def replicate_schema_changes(self) -> Sequence['outputs.GetPipelineProcessOptionReplicateSchemaChangeResult']:
        """
        Options required for pipeline Initial Data Load. If enabled, copies existing data from source to target before replication.
        """
        return pulumi.get(self, "replicate_schema_changes")

    @property
    @pulumi.getter(name="shouldRestartOnFailure")
    def should_restart_on_failure(self) -> builtins.str:
        """
        If ENABLED, then the replication process restarts itself upon failure. This option applies when creating or updating a pipeline.
        """
        return pulumi.get(self, "should_restart_on_failure")


@pulumi.output_type
class GetPipelineProcessOptionInitialDataLoadResult(dict):
    def __init__(__self__, *,
                 action_on_existing_table: builtins.str,
                 is_initial_load: builtins.str):
        """
        :param builtins.str action_on_existing_table: Action upon existing tables in target when initial Data Load is set i.e., isInitialLoad=true.
        :param builtins.str is_initial_load: If ENABLED, then existing source data is also synchronized to the target when creating or updating the pipeline.
        """
        pulumi.set(__self__, "action_on_existing_table", action_on_existing_table)
        pulumi.set(__self__, "is_initial_load", is_initial_load)

    @property
    @pulumi.getter(name="actionOnExistingTable")
    def action_on_existing_table(self) -> builtins.str:
        """
        Action upon existing tables in target when initial Data Load is set i.e., isInitialLoad=true.
        """
        return pulumi.get(self, "action_on_existing_table")

    @property
    @pulumi.getter(name="isInitialLoad")
    def is_initial_load(self) -> builtins.str:
        """
        If ENABLED, then existing source data is also synchronized to the target when creating or updating the pipeline.
        """
        return pulumi.get(self, "is_initial_load")


@pulumi.output_type
class GetPipelineProcessOptionReplicateSchemaChangeResult(dict):
    def __init__(__self__, *,
                 action_on_ddl_error: builtins.str,
                 action_on_dml_error: builtins.str,
                 can_replicate_schema_change: builtins.str):
        """
        :param builtins.str action_on_ddl_error: Action upon DDL Error (active only if 'Replicate schema changes (DDL)' is selected) i.e canReplicateSchemaChange=true
        :param builtins.str action_on_dml_error: Action upon DML Error (active only if 'Replicate schema changes (DDL)' is selected) i.e canReplicateSchemaChange=true
        :param builtins.str can_replicate_schema_change: If ENABLED, then addition or removal of schema is also replicated, apart from individual tables and records when creating or updating the pipeline.
        """
        pulumi.set(__self__, "action_on_ddl_error", action_on_ddl_error)
        pulumi.set(__self__, "action_on_dml_error", action_on_dml_error)
        pulumi.set(__self__, "can_replicate_schema_change", can_replicate_schema_change)

    @property
    @pulumi.getter(name="actionOnDdlError")
    def action_on_ddl_error(self) -> builtins.str:
        """
        Action upon DDL Error (active only if 'Replicate schema changes (DDL)' is selected) i.e canReplicateSchemaChange=true
        """
        return pulumi.get(self, "action_on_ddl_error")

    @property
    @pulumi.getter(name="actionOnDmlError")
    def action_on_dml_error(self) -> builtins.str:
        """
        Action upon DML Error (active only if 'Replicate schema changes (DDL)' is selected) i.e canReplicateSchemaChange=true
        """
        return pulumi.get(self, "action_on_dml_error")

    @property
    @pulumi.getter(name="canReplicateSchemaChange")
    def can_replicate_schema_change(self) -> builtins.str:
        """
        If ENABLED, then addition or removal of schema is also replicated, apart from individual tables and records when creating or updating the pipeline.
        """
        return pulumi.get(self, "can_replicate_schema_change")


@pulumi.output_type
class GetPipelineRunningProcessesFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        """
        :param builtins.str name: An object's Display Name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        An object's Display Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetPipelineRunningProcessesPipelineRunningProcessCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetPipelineRunningProcessesPipelineRunningProcessCollectionItemResult']):
        """
        :param Sequence['GetPipelineRunningProcessesPipelineRunningProcessCollectionItemArgs'] items: The list of replication processes and their details.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetPipelineRunningProcessesPipelineRunningProcessCollectionItemResult']:
        """
        The list of replication processes and their details.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetPipelineRunningProcessesPipelineRunningProcessCollectionItemResult(dict):
    def __init__(__self__, *,
                 last_record_lag_in_seconds: builtins.float,
                 name: builtins.str,
                 process_type: builtins.str,
                 status: builtins.str,
                 time_last_processed: builtins.str):
        """
        :param builtins.float last_record_lag_in_seconds: The latency, in seconds, of a process running in a replication. This option applies when retrieving running processes.
        :param builtins.str name: An object's Display Name.
        :param builtins.str process_type: The type of process running in a replication. For example, Extract or Replicat. This option applies when retrieving running processes.
        :param builtins.str status: The status of the Extract or Replicat process. This option applies when retrieving running processes.
        :param builtins.str time_last_processed: The date and time the last record was processed by an Extract or Replicat. This option applies when retrieving running processes. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2024-07-25T21:10:29.600Z`.
        """
        pulumi.set(__self__, "last_record_lag_in_seconds", last_record_lag_in_seconds)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "process_type", process_type)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "time_last_processed", time_last_processed)

    @property
    @pulumi.getter(name="lastRecordLagInSeconds")
    def last_record_lag_in_seconds(self) -> builtins.float:
        """
        The latency, in seconds, of a process running in a replication. This option applies when retrieving running processes.
        """
        return pulumi.get(self, "last_record_lag_in_seconds")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        An object's Display Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="processType")
    def process_type(self) -> builtins.str:
        """
        The type of process running in a replication. For example, Extract or Replicat. This option applies when retrieving running processes.
        """
        return pulumi.get(self, "process_type")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        The status of the Extract or Replicat process. This option applies when retrieving running processes.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="timeLastProcessed")
    def time_last_processed(self) -> builtins.str:
        """
        The date and time the last record was processed by an Extract or Replicat. This option applies when retrieving running processes. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2024-07-25T21:10:29.600Z`.
        """
        return pulumi.get(self, "time_last_processed")


@pulumi.output_type
class GetPipelineSchemaTablesFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetPipelineSchemaTablesPipelineSchemaTableCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetPipelineSchemaTablesPipelineSchemaTableCollectionItemResult'],
                 source_schema_name: builtins.str,
                 target_schema_name: builtins.str):
        """
        :param Sequence['GetPipelineSchemaTablesPipelineSchemaTableCollectionItemArgs'] items: Array of source or target schema tables of a pipeline's assigned connection.
        :param builtins.str source_schema_name: Name of the source schema obtained from get schema endpoint of the created pipeline.
        :param builtins.str target_schema_name: Name of the target schema obtained from get schema endpoint of the created pipeline.
        """
        pulumi.set(__self__, "items", items)
        pulumi.set(__self__, "source_schema_name", source_schema_name)
        pulumi.set(__self__, "target_schema_name", target_schema_name)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetPipelineSchemaTablesPipelineSchemaTableCollectionItemResult']:
        """
        Array of source or target schema tables of a pipeline's assigned connection.
        """
        return pulumi.get(self, "items")

    @property
    @pulumi.getter(name="sourceSchemaName")
    def source_schema_name(self) -> builtins.str:
        """
        Name of the source schema obtained from get schema endpoint of the created pipeline.
        """
        return pulumi.get(self, "source_schema_name")

    @property
    @pulumi.getter(name="targetSchemaName")
    def target_schema_name(self) -> builtins.str:
        """
        Name of the target schema obtained from get schema endpoint of the created pipeline.
        """
        return pulumi.get(self, "target_schema_name")


@pulumi.output_type
class GetPipelineSchemaTablesPipelineSchemaTableCollectionItemResult(dict):
    def __init__(__self__, *,
                 source_table_name: builtins.str,
                 target_table_name: builtins.str):
        """
        :param builtins.str source_table_name: The table name from the schema of database connection.
        :param builtins.str target_table_name: The table name from the schema of database connection.
        """
        pulumi.set(__self__, "source_table_name", source_table_name)
        pulumi.set(__self__, "target_table_name", target_table_name)

    @property
    @pulumi.getter(name="sourceTableName")
    def source_table_name(self) -> builtins.str:
        """
        The table name from the schema of database connection.
        """
        return pulumi.get(self, "source_table_name")

    @property
    @pulumi.getter(name="targetTableName")
    def target_table_name(self) -> builtins.str:
        """
        The table name from the schema of database connection.
        """
        return pulumi.get(self, "target_table_name")


@pulumi.output_type
class GetPipelineSchemasFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetPipelineSchemasPipelineSchemaCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetPipelineSchemasPipelineSchemaCollectionItemResult']):
        """
        :param Sequence['GetPipelineSchemasPipelineSchemaCollectionItemArgs'] items: Array of pipeline schemas
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetPipelineSchemasPipelineSchemaCollectionItemResult']:
        """
        Array of pipeline schemas
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetPipelineSchemasPipelineSchemaCollectionItemResult(dict):
    def __init__(__self__, *,
                 source_schema_name: builtins.str,
                 target_schema_name: builtins.str):
        """
        :param builtins.str source_schema_name: The schema name from the database connection.
        :param builtins.str target_schema_name: The schema name from the database connection.
        """
        pulumi.set(__self__, "source_schema_name", source_schema_name)
        pulumi.set(__self__, "target_schema_name", target_schema_name)

    @property
    @pulumi.getter(name="sourceSchemaName")
    def source_schema_name(self) -> builtins.str:
        """
        The schema name from the database connection.
        """
        return pulumi.get(self, "source_schema_name")

    @property
    @pulumi.getter(name="targetSchemaName")
    def target_schema_name(self) -> builtins.str:
        """
        The schema name from the database connection.
        """
        return pulumi.get(self, "target_schema_name")


@pulumi.output_type
class GetPipelineSourceConnectionDetailResult(dict):
    def __init__(__self__, *,
                 connection_id: builtins.str):
        """
        :param builtins.str connection_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the connection being referenced.
        """
        pulumi.set(__self__, "connection_id", connection_id)

    @property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the connection being referenced.
        """
        return pulumi.get(self, "connection_id")


@pulumi.output_type
class GetPipelineTargetConnectionDetailResult(dict):
    def __init__(__self__, *,
                 connection_id: builtins.str):
        """
        :param builtins.str connection_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the connection being referenced.
        """
        pulumi.set(__self__, "connection_id", connection_id)

    @property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the connection being referenced.
        """
        return pulumi.get(self, "connection_id")


@pulumi.output_type
class GetPipelinesFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetPipelinesPipelineCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetPipelinesPipelineCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetPipelinesPipelineCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetPipelinesPipelineCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: builtins.str,
                 cpu_core_count: builtins.int,
                 defined_tags: Mapping[str, builtins.str],
                 description: builtins.str,
                 display_name: builtins.str,
                 freeform_tags: Mapping[str, builtins.str],
                 id: builtins.str,
                 is_auto_scaling_enabled: builtins.bool,
                 license_model: builtins.str,
                 lifecycle_details: builtins.str,
                 lifecycle_sub_state: builtins.str,
                 locks: Sequence['outputs.GetPipelinesPipelineCollectionItemLockResult'],
                 mapping_rules: Sequence['outputs.GetPipelinesPipelineCollectionItemMappingRuleResult'],
                 process_options: Sequence['outputs.GetPipelinesPipelineCollectionItemProcessOptionResult'],
                 recipe_type: builtins.str,
                 source_connection_details: Sequence['outputs.GetPipelinesPipelineCollectionItemSourceConnectionDetailResult'],
                 state: builtins.str,
                 system_tags: Mapping[str, builtins.str],
                 target_connection_details: Sequence['outputs.GetPipelinesPipelineCollectionItemTargetConnectionDetailResult'],
                 time_created: builtins.str,
                 time_last_recorded: builtins.str,
                 time_updated: builtins.str):
        """
        :param builtins.str compartment_id: The OCID of the compartment that contains the work request. Work requests should be scoped  to the same compartment as the resource the work request affects. If the work request concerns  multiple resources, and those resources are not in the same compartment, it is up to the service team  to pick the primary resource whose compartment should be used.
        :param builtins.int cpu_core_count: The Minimum number of OCPUs to be made available for this Deployment.
        :param Mapping[str, builtins.str] defined_tags: Tags defined for this resource. Each key is predefined and scoped to a namespace.  Example: `{"foo-namespace.bar-key": "value"}`
        :param builtins.str description: Metadata about this specific object.
        :param builtins.str display_name: A filter to return only the resources that match the entire 'displayName' given.
        :param Mapping[str, builtins.str] freeform_tags: A simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only.  Example: `{"bar-key": "value"}`
        :param builtins.str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the pipeline. This option applies when retrieving a pipeline.
        :param builtins.bool is_auto_scaling_enabled: Indicates if auto scaling is enabled for the Deployment's CPU core count.
        :param builtins.str license_model: The Oracle license model that applies to a Deployment.
        :param builtins.str lifecycle_details: Describes the object's current state in detail. For example, it can be used to provide actionable information for a resource in a Failed state.
        :param builtins.str lifecycle_sub_state: A filtered list of pipelines to return for a given lifecycleSubState.
        :param Sequence['GetPipelinesPipelineCollectionItemLockArgs'] locks: Locks associated with this resource.
        :param Sequence['GetPipelinesPipelineCollectionItemMappingRuleArgs'] mapping_rules: Mapping for source/target schema/tables for the pipeline data replication.
        :param Sequence['GetPipelinesPipelineCollectionItemProcessOptionArgs'] process_options: Required pipeline options to configure the replication process (Extract or Replicat).
        :param builtins.str recipe_type: The type of the recipe
        :param Sequence['GetPipelinesPipelineCollectionItemSourceConnectionDetailArgs'] source_connection_details: The source connection details for creating a pipeline.
        :param builtins.str state: A filtered list of pipelines to return for a given lifecycleState.
        :param Mapping[str, builtins.str] system_tags: The system tags associated with this resource, if any. The system tags are set by Oracle Cloud Infrastructure services. Each key is predefined and scoped to namespaces.  For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{orcl-cloud: {free-tier-retain: true}}`
        :param Sequence['GetPipelinesPipelineCollectionItemTargetConnectionDetailArgs'] target_connection_details: The target connection details for creating a pipeline.
        :param builtins.str time_created: The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        :param builtins.str time_last_recorded: When the resource was last updated. This option applies when retrieving a pipeline. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2024-07-25T21:10:29.600Z`.
        :param builtins.str time_updated: The time the resource was last updated. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "cpu_core_count", cpu_core_count)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_auto_scaling_enabled", is_auto_scaling_enabled)
        pulumi.set(__self__, "license_model", license_model)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "lifecycle_sub_state", lifecycle_sub_state)
        pulumi.set(__self__, "locks", locks)
        pulumi.set(__self__, "mapping_rules", mapping_rules)
        pulumi.set(__self__, "process_options", process_options)
        pulumi.set(__self__, "recipe_type", recipe_type)
        pulumi.set(__self__, "source_connection_details", source_connection_details)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "target_connection_details", target_connection_details)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_last_recorded", time_last_recorded)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        The OCID of the compartment that contains the work request. Work requests should be scoped  to the same compartment as the resource the work request affects. If the work request concerns  multiple resources, and those resources are not in the same compartment, it is up to the service team  to pick the primary resource whose compartment should be used.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="cpuCoreCount")
    def cpu_core_count(self) -> builtins.int:
        """
        The Minimum number of OCPUs to be made available for this Deployment.
        """
        return pulumi.get(self, "cpu_core_count")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Tags defined for this resource. Each key is predefined and scoped to a namespace.  Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        Metadata about this specific object.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A filter to return only the resources that match the entire 'displayName' given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        A simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only.  Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the pipeline. This option applies when retrieving a pipeline.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isAutoScalingEnabled")
    def is_auto_scaling_enabled(self) -> builtins.bool:
        """
        Indicates if auto scaling is enabled for the Deployment's CPU core count.
        """
        return pulumi.get(self, "is_auto_scaling_enabled")

    @property
    @pulumi.getter(name="licenseModel")
    def license_model(self) -> builtins.str:
        """
        The Oracle license model that applies to a Deployment.
        """
        return pulumi.get(self, "license_model")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> builtins.str:
        """
        Describes the object's current state in detail. For example, it can be used to provide actionable information for a resource in a Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="lifecycleSubState")
    def lifecycle_sub_state(self) -> builtins.str:
        """
        A filtered list of pipelines to return for a given lifecycleSubState.
        """
        return pulumi.get(self, "lifecycle_sub_state")

    @property
    @pulumi.getter
    def locks(self) -> Sequence['outputs.GetPipelinesPipelineCollectionItemLockResult']:
        """
        Locks associated with this resource.
        """
        return pulumi.get(self, "locks")

    @property
    @pulumi.getter(name="mappingRules")
    def mapping_rules(self) -> Sequence['outputs.GetPipelinesPipelineCollectionItemMappingRuleResult']:
        """
        Mapping for source/target schema/tables for the pipeline data replication.
        """
        return pulumi.get(self, "mapping_rules")

    @property
    @pulumi.getter(name="processOptions")
    def process_options(self) -> Sequence['outputs.GetPipelinesPipelineCollectionItemProcessOptionResult']:
        """
        Required pipeline options to configure the replication process (Extract or Replicat).
        """
        return pulumi.get(self, "process_options")

    @property
    @pulumi.getter(name="recipeType")
    def recipe_type(self) -> builtins.str:
        """
        The type of the recipe
        """
        return pulumi.get(self, "recipe_type")

    @property
    @pulumi.getter(name="sourceConnectionDetails")
    def source_connection_details(self) -> Sequence['outputs.GetPipelinesPipelineCollectionItemSourceConnectionDetailResult']:
        """
        The source connection details for creating a pipeline.
        """
        return pulumi.get(self, "source_connection_details")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        A filtered list of pipelines to return for a given lifecycleState.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        The system tags associated with this resource, if any. The system tags are set by Oracle Cloud Infrastructure services. Each key is predefined and scoped to namespaces.  For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{orcl-cloud: {free-tier-retain: true}}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="targetConnectionDetails")
    def target_connection_details(self) -> Sequence['outputs.GetPipelinesPipelineCollectionItemTargetConnectionDetailResult']:
        """
        The target connection details for creating a pipeline.
        """
        return pulumi.get(self, "target_connection_details")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeLastRecorded")
    def time_last_recorded(self) -> builtins.str:
        """
        When the resource was last updated. This option applies when retrieving a pipeline. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2024-07-25T21:10:29.600Z`.
        """
        return pulumi.get(self, "time_last_recorded")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> builtins.str:
        """
        The time the resource was last updated. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetPipelinesPipelineCollectionItemLockResult(dict):
    def __init__(__self__, *,
                 message: builtins.str,
                 type: builtins.str):
        """
        :param builtins.str message: A message added by the creator of the lock. This is typically used to give an indication of why the resource is locked.
        :param builtins.str type: Type of the lock.
        """
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def message(self) -> builtins.str:
        """
        A message added by the creator of the lock. This is typically used to give an indication of why the resource is locked.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Type of the lock.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetPipelinesPipelineCollectionItemMappingRuleResult(dict):
    def __init__(__self__, *,
                 mapping_type: builtins.str,
                 source: builtins.str,
                 target: builtins.str):
        """
        :param builtins.str mapping_type: Defines the exclude/include rules of source and target schemas and tables when replicating from source to target. This option applies when creating and updating a pipeline.
        :param builtins.str source: The source schema/table combination for replication to target.
        :param builtins.str target: The target schema/table combination for replication from the source.
        """
        pulumi.set(__self__, "mapping_type", mapping_type)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter(name="mappingType")
    def mapping_type(self) -> builtins.str:
        """
        Defines the exclude/include rules of source and target schemas and tables when replicating from source to target. This option applies when creating and updating a pipeline.
        """
        return pulumi.get(self, "mapping_type")

    @property
    @pulumi.getter
    def source(self) -> builtins.str:
        """
        The source schema/table combination for replication to target.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def target(self) -> builtins.str:
        """
        The target schema/table combination for replication from the source.
        """
        return pulumi.get(self, "target")


@pulumi.output_type
class GetPipelinesPipelineCollectionItemProcessOptionResult(dict):
    def __init__(__self__, *,
                 initial_data_loads: Sequence['outputs.GetPipelinesPipelineCollectionItemProcessOptionInitialDataLoadResult'],
                 replicate_schema_changes: Sequence['outputs.GetPipelinesPipelineCollectionItemProcessOptionReplicateSchemaChangeResult'],
                 should_restart_on_failure: builtins.str):
        """
        :param Sequence['GetPipelinesPipelineCollectionItemProcessOptionInitialDataLoadArgs'] initial_data_loads: Options required for the pipeline Initial Data Load. If enabled, copies existing data from source to target before replication.
        :param Sequence['GetPipelinesPipelineCollectionItemProcessOptionReplicateSchemaChangeArgs'] replicate_schema_changes: Options required for pipeline Initial Data Load. If enabled, copies existing data from source to target before replication.
        :param builtins.str should_restart_on_failure: If ENABLED, then the replication process restarts itself upon failure. This option applies when creating or updating a pipeline.
        """
        pulumi.set(__self__, "initial_data_loads", initial_data_loads)
        pulumi.set(__self__, "replicate_schema_changes", replicate_schema_changes)
        pulumi.set(__self__, "should_restart_on_failure", should_restart_on_failure)

    @property
    @pulumi.getter(name="initialDataLoads")
    def initial_data_loads(self) -> Sequence['outputs.GetPipelinesPipelineCollectionItemProcessOptionInitialDataLoadResult']:
        """
        Options required for the pipeline Initial Data Load. If enabled, copies existing data from source to target before replication.
        """
        return pulumi.get(self, "initial_data_loads")

    @property
    @pulumi.getter(name="replicateSchemaChanges")
    def replicate_schema_changes(self) -> Sequence['outputs.GetPipelinesPipelineCollectionItemProcessOptionReplicateSchemaChangeResult']:
        """
        Options required for pipeline Initial Data Load. If enabled, copies existing data from source to target before replication.
        """
        return pulumi.get(self, "replicate_schema_changes")

    @property
    @pulumi.getter(name="shouldRestartOnFailure")
    def should_restart_on_failure(self) -> builtins.str:
        """
        If ENABLED, then the replication process restarts itself upon failure. This option applies when creating or updating a pipeline.
        """
        return pulumi.get(self, "should_restart_on_failure")


@pulumi.output_type
class GetPipelinesPipelineCollectionItemProcessOptionInitialDataLoadResult(dict):
    def __init__(__self__, *,
                 action_on_existing_table: builtins.str,
                 is_initial_load: builtins.str):
        """
        :param builtins.str action_on_existing_table: Action upon existing tables in target when initial Data Load is set i.e., isInitialLoad=true.
        :param builtins.str is_initial_load: If ENABLED, then existing source data is also synchronized to the target when creating or updating the pipeline.
        """
        pulumi.set(__self__, "action_on_existing_table", action_on_existing_table)
        pulumi.set(__self__, "is_initial_load", is_initial_load)

    @property
    @pulumi.getter(name="actionOnExistingTable")
    def action_on_existing_table(self) -> builtins.str:
        """
        Action upon existing tables in target when initial Data Load is set i.e., isInitialLoad=true.
        """
        return pulumi.get(self, "action_on_existing_table")

    @property
    @pulumi.getter(name="isInitialLoad")
    def is_initial_load(self) -> builtins.str:
        """
        If ENABLED, then existing source data is also synchronized to the target when creating or updating the pipeline.
        """
        return pulumi.get(self, "is_initial_load")


@pulumi.output_type
class GetPipelinesPipelineCollectionItemProcessOptionReplicateSchemaChangeResult(dict):
    def __init__(__self__, *,
                 action_on_ddl_error: builtins.str,
                 action_on_dml_error: builtins.str,
                 can_replicate_schema_change: builtins.str):
        """
        :param builtins.str action_on_ddl_error: Action upon DDL Error (active only if 'Replicate schema changes (DDL)' is selected) i.e canReplicateSchemaChange=true
        :param builtins.str action_on_dml_error: Action upon DML Error (active only if 'Replicate schema changes (DDL)' is selected) i.e canReplicateSchemaChange=true
        :param builtins.str can_replicate_schema_change: If ENABLED, then addition or removal of schema is also replicated, apart from individual tables and records when creating or updating the pipeline.
        """
        pulumi.set(__self__, "action_on_ddl_error", action_on_ddl_error)
        pulumi.set(__self__, "action_on_dml_error", action_on_dml_error)
        pulumi.set(__self__, "can_replicate_schema_change", can_replicate_schema_change)

    @property
    @pulumi.getter(name="actionOnDdlError")
    def action_on_ddl_error(self) -> builtins.str:
        """
        Action upon DDL Error (active only if 'Replicate schema changes (DDL)' is selected) i.e canReplicateSchemaChange=true
        """
        return pulumi.get(self, "action_on_ddl_error")

    @property
    @pulumi.getter(name="actionOnDmlError")
    def action_on_dml_error(self) -> builtins.str:
        """
        Action upon DML Error (active only if 'Replicate schema changes (DDL)' is selected) i.e canReplicateSchemaChange=true
        """
        return pulumi.get(self, "action_on_dml_error")

    @property
    @pulumi.getter(name="canReplicateSchemaChange")
    def can_replicate_schema_change(self) -> builtins.str:
        """
        If ENABLED, then addition or removal of schema is also replicated, apart from individual tables and records when creating or updating the pipeline.
        """
        return pulumi.get(self, "can_replicate_schema_change")


@pulumi.output_type
class GetPipelinesPipelineCollectionItemSourceConnectionDetailResult(dict):
    def __init__(__self__, *,
                 connection_id: builtins.str):
        """
        :param builtins.str connection_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the connection being referenced.
        """
        pulumi.set(__self__, "connection_id", connection_id)

    @property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the connection being referenced.
        """
        return pulumi.get(self, "connection_id")


@pulumi.output_type
class GetPipelinesPipelineCollectionItemTargetConnectionDetailResult(dict):
    def __init__(__self__, *,
                 connection_id: builtins.str):
        """
        :param builtins.str connection_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the connection being referenced.
        """
        pulumi.set(__self__, "connection_id", connection_id)

    @property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the connection being referenced.
        """
        return pulumi.get(self, "connection_id")


@pulumi.output_type
class GetRecipesFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        """
        :param builtins.str name: An object's Display Name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        An object's Display Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetRecipesRecipeSummaryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetRecipesRecipeSummaryCollectionItemResult']):
        """
        :param Sequence['GetRecipesRecipeSummaryCollectionItemArgs'] items: Array of Recipe Summary
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetRecipesRecipeSummaryCollectionItemResult']:
        """
        Array of Recipe Summary
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetRecipesRecipeSummaryCollectionItemResult(dict):
    def __init__(__self__, *,
                 description: builtins.str,
                 display_name: builtins.str,
                 name: builtins.str,
                 recipe_type: builtins.str,
                 supported_source_technology_types: Sequence[builtins.str],
                 supported_target_technology_types: Sequence[builtins.str]):
        """
        :param builtins.str description: Metadata about this specific object.
        :param builtins.str display_name: A filter to return only the resources that match the entire 'displayName' given.
        :param builtins.str name: An object's Display Name.
        :param builtins.str recipe_type: The pipeline's recipe type. The default value is ZERO_ETL.
        :param Sequence[builtins.str] supported_source_technology_types: Array of supported technology types for this recipe.
        :param Sequence[builtins.str] supported_target_technology_types: Array of supported technology types for this recipe.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "recipe_type", recipe_type)
        pulumi.set(__self__, "supported_source_technology_types", supported_source_technology_types)
        pulumi.set(__self__, "supported_target_technology_types", supported_target_technology_types)

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        Metadata about this specific object.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A filter to return only the resources that match the entire 'displayName' given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        An object's Display Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="recipeType")
    def recipe_type(self) -> builtins.str:
        """
        The pipeline's recipe type. The default value is ZERO_ETL.
        """
        return pulumi.get(self, "recipe_type")

    @property
    @pulumi.getter(name="supportedSourceTechnologyTypes")
    def supported_source_technology_types(self) -> Sequence[builtins.str]:
        """
        Array of supported technology types for this recipe.
        """
        return pulumi.get(self, "supported_source_technology_types")

    @property
    @pulumi.getter(name="supportedTargetTechnologyTypes")
    def supported_target_technology_types(self) -> Sequence[builtins.str]:
        """
        Array of supported technology types for this recipe.
        """
        return pulumi.get(self, "supported_target_technology_types")


@pulumi.output_type
class GetTrailFileItemResult(dict):
    def __init__(__self__, *,
                 consumers: Sequence[builtins.str],
                 display_name: builtins.str,
                 max_sequence_number: builtins.str,
                 min_sequence_number: builtins.str,
                 number_of_sequences: builtins.int,
                 producer: builtins.str,
                 size_in_bytes: builtins.float,
                 time_last_updated: builtins.str,
                 trail_file_id: builtins.str):
        """
        :param Sequence[builtins.str] consumers: array of consumer process names
        :param builtins.str display_name: A filter to return only the resources that match the entire 'displayName' given.
        :param builtins.str max_sequence_number: Maximum sequence number
        :param builtins.str min_sequence_number: Minimum sequence number
        :param builtins.int number_of_sequences: Number of sequences for a specific trail file
        :param builtins.str producer: Producer Process Name if any.
        :param builtins.float size_in_bytes: The size of the backup stored in object storage (in bytes)
        :param builtins.str time_last_updated: The time the resource was last updated. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        :param builtins.str trail_file_id: A Trail File identifier
        """
        pulumi.set(__self__, "consumers", consumers)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "max_sequence_number", max_sequence_number)
        pulumi.set(__self__, "min_sequence_number", min_sequence_number)
        pulumi.set(__self__, "number_of_sequences", number_of_sequences)
        pulumi.set(__self__, "producer", producer)
        pulumi.set(__self__, "size_in_bytes", size_in_bytes)
        pulumi.set(__self__, "time_last_updated", time_last_updated)
        pulumi.set(__self__, "trail_file_id", trail_file_id)

    @property
    @pulumi.getter
    def consumers(self) -> Sequence[builtins.str]:
        """
        array of consumer process names
        """
        return pulumi.get(self, "consumers")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A filter to return only the resources that match the entire 'displayName' given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="maxSequenceNumber")
    def max_sequence_number(self) -> builtins.str:
        """
        Maximum sequence number
        """
        return pulumi.get(self, "max_sequence_number")

    @property
    @pulumi.getter(name="minSequenceNumber")
    def min_sequence_number(self) -> builtins.str:
        """
        Minimum sequence number
        """
        return pulumi.get(self, "min_sequence_number")

    @property
    @pulumi.getter(name="numberOfSequences")
    def number_of_sequences(self) -> builtins.int:
        """
        Number of sequences for a specific trail file
        """
        return pulumi.get(self, "number_of_sequences")

    @property
    @pulumi.getter
    def producer(self) -> builtins.str:
        """
        Producer Process Name if any.
        """
        return pulumi.get(self, "producer")

    @property
    @pulumi.getter(name="sizeInBytes")
    def size_in_bytes(self) -> builtins.float:
        """
        The size of the backup stored in object storage (in bytes)
        """
        return pulumi.get(self, "size_in_bytes")

    @property
    @pulumi.getter(name="timeLastUpdated")
    def time_last_updated(self) -> builtins.str:
        """
        The time the resource was last updated. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        return pulumi.get(self, "time_last_updated")

    @property
    @pulumi.getter(name="trailFileId")
    def trail_file_id(self) -> builtins.str:
        """
        A Trail File identifier
        """
        return pulumi.get(self, "trail_file_id")


@pulumi.output_type
class GetTrailFilesFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetTrailFilesTrailFileCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetTrailFilesTrailFileCollectionItemResult'],
                 time_last_fetched: builtins.str):
        """
        :param Sequence['GetTrailFilesTrailFileCollectionItemArgs'] items: An array of TrailFiles.
        :param builtins.str time_last_fetched: The time the data was last fetched from the deployment. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        pulumi.set(__self__, "items", items)
        pulumi.set(__self__, "time_last_fetched", time_last_fetched)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetTrailFilesTrailFileCollectionItemResult']:
        """
        An array of TrailFiles.
        """
        return pulumi.get(self, "items")

    @property
    @pulumi.getter(name="timeLastFetched")
    def time_last_fetched(self) -> builtins.str:
        """
        The time the data was last fetched from the deployment. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        return pulumi.get(self, "time_last_fetched")


@pulumi.output_type
class GetTrailFilesTrailFileCollectionItemResult(dict):
    def __init__(__self__, *,
                 consumers: Sequence[builtins.str],
                 display_name: builtins.str,
                 max_sequence_number: builtins.str,
                 min_sequence_number: builtins.str,
                 number_of_sequences: builtins.int,
                 producer: builtins.str,
                 size_in_bytes: builtins.float,
                 time_last_updated: builtins.str,
                 trail_file_id: builtins.str):
        """
        :param Sequence[builtins.str] consumers: array of consumer process names
        :param builtins.str display_name: A filter to return only the resources that match the entire 'displayName' given.
        :param builtins.str max_sequence_number: Maximum sequence number
        :param builtins.str min_sequence_number: Minimum sequence number
        :param builtins.int number_of_sequences: Number of sequences for a specific trail file
        :param builtins.str producer: Producer Process Name if any.
        :param builtins.float size_in_bytes: The size of the backup stored in object storage (in bytes)
        :param builtins.str time_last_updated: The time the resource was last updated. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        :param builtins.str trail_file_id: A Trail File identifier
        """
        pulumi.set(__self__, "consumers", consumers)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "max_sequence_number", max_sequence_number)
        pulumi.set(__self__, "min_sequence_number", min_sequence_number)
        pulumi.set(__self__, "number_of_sequences", number_of_sequences)
        pulumi.set(__self__, "producer", producer)
        pulumi.set(__self__, "size_in_bytes", size_in_bytes)
        pulumi.set(__self__, "time_last_updated", time_last_updated)
        pulumi.set(__self__, "trail_file_id", trail_file_id)

    @property
    @pulumi.getter
    def consumers(self) -> Sequence[builtins.str]:
        """
        array of consumer process names
        """
        return pulumi.get(self, "consumers")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A filter to return only the resources that match the entire 'displayName' given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="maxSequenceNumber")
    def max_sequence_number(self) -> builtins.str:
        """
        Maximum sequence number
        """
        return pulumi.get(self, "max_sequence_number")

    @property
    @pulumi.getter(name="minSequenceNumber")
    def min_sequence_number(self) -> builtins.str:
        """
        Minimum sequence number
        """
        return pulumi.get(self, "min_sequence_number")

    @property
    @pulumi.getter(name="numberOfSequences")
    def number_of_sequences(self) -> builtins.int:
        """
        Number of sequences for a specific trail file
        """
        return pulumi.get(self, "number_of_sequences")

    @property
    @pulumi.getter
    def producer(self) -> builtins.str:
        """
        Producer Process Name if any.
        """
        return pulumi.get(self, "producer")

    @property
    @pulumi.getter(name="sizeInBytes")
    def size_in_bytes(self) -> builtins.float:
        """
        The size of the backup stored in object storage (in bytes)
        """
        return pulumi.get(self, "size_in_bytes")

    @property
    @pulumi.getter(name="timeLastUpdated")
    def time_last_updated(self) -> builtins.str:
        """
        The time the resource was last updated. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        return pulumi.get(self, "time_last_updated")

    @property
    @pulumi.getter(name="trailFileId")
    def trail_file_id(self) -> builtins.str:
        """
        A Trail File identifier
        """
        return pulumi.get(self, "trail_file_id")


@pulumi.output_type
class GetTrailSequenceItemResult(dict):
    def __init__(__self__, *,
                 display_name: builtins.str,
                 sequence_id: builtins.str,
                 size_in_bytes: builtins.float,
                 time_last_updated: builtins.str):
        """
        :param builtins.str display_name: A filter to return only the resources that match the entire 'displayName' given.
        :param builtins.str sequence_id: Sequence Id
        :param builtins.float size_in_bytes: The size of the backup stored in object storage (in bytes)
        :param builtins.str time_last_updated: The time the resource was last updated. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "sequence_id", sequence_id)
        pulumi.set(__self__, "size_in_bytes", size_in_bytes)
        pulumi.set(__self__, "time_last_updated", time_last_updated)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A filter to return only the resources that match the entire 'displayName' given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="sequenceId")
    def sequence_id(self) -> builtins.str:
        """
        Sequence Id
        """
        return pulumi.get(self, "sequence_id")

    @property
    @pulumi.getter(name="sizeInBytes")
    def size_in_bytes(self) -> builtins.float:
        """
        The size of the backup stored in object storage (in bytes)
        """
        return pulumi.get(self, "size_in_bytes")

    @property
    @pulumi.getter(name="timeLastUpdated")
    def time_last_updated(self) -> builtins.str:
        """
        The time the resource was last updated. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        return pulumi.get(self, "time_last_updated")


@pulumi.output_type
class GetTrailSequencesFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetTrailSequencesTrailSequenceCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetTrailSequencesTrailSequenceCollectionItemResult'],
                 time_last_fetched: builtins.str):
        """
        :param Sequence['GetTrailSequencesTrailSequenceCollectionItemArgs'] items: An array of TrailSequences.
        :param builtins.str time_last_fetched: The time the data was last fetched from the deployment. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        pulumi.set(__self__, "items", items)
        pulumi.set(__self__, "time_last_fetched", time_last_fetched)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetTrailSequencesTrailSequenceCollectionItemResult']:
        """
        An array of TrailSequences.
        """
        return pulumi.get(self, "items")

    @property
    @pulumi.getter(name="timeLastFetched")
    def time_last_fetched(self) -> builtins.str:
        """
        The time the data was last fetched from the deployment. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        return pulumi.get(self, "time_last_fetched")


@pulumi.output_type
class GetTrailSequencesTrailSequenceCollectionItemResult(dict):
    def __init__(__self__, *,
                 display_name: builtins.str,
                 sequence_id: builtins.str,
                 size_in_bytes: builtins.float,
                 time_last_updated: builtins.str):
        """
        :param builtins.str display_name: A filter to return only the resources that match the entire 'displayName' given.
        :param builtins.str sequence_id: Sequence Id
        :param builtins.float size_in_bytes: The size of the backup stored in object storage (in bytes)
        :param builtins.str time_last_updated: The time the resource was last updated. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "sequence_id", sequence_id)
        pulumi.set(__self__, "size_in_bytes", size_in_bytes)
        pulumi.set(__self__, "time_last_updated", time_last_updated)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A filter to return only the resources that match the entire 'displayName' given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="sequenceId")
    def sequence_id(self) -> builtins.str:
        """
        Sequence Id
        """
        return pulumi.get(self, "sequence_id")

    @property
    @pulumi.getter(name="sizeInBytes")
    def size_in_bytes(self) -> builtins.float:
        """
        The size of the backup stored in object storage (in bytes)
        """
        return pulumi.get(self, "size_in_bytes")

    @property
    @pulumi.getter(name="timeLastUpdated")
    def time_last_updated(self) -> builtins.str:
        """
        The time the resource was last updated. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        """
        return pulumi.get(self, "time_last_updated")


