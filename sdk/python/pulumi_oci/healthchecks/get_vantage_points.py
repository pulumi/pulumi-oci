# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetVantagePointsResult',
    'AwaitableGetVantagePointsResult',
    'get_vantage_points',
    'get_vantage_points_output',
]

@pulumi.output_type
class GetVantagePointsResult:
    """
    A collection of values returned by getVantagePoints.
    """
    def __init__(__self__, display_name=None, filters=None, health_checks_vantage_points=None, id=None, name=None):
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if health_checks_vantage_points and not isinstance(health_checks_vantage_points, list):
            raise TypeError("Expected argument 'health_checks_vantage_points' to be a list")
        pulumi.set(__self__, "health_checks_vantage_points", health_checks_vantage_points)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        The display name for the vantage point. Display names are determined by the best information available and may change over time.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetVantagePointsFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter(name="healthChecksVantagePoints")
    def health_checks_vantage_points(self) -> Sequence['outputs.GetVantagePointsHealthChecksVantagePointResult']:
        """
        The list of health_checks_vantage_points.
        """
        return pulumi.get(self, "health_checks_vantage_points")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The unique, permanent name for the vantage point.
        """
        return pulumi.get(self, "name")


class AwaitableGetVantagePointsResult(GetVantagePointsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVantagePointsResult(
            display_name=self.display_name,
            filters=self.filters,
            health_checks_vantage_points=self.health_checks_vantage_points,
            id=self.id,
            name=self.name)


def get_vantage_points(display_name: Optional[str] = None,
                       filters: Optional[Sequence[pulumi.InputType['GetVantagePointsFilterArgs']]] = None,
                       name: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVantagePointsResult:
    """
    This data source provides the list of Vantage Points in Oracle Cloud Infrastructure Health Checks service.

    Gets information about all vantage points available to the user.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_vantage_points = oci.HealthChecks.get_vantage_points(display_name=var["vantage_point_display_name"],
        name=var["vantage_point_name"])
    ```


    :param str display_name: Filters results that exactly match the `displayName` field.
    :param str name: Filters results that exactly match the `name` field.
    """
    __args__ = dict()
    __args__['displayName'] = display_name
    __args__['filters'] = filters
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:HealthChecks/getVantagePoints:getVantagePoints', __args__, opts=opts, typ=GetVantagePointsResult).value

    return AwaitableGetVantagePointsResult(
        display_name=pulumi.get(__ret__, 'display_name'),
        filters=pulumi.get(__ret__, 'filters'),
        health_checks_vantage_points=pulumi.get(__ret__, 'health_checks_vantage_points'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'))


@_utilities.lift_output_func(get_vantage_points)
def get_vantage_points_output(display_name: Optional[pulumi.Input[Optional[str]]] = None,
                              filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetVantagePointsFilterArgs']]]]] = None,
                              name: Optional[pulumi.Input[Optional[str]]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetVantagePointsResult]:
    """
    This data source provides the list of Vantage Points in Oracle Cloud Infrastructure Health Checks service.

    Gets information about all vantage points available to the user.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_vantage_points = oci.HealthChecks.get_vantage_points(display_name=var["vantage_point_display_name"],
        name=var["vantage_point_name"])
    ```


    :param str display_name: Filters results that exactly match the `displayName` field.
    :param str name: Filters results that exactly match the `name` field.
    """
    ...
