# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetHttpMonitorsFilterResult',
    'GetHttpMonitorsHttpMonitorResult',
    'GetHttpProbeResultsFilterResult',
    'GetHttpProbeResultsHttpProbeResultResult',
    'GetHttpProbeResultsHttpProbeResultConnectionResult',
    'GetHttpProbeResultsHttpProbeResultDnResult',
    'GetPingMonitorsFilterResult',
    'GetPingMonitorsPingMonitorResult',
    'GetPingProbeResultsFilterResult',
    'GetPingProbeResultsPingProbeResultResult',
    'GetPingProbeResultsPingProbeResultConnectionResult',
    'GetPingProbeResultsPingProbeResultDnResult',
    'GetVantagePointsFilterResult',
    'GetVantagePointsHealthChecksVantagePointResult',
    'GetVantagePointsHealthChecksVantagePointGeoResult',
    'GetVantagePointsHealthChecksVantagePointRoutingResult',
]

@pulumi.output_type
class GetHttpMonitorsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetHttpMonitorsHttpMonitorResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 headers: Optional[Mapping[str, Any]] = None,
                 home_region: Optional[str] = None,
                 id: Optional[str] = None,
                 interval_in_seconds: Optional[int] = None,
                 is_enabled: Optional[bool] = None,
                 method: Optional[str] = None,
                 path: Optional[str] = None,
                 port: Optional[int] = None,
                 protocol: Optional[str] = None,
                 results_url: Optional[str] = None,
                 targets: Optional[Sequence[str]] = None,
                 time_created: Optional[str] = None,
                 timeout_in_seconds: Optional[int] = None,
                 vantage_point_names: Optional[Sequence[str]] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if home_region is not None:
            pulumi.set(__self__, "home_region", home_region)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if interval_in_seconds is not None:
            pulumi.set(__self__, "interval_in_seconds", interval_in_seconds)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if results_url is not None:
            pulumi.set(__self__, "results_url", results_url)
        if targets is not None:
            pulumi.set(__self__, "targets", targets)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if timeout_in_seconds is not None:
            pulumi.set(__self__, "timeout_in_seconds", timeout_in_seconds)
        if vantage_point_names is not None:
            pulumi.set(__self__, "vantage_point_names", vantage_point_names)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def headers(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter(name="homeRegion")
    def home_region(self) -> Optional[str]:
        return pulumi.get(self, "home_region")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="intervalInSeconds")
    def interval_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "interval_in_seconds")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def method(self) -> Optional[str]:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="resultsUrl")
    def results_url(self) -> Optional[str]:
        return pulumi.get(self, "results_url")

    @property
    @pulumi.getter
    def targets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "targets")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeoutInSeconds")
    def timeout_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_in_seconds")

    @property
    @pulumi.getter(name="vantagePointNames")
    def vantage_point_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "vantage_point_names")


@pulumi.output_type
class GetHttpProbeResultsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetHttpProbeResultsHttpProbeResultResult(dict):
    def __init__(__self__, *,
                 connect_end: Optional[float] = None,
                 connect_start: Optional[float] = None,
                 connections: Optional[Sequence['outputs.GetHttpProbeResultsHttpProbeResultConnectionResult']] = None,
                 dns: Optional[Sequence['outputs.GetHttpProbeResultsHttpProbeResultDnResult']] = None,
                 domain_lookup_end: Optional[float] = None,
                 domain_lookup_start: Optional[float] = None,
                 duration: Optional[float] = None,
                 encoded_body_size: Optional[int] = None,
                 error_category: Optional[str] = None,
                 error_message: Optional[str] = None,
                 fetch_start: Optional[float] = None,
                 is_healthy: Optional[bool] = None,
                 is_timed_out: Optional[bool] = None,
                 key: Optional[str] = None,
                 probe_configuration_id: Optional[str] = None,
                 protocol: Optional[str] = None,
                 request_start: Optional[float] = None,
                 response_end: Optional[float] = None,
                 response_start: Optional[float] = None,
                 secure_connection_start: Optional[float] = None,
                 start_time: Optional[float] = None,
                 status_code: Optional[int] = None,
                 target: Optional[str] = None,
                 vantage_point_name: Optional[str] = None):
        if connect_end is not None:
            pulumi.set(__self__, "connect_end", connect_end)
        if connect_start is not None:
            pulumi.set(__self__, "connect_start", connect_start)
        if connections is not None:
            pulumi.set(__self__, "connections", connections)
        if dns is not None:
            pulumi.set(__self__, "dns", dns)
        if domain_lookup_end is not None:
            pulumi.set(__self__, "domain_lookup_end", domain_lookup_end)
        if domain_lookup_start is not None:
            pulumi.set(__self__, "domain_lookup_start", domain_lookup_start)
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if encoded_body_size is not None:
            pulumi.set(__self__, "encoded_body_size", encoded_body_size)
        if error_category is not None:
            pulumi.set(__self__, "error_category", error_category)
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)
        if fetch_start is not None:
            pulumi.set(__self__, "fetch_start", fetch_start)
        if is_healthy is not None:
            pulumi.set(__self__, "is_healthy", is_healthy)
        if is_timed_out is not None:
            pulumi.set(__self__, "is_timed_out", is_timed_out)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if probe_configuration_id is not None:
            pulumi.set(__self__, "probe_configuration_id", probe_configuration_id)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if request_start is not None:
            pulumi.set(__self__, "request_start", request_start)
        if response_end is not None:
            pulumi.set(__self__, "response_end", response_end)
        if response_start is not None:
            pulumi.set(__self__, "response_start", response_start)
        if secure_connection_start is not None:
            pulumi.set(__self__, "secure_connection_start", secure_connection_start)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if status_code is not None:
            pulumi.set(__self__, "status_code", status_code)
        if target is not None:
            pulumi.set(__self__, "target", target)
        if vantage_point_name is not None:
            pulumi.set(__self__, "vantage_point_name", vantage_point_name)

    @property
    @pulumi.getter(name="connectEnd")
    def connect_end(self) -> Optional[float]:
        return pulumi.get(self, "connect_end")

    @property
    @pulumi.getter(name="connectStart")
    def connect_start(self) -> Optional[float]:
        return pulumi.get(self, "connect_start")

    @property
    @pulumi.getter
    def connections(self) -> Optional[Sequence['outputs.GetHttpProbeResultsHttpProbeResultConnectionResult']]:
        return pulumi.get(self, "connections")

    @property
    @pulumi.getter
    def dns(self) -> Optional[Sequence['outputs.GetHttpProbeResultsHttpProbeResultDnResult']]:
        return pulumi.get(self, "dns")

    @property
    @pulumi.getter(name="domainLookupEnd")
    def domain_lookup_end(self) -> Optional[float]:
        return pulumi.get(self, "domain_lookup_end")

    @property
    @pulumi.getter(name="domainLookupStart")
    def domain_lookup_start(self) -> Optional[float]:
        return pulumi.get(self, "domain_lookup_start")

    @property
    @pulumi.getter
    def duration(self) -> Optional[float]:
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter(name="encodedBodySize")
    def encoded_body_size(self) -> Optional[int]:
        return pulumi.get(self, "encoded_body_size")

    @property
    @pulumi.getter(name="errorCategory")
    def error_category(self) -> Optional[str]:
        return pulumi.get(self, "error_category")

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[str]:
        return pulumi.get(self, "error_message")

    @property
    @pulumi.getter(name="fetchStart")
    def fetch_start(self) -> Optional[float]:
        return pulumi.get(self, "fetch_start")

    @property
    @pulumi.getter(name="isHealthy")
    def is_healthy(self) -> Optional[bool]:
        return pulumi.get(self, "is_healthy")

    @property
    @pulumi.getter(name="isTimedOut")
    def is_timed_out(self) -> Optional[bool]:
        return pulumi.get(self, "is_timed_out")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="probeConfigurationId")
    def probe_configuration_id(self) -> Optional[str]:
        return pulumi.get(self, "probe_configuration_id")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="requestStart")
    def request_start(self) -> Optional[float]:
        return pulumi.get(self, "request_start")

    @property
    @pulumi.getter(name="responseEnd")
    def response_end(self) -> Optional[float]:
        return pulumi.get(self, "response_end")

    @property
    @pulumi.getter(name="responseStart")
    def response_start(self) -> Optional[float]:
        return pulumi.get(self, "response_start")

    @property
    @pulumi.getter(name="secureConnectionStart")
    def secure_connection_start(self) -> Optional[float]:
        return pulumi.get(self, "secure_connection_start")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[float]:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[int]:
        return pulumi.get(self, "status_code")

    @property
    @pulumi.getter
    def target(self) -> Optional[str]:
        return pulumi.get(self, "target")

    @property
    @pulumi.getter(name="vantagePointName")
    def vantage_point_name(self) -> Optional[str]:
        return pulumi.get(self, "vantage_point_name")


@pulumi.output_type
class GetHttpProbeResultsHttpProbeResultConnectionResult(dict):
    def __init__(__self__, *,
                 address: Optional[str] = None,
                 connect_duration: Optional[float] = None,
                 port: Optional[int] = None,
                 secure_connect_duration: Optional[float] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)
        if connect_duration is not None:
            pulumi.set(__self__, "connect_duration", connect_duration)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if secure_connect_duration is not None:
            pulumi.set(__self__, "secure_connect_duration", secure_connect_duration)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="connectDuration")
    def connect_duration(self) -> Optional[float]:
        return pulumi.get(self, "connect_duration")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="secureConnectDuration")
    def secure_connect_duration(self) -> Optional[float]:
        return pulumi.get(self, "secure_connect_duration")


@pulumi.output_type
class GetHttpProbeResultsHttpProbeResultDnResult(dict):
    def __init__(__self__, *,
                 addresses: Optional[Sequence[str]] = None,
                 domain_lookup_duration: Optional[float] = None):
        if addresses is not None:
            pulumi.set(__self__, "addresses", addresses)
        if domain_lookup_duration is not None:
            pulumi.set(__self__, "domain_lookup_duration", domain_lookup_duration)

    @property
    @pulumi.getter
    def addresses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "addresses")

    @property
    @pulumi.getter(name="domainLookupDuration")
    def domain_lookup_duration(self) -> Optional[float]:
        return pulumi.get(self, "domain_lookup_duration")


@pulumi.output_type
class GetPingMonitorsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetPingMonitorsPingMonitorResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 home_region: Optional[str] = None,
                 id: Optional[str] = None,
                 interval_in_seconds: Optional[int] = None,
                 is_enabled: Optional[bool] = None,
                 port: Optional[int] = None,
                 protocol: Optional[str] = None,
                 results_url: Optional[str] = None,
                 targets: Optional[Sequence[str]] = None,
                 time_created: Optional[str] = None,
                 timeout_in_seconds: Optional[int] = None,
                 vantage_point_names: Optional[Sequence[str]] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if home_region is not None:
            pulumi.set(__self__, "home_region", home_region)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if interval_in_seconds is not None:
            pulumi.set(__self__, "interval_in_seconds", interval_in_seconds)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if results_url is not None:
            pulumi.set(__self__, "results_url", results_url)
        if targets is not None:
            pulumi.set(__self__, "targets", targets)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if timeout_in_seconds is not None:
            pulumi.set(__self__, "timeout_in_seconds", timeout_in_seconds)
        if vantage_point_names is not None:
            pulumi.set(__self__, "vantage_point_names", vantage_point_names)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="homeRegion")
    def home_region(self) -> Optional[str]:
        return pulumi.get(self, "home_region")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="intervalInSeconds")
    def interval_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "interval_in_seconds")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="resultsUrl")
    def results_url(self) -> Optional[str]:
        return pulumi.get(self, "results_url")

    @property
    @pulumi.getter
    def targets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "targets")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeoutInSeconds")
    def timeout_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_in_seconds")

    @property
    @pulumi.getter(name="vantagePointNames")
    def vantage_point_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "vantage_point_names")


@pulumi.output_type
class GetPingProbeResultsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetPingProbeResultsPingProbeResultResult(dict):
    def __init__(__self__, *,
                 connections: Optional[Sequence['outputs.GetPingProbeResultsPingProbeResultConnectionResult']] = None,
                 dns: Optional[Sequence['outputs.GetPingProbeResultsPingProbeResultDnResult']] = None,
                 domain_lookup_end: Optional[float] = None,
                 domain_lookup_start: Optional[float] = None,
                 error_category: Optional[str] = None,
                 error_message: Optional[str] = None,
                 icmp_code: Optional[int] = None,
                 is_healthy: Optional[bool] = None,
                 is_timed_out: Optional[bool] = None,
                 key: Optional[str] = None,
                 latency_in_ms: Optional[float] = None,
                 probe_configuration_id: Optional[str] = None,
                 protocol: Optional[str] = None,
                 start_time: Optional[float] = None,
                 target: Optional[str] = None,
                 vantage_point_name: Optional[str] = None):
        if connections is not None:
            pulumi.set(__self__, "connections", connections)
        if dns is not None:
            pulumi.set(__self__, "dns", dns)
        if domain_lookup_end is not None:
            pulumi.set(__self__, "domain_lookup_end", domain_lookup_end)
        if domain_lookup_start is not None:
            pulumi.set(__self__, "domain_lookup_start", domain_lookup_start)
        if error_category is not None:
            pulumi.set(__self__, "error_category", error_category)
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)
        if icmp_code is not None:
            pulumi.set(__self__, "icmp_code", icmp_code)
        if is_healthy is not None:
            pulumi.set(__self__, "is_healthy", is_healthy)
        if is_timed_out is not None:
            pulumi.set(__self__, "is_timed_out", is_timed_out)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if latency_in_ms is not None:
            pulumi.set(__self__, "latency_in_ms", latency_in_ms)
        if probe_configuration_id is not None:
            pulumi.set(__self__, "probe_configuration_id", probe_configuration_id)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if target is not None:
            pulumi.set(__self__, "target", target)
        if vantage_point_name is not None:
            pulumi.set(__self__, "vantage_point_name", vantage_point_name)

    @property
    @pulumi.getter
    def connections(self) -> Optional[Sequence['outputs.GetPingProbeResultsPingProbeResultConnectionResult']]:
        return pulumi.get(self, "connections")

    @property
    @pulumi.getter
    def dns(self) -> Optional[Sequence['outputs.GetPingProbeResultsPingProbeResultDnResult']]:
        return pulumi.get(self, "dns")

    @property
    @pulumi.getter(name="domainLookupEnd")
    def domain_lookup_end(self) -> Optional[float]:
        return pulumi.get(self, "domain_lookup_end")

    @property
    @pulumi.getter(name="domainLookupStart")
    def domain_lookup_start(self) -> Optional[float]:
        return pulumi.get(self, "domain_lookup_start")

    @property
    @pulumi.getter(name="errorCategory")
    def error_category(self) -> Optional[str]:
        return pulumi.get(self, "error_category")

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[str]:
        return pulumi.get(self, "error_message")

    @property
    @pulumi.getter(name="icmpCode")
    def icmp_code(self) -> Optional[int]:
        return pulumi.get(self, "icmp_code")

    @property
    @pulumi.getter(name="isHealthy")
    def is_healthy(self) -> Optional[bool]:
        return pulumi.get(self, "is_healthy")

    @property
    @pulumi.getter(name="isTimedOut")
    def is_timed_out(self) -> Optional[bool]:
        return pulumi.get(self, "is_timed_out")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="latencyInMs")
    def latency_in_ms(self) -> Optional[float]:
        return pulumi.get(self, "latency_in_ms")

    @property
    @pulumi.getter(name="probeConfigurationId")
    def probe_configuration_id(self) -> Optional[str]:
        return pulumi.get(self, "probe_configuration_id")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[float]:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def target(self) -> Optional[str]:
        return pulumi.get(self, "target")

    @property
    @pulumi.getter(name="vantagePointName")
    def vantage_point_name(self) -> Optional[str]:
        return pulumi.get(self, "vantage_point_name")


@pulumi.output_type
class GetPingProbeResultsPingProbeResultConnectionResult(dict):
    def __init__(__self__, *,
                 address: Optional[str] = None,
                 port: Optional[int] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")


@pulumi.output_type
class GetPingProbeResultsPingProbeResultDnResult(dict):
    def __init__(__self__, *,
                 addresses: Optional[Sequence[str]] = None,
                 domain_lookup_duration: Optional[float] = None):
        if addresses is not None:
            pulumi.set(__self__, "addresses", addresses)
        if domain_lookup_duration is not None:
            pulumi.set(__self__, "domain_lookup_duration", domain_lookup_duration)

    @property
    @pulumi.getter
    def addresses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "addresses")

    @property
    @pulumi.getter(name="domainLookupDuration")
    def domain_lookup_duration(self) -> Optional[float]:
        return pulumi.get(self, "domain_lookup_duration")


@pulumi.output_type
class GetVantagePointsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetVantagePointsHealthChecksVantagePointResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 geos: Optional[Sequence['outputs.GetVantagePointsHealthChecksVantagePointGeoResult']] = None,
                 name: Optional[str] = None,
                 provider_name: Optional[str] = None,
                 routings: Optional[Sequence['outputs.GetVantagePointsHealthChecksVantagePointRoutingResult']] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if geos is not None:
            pulumi.set(__self__, "geos", geos)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if provider_name is not None:
            pulumi.set(__self__, "provider_name", provider_name)
        if routings is not None:
            pulumi.set(__self__, "routings", routings)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def geos(self) -> Optional[Sequence['outputs.GetVantagePointsHealthChecksVantagePointGeoResult']]:
        return pulumi.get(self, "geos")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="providerName")
    def provider_name(self) -> Optional[str]:
        return pulumi.get(self, "provider_name")

    @property
    @pulumi.getter
    def routings(self) -> Optional[Sequence['outputs.GetVantagePointsHealthChecksVantagePointRoutingResult']]:
        return pulumi.get(self, "routings")


@pulumi.output_type
class GetVantagePointsHealthChecksVantagePointGeoResult(dict):
    def __init__(__self__, *,
                 admin_div_code: Optional[str] = None,
                 city_name: Optional[str] = None,
                 country_code: Optional[str] = None,
                 country_name: Optional[str] = None,
                 geo_key: Optional[str] = None,
                 latitude: Optional[float] = None,
                 longitude: Optional[float] = None):
        if admin_div_code is not None:
            pulumi.set(__self__, "admin_div_code", admin_div_code)
        if city_name is not None:
            pulumi.set(__self__, "city_name", city_name)
        if country_code is not None:
            pulumi.set(__self__, "country_code", country_code)
        if country_name is not None:
            pulumi.set(__self__, "country_name", country_name)
        if geo_key is not None:
            pulumi.set(__self__, "geo_key", geo_key)
        if latitude is not None:
            pulumi.set(__self__, "latitude", latitude)
        if longitude is not None:
            pulumi.set(__self__, "longitude", longitude)

    @property
    @pulumi.getter(name="adminDivCode")
    def admin_div_code(self) -> Optional[str]:
        return pulumi.get(self, "admin_div_code")

    @property
    @pulumi.getter(name="cityName")
    def city_name(self) -> Optional[str]:
        return pulumi.get(self, "city_name")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> Optional[str]:
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter(name="countryName")
    def country_name(self) -> Optional[str]:
        return pulumi.get(self, "country_name")

    @property
    @pulumi.getter(name="geoKey")
    def geo_key(self) -> Optional[str]:
        return pulumi.get(self, "geo_key")

    @property
    @pulumi.getter
    def latitude(self) -> Optional[float]:
        return pulumi.get(self, "latitude")

    @property
    @pulumi.getter
    def longitude(self) -> Optional[float]:
        return pulumi.get(self, "longitude")


@pulumi.output_type
class GetVantagePointsHealthChecksVantagePointRoutingResult(dict):
    def __init__(__self__, *,
                 as_label: Optional[str] = None,
                 asn: Optional[int] = None,
                 prefix: Optional[str] = None,
                 weight: Optional[int] = None):
        if as_label is not None:
            pulumi.set(__self__, "as_label", as_label)
        if asn is not None:
            pulumi.set(__self__, "asn", asn)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="asLabel")
    def as_label(self) -> Optional[str]:
        return pulumi.get(self, "as_label")

    @property
    @pulumi.getter
    def asn(self) -> Optional[int]:
        return pulumi.get(self, "asn")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        return pulumi.get(self, "weight")


