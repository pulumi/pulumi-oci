# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DomainsAppRoleArgs', 'DomainsAppRole']

@pulumi.input_type
class DomainsAppRoleArgs:
    def __init__(__self__, *,
                 app: pulumi.Input['DomainsAppRoleAppArgs'],
                 display_name: pulumi.Input[str],
                 idcs_endpoint: pulumi.Input[str],
                 schemas: pulumi.Input[Sequence[pulumi.Input[str]]],
                 admin_role: Optional[pulumi.Input[bool]] = None,
                 attribute_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 attributes: Optional[pulumi.Input[str]] = None,
                 authorization: Optional[pulumi.Input[str]] = None,
                 available_to_clients: Optional[pulumi.Input[bool]] = None,
                 available_to_groups: Optional[pulumi.Input[bool]] = None,
                 available_to_users: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 legacy_group_name: Optional[pulumi.Input[str]] = None,
                 ocid: Optional[pulumi.Input[str]] = None,
                 public: Optional[pulumi.Input[bool]] = None,
                 resource_type_schema_version: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['DomainsAppRoleTagArgs']]]] = None):
        """
        The set of arguments for constructing a DomainsAppRole resource.
        """
        pulumi.set(__self__, "app", app)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "idcs_endpoint", idcs_endpoint)
        pulumi.set(__self__, "schemas", schemas)
        if admin_role is not None:
            pulumi.set(__self__, "admin_role", admin_role)
        if attribute_sets is not None:
            pulumi.set(__self__, "attribute_sets", attribute_sets)
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)
        if authorization is not None:
            pulumi.set(__self__, "authorization", authorization)
        if available_to_clients is not None:
            pulumi.set(__self__, "available_to_clients", available_to_clients)
        if available_to_groups is not None:
            pulumi.set(__self__, "available_to_groups", available_to_groups)
        if available_to_users is not None:
            pulumi.set(__self__, "available_to_users", available_to_users)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if legacy_group_name is not None:
            pulumi.set(__self__, "legacy_group_name", legacy_group_name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if public is not None:
            pulumi.set(__self__, "public", public)
        if resource_type_schema_version is not None:
            pulumi.set(__self__, "resource_type_schema_version", resource_type_schema_version)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def app(self) -> pulumi.Input['DomainsAppRoleAppArgs']:
        return pulumi.get(self, "app")

    @app.setter
    def app(self, value: pulumi.Input['DomainsAppRoleAppArgs']):
        pulumi.set(self, "app", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> pulumi.Input[str]:
        return pulumi.get(self, "idcs_endpoint")

    @idcs_endpoint.setter
    def idcs_endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "idcs_endpoint", value)

    @property
    @pulumi.getter
    def schemas(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "schemas")

    @schemas.setter
    def schemas(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "schemas", value)

    @property
    @pulumi.getter(name="adminRole")
    def admin_role(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "admin_role")

    @admin_role.setter
    def admin_role(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "admin_role", value)

    @property
    @pulumi.getter(name="attributeSets")
    def attribute_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "attribute_sets")

    @attribute_sets.setter
    def attribute_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "attribute_sets", value)

    @property
    @pulumi.getter
    def attributes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "attributes")

    @attributes.setter
    def attributes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attributes", value)

    @property
    @pulumi.getter
    def authorization(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authorization")

    @authorization.setter
    def authorization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authorization", value)

    @property
    @pulumi.getter(name="availableToClients")
    def available_to_clients(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "available_to_clients")

    @available_to_clients.setter
    def available_to_clients(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "available_to_clients", value)

    @property
    @pulumi.getter(name="availableToGroups")
    def available_to_groups(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "available_to_groups")

    @available_to_groups.setter
    def available_to_groups(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "available_to_groups", value)

    @property
    @pulumi.getter(name="availableToUsers")
    def available_to_users(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "available_to_users")

    @available_to_users.setter
    def available_to_users(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "available_to_users", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="legacyGroupName")
    def legacy_group_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "legacy_group_name")

    @legacy_group_name.setter
    def legacy_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "legacy_group_name", value)

    @property
    @pulumi.getter
    def ocid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ocid")

    @ocid.setter
    def ocid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ocid", value)

    @property
    @pulumi.getter
    def public(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "public")

    @public.setter
    def public(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "public", value)

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_type_schema_version")

    @resource_type_schema_version.setter
    def resource_type_schema_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_type_schema_version", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DomainsAppRoleTagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DomainsAppRoleTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _DomainsAppRoleState:
    def __init__(__self__, *,
                 admin_role: Optional[pulumi.Input[bool]] = None,
                 app: Optional[pulumi.Input['DomainsAppRoleAppArgs']] = None,
                 attribute_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 attributes: Optional[pulumi.Input[str]] = None,
                 authorization: Optional[pulumi.Input[str]] = None,
                 available_to_clients: Optional[pulumi.Input[bool]] = None,
                 available_to_groups: Optional[pulumi.Input[bool]] = None,
                 available_to_users: Optional[pulumi.Input[bool]] = None,
                 compartment_ocid: Optional[pulumi.Input[str]] = None,
                 delete_in_progress: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 domain_ocid: Optional[pulumi.Input[str]] = None,
                 idcs_created_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DomainsAppRoleIdcsCreatedByArgs']]]] = None,
                 idcs_endpoint: Optional[pulumi.Input[str]] = None,
                 idcs_last_modified_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DomainsAppRoleIdcsLastModifiedByArgs']]]] = None,
                 idcs_last_upgraded_in_release: Optional[pulumi.Input[str]] = None,
                 idcs_prevented_operations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 legacy_group_name: Optional[pulumi.Input[str]] = None,
                 limited_to_one_or_more_groups: Optional[pulumi.Input[bool]] = None,
                 localized_display_name: Optional[pulumi.Input[str]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input['DomainsAppRoleMemberArgs']]]] = None,
                 metas: Optional[pulumi.Input[Sequence[pulumi.Input['DomainsAppRoleMetaArgs']]]] = None,
                 ocid: Optional[pulumi.Input[str]] = None,
                 public: Optional[pulumi.Input[bool]] = None,
                 resource_type_schema_version: Optional[pulumi.Input[str]] = None,
                 schemas: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['DomainsAppRoleTagArgs']]]] = None,
                 tenancy_ocid: Optional[pulumi.Input[str]] = None,
                 unique_name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering DomainsAppRole resources.
        """
        if admin_role is not None:
            pulumi.set(__self__, "admin_role", admin_role)
        if app is not None:
            pulumi.set(__self__, "app", app)
        if attribute_sets is not None:
            pulumi.set(__self__, "attribute_sets", attribute_sets)
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)
        if authorization is not None:
            pulumi.set(__self__, "authorization", authorization)
        if available_to_clients is not None:
            pulumi.set(__self__, "available_to_clients", available_to_clients)
        if available_to_groups is not None:
            pulumi.set(__self__, "available_to_groups", available_to_groups)
        if available_to_users is not None:
            pulumi.set(__self__, "available_to_users", available_to_users)
        if compartment_ocid is not None:
            pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        if delete_in_progress is not None:
            pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if domain_ocid is not None:
            pulumi.set(__self__, "domain_ocid", domain_ocid)
        if idcs_created_bies is not None:
            pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        if idcs_endpoint is not None:
            pulumi.set(__self__, "idcs_endpoint", idcs_endpoint)
        if idcs_last_modified_bies is not None:
            pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        if idcs_last_upgraded_in_release is not None:
            pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        if idcs_prevented_operations is not None:
            pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        if legacy_group_name is not None:
            pulumi.set(__self__, "legacy_group_name", legacy_group_name)
        if limited_to_one_or_more_groups is not None:
            pulumi.set(__self__, "limited_to_one_or_more_groups", limited_to_one_or_more_groups)
        if localized_display_name is not None:
            pulumi.set(__self__, "localized_display_name", localized_display_name)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if metas is not None:
            pulumi.set(__self__, "metas", metas)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if public is not None:
            pulumi.set(__self__, "public", public)
        if resource_type_schema_version is not None:
            pulumi.set(__self__, "resource_type_schema_version", resource_type_schema_version)
        if schemas is not None:
            pulumi.set(__self__, "schemas", schemas)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tenancy_ocid is not None:
            pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)
        if unique_name is not None:
            pulumi.set(__self__, "unique_name", unique_name)

    @property
    @pulumi.getter(name="adminRole")
    def admin_role(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "admin_role")

    @admin_role.setter
    def admin_role(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "admin_role", value)

    @property
    @pulumi.getter
    def app(self) -> Optional[pulumi.Input['DomainsAppRoleAppArgs']]:
        return pulumi.get(self, "app")

    @app.setter
    def app(self, value: Optional[pulumi.Input['DomainsAppRoleAppArgs']]):
        pulumi.set(self, "app", value)

    @property
    @pulumi.getter(name="attributeSets")
    def attribute_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "attribute_sets")

    @attribute_sets.setter
    def attribute_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "attribute_sets", value)

    @property
    @pulumi.getter
    def attributes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "attributes")

    @attributes.setter
    def attributes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attributes", value)

    @property
    @pulumi.getter
    def authorization(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authorization")

    @authorization.setter
    def authorization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authorization", value)

    @property
    @pulumi.getter(name="availableToClients")
    def available_to_clients(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "available_to_clients")

    @available_to_clients.setter
    def available_to_clients(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "available_to_clients", value)

    @property
    @pulumi.getter(name="availableToGroups")
    def available_to_groups(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "available_to_groups")

    @available_to_groups.setter
    def available_to_groups(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "available_to_groups", value)

    @property
    @pulumi.getter(name="availableToUsers")
    def available_to_users(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "available_to_users")

    @available_to_users.setter
    def available_to_users(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "available_to_users", value)

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compartment_ocid")

    @compartment_ocid.setter
    def compartment_ocid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compartment_ocid", value)

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "delete_in_progress")

    @delete_in_progress.setter
    def delete_in_progress(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_in_progress", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "domain_ocid")

    @domain_ocid.setter
    def domain_ocid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain_ocid", value)

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DomainsAppRoleIdcsCreatedByArgs']]]]:
        return pulumi.get(self, "idcs_created_bies")

    @idcs_created_bies.setter
    def idcs_created_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DomainsAppRoleIdcsCreatedByArgs']]]]):
        pulumi.set(self, "idcs_created_bies", value)

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "idcs_endpoint")

    @idcs_endpoint.setter
    def idcs_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idcs_endpoint", value)

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DomainsAppRoleIdcsLastModifiedByArgs']]]]:
        return pulumi.get(self, "idcs_last_modified_bies")

    @idcs_last_modified_bies.setter
    def idcs_last_modified_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DomainsAppRoleIdcsLastModifiedByArgs']]]]):
        pulumi.set(self, "idcs_last_modified_bies", value)

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @idcs_last_upgraded_in_release.setter
    def idcs_last_upgraded_in_release(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idcs_last_upgraded_in_release", value)

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "idcs_prevented_operations")

    @idcs_prevented_operations.setter
    def idcs_prevented_operations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "idcs_prevented_operations", value)

    @property
    @pulumi.getter(name="legacyGroupName")
    def legacy_group_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "legacy_group_name")

    @legacy_group_name.setter
    def legacy_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "legacy_group_name", value)

    @property
    @pulumi.getter(name="limitedToOneOrMoreGroups")
    def limited_to_one_or_more_groups(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "limited_to_one_or_more_groups")

    @limited_to_one_or_more_groups.setter
    def limited_to_one_or_more_groups(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "limited_to_one_or_more_groups", value)

    @property
    @pulumi.getter(name="localizedDisplayName")
    def localized_display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "localized_display_name")

    @localized_display_name.setter
    def localized_display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "localized_display_name", value)

    @property
    @pulumi.getter
    def members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DomainsAppRoleMemberArgs']]]]:
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DomainsAppRoleMemberArgs']]]]):
        pulumi.set(self, "members", value)

    @property
    @pulumi.getter
    def metas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DomainsAppRoleMetaArgs']]]]:
        return pulumi.get(self, "metas")

    @metas.setter
    def metas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DomainsAppRoleMetaArgs']]]]):
        pulumi.set(self, "metas", value)

    @property
    @pulumi.getter
    def ocid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ocid")

    @ocid.setter
    def ocid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ocid", value)

    @property
    @pulumi.getter
    def public(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "public")

    @public.setter
    def public(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "public", value)

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_type_schema_version")

    @resource_type_schema_version.setter
    def resource_type_schema_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_type_schema_version", value)

    @property
    @pulumi.getter
    def schemas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "schemas")

    @schemas.setter
    def schemas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "schemas", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DomainsAppRoleTagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DomainsAppRoleTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tenancy_ocid")

    @tenancy_ocid.setter
    def tenancy_ocid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenancy_ocid", value)

    @property
    @pulumi.getter(name="uniqueName")
    def unique_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unique_name")

    @unique_name.setter
    def unique_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unique_name", value)


class DomainsAppRole(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin_role: Optional[pulumi.Input[bool]] = None,
                 app: Optional[pulumi.Input[pulumi.InputType['DomainsAppRoleAppArgs']]] = None,
                 attribute_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 attributes: Optional[pulumi.Input[str]] = None,
                 authorization: Optional[pulumi.Input[str]] = None,
                 available_to_clients: Optional[pulumi.Input[bool]] = None,
                 available_to_groups: Optional[pulumi.Input[bool]] = None,
                 available_to_users: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 idcs_endpoint: Optional[pulumi.Input[str]] = None,
                 legacy_group_name: Optional[pulumi.Input[str]] = None,
                 ocid: Optional[pulumi.Input[str]] = None,
                 public: Optional[pulumi.Input[bool]] = None,
                 resource_type_schema_version: Optional[pulumi.Input[str]] = None,
                 schemas: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DomainsAppRoleTagArgs']]]]] = None,
                 __props__=None):
        """
        Create a DomainsAppRole resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DomainsAppRoleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a DomainsAppRole resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param DomainsAppRoleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DomainsAppRoleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin_role: Optional[pulumi.Input[bool]] = None,
                 app: Optional[pulumi.Input[pulumi.InputType['DomainsAppRoleAppArgs']]] = None,
                 attribute_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 attributes: Optional[pulumi.Input[str]] = None,
                 authorization: Optional[pulumi.Input[str]] = None,
                 available_to_clients: Optional[pulumi.Input[bool]] = None,
                 available_to_groups: Optional[pulumi.Input[bool]] = None,
                 available_to_users: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 idcs_endpoint: Optional[pulumi.Input[str]] = None,
                 legacy_group_name: Optional[pulumi.Input[str]] = None,
                 ocid: Optional[pulumi.Input[str]] = None,
                 public: Optional[pulumi.Input[bool]] = None,
                 resource_type_schema_version: Optional[pulumi.Input[str]] = None,
                 schemas: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DomainsAppRoleTagArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DomainsAppRoleArgs.__new__(DomainsAppRoleArgs)

            __props__.__dict__["admin_role"] = admin_role
            if app is None and not opts.urn:
                raise TypeError("Missing required property 'app'")
            __props__.__dict__["app"] = app
            __props__.__dict__["attribute_sets"] = attribute_sets
            __props__.__dict__["attributes"] = attributes
            __props__.__dict__["authorization"] = authorization
            __props__.__dict__["available_to_clients"] = available_to_clients
            __props__.__dict__["available_to_groups"] = available_to_groups
            __props__.__dict__["available_to_users"] = available_to_users
            __props__.__dict__["description"] = description
            if display_name is None and not opts.urn:
                raise TypeError("Missing required property 'display_name'")
            __props__.__dict__["display_name"] = display_name
            if idcs_endpoint is None and not opts.urn:
                raise TypeError("Missing required property 'idcs_endpoint'")
            __props__.__dict__["idcs_endpoint"] = idcs_endpoint
            __props__.__dict__["legacy_group_name"] = legacy_group_name
            __props__.__dict__["ocid"] = ocid
            __props__.__dict__["public"] = public
            __props__.__dict__["resource_type_schema_version"] = resource_type_schema_version
            if schemas is None and not opts.urn:
                raise TypeError("Missing required property 'schemas'")
            __props__.__dict__["schemas"] = schemas
            __props__.__dict__["tags"] = tags
            __props__.__dict__["compartment_ocid"] = None
            __props__.__dict__["delete_in_progress"] = None
            __props__.__dict__["domain_ocid"] = None
            __props__.__dict__["idcs_created_bies"] = None
            __props__.__dict__["idcs_last_modified_bies"] = None
            __props__.__dict__["idcs_last_upgraded_in_release"] = None
            __props__.__dict__["idcs_prevented_operations"] = None
            __props__.__dict__["limited_to_one_or_more_groups"] = None
            __props__.__dict__["localized_display_name"] = None
            __props__.__dict__["members"] = None
            __props__.__dict__["metas"] = None
            __props__.__dict__["tenancy_ocid"] = None
            __props__.__dict__["unique_name"] = None
        super(DomainsAppRole, __self__).__init__(
            'oci:Identity/domainsAppRole:DomainsAppRole',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            admin_role: Optional[pulumi.Input[bool]] = None,
            app: Optional[pulumi.Input[pulumi.InputType['DomainsAppRoleAppArgs']]] = None,
            attribute_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            attributes: Optional[pulumi.Input[str]] = None,
            authorization: Optional[pulumi.Input[str]] = None,
            available_to_clients: Optional[pulumi.Input[bool]] = None,
            available_to_groups: Optional[pulumi.Input[bool]] = None,
            available_to_users: Optional[pulumi.Input[bool]] = None,
            compartment_ocid: Optional[pulumi.Input[str]] = None,
            delete_in_progress: Optional[pulumi.Input[bool]] = None,
            description: Optional[pulumi.Input[str]] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            domain_ocid: Optional[pulumi.Input[str]] = None,
            idcs_created_bies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DomainsAppRoleIdcsCreatedByArgs']]]]] = None,
            idcs_endpoint: Optional[pulumi.Input[str]] = None,
            idcs_last_modified_bies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DomainsAppRoleIdcsLastModifiedByArgs']]]]] = None,
            idcs_last_upgraded_in_release: Optional[pulumi.Input[str]] = None,
            idcs_prevented_operations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            legacy_group_name: Optional[pulumi.Input[str]] = None,
            limited_to_one_or_more_groups: Optional[pulumi.Input[bool]] = None,
            localized_display_name: Optional[pulumi.Input[str]] = None,
            members: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DomainsAppRoleMemberArgs']]]]] = None,
            metas: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DomainsAppRoleMetaArgs']]]]] = None,
            ocid: Optional[pulumi.Input[str]] = None,
            public: Optional[pulumi.Input[bool]] = None,
            resource_type_schema_version: Optional[pulumi.Input[str]] = None,
            schemas: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DomainsAppRoleTagArgs']]]]] = None,
            tenancy_ocid: Optional[pulumi.Input[str]] = None,
            unique_name: Optional[pulumi.Input[str]] = None) -> 'DomainsAppRole':
        """
        Get an existing DomainsAppRole resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DomainsAppRoleState.__new__(_DomainsAppRoleState)

        __props__.__dict__["admin_role"] = admin_role
        __props__.__dict__["app"] = app
        __props__.__dict__["attribute_sets"] = attribute_sets
        __props__.__dict__["attributes"] = attributes
        __props__.__dict__["authorization"] = authorization
        __props__.__dict__["available_to_clients"] = available_to_clients
        __props__.__dict__["available_to_groups"] = available_to_groups
        __props__.__dict__["available_to_users"] = available_to_users
        __props__.__dict__["compartment_ocid"] = compartment_ocid
        __props__.__dict__["delete_in_progress"] = delete_in_progress
        __props__.__dict__["description"] = description
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["domain_ocid"] = domain_ocid
        __props__.__dict__["idcs_created_bies"] = idcs_created_bies
        __props__.__dict__["idcs_endpoint"] = idcs_endpoint
        __props__.__dict__["idcs_last_modified_bies"] = idcs_last_modified_bies
        __props__.__dict__["idcs_last_upgraded_in_release"] = idcs_last_upgraded_in_release
        __props__.__dict__["idcs_prevented_operations"] = idcs_prevented_operations
        __props__.__dict__["legacy_group_name"] = legacy_group_name
        __props__.__dict__["limited_to_one_or_more_groups"] = limited_to_one_or_more_groups
        __props__.__dict__["localized_display_name"] = localized_display_name
        __props__.__dict__["members"] = members
        __props__.__dict__["metas"] = metas
        __props__.__dict__["ocid"] = ocid
        __props__.__dict__["public"] = public
        __props__.__dict__["resource_type_schema_version"] = resource_type_schema_version
        __props__.__dict__["schemas"] = schemas
        __props__.__dict__["tags"] = tags
        __props__.__dict__["tenancy_ocid"] = tenancy_ocid
        __props__.__dict__["unique_name"] = unique_name
        return DomainsAppRole(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="adminRole")
    def admin_role(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "admin_role")

    @property
    @pulumi.getter
    def app(self) -> pulumi.Output['outputs.DomainsAppRoleApp']:
        return pulumi.get(self, "app")

    @property
    @pulumi.getter(name="attributeSets")
    def attribute_sets(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "attribute_sets")

    @property
    @pulumi.getter
    def attributes(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter
    def authorization(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="availableToClients")
    def available_to_clients(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "available_to_clients")

    @property
    @pulumi.getter(name="availableToGroups")
    def available_to_groups(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "available_to_groups")

    @property
    @pulumi.getter(name="availableToUsers")
    def available_to_users(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "available_to_users")

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> pulumi.Output[Optional[Sequence['outputs.DomainsAppRoleIdcsCreatedBy']]]:
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> pulumi.Output[str]:
        return pulumi.get(self, "idcs_endpoint")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> pulumi.Output[Optional[Sequence['outputs.DomainsAppRoleIdcsLastModifiedBy']]]:
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter(name="legacyGroupName")
    def legacy_group_name(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "legacy_group_name")

    @property
    @pulumi.getter(name="limitedToOneOrMoreGroups")
    def limited_to_one_or_more_groups(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "limited_to_one_or_more_groups")

    @property
    @pulumi.getter(name="localizedDisplayName")
    def localized_display_name(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "localized_display_name")

    @property
    @pulumi.getter
    def members(self) -> pulumi.Output[Optional[Sequence['outputs.DomainsAppRoleMember']]]:
        return pulumi.get(self, "members")

    @property
    @pulumi.getter
    def metas(self) -> pulumi.Output[Optional[Sequence['outputs.DomainsAppRoleMeta']]]:
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter
    def ocid(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def public(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "public")

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "resource_type_schema_version")

    @property
    @pulumi.getter
    def schemas(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['outputs.DomainsAppRoleTag']]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "tenancy_ocid")

    @property
    @pulumi.getter(name="uniqueName")
    def unique_name(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "unique_name")

