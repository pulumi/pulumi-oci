# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DomainsIdentityProviderArgs', 'DomainsIdentityProvider']

@pulumi.input_type
class DomainsIdentityProviderArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 idcs_endpoint: pulumi.Input[str],
                 partner_name: pulumi.Input[str],
                 schemas: pulumi.Input[Sequence[pulumi.Input[str]]],
                 assertion_attribute: Optional[pulumi.Input[str]] = None,
                 attribute_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 attributes: Optional[pulumi.Input[str]] = None,
                 authn_request_binding: Optional[pulumi.Input[str]] = None,
                 authorization: Optional[pulumi.Input[str]] = None,
                 correlation_policy: Optional[pulumi.Input['DomainsIdentityProviderCorrelationPolicyArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 encryption_certificate: Optional[pulumi.Input[str]] = None,
                 external_id: Optional[pulumi.Input[str]] = None,
                 icon_url: Optional[pulumi.Input[str]] = None,
                 idp_sso_url: Optional[pulumi.Input[str]] = None,
                 include_signing_cert_in_signature: Optional[pulumi.Input[bool]] = None,
                 jit_user_prov_assigned_groups: Optional[pulumi.Input[Sequence[pulumi.Input['DomainsIdentityProviderJitUserProvAssignedGroupArgs']]]] = None,
                 jit_user_prov_attribute_update_enabled: Optional[pulumi.Input[bool]] = None,
                 jit_user_prov_attributes: Optional[pulumi.Input['DomainsIdentityProviderJitUserProvAttributesArgs']] = None,
                 jit_user_prov_create_user_enabled: Optional[pulumi.Input[bool]] = None,
                 jit_user_prov_enabled: Optional[pulumi.Input[bool]] = None,
                 jit_user_prov_group_assertion_attribute_enabled: Optional[pulumi.Input[bool]] = None,
                 jit_user_prov_group_assignment_method: Optional[pulumi.Input[str]] = None,
                 jit_user_prov_group_mapping_mode: Optional[pulumi.Input[str]] = None,
                 jit_user_prov_group_mappings: Optional[pulumi.Input[Sequence[pulumi.Input['DomainsIdentityProviderJitUserProvGroupMappingArgs']]]] = None,
                 jit_user_prov_group_saml_attribute_name: Optional[pulumi.Input[str]] = None,
                 jit_user_prov_group_static_list_enabled: Optional[pulumi.Input[bool]] = None,
                 jit_user_prov_ignore_error_on_absent_groups: Optional[pulumi.Input[bool]] = None,
                 logout_binding: Optional[pulumi.Input[str]] = None,
                 logout_enabled: Optional[pulumi.Input[bool]] = None,
                 logout_request_url: Optional[pulumi.Input[str]] = None,
                 logout_response_url: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[str]] = None,
                 name_id_format: Optional[pulumi.Input[str]] = None,
                 ocid: Optional[pulumi.Input[str]] = None,
                 partner_provider_id: Optional[pulumi.Input[str]] = None,
                 requested_authentication_contexts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 require_force_authn: Optional[pulumi.Input[bool]] = None,
                 requires_encrypted_assertion: Optional[pulumi.Input[bool]] = None,
                 resource_type_schema_version: Optional[pulumi.Input[str]] = None,
                 saml_ho_krequired: Optional[pulumi.Input[bool]] = None,
                 service_instance_identifier: Optional[pulumi.Input[str]] = None,
                 shown_on_login_page: Optional[pulumi.Input[bool]] = None,
                 signature_hash_algorithm: Optional[pulumi.Input[str]] = None,
                 signing_certificate: Optional[pulumi.Input[str]] = None,
                 succinct_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['DomainsIdentityProviderTagArgs']]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 urnietfparamsscimschemasoracleidcsextensionsocial_identity_provider: Optional[pulumi.Input['DomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProviderArgs']] = None,
                 urnietfparamsscimschemasoracleidcsextensionx509identity_provider: Optional[pulumi.Input['DomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionx509identityProviderArgs']] = None,
                 user_mapping_method: Optional[pulumi.Input[str]] = None,
                 user_mapping_store_attribute: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a DomainsIdentityProvider resource.
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "idcs_endpoint", idcs_endpoint)
        pulumi.set(__self__, "partner_name", partner_name)
        pulumi.set(__self__, "schemas", schemas)
        if assertion_attribute is not None:
            pulumi.set(__self__, "assertion_attribute", assertion_attribute)
        if attribute_sets is not None:
            pulumi.set(__self__, "attribute_sets", attribute_sets)
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)
        if authn_request_binding is not None:
            pulumi.set(__self__, "authn_request_binding", authn_request_binding)
        if authorization is not None:
            pulumi.set(__self__, "authorization", authorization)
        if correlation_policy is not None:
            pulumi.set(__self__, "correlation_policy", correlation_policy)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if encryption_certificate is not None:
            pulumi.set(__self__, "encryption_certificate", encryption_certificate)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if icon_url is not None:
            pulumi.set(__self__, "icon_url", icon_url)
        if idp_sso_url is not None:
            pulumi.set(__self__, "idp_sso_url", idp_sso_url)
        if include_signing_cert_in_signature is not None:
            pulumi.set(__self__, "include_signing_cert_in_signature", include_signing_cert_in_signature)
        if jit_user_prov_assigned_groups is not None:
            pulumi.set(__self__, "jit_user_prov_assigned_groups", jit_user_prov_assigned_groups)
        if jit_user_prov_attribute_update_enabled is not None:
            pulumi.set(__self__, "jit_user_prov_attribute_update_enabled", jit_user_prov_attribute_update_enabled)
        if jit_user_prov_attributes is not None:
            pulumi.set(__self__, "jit_user_prov_attributes", jit_user_prov_attributes)
        if jit_user_prov_create_user_enabled is not None:
            pulumi.set(__self__, "jit_user_prov_create_user_enabled", jit_user_prov_create_user_enabled)
        if jit_user_prov_enabled is not None:
            pulumi.set(__self__, "jit_user_prov_enabled", jit_user_prov_enabled)
        if jit_user_prov_group_assertion_attribute_enabled is not None:
            pulumi.set(__self__, "jit_user_prov_group_assertion_attribute_enabled", jit_user_prov_group_assertion_attribute_enabled)
        if jit_user_prov_group_assignment_method is not None:
            pulumi.set(__self__, "jit_user_prov_group_assignment_method", jit_user_prov_group_assignment_method)
        if jit_user_prov_group_mapping_mode is not None:
            pulumi.set(__self__, "jit_user_prov_group_mapping_mode", jit_user_prov_group_mapping_mode)
        if jit_user_prov_group_mappings is not None:
            pulumi.set(__self__, "jit_user_prov_group_mappings", jit_user_prov_group_mappings)
        if jit_user_prov_group_saml_attribute_name is not None:
            pulumi.set(__self__, "jit_user_prov_group_saml_attribute_name", jit_user_prov_group_saml_attribute_name)
        if jit_user_prov_group_static_list_enabled is not None:
            pulumi.set(__self__, "jit_user_prov_group_static_list_enabled", jit_user_prov_group_static_list_enabled)
        if jit_user_prov_ignore_error_on_absent_groups is not None:
            pulumi.set(__self__, "jit_user_prov_ignore_error_on_absent_groups", jit_user_prov_ignore_error_on_absent_groups)
        if logout_binding is not None:
            pulumi.set(__self__, "logout_binding", logout_binding)
        if logout_enabled is not None:
            pulumi.set(__self__, "logout_enabled", logout_enabled)
        if logout_request_url is not None:
            pulumi.set(__self__, "logout_request_url", logout_request_url)
        if logout_response_url is not None:
            pulumi.set(__self__, "logout_response_url", logout_response_url)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if name_id_format is not None:
            pulumi.set(__self__, "name_id_format", name_id_format)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if partner_provider_id is not None:
            pulumi.set(__self__, "partner_provider_id", partner_provider_id)
        if requested_authentication_contexts is not None:
            pulumi.set(__self__, "requested_authentication_contexts", requested_authentication_contexts)
        if require_force_authn is not None:
            pulumi.set(__self__, "require_force_authn", require_force_authn)
        if requires_encrypted_assertion is not None:
            pulumi.set(__self__, "requires_encrypted_assertion", requires_encrypted_assertion)
        if resource_type_schema_version is not None:
            pulumi.set(__self__, "resource_type_schema_version", resource_type_schema_version)
        if saml_ho_krequired is not None:
            pulumi.set(__self__, "saml_ho_krequired", saml_ho_krequired)
        if service_instance_identifier is not None:
            pulumi.set(__self__, "service_instance_identifier", service_instance_identifier)
        if shown_on_login_page is not None:
            pulumi.set(__self__, "shown_on_login_page", shown_on_login_page)
        if signature_hash_algorithm is not None:
            pulumi.set(__self__, "signature_hash_algorithm", signature_hash_algorithm)
        if signing_certificate is not None:
            pulumi.set(__self__, "signing_certificate", signing_certificate)
        if succinct_id is not None:
            pulumi.set(__self__, "succinct_id", succinct_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if urnietfparamsscimschemasoracleidcsextensionsocial_identity_provider is not None:
            pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionsocial_identity_provider", urnietfparamsscimschemasoracleidcsextensionsocial_identity_provider)
        if urnietfparamsscimschemasoracleidcsextensionx509identity_provider is not None:
            pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionx509identity_provider", urnietfparamsscimschemasoracleidcsextensionx509identity_provider)
        if user_mapping_method is not None:
            pulumi.set(__self__, "user_mapping_method", user_mapping_method)
        if user_mapping_store_attribute is not None:
            pulumi.set(__self__, "user_mapping_store_attribute", user_mapping_store_attribute)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> pulumi.Input[str]:
        return pulumi.get(self, "idcs_endpoint")

    @idcs_endpoint.setter
    def idcs_endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "idcs_endpoint", value)

    @property
    @pulumi.getter(name="partnerName")
    def partner_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "partner_name")

    @partner_name.setter
    def partner_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "partner_name", value)

    @property
    @pulumi.getter
    def schemas(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "schemas")

    @schemas.setter
    def schemas(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "schemas", value)

    @property
    @pulumi.getter(name="assertionAttribute")
    def assertion_attribute(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assertion_attribute")

    @assertion_attribute.setter
    def assertion_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assertion_attribute", value)

    @property
    @pulumi.getter(name="attributeSets")
    def attribute_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "attribute_sets")

    @attribute_sets.setter
    def attribute_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "attribute_sets", value)

    @property
    @pulumi.getter
    def attributes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "attributes")

    @attributes.setter
    def attributes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attributes", value)

    @property
    @pulumi.getter(name="authnRequestBinding")
    def authn_request_binding(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authn_request_binding")

    @authn_request_binding.setter
    def authn_request_binding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authn_request_binding", value)

    @property
    @pulumi.getter
    def authorization(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authorization")

    @authorization.setter
    def authorization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authorization", value)

    @property
    @pulumi.getter(name="correlationPolicy")
    def correlation_policy(self) -> Optional[pulumi.Input['DomainsIdentityProviderCorrelationPolicyArgs']]:
        return pulumi.get(self, "correlation_policy")

    @correlation_policy.setter
    def correlation_policy(self, value: Optional[pulumi.Input['DomainsIdentityProviderCorrelationPolicyArgs']]):
        pulumi.set(self, "correlation_policy", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="encryptionCertificate")
    def encryption_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "encryption_certificate")

    @encryption_certificate.setter
    def encryption_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encryption_certificate", value)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_id")

    @external_id.setter
    def external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_id", value)

    @property
    @pulumi.getter(name="iconUrl")
    def icon_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "icon_url")

    @icon_url.setter
    def icon_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon_url", value)

    @property
    @pulumi.getter(name="idpSsoUrl")
    def idp_sso_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "idp_sso_url")

    @idp_sso_url.setter
    def idp_sso_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idp_sso_url", value)

    @property
    @pulumi.getter(name="includeSigningCertInSignature")
    def include_signing_cert_in_signature(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_signing_cert_in_signature")

    @include_signing_cert_in_signature.setter
    def include_signing_cert_in_signature(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_signing_cert_in_signature", value)

    @property
    @pulumi.getter(name="jitUserProvAssignedGroups")
    def jit_user_prov_assigned_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DomainsIdentityProviderJitUserProvAssignedGroupArgs']]]]:
        return pulumi.get(self, "jit_user_prov_assigned_groups")

    @jit_user_prov_assigned_groups.setter
    def jit_user_prov_assigned_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DomainsIdentityProviderJitUserProvAssignedGroupArgs']]]]):
        pulumi.set(self, "jit_user_prov_assigned_groups", value)

    @property
    @pulumi.getter(name="jitUserProvAttributeUpdateEnabled")
    def jit_user_prov_attribute_update_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "jit_user_prov_attribute_update_enabled")

    @jit_user_prov_attribute_update_enabled.setter
    def jit_user_prov_attribute_update_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "jit_user_prov_attribute_update_enabled", value)

    @property
    @pulumi.getter(name="jitUserProvAttributes")
    def jit_user_prov_attributes(self) -> Optional[pulumi.Input['DomainsIdentityProviderJitUserProvAttributesArgs']]:
        return pulumi.get(self, "jit_user_prov_attributes")

    @jit_user_prov_attributes.setter
    def jit_user_prov_attributes(self, value: Optional[pulumi.Input['DomainsIdentityProviderJitUserProvAttributesArgs']]):
        pulumi.set(self, "jit_user_prov_attributes", value)

    @property
    @pulumi.getter(name="jitUserProvCreateUserEnabled")
    def jit_user_prov_create_user_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "jit_user_prov_create_user_enabled")

    @jit_user_prov_create_user_enabled.setter
    def jit_user_prov_create_user_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "jit_user_prov_create_user_enabled", value)

    @property
    @pulumi.getter(name="jitUserProvEnabled")
    def jit_user_prov_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "jit_user_prov_enabled")

    @jit_user_prov_enabled.setter
    def jit_user_prov_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "jit_user_prov_enabled", value)

    @property
    @pulumi.getter(name="jitUserProvGroupAssertionAttributeEnabled")
    def jit_user_prov_group_assertion_attribute_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "jit_user_prov_group_assertion_attribute_enabled")

    @jit_user_prov_group_assertion_attribute_enabled.setter
    def jit_user_prov_group_assertion_attribute_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "jit_user_prov_group_assertion_attribute_enabled", value)

    @property
    @pulumi.getter(name="jitUserProvGroupAssignmentMethod")
    def jit_user_prov_group_assignment_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "jit_user_prov_group_assignment_method")

    @jit_user_prov_group_assignment_method.setter
    def jit_user_prov_group_assignment_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "jit_user_prov_group_assignment_method", value)

    @property
    @pulumi.getter(name="jitUserProvGroupMappingMode")
    def jit_user_prov_group_mapping_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "jit_user_prov_group_mapping_mode")

    @jit_user_prov_group_mapping_mode.setter
    def jit_user_prov_group_mapping_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "jit_user_prov_group_mapping_mode", value)

    @property
    @pulumi.getter(name="jitUserProvGroupMappings")
    def jit_user_prov_group_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DomainsIdentityProviderJitUserProvGroupMappingArgs']]]]:
        return pulumi.get(self, "jit_user_prov_group_mappings")

    @jit_user_prov_group_mappings.setter
    def jit_user_prov_group_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DomainsIdentityProviderJitUserProvGroupMappingArgs']]]]):
        pulumi.set(self, "jit_user_prov_group_mappings", value)

    @property
    @pulumi.getter(name="jitUserProvGroupSamlAttributeName")
    def jit_user_prov_group_saml_attribute_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "jit_user_prov_group_saml_attribute_name")

    @jit_user_prov_group_saml_attribute_name.setter
    def jit_user_prov_group_saml_attribute_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "jit_user_prov_group_saml_attribute_name", value)

    @property
    @pulumi.getter(name="jitUserProvGroupStaticListEnabled")
    def jit_user_prov_group_static_list_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "jit_user_prov_group_static_list_enabled")

    @jit_user_prov_group_static_list_enabled.setter
    def jit_user_prov_group_static_list_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "jit_user_prov_group_static_list_enabled", value)

    @property
    @pulumi.getter(name="jitUserProvIgnoreErrorOnAbsentGroups")
    def jit_user_prov_ignore_error_on_absent_groups(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "jit_user_prov_ignore_error_on_absent_groups")

    @jit_user_prov_ignore_error_on_absent_groups.setter
    def jit_user_prov_ignore_error_on_absent_groups(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "jit_user_prov_ignore_error_on_absent_groups", value)

    @property
    @pulumi.getter(name="logoutBinding")
    def logout_binding(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "logout_binding")

    @logout_binding.setter
    def logout_binding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logout_binding", value)

    @property
    @pulumi.getter(name="logoutEnabled")
    def logout_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "logout_enabled")

    @logout_enabled.setter
    def logout_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "logout_enabled", value)

    @property
    @pulumi.getter(name="logoutRequestUrl")
    def logout_request_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "logout_request_url")

    @logout_request_url.setter
    def logout_request_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logout_request_url", value)

    @property
    @pulumi.getter(name="logoutResponseUrl")
    def logout_response_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "logout_response_url")

    @logout_response_url.setter
    def logout_response_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logout_response_url", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="nameIdFormat")
    def name_id_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name_id_format")

    @name_id_format.setter
    def name_id_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name_id_format", value)

    @property
    @pulumi.getter
    def ocid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ocid")

    @ocid.setter
    def ocid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ocid", value)

    @property
    @pulumi.getter(name="partnerProviderId")
    def partner_provider_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "partner_provider_id")

    @partner_provider_id.setter
    def partner_provider_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "partner_provider_id", value)

    @property
    @pulumi.getter(name="requestedAuthenticationContexts")
    def requested_authentication_contexts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "requested_authentication_contexts")

    @requested_authentication_contexts.setter
    def requested_authentication_contexts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "requested_authentication_contexts", value)

    @property
    @pulumi.getter(name="requireForceAuthn")
    def require_force_authn(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "require_force_authn")

    @require_force_authn.setter
    def require_force_authn(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "require_force_authn", value)

    @property
    @pulumi.getter(name="requiresEncryptedAssertion")
    def requires_encrypted_assertion(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "requires_encrypted_assertion")

    @requires_encrypted_assertion.setter
    def requires_encrypted_assertion(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "requires_encrypted_assertion", value)

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_type_schema_version")

    @resource_type_schema_version.setter
    def resource_type_schema_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_type_schema_version", value)

    @property
    @pulumi.getter(name="samlHoKrequired")
    def saml_ho_krequired(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "saml_ho_krequired")

    @saml_ho_krequired.setter
    def saml_ho_krequired(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "saml_ho_krequired", value)

    @property
    @pulumi.getter(name="serviceInstanceIdentifier")
    def service_instance_identifier(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_instance_identifier")

    @service_instance_identifier.setter
    def service_instance_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_instance_identifier", value)

    @property
    @pulumi.getter(name="shownOnLoginPage")
    def shown_on_login_page(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "shown_on_login_page")

    @shown_on_login_page.setter
    def shown_on_login_page(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "shown_on_login_page", value)

    @property
    @pulumi.getter(name="signatureHashAlgorithm")
    def signature_hash_algorithm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "signature_hash_algorithm")

    @signature_hash_algorithm.setter
    def signature_hash_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "signature_hash_algorithm", value)

    @property
    @pulumi.getter(name="signingCertificate")
    def signing_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "signing_certificate")

    @signing_certificate.setter
    def signing_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "signing_certificate", value)

    @property
    @pulumi.getter(name="succinctId")
    def succinct_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "succinct_id")

    @succinct_id.setter
    def succinct_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "succinct_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DomainsIdentityProviderTagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DomainsIdentityProviderTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider")
    def urnietfparamsscimschemasoracleidcsextensionsocial_identity_provider(self) -> Optional[pulumi.Input['DomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProviderArgs']]:
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionsocial_identity_provider")

    @urnietfparamsscimschemasoracleidcsextensionsocial_identity_provider.setter
    def urnietfparamsscimschemasoracleidcsextensionsocial_identity_provider(self, value: Optional[pulumi.Input['DomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProviderArgs']]):
        pulumi.set(self, "urnietfparamsscimschemasoracleidcsextensionsocial_identity_provider", value)

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionx509identityProvider")
    def urnietfparamsscimschemasoracleidcsextensionx509identity_provider(self) -> Optional[pulumi.Input['DomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionx509identityProviderArgs']]:
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionx509identity_provider")

    @urnietfparamsscimschemasoracleidcsextensionx509identity_provider.setter
    def urnietfparamsscimschemasoracleidcsextensionx509identity_provider(self, value: Optional[pulumi.Input['DomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionx509identityProviderArgs']]):
        pulumi.set(self, "urnietfparamsscimschemasoracleidcsextensionx509identity_provider", value)

    @property
    @pulumi.getter(name="userMappingMethod")
    def user_mapping_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_mapping_method")

    @user_mapping_method.setter
    def user_mapping_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_mapping_method", value)

    @property
    @pulumi.getter(name="userMappingStoreAttribute")
    def user_mapping_store_attribute(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_mapping_store_attribute")

    @user_mapping_store_attribute.setter
    def user_mapping_store_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_mapping_store_attribute", value)


@pulumi.input_type
class _DomainsIdentityProviderState:
    def __init__(__self__, *,
                 assertion_attribute: Optional[pulumi.Input[str]] = None,
                 attribute_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 attributes: Optional[pulumi.Input[str]] = None,
                 authn_request_binding: Optional[pulumi.Input[str]] = None,
                 authorization: Optional[pulumi.Input[str]] = None,
                 compartment_ocid: Optional[pulumi.Input[str]] = None,
                 correlation_policy: Optional[pulumi.Input['DomainsIdentityProviderCorrelationPolicyArgs']] = None,
                 delete_in_progress: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 domain_ocid: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 encryption_certificate: Optional[pulumi.Input[str]] = None,
                 external_id: Optional[pulumi.Input[str]] = None,
                 icon_url: Optional[pulumi.Input[str]] = None,
                 idcs_created_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DomainsIdentityProviderIdcsCreatedByArgs']]]] = None,
                 idcs_endpoint: Optional[pulumi.Input[str]] = None,
                 idcs_last_modified_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DomainsIdentityProviderIdcsLastModifiedByArgs']]]] = None,
                 idcs_last_upgraded_in_release: Optional[pulumi.Input[str]] = None,
                 idcs_prevented_operations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 idp_sso_url: Optional[pulumi.Input[str]] = None,
                 include_signing_cert_in_signature: Optional[pulumi.Input[bool]] = None,
                 jit_user_prov_assigned_groups: Optional[pulumi.Input[Sequence[pulumi.Input['DomainsIdentityProviderJitUserProvAssignedGroupArgs']]]] = None,
                 jit_user_prov_attribute_update_enabled: Optional[pulumi.Input[bool]] = None,
                 jit_user_prov_attributes: Optional[pulumi.Input['DomainsIdentityProviderJitUserProvAttributesArgs']] = None,
                 jit_user_prov_create_user_enabled: Optional[pulumi.Input[bool]] = None,
                 jit_user_prov_enabled: Optional[pulumi.Input[bool]] = None,
                 jit_user_prov_group_assertion_attribute_enabled: Optional[pulumi.Input[bool]] = None,
                 jit_user_prov_group_assignment_method: Optional[pulumi.Input[str]] = None,
                 jit_user_prov_group_mapping_mode: Optional[pulumi.Input[str]] = None,
                 jit_user_prov_group_mappings: Optional[pulumi.Input[Sequence[pulumi.Input['DomainsIdentityProviderJitUserProvGroupMappingArgs']]]] = None,
                 jit_user_prov_group_saml_attribute_name: Optional[pulumi.Input[str]] = None,
                 jit_user_prov_group_static_list_enabled: Optional[pulumi.Input[bool]] = None,
                 jit_user_prov_ignore_error_on_absent_groups: Optional[pulumi.Input[bool]] = None,
                 last_notification_sent_time: Optional[pulumi.Input[str]] = None,
                 logout_binding: Optional[pulumi.Input[str]] = None,
                 logout_enabled: Optional[pulumi.Input[bool]] = None,
                 logout_request_url: Optional[pulumi.Input[str]] = None,
                 logout_response_url: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[str]] = None,
                 metas: Optional[pulumi.Input[Sequence[pulumi.Input['DomainsIdentityProviderMetaArgs']]]] = None,
                 name_id_format: Optional[pulumi.Input[str]] = None,
                 ocid: Optional[pulumi.Input[str]] = None,
                 partner_name: Optional[pulumi.Input[str]] = None,
                 partner_provider_id: Optional[pulumi.Input[str]] = None,
                 requested_authentication_contexts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 require_force_authn: Optional[pulumi.Input[bool]] = None,
                 requires_encrypted_assertion: Optional[pulumi.Input[bool]] = None,
                 resource_type_schema_version: Optional[pulumi.Input[str]] = None,
                 saml_ho_krequired: Optional[pulumi.Input[bool]] = None,
                 schemas: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 service_instance_identifier: Optional[pulumi.Input[str]] = None,
                 shown_on_login_page: Optional[pulumi.Input[bool]] = None,
                 signature_hash_algorithm: Optional[pulumi.Input[str]] = None,
                 signing_certificate: Optional[pulumi.Input[str]] = None,
                 succinct_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['DomainsIdentityProviderTagArgs']]]] = None,
                 tenancy_ocid: Optional[pulumi.Input[str]] = None,
                 tenant_provider_id: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 urnietfparamsscimschemasoracleidcsextensionsocial_identity_provider: Optional[pulumi.Input['DomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProviderArgs']] = None,
                 urnietfparamsscimschemasoracleidcsextensionx509identity_provider: Optional[pulumi.Input['DomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionx509identityProviderArgs']] = None,
                 user_mapping_method: Optional[pulumi.Input[str]] = None,
                 user_mapping_store_attribute: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering DomainsIdentityProvider resources.
        """
        if assertion_attribute is not None:
            pulumi.set(__self__, "assertion_attribute", assertion_attribute)
        if attribute_sets is not None:
            pulumi.set(__self__, "attribute_sets", attribute_sets)
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)
        if authn_request_binding is not None:
            pulumi.set(__self__, "authn_request_binding", authn_request_binding)
        if authorization is not None:
            pulumi.set(__self__, "authorization", authorization)
        if compartment_ocid is not None:
            pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        if correlation_policy is not None:
            pulumi.set(__self__, "correlation_policy", correlation_policy)
        if delete_in_progress is not None:
            pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain_ocid is not None:
            pulumi.set(__self__, "domain_ocid", domain_ocid)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if encryption_certificate is not None:
            pulumi.set(__self__, "encryption_certificate", encryption_certificate)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if icon_url is not None:
            pulumi.set(__self__, "icon_url", icon_url)
        if idcs_created_bies is not None:
            pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        if idcs_endpoint is not None:
            pulumi.set(__self__, "idcs_endpoint", idcs_endpoint)
        if idcs_last_modified_bies is not None:
            pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        if idcs_last_upgraded_in_release is not None:
            pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        if idcs_prevented_operations is not None:
            pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        if idp_sso_url is not None:
            pulumi.set(__self__, "idp_sso_url", idp_sso_url)
        if include_signing_cert_in_signature is not None:
            pulumi.set(__self__, "include_signing_cert_in_signature", include_signing_cert_in_signature)
        if jit_user_prov_assigned_groups is not None:
            pulumi.set(__self__, "jit_user_prov_assigned_groups", jit_user_prov_assigned_groups)
        if jit_user_prov_attribute_update_enabled is not None:
            pulumi.set(__self__, "jit_user_prov_attribute_update_enabled", jit_user_prov_attribute_update_enabled)
        if jit_user_prov_attributes is not None:
            pulumi.set(__self__, "jit_user_prov_attributes", jit_user_prov_attributes)
        if jit_user_prov_create_user_enabled is not None:
            pulumi.set(__self__, "jit_user_prov_create_user_enabled", jit_user_prov_create_user_enabled)
        if jit_user_prov_enabled is not None:
            pulumi.set(__self__, "jit_user_prov_enabled", jit_user_prov_enabled)
        if jit_user_prov_group_assertion_attribute_enabled is not None:
            pulumi.set(__self__, "jit_user_prov_group_assertion_attribute_enabled", jit_user_prov_group_assertion_attribute_enabled)
        if jit_user_prov_group_assignment_method is not None:
            pulumi.set(__self__, "jit_user_prov_group_assignment_method", jit_user_prov_group_assignment_method)
        if jit_user_prov_group_mapping_mode is not None:
            pulumi.set(__self__, "jit_user_prov_group_mapping_mode", jit_user_prov_group_mapping_mode)
        if jit_user_prov_group_mappings is not None:
            pulumi.set(__self__, "jit_user_prov_group_mappings", jit_user_prov_group_mappings)
        if jit_user_prov_group_saml_attribute_name is not None:
            pulumi.set(__self__, "jit_user_prov_group_saml_attribute_name", jit_user_prov_group_saml_attribute_name)
        if jit_user_prov_group_static_list_enabled is not None:
            pulumi.set(__self__, "jit_user_prov_group_static_list_enabled", jit_user_prov_group_static_list_enabled)
        if jit_user_prov_ignore_error_on_absent_groups is not None:
            pulumi.set(__self__, "jit_user_prov_ignore_error_on_absent_groups", jit_user_prov_ignore_error_on_absent_groups)
        if last_notification_sent_time is not None:
            pulumi.set(__self__, "last_notification_sent_time", last_notification_sent_time)
        if logout_binding is not None:
            pulumi.set(__self__, "logout_binding", logout_binding)
        if logout_enabled is not None:
            pulumi.set(__self__, "logout_enabled", logout_enabled)
        if logout_request_url is not None:
            pulumi.set(__self__, "logout_request_url", logout_request_url)
        if logout_response_url is not None:
            pulumi.set(__self__, "logout_response_url", logout_response_url)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if metas is not None:
            pulumi.set(__self__, "metas", metas)
        if name_id_format is not None:
            pulumi.set(__self__, "name_id_format", name_id_format)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if partner_name is not None:
            pulumi.set(__self__, "partner_name", partner_name)
        if partner_provider_id is not None:
            pulumi.set(__self__, "partner_provider_id", partner_provider_id)
        if requested_authentication_contexts is not None:
            pulumi.set(__self__, "requested_authentication_contexts", requested_authentication_contexts)
        if require_force_authn is not None:
            pulumi.set(__self__, "require_force_authn", require_force_authn)
        if requires_encrypted_assertion is not None:
            pulumi.set(__self__, "requires_encrypted_assertion", requires_encrypted_assertion)
        if resource_type_schema_version is not None:
            pulumi.set(__self__, "resource_type_schema_version", resource_type_schema_version)
        if saml_ho_krequired is not None:
            pulumi.set(__self__, "saml_ho_krequired", saml_ho_krequired)
        if schemas is not None:
            pulumi.set(__self__, "schemas", schemas)
        if service_instance_identifier is not None:
            pulumi.set(__self__, "service_instance_identifier", service_instance_identifier)
        if shown_on_login_page is not None:
            pulumi.set(__self__, "shown_on_login_page", shown_on_login_page)
        if signature_hash_algorithm is not None:
            pulumi.set(__self__, "signature_hash_algorithm", signature_hash_algorithm)
        if signing_certificate is not None:
            pulumi.set(__self__, "signing_certificate", signing_certificate)
        if succinct_id is not None:
            pulumi.set(__self__, "succinct_id", succinct_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tenancy_ocid is not None:
            pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)
        if tenant_provider_id is not None:
            pulumi.set(__self__, "tenant_provider_id", tenant_provider_id)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if urnietfparamsscimschemasoracleidcsextensionsocial_identity_provider is not None:
            pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionsocial_identity_provider", urnietfparamsscimschemasoracleidcsextensionsocial_identity_provider)
        if urnietfparamsscimschemasoracleidcsextensionx509identity_provider is not None:
            pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionx509identity_provider", urnietfparamsscimschemasoracleidcsextensionx509identity_provider)
        if user_mapping_method is not None:
            pulumi.set(__self__, "user_mapping_method", user_mapping_method)
        if user_mapping_store_attribute is not None:
            pulumi.set(__self__, "user_mapping_store_attribute", user_mapping_store_attribute)

    @property
    @pulumi.getter(name="assertionAttribute")
    def assertion_attribute(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assertion_attribute")

    @assertion_attribute.setter
    def assertion_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assertion_attribute", value)

    @property
    @pulumi.getter(name="attributeSets")
    def attribute_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "attribute_sets")

    @attribute_sets.setter
    def attribute_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "attribute_sets", value)

    @property
    @pulumi.getter
    def attributes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "attributes")

    @attributes.setter
    def attributes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attributes", value)

    @property
    @pulumi.getter(name="authnRequestBinding")
    def authn_request_binding(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authn_request_binding")

    @authn_request_binding.setter
    def authn_request_binding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authn_request_binding", value)

    @property
    @pulumi.getter
    def authorization(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authorization")

    @authorization.setter
    def authorization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authorization", value)

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compartment_ocid")

    @compartment_ocid.setter
    def compartment_ocid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compartment_ocid", value)

    @property
    @pulumi.getter(name="correlationPolicy")
    def correlation_policy(self) -> Optional[pulumi.Input['DomainsIdentityProviderCorrelationPolicyArgs']]:
        return pulumi.get(self, "correlation_policy")

    @correlation_policy.setter
    def correlation_policy(self, value: Optional[pulumi.Input['DomainsIdentityProviderCorrelationPolicyArgs']]):
        pulumi.set(self, "correlation_policy", value)

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "delete_in_progress")

    @delete_in_progress.setter
    def delete_in_progress(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_in_progress", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "domain_ocid")

    @domain_ocid.setter
    def domain_ocid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain_ocid", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="encryptionCertificate")
    def encryption_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "encryption_certificate")

    @encryption_certificate.setter
    def encryption_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encryption_certificate", value)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_id")

    @external_id.setter
    def external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_id", value)

    @property
    @pulumi.getter(name="iconUrl")
    def icon_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "icon_url")

    @icon_url.setter
    def icon_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon_url", value)

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DomainsIdentityProviderIdcsCreatedByArgs']]]]:
        return pulumi.get(self, "idcs_created_bies")

    @idcs_created_bies.setter
    def idcs_created_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DomainsIdentityProviderIdcsCreatedByArgs']]]]):
        pulumi.set(self, "idcs_created_bies", value)

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "idcs_endpoint")

    @idcs_endpoint.setter
    def idcs_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idcs_endpoint", value)

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DomainsIdentityProviderIdcsLastModifiedByArgs']]]]:
        return pulumi.get(self, "idcs_last_modified_bies")

    @idcs_last_modified_bies.setter
    def idcs_last_modified_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DomainsIdentityProviderIdcsLastModifiedByArgs']]]]):
        pulumi.set(self, "idcs_last_modified_bies", value)

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @idcs_last_upgraded_in_release.setter
    def idcs_last_upgraded_in_release(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idcs_last_upgraded_in_release", value)

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "idcs_prevented_operations")

    @idcs_prevented_operations.setter
    def idcs_prevented_operations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "idcs_prevented_operations", value)

    @property
    @pulumi.getter(name="idpSsoUrl")
    def idp_sso_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "idp_sso_url")

    @idp_sso_url.setter
    def idp_sso_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idp_sso_url", value)

    @property
    @pulumi.getter(name="includeSigningCertInSignature")
    def include_signing_cert_in_signature(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_signing_cert_in_signature")

    @include_signing_cert_in_signature.setter
    def include_signing_cert_in_signature(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_signing_cert_in_signature", value)

    @property
    @pulumi.getter(name="jitUserProvAssignedGroups")
    def jit_user_prov_assigned_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DomainsIdentityProviderJitUserProvAssignedGroupArgs']]]]:
        return pulumi.get(self, "jit_user_prov_assigned_groups")

    @jit_user_prov_assigned_groups.setter
    def jit_user_prov_assigned_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DomainsIdentityProviderJitUserProvAssignedGroupArgs']]]]):
        pulumi.set(self, "jit_user_prov_assigned_groups", value)

    @property
    @pulumi.getter(name="jitUserProvAttributeUpdateEnabled")
    def jit_user_prov_attribute_update_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "jit_user_prov_attribute_update_enabled")

    @jit_user_prov_attribute_update_enabled.setter
    def jit_user_prov_attribute_update_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "jit_user_prov_attribute_update_enabled", value)

    @property
    @pulumi.getter(name="jitUserProvAttributes")
    def jit_user_prov_attributes(self) -> Optional[pulumi.Input['DomainsIdentityProviderJitUserProvAttributesArgs']]:
        return pulumi.get(self, "jit_user_prov_attributes")

    @jit_user_prov_attributes.setter
    def jit_user_prov_attributes(self, value: Optional[pulumi.Input['DomainsIdentityProviderJitUserProvAttributesArgs']]):
        pulumi.set(self, "jit_user_prov_attributes", value)

    @property
    @pulumi.getter(name="jitUserProvCreateUserEnabled")
    def jit_user_prov_create_user_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "jit_user_prov_create_user_enabled")

    @jit_user_prov_create_user_enabled.setter
    def jit_user_prov_create_user_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "jit_user_prov_create_user_enabled", value)

    @property
    @pulumi.getter(name="jitUserProvEnabled")
    def jit_user_prov_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "jit_user_prov_enabled")

    @jit_user_prov_enabled.setter
    def jit_user_prov_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "jit_user_prov_enabled", value)

    @property
    @pulumi.getter(name="jitUserProvGroupAssertionAttributeEnabled")
    def jit_user_prov_group_assertion_attribute_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "jit_user_prov_group_assertion_attribute_enabled")

    @jit_user_prov_group_assertion_attribute_enabled.setter
    def jit_user_prov_group_assertion_attribute_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "jit_user_prov_group_assertion_attribute_enabled", value)

    @property
    @pulumi.getter(name="jitUserProvGroupAssignmentMethod")
    def jit_user_prov_group_assignment_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "jit_user_prov_group_assignment_method")

    @jit_user_prov_group_assignment_method.setter
    def jit_user_prov_group_assignment_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "jit_user_prov_group_assignment_method", value)

    @property
    @pulumi.getter(name="jitUserProvGroupMappingMode")
    def jit_user_prov_group_mapping_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "jit_user_prov_group_mapping_mode")

    @jit_user_prov_group_mapping_mode.setter
    def jit_user_prov_group_mapping_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "jit_user_prov_group_mapping_mode", value)

    @property
    @pulumi.getter(name="jitUserProvGroupMappings")
    def jit_user_prov_group_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DomainsIdentityProviderJitUserProvGroupMappingArgs']]]]:
        return pulumi.get(self, "jit_user_prov_group_mappings")

    @jit_user_prov_group_mappings.setter
    def jit_user_prov_group_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DomainsIdentityProviderJitUserProvGroupMappingArgs']]]]):
        pulumi.set(self, "jit_user_prov_group_mappings", value)

    @property
    @pulumi.getter(name="jitUserProvGroupSamlAttributeName")
    def jit_user_prov_group_saml_attribute_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "jit_user_prov_group_saml_attribute_name")

    @jit_user_prov_group_saml_attribute_name.setter
    def jit_user_prov_group_saml_attribute_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "jit_user_prov_group_saml_attribute_name", value)

    @property
    @pulumi.getter(name="jitUserProvGroupStaticListEnabled")
    def jit_user_prov_group_static_list_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "jit_user_prov_group_static_list_enabled")

    @jit_user_prov_group_static_list_enabled.setter
    def jit_user_prov_group_static_list_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "jit_user_prov_group_static_list_enabled", value)

    @property
    @pulumi.getter(name="jitUserProvIgnoreErrorOnAbsentGroups")
    def jit_user_prov_ignore_error_on_absent_groups(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "jit_user_prov_ignore_error_on_absent_groups")

    @jit_user_prov_ignore_error_on_absent_groups.setter
    def jit_user_prov_ignore_error_on_absent_groups(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "jit_user_prov_ignore_error_on_absent_groups", value)

    @property
    @pulumi.getter(name="lastNotificationSentTime")
    def last_notification_sent_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_notification_sent_time")

    @last_notification_sent_time.setter
    def last_notification_sent_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_notification_sent_time", value)

    @property
    @pulumi.getter(name="logoutBinding")
    def logout_binding(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "logout_binding")

    @logout_binding.setter
    def logout_binding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logout_binding", value)

    @property
    @pulumi.getter(name="logoutEnabled")
    def logout_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "logout_enabled")

    @logout_enabled.setter
    def logout_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "logout_enabled", value)

    @property
    @pulumi.getter(name="logoutRequestUrl")
    def logout_request_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "logout_request_url")

    @logout_request_url.setter
    def logout_request_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logout_request_url", value)

    @property
    @pulumi.getter(name="logoutResponseUrl")
    def logout_response_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "logout_response_url")

    @logout_response_url.setter
    def logout_response_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logout_response_url", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def metas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DomainsIdentityProviderMetaArgs']]]]:
        return pulumi.get(self, "metas")

    @metas.setter
    def metas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DomainsIdentityProviderMetaArgs']]]]):
        pulumi.set(self, "metas", value)

    @property
    @pulumi.getter(name="nameIdFormat")
    def name_id_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name_id_format")

    @name_id_format.setter
    def name_id_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name_id_format", value)

    @property
    @pulumi.getter
    def ocid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ocid")

    @ocid.setter
    def ocid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ocid", value)

    @property
    @pulumi.getter(name="partnerName")
    def partner_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "partner_name")

    @partner_name.setter
    def partner_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "partner_name", value)

    @property
    @pulumi.getter(name="partnerProviderId")
    def partner_provider_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "partner_provider_id")

    @partner_provider_id.setter
    def partner_provider_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "partner_provider_id", value)

    @property
    @pulumi.getter(name="requestedAuthenticationContexts")
    def requested_authentication_contexts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "requested_authentication_contexts")

    @requested_authentication_contexts.setter
    def requested_authentication_contexts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "requested_authentication_contexts", value)

    @property
    @pulumi.getter(name="requireForceAuthn")
    def require_force_authn(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "require_force_authn")

    @require_force_authn.setter
    def require_force_authn(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "require_force_authn", value)

    @property
    @pulumi.getter(name="requiresEncryptedAssertion")
    def requires_encrypted_assertion(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "requires_encrypted_assertion")

    @requires_encrypted_assertion.setter
    def requires_encrypted_assertion(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "requires_encrypted_assertion", value)

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_type_schema_version")

    @resource_type_schema_version.setter
    def resource_type_schema_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_type_schema_version", value)

    @property
    @pulumi.getter(name="samlHoKrequired")
    def saml_ho_krequired(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "saml_ho_krequired")

    @saml_ho_krequired.setter
    def saml_ho_krequired(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "saml_ho_krequired", value)

    @property
    @pulumi.getter
    def schemas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "schemas")

    @schemas.setter
    def schemas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "schemas", value)

    @property
    @pulumi.getter(name="serviceInstanceIdentifier")
    def service_instance_identifier(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_instance_identifier")

    @service_instance_identifier.setter
    def service_instance_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_instance_identifier", value)

    @property
    @pulumi.getter(name="shownOnLoginPage")
    def shown_on_login_page(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "shown_on_login_page")

    @shown_on_login_page.setter
    def shown_on_login_page(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "shown_on_login_page", value)

    @property
    @pulumi.getter(name="signatureHashAlgorithm")
    def signature_hash_algorithm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "signature_hash_algorithm")

    @signature_hash_algorithm.setter
    def signature_hash_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "signature_hash_algorithm", value)

    @property
    @pulumi.getter(name="signingCertificate")
    def signing_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "signing_certificate")

    @signing_certificate.setter
    def signing_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "signing_certificate", value)

    @property
    @pulumi.getter(name="succinctId")
    def succinct_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "succinct_id")

    @succinct_id.setter
    def succinct_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "succinct_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DomainsIdentityProviderTagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DomainsIdentityProviderTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tenancy_ocid")

    @tenancy_ocid.setter
    def tenancy_ocid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenancy_ocid", value)

    @property
    @pulumi.getter(name="tenantProviderId")
    def tenant_provider_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tenant_provider_id")

    @tenant_provider_id.setter
    def tenant_provider_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_provider_id", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider")
    def urnietfparamsscimschemasoracleidcsextensionsocial_identity_provider(self) -> Optional[pulumi.Input['DomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProviderArgs']]:
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionsocial_identity_provider")

    @urnietfparamsscimschemasoracleidcsextensionsocial_identity_provider.setter
    def urnietfparamsscimschemasoracleidcsextensionsocial_identity_provider(self, value: Optional[pulumi.Input['DomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProviderArgs']]):
        pulumi.set(self, "urnietfparamsscimschemasoracleidcsextensionsocial_identity_provider", value)

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionx509identityProvider")
    def urnietfparamsscimschemasoracleidcsextensionx509identity_provider(self) -> Optional[pulumi.Input['DomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionx509identityProviderArgs']]:
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionx509identity_provider")

    @urnietfparamsscimschemasoracleidcsextensionx509identity_provider.setter
    def urnietfparamsscimschemasoracleidcsextensionx509identity_provider(self, value: Optional[pulumi.Input['DomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionx509identityProviderArgs']]):
        pulumi.set(self, "urnietfparamsscimschemasoracleidcsextensionx509identity_provider", value)

    @property
    @pulumi.getter(name="userMappingMethod")
    def user_mapping_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_mapping_method")

    @user_mapping_method.setter
    def user_mapping_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_mapping_method", value)

    @property
    @pulumi.getter(name="userMappingStoreAttribute")
    def user_mapping_store_attribute(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_mapping_store_attribute")

    @user_mapping_store_attribute.setter
    def user_mapping_store_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_mapping_store_attribute", value)


class DomainsIdentityProvider(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 assertion_attribute: Optional[pulumi.Input[str]] = None,
                 attribute_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 attributes: Optional[pulumi.Input[str]] = None,
                 authn_request_binding: Optional[pulumi.Input[str]] = None,
                 authorization: Optional[pulumi.Input[str]] = None,
                 correlation_policy: Optional[pulumi.Input[pulumi.InputType['DomainsIdentityProviderCorrelationPolicyArgs']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 encryption_certificate: Optional[pulumi.Input[str]] = None,
                 external_id: Optional[pulumi.Input[str]] = None,
                 icon_url: Optional[pulumi.Input[str]] = None,
                 idcs_endpoint: Optional[pulumi.Input[str]] = None,
                 idp_sso_url: Optional[pulumi.Input[str]] = None,
                 include_signing_cert_in_signature: Optional[pulumi.Input[bool]] = None,
                 jit_user_prov_assigned_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DomainsIdentityProviderJitUserProvAssignedGroupArgs']]]]] = None,
                 jit_user_prov_attribute_update_enabled: Optional[pulumi.Input[bool]] = None,
                 jit_user_prov_attributes: Optional[pulumi.Input[pulumi.InputType['DomainsIdentityProviderJitUserProvAttributesArgs']]] = None,
                 jit_user_prov_create_user_enabled: Optional[pulumi.Input[bool]] = None,
                 jit_user_prov_enabled: Optional[pulumi.Input[bool]] = None,
                 jit_user_prov_group_assertion_attribute_enabled: Optional[pulumi.Input[bool]] = None,
                 jit_user_prov_group_assignment_method: Optional[pulumi.Input[str]] = None,
                 jit_user_prov_group_mapping_mode: Optional[pulumi.Input[str]] = None,
                 jit_user_prov_group_mappings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DomainsIdentityProviderJitUserProvGroupMappingArgs']]]]] = None,
                 jit_user_prov_group_saml_attribute_name: Optional[pulumi.Input[str]] = None,
                 jit_user_prov_group_static_list_enabled: Optional[pulumi.Input[bool]] = None,
                 jit_user_prov_ignore_error_on_absent_groups: Optional[pulumi.Input[bool]] = None,
                 logout_binding: Optional[pulumi.Input[str]] = None,
                 logout_enabled: Optional[pulumi.Input[bool]] = None,
                 logout_request_url: Optional[pulumi.Input[str]] = None,
                 logout_response_url: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[str]] = None,
                 name_id_format: Optional[pulumi.Input[str]] = None,
                 ocid: Optional[pulumi.Input[str]] = None,
                 partner_name: Optional[pulumi.Input[str]] = None,
                 partner_provider_id: Optional[pulumi.Input[str]] = None,
                 requested_authentication_contexts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 require_force_authn: Optional[pulumi.Input[bool]] = None,
                 requires_encrypted_assertion: Optional[pulumi.Input[bool]] = None,
                 resource_type_schema_version: Optional[pulumi.Input[str]] = None,
                 saml_ho_krequired: Optional[pulumi.Input[bool]] = None,
                 schemas: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 service_instance_identifier: Optional[pulumi.Input[str]] = None,
                 shown_on_login_page: Optional[pulumi.Input[bool]] = None,
                 signature_hash_algorithm: Optional[pulumi.Input[str]] = None,
                 signing_certificate: Optional[pulumi.Input[str]] = None,
                 succinct_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DomainsIdentityProviderTagArgs']]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 urnietfparamsscimschemasoracleidcsextensionsocial_identity_provider: Optional[pulumi.Input[pulumi.InputType['DomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProviderArgs']]] = None,
                 urnietfparamsscimschemasoracleidcsextensionx509identity_provider: Optional[pulumi.Input[pulumi.InputType['DomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionx509identityProviderArgs']]] = None,
                 user_mapping_method: Optional[pulumi.Input[str]] = None,
                 user_mapping_store_attribute: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a DomainsIdentityProvider resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DomainsIdentityProviderArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a DomainsIdentityProvider resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param DomainsIdentityProviderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DomainsIdentityProviderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 assertion_attribute: Optional[pulumi.Input[str]] = None,
                 attribute_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 attributes: Optional[pulumi.Input[str]] = None,
                 authn_request_binding: Optional[pulumi.Input[str]] = None,
                 authorization: Optional[pulumi.Input[str]] = None,
                 correlation_policy: Optional[pulumi.Input[pulumi.InputType['DomainsIdentityProviderCorrelationPolicyArgs']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 encryption_certificate: Optional[pulumi.Input[str]] = None,
                 external_id: Optional[pulumi.Input[str]] = None,
                 icon_url: Optional[pulumi.Input[str]] = None,
                 idcs_endpoint: Optional[pulumi.Input[str]] = None,
                 idp_sso_url: Optional[pulumi.Input[str]] = None,
                 include_signing_cert_in_signature: Optional[pulumi.Input[bool]] = None,
                 jit_user_prov_assigned_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DomainsIdentityProviderJitUserProvAssignedGroupArgs']]]]] = None,
                 jit_user_prov_attribute_update_enabled: Optional[pulumi.Input[bool]] = None,
                 jit_user_prov_attributes: Optional[pulumi.Input[pulumi.InputType['DomainsIdentityProviderJitUserProvAttributesArgs']]] = None,
                 jit_user_prov_create_user_enabled: Optional[pulumi.Input[bool]] = None,
                 jit_user_prov_enabled: Optional[pulumi.Input[bool]] = None,
                 jit_user_prov_group_assertion_attribute_enabled: Optional[pulumi.Input[bool]] = None,
                 jit_user_prov_group_assignment_method: Optional[pulumi.Input[str]] = None,
                 jit_user_prov_group_mapping_mode: Optional[pulumi.Input[str]] = None,
                 jit_user_prov_group_mappings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DomainsIdentityProviderJitUserProvGroupMappingArgs']]]]] = None,
                 jit_user_prov_group_saml_attribute_name: Optional[pulumi.Input[str]] = None,
                 jit_user_prov_group_static_list_enabled: Optional[pulumi.Input[bool]] = None,
                 jit_user_prov_ignore_error_on_absent_groups: Optional[pulumi.Input[bool]] = None,
                 logout_binding: Optional[pulumi.Input[str]] = None,
                 logout_enabled: Optional[pulumi.Input[bool]] = None,
                 logout_request_url: Optional[pulumi.Input[str]] = None,
                 logout_response_url: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[str]] = None,
                 name_id_format: Optional[pulumi.Input[str]] = None,
                 ocid: Optional[pulumi.Input[str]] = None,
                 partner_name: Optional[pulumi.Input[str]] = None,
                 partner_provider_id: Optional[pulumi.Input[str]] = None,
                 requested_authentication_contexts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 require_force_authn: Optional[pulumi.Input[bool]] = None,
                 requires_encrypted_assertion: Optional[pulumi.Input[bool]] = None,
                 resource_type_schema_version: Optional[pulumi.Input[str]] = None,
                 saml_ho_krequired: Optional[pulumi.Input[bool]] = None,
                 schemas: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 service_instance_identifier: Optional[pulumi.Input[str]] = None,
                 shown_on_login_page: Optional[pulumi.Input[bool]] = None,
                 signature_hash_algorithm: Optional[pulumi.Input[str]] = None,
                 signing_certificate: Optional[pulumi.Input[str]] = None,
                 succinct_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DomainsIdentityProviderTagArgs']]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 urnietfparamsscimschemasoracleidcsextensionsocial_identity_provider: Optional[pulumi.Input[pulumi.InputType['DomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProviderArgs']]] = None,
                 urnietfparamsscimschemasoracleidcsextensionx509identity_provider: Optional[pulumi.Input[pulumi.InputType['DomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionx509identityProviderArgs']]] = None,
                 user_mapping_method: Optional[pulumi.Input[str]] = None,
                 user_mapping_store_attribute: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DomainsIdentityProviderArgs.__new__(DomainsIdentityProviderArgs)

            __props__.__dict__["assertion_attribute"] = assertion_attribute
            __props__.__dict__["attribute_sets"] = attribute_sets
            __props__.__dict__["attributes"] = attributes
            __props__.__dict__["authn_request_binding"] = authn_request_binding
            __props__.__dict__["authorization"] = authorization
            __props__.__dict__["correlation_policy"] = correlation_policy
            __props__.__dict__["description"] = description
            if enabled is None and not opts.urn:
                raise TypeError("Missing required property 'enabled'")
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["encryption_certificate"] = encryption_certificate
            __props__.__dict__["external_id"] = external_id
            __props__.__dict__["icon_url"] = icon_url
            if idcs_endpoint is None and not opts.urn:
                raise TypeError("Missing required property 'idcs_endpoint'")
            __props__.__dict__["idcs_endpoint"] = idcs_endpoint
            __props__.__dict__["idp_sso_url"] = idp_sso_url
            __props__.__dict__["include_signing_cert_in_signature"] = include_signing_cert_in_signature
            __props__.__dict__["jit_user_prov_assigned_groups"] = jit_user_prov_assigned_groups
            __props__.__dict__["jit_user_prov_attribute_update_enabled"] = jit_user_prov_attribute_update_enabled
            __props__.__dict__["jit_user_prov_attributes"] = jit_user_prov_attributes
            __props__.__dict__["jit_user_prov_create_user_enabled"] = jit_user_prov_create_user_enabled
            __props__.__dict__["jit_user_prov_enabled"] = jit_user_prov_enabled
            __props__.__dict__["jit_user_prov_group_assertion_attribute_enabled"] = jit_user_prov_group_assertion_attribute_enabled
            __props__.__dict__["jit_user_prov_group_assignment_method"] = jit_user_prov_group_assignment_method
            __props__.__dict__["jit_user_prov_group_mapping_mode"] = jit_user_prov_group_mapping_mode
            __props__.__dict__["jit_user_prov_group_mappings"] = jit_user_prov_group_mappings
            __props__.__dict__["jit_user_prov_group_saml_attribute_name"] = jit_user_prov_group_saml_attribute_name
            __props__.__dict__["jit_user_prov_group_static_list_enabled"] = jit_user_prov_group_static_list_enabled
            __props__.__dict__["jit_user_prov_ignore_error_on_absent_groups"] = jit_user_prov_ignore_error_on_absent_groups
            __props__.__dict__["logout_binding"] = logout_binding
            __props__.__dict__["logout_enabled"] = logout_enabled
            __props__.__dict__["logout_request_url"] = logout_request_url
            __props__.__dict__["logout_response_url"] = logout_response_url
            __props__.__dict__["metadata"] = metadata
            __props__.__dict__["name_id_format"] = name_id_format
            __props__.__dict__["ocid"] = ocid
            if partner_name is None and not opts.urn:
                raise TypeError("Missing required property 'partner_name'")
            __props__.__dict__["partner_name"] = partner_name
            __props__.__dict__["partner_provider_id"] = partner_provider_id
            __props__.__dict__["requested_authentication_contexts"] = requested_authentication_contexts
            __props__.__dict__["require_force_authn"] = require_force_authn
            __props__.__dict__["requires_encrypted_assertion"] = requires_encrypted_assertion
            __props__.__dict__["resource_type_schema_version"] = resource_type_schema_version
            __props__.__dict__["saml_ho_krequired"] = saml_ho_krequired
            if schemas is None and not opts.urn:
                raise TypeError("Missing required property 'schemas'")
            __props__.__dict__["schemas"] = schemas
            __props__.__dict__["service_instance_identifier"] = service_instance_identifier
            __props__.__dict__["shown_on_login_page"] = shown_on_login_page
            __props__.__dict__["signature_hash_algorithm"] = signature_hash_algorithm
            __props__.__dict__["signing_certificate"] = signing_certificate
            __props__.__dict__["succinct_id"] = succinct_id
            __props__.__dict__["tags"] = tags
            __props__.__dict__["type"] = type
            __props__.__dict__["urnietfparamsscimschemasoracleidcsextensionsocial_identity_provider"] = urnietfparamsscimschemasoracleidcsextensionsocial_identity_provider
            __props__.__dict__["urnietfparamsscimschemasoracleidcsextensionx509identity_provider"] = urnietfparamsscimschemasoracleidcsextensionx509identity_provider
            __props__.__dict__["user_mapping_method"] = user_mapping_method
            __props__.__dict__["user_mapping_store_attribute"] = user_mapping_store_attribute
            __props__.__dict__["compartment_ocid"] = None
            __props__.__dict__["delete_in_progress"] = None
            __props__.__dict__["domain_ocid"] = None
            __props__.__dict__["idcs_created_bies"] = None
            __props__.__dict__["idcs_last_modified_bies"] = None
            __props__.__dict__["idcs_last_upgraded_in_release"] = None
            __props__.__dict__["idcs_prevented_operations"] = None
            __props__.__dict__["last_notification_sent_time"] = None
            __props__.__dict__["metas"] = None
            __props__.__dict__["tenancy_ocid"] = None
            __props__.__dict__["tenant_provider_id"] = None
        super(DomainsIdentityProvider, __self__).__init__(
            'oci:Identity/domainsIdentityProvider:DomainsIdentityProvider',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            assertion_attribute: Optional[pulumi.Input[str]] = None,
            attribute_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            attributes: Optional[pulumi.Input[str]] = None,
            authn_request_binding: Optional[pulumi.Input[str]] = None,
            authorization: Optional[pulumi.Input[str]] = None,
            compartment_ocid: Optional[pulumi.Input[str]] = None,
            correlation_policy: Optional[pulumi.Input[pulumi.InputType['DomainsIdentityProviderCorrelationPolicyArgs']]] = None,
            delete_in_progress: Optional[pulumi.Input[bool]] = None,
            description: Optional[pulumi.Input[str]] = None,
            domain_ocid: Optional[pulumi.Input[str]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            encryption_certificate: Optional[pulumi.Input[str]] = None,
            external_id: Optional[pulumi.Input[str]] = None,
            icon_url: Optional[pulumi.Input[str]] = None,
            idcs_created_bies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DomainsIdentityProviderIdcsCreatedByArgs']]]]] = None,
            idcs_endpoint: Optional[pulumi.Input[str]] = None,
            idcs_last_modified_bies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DomainsIdentityProviderIdcsLastModifiedByArgs']]]]] = None,
            idcs_last_upgraded_in_release: Optional[pulumi.Input[str]] = None,
            idcs_prevented_operations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            idp_sso_url: Optional[pulumi.Input[str]] = None,
            include_signing_cert_in_signature: Optional[pulumi.Input[bool]] = None,
            jit_user_prov_assigned_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DomainsIdentityProviderJitUserProvAssignedGroupArgs']]]]] = None,
            jit_user_prov_attribute_update_enabled: Optional[pulumi.Input[bool]] = None,
            jit_user_prov_attributes: Optional[pulumi.Input[pulumi.InputType['DomainsIdentityProviderJitUserProvAttributesArgs']]] = None,
            jit_user_prov_create_user_enabled: Optional[pulumi.Input[bool]] = None,
            jit_user_prov_enabled: Optional[pulumi.Input[bool]] = None,
            jit_user_prov_group_assertion_attribute_enabled: Optional[pulumi.Input[bool]] = None,
            jit_user_prov_group_assignment_method: Optional[pulumi.Input[str]] = None,
            jit_user_prov_group_mapping_mode: Optional[pulumi.Input[str]] = None,
            jit_user_prov_group_mappings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DomainsIdentityProviderJitUserProvGroupMappingArgs']]]]] = None,
            jit_user_prov_group_saml_attribute_name: Optional[pulumi.Input[str]] = None,
            jit_user_prov_group_static_list_enabled: Optional[pulumi.Input[bool]] = None,
            jit_user_prov_ignore_error_on_absent_groups: Optional[pulumi.Input[bool]] = None,
            last_notification_sent_time: Optional[pulumi.Input[str]] = None,
            logout_binding: Optional[pulumi.Input[str]] = None,
            logout_enabled: Optional[pulumi.Input[bool]] = None,
            logout_request_url: Optional[pulumi.Input[str]] = None,
            logout_response_url: Optional[pulumi.Input[str]] = None,
            metadata: Optional[pulumi.Input[str]] = None,
            metas: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DomainsIdentityProviderMetaArgs']]]]] = None,
            name_id_format: Optional[pulumi.Input[str]] = None,
            ocid: Optional[pulumi.Input[str]] = None,
            partner_name: Optional[pulumi.Input[str]] = None,
            partner_provider_id: Optional[pulumi.Input[str]] = None,
            requested_authentication_contexts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            require_force_authn: Optional[pulumi.Input[bool]] = None,
            requires_encrypted_assertion: Optional[pulumi.Input[bool]] = None,
            resource_type_schema_version: Optional[pulumi.Input[str]] = None,
            saml_ho_krequired: Optional[pulumi.Input[bool]] = None,
            schemas: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            service_instance_identifier: Optional[pulumi.Input[str]] = None,
            shown_on_login_page: Optional[pulumi.Input[bool]] = None,
            signature_hash_algorithm: Optional[pulumi.Input[str]] = None,
            signing_certificate: Optional[pulumi.Input[str]] = None,
            succinct_id: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DomainsIdentityProviderTagArgs']]]]] = None,
            tenancy_ocid: Optional[pulumi.Input[str]] = None,
            tenant_provider_id: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None,
            urnietfparamsscimschemasoracleidcsextensionsocial_identity_provider: Optional[pulumi.Input[pulumi.InputType['DomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProviderArgs']]] = None,
            urnietfparamsscimschemasoracleidcsextensionx509identity_provider: Optional[pulumi.Input[pulumi.InputType['DomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionx509identityProviderArgs']]] = None,
            user_mapping_method: Optional[pulumi.Input[str]] = None,
            user_mapping_store_attribute: Optional[pulumi.Input[str]] = None) -> 'DomainsIdentityProvider':
        """
        Get an existing DomainsIdentityProvider resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DomainsIdentityProviderState.__new__(_DomainsIdentityProviderState)

        __props__.__dict__["assertion_attribute"] = assertion_attribute
        __props__.__dict__["attribute_sets"] = attribute_sets
        __props__.__dict__["attributes"] = attributes
        __props__.__dict__["authn_request_binding"] = authn_request_binding
        __props__.__dict__["authorization"] = authorization
        __props__.__dict__["compartment_ocid"] = compartment_ocid
        __props__.__dict__["correlation_policy"] = correlation_policy
        __props__.__dict__["delete_in_progress"] = delete_in_progress
        __props__.__dict__["description"] = description
        __props__.__dict__["domain_ocid"] = domain_ocid
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["encryption_certificate"] = encryption_certificate
        __props__.__dict__["external_id"] = external_id
        __props__.__dict__["icon_url"] = icon_url
        __props__.__dict__["idcs_created_bies"] = idcs_created_bies
        __props__.__dict__["idcs_endpoint"] = idcs_endpoint
        __props__.__dict__["idcs_last_modified_bies"] = idcs_last_modified_bies
        __props__.__dict__["idcs_last_upgraded_in_release"] = idcs_last_upgraded_in_release
        __props__.__dict__["idcs_prevented_operations"] = idcs_prevented_operations
        __props__.__dict__["idp_sso_url"] = idp_sso_url
        __props__.__dict__["include_signing_cert_in_signature"] = include_signing_cert_in_signature
        __props__.__dict__["jit_user_prov_assigned_groups"] = jit_user_prov_assigned_groups
        __props__.__dict__["jit_user_prov_attribute_update_enabled"] = jit_user_prov_attribute_update_enabled
        __props__.__dict__["jit_user_prov_attributes"] = jit_user_prov_attributes
        __props__.__dict__["jit_user_prov_create_user_enabled"] = jit_user_prov_create_user_enabled
        __props__.__dict__["jit_user_prov_enabled"] = jit_user_prov_enabled
        __props__.__dict__["jit_user_prov_group_assertion_attribute_enabled"] = jit_user_prov_group_assertion_attribute_enabled
        __props__.__dict__["jit_user_prov_group_assignment_method"] = jit_user_prov_group_assignment_method
        __props__.__dict__["jit_user_prov_group_mapping_mode"] = jit_user_prov_group_mapping_mode
        __props__.__dict__["jit_user_prov_group_mappings"] = jit_user_prov_group_mappings
        __props__.__dict__["jit_user_prov_group_saml_attribute_name"] = jit_user_prov_group_saml_attribute_name
        __props__.__dict__["jit_user_prov_group_static_list_enabled"] = jit_user_prov_group_static_list_enabled
        __props__.__dict__["jit_user_prov_ignore_error_on_absent_groups"] = jit_user_prov_ignore_error_on_absent_groups
        __props__.__dict__["last_notification_sent_time"] = last_notification_sent_time
        __props__.__dict__["logout_binding"] = logout_binding
        __props__.__dict__["logout_enabled"] = logout_enabled
        __props__.__dict__["logout_request_url"] = logout_request_url
        __props__.__dict__["logout_response_url"] = logout_response_url
        __props__.__dict__["metadata"] = metadata
        __props__.__dict__["metas"] = metas
        __props__.__dict__["name_id_format"] = name_id_format
        __props__.__dict__["ocid"] = ocid
        __props__.__dict__["partner_name"] = partner_name
        __props__.__dict__["partner_provider_id"] = partner_provider_id
        __props__.__dict__["requested_authentication_contexts"] = requested_authentication_contexts
        __props__.__dict__["require_force_authn"] = require_force_authn
        __props__.__dict__["requires_encrypted_assertion"] = requires_encrypted_assertion
        __props__.__dict__["resource_type_schema_version"] = resource_type_schema_version
        __props__.__dict__["saml_ho_krequired"] = saml_ho_krequired
        __props__.__dict__["schemas"] = schemas
        __props__.__dict__["service_instance_identifier"] = service_instance_identifier
        __props__.__dict__["shown_on_login_page"] = shown_on_login_page
        __props__.__dict__["signature_hash_algorithm"] = signature_hash_algorithm
        __props__.__dict__["signing_certificate"] = signing_certificate
        __props__.__dict__["succinct_id"] = succinct_id
        __props__.__dict__["tags"] = tags
        __props__.__dict__["tenancy_ocid"] = tenancy_ocid
        __props__.__dict__["tenant_provider_id"] = tenant_provider_id
        __props__.__dict__["type"] = type
        __props__.__dict__["urnietfparamsscimschemasoracleidcsextensionsocial_identity_provider"] = urnietfparamsscimschemasoracleidcsextensionsocial_identity_provider
        __props__.__dict__["urnietfparamsscimschemasoracleidcsextensionx509identity_provider"] = urnietfparamsscimschemasoracleidcsextensionx509identity_provider
        __props__.__dict__["user_mapping_method"] = user_mapping_method
        __props__.__dict__["user_mapping_store_attribute"] = user_mapping_store_attribute
        return DomainsIdentityProvider(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="assertionAttribute")
    def assertion_attribute(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "assertion_attribute")

    @property
    @pulumi.getter(name="attributeSets")
    def attribute_sets(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "attribute_sets")

    @property
    @pulumi.getter
    def attributes(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter(name="authnRequestBinding")
    def authn_request_binding(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "authn_request_binding")

    @property
    @pulumi.getter
    def authorization(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="correlationPolicy")
    def correlation_policy(self) -> pulumi.Output[Optional['outputs.DomainsIdentityProviderCorrelationPolicy']]:
        return pulumi.get(self, "correlation_policy")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="encryptionCertificate")
    def encryption_certificate(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "encryption_certificate")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter(name="iconUrl")
    def icon_url(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "icon_url")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> pulumi.Output[Optional[Sequence['outputs.DomainsIdentityProviderIdcsCreatedBy']]]:
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> pulumi.Output[str]:
        return pulumi.get(self, "idcs_endpoint")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> pulumi.Output[Optional[Sequence['outputs.DomainsIdentityProviderIdcsLastModifiedBy']]]:
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter(name="idpSsoUrl")
    def idp_sso_url(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "idp_sso_url")

    @property
    @pulumi.getter(name="includeSigningCertInSignature")
    def include_signing_cert_in_signature(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "include_signing_cert_in_signature")

    @property
    @pulumi.getter(name="jitUserProvAssignedGroups")
    def jit_user_prov_assigned_groups(self) -> pulumi.Output[Optional[Sequence['outputs.DomainsIdentityProviderJitUserProvAssignedGroup']]]:
        return pulumi.get(self, "jit_user_prov_assigned_groups")

    @property
    @pulumi.getter(name="jitUserProvAttributeUpdateEnabled")
    def jit_user_prov_attribute_update_enabled(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "jit_user_prov_attribute_update_enabled")

    @property
    @pulumi.getter(name="jitUserProvAttributes")
    def jit_user_prov_attributes(self) -> pulumi.Output[Optional['outputs.DomainsIdentityProviderJitUserProvAttributes']]:
        return pulumi.get(self, "jit_user_prov_attributes")

    @property
    @pulumi.getter(name="jitUserProvCreateUserEnabled")
    def jit_user_prov_create_user_enabled(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "jit_user_prov_create_user_enabled")

    @property
    @pulumi.getter(name="jitUserProvEnabled")
    def jit_user_prov_enabled(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "jit_user_prov_enabled")

    @property
    @pulumi.getter(name="jitUserProvGroupAssertionAttributeEnabled")
    def jit_user_prov_group_assertion_attribute_enabled(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "jit_user_prov_group_assertion_attribute_enabled")

    @property
    @pulumi.getter(name="jitUserProvGroupAssignmentMethod")
    def jit_user_prov_group_assignment_method(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "jit_user_prov_group_assignment_method")

    @property
    @pulumi.getter(name="jitUserProvGroupMappingMode")
    def jit_user_prov_group_mapping_mode(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "jit_user_prov_group_mapping_mode")

    @property
    @pulumi.getter(name="jitUserProvGroupMappings")
    def jit_user_prov_group_mappings(self) -> pulumi.Output[Optional[Sequence['outputs.DomainsIdentityProviderJitUserProvGroupMapping']]]:
        return pulumi.get(self, "jit_user_prov_group_mappings")

    @property
    @pulumi.getter(name="jitUserProvGroupSamlAttributeName")
    def jit_user_prov_group_saml_attribute_name(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "jit_user_prov_group_saml_attribute_name")

    @property
    @pulumi.getter(name="jitUserProvGroupStaticListEnabled")
    def jit_user_prov_group_static_list_enabled(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "jit_user_prov_group_static_list_enabled")

    @property
    @pulumi.getter(name="jitUserProvIgnoreErrorOnAbsentGroups")
    def jit_user_prov_ignore_error_on_absent_groups(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "jit_user_prov_ignore_error_on_absent_groups")

    @property
    @pulumi.getter(name="lastNotificationSentTime")
    def last_notification_sent_time(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "last_notification_sent_time")

    @property
    @pulumi.getter(name="logoutBinding")
    def logout_binding(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "logout_binding")

    @property
    @pulumi.getter(name="logoutEnabled")
    def logout_enabled(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "logout_enabled")

    @property
    @pulumi.getter(name="logoutRequestUrl")
    def logout_request_url(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "logout_request_url")

    @property
    @pulumi.getter(name="logoutResponseUrl")
    def logout_response_url(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "logout_response_url")

    @property
    @pulumi.getter
    def metadata(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def metas(self) -> pulumi.Output[Optional[Sequence['outputs.DomainsIdentityProviderMeta']]]:
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter(name="nameIdFormat")
    def name_id_format(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "name_id_format")

    @property
    @pulumi.getter
    def ocid(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="partnerName")
    def partner_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "partner_name")

    @property
    @pulumi.getter(name="partnerProviderId")
    def partner_provider_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "partner_provider_id")

    @property
    @pulumi.getter(name="requestedAuthenticationContexts")
    def requested_authentication_contexts(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "requested_authentication_contexts")

    @property
    @pulumi.getter(name="requireForceAuthn")
    def require_force_authn(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "require_force_authn")

    @property
    @pulumi.getter(name="requiresEncryptedAssertion")
    def requires_encrypted_assertion(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "requires_encrypted_assertion")

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "resource_type_schema_version")

    @property
    @pulumi.getter(name="samlHoKrequired")
    def saml_ho_krequired(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "saml_ho_krequired")

    @property
    @pulumi.getter
    def schemas(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter(name="serviceInstanceIdentifier")
    def service_instance_identifier(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "service_instance_identifier")

    @property
    @pulumi.getter(name="shownOnLoginPage")
    def shown_on_login_page(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "shown_on_login_page")

    @property
    @pulumi.getter(name="signatureHashAlgorithm")
    def signature_hash_algorithm(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "signature_hash_algorithm")

    @property
    @pulumi.getter(name="signingCertificate")
    def signing_certificate(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "signing_certificate")

    @property
    @pulumi.getter(name="succinctId")
    def succinct_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "succinct_id")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['outputs.DomainsIdentityProviderTag']]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "tenancy_ocid")

    @property
    @pulumi.getter(name="tenantProviderId")
    def tenant_provider_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "tenant_provider_id")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider")
    def urnietfparamsscimschemasoracleidcsextensionsocial_identity_provider(self) -> pulumi.Output[Optional['outputs.DomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider']]:
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionsocial_identity_provider")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionx509identityProvider")
    def urnietfparamsscimschemasoracleidcsextensionx509identity_provider(self) -> pulumi.Output[Optional['outputs.DomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionx509identityProvider']]:
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionx509identity_provider")

    @property
    @pulumi.getter(name="userMappingMethod")
    def user_mapping_method(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "user_mapping_method")

    @property
    @pulumi.getter(name="userMappingStoreAttribute")
    def user_mapping_store_attribute(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "user_mapping_store_attribute")

