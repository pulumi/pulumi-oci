# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetDomainsAccountRecoverySettingResult',
    'AwaitableGetDomainsAccountRecoverySettingResult',
    'get_domains_account_recovery_setting',
    'get_domains_account_recovery_setting_output',
]

@pulumi.output_type
class GetDomainsAccountRecoverySettingResult:
    """
    A collection of values returned by getDomainsAccountRecoverySetting.
    """
    def __init__(__self__, account_recovery_setting_id=None, attribute_sets=None, attributes=None, authorization=None, compartment_ocid=None, delete_in_progress=None, domain_ocid=None, external_id=None, factors=None, id=None, idcs_created_bies=None, idcs_endpoint=None, idcs_last_modified_bies=None, idcs_last_upgraded_in_release=None, idcs_prevented_operations=None, lockout_duration=None, max_incorrect_attempts=None, metas=None, ocid=None, resource_type_schema_version=None, schemas=None, tags=None, tenancy_ocid=None):
        if account_recovery_setting_id and not isinstance(account_recovery_setting_id, str):
            raise TypeError("Expected argument 'account_recovery_setting_id' to be a str")
        pulumi.set(__self__, "account_recovery_setting_id", account_recovery_setting_id)
        if attribute_sets and not isinstance(attribute_sets, list):
            raise TypeError("Expected argument 'attribute_sets' to be a list")
        pulumi.set(__self__, "attribute_sets", attribute_sets)
        if attributes and not isinstance(attributes, str):
            raise TypeError("Expected argument 'attributes' to be a str")
        pulumi.set(__self__, "attributes", attributes)
        if authorization and not isinstance(authorization, str):
            raise TypeError("Expected argument 'authorization' to be a str")
        pulumi.set(__self__, "authorization", authorization)
        if compartment_ocid and not isinstance(compartment_ocid, str):
            raise TypeError("Expected argument 'compartment_ocid' to be a str")
        pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        if delete_in_progress and not isinstance(delete_in_progress, bool):
            raise TypeError("Expected argument 'delete_in_progress' to be a bool")
        pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        if domain_ocid and not isinstance(domain_ocid, str):
            raise TypeError("Expected argument 'domain_ocid' to be a str")
        pulumi.set(__self__, "domain_ocid", domain_ocid)
        if external_id and not isinstance(external_id, str):
            raise TypeError("Expected argument 'external_id' to be a str")
        pulumi.set(__self__, "external_id", external_id)
        if factors and not isinstance(factors, list):
            raise TypeError("Expected argument 'factors' to be a list")
        pulumi.set(__self__, "factors", factors)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if idcs_created_bies and not isinstance(idcs_created_bies, list):
            raise TypeError("Expected argument 'idcs_created_bies' to be a list")
        pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        if idcs_endpoint and not isinstance(idcs_endpoint, str):
            raise TypeError("Expected argument 'idcs_endpoint' to be a str")
        pulumi.set(__self__, "idcs_endpoint", idcs_endpoint)
        if idcs_last_modified_bies and not isinstance(idcs_last_modified_bies, list):
            raise TypeError("Expected argument 'idcs_last_modified_bies' to be a list")
        pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        if idcs_last_upgraded_in_release and not isinstance(idcs_last_upgraded_in_release, str):
            raise TypeError("Expected argument 'idcs_last_upgraded_in_release' to be a str")
        pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        if idcs_prevented_operations and not isinstance(idcs_prevented_operations, list):
            raise TypeError("Expected argument 'idcs_prevented_operations' to be a list")
        pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        if lockout_duration and not isinstance(lockout_duration, int):
            raise TypeError("Expected argument 'lockout_duration' to be a int")
        pulumi.set(__self__, "lockout_duration", lockout_duration)
        if max_incorrect_attempts and not isinstance(max_incorrect_attempts, int):
            raise TypeError("Expected argument 'max_incorrect_attempts' to be a int")
        pulumi.set(__self__, "max_incorrect_attempts", max_incorrect_attempts)
        if metas and not isinstance(metas, list):
            raise TypeError("Expected argument 'metas' to be a list")
        pulumi.set(__self__, "metas", metas)
        if ocid and not isinstance(ocid, str):
            raise TypeError("Expected argument 'ocid' to be a str")
        pulumi.set(__self__, "ocid", ocid)
        if resource_type_schema_version and not isinstance(resource_type_schema_version, str):
            raise TypeError("Expected argument 'resource_type_schema_version' to be a str")
        pulumi.set(__self__, "resource_type_schema_version", resource_type_schema_version)
        if schemas and not isinstance(schemas, list):
            raise TypeError("Expected argument 'schemas' to be a list")
        pulumi.set(__self__, "schemas", schemas)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if tenancy_ocid and not isinstance(tenancy_ocid, str):
            raise TypeError("Expected argument 'tenancy_ocid' to be a str")
        pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)

    @property
    @pulumi.getter(name="accountRecoverySettingId")
    def account_recovery_setting_id(self) -> str:
        return pulumi.get(self, "account_recovery_setting_id")

    @property
    @pulumi.getter(name="attributeSets")
    def attribute_sets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "attribute_sets")

    @property
    @pulumi.getter
    def attributes(self) -> Optional[str]:
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter
    def authorization(self) -> Optional[str]:
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> Optional[str]:
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> Optional[bool]:
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> Optional[str]:
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[str]:
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter
    def factors(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "factors")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Optional[Sequence['outputs.GetDomainsAccountRecoverySettingIdcsCreatedByResult']]:
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> str:
        return pulumi.get(self, "idcs_endpoint")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Optional[Sequence['outputs.GetDomainsAccountRecoverySettingIdcsLastModifiedByResult']]:
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> Optional[str]:
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter(name="lockoutDuration")
    def lockout_duration(self) -> Optional[int]:
        return pulumi.get(self, "lockout_duration")

    @property
    @pulumi.getter(name="maxIncorrectAttempts")
    def max_incorrect_attempts(self) -> Optional[int]:
        return pulumi.get(self, "max_incorrect_attempts")

    @property
    @pulumi.getter
    def metas(self) -> Optional[Sequence['outputs.GetDomainsAccountRecoverySettingMetaResult']]:
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> Optional[str]:
        return pulumi.get(self, "resource_type_schema_version")

    @property
    @pulumi.getter
    def schemas(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.GetDomainsAccountRecoverySettingTagResult']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> Optional[str]:
        return pulumi.get(self, "tenancy_ocid")


class AwaitableGetDomainsAccountRecoverySettingResult(GetDomainsAccountRecoverySettingResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDomainsAccountRecoverySettingResult(
            account_recovery_setting_id=self.account_recovery_setting_id,
            attribute_sets=self.attribute_sets,
            attributes=self.attributes,
            authorization=self.authorization,
            compartment_ocid=self.compartment_ocid,
            delete_in_progress=self.delete_in_progress,
            domain_ocid=self.domain_ocid,
            external_id=self.external_id,
            factors=self.factors,
            id=self.id,
            idcs_created_bies=self.idcs_created_bies,
            idcs_endpoint=self.idcs_endpoint,
            idcs_last_modified_bies=self.idcs_last_modified_bies,
            idcs_last_upgraded_in_release=self.idcs_last_upgraded_in_release,
            idcs_prevented_operations=self.idcs_prevented_operations,
            lockout_duration=self.lockout_duration,
            max_incorrect_attempts=self.max_incorrect_attempts,
            metas=self.metas,
            ocid=self.ocid,
            resource_type_schema_version=self.resource_type_schema_version,
            schemas=self.schemas,
            tags=self.tags,
            tenancy_ocid=self.tenancy_ocid)


def get_domains_account_recovery_setting(account_recovery_setting_id: Optional[str] = None,
                                         attribute_sets: Optional[Sequence[str]] = None,
                                         attributes: Optional[str] = None,
                                         authorization: Optional[str] = None,
                                         idcs_endpoint: Optional[str] = None,
                                         resource_type_schema_version: Optional[str] = None,
                                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDomainsAccountRecoverySettingResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accountRecoverySettingId'] = account_recovery_setting_id
    __args__['attributeSets'] = attribute_sets
    __args__['attributes'] = attributes
    __args__['authorization'] = authorization
    __args__['idcsEndpoint'] = idcs_endpoint
    __args__['resourceTypeSchemaVersion'] = resource_type_schema_version
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:Identity/getDomainsAccountRecoverySetting:getDomainsAccountRecoverySetting', __args__, opts=opts, typ=GetDomainsAccountRecoverySettingResult).value

    return AwaitableGetDomainsAccountRecoverySettingResult(
        account_recovery_setting_id=pulumi.get(__ret__, 'account_recovery_setting_id'),
        attribute_sets=pulumi.get(__ret__, 'attribute_sets'),
        attributes=pulumi.get(__ret__, 'attributes'),
        authorization=pulumi.get(__ret__, 'authorization'),
        compartment_ocid=pulumi.get(__ret__, 'compartment_ocid'),
        delete_in_progress=pulumi.get(__ret__, 'delete_in_progress'),
        domain_ocid=pulumi.get(__ret__, 'domain_ocid'),
        external_id=pulumi.get(__ret__, 'external_id'),
        factors=pulumi.get(__ret__, 'factors'),
        id=pulumi.get(__ret__, 'id'),
        idcs_created_bies=pulumi.get(__ret__, 'idcs_created_bies'),
        idcs_endpoint=pulumi.get(__ret__, 'idcs_endpoint'),
        idcs_last_modified_bies=pulumi.get(__ret__, 'idcs_last_modified_bies'),
        idcs_last_upgraded_in_release=pulumi.get(__ret__, 'idcs_last_upgraded_in_release'),
        idcs_prevented_operations=pulumi.get(__ret__, 'idcs_prevented_operations'),
        lockout_duration=pulumi.get(__ret__, 'lockout_duration'),
        max_incorrect_attempts=pulumi.get(__ret__, 'max_incorrect_attempts'),
        metas=pulumi.get(__ret__, 'metas'),
        ocid=pulumi.get(__ret__, 'ocid'),
        resource_type_schema_version=pulumi.get(__ret__, 'resource_type_schema_version'),
        schemas=pulumi.get(__ret__, 'schemas'),
        tags=pulumi.get(__ret__, 'tags'),
        tenancy_ocid=pulumi.get(__ret__, 'tenancy_ocid'))


@_utilities.lift_output_func(get_domains_account_recovery_setting)
def get_domains_account_recovery_setting_output(account_recovery_setting_id: Optional[pulumi.Input[str]] = None,
                                                attribute_sets: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                                attributes: Optional[pulumi.Input[Optional[str]]] = None,
                                                authorization: Optional[pulumi.Input[Optional[str]]] = None,
                                                idcs_endpoint: Optional[pulumi.Input[str]] = None,
                                                resource_type_schema_version: Optional[pulumi.Input[Optional[str]]] = None,
                                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDomainsAccountRecoverySettingResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
