# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetDomainsAppResult',
    'AwaitableGetDomainsAppResult',
    'get_domains_app',
    'get_domains_app_output',
]

@pulumi.output_type
class GetDomainsAppResult:
    """
    A collection of values returned by getDomainsApp.
    """
    def __init__(__self__, access_token_expiry=None, accounts=None, active=None, admin_roles=None, alias_apps=None, all_url_schemes_allowed=None, allow_access_control=None, allow_offline=None, allowed_grants=None, allowed_operations=None, allowed_scopes=None, allowed_tags=None, app_icon=None, app_id=None, app_signon_policies=None, app_thumbnail=None, apps_network_perimeters=None, as_opc_services=None, attr_rendering_metadatas=None, attribute_sets=None, attributes=None, audience=None, authorization=None, based_on_templates=None, bypass_consent=None, callback_service_url=None, certificates=None, client_ip_checking=None, client_secret=None, client_type=None, cloud_control_properties=None, compartment_ocid=None, contact_email_address=None, delegated_service_names=None, delete_in_progress=None, description=None, disable_kmsi_token_authentication=None, display_name=None, domain_ocid=None, editable_attributes=None, error_page_url=None, granted_app_roles=None, grants=None, hashed_client_secret=None, home_page_url=None, icon=None, id=None, id_token_enc_algo=None, idcs_created_bies=None, idcs_endpoint=None, idcs_last_modified_bies=None, idcs_last_upgraded_in_release=None, idcs_prevented_operations=None, identity_providers=None, idp_policies=None, infrastructure=None, is_alias_app=None, is_database_service=None, is_enterprise_app=None, is_form_fill=None, is_kerberos_realm=None, is_login_target=None, is_managed_app=None, is_mobile_target=None, is_multicloud_service_app=None, is_oauth_client=None, is_oauth_resource=None, is_obligation_capable=None, is_opc_service=None, is_radius_app=None, is_saml_service_provider=None, is_unmanaged_app=None, is_web_tier_policy=None, landing_page_url=None, linking_callback_url=None, login_mechanism=None, login_page_url=None, logout_page_url=None, logout_uri=None, metas=None, meter_as_opc_service=None, migrated=None, name=None, ocid=None, post_logout_redirect_uris=None, privacy_policy_url=None, product_logo_url=None, product_name=None, protectable_secondary_audiences=None, radius_policies=None, ready_to_upgrade=None, redirect_uris=None, refresh_token_expiry=None, resource_type_schema_version=None, saml_service_providers=None, schemas=None, scopes=None, secondary_audiences=None, service_params=None, service_type_urn=None, service_type_version=None, show_in_my_apps=None, signon_policies=None, tags=None, tenancy_ocid=None, terms_of_service_url=None, terms_of_uses=None, trust_policies=None, trust_scope=None, urnietfparamsscimschemasoracleidcsextension_oci_tags=None, urnietfparamsscimschemasoracleidcsextensiondbcs_apps=None, urnietfparamsscimschemasoracleidcsextensionenterprise_app_apps=None, urnietfparamsscimschemasoracleidcsextensionform_fill_app_apps=None, urnietfparamsscimschemasoracleidcsextensionform_fill_app_template_app_templates=None, urnietfparamsscimschemasoracleidcsextensionkerberos_realm_apps=None, urnietfparamsscimschemasoracleidcsextensionmanagedapp_apps=None, urnietfparamsscimschemasoracleidcsextensionmulticloud_service_app_apps=None, urnietfparamsscimschemasoracleidcsextensionopc_service_apps=None, urnietfparamsscimschemasoracleidcsextensionradius_app_apps=None, urnietfparamsscimschemasoracleidcsextensionrequestable_apps=None, urnietfparamsscimschemasoracleidcsextensionsaml_service_provider_apps=None, urnietfparamsscimschemasoracleidcsextensionweb_tier_policy_apps=None, user_roles=None):
        if access_token_expiry and not isinstance(access_token_expiry, int):
            raise TypeError("Expected argument 'access_token_expiry' to be a int")
        pulumi.set(__self__, "access_token_expiry", access_token_expiry)
        if accounts and not isinstance(accounts, list):
            raise TypeError("Expected argument 'accounts' to be a list")
        pulumi.set(__self__, "accounts", accounts)
        if active and not isinstance(active, bool):
            raise TypeError("Expected argument 'active' to be a bool")
        pulumi.set(__self__, "active", active)
        if admin_roles and not isinstance(admin_roles, list):
            raise TypeError("Expected argument 'admin_roles' to be a list")
        pulumi.set(__self__, "admin_roles", admin_roles)
        if alias_apps and not isinstance(alias_apps, list):
            raise TypeError("Expected argument 'alias_apps' to be a list")
        pulumi.set(__self__, "alias_apps", alias_apps)
        if all_url_schemes_allowed and not isinstance(all_url_schemes_allowed, bool):
            raise TypeError("Expected argument 'all_url_schemes_allowed' to be a bool")
        pulumi.set(__self__, "all_url_schemes_allowed", all_url_schemes_allowed)
        if allow_access_control and not isinstance(allow_access_control, bool):
            raise TypeError("Expected argument 'allow_access_control' to be a bool")
        pulumi.set(__self__, "allow_access_control", allow_access_control)
        if allow_offline and not isinstance(allow_offline, bool):
            raise TypeError("Expected argument 'allow_offline' to be a bool")
        pulumi.set(__self__, "allow_offline", allow_offline)
        if allowed_grants and not isinstance(allowed_grants, list):
            raise TypeError("Expected argument 'allowed_grants' to be a list")
        pulumi.set(__self__, "allowed_grants", allowed_grants)
        if allowed_operations and not isinstance(allowed_operations, list):
            raise TypeError("Expected argument 'allowed_operations' to be a list")
        pulumi.set(__self__, "allowed_operations", allowed_operations)
        if allowed_scopes and not isinstance(allowed_scopes, list):
            raise TypeError("Expected argument 'allowed_scopes' to be a list")
        pulumi.set(__self__, "allowed_scopes", allowed_scopes)
        if allowed_tags and not isinstance(allowed_tags, list):
            raise TypeError("Expected argument 'allowed_tags' to be a list")
        pulumi.set(__self__, "allowed_tags", allowed_tags)
        if app_icon and not isinstance(app_icon, str):
            raise TypeError("Expected argument 'app_icon' to be a str")
        pulumi.set(__self__, "app_icon", app_icon)
        if app_id and not isinstance(app_id, str):
            raise TypeError("Expected argument 'app_id' to be a str")
        pulumi.set(__self__, "app_id", app_id)
        if app_signon_policies and not isinstance(app_signon_policies, list):
            raise TypeError("Expected argument 'app_signon_policies' to be a list")
        pulumi.set(__self__, "app_signon_policies", app_signon_policies)
        if app_thumbnail and not isinstance(app_thumbnail, str):
            raise TypeError("Expected argument 'app_thumbnail' to be a str")
        pulumi.set(__self__, "app_thumbnail", app_thumbnail)
        if apps_network_perimeters and not isinstance(apps_network_perimeters, list):
            raise TypeError("Expected argument 'apps_network_perimeters' to be a list")
        pulumi.set(__self__, "apps_network_perimeters", apps_network_perimeters)
        if as_opc_services and not isinstance(as_opc_services, list):
            raise TypeError("Expected argument 'as_opc_services' to be a list")
        pulumi.set(__self__, "as_opc_services", as_opc_services)
        if attr_rendering_metadatas and not isinstance(attr_rendering_metadatas, list):
            raise TypeError("Expected argument 'attr_rendering_metadatas' to be a list")
        pulumi.set(__self__, "attr_rendering_metadatas", attr_rendering_metadatas)
        if attribute_sets and not isinstance(attribute_sets, list):
            raise TypeError("Expected argument 'attribute_sets' to be a list")
        pulumi.set(__self__, "attribute_sets", attribute_sets)
        if attributes and not isinstance(attributes, str):
            raise TypeError("Expected argument 'attributes' to be a str")
        pulumi.set(__self__, "attributes", attributes)
        if audience and not isinstance(audience, str):
            raise TypeError("Expected argument 'audience' to be a str")
        pulumi.set(__self__, "audience", audience)
        if authorization and not isinstance(authorization, str):
            raise TypeError("Expected argument 'authorization' to be a str")
        pulumi.set(__self__, "authorization", authorization)
        if based_on_templates and not isinstance(based_on_templates, list):
            raise TypeError("Expected argument 'based_on_templates' to be a list")
        pulumi.set(__self__, "based_on_templates", based_on_templates)
        if bypass_consent and not isinstance(bypass_consent, bool):
            raise TypeError("Expected argument 'bypass_consent' to be a bool")
        pulumi.set(__self__, "bypass_consent", bypass_consent)
        if callback_service_url and not isinstance(callback_service_url, str):
            raise TypeError("Expected argument 'callback_service_url' to be a str")
        pulumi.set(__self__, "callback_service_url", callback_service_url)
        if certificates and not isinstance(certificates, list):
            raise TypeError("Expected argument 'certificates' to be a list")
        pulumi.set(__self__, "certificates", certificates)
        if client_ip_checking and not isinstance(client_ip_checking, str):
            raise TypeError("Expected argument 'client_ip_checking' to be a str")
        pulumi.set(__self__, "client_ip_checking", client_ip_checking)
        if client_secret and not isinstance(client_secret, str):
            raise TypeError("Expected argument 'client_secret' to be a str")
        pulumi.set(__self__, "client_secret", client_secret)
        if client_type and not isinstance(client_type, str):
            raise TypeError("Expected argument 'client_type' to be a str")
        pulumi.set(__self__, "client_type", client_type)
        if cloud_control_properties and not isinstance(cloud_control_properties, list):
            raise TypeError("Expected argument 'cloud_control_properties' to be a list")
        pulumi.set(__self__, "cloud_control_properties", cloud_control_properties)
        if compartment_ocid and not isinstance(compartment_ocid, str):
            raise TypeError("Expected argument 'compartment_ocid' to be a str")
        pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        if contact_email_address and not isinstance(contact_email_address, str):
            raise TypeError("Expected argument 'contact_email_address' to be a str")
        pulumi.set(__self__, "contact_email_address", contact_email_address)
        if delegated_service_names and not isinstance(delegated_service_names, list):
            raise TypeError("Expected argument 'delegated_service_names' to be a list")
        pulumi.set(__self__, "delegated_service_names", delegated_service_names)
        if delete_in_progress and not isinstance(delete_in_progress, bool):
            raise TypeError("Expected argument 'delete_in_progress' to be a bool")
        pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if disable_kmsi_token_authentication and not isinstance(disable_kmsi_token_authentication, bool):
            raise TypeError("Expected argument 'disable_kmsi_token_authentication' to be a bool")
        pulumi.set(__self__, "disable_kmsi_token_authentication", disable_kmsi_token_authentication)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if domain_ocid and not isinstance(domain_ocid, str):
            raise TypeError("Expected argument 'domain_ocid' to be a str")
        pulumi.set(__self__, "domain_ocid", domain_ocid)
        if editable_attributes and not isinstance(editable_attributes, list):
            raise TypeError("Expected argument 'editable_attributes' to be a list")
        pulumi.set(__self__, "editable_attributes", editable_attributes)
        if error_page_url and not isinstance(error_page_url, str):
            raise TypeError("Expected argument 'error_page_url' to be a str")
        pulumi.set(__self__, "error_page_url", error_page_url)
        if granted_app_roles and not isinstance(granted_app_roles, list):
            raise TypeError("Expected argument 'granted_app_roles' to be a list")
        pulumi.set(__self__, "granted_app_roles", granted_app_roles)
        if grants and not isinstance(grants, list):
            raise TypeError("Expected argument 'grants' to be a list")
        pulumi.set(__self__, "grants", grants)
        if hashed_client_secret and not isinstance(hashed_client_secret, str):
            raise TypeError("Expected argument 'hashed_client_secret' to be a str")
        pulumi.set(__self__, "hashed_client_secret", hashed_client_secret)
        if home_page_url and not isinstance(home_page_url, str):
            raise TypeError("Expected argument 'home_page_url' to be a str")
        pulumi.set(__self__, "home_page_url", home_page_url)
        if icon and not isinstance(icon, str):
            raise TypeError("Expected argument 'icon' to be a str")
        pulumi.set(__self__, "icon", icon)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if id_token_enc_algo and not isinstance(id_token_enc_algo, str):
            raise TypeError("Expected argument 'id_token_enc_algo' to be a str")
        pulumi.set(__self__, "id_token_enc_algo", id_token_enc_algo)
        if idcs_created_bies and not isinstance(idcs_created_bies, list):
            raise TypeError("Expected argument 'idcs_created_bies' to be a list")
        pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        if idcs_endpoint and not isinstance(idcs_endpoint, str):
            raise TypeError("Expected argument 'idcs_endpoint' to be a str")
        pulumi.set(__self__, "idcs_endpoint", idcs_endpoint)
        if idcs_last_modified_bies and not isinstance(idcs_last_modified_bies, list):
            raise TypeError("Expected argument 'idcs_last_modified_bies' to be a list")
        pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        if idcs_last_upgraded_in_release and not isinstance(idcs_last_upgraded_in_release, str):
            raise TypeError("Expected argument 'idcs_last_upgraded_in_release' to be a str")
        pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        if idcs_prevented_operations and not isinstance(idcs_prevented_operations, list):
            raise TypeError("Expected argument 'idcs_prevented_operations' to be a list")
        pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        if identity_providers and not isinstance(identity_providers, list):
            raise TypeError("Expected argument 'identity_providers' to be a list")
        pulumi.set(__self__, "identity_providers", identity_providers)
        if idp_policies and not isinstance(idp_policies, list):
            raise TypeError("Expected argument 'idp_policies' to be a list")
        pulumi.set(__self__, "idp_policies", idp_policies)
        if infrastructure and not isinstance(infrastructure, bool):
            raise TypeError("Expected argument 'infrastructure' to be a bool")
        pulumi.set(__self__, "infrastructure", infrastructure)
        if is_alias_app and not isinstance(is_alias_app, bool):
            raise TypeError("Expected argument 'is_alias_app' to be a bool")
        pulumi.set(__self__, "is_alias_app", is_alias_app)
        if is_database_service and not isinstance(is_database_service, bool):
            raise TypeError("Expected argument 'is_database_service' to be a bool")
        pulumi.set(__self__, "is_database_service", is_database_service)
        if is_enterprise_app and not isinstance(is_enterprise_app, bool):
            raise TypeError("Expected argument 'is_enterprise_app' to be a bool")
        pulumi.set(__self__, "is_enterprise_app", is_enterprise_app)
        if is_form_fill and not isinstance(is_form_fill, bool):
            raise TypeError("Expected argument 'is_form_fill' to be a bool")
        pulumi.set(__self__, "is_form_fill", is_form_fill)
        if is_kerberos_realm and not isinstance(is_kerberos_realm, bool):
            raise TypeError("Expected argument 'is_kerberos_realm' to be a bool")
        pulumi.set(__self__, "is_kerberos_realm", is_kerberos_realm)
        if is_login_target and not isinstance(is_login_target, bool):
            raise TypeError("Expected argument 'is_login_target' to be a bool")
        pulumi.set(__self__, "is_login_target", is_login_target)
        if is_managed_app and not isinstance(is_managed_app, bool):
            raise TypeError("Expected argument 'is_managed_app' to be a bool")
        pulumi.set(__self__, "is_managed_app", is_managed_app)
        if is_mobile_target and not isinstance(is_mobile_target, bool):
            raise TypeError("Expected argument 'is_mobile_target' to be a bool")
        pulumi.set(__self__, "is_mobile_target", is_mobile_target)
        if is_multicloud_service_app and not isinstance(is_multicloud_service_app, bool):
            raise TypeError("Expected argument 'is_multicloud_service_app' to be a bool")
        pulumi.set(__self__, "is_multicloud_service_app", is_multicloud_service_app)
        if is_oauth_client and not isinstance(is_oauth_client, bool):
            raise TypeError("Expected argument 'is_oauth_client' to be a bool")
        pulumi.set(__self__, "is_oauth_client", is_oauth_client)
        if is_oauth_resource and not isinstance(is_oauth_resource, bool):
            raise TypeError("Expected argument 'is_oauth_resource' to be a bool")
        pulumi.set(__self__, "is_oauth_resource", is_oauth_resource)
        if is_obligation_capable and not isinstance(is_obligation_capable, bool):
            raise TypeError("Expected argument 'is_obligation_capable' to be a bool")
        pulumi.set(__self__, "is_obligation_capable", is_obligation_capable)
        if is_opc_service and not isinstance(is_opc_service, bool):
            raise TypeError("Expected argument 'is_opc_service' to be a bool")
        pulumi.set(__self__, "is_opc_service", is_opc_service)
        if is_radius_app and not isinstance(is_radius_app, bool):
            raise TypeError("Expected argument 'is_radius_app' to be a bool")
        pulumi.set(__self__, "is_radius_app", is_radius_app)
        if is_saml_service_provider and not isinstance(is_saml_service_provider, bool):
            raise TypeError("Expected argument 'is_saml_service_provider' to be a bool")
        pulumi.set(__self__, "is_saml_service_provider", is_saml_service_provider)
        if is_unmanaged_app and not isinstance(is_unmanaged_app, bool):
            raise TypeError("Expected argument 'is_unmanaged_app' to be a bool")
        pulumi.set(__self__, "is_unmanaged_app", is_unmanaged_app)
        if is_web_tier_policy and not isinstance(is_web_tier_policy, bool):
            raise TypeError("Expected argument 'is_web_tier_policy' to be a bool")
        pulumi.set(__self__, "is_web_tier_policy", is_web_tier_policy)
        if landing_page_url and not isinstance(landing_page_url, str):
            raise TypeError("Expected argument 'landing_page_url' to be a str")
        pulumi.set(__self__, "landing_page_url", landing_page_url)
        if linking_callback_url and not isinstance(linking_callback_url, str):
            raise TypeError("Expected argument 'linking_callback_url' to be a str")
        pulumi.set(__self__, "linking_callback_url", linking_callback_url)
        if login_mechanism and not isinstance(login_mechanism, str):
            raise TypeError("Expected argument 'login_mechanism' to be a str")
        pulumi.set(__self__, "login_mechanism", login_mechanism)
        if login_page_url and not isinstance(login_page_url, str):
            raise TypeError("Expected argument 'login_page_url' to be a str")
        pulumi.set(__self__, "login_page_url", login_page_url)
        if logout_page_url and not isinstance(logout_page_url, str):
            raise TypeError("Expected argument 'logout_page_url' to be a str")
        pulumi.set(__self__, "logout_page_url", logout_page_url)
        if logout_uri and not isinstance(logout_uri, str):
            raise TypeError("Expected argument 'logout_uri' to be a str")
        pulumi.set(__self__, "logout_uri", logout_uri)
        if metas and not isinstance(metas, list):
            raise TypeError("Expected argument 'metas' to be a list")
        pulumi.set(__self__, "metas", metas)
        if meter_as_opc_service and not isinstance(meter_as_opc_service, bool):
            raise TypeError("Expected argument 'meter_as_opc_service' to be a bool")
        pulumi.set(__self__, "meter_as_opc_service", meter_as_opc_service)
        if migrated and not isinstance(migrated, bool):
            raise TypeError("Expected argument 'migrated' to be a bool")
        pulumi.set(__self__, "migrated", migrated)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if ocid and not isinstance(ocid, str):
            raise TypeError("Expected argument 'ocid' to be a str")
        pulumi.set(__self__, "ocid", ocid)
        if post_logout_redirect_uris and not isinstance(post_logout_redirect_uris, list):
            raise TypeError("Expected argument 'post_logout_redirect_uris' to be a list")
        pulumi.set(__self__, "post_logout_redirect_uris", post_logout_redirect_uris)
        if privacy_policy_url and not isinstance(privacy_policy_url, str):
            raise TypeError("Expected argument 'privacy_policy_url' to be a str")
        pulumi.set(__self__, "privacy_policy_url", privacy_policy_url)
        if product_logo_url and not isinstance(product_logo_url, str):
            raise TypeError("Expected argument 'product_logo_url' to be a str")
        pulumi.set(__self__, "product_logo_url", product_logo_url)
        if product_name and not isinstance(product_name, str):
            raise TypeError("Expected argument 'product_name' to be a str")
        pulumi.set(__self__, "product_name", product_name)
        if protectable_secondary_audiences and not isinstance(protectable_secondary_audiences, list):
            raise TypeError("Expected argument 'protectable_secondary_audiences' to be a list")
        pulumi.set(__self__, "protectable_secondary_audiences", protectable_secondary_audiences)
        if radius_policies and not isinstance(radius_policies, list):
            raise TypeError("Expected argument 'radius_policies' to be a list")
        pulumi.set(__self__, "radius_policies", radius_policies)
        if ready_to_upgrade and not isinstance(ready_to_upgrade, bool):
            raise TypeError("Expected argument 'ready_to_upgrade' to be a bool")
        pulumi.set(__self__, "ready_to_upgrade", ready_to_upgrade)
        if redirect_uris and not isinstance(redirect_uris, list):
            raise TypeError("Expected argument 'redirect_uris' to be a list")
        pulumi.set(__self__, "redirect_uris", redirect_uris)
        if refresh_token_expiry and not isinstance(refresh_token_expiry, int):
            raise TypeError("Expected argument 'refresh_token_expiry' to be a int")
        pulumi.set(__self__, "refresh_token_expiry", refresh_token_expiry)
        if resource_type_schema_version and not isinstance(resource_type_schema_version, str):
            raise TypeError("Expected argument 'resource_type_schema_version' to be a str")
        pulumi.set(__self__, "resource_type_schema_version", resource_type_schema_version)
        if saml_service_providers and not isinstance(saml_service_providers, list):
            raise TypeError("Expected argument 'saml_service_providers' to be a list")
        pulumi.set(__self__, "saml_service_providers", saml_service_providers)
        if schemas and not isinstance(schemas, list):
            raise TypeError("Expected argument 'schemas' to be a list")
        pulumi.set(__self__, "schemas", schemas)
        if scopes and not isinstance(scopes, list):
            raise TypeError("Expected argument 'scopes' to be a list")
        pulumi.set(__self__, "scopes", scopes)
        if secondary_audiences and not isinstance(secondary_audiences, list):
            raise TypeError("Expected argument 'secondary_audiences' to be a list")
        pulumi.set(__self__, "secondary_audiences", secondary_audiences)
        if service_params and not isinstance(service_params, list):
            raise TypeError("Expected argument 'service_params' to be a list")
        pulumi.set(__self__, "service_params", service_params)
        if service_type_urn and not isinstance(service_type_urn, str):
            raise TypeError("Expected argument 'service_type_urn' to be a str")
        pulumi.set(__self__, "service_type_urn", service_type_urn)
        if service_type_version and not isinstance(service_type_version, str):
            raise TypeError("Expected argument 'service_type_version' to be a str")
        pulumi.set(__self__, "service_type_version", service_type_version)
        if show_in_my_apps and not isinstance(show_in_my_apps, bool):
            raise TypeError("Expected argument 'show_in_my_apps' to be a bool")
        pulumi.set(__self__, "show_in_my_apps", show_in_my_apps)
        if signon_policies and not isinstance(signon_policies, list):
            raise TypeError("Expected argument 'signon_policies' to be a list")
        pulumi.set(__self__, "signon_policies", signon_policies)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if tenancy_ocid and not isinstance(tenancy_ocid, str):
            raise TypeError("Expected argument 'tenancy_ocid' to be a str")
        pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)
        if terms_of_service_url and not isinstance(terms_of_service_url, str):
            raise TypeError("Expected argument 'terms_of_service_url' to be a str")
        pulumi.set(__self__, "terms_of_service_url", terms_of_service_url)
        if terms_of_uses and not isinstance(terms_of_uses, list):
            raise TypeError("Expected argument 'terms_of_uses' to be a list")
        pulumi.set(__self__, "terms_of_uses", terms_of_uses)
        if trust_policies and not isinstance(trust_policies, list):
            raise TypeError("Expected argument 'trust_policies' to be a list")
        pulumi.set(__self__, "trust_policies", trust_policies)
        if trust_scope and not isinstance(trust_scope, str):
            raise TypeError("Expected argument 'trust_scope' to be a str")
        pulumi.set(__self__, "trust_scope", trust_scope)
        if urnietfparamsscimschemasoracleidcsextension_oci_tags and not isinstance(urnietfparamsscimschemasoracleidcsextension_oci_tags, list):
            raise TypeError("Expected argument 'urnietfparamsscimschemasoracleidcsextension_oci_tags' to be a list")
        pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextension_oci_tags", urnietfparamsscimschemasoracleidcsextension_oci_tags)
        if urnietfparamsscimschemasoracleidcsextensiondbcs_apps and not isinstance(urnietfparamsscimschemasoracleidcsextensiondbcs_apps, list):
            raise TypeError("Expected argument 'urnietfparamsscimschemasoracleidcsextensiondbcs_apps' to be a list")
        pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensiondbcs_apps", urnietfparamsscimschemasoracleidcsextensiondbcs_apps)
        if urnietfparamsscimschemasoracleidcsextensionenterprise_app_apps and not isinstance(urnietfparamsscimschemasoracleidcsextensionenterprise_app_apps, list):
            raise TypeError("Expected argument 'urnietfparamsscimschemasoracleidcsextensionenterprise_app_apps' to be a list")
        pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionenterprise_app_apps", urnietfparamsscimschemasoracleidcsextensionenterprise_app_apps)
        if urnietfparamsscimschemasoracleidcsextensionform_fill_app_apps and not isinstance(urnietfparamsscimschemasoracleidcsextensionform_fill_app_apps, list):
            raise TypeError("Expected argument 'urnietfparamsscimschemasoracleidcsextensionform_fill_app_apps' to be a list")
        pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionform_fill_app_apps", urnietfparamsscimschemasoracleidcsextensionform_fill_app_apps)
        if urnietfparamsscimschemasoracleidcsextensionform_fill_app_template_app_templates and not isinstance(urnietfparamsscimschemasoracleidcsextensionform_fill_app_template_app_templates, list):
            raise TypeError("Expected argument 'urnietfparamsscimschemasoracleidcsextensionform_fill_app_template_app_templates' to be a list")
        pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionform_fill_app_template_app_templates", urnietfparamsscimschemasoracleidcsextensionform_fill_app_template_app_templates)
        if urnietfparamsscimschemasoracleidcsextensionkerberos_realm_apps and not isinstance(urnietfparamsscimschemasoracleidcsextensionkerberos_realm_apps, list):
            raise TypeError("Expected argument 'urnietfparamsscimschemasoracleidcsextensionkerberos_realm_apps' to be a list")
        pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionkerberos_realm_apps", urnietfparamsscimschemasoracleidcsextensionkerberos_realm_apps)
        if urnietfparamsscimschemasoracleidcsextensionmanagedapp_apps and not isinstance(urnietfparamsscimschemasoracleidcsextensionmanagedapp_apps, list):
            raise TypeError("Expected argument 'urnietfparamsscimschemasoracleidcsextensionmanagedapp_apps' to be a list")
        pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionmanagedapp_apps", urnietfparamsscimschemasoracleidcsextensionmanagedapp_apps)
        if urnietfparamsscimschemasoracleidcsextensionmulticloud_service_app_apps and not isinstance(urnietfparamsscimschemasoracleidcsextensionmulticloud_service_app_apps, list):
            raise TypeError("Expected argument 'urnietfparamsscimschemasoracleidcsextensionmulticloud_service_app_apps' to be a list")
        pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionmulticloud_service_app_apps", urnietfparamsscimschemasoracleidcsextensionmulticloud_service_app_apps)
        if urnietfparamsscimschemasoracleidcsextensionopc_service_apps and not isinstance(urnietfparamsscimschemasoracleidcsextensionopc_service_apps, list):
            raise TypeError("Expected argument 'urnietfparamsscimschemasoracleidcsextensionopc_service_apps' to be a list")
        pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionopc_service_apps", urnietfparamsscimschemasoracleidcsextensionopc_service_apps)
        if urnietfparamsscimschemasoracleidcsextensionradius_app_apps and not isinstance(urnietfparamsscimschemasoracleidcsextensionradius_app_apps, list):
            raise TypeError("Expected argument 'urnietfparamsscimschemasoracleidcsextensionradius_app_apps' to be a list")
        pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionradius_app_apps", urnietfparamsscimschemasoracleidcsextensionradius_app_apps)
        if urnietfparamsscimschemasoracleidcsextensionrequestable_apps and not isinstance(urnietfparamsscimschemasoracleidcsextensionrequestable_apps, list):
            raise TypeError("Expected argument 'urnietfparamsscimschemasoracleidcsextensionrequestable_apps' to be a list")
        pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionrequestable_apps", urnietfparamsscimschemasoracleidcsextensionrequestable_apps)
        if urnietfparamsscimschemasoracleidcsextensionsaml_service_provider_apps and not isinstance(urnietfparamsscimschemasoracleidcsextensionsaml_service_provider_apps, list):
            raise TypeError("Expected argument 'urnietfparamsscimschemasoracleidcsextensionsaml_service_provider_apps' to be a list")
        pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionsaml_service_provider_apps", urnietfparamsscimschemasoracleidcsextensionsaml_service_provider_apps)
        if urnietfparamsscimschemasoracleidcsextensionweb_tier_policy_apps and not isinstance(urnietfparamsscimschemasoracleidcsextensionweb_tier_policy_apps, list):
            raise TypeError("Expected argument 'urnietfparamsscimschemasoracleidcsextensionweb_tier_policy_apps' to be a list")
        pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionweb_tier_policy_apps", urnietfparamsscimschemasoracleidcsextensionweb_tier_policy_apps)
        if user_roles and not isinstance(user_roles, list):
            raise TypeError("Expected argument 'user_roles' to be a list")
        pulumi.set(__self__, "user_roles", user_roles)

    @property
    @pulumi.getter(name="accessTokenExpiry")
    def access_token_expiry(self) -> int:
        """
        Access token expiry
        """
        return pulumi.get(self, "access_token_expiry")

    @property
    @pulumi.getter
    def accounts(self) -> Sequence['outputs.GetDomainsAppAccountResult']:
        """
        Accounts of App
        """
        return pulumi.get(self, "accounts")

    @property
    @pulumi.getter
    def active(self) -> bool:
        """
        If true, this App is able to participate in runtime services, such as automatic-login, OAuth, and SAML. If false, all runtime services are disabled for this App, and only administrative operations can be performed.
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter(name="adminRoles")
    def admin_roles(self) -> Sequence['outputs.GetDomainsAppAdminRoleResult']:
        """
        A list of AppRoles defined by this UnmanagedApp. Membership in each of these AppRoles confers administrative privilege within this App.
        """
        return pulumi.get(self, "admin_roles")

    @property
    @pulumi.getter(name="aliasApps")
    def alias_apps(self) -> Sequence['outputs.GetDomainsAppAliasAppResult']:
        """
        Each value of this internal attribute refers to an Oracle Public Cloud infrastructure App on which this App depends.
        """
        return pulumi.get(self, "alias_apps")

    @property
    @pulumi.getter(name="allUrlSchemesAllowed")
    def all_url_schemes_allowed(self) -> bool:
        """
        If true, indicates that the system should allow all URL-schemes within each value of the 'redirectUris' attribute.  Also indicates that the system should not attempt to confirm that each value of the 'redirectUris' attribute is a valid URI.  In particular, the system should not confirm that the domain component of the URI is a top-level domain and the system should not confirm that the hostname portion is a valid system that is reachable over the network.
        """
        return pulumi.get(self, "all_url_schemes_allowed")

    @property
    @pulumi.getter(name="allowAccessControl")
    def allow_access_control(self) -> bool:
        """
        If true, any managed App that is based on this template is checked for access control that is, access to this app is subject to successful authorization at SSO service, viz. app grants to start with.
        """
        return pulumi.get(self, "allow_access_control")

    @property
    @pulumi.getter(name="allowOffline")
    def allow_offline(self) -> bool:
        """
        If true, indicates that the Refresh Token is allowed when this App acts as an OAuth Resource.
        """
        return pulumi.get(self, "allow_offline")

    @property
    @pulumi.getter(name="allowedGrants")
    def allowed_grants(self) -> Sequence[str]:
        """
        List of grant-types that this App is allowed to use when it acts as an OAuthClient.
        """
        return pulumi.get(self, "allowed_grants")

    @property
    @pulumi.getter(name="allowedOperations")
    def allowed_operations(self) -> Sequence[str]:
        """
        OPTIONAL. Required only when this App acts as an OAuthClient. Supported values are 'introspect' and 'onBehalfOfUser'. The value 'introspect' allows the client to look inside the access-token. The value 'onBehalfOfUser' overrides how the client's privileges are combined with the privileges of the Subject User. Ordinarily, authorization calculates the set of effective privileges as the intersection of the client's privileges and the user's privileges. The value 'onBehalfOf' indicates that authorization should ignore the privileges of the client and use only the user's privileges to calculate the effective privileges.
        """
        return pulumi.get(self, "allowed_operations")

    @property
    @pulumi.getter(name="allowedScopes")
    def allowed_scopes(self) -> Sequence['outputs.GetDomainsAppAllowedScopeResult']:
        """
        A list of scopes (exposed by this App or by other Apps) that this App is allowed to access when it acts as an OAuthClient.
        """
        return pulumi.get(self, "allowed_scopes")

    @property
    @pulumi.getter(name="allowedTags")
    def allowed_tags(self) -> Sequence['outputs.GetDomainsAppAllowedTagResult']:
        """
        A list of tags, acting as an OAuthClient, this App is allowed to access.
        """
        return pulumi.get(self, "allowed_tags")

    @property
    @pulumi.getter(name="appIcon")
    def app_icon(self) -> str:
        """
        Application icon.
        """
        return pulumi.get(self, "app_icon")

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> str:
        """
        The id of the App that defines this AppRole, which is granted to this App. The App that defines the AppRole acts as the producer; the App to which the AppRole is granted acts as a consumer.
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="appSignonPolicies")
    def app_signon_policies(self) -> Sequence['outputs.GetDomainsAppAppSignonPolicyResult']:
        """
        App Sign-on Policy.
        """
        return pulumi.get(self, "app_signon_policies")

    @property
    @pulumi.getter(name="appThumbnail")
    def app_thumbnail(self) -> str:
        """
        Application thumbnail.
        """
        return pulumi.get(self, "app_thumbnail")

    @property
    @pulumi.getter(name="appsNetworkPerimeters")
    def apps_network_perimeters(self) -> Sequence['outputs.GetDomainsAppAppsNetworkPerimeterResult']:
        """
        Network Perimeter
        """
        return pulumi.get(self, "apps_network_perimeters")

    @property
    @pulumi.getter(name="asOpcServices")
    def as_opc_services(self) -> Sequence['outputs.GetDomainsAppAsOpcServiceResult']:
        """
        OPCService facet of the application.
        """
        return pulumi.get(self, "as_opc_services")

    @property
    @pulumi.getter(name="attrRenderingMetadatas")
    def attr_rendering_metadatas(self) -> Sequence['outputs.GetDomainsAppAttrRenderingMetadataResult']:
        """
        Label for the attribute to be shown in the UI.
        """
        return pulumi.get(self, "attr_rendering_metadatas")

    @property
    @pulumi.getter(name="attributeSets")
    def attribute_sets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "attribute_sets")

    @property
    @pulumi.getter
    def attributes(self) -> Optional[str]:
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter
    def audience(self) -> str:
        """
        The base URI for all of the scopes defined in this App. The value of 'audience' is combined with the 'value' of each scope to form an 'fqs' or fully qualified scope.
        """
        return pulumi.get(self, "audience")

    @property
    @pulumi.getter
    def authorization(self) -> Optional[str]:
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="basedOnTemplates")
    def based_on_templates(self) -> Sequence['outputs.GetDomainsAppBasedOnTemplateResult']:
        """
        Application template on which the application is based.
        """
        return pulumi.get(self, "based_on_templates")

    @property
    @pulumi.getter(name="bypassConsent")
    def bypass_consent(self) -> bool:
        """
        If true, indicates that consent should be skipped for all scopes
        """
        return pulumi.get(self, "bypass_consent")

    @property
    @pulumi.getter(name="callbackServiceUrl")
    def callback_service_url(self) -> str:
        """
        Callback Service URL
        """
        return pulumi.get(self, "callback_service_url")

    @property
    @pulumi.getter
    def certificates(self) -> Sequence['outputs.GetDomainsAppCertificateResult']:
        """
        Each value of this attribute represent a certificate that this App uses when it acts as an OAuthClient.
        """
        return pulumi.get(self, "certificates")

    @property
    @pulumi.getter(name="clientIpChecking")
    def client_ip_checking(self) -> str:
        """
        Network Perimeters checking mode
        """
        return pulumi.get(self, "client_ip_checking")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        """
        This value is the credential of this App, which this App supplies as a password when this App authenticates to the Oracle Public Cloud infrastructure. This value is also the client secret of this App when it acts as an OAuthClient.
        """
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="clientType")
    def client_type(self) -> str:
        """
        Specifies the type of access that this App has when it acts as an OAuthClient.
        """
        return pulumi.get(self, "client_type")

    @property
    @pulumi.getter(name="cloudControlProperties")
    def cloud_control_properties(self) -> Sequence['outputs.GetDomainsAppCloudControlPropertyResult']:
        """
        A collection of arbitrary properties that scope the privileges of a cloud-control App.
        """
        return pulumi.get(self, "cloud_control_properties")

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="contactEmailAddress")
    def contact_email_address(self) -> str:
        """
        Contact Email Address
        """
        return pulumi.get(self, "contact_email_address")

    @property
    @pulumi.getter(name="delegatedServiceNames")
    def delegated_service_names(self) -> Sequence[str]:
        """
        Service Names allow to use Oracle Cloud Infrastructure signature for client authentication instead of client credentials
        """
        return pulumi.get(self, "delegated_service_names")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> bool:
        """
        A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
        """
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the AppRole.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="disableKmsiTokenAuthentication")
    def disable_kmsi_token_authentication(self) -> bool:
        """
        Indicates whether the application is allowed to be access using kmsi token.
        """
        return pulumi.get(self, "disable_kmsi_token_authentication")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Display name of the flatfile bundle configuration property. This attribute maps to \\"displayName\\" attribute in \\"ConfigurationProperty\\" in ICF.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter(name="editableAttributes")
    def editable_attributes(self) -> Sequence['outputs.GetDomainsAppEditableAttributeResult']:
        """
        App attributes editable by subject
        """
        return pulumi.get(self, "editable_attributes")

    @property
    @pulumi.getter(name="errorPageUrl")
    def error_page_url(self) -> str:
        """
        This attribute specifies the URL of the page to which an application will redirect an end-user in case of error.
        """
        return pulumi.get(self, "error_page_url")

    @property
    @pulumi.getter(name="grantedAppRoles")
    def granted_app_roles(self) -> Sequence['outputs.GetDomainsAppGrantedAppRoleResult']:
        """
        A list of AppRoles that are granted to this App (and that are defined by other Apps). Within the Oracle Public Cloud infrastructure, this allows AppID-based association. Such an association allows this App to act as a consumer and thus to access resources of another App that acts as a producer.
        """
        return pulumi.get(self, "granted_app_roles")

    @property
    @pulumi.getter
    def grants(self) -> Sequence['outputs.GetDomainsAppGrantResult']:
        """
        Grants assigned to the app
        """
        return pulumi.get(self, "grants")

    @property
    @pulumi.getter(name="hashedClientSecret")
    def hashed_client_secret(self) -> str:
        """
        Hashed Client Secret. This hash-value is used to verify the 'clientSecret' credential of this App
        """
        return pulumi.get(self, "hashed_client_secret")

    @property
    @pulumi.getter(name="homePageUrl")
    def home_page_url(self) -> str:
        """
        Home Page URL
        """
        return pulumi.get(self, "home_page_url")

    @property
    @pulumi.getter
    def icon(self) -> str:
        """
        URL of application icon.
        """
        return pulumi.get(self, "icon")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider's entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idTokenEncAlgo")
    def id_token_enc_algo(self) -> str:
        """
        Encryption Alogrithm to use for encrypting ID token.
        """
        return pulumi.get(self, "id_token_enc_algo")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Sequence['outputs.GetDomainsAppIdcsCreatedByResult']:
        """
        The User or App who created the Resource
        """
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> str:
        return pulumi.get(self, "idcs_endpoint")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Sequence['outputs.GetDomainsAppIdcsLastModifiedByResult']:
        """
        The User or App who modified the Resource
        """
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> str:
        """
        The release number when the resource was upgraded.
        """
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Sequence[str]:
        """
        Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
        """
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter(name="identityProviders")
    def identity_providers(self) -> Sequence['outputs.GetDomainsAppIdentityProviderResult']:
        """
        A list of IdentityProvider assigned to app. A user trying to access this app will be automatically redirected to configured IdP during the authentication phase, before being able to access App.
        """
        return pulumi.get(self, "identity_providers")

    @property
    @pulumi.getter(name="idpPolicies")
    def idp_policies(self) -> Sequence['outputs.GetDomainsAppIdpPolicyResult']:
        """
        IDP Policy.
        """
        return pulumi.get(self, "idp_policies")

    @property
    @pulumi.getter
    def infrastructure(self) -> bool:
        """
        If true, this App is an internal infrastructure App.
        """
        return pulumi.get(self, "infrastructure")

    @property
    @pulumi.getter(name="isAliasApp")
    def is_alias_app(self) -> bool:
        """
        If true, this App is an AliasApp and it cannot be granted to an end-user directly.
        """
        return pulumi.get(self, "is_alias_app")

    @property
    @pulumi.getter(name="isDatabaseService")
    def is_database_service(self) -> bool:
        """
        If true, this application acts as database service Application
        """
        return pulumi.get(self, "is_database_service")

    @property
    @pulumi.getter(name="isEnterpriseApp")
    def is_enterprise_app(self) -> bool:
        """
        If true, this app acts as Enterprise app with Authentication and URL Authz policy.
        """
        return pulumi.get(self, "is_enterprise_app")

    @property
    @pulumi.getter(name="isFormFill")
    def is_form_fill(self) -> bool:
        """
        If true, this application acts as FormFill Application
        """
        return pulumi.get(self, "is_form_fill")

    @property
    @pulumi.getter(name="isKerberosRealm")
    def is_kerberos_realm(self) -> bool:
        """
        If true, indicates that this App supports Kerberos Authentication
        """
        return pulumi.get(self, "is_kerberos_realm")

    @property
    @pulumi.getter(name="isLoginTarget")
    def is_login_target(self) -> bool:
        """
        If true, this App allows runtime services to log end users into this App automatically.
        """
        return pulumi.get(self, "is_login_target")

    @property
    @pulumi.getter(name="isManagedApp")
    def is_managed_app(self) -> bool:
        """
        If true, indicates that access to this App requires an account. That is, in order to log in to the App, a User must use an application-specific identity that is maintained in the remote identity-repository of that App.
        """
        return pulumi.get(self, "is_managed_app")

    @property
    @pulumi.getter(name="isMobileTarget")
    def is_mobile_target(self) -> bool:
        """
        If true, indicates that the App should be visible in each end-user's mobile application.
        """
        return pulumi.get(self, "is_mobile_target")

    @property
    @pulumi.getter(name="isMulticloudServiceApp")
    def is_multicloud_service_app(self) -> bool:
        """
        If true, indicates the app is used for multicloud service integration.
        """
        return pulumi.get(self, "is_multicloud_service_app")

    @property
    @pulumi.getter(name="isOauthClient")
    def is_oauth_client(self) -> bool:
        """
        If true, this application acts as an OAuth Client
        """
        return pulumi.get(self, "is_oauth_client")

    @property
    @pulumi.getter(name="isOauthResource")
    def is_oauth_resource(self) -> bool:
        """
        If true, indicates that this application acts as an OAuth Resource.
        """
        return pulumi.get(self, "is_oauth_resource")

    @property
    @pulumi.getter(name="isObligationCapable")
    def is_obligation_capable(self) -> bool:
        """
        This flag indicates if the App is capable of validating obligations with the token for allowing access to the App.
        """
        return pulumi.get(self, "is_obligation_capable")

    @property
    @pulumi.getter(name="isOpcService")
    def is_opc_service(self) -> bool:
        """
        If true, this application is an Oracle Public Cloud service-instance.
        """
        return pulumi.get(self, "is_opc_service")

    @property
    @pulumi.getter(name="isRadiusApp")
    def is_radius_app(self) -> bool:
        """
        If true, this application acts as an Radius App
        """
        return pulumi.get(self, "is_radius_app")

    @property
    @pulumi.getter(name="isSamlServiceProvider")
    def is_saml_service_provider(self) -> bool:
        """
        If true, then this App acts as a SAML Service Provider.
        """
        return pulumi.get(self, "is_saml_service_provider")

    @property
    @pulumi.getter(name="isUnmanagedApp")
    def is_unmanaged_app(self) -> bool:
        """
        If true, indicates that this application accepts an Oracle Cloud Identity Service User as a login-identity (does not require an account) and relies for authorization on the User's memberships in AppRoles.
        """
        return pulumi.get(self, "is_unmanaged_app")

    @property
    @pulumi.getter(name="isWebTierPolicy")
    def is_web_tier_policy(self) -> bool:
        """
        If true, the webtier policy is active
        """
        return pulumi.get(self, "is_web_tier_policy")

    @property
    @pulumi.getter(name="landingPageUrl")
    def landing_page_url(self) -> str:
        """
        The URL of the landing page for this App, which is the first page that an end user should see if runtime services log that end user in to this App automatically.
        """
        return pulumi.get(self, "landing_page_url")

    @property
    @pulumi.getter(name="linkingCallbackUrl")
    def linking_callback_url(self) -> str:
        """
        This attribute specifies the callback URL for the social linking operation.
        """
        return pulumi.get(self, "linking_callback_url")

    @property
    @pulumi.getter(name="loginMechanism")
    def login_mechanism(self) -> str:
        """
        The protocol that runtime services will use to log end users in to this App automatically. If 'OIDC', then runtime services use the OpenID Connect protocol. If 'SAML', then runtime services use Security Assertion Markup Language protocol.
        """
        return pulumi.get(self, "login_mechanism")

    @property
    @pulumi.getter(name="loginPageUrl")
    def login_page_url(self) -> str:
        """
        This attribute specifies the URL of the page that the App uses when an end-user signs in to that App.
        """
        return pulumi.get(self, "login_page_url")

    @property
    @pulumi.getter(name="logoutPageUrl")
    def logout_page_url(self) -> str:
        """
        This attribute specifies the URL of the page that the App uses when an end-user signs out.
        """
        return pulumi.get(self, "logout_page_url")

    @property
    @pulumi.getter(name="logoutUri")
    def logout_uri(self) -> str:
        """
        OAuth will use this URI to logout if this App wants to participate in SSO, and if this App's session gets cleared as part of global logout. Note: This attribute is used only if this App acts as an OAuthClient.
        """
        return pulumi.get(self, "logout_uri")

    @property
    @pulumi.getter
    def metas(self) -> Sequence['outputs.GetDomainsAppMetaResult']:
        """
        A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
        """
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter(name="meterAsOpcService")
    def meter_as_opc_service(self) -> bool:
        """
        Indicates whether the application is billed as an OPCService. If true, customer is not billed for runtime operations of the app.
        """
        return pulumi.get(self, "meter_as_opc_service")

    @property
    @pulumi.getter
    def migrated(self) -> bool:
        """
        If true, this App was migrated from an earlier version of Oracle Public Cloud infrastructure (and may therefore require special handling from runtime services such as OAuth or SAML). If false, this App requires no special handling from runtime services.
        """
        return pulumi.get(self, "migrated")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The attribute represents the name of the attribute that will be used in the Security Assertion Markup Language (SAML) assertion
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="postLogoutRedirectUris")
    def post_logout_redirect_uris(self) -> Sequence[str]:
        """
        Each value of this attribute is the URI of a landing page within this App. It is used only when this App, acting as an OAuthClient, initiates the logout flow and wants to be redirected back to one of its landing pages.
        """
        return pulumi.get(self, "post_logout_redirect_uris")

    @property
    @pulumi.getter(name="privacyPolicyUrl")
    def privacy_policy_url(self) -> str:
        """
        Privacy Policy URL
        """
        return pulumi.get(self, "privacy_policy_url")

    @property
    @pulumi.getter(name="productLogoUrl")
    def product_logo_url(self) -> str:
        """
        Application Logo URL
        """
        return pulumi.get(self, "product_logo_url")

    @property
    @pulumi.getter(name="productName")
    def product_name(self) -> str:
        """
        Product Name
        """
        return pulumi.get(self, "product_name")

    @property
    @pulumi.getter(name="protectableSecondaryAudiences")
    def protectable_secondary_audiences(self) -> Sequence['outputs.GetDomainsAppProtectableSecondaryAudienceResult']:
        """
        A list of secondary audiences--additional URIs to be added automatically to any OAuth token that allows access to this App. Note: This attribute is used mainly for backward compatibility in certain Oracle Public Cloud Apps.
        """
        return pulumi.get(self, "protectable_secondary_audiences")

    @property
    @pulumi.getter(name="radiusPolicies")
    def radius_policies(self) -> Sequence['outputs.GetDomainsAppRadiusPolicyResult']:
        """
        RADIUS Policy assigned to this application.
        """
        return pulumi.get(self, "radius_policies")

    @property
    @pulumi.getter(name="readyToUpgrade")
    def ready_to_upgrade(self) -> bool:
        """
        If true, this App requires an upgrade and mandates attention from application administrator. The flag is used by UI to indicate this app is ready to upgrade.
        """
        return pulumi.get(self, "ready_to_upgrade")

    @property
    @pulumi.getter(name="redirectUris")
    def redirect_uris(self) -> Sequence[str]:
        """
        OPTIONAL. Each value is a URI within this App. This attribute is required when this App acts as an OAuthClient and is involved in three-legged flows (authorization-code flows).
        """
        return pulumi.get(self, "redirect_uris")

    @property
    @pulumi.getter(name="refreshTokenExpiry")
    def refresh_token_expiry(self) -> int:
        """
        Expiry-time in seconds for a Refresh Token.  Any token that allows access to this App, once refreshed, will expire after the specified duration.
        """
        return pulumi.get(self, "refresh_token_expiry")

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> Optional[str]:
        return pulumi.get(self, "resource_type_schema_version")

    @property
    @pulumi.getter(name="samlServiceProviders")
    def saml_service_providers(self) -> Sequence['outputs.GetDomainsAppSamlServiceProviderResult']:
        """
        An attribute that refers to the SAML Service Provider that runtime services will use to log an end user in to this App automatically. Note that this will be used only if the loginMechanism is 'SAML'.
        """
        return pulumi.get(self, "saml_service_providers")

    @property
    @pulumi.getter
    def schemas(self) -> Sequence[str]:
        """
        REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \\"enterprise\\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
        """
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter
    def scopes(self) -> Sequence['outputs.GetDomainsAppScopeResult']:
        """
        Scopes defined by this App. Used when this App acts as an OAuth Resource.
        """
        return pulumi.get(self, "scopes")

    @property
    @pulumi.getter(name="secondaryAudiences")
    def secondary_audiences(self) -> Sequence[str]:
        """
        A list of secondary audiences--additional URIs to be added automatically to any OAuth token that allows access to this App. Note: This attribute is used mainly for backward compatibility in certain Oracle Public Cloud Apps.
        """
        return pulumi.get(self, "secondary_audiences")

    @property
    @pulumi.getter(name="serviceParams")
    def service_params(self) -> Sequence['outputs.GetDomainsAppServiceParamResult']:
        """
        Custom attribute that is required to compute other attribute values during app creation.
        """
        return pulumi.get(self, "service_params")

    @property
    @pulumi.getter(name="serviceTypeUrn")
    def service_type_urn(self) -> str:
        """
        This Uniform Resource Name (URN) value identifies the type of Oracle Public Cloud service of which this app is an instance.
        """
        return pulumi.get(self, "service_type_urn")

    @property
    @pulumi.getter(name="serviceTypeVersion")
    def service_type_version(self) -> str:
        """
        This value specifies the version of the Oracle Public Cloud service of which this App is an instance
        """
        return pulumi.get(self, "service_type_version")

    @property
    @pulumi.getter(name="showInMyApps")
    def show_in_my_apps(self) -> bool:
        """
        If true, this app will be displayed in the MyApps page of each end-user who has access to the App.
        """
        return pulumi.get(self, "show_in_my_apps")

    @property
    @pulumi.getter(name="signonPolicies")
    def signon_policies(self) -> Sequence['outputs.GetDomainsAppSignonPolicyResult']:
        """
        Sign-on Policy.
        """
        return pulumi.get(self, "signon_policies")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetDomainsAppTagResult']:
        """
        A list of tags on this resource.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "tenancy_ocid")

    @property
    @pulumi.getter(name="termsOfServiceUrl")
    def terms_of_service_url(self) -> str:
        """
        Terms of Service URL
        """
        return pulumi.get(self, "terms_of_service_url")

    @property
    @pulumi.getter(name="termsOfUses")
    def terms_of_uses(self) -> Sequence['outputs.GetDomainsAppTermsOfUseResult']:
        """
        Terms Of Use.
        """
        return pulumi.get(self, "terms_of_uses")

    @property
    @pulumi.getter(name="trustPolicies")
    def trust_policies(self) -> Sequence['outputs.GetDomainsAppTrustPolicyResult']:
        """
        Trust Policies.
        """
        return pulumi.get(self, "trust_policies")

    @property
    @pulumi.getter(name="trustScope")
    def trust_scope(self) -> str:
        """
        Indicates the scope of trust for this App when acting as an OAuthClient. A value of 'Explicit' indicates that the App is allowed to access only the scopes of OAuthResources that are explicitly specified as 'allowedScopes'. A value of 'Account' indicates that the App is allowed implicitly to access any scope of any OAuthResource within the same Oracle Cloud Account. A value of 'Tags' indicates that the App is allowed to access any scope of any OAuthResource with a matching tag within the same Oracle Cloud Account. A value of 'Default' indicates that the Tenant default trust scope configured in the Tenant Settings is used.
        """
        return pulumi.get(self, "trust_scope")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionOciTags")
    def urnietfparamsscimschemasoracleidcsextension_oci_tags(self) -> Sequence['outputs.GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionOciTagResult']:
        """
        Oracle Cloud Infrastructure Tags.
        """
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextension_oci_tags")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensiondbcsApps")
    def urnietfparamsscimschemasoracleidcsextensiondbcs_apps(self) -> Sequence['outputs.GetDomainsAppUrnietfparamsscimschemasoracleidcsextensiondbcsAppResult']:
        """
        This extension provides attributes for database service facet of an App
        """
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensiondbcs_apps")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionenterpriseAppApps")
    def urnietfparamsscimschemasoracleidcsextensionenterprise_app_apps(self) -> Sequence['outputs.GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppAppResult']:
        """
        This extension defines the Enterprise App related attributes.
        """
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionenterprise_app_apps")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionformFillAppApps")
    def urnietfparamsscimschemasoracleidcsextensionform_fill_app_apps(self) -> Sequence['outputs.GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppAppResult']:
        """
        This extension provides attributes for Form-Fill facet of App
        """
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionform_fill_app_apps")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionformFillAppTemplateAppTemplates")
    def urnietfparamsscimschemasoracleidcsextensionform_fill_app_template_app_templates(self) -> Sequence['outputs.GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppTemplateAppTemplateResult']:
        """
        This extension provides attributes for Form-Fill facet of AppTemplate
        """
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionform_fill_app_template_app_templates")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionkerberosRealmApps")
    def urnietfparamsscimschemasoracleidcsextensionkerberos_realm_apps(self) -> Sequence['outputs.GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionkerberosRealmAppResult']:
        """
        Kerberos Realm
        """
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionkerberos_realm_apps")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionmanagedappApps")
    def urnietfparamsscimschemasoracleidcsextensionmanagedapp_apps(self) -> Sequence['outputs.GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppResult']:
        """
        Managed App
        """
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionmanagedapp_apps")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionmulticloudServiceAppApps")
    def urnietfparamsscimschemasoracleidcsextensionmulticloud_service_app_apps(self) -> Sequence['outputs.GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionmulticloudServiceAppAppResult']:
        """
        This extension defines attributes specific to Apps that represent instances of Multicloud Service App
        """
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionmulticloud_service_app_apps")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionopcServiceApps")
    def urnietfparamsscimschemasoracleidcsextensionopc_service_apps(self) -> Sequence['outputs.GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionopcServiceAppResult']:
        """
        This extension defines attributes specific to Apps that represent instances of an Oracle Public Cloud (OPC) service.
        """
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionopc_service_apps")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionradiusAppApps")
    def urnietfparamsscimschemasoracleidcsextensionradius_app_apps(self) -> Sequence['outputs.GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionradiusAppAppResult']:
        """
        This extension defines attributes specific to Apps that represent instances of Radius App.
        """
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionradius_app_apps")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionrequestableApps")
    def urnietfparamsscimschemasoracleidcsextensionrequestable_apps(self) -> Sequence['outputs.GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionrequestableAppResult']:
        """
        Requestable App
        """
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionrequestable_apps")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionsamlServiceProviderApps")
    def urnietfparamsscimschemasoracleidcsextensionsaml_service_provider_apps(self) -> Sequence['outputs.GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppResult']:
        """
        This extension defines attributes related to the Service Providers configuration.
        """
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionsaml_service_provider_apps")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionwebTierPolicyApps")
    def urnietfparamsscimschemasoracleidcsextensionweb_tier_policy_apps(self) -> Sequence['outputs.GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionwebTierPolicyAppResult']:
        """
        WebTier Policy
        """
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionweb_tier_policy_apps")

    @property
    @pulumi.getter(name="userRoles")
    def user_roles(self) -> Sequence['outputs.GetDomainsAppUserRoleResult']:
        """
        A list of AppRoles defined by this UnmanagedApp. Membership in each of these AppRoles confers end-user privilege within this App.
        """
        return pulumi.get(self, "user_roles")


class AwaitableGetDomainsAppResult(GetDomainsAppResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDomainsAppResult(
            access_token_expiry=self.access_token_expiry,
            accounts=self.accounts,
            active=self.active,
            admin_roles=self.admin_roles,
            alias_apps=self.alias_apps,
            all_url_schemes_allowed=self.all_url_schemes_allowed,
            allow_access_control=self.allow_access_control,
            allow_offline=self.allow_offline,
            allowed_grants=self.allowed_grants,
            allowed_operations=self.allowed_operations,
            allowed_scopes=self.allowed_scopes,
            allowed_tags=self.allowed_tags,
            app_icon=self.app_icon,
            app_id=self.app_id,
            app_signon_policies=self.app_signon_policies,
            app_thumbnail=self.app_thumbnail,
            apps_network_perimeters=self.apps_network_perimeters,
            as_opc_services=self.as_opc_services,
            attr_rendering_metadatas=self.attr_rendering_metadatas,
            attribute_sets=self.attribute_sets,
            attributes=self.attributes,
            audience=self.audience,
            authorization=self.authorization,
            based_on_templates=self.based_on_templates,
            bypass_consent=self.bypass_consent,
            callback_service_url=self.callback_service_url,
            certificates=self.certificates,
            client_ip_checking=self.client_ip_checking,
            client_secret=self.client_secret,
            client_type=self.client_type,
            cloud_control_properties=self.cloud_control_properties,
            compartment_ocid=self.compartment_ocid,
            contact_email_address=self.contact_email_address,
            delegated_service_names=self.delegated_service_names,
            delete_in_progress=self.delete_in_progress,
            description=self.description,
            disable_kmsi_token_authentication=self.disable_kmsi_token_authentication,
            display_name=self.display_name,
            domain_ocid=self.domain_ocid,
            editable_attributes=self.editable_attributes,
            error_page_url=self.error_page_url,
            granted_app_roles=self.granted_app_roles,
            grants=self.grants,
            hashed_client_secret=self.hashed_client_secret,
            home_page_url=self.home_page_url,
            icon=self.icon,
            id=self.id,
            id_token_enc_algo=self.id_token_enc_algo,
            idcs_created_bies=self.idcs_created_bies,
            idcs_endpoint=self.idcs_endpoint,
            idcs_last_modified_bies=self.idcs_last_modified_bies,
            idcs_last_upgraded_in_release=self.idcs_last_upgraded_in_release,
            idcs_prevented_operations=self.idcs_prevented_operations,
            identity_providers=self.identity_providers,
            idp_policies=self.idp_policies,
            infrastructure=self.infrastructure,
            is_alias_app=self.is_alias_app,
            is_database_service=self.is_database_service,
            is_enterprise_app=self.is_enterprise_app,
            is_form_fill=self.is_form_fill,
            is_kerberos_realm=self.is_kerberos_realm,
            is_login_target=self.is_login_target,
            is_managed_app=self.is_managed_app,
            is_mobile_target=self.is_mobile_target,
            is_multicloud_service_app=self.is_multicloud_service_app,
            is_oauth_client=self.is_oauth_client,
            is_oauth_resource=self.is_oauth_resource,
            is_obligation_capable=self.is_obligation_capable,
            is_opc_service=self.is_opc_service,
            is_radius_app=self.is_radius_app,
            is_saml_service_provider=self.is_saml_service_provider,
            is_unmanaged_app=self.is_unmanaged_app,
            is_web_tier_policy=self.is_web_tier_policy,
            landing_page_url=self.landing_page_url,
            linking_callback_url=self.linking_callback_url,
            login_mechanism=self.login_mechanism,
            login_page_url=self.login_page_url,
            logout_page_url=self.logout_page_url,
            logout_uri=self.logout_uri,
            metas=self.metas,
            meter_as_opc_service=self.meter_as_opc_service,
            migrated=self.migrated,
            name=self.name,
            ocid=self.ocid,
            post_logout_redirect_uris=self.post_logout_redirect_uris,
            privacy_policy_url=self.privacy_policy_url,
            product_logo_url=self.product_logo_url,
            product_name=self.product_name,
            protectable_secondary_audiences=self.protectable_secondary_audiences,
            radius_policies=self.radius_policies,
            ready_to_upgrade=self.ready_to_upgrade,
            redirect_uris=self.redirect_uris,
            refresh_token_expiry=self.refresh_token_expiry,
            resource_type_schema_version=self.resource_type_schema_version,
            saml_service_providers=self.saml_service_providers,
            schemas=self.schemas,
            scopes=self.scopes,
            secondary_audiences=self.secondary_audiences,
            service_params=self.service_params,
            service_type_urn=self.service_type_urn,
            service_type_version=self.service_type_version,
            show_in_my_apps=self.show_in_my_apps,
            signon_policies=self.signon_policies,
            tags=self.tags,
            tenancy_ocid=self.tenancy_ocid,
            terms_of_service_url=self.terms_of_service_url,
            terms_of_uses=self.terms_of_uses,
            trust_policies=self.trust_policies,
            trust_scope=self.trust_scope,
            urnietfparamsscimschemasoracleidcsextension_oci_tags=self.urnietfparamsscimschemasoracleidcsextension_oci_tags,
            urnietfparamsscimschemasoracleidcsextensiondbcs_apps=self.urnietfparamsscimschemasoracleidcsextensiondbcs_apps,
            urnietfparamsscimschemasoracleidcsextensionenterprise_app_apps=self.urnietfparamsscimschemasoracleidcsextensionenterprise_app_apps,
            urnietfparamsscimschemasoracleidcsextensionform_fill_app_apps=self.urnietfparamsscimschemasoracleidcsextensionform_fill_app_apps,
            urnietfparamsscimschemasoracleidcsextensionform_fill_app_template_app_templates=self.urnietfparamsscimschemasoracleidcsextensionform_fill_app_template_app_templates,
            urnietfparamsscimschemasoracleidcsextensionkerberos_realm_apps=self.urnietfparamsscimschemasoracleidcsextensionkerberos_realm_apps,
            urnietfparamsscimschemasoracleidcsextensionmanagedapp_apps=self.urnietfparamsscimschemasoracleidcsextensionmanagedapp_apps,
            urnietfparamsscimschemasoracleidcsextensionmulticloud_service_app_apps=self.urnietfparamsscimschemasoracleidcsextensionmulticloud_service_app_apps,
            urnietfparamsscimschemasoracleidcsextensionopc_service_apps=self.urnietfparamsscimschemasoracleidcsextensionopc_service_apps,
            urnietfparamsscimschemasoracleidcsextensionradius_app_apps=self.urnietfparamsscimschemasoracleidcsextensionradius_app_apps,
            urnietfparamsscimschemasoracleidcsextensionrequestable_apps=self.urnietfparamsscimschemasoracleidcsextensionrequestable_apps,
            urnietfparamsscimschemasoracleidcsextensionsaml_service_provider_apps=self.urnietfparamsscimschemasoracleidcsextensionsaml_service_provider_apps,
            urnietfparamsscimschemasoracleidcsextensionweb_tier_policy_apps=self.urnietfparamsscimschemasoracleidcsextensionweb_tier_policy_apps,
            user_roles=self.user_roles)


def get_domains_app(app_id: Optional[str] = None,
                    attribute_sets: Optional[Sequence[str]] = None,
                    attributes: Optional[str] = None,
                    authorization: Optional[str] = None,
                    idcs_endpoint: Optional[str] = None,
                    resource_type_schema_version: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDomainsAppResult:
    """
    This data source provides details about a specific App resource in Oracle Cloud Infrastructure Identity Domains service.

    Get an App

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_app = oci.Identity.get_domains_app(app_id=oci_identity_domains_app["test_app"]["id"],
        idcs_endpoint=data["oci_identity_domain"]["test_domain"]["url"],
        attribute_sets=["all"],
        attributes="",
        authorization=var["app_authorization"],
        resource_type_schema_version=var["app_resource_type_schema_version"])
    ```


    :param str app_id: ID of the resource
    :param Sequence[str] attribute_sets: A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    :param str attributes: A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    :param str authorization: The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    :param str idcs_endpoint: The basic endpoint for the identity domain
    :param str resource_type_schema_version: An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    """
    __args__ = dict()
    __args__['appId'] = app_id
    __args__['attributeSets'] = attribute_sets
    __args__['attributes'] = attributes
    __args__['authorization'] = authorization
    __args__['idcsEndpoint'] = idcs_endpoint
    __args__['resourceTypeSchemaVersion'] = resource_type_schema_version
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:Identity/getDomainsApp:getDomainsApp', __args__, opts=opts, typ=GetDomainsAppResult).value

    return AwaitableGetDomainsAppResult(
        access_token_expiry=pulumi.get(__ret__, 'access_token_expiry'),
        accounts=pulumi.get(__ret__, 'accounts'),
        active=pulumi.get(__ret__, 'active'),
        admin_roles=pulumi.get(__ret__, 'admin_roles'),
        alias_apps=pulumi.get(__ret__, 'alias_apps'),
        all_url_schemes_allowed=pulumi.get(__ret__, 'all_url_schemes_allowed'),
        allow_access_control=pulumi.get(__ret__, 'allow_access_control'),
        allow_offline=pulumi.get(__ret__, 'allow_offline'),
        allowed_grants=pulumi.get(__ret__, 'allowed_grants'),
        allowed_operations=pulumi.get(__ret__, 'allowed_operations'),
        allowed_scopes=pulumi.get(__ret__, 'allowed_scopes'),
        allowed_tags=pulumi.get(__ret__, 'allowed_tags'),
        app_icon=pulumi.get(__ret__, 'app_icon'),
        app_id=pulumi.get(__ret__, 'app_id'),
        app_signon_policies=pulumi.get(__ret__, 'app_signon_policies'),
        app_thumbnail=pulumi.get(__ret__, 'app_thumbnail'),
        apps_network_perimeters=pulumi.get(__ret__, 'apps_network_perimeters'),
        as_opc_services=pulumi.get(__ret__, 'as_opc_services'),
        attr_rendering_metadatas=pulumi.get(__ret__, 'attr_rendering_metadatas'),
        attribute_sets=pulumi.get(__ret__, 'attribute_sets'),
        attributes=pulumi.get(__ret__, 'attributes'),
        audience=pulumi.get(__ret__, 'audience'),
        authorization=pulumi.get(__ret__, 'authorization'),
        based_on_templates=pulumi.get(__ret__, 'based_on_templates'),
        bypass_consent=pulumi.get(__ret__, 'bypass_consent'),
        callback_service_url=pulumi.get(__ret__, 'callback_service_url'),
        certificates=pulumi.get(__ret__, 'certificates'),
        client_ip_checking=pulumi.get(__ret__, 'client_ip_checking'),
        client_secret=pulumi.get(__ret__, 'client_secret'),
        client_type=pulumi.get(__ret__, 'client_type'),
        cloud_control_properties=pulumi.get(__ret__, 'cloud_control_properties'),
        compartment_ocid=pulumi.get(__ret__, 'compartment_ocid'),
        contact_email_address=pulumi.get(__ret__, 'contact_email_address'),
        delegated_service_names=pulumi.get(__ret__, 'delegated_service_names'),
        delete_in_progress=pulumi.get(__ret__, 'delete_in_progress'),
        description=pulumi.get(__ret__, 'description'),
        disable_kmsi_token_authentication=pulumi.get(__ret__, 'disable_kmsi_token_authentication'),
        display_name=pulumi.get(__ret__, 'display_name'),
        domain_ocid=pulumi.get(__ret__, 'domain_ocid'),
        editable_attributes=pulumi.get(__ret__, 'editable_attributes'),
        error_page_url=pulumi.get(__ret__, 'error_page_url'),
        granted_app_roles=pulumi.get(__ret__, 'granted_app_roles'),
        grants=pulumi.get(__ret__, 'grants'),
        hashed_client_secret=pulumi.get(__ret__, 'hashed_client_secret'),
        home_page_url=pulumi.get(__ret__, 'home_page_url'),
        icon=pulumi.get(__ret__, 'icon'),
        id=pulumi.get(__ret__, 'id'),
        id_token_enc_algo=pulumi.get(__ret__, 'id_token_enc_algo'),
        idcs_created_bies=pulumi.get(__ret__, 'idcs_created_bies'),
        idcs_endpoint=pulumi.get(__ret__, 'idcs_endpoint'),
        idcs_last_modified_bies=pulumi.get(__ret__, 'idcs_last_modified_bies'),
        idcs_last_upgraded_in_release=pulumi.get(__ret__, 'idcs_last_upgraded_in_release'),
        idcs_prevented_operations=pulumi.get(__ret__, 'idcs_prevented_operations'),
        identity_providers=pulumi.get(__ret__, 'identity_providers'),
        idp_policies=pulumi.get(__ret__, 'idp_policies'),
        infrastructure=pulumi.get(__ret__, 'infrastructure'),
        is_alias_app=pulumi.get(__ret__, 'is_alias_app'),
        is_database_service=pulumi.get(__ret__, 'is_database_service'),
        is_enterprise_app=pulumi.get(__ret__, 'is_enterprise_app'),
        is_form_fill=pulumi.get(__ret__, 'is_form_fill'),
        is_kerberos_realm=pulumi.get(__ret__, 'is_kerberos_realm'),
        is_login_target=pulumi.get(__ret__, 'is_login_target'),
        is_managed_app=pulumi.get(__ret__, 'is_managed_app'),
        is_mobile_target=pulumi.get(__ret__, 'is_mobile_target'),
        is_multicloud_service_app=pulumi.get(__ret__, 'is_multicloud_service_app'),
        is_oauth_client=pulumi.get(__ret__, 'is_oauth_client'),
        is_oauth_resource=pulumi.get(__ret__, 'is_oauth_resource'),
        is_obligation_capable=pulumi.get(__ret__, 'is_obligation_capable'),
        is_opc_service=pulumi.get(__ret__, 'is_opc_service'),
        is_radius_app=pulumi.get(__ret__, 'is_radius_app'),
        is_saml_service_provider=pulumi.get(__ret__, 'is_saml_service_provider'),
        is_unmanaged_app=pulumi.get(__ret__, 'is_unmanaged_app'),
        is_web_tier_policy=pulumi.get(__ret__, 'is_web_tier_policy'),
        landing_page_url=pulumi.get(__ret__, 'landing_page_url'),
        linking_callback_url=pulumi.get(__ret__, 'linking_callback_url'),
        login_mechanism=pulumi.get(__ret__, 'login_mechanism'),
        login_page_url=pulumi.get(__ret__, 'login_page_url'),
        logout_page_url=pulumi.get(__ret__, 'logout_page_url'),
        logout_uri=pulumi.get(__ret__, 'logout_uri'),
        metas=pulumi.get(__ret__, 'metas'),
        meter_as_opc_service=pulumi.get(__ret__, 'meter_as_opc_service'),
        migrated=pulumi.get(__ret__, 'migrated'),
        name=pulumi.get(__ret__, 'name'),
        ocid=pulumi.get(__ret__, 'ocid'),
        post_logout_redirect_uris=pulumi.get(__ret__, 'post_logout_redirect_uris'),
        privacy_policy_url=pulumi.get(__ret__, 'privacy_policy_url'),
        product_logo_url=pulumi.get(__ret__, 'product_logo_url'),
        product_name=pulumi.get(__ret__, 'product_name'),
        protectable_secondary_audiences=pulumi.get(__ret__, 'protectable_secondary_audiences'),
        radius_policies=pulumi.get(__ret__, 'radius_policies'),
        ready_to_upgrade=pulumi.get(__ret__, 'ready_to_upgrade'),
        redirect_uris=pulumi.get(__ret__, 'redirect_uris'),
        refresh_token_expiry=pulumi.get(__ret__, 'refresh_token_expiry'),
        resource_type_schema_version=pulumi.get(__ret__, 'resource_type_schema_version'),
        saml_service_providers=pulumi.get(__ret__, 'saml_service_providers'),
        schemas=pulumi.get(__ret__, 'schemas'),
        scopes=pulumi.get(__ret__, 'scopes'),
        secondary_audiences=pulumi.get(__ret__, 'secondary_audiences'),
        service_params=pulumi.get(__ret__, 'service_params'),
        service_type_urn=pulumi.get(__ret__, 'service_type_urn'),
        service_type_version=pulumi.get(__ret__, 'service_type_version'),
        show_in_my_apps=pulumi.get(__ret__, 'show_in_my_apps'),
        signon_policies=pulumi.get(__ret__, 'signon_policies'),
        tags=pulumi.get(__ret__, 'tags'),
        tenancy_ocid=pulumi.get(__ret__, 'tenancy_ocid'),
        terms_of_service_url=pulumi.get(__ret__, 'terms_of_service_url'),
        terms_of_uses=pulumi.get(__ret__, 'terms_of_uses'),
        trust_policies=pulumi.get(__ret__, 'trust_policies'),
        trust_scope=pulumi.get(__ret__, 'trust_scope'),
        urnietfparamsscimschemasoracleidcsextension_oci_tags=pulumi.get(__ret__, 'urnietfparamsscimschemasoracleidcsextension_oci_tags'),
        urnietfparamsscimschemasoracleidcsextensiondbcs_apps=pulumi.get(__ret__, 'urnietfparamsscimschemasoracleidcsextensiondbcs_apps'),
        urnietfparamsscimschemasoracleidcsextensionenterprise_app_apps=pulumi.get(__ret__, 'urnietfparamsscimschemasoracleidcsextensionenterprise_app_apps'),
        urnietfparamsscimschemasoracleidcsextensionform_fill_app_apps=pulumi.get(__ret__, 'urnietfparamsscimschemasoracleidcsextensionform_fill_app_apps'),
        urnietfparamsscimschemasoracleidcsextensionform_fill_app_template_app_templates=pulumi.get(__ret__, 'urnietfparamsscimschemasoracleidcsextensionform_fill_app_template_app_templates'),
        urnietfparamsscimschemasoracleidcsextensionkerberos_realm_apps=pulumi.get(__ret__, 'urnietfparamsscimschemasoracleidcsextensionkerberos_realm_apps'),
        urnietfparamsscimschemasoracleidcsextensionmanagedapp_apps=pulumi.get(__ret__, 'urnietfparamsscimschemasoracleidcsextensionmanagedapp_apps'),
        urnietfparamsscimschemasoracleidcsextensionmulticloud_service_app_apps=pulumi.get(__ret__, 'urnietfparamsscimschemasoracleidcsextensionmulticloud_service_app_apps'),
        urnietfparamsscimschemasoracleidcsextensionopc_service_apps=pulumi.get(__ret__, 'urnietfparamsscimschemasoracleidcsextensionopc_service_apps'),
        urnietfparamsscimschemasoracleidcsextensionradius_app_apps=pulumi.get(__ret__, 'urnietfparamsscimschemasoracleidcsextensionradius_app_apps'),
        urnietfparamsscimschemasoracleidcsextensionrequestable_apps=pulumi.get(__ret__, 'urnietfparamsscimschemasoracleidcsextensionrequestable_apps'),
        urnietfparamsscimschemasoracleidcsextensionsaml_service_provider_apps=pulumi.get(__ret__, 'urnietfparamsscimschemasoracleidcsextensionsaml_service_provider_apps'),
        urnietfparamsscimschemasoracleidcsextensionweb_tier_policy_apps=pulumi.get(__ret__, 'urnietfparamsscimschemasoracleidcsextensionweb_tier_policy_apps'),
        user_roles=pulumi.get(__ret__, 'user_roles'))


@_utilities.lift_output_func(get_domains_app)
def get_domains_app_output(app_id: Optional[pulumi.Input[str]] = None,
                           attribute_sets: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                           attributes: Optional[pulumi.Input[Optional[str]]] = None,
                           authorization: Optional[pulumi.Input[Optional[str]]] = None,
                           idcs_endpoint: Optional[pulumi.Input[str]] = None,
                           resource_type_schema_version: Optional[pulumi.Input[Optional[str]]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDomainsAppResult]:
    """
    This data source provides details about a specific App resource in Oracle Cloud Infrastructure Identity Domains service.

    Get an App

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_app = oci.Identity.get_domains_app(app_id=oci_identity_domains_app["test_app"]["id"],
        idcs_endpoint=data["oci_identity_domain"]["test_domain"]["url"],
        attribute_sets=["all"],
        attributes="",
        authorization=var["app_authorization"],
        resource_type_schema_version=var["app_resource_type_schema_version"])
    ```


    :param str app_id: ID of the resource
    :param Sequence[str] attribute_sets: A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    :param str attributes: A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    :param str authorization: The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    :param str idcs_endpoint: The basic endpoint for the identity domain
    :param str resource_type_schema_version: An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    """
    ...
