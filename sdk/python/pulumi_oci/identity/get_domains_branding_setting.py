# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetDomainsBrandingSettingResult',
    'AwaitableGetDomainsBrandingSettingResult',
    'get_domains_branding_setting',
    'get_domains_branding_setting_output',
]

@pulumi.output_type
class GetDomainsBrandingSettingResult:
    """
    A collection of values returned by getDomainsBrandingSetting.
    """
    def __init__(__self__, attribute_sets=None, attributes=None, authorization=None, branding_setting_id=None, company_names=None, compartment_ocid=None, custom_branding=None, custom_css_location=None, custom_html_location=None, custom_translation=None, default_company_names=None, default_images=None, default_login_texts=None, delete_in_progress=None, domain_ocid=None, enable_terms_of_use=None, external_id=None, id=None, idcs_created_bies=None, idcs_endpoint=None, idcs_last_modified_bies=None, idcs_last_upgraded_in_release=None, idcs_prevented_operations=None, images=None, is_hosted_page=None, locale=None, login_texts=None, metas=None, ocid=None, preferred_language=None, privacy_policy_url=None, resource_type_schema_version=None, schemas=None, tags=None, tenancy_ocid=None, terms_of_use_url=None, timezone=None):
        if attribute_sets and not isinstance(attribute_sets, list):
            raise TypeError("Expected argument 'attribute_sets' to be a list")
        pulumi.set(__self__, "attribute_sets", attribute_sets)
        if attributes and not isinstance(attributes, str):
            raise TypeError("Expected argument 'attributes' to be a str")
        pulumi.set(__self__, "attributes", attributes)
        if authorization and not isinstance(authorization, str):
            raise TypeError("Expected argument 'authorization' to be a str")
        pulumi.set(__self__, "authorization", authorization)
        if branding_setting_id and not isinstance(branding_setting_id, str):
            raise TypeError("Expected argument 'branding_setting_id' to be a str")
        pulumi.set(__self__, "branding_setting_id", branding_setting_id)
        if company_names and not isinstance(company_names, list):
            raise TypeError("Expected argument 'company_names' to be a list")
        pulumi.set(__self__, "company_names", company_names)
        if compartment_ocid and not isinstance(compartment_ocid, str):
            raise TypeError("Expected argument 'compartment_ocid' to be a str")
        pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        if custom_branding and not isinstance(custom_branding, bool):
            raise TypeError("Expected argument 'custom_branding' to be a bool")
        pulumi.set(__self__, "custom_branding", custom_branding)
        if custom_css_location and not isinstance(custom_css_location, str):
            raise TypeError("Expected argument 'custom_css_location' to be a str")
        pulumi.set(__self__, "custom_css_location", custom_css_location)
        if custom_html_location and not isinstance(custom_html_location, str):
            raise TypeError("Expected argument 'custom_html_location' to be a str")
        pulumi.set(__self__, "custom_html_location", custom_html_location)
        if custom_translation and not isinstance(custom_translation, str):
            raise TypeError("Expected argument 'custom_translation' to be a str")
        pulumi.set(__self__, "custom_translation", custom_translation)
        if default_company_names and not isinstance(default_company_names, list):
            raise TypeError("Expected argument 'default_company_names' to be a list")
        pulumi.set(__self__, "default_company_names", default_company_names)
        if default_images and not isinstance(default_images, list):
            raise TypeError("Expected argument 'default_images' to be a list")
        pulumi.set(__self__, "default_images", default_images)
        if default_login_texts and not isinstance(default_login_texts, list):
            raise TypeError("Expected argument 'default_login_texts' to be a list")
        pulumi.set(__self__, "default_login_texts", default_login_texts)
        if delete_in_progress and not isinstance(delete_in_progress, bool):
            raise TypeError("Expected argument 'delete_in_progress' to be a bool")
        pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        if domain_ocid and not isinstance(domain_ocid, str):
            raise TypeError("Expected argument 'domain_ocid' to be a str")
        pulumi.set(__self__, "domain_ocid", domain_ocid)
        if enable_terms_of_use and not isinstance(enable_terms_of_use, bool):
            raise TypeError("Expected argument 'enable_terms_of_use' to be a bool")
        pulumi.set(__self__, "enable_terms_of_use", enable_terms_of_use)
        if external_id and not isinstance(external_id, str):
            raise TypeError("Expected argument 'external_id' to be a str")
        pulumi.set(__self__, "external_id", external_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if idcs_created_bies and not isinstance(idcs_created_bies, list):
            raise TypeError("Expected argument 'idcs_created_bies' to be a list")
        pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        if idcs_endpoint and not isinstance(idcs_endpoint, str):
            raise TypeError("Expected argument 'idcs_endpoint' to be a str")
        pulumi.set(__self__, "idcs_endpoint", idcs_endpoint)
        if idcs_last_modified_bies and not isinstance(idcs_last_modified_bies, list):
            raise TypeError("Expected argument 'idcs_last_modified_bies' to be a list")
        pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        if idcs_last_upgraded_in_release and not isinstance(idcs_last_upgraded_in_release, str):
            raise TypeError("Expected argument 'idcs_last_upgraded_in_release' to be a str")
        pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        if idcs_prevented_operations and not isinstance(idcs_prevented_operations, list):
            raise TypeError("Expected argument 'idcs_prevented_operations' to be a list")
        pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        if images and not isinstance(images, list):
            raise TypeError("Expected argument 'images' to be a list")
        pulumi.set(__self__, "images", images)
        if is_hosted_page and not isinstance(is_hosted_page, bool):
            raise TypeError("Expected argument 'is_hosted_page' to be a bool")
        pulumi.set(__self__, "is_hosted_page", is_hosted_page)
        if locale and not isinstance(locale, str):
            raise TypeError("Expected argument 'locale' to be a str")
        pulumi.set(__self__, "locale", locale)
        if login_texts and not isinstance(login_texts, list):
            raise TypeError("Expected argument 'login_texts' to be a list")
        pulumi.set(__self__, "login_texts", login_texts)
        if metas and not isinstance(metas, list):
            raise TypeError("Expected argument 'metas' to be a list")
        pulumi.set(__self__, "metas", metas)
        if ocid and not isinstance(ocid, str):
            raise TypeError("Expected argument 'ocid' to be a str")
        pulumi.set(__self__, "ocid", ocid)
        if preferred_language and not isinstance(preferred_language, str):
            raise TypeError("Expected argument 'preferred_language' to be a str")
        pulumi.set(__self__, "preferred_language", preferred_language)
        if privacy_policy_url and not isinstance(privacy_policy_url, str):
            raise TypeError("Expected argument 'privacy_policy_url' to be a str")
        pulumi.set(__self__, "privacy_policy_url", privacy_policy_url)
        if resource_type_schema_version and not isinstance(resource_type_schema_version, str):
            raise TypeError("Expected argument 'resource_type_schema_version' to be a str")
        pulumi.set(__self__, "resource_type_schema_version", resource_type_schema_version)
        if schemas and not isinstance(schemas, list):
            raise TypeError("Expected argument 'schemas' to be a list")
        pulumi.set(__self__, "schemas", schemas)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if tenancy_ocid and not isinstance(tenancy_ocid, str):
            raise TypeError("Expected argument 'tenancy_ocid' to be a str")
        pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)
        if terms_of_use_url and not isinstance(terms_of_use_url, str):
            raise TypeError("Expected argument 'terms_of_use_url' to be a str")
        pulumi.set(__self__, "terms_of_use_url", terms_of_use_url)
        if timezone and not isinstance(timezone, str):
            raise TypeError("Expected argument 'timezone' to be a str")
        pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter(name="attributeSets")
    def attribute_sets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "attribute_sets")

    @property
    @pulumi.getter
    def attributes(self) -> Optional[str]:
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter
    def authorization(self) -> Optional[str]:
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="brandingSettingId")
    def branding_setting_id(self) -> str:
        return pulumi.get(self, "branding_setting_id")

    @property
    @pulumi.getter(name="companyNames")
    def company_names(self) -> Sequence['outputs.GetDomainsBrandingSettingCompanyNameResult']:
        """
        Name of the company in different locales
        """
        return pulumi.get(self, "company_names")

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="customBranding")
    def custom_branding(self) -> bool:
        """
        Indicates if the branding is default or is custom branding
        """
        return pulumi.get(self, "custom_branding")

    @property
    @pulumi.getter(name="customCssLocation")
    def custom_css_location(self) -> str:
        """
        Storage URL location where the sanitized custom css is located
        """
        return pulumi.get(self, "custom_css_location")

    @property
    @pulumi.getter(name="customHtmlLocation")
    def custom_html_location(self) -> str:
        """
        Storage URL location where the sanitized custom html is located
        """
        return pulumi.get(self, "custom_html_location")

    @property
    @pulumi.getter(name="customTranslation")
    def custom_translation(self) -> str:
        """
        Custom translations (JSON String)
        """
        return pulumi.get(self, "custom_translation")

    @property
    @pulumi.getter(name="defaultCompanyNames")
    def default_company_names(self) -> Sequence['outputs.GetDomainsBrandingSettingDefaultCompanyNameResult']:
        """
        Default name of the Company in different locales
        """
        return pulumi.get(self, "default_company_names")

    @property
    @pulumi.getter(name="defaultImages")
    def default_images(self) -> Sequence['outputs.GetDomainsBrandingSettingDefaultImageResult']:
        """
        References to various images
        """
        return pulumi.get(self, "default_images")

    @property
    @pulumi.getter(name="defaultLoginTexts")
    def default_login_texts(self) -> Sequence['outputs.GetDomainsBrandingSettingDefaultLoginTextResult']:
        """
        Default Login text in different locales
        """
        return pulumi.get(self, "default_login_texts")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> bool:
        """
        A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
        """
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter(name="enableTermsOfUse")
    def enable_terms_of_use(self) -> bool:
        """
        Indicates if Terms of Use is enabled in UI
        """
        return pulumi.get(self, "enable_terms_of_use")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> str:
        """
        An identifier for the Resource as defined by the Service Consumer. The externalId may simplify identification of the Resource between Service Consumer and Service Provider by allowing the Consumer to refer to the Resource with its own identifier, obviating the need to store a local mapping between the local identifier of the Resource and the identifier used by the Service Provider. Each Resource MAY include a non-empty externalId value. The value of the externalId attribute is always issued by the Service Consumer and can never be specified by the Service Provider. The Service Provider MUST always interpret the externalId as scoped to the Service Consumer's tenant.
        """
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Sequence['outputs.GetDomainsBrandingSettingIdcsCreatedByResult']:
        """
        The User or App who created the Resource
        """
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> str:
        return pulumi.get(self, "idcs_endpoint")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Sequence['outputs.GetDomainsBrandingSettingIdcsLastModifiedByResult']:
        """
        The User or App who modified the Resource
        """
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> str:
        """
        The release number when the resource was upgraded.
        """
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Sequence[str]:
        """
        Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
        """
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter
    def images(self) -> Sequence['outputs.GetDomainsBrandingSettingImageResult']:
        """
        References to various images
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="isHostedPage")
    def is_hosted_page(self) -> bool:
        """
        Indicates if 'hosted' option was selected
        """
        return pulumi.get(self, "is_hosted_page")

    @property
    @pulumi.getter
    def locale(self) -> str:
        """
        Locale
        """
        return pulumi.get(self, "locale")

    @property
    @pulumi.getter(name="loginTexts")
    def login_texts(self) -> Sequence['outputs.GetDomainsBrandingSettingLoginTextResult']:
        """
        Login text in different locales
        """
        return pulumi.get(self, "login_texts")

    @property
    @pulumi.getter
    def metas(self) -> Sequence['outputs.GetDomainsBrandingSettingMetaResult']:
        """
        A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
        """
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="preferredLanguage")
    def preferred_language(self) -> str:
        """
        Preferred written or spoken language used for localized user interfaces
        """
        return pulumi.get(self, "preferred_language")

    @property
    @pulumi.getter(name="privacyPolicyUrl")
    def privacy_policy_url(self) -> str:
        """
        Privacy Policy URL
        """
        return pulumi.get(self, "privacy_policy_url")

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> Optional[str]:
        return pulumi.get(self, "resource_type_schema_version")

    @property
    @pulumi.getter
    def schemas(self) -> Sequence[str]:
        """
        REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \\"enterprise\\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
        """
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetDomainsBrandingSettingTagResult']:
        """
        A list of tags on this resource.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "tenancy_ocid")

    @property
    @pulumi.getter(name="termsOfUseUrl")
    def terms_of_use_url(self) -> str:
        """
        Terms of Use URL
        """
        return pulumi.get(self, "terms_of_use_url")

    @property
    @pulumi.getter
    def timezone(self) -> str:
        """
        User's timezone
        """
        return pulumi.get(self, "timezone")


class AwaitableGetDomainsBrandingSettingResult(GetDomainsBrandingSettingResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDomainsBrandingSettingResult(
            attribute_sets=self.attribute_sets,
            attributes=self.attributes,
            authorization=self.authorization,
            branding_setting_id=self.branding_setting_id,
            company_names=self.company_names,
            compartment_ocid=self.compartment_ocid,
            custom_branding=self.custom_branding,
            custom_css_location=self.custom_css_location,
            custom_html_location=self.custom_html_location,
            custom_translation=self.custom_translation,
            default_company_names=self.default_company_names,
            default_images=self.default_images,
            default_login_texts=self.default_login_texts,
            delete_in_progress=self.delete_in_progress,
            domain_ocid=self.domain_ocid,
            enable_terms_of_use=self.enable_terms_of_use,
            external_id=self.external_id,
            id=self.id,
            idcs_created_bies=self.idcs_created_bies,
            idcs_endpoint=self.idcs_endpoint,
            idcs_last_modified_bies=self.idcs_last_modified_bies,
            idcs_last_upgraded_in_release=self.idcs_last_upgraded_in_release,
            idcs_prevented_operations=self.idcs_prevented_operations,
            images=self.images,
            is_hosted_page=self.is_hosted_page,
            locale=self.locale,
            login_texts=self.login_texts,
            metas=self.metas,
            ocid=self.ocid,
            preferred_language=self.preferred_language,
            privacy_policy_url=self.privacy_policy_url,
            resource_type_schema_version=self.resource_type_schema_version,
            schemas=self.schemas,
            tags=self.tags,
            tenancy_ocid=self.tenancy_ocid,
            terms_of_use_url=self.terms_of_use_url,
            timezone=self.timezone)


def get_domains_branding_setting(attribute_sets: Optional[Sequence[str]] = None,
                                 attributes: Optional[str] = None,
                                 authorization: Optional[str] = None,
                                 branding_setting_id: Optional[str] = None,
                                 idcs_endpoint: Optional[str] = None,
                                 resource_type_schema_version: Optional[str] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDomainsBrandingSettingResult:
    """
    This data source provides details about a specific Branding Setting resource in Oracle Cloud Infrastructure Identity Domains service.

    Get Branding Settings

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_branding_setting = oci.Identity.get_domains_branding_setting(branding_setting_id="BrandingSettings",
        idcs_endpoint=data["oci_identity_domain"]["test_domain"]["url"],
        attribute_sets=["all"],
        attributes="",
        authorization=var["branding_setting_authorization"],
        resource_type_schema_version=var["branding_setting_resource_type_schema_version"])
    ```


    :param Sequence[str] attribute_sets: A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    :param str attributes: A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    :param str authorization: The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    :param str branding_setting_id: ID of the resource
    :param str idcs_endpoint: The basic endpoint for the identity domain
    :param str resource_type_schema_version: An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    """
    __args__ = dict()
    __args__['attributeSets'] = attribute_sets
    __args__['attributes'] = attributes
    __args__['authorization'] = authorization
    __args__['brandingSettingId'] = branding_setting_id
    __args__['idcsEndpoint'] = idcs_endpoint
    __args__['resourceTypeSchemaVersion'] = resource_type_schema_version
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:Identity/getDomainsBrandingSetting:getDomainsBrandingSetting', __args__, opts=opts, typ=GetDomainsBrandingSettingResult).value

    return AwaitableGetDomainsBrandingSettingResult(
        attribute_sets=pulumi.get(__ret__, 'attribute_sets'),
        attributes=pulumi.get(__ret__, 'attributes'),
        authorization=pulumi.get(__ret__, 'authorization'),
        branding_setting_id=pulumi.get(__ret__, 'branding_setting_id'),
        company_names=pulumi.get(__ret__, 'company_names'),
        compartment_ocid=pulumi.get(__ret__, 'compartment_ocid'),
        custom_branding=pulumi.get(__ret__, 'custom_branding'),
        custom_css_location=pulumi.get(__ret__, 'custom_css_location'),
        custom_html_location=pulumi.get(__ret__, 'custom_html_location'),
        custom_translation=pulumi.get(__ret__, 'custom_translation'),
        default_company_names=pulumi.get(__ret__, 'default_company_names'),
        default_images=pulumi.get(__ret__, 'default_images'),
        default_login_texts=pulumi.get(__ret__, 'default_login_texts'),
        delete_in_progress=pulumi.get(__ret__, 'delete_in_progress'),
        domain_ocid=pulumi.get(__ret__, 'domain_ocid'),
        enable_terms_of_use=pulumi.get(__ret__, 'enable_terms_of_use'),
        external_id=pulumi.get(__ret__, 'external_id'),
        id=pulumi.get(__ret__, 'id'),
        idcs_created_bies=pulumi.get(__ret__, 'idcs_created_bies'),
        idcs_endpoint=pulumi.get(__ret__, 'idcs_endpoint'),
        idcs_last_modified_bies=pulumi.get(__ret__, 'idcs_last_modified_bies'),
        idcs_last_upgraded_in_release=pulumi.get(__ret__, 'idcs_last_upgraded_in_release'),
        idcs_prevented_operations=pulumi.get(__ret__, 'idcs_prevented_operations'),
        images=pulumi.get(__ret__, 'images'),
        is_hosted_page=pulumi.get(__ret__, 'is_hosted_page'),
        locale=pulumi.get(__ret__, 'locale'),
        login_texts=pulumi.get(__ret__, 'login_texts'),
        metas=pulumi.get(__ret__, 'metas'),
        ocid=pulumi.get(__ret__, 'ocid'),
        preferred_language=pulumi.get(__ret__, 'preferred_language'),
        privacy_policy_url=pulumi.get(__ret__, 'privacy_policy_url'),
        resource_type_schema_version=pulumi.get(__ret__, 'resource_type_schema_version'),
        schemas=pulumi.get(__ret__, 'schemas'),
        tags=pulumi.get(__ret__, 'tags'),
        tenancy_ocid=pulumi.get(__ret__, 'tenancy_ocid'),
        terms_of_use_url=pulumi.get(__ret__, 'terms_of_use_url'),
        timezone=pulumi.get(__ret__, 'timezone'))


@_utilities.lift_output_func(get_domains_branding_setting)
def get_domains_branding_setting_output(attribute_sets: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                        attributes: Optional[pulumi.Input[Optional[str]]] = None,
                                        authorization: Optional[pulumi.Input[Optional[str]]] = None,
                                        branding_setting_id: Optional[pulumi.Input[str]] = None,
                                        idcs_endpoint: Optional[pulumi.Input[str]] = None,
                                        resource_type_schema_version: Optional[pulumi.Input[Optional[str]]] = None,
                                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDomainsBrandingSettingResult]:
    """
    This data source provides details about a specific Branding Setting resource in Oracle Cloud Infrastructure Identity Domains service.

    Get Branding Settings

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_branding_setting = oci.Identity.get_domains_branding_setting(branding_setting_id="BrandingSettings",
        idcs_endpoint=data["oci_identity_domain"]["test_domain"]["url"],
        attribute_sets=["all"],
        attributes="",
        authorization=var["branding_setting_authorization"],
        resource_type_schema_version=var["branding_setting_resource_type_schema_version"])
    ```


    :param Sequence[str] attribute_sets: A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    :param str attributes: A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    :param str authorization: The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    :param str branding_setting_id: ID of the resource
    :param str idcs_endpoint: The basic endpoint for the identity domain
    :param str resource_type_schema_version: An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    """
    ...
