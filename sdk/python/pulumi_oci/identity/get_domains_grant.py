# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetDomainsGrantResult',
    'AwaitableGetDomainsGrantResult',
    'get_domains_grant',
    'get_domains_grant_output',
]

@pulumi.output_type
class GetDomainsGrantResult:
    """
    A collection of values returned by getDomainsGrant.
    """
    def __init__(__self__, app_entitlement_collections=None, apps=None, attribute_sets=None, attributes=None, authorization=None, compartment_ocid=None, composite_key=None, delete_in_progress=None, domain_ocid=None, entitlements=None, grant_id=None, grant_mechanism=None, granted_attribute_values_json=None, grantees=None, grantors=None, id=None, idcs_created_bies=None, idcs_endpoint=None, idcs_last_modified_bies=None, idcs_last_upgraded_in_release=None, idcs_prevented_operations=None, is_fulfilled=None, metas=None, ocid=None, resource_type_schema_version=None, schemas=None, tags=None, tenancy_ocid=None):
        if app_entitlement_collections and not isinstance(app_entitlement_collections, list):
            raise TypeError("Expected argument 'app_entitlement_collections' to be a list")
        pulumi.set(__self__, "app_entitlement_collections", app_entitlement_collections)
        if apps and not isinstance(apps, list):
            raise TypeError("Expected argument 'apps' to be a list")
        pulumi.set(__self__, "apps", apps)
        if attribute_sets and not isinstance(attribute_sets, list):
            raise TypeError("Expected argument 'attribute_sets' to be a list")
        pulumi.set(__self__, "attribute_sets", attribute_sets)
        if attributes and not isinstance(attributes, str):
            raise TypeError("Expected argument 'attributes' to be a str")
        pulumi.set(__self__, "attributes", attributes)
        if authorization and not isinstance(authorization, str):
            raise TypeError("Expected argument 'authorization' to be a str")
        pulumi.set(__self__, "authorization", authorization)
        if compartment_ocid and not isinstance(compartment_ocid, str):
            raise TypeError("Expected argument 'compartment_ocid' to be a str")
        pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        if composite_key and not isinstance(composite_key, str):
            raise TypeError("Expected argument 'composite_key' to be a str")
        pulumi.set(__self__, "composite_key", composite_key)
        if delete_in_progress and not isinstance(delete_in_progress, bool):
            raise TypeError("Expected argument 'delete_in_progress' to be a bool")
        pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        if domain_ocid and not isinstance(domain_ocid, str):
            raise TypeError("Expected argument 'domain_ocid' to be a str")
        pulumi.set(__self__, "domain_ocid", domain_ocid)
        if entitlements and not isinstance(entitlements, list):
            raise TypeError("Expected argument 'entitlements' to be a list")
        pulumi.set(__self__, "entitlements", entitlements)
        if grant_id and not isinstance(grant_id, str):
            raise TypeError("Expected argument 'grant_id' to be a str")
        pulumi.set(__self__, "grant_id", grant_id)
        if grant_mechanism and not isinstance(grant_mechanism, str):
            raise TypeError("Expected argument 'grant_mechanism' to be a str")
        pulumi.set(__self__, "grant_mechanism", grant_mechanism)
        if granted_attribute_values_json and not isinstance(granted_attribute_values_json, str):
            raise TypeError("Expected argument 'granted_attribute_values_json' to be a str")
        pulumi.set(__self__, "granted_attribute_values_json", granted_attribute_values_json)
        if grantees and not isinstance(grantees, list):
            raise TypeError("Expected argument 'grantees' to be a list")
        pulumi.set(__self__, "grantees", grantees)
        if grantors and not isinstance(grantors, list):
            raise TypeError("Expected argument 'grantors' to be a list")
        pulumi.set(__self__, "grantors", grantors)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if idcs_created_bies and not isinstance(idcs_created_bies, list):
            raise TypeError("Expected argument 'idcs_created_bies' to be a list")
        pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        if idcs_endpoint and not isinstance(idcs_endpoint, str):
            raise TypeError("Expected argument 'idcs_endpoint' to be a str")
        pulumi.set(__self__, "idcs_endpoint", idcs_endpoint)
        if idcs_last_modified_bies and not isinstance(idcs_last_modified_bies, list):
            raise TypeError("Expected argument 'idcs_last_modified_bies' to be a list")
        pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        if idcs_last_upgraded_in_release and not isinstance(idcs_last_upgraded_in_release, str):
            raise TypeError("Expected argument 'idcs_last_upgraded_in_release' to be a str")
        pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        if idcs_prevented_operations and not isinstance(idcs_prevented_operations, list):
            raise TypeError("Expected argument 'idcs_prevented_operations' to be a list")
        pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        if is_fulfilled and not isinstance(is_fulfilled, bool):
            raise TypeError("Expected argument 'is_fulfilled' to be a bool")
        pulumi.set(__self__, "is_fulfilled", is_fulfilled)
        if metas and not isinstance(metas, list):
            raise TypeError("Expected argument 'metas' to be a list")
        pulumi.set(__self__, "metas", metas)
        if ocid and not isinstance(ocid, str):
            raise TypeError("Expected argument 'ocid' to be a str")
        pulumi.set(__self__, "ocid", ocid)
        if resource_type_schema_version and not isinstance(resource_type_schema_version, str):
            raise TypeError("Expected argument 'resource_type_schema_version' to be a str")
        pulumi.set(__self__, "resource_type_schema_version", resource_type_schema_version)
        if schemas and not isinstance(schemas, list):
            raise TypeError("Expected argument 'schemas' to be a list")
        pulumi.set(__self__, "schemas", schemas)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if tenancy_ocid and not isinstance(tenancy_ocid, str):
            raise TypeError("Expected argument 'tenancy_ocid' to be a str")
        pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)

    @property
    @pulumi.getter(name="appEntitlementCollections")
    def app_entitlement_collections(self) -> Optional[Sequence['outputs.GetDomainsGrantAppEntitlementCollectionResult']]:
        return pulumi.get(self, "app_entitlement_collections")

    @property
    @pulumi.getter
    def apps(self) -> Optional[Sequence['outputs.GetDomainsGrantAppResult']]:
        return pulumi.get(self, "apps")

    @property
    @pulumi.getter(name="attributeSets")
    def attribute_sets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "attribute_sets")

    @property
    @pulumi.getter
    def attributes(self) -> Optional[str]:
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter
    def authorization(self) -> Optional[str]:
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> Optional[str]:
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="compositeKey")
    def composite_key(self) -> Optional[str]:
        return pulumi.get(self, "composite_key")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> Optional[bool]:
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> Optional[str]:
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter
    def entitlements(self) -> Optional[Sequence['outputs.GetDomainsGrantEntitlementResult']]:
        return pulumi.get(self, "entitlements")

    @property
    @pulumi.getter(name="grantId")
    def grant_id(self) -> str:
        return pulumi.get(self, "grant_id")

    @property
    @pulumi.getter(name="grantMechanism")
    def grant_mechanism(self) -> Optional[str]:
        return pulumi.get(self, "grant_mechanism")

    @property
    @pulumi.getter(name="grantedAttributeValuesJson")
    def granted_attribute_values_json(self) -> Optional[str]:
        return pulumi.get(self, "granted_attribute_values_json")

    @property
    @pulumi.getter
    def grantees(self) -> Optional[Sequence['outputs.GetDomainsGrantGranteeResult']]:
        return pulumi.get(self, "grantees")

    @property
    @pulumi.getter
    def grantors(self) -> Optional[Sequence['outputs.GetDomainsGrantGrantorResult']]:
        return pulumi.get(self, "grantors")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Optional[Sequence['outputs.GetDomainsGrantIdcsCreatedByResult']]:
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> str:
        return pulumi.get(self, "idcs_endpoint")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Optional[Sequence['outputs.GetDomainsGrantIdcsLastModifiedByResult']]:
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> Optional[str]:
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter(name="isFulfilled")
    def is_fulfilled(self) -> Optional[bool]:
        return pulumi.get(self, "is_fulfilled")

    @property
    @pulumi.getter
    def metas(self) -> Optional[Sequence['outputs.GetDomainsGrantMetaResult']]:
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> Optional[str]:
        return pulumi.get(self, "resource_type_schema_version")

    @property
    @pulumi.getter
    def schemas(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.GetDomainsGrantTagResult']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> Optional[str]:
        return pulumi.get(self, "tenancy_ocid")


class AwaitableGetDomainsGrantResult(GetDomainsGrantResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDomainsGrantResult(
            app_entitlement_collections=self.app_entitlement_collections,
            apps=self.apps,
            attribute_sets=self.attribute_sets,
            attributes=self.attributes,
            authorization=self.authorization,
            compartment_ocid=self.compartment_ocid,
            composite_key=self.composite_key,
            delete_in_progress=self.delete_in_progress,
            domain_ocid=self.domain_ocid,
            entitlements=self.entitlements,
            grant_id=self.grant_id,
            grant_mechanism=self.grant_mechanism,
            granted_attribute_values_json=self.granted_attribute_values_json,
            grantees=self.grantees,
            grantors=self.grantors,
            id=self.id,
            idcs_created_bies=self.idcs_created_bies,
            idcs_endpoint=self.idcs_endpoint,
            idcs_last_modified_bies=self.idcs_last_modified_bies,
            idcs_last_upgraded_in_release=self.idcs_last_upgraded_in_release,
            idcs_prevented_operations=self.idcs_prevented_operations,
            is_fulfilled=self.is_fulfilled,
            metas=self.metas,
            ocid=self.ocid,
            resource_type_schema_version=self.resource_type_schema_version,
            schemas=self.schemas,
            tags=self.tags,
            tenancy_ocid=self.tenancy_ocid)


def get_domains_grant(attribute_sets: Optional[Sequence[str]] = None,
                      attributes: Optional[str] = None,
                      authorization: Optional[str] = None,
                      grant_id: Optional[str] = None,
                      idcs_endpoint: Optional[str] = None,
                      resource_type_schema_version: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDomainsGrantResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['attributeSets'] = attribute_sets
    __args__['attributes'] = attributes
    __args__['authorization'] = authorization
    __args__['grantId'] = grant_id
    __args__['idcsEndpoint'] = idcs_endpoint
    __args__['resourceTypeSchemaVersion'] = resource_type_schema_version
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:Identity/getDomainsGrant:getDomainsGrant', __args__, opts=opts, typ=GetDomainsGrantResult).value

    return AwaitableGetDomainsGrantResult(
        app_entitlement_collections=pulumi.get(__ret__, 'app_entitlement_collections'),
        apps=pulumi.get(__ret__, 'apps'),
        attribute_sets=pulumi.get(__ret__, 'attribute_sets'),
        attributes=pulumi.get(__ret__, 'attributes'),
        authorization=pulumi.get(__ret__, 'authorization'),
        compartment_ocid=pulumi.get(__ret__, 'compartment_ocid'),
        composite_key=pulumi.get(__ret__, 'composite_key'),
        delete_in_progress=pulumi.get(__ret__, 'delete_in_progress'),
        domain_ocid=pulumi.get(__ret__, 'domain_ocid'),
        entitlements=pulumi.get(__ret__, 'entitlements'),
        grant_id=pulumi.get(__ret__, 'grant_id'),
        grant_mechanism=pulumi.get(__ret__, 'grant_mechanism'),
        granted_attribute_values_json=pulumi.get(__ret__, 'granted_attribute_values_json'),
        grantees=pulumi.get(__ret__, 'grantees'),
        grantors=pulumi.get(__ret__, 'grantors'),
        id=pulumi.get(__ret__, 'id'),
        idcs_created_bies=pulumi.get(__ret__, 'idcs_created_bies'),
        idcs_endpoint=pulumi.get(__ret__, 'idcs_endpoint'),
        idcs_last_modified_bies=pulumi.get(__ret__, 'idcs_last_modified_bies'),
        idcs_last_upgraded_in_release=pulumi.get(__ret__, 'idcs_last_upgraded_in_release'),
        idcs_prevented_operations=pulumi.get(__ret__, 'idcs_prevented_operations'),
        is_fulfilled=pulumi.get(__ret__, 'is_fulfilled'),
        metas=pulumi.get(__ret__, 'metas'),
        ocid=pulumi.get(__ret__, 'ocid'),
        resource_type_schema_version=pulumi.get(__ret__, 'resource_type_schema_version'),
        schemas=pulumi.get(__ret__, 'schemas'),
        tags=pulumi.get(__ret__, 'tags'),
        tenancy_ocid=pulumi.get(__ret__, 'tenancy_ocid'))


@_utilities.lift_output_func(get_domains_grant)
def get_domains_grant_output(attribute_sets: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                             attributes: Optional[pulumi.Input[Optional[str]]] = None,
                             authorization: Optional[pulumi.Input[Optional[str]]] = None,
                             grant_id: Optional[pulumi.Input[str]] = None,
                             idcs_endpoint: Optional[pulumi.Input[str]] = None,
                             resource_type_schema_version: Optional[pulumi.Input[Optional[str]]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDomainsGrantResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
