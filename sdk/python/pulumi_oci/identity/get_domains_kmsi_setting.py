# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetDomainsKmsiSettingResult',
    'AwaitableGetDomainsKmsiSettingResult',
    'get_domains_kmsi_setting',
    'get_domains_kmsi_setting_output',
]

@pulumi.output_type
class GetDomainsKmsiSettingResult:
    """
    A collection of values returned by getDomainsKmsiSetting.
    """
    def __init__(__self__, attribute_sets=None, attributes=None, authorization=None, compartment_ocid=None, delete_in_progress=None, domain_ocid=None, external_id=None, id=None, idcs_created_bies=None, idcs_endpoint=None, idcs_last_modified_bies=None, idcs_last_upgraded_in_release=None, idcs_prevented_operations=None, kmsi_feature_enabled=None, kmsi_prompt_enabled=None, kmsi_setting_id=None, last_enabled_on=None, last_used_validity_in_days=None, max_allowed_sessions=None, metas=None, ocid=None, resource_type_schema_version=None, schemas=None, tags=None, tenancy_ocid=None, token_validity_in_days=None, tou_prompt_disabled=None):
        if attribute_sets and not isinstance(attribute_sets, list):
            raise TypeError("Expected argument 'attribute_sets' to be a list")
        pulumi.set(__self__, "attribute_sets", attribute_sets)
        if attributes and not isinstance(attributes, str):
            raise TypeError("Expected argument 'attributes' to be a str")
        pulumi.set(__self__, "attributes", attributes)
        if authorization and not isinstance(authorization, str):
            raise TypeError("Expected argument 'authorization' to be a str")
        pulumi.set(__self__, "authorization", authorization)
        if compartment_ocid and not isinstance(compartment_ocid, str):
            raise TypeError("Expected argument 'compartment_ocid' to be a str")
        pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        if delete_in_progress and not isinstance(delete_in_progress, bool):
            raise TypeError("Expected argument 'delete_in_progress' to be a bool")
        pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        if domain_ocid and not isinstance(domain_ocid, str):
            raise TypeError("Expected argument 'domain_ocid' to be a str")
        pulumi.set(__self__, "domain_ocid", domain_ocid)
        if external_id and not isinstance(external_id, str):
            raise TypeError("Expected argument 'external_id' to be a str")
        pulumi.set(__self__, "external_id", external_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if idcs_created_bies and not isinstance(idcs_created_bies, list):
            raise TypeError("Expected argument 'idcs_created_bies' to be a list")
        pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        if idcs_endpoint and not isinstance(idcs_endpoint, str):
            raise TypeError("Expected argument 'idcs_endpoint' to be a str")
        pulumi.set(__self__, "idcs_endpoint", idcs_endpoint)
        if idcs_last_modified_bies and not isinstance(idcs_last_modified_bies, list):
            raise TypeError("Expected argument 'idcs_last_modified_bies' to be a list")
        pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        if idcs_last_upgraded_in_release and not isinstance(idcs_last_upgraded_in_release, str):
            raise TypeError("Expected argument 'idcs_last_upgraded_in_release' to be a str")
        pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        if idcs_prevented_operations and not isinstance(idcs_prevented_operations, list):
            raise TypeError("Expected argument 'idcs_prevented_operations' to be a list")
        pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        if kmsi_feature_enabled and not isinstance(kmsi_feature_enabled, bool):
            raise TypeError("Expected argument 'kmsi_feature_enabled' to be a bool")
        pulumi.set(__self__, "kmsi_feature_enabled", kmsi_feature_enabled)
        if kmsi_prompt_enabled and not isinstance(kmsi_prompt_enabled, bool):
            raise TypeError("Expected argument 'kmsi_prompt_enabled' to be a bool")
        pulumi.set(__self__, "kmsi_prompt_enabled", kmsi_prompt_enabled)
        if kmsi_setting_id and not isinstance(kmsi_setting_id, str):
            raise TypeError("Expected argument 'kmsi_setting_id' to be a str")
        pulumi.set(__self__, "kmsi_setting_id", kmsi_setting_id)
        if last_enabled_on and not isinstance(last_enabled_on, str):
            raise TypeError("Expected argument 'last_enabled_on' to be a str")
        pulumi.set(__self__, "last_enabled_on", last_enabled_on)
        if last_used_validity_in_days and not isinstance(last_used_validity_in_days, int):
            raise TypeError("Expected argument 'last_used_validity_in_days' to be a int")
        pulumi.set(__self__, "last_used_validity_in_days", last_used_validity_in_days)
        if max_allowed_sessions and not isinstance(max_allowed_sessions, int):
            raise TypeError("Expected argument 'max_allowed_sessions' to be a int")
        pulumi.set(__self__, "max_allowed_sessions", max_allowed_sessions)
        if metas and not isinstance(metas, list):
            raise TypeError("Expected argument 'metas' to be a list")
        pulumi.set(__self__, "metas", metas)
        if ocid and not isinstance(ocid, str):
            raise TypeError("Expected argument 'ocid' to be a str")
        pulumi.set(__self__, "ocid", ocid)
        if resource_type_schema_version and not isinstance(resource_type_schema_version, str):
            raise TypeError("Expected argument 'resource_type_schema_version' to be a str")
        pulumi.set(__self__, "resource_type_schema_version", resource_type_schema_version)
        if schemas and not isinstance(schemas, list):
            raise TypeError("Expected argument 'schemas' to be a list")
        pulumi.set(__self__, "schemas", schemas)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if tenancy_ocid and not isinstance(tenancy_ocid, str):
            raise TypeError("Expected argument 'tenancy_ocid' to be a str")
        pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)
        if token_validity_in_days and not isinstance(token_validity_in_days, int):
            raise TypeError("Expected argument 'token_validity_in_days' to be a int")
        pulumi.set(__self__, "token_validity_in_days", token_validity_in_days)
        if tou_prompt_disabled and not isinstance(tou_prompt_disabled, bool):
            raise TypeError("Expected argument 'tou_prompt_disabled' to be a bool")
        pulumi.set(__self__, "tou_prompt_disabled", tou_prompt_disabled)

    @property
    @pulumi.getter(name="attributeSets")
    def attribute_sets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "attribute_sets")

    @property
    @pulumi.getter
    def attributes(self) -> Optional[str]:
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter
    def authorization(self) -> Optional[str]:
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> Optional[str]:
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> Optional[bool]:
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> Optional[str]:
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[str]:
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Optional[Sequence['outputs.GetDomainsKmsiSettingIdcsCreatedByResult']]:
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> str:
        return pulumi.get(self, "idcs_endpoint")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Optional[Sequence['outputs.GetDomainsKmsiSettingIdcsLastModifiedByResult']]:
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> Optional[str]:
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter(name="kmsiFeatureEnabled")
    def kmsi_feature_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "kmsi_feature_enabled")

    @property
    @pulumi.getter(name="kmsiPromptEnabled")
    def kmsi_prompt_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "kmsi_prompt_enabled")

    @property
    @pulumi.getter(name="kmsiSettingId")
    def kmsi_setting_id(self) -> str:
        return pulumi.get(self, "kmsi_setting_id")

    @property
    @pulumi.getter(name="lastEnabledOn")
    def last_enabled_on(self) -> Optional[str]:
        return pulumi.get(self, "last_enabled_on")

    @property
    @pulumi.getter(name="lastUsedValidityInDays")
    def last_used_validity_in_days(self) -> Optional[int]:
        return pulumi.get(self, "last_used_validity_in_days")

    @property
    @pulumi.getter(name="maxAllowedSessions")
    def max_allowed_sessions(self) -> Optional[int]:
        return pulumi.get(self, "max_allowed_sessions")

    @property
    @pulumi.getter
    def metas(self) -> Optional[Sequence['outputs.GetDomainsKmsiSettingMetaResult']]:
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> Optional[str]:
        return pulumi.get(self, "resource_type_schema_version")

    @property
    @pulumi.getter
    def schemas(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.GetDomainsKmsiSettingTagResult']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> Optional[str]:
        return pulumi.get(self, "tenancy_ocid")

    @property
    @pulumi.getter(name="tokenValidityInDays")
    def token_validity_in_days(self) -> Optional[int]:
        return pulumi.get(self, "token_validity_in_days")

    @property
    @pulumi.getter(name="touPromptDisabled")
    def tou_prompt_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "tou_prompt_disabled")


class AwaitableGetDomainsKmsiSettingResult(GetDomainsKmsiSettingResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDomainsKmsiSettingResult(
            attribute_sets=self.attribute_sets,
            attributes=self.attributes,
            authorization=self.authorization,
            compartment_ocid=self.compartment_ocid,
            delete_in_progress=self.delete_in_progress,
            domain_ocid=self.domain_ocid,
            external_id=self.external_id,
            id=self.id,
            idcs_created_bies=self.idcs_created_bies,
            idcs_endpoint=self.idcs_endpoint,
            idcs_last_modified_bies=self.idcs_last_modified_bies,
            idcs_last_upgraded_in_release=self.idcs_last_upgraded_in_release,
            idcs_prevented_operations=self.idcs_prevented_operations,
            kmsi_feature_enabled=self.kmsi_feature_enabled,
            kmsi_prompt_enabled=self.kmsi_prompt_enabled,
            kmsi_setting_id=self.kmsi_setting_id,
            last_enabled_on=self.last_enabled_on,
            last_used_validity_in_days=self.last_used_validity_in_days,
            max_allowed_sessions=self.max_allowed_sessions,
            metas=self.metas,
            ocid=self.ocid,
            resource_type_schema_version=self.resource_type_schema_version,
            schemas=self.schemas,
            tags=self.tags,
            tenancy_ocid=self.tenancy_ocid,
            token_validity_in_days=self.token_validity_in_days,
            tou_prompt_disabled=self.tou_prompt_disabled)


def get_domains_kmsi_setting(attribute_sets: Optional[Sequence[str]] = None,
                             attributes: Optional[str] = None,
                             authorization: Optional[str] = None,
                             idcs_endpoint: Optional[str] = None,
                             kmsi_setting_id: Optional[str] = None,
                             resource_type_schema_version: Optional[str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDomainsKmsiSettingResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['attributeSets'] = attribute_sets
    __args__['attributes'] = attributes
    __args__['authorization'] = authorization
    __args__['idcsEndpoint'] = idcs_endpoint
    __args__['kmsiSettingId'] = kmsi_setting_id
    __args__['resourceTypeSchemaVersion'] = resource_type_schema_version
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:Identity/getDomainsKmsiSetting:getDomainsKmsiSetting', __args__, opts=opts, typ=GetDomainsKmsiSettingResult).value

    return AwaitableGetDomainsKmsiSettingResult(
        attribute_sets=pulumi.get(__ret__, 'attribute_sets'),
        attributes=pulumi.get(__ret__, 'attributes'),
        authorization=pulumi.get(__ret__, 'authorization'),
        compartment_ocid=pulumi.get(__ret__, 'compartment_ocid'),
        delete_in_progress=pulumi.get(__ret__, 'delete_in_progress'),
        domain_ocid=pulumi.get(__ret__, 'domain_ocid'),
        external_id=pulumi.get(__ret__, 'external_id'),
        id=pulumi.get(__ret__, 'id'),
        idcs_created_bies=pulumi.get(__ret__, 'idcs_created_bies'),
        idcs_endpoint=pulumi.get(__ret__, 'idcs_endpoint'),
        idcs_last_modified_bies=pulumi.get(__ret__, 'idcs_last_modified_bies'),
        idcs_last_upgraded_in_release=pulumi.get(__ret__, 'idcs_last_upgraded_in_release'),
        idcs_prevented_operations=pulumi.get(__ret__, 'idcs_prevented_operations'),
        kmsi_feature_enabled=pulumi.get(__ret__, 'kmsi_feature_enabled'),
        kmsi_prompt_enabled=pulumi.get(__ret__, 'kmsi_prompt_enabled'),
        kmsi_setting_id=pulumi.get(__ret__, 'kmsi_setting_id'),
        last_enabled_on=pulumi.get(__ret__, 'last_enabled_on'),
        last_used_validity_in_days=pulumi.get(__ret__, 'last_used_validity_in_days'),
        max_allowed_sessions=pulumi.get(__ret__, 'max_allowed_sessions'),
        metas=pulumi.get(__ret__, 'metas'),
        ocid=pulumi.get(__ret__, 'ocid'),
        resource_type_schema_version=pulumi.get(__ret__, 'resource_type_schema_version'),
        schemas=pulumi.get(__ret__, 'schemas'),
        tags=pulumi.get(__ret__, 'tags'),
        tenancy_ocid=pulumi.get(__ret__, 'tenancy_ocid'),
        token_validity_in_days=pulumi.get(__ret__, 'token_validity_in_days'),
        tou_prompt_disabled=pulumi.get(__ret__, 'tou_prompt_disabled'))


@_utilities.lift_output_func(get_domains_kmsi_setting)
def get_domains_kmsi_setting_output(attribute_sets: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                    attributes: Optional[pulumi.Input[Optional[str]]] = None,
                                    authorization: Optional[pulumi.Input[Optional[str]]] = None,
                                    idcs_endpoint: Optional[pulumi.Input[str]] = None,
                                    kmsi_setting_id: Optional[pulumi.Input[str]] = None,
                                    resource_type_schema_version: Optional[pulumi.Input[Optional[str]]] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDomainsKmsiSettingResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
