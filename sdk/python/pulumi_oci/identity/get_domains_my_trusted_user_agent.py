# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetDomainsMyTrustedUserAgentResult',
    'AwaitableGetDomainsMyTrustedUserAgentResult',
    'get_domains_my_trusted_user_agent',
    'get_domains_my_trusted_user_agent_output',
]

@pulumi.output_type
class GetDomainsMyTrustedUserAgentResult:
    """
    A collection of values returned by getDomainsMyTrustedUserAgent.
    """
    def __init__(__self__, attribute_sets=None, attributes=None, authorization=None, compartment_ocid=None, delete_in_progress=None, domain_ocid=None, expiry_time=None, id=None, idcs_created_bies=None, idcs_endpoint=None, idcs_last_modified_bies=None, idcs_last_upgraded_in_release=None, idcs_prevented_operations=None, last_used_on=None, location=None, metas=None, my_trusted_user_agent_id=None, name=None, ocid=None, platform=None, resource_type_schema_version=None, schemas=None, tags=None, tenancy_ocid=None, token_type=None, trust_token=None, trusted_factors=None, users=None):
        if attribute_sets and not isinstance(attribute_sets, list):
            raise TypeError("Expected argument 'attribute_sets' to be a list")
        pulumi.set(__self__, "attribute_sets", attribute_sets)
        if attributes and not isinstance(attributes, str):
            raise TypeError("Expected argument 'attributes' to be a str")
        pulumi.set(__self__, "attributes", attributes)
        if authorization and not isinstance(authorization, str):
            raise TypeError("Expected argument 'authorization' to be a str")
        pulumi.set(__self__, "authorization", authorization)
        if compartment_ocid and not isinstance(compartment_ocid, str):
            raise TypeError("Expected argument 'compartment_ocid' to be a str")
        pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        if delete_in_progress and not isinstance(delete_in_progress, bool):
            raise TypeError("Expected argument 'delete_in_progress' to be a bool")
        pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        if domain_ocid and not isinstance(domain_ocid, str):
            raise TypeError("Expected argument 'domain_ocid' to be a str")
        pulumi.set(__self__, "domain_ocid", domain_ocid)
        if expiry_time and not isinstance(expiry_time, str):
            raise TypeError("Expected argument 'expiry_time' to be a str")
        pulumi.set(__self__, "expiry_time", expiry_time)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if idcs_created_bies and not isinstance(idcs_created_bies, list):
            raise TypeError("Expected argument 'idcs_created_bies' to be a list")
        pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        if idcs_endpoint and not isinstance(idcs_endpoint, str):
            raise TypeError("Expected argument 'idcs_endpoint' to be a str")
        pulumi.set(__self__, "idcs_endpoint", idcs_endpoint)
        if idcs_last_modified_bies and not isinstance(idcs_last_modified_bies, list):
            raise TypeError("Expected argument 'idcs_last_modified_bies' to be a list")
        pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        if idcs_last_upgraded_in_release and not isinstance(idcs_last_upgraded_in_release, str):
            raise TypeError("Expected argument 'idcs_last_upgraded_in_release' to be a str")
        pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        if idcs_prevented_operations and not isinstance(idcs_prevented_operations, list):
            raise TypeError("Expected argument 'idcs_prevented_operations' to be a list")
        pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        if last_used_on and not isinstance(last_used_on, str):
            raise TypeError("Expected argument 'last_used_on' to be a str")
        pulumi.set(__self__, "last_used_on", last_used_on)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if metas and not isinstance(metas, list):
            raise TypeError("Expected argument 'metas' to be a list")
        pulumi.set(__self__, "metas", metas)
        if my_trusted_user_agent_id and not isinstance(my_trusted_user_agent_id, str):
            raise TypeError("Expected argument 'my_trusted_user_agent_id' to be a str")
        pulumi.set(__self__, "my_trusted_user_agent_id", my_trusted_user_agent_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if ocid and not isinstance(ocid, str):
            raise TypeError("Expected argument 'ocid' to be a str")
        pulumi.set(__self__, "ocid", ocid)
        if platform and not isinstance(platform, str):
            raise TypeError("Expected argument 'platform' to be a str")
        pulumi.set(__self__, "platform", platform)
        if resource_type_schema_version and not isinstance(resource_type_schema_version, str):
            raise TypeError("Expected argument 'resource_type_schema_version' to be a str")
        pulumi.set(__self__, "resource_type_schema_version", resource_type_schema_version)
        if schemas and not isinstance(schemas, list):
            raise TypeError("Expected argument 'schemas' to be a list")
        pulumi.set(__self__, "schemas", schemas)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if tenancy_ocid and not isinstance(tenancy_ocid, str):
            raise TypeError("Expected argument 'tenancy_ocid' to be a str")
        pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)
        if token_type and not isinstance(token_type, str):
            raise TypeError("Expected argument 'token_type' to be a str")
        pulumi.set(__self__, "token_type", token_type)
        if trust_token and not isinstance(trust_token, str):
            raise TypeError("Expected argument 'trust_token' to be a str")
        pulumi.set(__self__, "trust_token", trust_token)
        if trusted_factors and not isinstance(trusted_factors, list):
            raise TypeError("Expected argument 'trusted_factors' to be a list")
        pulumi.set(__self__, "trusted_factors", trusted_factors)
        if users and not isinstance(users, list):
            raise TypeError("Expected argument 'users' to be a list")
        pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="attributeSets")
    def attribute_sets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "attribute_sets")

    @property
    @pulumi.getter
    def attributes(self) -> Optional[str]:
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter
    def authorization(self) -> Optional[str]:
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> bool:
        """
        A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
        """
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter(name="expiryTime")
    def expiry_time(self) -> str:
        """
        Validation period of the trust token.
        """
        return pulumi.get(self, "expiry_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Sequence['outputs.GetDomainsMyTrustedUserAgentIdcsCreatedByResult']:
        """
        The User or App who created the Resource
        """
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> str:
        return pulumi.get(self, "idcs_endpoint")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Sequence['outputs.GetDomainsMyTrustedUserAgentIdcsLastModifiedByResult']:
        """
        The User or App who modified the Resource
        """
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> str:
        """
        The release number when the resource was upgraded.
        """
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Sequence[str]:
        """
        Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
        """
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter(name="lastUsedOn")
    def last_used_on(self) -> str:
        """
        Indicates when this token was used lastime.
        """
        return pulumi.get(self, "last_used_on")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def metas(self) -> Sequence['outputs.GetDomainsMyTrustedUserAgentMetaResult']:
        """
        A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
        """
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter(name="myTrustedUserAgentId")
    def my_trusted_user_agent_id(self) -> str:
        return pulumi.get(self, "my_trusted_user_agent_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the User Agent that the user wants the system to trust and to use in Multi-Factor Authentication.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        The OCID of the user
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def platform(self) -> str:
        """
        User agent platform for which the trust token has been issued.
        """
        return pulumi.get(self, "platform")

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> Optional[str]:
        return pulumi.get(self, "resource_type_schema_version")

    @property
    @pulumi.getter
    def schemas(self) -> Sequence[str]:
        """
        REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \\"enterprise\\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
        """
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetDomainsMyTrustedUserAgentTagResult']:
        """
        A list of tags on this resource.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "tenancy_ocid")

    @property
    @pulumi.getter(name="tokenType")
    def token_type(self) -> str:
        """
        The token type being created. This token is used as trusted and kmsi token.
        """
        return pulumi.get(self, "token_type")

    @property
    @pulumi.getter(name="trustToken")
    def trust_token(self) -> str:
        """
        Trust token for the user agent. This is a random string value that will be updated whenever a token that has been issued is verified successfully.
        """
        return pulumi.get(self, "trust_token")

    @property
    @pulumi.getter(name="trustedFactors")
    def trusted_factors(self) -> Sequence['outputs.GetDomainsMyTrustedUserAgentTrustedFactorResult']:
        """
        Trusted 2FA Factors
        """
        return pulumi.get(self, "trusted_factors")

    @property
    @pulumi.getter
    def users(self) -> Sequence['outputs.GetDomainsMyTrustedUserAgentUserResult']:
        """
        user for whom the trust-token was issued
        """
        return pulumi.get(self, "users")


class AwaitableGetDomainsMyTrustedUserAgentResult(GetDomainsMyTrustedUserAgentResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDomainsMyTrustedUserAgentResult(
            attribute_sets=self.attribute_sets,
            attributes=self.attributes,
            authorization=self.authorization,
            compartment_ocid=self.compartment_ocid,
            delete_in_progress=self.delete_in_progress,
            domain_ocid=self.domain_ocid,
            expiry_time=self.expiry_time,
            id=self.id,
            idcs_created_bies=self.idcs_created_bies,
            idcs_endpoint=self.idcs_endpoint,
            idcs_last_modified_bies=self.idcs_last_modified_bies,
            idcs_last_upgraded_in_release=self.idcs_last_upgraded_in_release,
            idcs_prevented_operations=self.idcs_prevented_operations,
            last_used_on=self.last_used_on,
            location=self.location,
            metas=self.metas,
            my_trusted_user_agent_id=self.my_trusted_user_agent_id,
            name=self.name,
            ocid=self.ocid,
            platform=self.platform,
            resource_type_schema_version=self.resource_type_schema_version,
            schemas=self.schemas,
            tags=self.tags,
            tenancy_ocid=self.tenancy_ocid,
            token_type=self.token_type,
            trust_token=self.trust_token,
            trusted_factors=self.trusted_factors,
            users=self.users)


def get_domains_my_trusted_user_agent(attribute_sets: Optional[Sequence[str]] = None,
                                      attributes: Optional[str] = None,
                                      authorization: Optional[str] = None,
                                      idcs_endpoint: Optional[str] = None,
                                      my_trusted_user_agent_id: Optional[str] = None,
                                      resource_type_schema_version: Optional[str] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDomainsMyTrustedUserAgentResult:
    """
    This data source provides details about a specific My Trusted User Agent resource in Oracle Cloud Infrastructure Identity Domains service.

    Get a Trusted User Agent

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_my_trusted_user_agent = oci.Identity.get_domains_my_trusted_user_agent(idcs_endpoint=data["oci_identity_domain"]["test_domain"]["url"],
        my_trusted_user_agent_id=oci_cloud_bridge_agent["test_agent"]["id"],
        attribute_sets=[],
        attributes="",
        authorization=var["my_trusted_user_agent_authorization"],
        resource_type_schema_version=var["my_trusted_user_agent_resource_type_schema_version"])
    ```


    :param Sequence[str] attribute_sets: A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    :param str attributes: A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    :param str authorization: The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    :param str idcs_endpoint: The basic endpoint for the identity domain
    :param str my_trusted_user_agent_id: ID of the resource
    :param str resource_type_schema_version: An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    """
    __args__ = dict()
    __args__['attributeSets'] = attribute_sets
    __args__['attributes'] = attributes
    __args__['authorization'] = authorization
    __args__['idcsEndpoint'] = idcs_endpoint
    __args__['myTrustedUserAgentId'] = my_trusted_user_agent_id
    __args__['resourceTypeSchemaVersion'] = resource_type_schema_version
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:Identity/getDomainsMyTrustedUserAgent:getDomainsMyTrustedUserAgent', __args__, opts=opts, typ=GetDomainsMyTrustedUserAgentResult).value

    return AwaitableGetDomainsMyTrustedUserAgentResult(
        attribute_sets=pulumi.get(__ret__, 'attribute_sets'),
        attributes=pulumi.get(__ret__, 'attributes'),
        authorization=pulumi.get(__ret__, 'authorization'),
        compartment_ocid=pulumi.get(__ret__, 'compartment_ocid'),
        delete_in_progress=pulumi.get(__ret__, 'delete_in_progress'),
        domain_ocid=pulumi.get(__ret__, 'domain_ocid'),
        expiry_time=pulumi.get(__ret__, 'expiry_time'),
        id=pulumi.get(__ret__, 'id'),
        idcs_created_bies=pulumi.get(__ret__, 'idcs_created_bies'),
        idcs_endpoint=pulumi.get(__ret__, 'idcs_endpoint'),
        idcs_last_modified_bies=pulumi.get(__ret__, 'idcs_last_modified_bies'),
        idcs_last_upgraded_in_release=pulumi.get(__ret__, 'idcs_last_upgraded_in_release'),
        idcs_prevented_operations=pulumi.get(__ret__, 'idcs_prevented_operations'),
        last_used_on=pulumi.get(__ret__, 'last_used_on'),
        location=pulumi.get(__ret__, 'location'),
        metas=pulumi.get(__ret__, 'metas'),
        my_trusted_user_agent_id=pulumi.get(__ret__, 'my_trusted_user_agent_id'),
        name=pulumi.get(__ret__, 'name'),
        ocid=pulumi.get(__ret__, 'ocid'),
        platform=pulumi.get(__ret__, 'platform'),
        resource_type_schema_version=pulumi.get(__ret__, 'resource_type_schema_version'),
        schemas=pulumi.get(__ret__, 'schemas'),
        tags=pulumi.get(__ret__, 'tags'),
        tenancy_ocid=pulumi.get(__ret__, 'tenancy_ocid'),
        token_type=pulumi.get(__ret__, 'token_type'),
        trust_token=pulumi.get(__ret__, 'trust_token'),
        trusted_factors=pulumi.get(__ret__, 'trusted_factors'),
        users=pulumi.get(__ret__, 'users'))


@_utilities.lift_output_func(get_domains_my_trusted_user_agent)
def get_domains_my_trusted_user_agent_output(attribute_sets: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                             attributes: Optional[pulumi.Input[Optional[str]]] = None,
                                             authorization: Optional[pulumi.Input[Optional[str]]] = None,
                                             idcs_endpoint: Optional[pulumi.Input[str]] = None,
                                             my_trusted_user_agent_id: Optional[pulumi.Input[str]] = None,
                                             resource_type_schema_version: Optional[pulumi.Input[Optional[str]]] = None,
                                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDomainsMyTrustedUserAgentResult]:
    """
    This data source provides details about a specific My Trusted User Agent resource in Oracle Cloud Infrastructure Identity Domains service.

    Get a Trusted User Agent

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_my_trusted_user_agent = oci.Identity.get_domains_my_trusted_user_agent(idcs_endpoint=data["oci_identity_domain"]["test_domain"]["url"],
        my_trusted_user_agent_id=oci_cloud_bridge_agent["test_agent"]["id"],
        attribute_sets=[],
        attributes="",
        authorization=var["my_trusted_user_agent_authorization"],
        resource_type_schema_version=var["my_trusted_user_agent_resource_type_schema_version"])
    ```


    :param Sequence[str] attribute_sets: A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    :param str attributes: A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    :param str authorization: The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    :param str idcs_endpoint: The basic endpoint for the identity domain
    :param str my_trusted_user_agent_id: ID of the resource
    :param str resource_type_schema_version: An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    """
    ...
