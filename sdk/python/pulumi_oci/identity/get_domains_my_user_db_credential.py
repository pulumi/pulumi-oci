# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetDomainsMyUserDbCredentialResult',
    'AwaitableGetDomainsMyUserDbCredentialResult',
    'get_domains_my_user_db_credential',
    'get_domains_my_user_db_credential_output',
]

@pulumi.output_type
class GetDomainsMyUserDbCredentialResult:
    """
    A collection of values returned by getDomainsMyUserDbCredential.
    """
    def __init__(__self__, authorization=None, compartment_ocid=None, db_password=None, delete_in_progress=None, description=None, domain_ocid=None, expired=None, expires_on=None, id=None, idcs_created_bies=None, idcs_endpoint=None, idcs_last_modified_bies=None, idcs_last_upgraded_in_release=None, idcs_prevented_operations=None, last_set_date=None, metas=None, mixed_db_password=None, mixed_salt=None, my_user_db_credential_id=None, name=None, ocid=None, resource_type_schema_version=None, salt=None, schemas=None, status=None, tags=None, tenancy_ocid=None, users=None):
        if authorization and not isinstance(authorization, str):
            raise TypeError("Expected argument 'authorization' to be a str")
        pulumi.set(__self__, "authorization", authorization)
        if compartment_ocid and not isinstance(compartment_ocid, str):
            raise TypeError("Expected argument 'compartment_ocid' to be a str")
        pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        if db_password and not isinstance(db_password, str):
            raise TypeError("Expected argument 'db_password' to be a str")
        pulumi.set(__self__, "db_password", db_password)
        if delete_in_progress and not isinstance(delete_in_progress, bool):
            raise TypeError("Expected argument 'delete_in_progress' to be a bool")
        pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if domain_ocid and not isinstance(domain_ocid, str):
            raise TypeError("Expected argument 'domain_ocid' to be a str")
        pulumi.set(__self__, "domain_ocid", domain_ocid)
        if expired and not isinstance(expired, bool):
            raise TypeError("Expected argument 'expired' to be a bool")
        pulumi.set(__self__, "expired", expired)
        if expires_on and not isinstance(expires_on, str):
            raise TypeError("Expected argument 'expires_on' to be a str")
        pulumi.set(__self__, "expires_on", expires_on)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if idcs_created_bies and not isinstance(idcs_created_bies, list):
            raise TypeError("Expected argument 'idcs_created_bies' to be a list")
        pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        if idcs_endpoint and not isinstance(idcs_endpoint, str):
            raise TypeError("Expected argument 'idcs_endpoint' to be a str")
        pulumi.set(__self__, "idcs_endpoint", idcs_endpoint)
        if idcs_last_modified_bies and not isinstance(idcs_last_modified_bies, list):
            raise TypeError("Expected argument 'idcs_last_modified_bies' to be a list")
        pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        if idcs_last_upgraded_in_release and not isinstance(idcs_last_upgraded_in_release, str):
            raise TypeError("Expected argument 'idcs_last_upgraded_in_release' to be a str")
        pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        if idcs_prevented_operations and not isinstance(idcs_prevented_operations, list):
            raise TypeError("Expected argument 'idcs_prevented_operations' to be a list")
        pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        if last_set_date and not isinstance(last_set_date, str):
            raise TypeError("Expected argument 'last_set_date' to be a str")
        pulumi.set(__self__, "last_set_date", last_set_date)
        if metas and not isinstance(metas, list):
            raise TypeError("Expected argument 'metas' to be a list")
        pulumi.set(__self__, "metas", metas)
        if mixed_db_password and not isinstance(mixed_db_password, str):
            raise TypeError("Expected argument 'mixed_db_password' to be a str")
        pulumi.set(__self__, "mixed_db_password", mixed_db_password)
        if mixed_salt and not isinstance(mixed_salt, str):
            raise TypeError("Expected argument 'mixed_salt' to be a str")
        pulumi.set(__self__, "mixed_salt", mixed_salt)
        if my_user_db_credential_id and not isinstance(my_user_db_credential_id, str):
            raise TypeError("Expected argument 'my_user_db_credential_id' to be a str")
        pulumi.set(__self__, "my_user_db_credential_id", my_user_db_credential_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if ocid and not isinstance(ocid, str):
            raise TypeError("Expected argument 'ocid' to be a str")
        pulumi.set(__self__, "ocid", ocid)
        if resource_type_schema_version and not isinstance(resource_type_schema_version, str):
            raise TypeError("Expected argument 'resource_type_schema_version' to be a str")
        pulumi.set(__self__, "resource_type_schema_version", resource_type_schema_version)
        if salt and not isinstance(salt, str):
            raise TypeError("Expected argument 'salt' to be a str")
        pulumi.set(__self__, "salt", salt)
        if schemas and not isinstance(schemas, list):
            raise TypeError("Expected argument 'schemas' to be a list")
        pulumi.set(__self__, "schemas", schemas)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if tenancy_ocid and not isinstance(tenancy_ocid, str):
            raise TypeError("Expected argument 'tenancy_ocid' to be a str")
        pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)
        if users and not isinstance(users, list):
            raise TypeError("Expected argument 'users' to be a list")
        pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter
    def authorization(self) -> Optional[str]:
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="dbPassword")
    def db_password(self) -> str:
        """
        The user's database password.
        """
        return pulumi.get(self, "db_password")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> bool:
        """
        A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
        """
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter
    def expired(self) -> bool:
        """
        Indicates that the database password has expired.
        """
        return pulumi.get(self, "expired")

    @property
    @pulumi.getter(name="expiresOn")
    def expires_on(self) -> str:
        """
        When the user credential expires.
        """
        return pulumi.get(self, "expires_on")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider's entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Sequence['outputs.GetDomainsMyUserDbCredentialIdcsCreatedByResult']:
        """
        The User or App who created the Resource
        """
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> str:
        return pulumi.get(self, "idcs_endpoint")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Sequence['outputs.GetDomainsMyUserDbCredentialIdcsLastModifiedByResult']:
        """
        The User or App who modified the Resource
        """
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> str:
        """
        The release number when the resource was upgraded.
        """
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Sequence[str]:
        """
        Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
        """
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter(name="lastSetDate")
    def last_set_date(self) -> str:
        """
        A DateTime that specifies the date and time when the current database password was set.
        """
        return pulumi.get(self, "last_set_date")

    @property
    @pulumi.getter
    def metas(self) -> Sequence['outputs.GetDomainsMyUserDbCredentialMetaResult']:
        """
        A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
        """
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter(name="mixedDbPassword")
    def mixed_db_password(self) -> str:
        """
        The user's database password with mixed salt.
        """
        return pulumi.get(self, "mixed_db_password")

    @property
    @pulumi.getter(name="mixedSalt")
    def mixed_salt(self) -> str:
        """
        The mixed salt of the password.
        """
        return pulumi.get(self, "mixed_salt")

    @property
    @pulumi.getter(name="myUserDbCredentialId")
    def my_user_db_credential_id(self) -> str:
        return pulumi.get(self, "my_user_db_credential_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The username.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        The user's OCID.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> Optional[str]:
        return pulumi.get(self, "resource_type_schema_version")

    @property
    @pulumi.getter
    def salt(self) -> str:
        """
        The salt of the password.
        """
        return pulumi.get(self, "salt")

    @property
    @pulumi.getter
    def schemas(self) -> Sequence[str]:
        """
        REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \\"enterprise\\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
        """
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        User credential status
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetDomainsMyUserDbCredentialTagResult']:
        """
        A list of tags on this resource.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "tenancy_ocid")

    @property
    @pulumi.getter
    def users(self) -> Sequence['outputs.GetDomainsMyUserDbCredentialUserResult']:
        """
        The user linked to the database credential.
        """
        return pulumi.get(self, "users")


class AwaitableGetDomainsMyUserDbCredentialResult(GetDomainsMyUserDbCredentialResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDomainsMyUserDbCredentialResult(
            authorization=self.authorization,
            compartment_ocid=self.compartment_ocid,
            db_password=self.db_password,
            delete_in_progress=self.delete_in_progress,
            description=self.description,
            domain_ocid=self.domain_ocid,
            expired=self.expired,
            expires_on=self.expires_on,
            id=self.id,
            idcs_created_bies=self.idcs_created_bies,
            idcs_endpoint=self.idcs_endpoint,
            idcs_last_modified_bies=self.idcs_last_modified_bies,
            idcs_last_upgraded_in_release=self.idcs_last_upgraded_in_release,
            idcs_prevented_operations=self.idcs_prevented_operations,
            last_set_date=self.last_set_date,
            metas=self.metas,
            mixed_db_password=self.mixed_db_password,
            mixed_salt=self.mixed_salt,
            my_user_db_credential_id=self.my_user_db_credential_id,
            name=self.name,
            ocid=self.ocid,
            resource_type_schema_version=self.resource_type_schema_version,
            salt=self.salt,
            schemas=self.schemas,
            status=self.status,
            tags=self.tags,
            tenancy_ocid=self.tenancy_ocid,
            users=self.users)


def get_domains_my_user_db_credential(authorization: Optional[str] = None,
                                      idcs_endpoint: Optional[str] = None,
                                      my_user_db_credential_id: Optional[str] = None,
                                      resource_type_schema_version: Optional[str] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDomainsMyUserDbCredentialResult:
    """
    This data source provides details about a specific My User Db Credential resource in Oracle Cloud Infrastructure Identity Domains service.

    Get a user's own database (DB) credential.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_my_user_db_credential = oci.Identity.get_domains_my_user_db_credential(idcs_endpoint=data["oci_identity_domain"]["test_domain"]["url"],
        my_user_db_credential_id=oci_identity_db_credential["test_db_credential"]["id"],
        authorization=var["my_user_db_credential_authorization"],
        resource_type_schema_version=var["my_user_db_credential_resource_type_schema_version"])
    ```


    :param str authorization: The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    :param str idcs_endpoint: The basic endpoint for the identity domain
    :param str my_user_db_credential_id: ID of the resource
    :param str resource_type_schema_version: An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    """
    __args__ = dict()
    __args__['authorization'] = authorization
    __args__['idcsEndpoint'] = idcs_endpoint
    __args__['myUserDbCredentialId'] = my_user_db_credential_id
    __args__['resourceTypeSchemaVersion'] = resource_type_schema_version
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:Identity/getDomainsMyUserDbCredential:getDomainsMyUserDbCredential', __args__, opts=opts, typ=GetDomainsMyUserDbCredentialResult).value

    return AwaitableGetDomainsMyUserDbCredentialResult(
        authorization=pulumi.get(__ret__, 'authorization'),
        compartment_ocid=pulumi.get(__ret__, 'compartment_ocid'),
        db_password=pulumi.get(__ret__, 'db_password'),
        delete_in_progress=pulumi.get(__ret__, 'delete_in_progress'),
        description=pulumi.get(__ret__, 'description'),
        domain_ocid=pulumi.get(__ret__, 'domain_ocid'),
        expired=pulumi.get(__ret__, 'expired'),
        expires_on=pulumi.get(__ret__, 'expires_on'),
        id=pulumi.get(__ret__, 'id'),
        idcs_created_bies=pulumi.get(__ret__, 'idcs_created_bies'),
        idcs_endpoint=pulumi.get(__ret__, 'idcs_endpoint'),
        idcs_last_modified_bies=pulumi.get(__ret__, 'idcs_last_modified_bies'),
        idcs_last_upgraded_in_release=pulumi.get(__ret__, 'idcs_last_upgraded_in_release'),
        idcs_prevented_operations=pulumi.get(__ret__, 'idcs_prevented_operations'),
        last_set_date=pulumi.get(__ret__, 'last_set_date'),
        metas=pulumi.get(__ret__, 'metas'),
        mixed_db_password=pulumi.get(__ret__, 'mixed_db_password'),
        mixed_salt=pulumi.get(__ret__, 'mixed_salt'),
        my_user_db_credential_id=pulumi.get(__ret__, 'my_user_db_credential_id'),
        name=pulumi.get(__ret__, 'name'),
        ocid=pulumi.get(__ret__, 'ocid'),
        resource_type_schema_version=pulumi.get(__ret__, 'resource_type_schema_version'),
        salt=pulumi.get(__ret__, 'salt'),
        schemas=pulumi.get(__ret__, 'schemas'),
        status=pulumi.get(__ret__, 'status'),
        tags=pulumi.get(__ret__, 'tags'),
        tenancy_ocid=pulumi.get(__ret__, 'tenancy_ocid'),
        users=pulumi.get(__ret__, 'users'))


@_utilities.lift_output_func(get_domains_my_user_db_credential)
def get_domains_my_user_db_credential_output(authorization: Optional[pulumi.Input[Optional[str]]] = None,
                                             idcs_endpoint: Optional[pulumi.Input[str]] = None,
                                             my_user_db_credential_id: Optional[pulumi.Input[str]] = None,
                                             resource_type_schema_version: Optional[pulumi.Input[Optional[str]]] = None,
                                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDomainsMyUserDbCredentialResult]:
    """
    This data source provides details about a specific My User Db Credential resource in Oracle Cloud Infrastructure Identity Domains service.

    Get a user's own database (DB) credential.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_my_user_db_credential = oci.Identity.get_domains_my_user_db_credential(idcs_endpoint=data["oci_identity_domain"]["test_domain"]["url"],
        my_user_db_credential_id=oci_identity_db_credential["test_db_credential"]["id"],
        authorization=var["my_user_db_credential_authorization"],
        resource_type_schema_version=var["my_user_db_credential_resource_type_schema_version"])
    ```


    :param str authorization: The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    :param str idcs_endpoint: The basic endpoint for the identity domain
    :param str my_user_db_credential_id: ID of the resource
    :param str resource_type_schema_version: An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    """
    ...
