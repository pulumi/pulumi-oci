# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetDomainsSelfRegistrationProfileResult',
    'AwaitableGetDomainsSelfRegistrationProfileResult',
    'get_domains_self_registration_profile',
    'get_domains_self_registration_profile_output',
]

@pulumi.output_type
class GetDomainsSelfRegistrationProfileResult:
    """
    A collection of values returned by getDomainsSelfRegistrationProfile.
    """
    def __init__(__self__, activation_email_required=None, active=None, after_submit_texts=None, allowed_email_domains=None, attribute_sets=None, attributes=None, authorization=None, compartment_ocid=None, consent_text_present=None, consent_texts=None, default_groups=None, delete_in_progress=None, disallowed_email_domains=None, display_names=None, domain_ocid=None, email_templates=None, external_id=None, footer_logo=None, footer_texts=None, header_logo=None, header_texts=None, id=None, idcs_created_bies=None, idcs_endpoint=None, idcs_last_modified_bies=None, idcs_last_upgraded_in_release=None, idcs_prevented_operations=None, metas=None, name=None, number_of_days_redirect_url_is_valid=None, ocid=None, redirect_url=None, resource_type_schema_version=None, schemas=None, self_registration_profile_id=None, show_on_login_page=None, tags=None, tenancy_ocid=None, user_attributes=None):
        if activation_email_required and not isinstance(activation_email_required, bool):
            raise TypeError("Expected argument 'activation_email_required' to be a bool")
        pulumi.set(__self__, "activation_email_required", activation_email_required)
        if active and not isinstance(active, bool):
            raise TypeError("Expected argument 'active' to be a bool")
        pulumi.set(__self__, "active", active)
        if after_submit_texts and not isinstance(after_submit_texts, list):
            raise TypeError("Expected argument 'after_submit_texts' to be a list")
        pulumi.set(__self__, "after_submit_texts", after_submit_texts)
        if allowed_email_domains and not isinstance(allowed_email_domains, list):
            raise TypeError("Expected argument 'allowed_email_domains' to be a list")
        pulumi.set(__self__, "allowed_email_domains", allowed_email_domains)
        if attribute_sets and not isinstance(attribute_sets, list):
            raise TypeError("Expected argument 'attribute_sets' to be a list")
        pulumi.set(__self__, "attribute_sets", attribute_sets)
        if attributes and not isinstance(attributes, str):
            raise TypeError("Expected argument 'attributes' to be a str")
        pulumi.set(__self__, "attributes", attributes)
        if authorization and not isinstance(authorization, str):
            raise TypeError("Expected argument 'authorization' to be a str")
        pulumi.set(__self__, "authorization", authorization)
        if compartment_ocid and not isinstance(compartment_ocid, str):
            raise TypeError("Expected argument 'compartment_ocid' to be a str")
        pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        if consent_text_present and not isinstance(consent_text_present, bool):
            raise TypeError("Expected argument 'consent_text_present' to be a bool")
        pulumi.set(__self__, "consent_text_present", consent_text_present)
        if consent_texts and not isinstance(consent_texts, list):
            raise TypeError("Expected argument 'consent_texts' to be a list")
        pulumi.set(__self__, "consent_texts", consent_texts)
        if default_groups and not isinstance(default_groups, list):
            raise TypeError("Expected argument 'default_groups' to be a list")
        pulumi.set(__self__, "default_groups", default_groups)
        if delete_in_progress and not isinstance(delete_in_progress, bool):
            raise TypeError("Expected argument 'delete_in_progress' to be a bool")
        pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        if disallowed_email_domains and not isinstance(disallowed_email_domains, list):
            raise TypeError("Expected argument 'disallowed_email_domains' to be a list")
        pulumi.set(__self__, "disallowed_email_domains", disallowed_email_domains)
        if display_names and not isinstance(display_names, list):
            raise TypeError("Expected argument 'display_names' to be a list")
        pulumi.set(__self__, "display_names", display_names)
        if domain_ocid and not isinstance(domain_ocid, str):
            raise TypeError("Expected argument 'domain_ocid' to be a str")
        pulumi.set(__self__, "domain_ocid", domain_ocid)
        if email_templates and not isinstance(email_templates, list):
            raise TypeError("Expected argument 'email_templates' to be a list")
        pulumi.set(__self__, "email_templates", email_templates)
        if external_id and not isinstance(external_id, str):
            raise TypeError("Expected argument 'external_id' to be a str")
        pulumi.set(__self__, "external_id", external_id)
        if footer_logo and not isinstance(footer_logo, str):
            raise TypeError("Expected argument 'footer_logo' to be a str")
        pulumi.set(__self__, "footer_logo", footer_logo)
        if footer_texts and not isinstance(footer_texts, list):
            raise TypeError("Expected argument 'footer_texts' to be a list")
        pulumi.set(__self__, "footer_texts", footer_texts)
        if header_logo and not isinstance(header_logo, str):
            raise TypeError("Expected argument 'header_logo' to be a str")
        pulumi.set(__self__, "header_logo", header_logo)
        if header_texts and not isinstance(header_texts, list):
            raise TypeError("Expected argument 'header_texts' to be a list")
        pulumi.set(__self__, "header_texts", header_texts)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if idcs_created_bies and not isinstance(idcs_created_bies, list):
            raise TypeError("Expected argument 'idcs_created_bies' to be a list")
        pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        if idcs_endpoint and not isinstance(idcs_endpoint, str):
            raise TypeError("Expected argument 'idcs_endpoint' to be a str")
        pulumi.set(__self__, "idcs_endpoint", idcs_endpoint)
        if idcs_last_modified_bies and not isinstance(idcs_last_modified_bies, list):
            raise TypeError("Expected argument 'idcs_last_modified_bies' to be a list")
        pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        if idcs_last_upgraded_in_release and not isinstance(idcs_last_upgraded_in_release, str):
            raise TypeError("Expected argument 'idcs_last_upgraded_in_release' to be a str")
        pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        if idcs_prevented_operations and not isinstance(idcs_prevented_operations, list):
            raise TypeError("Expected argument 'idcs_prevented_operations' to be a list")
        pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        if metas and not isinstance(metas, list):
            raise TypeError("Expected argument 'metas' to be a list")
        pulumi.set(__self__, "metas", metas)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if number_of_days_redirect_url_is_valid and not isinstance(number_of_days_redirect_url_is_valid, int):
            raise TypeError("Expected argument 'number_of_days_redirect_url_is_valid' to be a int")
        pulumi.set(__self__, "number_of_days_redirect_url_is_valid", number_of_days_redirect_url_is_valid)
        if ocid and not isinstance(ocid, str):
            raise TypeError("Expected argument 'ocid' to be a str")
        pulumi.set(__self__, "ocid", ocid)
        if redirect_url and not isinstance(redirect_url, str):
            raise TypeError("Expected argument 'redirect_url' to be a str")
        pulumi.set(__self__, "redirect_url", redirect_url)
        if resource_type_schema_version and not isinstance(resource_type_schema_version, str):
            raise TypeError("Expected argument 'resource_type_schema_version' to be a str")
        pulumi.set(__self__, "resource_type_schema_version", resource_type_schema_version)
        if schemas and not isinstance(schemas, list):
            raise TypeError("Expected argument 'schemas' to be a list")
        pulumi.set(__self__, "schemas", schemas)
        if self_registration_profile_id and not isinstance(self_registration_profile_id, str):
            raise TypeError("Expected argument 'self_registration_profile_id' to be a str")
        pulumi.set(__self__, "self_registration_profile_id", self_registration_profile_id)
        if show_on_login_page and not isinstance(show_on_login_page, bool):
            raise TypeError("Expected argument 'show_on_login_page' to be a bool")
        pulumi.set(__self__, "show_on_login_page", show_on_login_page)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if tenancy_ocid and not isinstance(tenancy_ocid, str):
            raise TypeError("Expected argument 'tenancy_ocid' to be a str")
        pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)
        if user_attributes and not isinstance(user_attributes, list):
            raise TypeError("Expected argument 'user_attributes' to be a list")
        pulumi.set(__self__, "user_attributes", user_attributes)

    @property
    @pulumi.getter(name="activationEmailRequired")
    def activation_email_required(self) -> bool:
        """
        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: boolean
        * uniqueness: none A Boolean value that indicates whether Account verification email is required to be sent before login or not
        """
        return pulumi.get(self, "activation_email_required")

    @property
    @pulumi.getter
    def active(self) -> bool:
        """
        A Boolean value that indicates whether the profile is enabled or not
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter(name="afterSubmitTexts")
    def after_submit_texts(self) -> Sequence['outputs.GetDomainsSelfRegistrationProfileAfterSubmitTextResult']:
        """
        Text to be displayed on UI after doing self registration
        """
        return pulumi.get(self, "after_submit_texts")

    @property
    @pulumi.getter(name="allowedEmailDomains")
    def allowed_email_domains(self) -> Sequence[str]:
        """
        A Multivalue String value for Email domains which are valid for this profile
        """
        return pulumi.get(self, "allowed_email_domains")

    @property
    @pulumi.getter(name="attributeSets")
    def attribute_sets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "attribute_sets")

    @property
    @pulumi.getter
    def attributes(self) -> Optional[str]:
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter
    def authorization(self) -> Optional[str]:
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="consentTextPresent")
    def consent_text_present(self) -> bool:
        """
        A boolean value that indicates whether the consent text is present.
        """
        return pulumi.get(self, "consent_text_present")

    @property
    @pulumi.getter(name="consentTexts")
    def consent_texts(self) -> Sequence['outputs.GetDomainsSelfRegistrationProfileConsentTextResult']:
        """
        Consent text
        """
        return pulumi.get(self, "consent_texts")

    @property
    @pulumi.getter(name="defaultGroups")
    def default_groups(self) -> Sequence['outputs.GetDomainsSelfRegistrationProfileDefaultGroupResult']:
        """
        Default groups assigned to the user
        """
        return pulumi.get(self, "default_groups")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> bool:
        """
        A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
        """
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter(name="disallowedEmailDomains")
    def disallowed_email_domains(self) -> Sequence[str]:
        """
        A Multivalue String Value for Email domains to be handled as exceptions
        """
        return pulumi.get(self, "disallowed_email_domains")

    @property
    @pulumi.getter(name="displayNames")
    def display_names(self) -> Sequence['outputs.GetDomainsSelfRegistrationProfileDisplayNameResult']:
        """
        Registration page name
        """
        return pulumi.get(self, "display_names")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter(name="emailTemplates")
    def email_templates(self) -> Sequence['outputs.GetDomainsSelfRegistrationProfileEmailTemplateResult']:
        """
        Email template
        """
        return pulumi.get(self, "email_templates")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> str:
        """
        An identifier for the Resource as defined by the Service Consumer. The externalId may simplify identification of the Resource between Service Consumer and Service Provider by allowing the Consumer to refer to the Resource with its own identifier, obviating the need to store a local mapping between the local identifier of the Resource and the identifier used by the Service Provider. Each Resource MAY include a non-empty externalId value. The value of the externalId attribute is always issued by the Service Consumer and can never be specified by the Service Provider. The Service Provider MUST always interpret the externalId as scoped to the Service Consumer's tenant.
        """
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter(name="footerLogo")
    def footer_logo(self) -> str:
        """
        References to footer logo
        """
        return pulumi.get(self, "footer_logo")

    @property
    @pulumi.getter(name="footerTexts")
    def footer_texts(self) -> Sequence['outputs.GetDomainsSelfRegistrationProfileFooterTextResult']:
        """
        Footer text
        """
        return pulumi.get(self, "footer_texts")

    @property
    @pulumi.getter(name="headerLogo")
    def header_logo(self) -> str:
        """
        Reference to header logo
        """
        return pulumi.get(self, "header_logo")

    @property
    @pulumi.getter(name="headerTexts")
    def header_texts(self) -> Sequence['outputs.GetDomainsSelfRegistrationProfileHeaderTextResult']:
        """
        Header text
        """
        return pulumi.get(self, "header_texts")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider's entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Sequence['outputs.GetDomainsSelfRegistrationProfileIdcsCreatedByResult']:
        """
        The User or App who created the Resource
        """
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> str:
        return pulumi.get(self, "idcs_endpoint")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Sequence['outputs.GetDomainsSelfRegistrationProfileIdcsLastModifiedByResult']:
        """
        The User or App who modified the Resource
        """
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> str:
        """
        The release number when the resource was upgraded.
        """
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Sequence[str]:
        """
        Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
        """
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter
    def metas(self) -> Sequence['outputs.GetDomainsSelfRegistrationProfileMetaResult']:
        """
        A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
        """
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the profile
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="numberOfDaysRedirectUrlIsValid")
    def number_of_days_redirect_url_is_valid(self) -> int:
        """
        Number of days redirect URL is valid
        """
        return pulumi.get(self, "number_of_days_redirect_url_is_valid")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> str:
        """
        This URL will be replaced in email notification sent to user. When activation email required is set to true, user is created in \\"pending verification\\" state, upon clicking this link user will be able to activate himself. When activation email required is set to false, user is created in \\"verified\\" state, this link will be used to verify user's email.
        """
        return pulumi.get(self, "redirect_url")

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> Optional[str]:
        return pulumi.get(self, "resource_type_schema_version")

    @property
    @pulumi.getter
    def schemas(self) -> Sequence[str]:
        """
        REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \\"enterprise\\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
        """
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter(name="selfRegistrationProfileId")
    def self_registration_profile_id(self) -> str:
        return pulumi.get(self, "self_registration_profile_id")

    @property
    @pulumi.getter(name="showOnLoginPage")
    def show_on_login_page(self) -> bool:
        """
        A Boolean value that indicates whether the profile should be displayed on login page
        """
        return pulumi.get(self, "show_on_login_page")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetDomainsSelfRegistrationProfileTagResult']:
        """
        A list of tags on this resource.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "tenancy_ocid")

    @property
    @pulumi.getter(name="userAttributes")
    def user_attributes(self) -> Sequence['outputs.GetDomainsSelfRegistrationProfileUserAttributeResult']:
        """
        **SCIM++ Properties:**
        * idcsCompositeKey: [value]
        * idcsSearchable: true
        * multiValued: true
        * mutability: readWrite
        * required: false
        * returned: default
        * type: complex
        * uniqueness: none User Attributes
        """
        return pulumi.get(self, "user_attributes")


class AwaitableGetDomainsSelfRegistrationProfileResult(GetDomainsSelfRegistrationProfileResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDomainsSelfRegistrationProfileResult(
            activation_email_required=self.activation_email_required,
            active=self.active,
            after_submit_texts=self.after_submit_texts,
            allowed_email_domains=self.allowed_email_domains,
            attribute_sets=self.attribute_sets,
            attributes=self.attributes,
            authorization=self.authorization,
            compartment_ocid=self.compartment_ocid,
            consent_text_present=self.consent_text_present,
            consent_texts=self.consent_texts,
            default_groups=self.default_groups,
            delete_in_progress=self.delete_in_progress,
            disallowed_email_domains=self.disallowed_email_domains,
            display_names=self.display_names,
            domain_ocid=self.domain_ocid,
            email_templates=self.email_templates,
            external_id=self.external_id,
            footer_logo=self.footer_logo,
            footer_texts=self.footer_texts,
            header_logo=self.header_logo,
            header_texts=self.header_texts,
            id=self.id,
            idcs_created_bies=self.idcs_created_bies,
            idcs_endpoint=self.idcs_endpoint,
            idcs_last_modified_bies=self.idcs_last_modified_bies,
            idcs_last_upgraded_in_release=self.idcs_last_upgraded_in_release,
            idcs_prevented_operations=self.idcs_prevented_operations,
            metas=self.metas,
            name=self.name,
            number_of_days_redirect_url_is_valid=self.number_of_days_redirect_url_is_valid,
            ocid=self.ocid,
            redirect_url=self.redirect_url,
            resource_type_schema_version=self.resource_type_schema_version,
            schemas=self.schemas,
            self_registration_profile_id=self.self_registration_profile_id,
            show_on_login_page=self.show_on_login_page,
            tags=self.tags,
            tenancy_ocid=self.tenancy_ocid,
            user_attributes=self.user_attributes)


def get_domains_self_registration_profile(attribute_sets: Optional[Sequence[str]] = None,
                                          attributes: Optional[str] = None,
                                          authorization: Optional[str] = None,
                                          idcs_endpoint: Optional[str] = None,
                                          resource_type_schema_version: Optional[str] = None,
                                          self_registration_profile_id: Optional[str] = None,
                                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDomainsSelfRegistrationProfileResult:
    """
    This data source provides details about a specific Self Registration Profile resource in Oracle Cloud Infrastructure Identity Domains service.

    Get a self-registration profile.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_self_registration_profile = oci.Identity.get_domains_self_registration_profile(idcs_endpoint=data["oci_identity_domain"]["test_domain"]["url"],
        self_registration_profile_id=oci_optimizer_profile["test_profile"]["id"],
        attribute_sets=["all"],
        attributes="",
        authorization=var["self_registration_profile_authorization"],
        resource_type_schema_version=var["self_registration_profile_resource_type_schema_version"])
    ```


    :param Sequence[str] attribute_sets: A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    :param str attributes: A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    :param str authorization: The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    :param str idcs_endpoint: The basic endpoint for the identity domain
    :param str resource_type_schema_version: An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    :param str self_registration_profile_id: ID of the resource
    """
    __args__ = dict()
    __args__['attributeSets'] = attribute_sets
    __args__['attributes'] = attributes
    __args__['authorization'] = authorization
    __args__['idcsEndpoint'] = idcs_endpoint
    __args__['resourceTypeSchemaVersion'] = resource_type_schema_version
    __args__['selfRegistrationProfileId'] = self_registration_profile_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:Identity/getDomainsSelfRegistrationProfile:getDomainsSelfRegistrationProfile', __args__, opts=opts, typ=GetDomainsSelfRegistrationProfileResult).value

    return AwaitableGetDomainsSelfRegistrationProfileResult(
        activation_email_required=pulumi.get(__ret__, 'activation_email_required'),
        active=pulumi.get(__ret__, 'active'),
        after_submit_texts=pulumi.get(__ret__, 'after_submit_texts'),
        allowed_email_domains=pulumi.get(__ret__, 'allowed_email_domains'),
        attribute_sets=pulumi.get(__ret__, 'attribute_sets'),
        attributes=pulumi.get(__ret__, 'attributes'),
        authorization=pulumi.get(__ret__, 'authorization'),
        compartment_ocid=pulumi.get(__ret__, 'compartment_ocid'),
        consent_text_present=pulumi.get(__ret__, 'consent_text_present'),
        consent_texts=pulumi.get(__ret__, 'consent_texts'),
        default_groups=pulumi.get(__ret__, 'default_groups'),
        delete_in_progress=pulumi.get(__ret__, 'delete_in_progress'),
        disallowed_email_domains=pulumi.get(__ret__, 'disallowed_email_domains'),
        display_names=pulumi.get(__ret__, 'display_names'),
        domain_ocid=pulumi.get(__ret__, 'domain_ocid'),
        email_templates=pulumi.get(__ret__, 'email_templates'),
        external_id=pulumi.get(__ret__, 'external_id'),
        footer_logo=pulumi.get(__ret__, 'footer_logo'),
        footer_texts=pulumi.get(__ret__, 'footer_texts'),
        header_logo=pulumi.get(__ret__, 'header_logo'),
        header_texts=pulumi.get(__ret__, 'header_texts'),
        id=pulumi.get(__ret__, 'id'),
        idcs_created_bies=pulumi.get(__ret__, 'idcs_created_bies'),
        idcs_endpoint=pulumi.get(__ret__, 'idcs_endpoint'),
        idcs_last_modified_bies=pulumi.get(__ret__, 'idcs_last_modified_bies'),
        idcs_last_upgraded_in_release=pulumi.get(__ret__, 'idcs_last_upgraded_in_release'),
        idcs_prevented_operations=pulumi.get(__ret__, 'idcs_prevented_operations'),
        metas=pulumi.get(__ret__, 'metas'),
        name=pulumi.get(__ret__, 'name'),
        number_of_days_redirect_url_is_valid=pulumi.get(__ret__, 'number_of_days_redirect_url_is_valid'),
        ocid=pulumi.get(__ret__, 'ocid'),
        redirect_url=pulumi.get(__ret__, 'redirect_url'),
        resource_type_schema_version=pulumi.get(__ret__, 'resource_type_schema_version'),
        schemas=pulumi.get(__ret__, 'schemas'),
        self_registration_profile_id=pulumi.get(__ret__, 'self_registration_profile_id'),
        show_on_login_page=pulumi.get(__ret__, 'show_on_login_page'),
        tags=pulumi.get(__ret__, 'tags'),
        tenancy_ocid=pulumi.get(__ret__, 'tenancy_ocid'),
        user_attributes=pulumi.get(__ret__, 'user_attributes'))


@_utilities.lift_output_func(get_domains_self_registration_profile)
def get_domains_self_registration_profile_output(attribute_sets: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                                 attributes: Optional[pulumi.Input[Optional[str]]] = None,
                                                 authorization: Optional[pulumi.Input[Optional[str]]] = None,
                                                 idcs_endpoint: Optional[pulumi.Input[str]] = None,
                                                 resource_type_schema_version: Optional[pulumi.Input[Optional[str]]] = None,
                                                 self_registration_profile_id: Optional[pulumi.Input[str]] = None,
                                                 opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDomainsSelfRegistrationProfileResult]:
    """
    This data source provides details about a specific Self Registration Profile resource in Oracle Cloud Infrastructure Identity Domains service.

    Get a self-registration profile.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_self_registration_profile = oci.Identity.get_domains_self_registration_profile(idcs_endpoint=data["oci_identity_domain"]["test_domain"]["url"],
        self_registration_profile_id=oci_optimizer_profile["test_profile"]["id"],
        attribute_sets=["all"],
        attributes="",
        authorization=var["self_registration_profile_authorization"],
        resource_type_schema_version=var["self_registration_profile_resource_type_schema_version"])
    ```


    :param Sequence[str] attribute_sets: A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    :param str attributes: A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    :param str authorization: The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    :param str idcs_endpoint: The basic endpoint for the identity domain
    :param str resource_type_schema_version: An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    :param str self_registration_profile_id: ID of the resource
    """
    ...
