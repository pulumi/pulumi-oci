# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetDomainsSettingResult',
    'AwaitableGetDomainsSettingResult',
    'get_domains_setting',
    'get_domains_setting_output',
]

@pulumi.output_type
class GetDomainsSettingResult:
    """
    A collection of values returned by getDomainsSetting.
    """
    def __init__(__self__, account_always_trust_scope=None, allowed_domains=None, allowed_forgot_password_flow_return_urls=None, allowed_notification_redirect_urls=None, attribute_sets=None, attributes=None, audit_event_retention_period=None, authorization=None, certificate_validations=None, cloud_account_name=None, cloud_gate_cors_settings=None, cloud_migration_custom_url=None, cloud_migration_url_enabled=None, company_names=None, compartment_ocid=None, contact_emails=None, csr_access=None, custom_branding=None, custom_css_location=None, custom_html_location=None, custom_translation=None, default_company_names=None, default_images=None, default_login_texts=None, default_trust_scope=None, delete_in_progress=None, diagnostic_level=None, diagnostic_record_for_search_identifies_returned_resources=None, diagnostic_tracing_upto=None, domain_ocid=None, enable_terms_of_use=None, external_id=None, iam_upst_session_expiry=None, id=None, idcs_created_bies=None, idcs_endpoint=None, idcs_last_modified_bies=None, idcs_last_upgraded_in_release=None, idcs_prevented_operations=None, images=None, is_hosted_page=None, issuer=None, locale=None, login_texts=None, max_no_of_app_cmva_to_return=None, max_no_of_app_role_members_to_return=None, metas=None, migration_status=None, ocid=None, on_premises_provisioning=None, preferred_language=None, prev_issuer=None, privacy_policy_url=None, purge_configs=None, re_auth_factors=None, re_auth_when_changing_my_authentication_factors=None, resource_type_schema_version=None, schemas=None, service_admin_cannot_list_other_users=None, setting_id=None, signing_cert_public_access=None, sub_mapping_attr=None, tags=None, tenancy_ocid=None, tenant_custom_claims=None, terms_of_use_url=None, timezone=None):
        if account_always_trust_scope and not isinstance(account_always_trust_scope, bool):
            raise TypeError("Expected argument 'account_always_trust_scope' to be a bool")
        pulumi.set(__self__, "account_always_trust_scope", account_always_trust_scope)
        if allowed_domains and not isinstance(allowed_domains, list):
            raise TypeError("Expected argument 'allowed_domains' to be a list")
        pulumi.set(__self__, "allowed_domains", allowed_domains)
        if allowed_forgot_password_flow_return_urls and not isinstance(allowed_forgot_password_flow_return_urls, list):
            raise TypeError("Expected argument 'allowed_forgot_password_flow_return_urls' to be a list")
        pulumi.set(__self__, "allowed_forgot_password_flow_return_urls", allowed_forgot_password_flow_return_urls)
        if allowed_notification_redirect_urls and not isinstance(allowed_notification_redirect_urls, list):
            raise TypeError("Expected argument 'allowed_notification_redirect_urls' to be a list")
        pulumi.set(__self__, "allowed_notification_redirect_urls", allowed_notification_redirect_urls)
        if attribute_sets and not isinstance(attribute_sets, list):
            raise TypeError("Expected argument 'attribute_sets' to be a list")
        pulumi.set(__self__, "attribute_sets", attribute_sets)
        if attributes and not isinstance(attributes, str):
            raise TypeError("Expected argument 'attributes' to be a str")
        pulumi.set(__self__, "attributes", attributes)
        if audit_event_retention_period and not isinstance(audit_event_retention_period, int):
            raise TypeError("Expected argument 'audit_event_retention_period' to be a int")
        pulumi.set(__self__, "audit_event_retention_period", audit_event_retention_period)
        if authorization and not isinstance(authorization, str):
            raise TypeError("Expected argument 'authorization' to be a str")
        pulumi.set(__self__, "authorization", authorization)
        if certificate_validations and not isinstance(certificate_validations, list):
            raise TypeError("Expected argument 'certificate_validations' to be a list")
        pulumi.set(__self__, "certificate_validations", certificate_validations)
        if cloud_account_name and not isinstance(cloud_account_name, str):
            raise TypeError("Expected argument 'cloud_account_name' to be a str")
        pulumi.set(__self__, "cloud_account_name", cloud_account_name)
        if cloud_gate_cors_settings and not isinstance(cloud_gate_cors_settings, list):
            raise TypeError("Expected argument 'cloud_gate_cors_settings' to be a list")
        pulumi.set(__self__, "cloud_gate_cors_settings", cloud_gate_cors_settings)
        if cloud_migration_custom_url and not isinstance(cloud_migration_custom_url, str):
            raise TypeError("Expected argument 'cloud_migration_custom_url' to be a str")
        pulumi.set(__self__, "cloud_migration_custom_url", cloud_migration_custom_url)
        if cloud_migration_url_enabled and not isinstance(cloud_migration_url_enabled, bool):
            raise TypeError("Expected argument 'cloud_migration_url_enabled' to be a bool")
        pulumi.set(__self__, "cloud_migration_url_enabled", cloud_migration_url_enabled)
        if company_names and not isinstance(company_names, list):
            raise TypeError("Expected argument 'company_names' to be a list")
        pulumi.set(__self__, "company_names", company_names)
        if compartment_ocid and not isinstance(compartment_ocid, str):
            raise TypeError("Expected argument 'compartment_ocid' to be a str")
        pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        if contact_emails and not isinstance(contact_emails, list):
            raise TypeError("Expected argument 'contact_emails' to be a list")
        pulumi.set(__self__, "contact_emails", contact_emails)
        if csr_access and not isinstance(csr_access, str):
            raise TypeError("Expected argument 'csr_access' to be a str")
        pulumi.set(__self__, "csr_access", csr_access)
        if custom_branding and not isinstance(custom_branding, bool):
            raise TypeError("Expected argument 'custom_branding' to be a bool")
        pulumi.set(__self__, "custom_branding", custom_branding)
        if custom_css_location and not isinstance(custom_css_location, str):
            raise TypeError("Expected argument 'custom_css_location' to be a str")
        pulumi.set(__self__, "custom_css_location", custom_css_location)
        if custom_html_location and not isinstance(custom_html_location, str):
            raise TypeError("Expected argument 'custom_html_location' to be a str")
        pulumi.set(__self__, "custom_html_location", custom_html_location)
        if custom_translation and not isinstance(custom_translation, str):
            raise TypeError("Expected argument 'custom_translation' to be a str")
        pulumi.set(__self__, "custom_translation", custom_translation)
        if default_company_names and not isinstance(default_company_names, list):
            raise TypeError("Expected argument 'default_company_names' to be a list")
        pulumi.set(__self__, "default_company_names", default_company_names)
        if default_images and not isinstance(default_images, list):
            raise TypeError("Expected argument 'default_images' to be a list")
        pulumi.set(__self__, "default_images", default_images)
        if default_login_texts and not isinstance(default_login_texts, list):
            raise TypeError("Expected argument 'default_login_texts' to be a list")
        pulumi.set(__self__, "default_login_texts", default_login_texts)
        if default_trust_scope and not isinstance(default_trust_scope, str):
            raise TypeError("Expected argument 'default_trust_scope' to be a str")
        pulumi.set(__self__, "default_trust_scope", default_trust_scope)
        if delete_in_progress and not isinstance(delete_in_progress, bool):
            raise TypeError("Expected argument 'delete_in_progress' to be a bool")
        pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        if diagnostic_level and not isinstance(diagnostic_level, int):
            raise TypeError("Expected argument 'diagnostic_level' to be a int")
        pulumi.set(__self__, "diagnostic_level", diagnostic_level)
        if diagnostic_record_for_search_identifies_returned_resources and not isinstance(diagnostic_record_for_search_identifies_returned_resources, bool):
            raise TypeError("Expected argument 'diagnostic_record_for_search_identifies_returned_resources' to be a bool")
        pulumi.set(__self__, "diagnostic_record_for_search_identifies_returned_resources", diagnostic_record_for_search_identifies_returned_resources)
        if diagnostic_tracing_upto and not isinstance(diagnostic_tracing_upto, str):
            raise TypeError("Expected argument 'diagnostic_tracing_upto' to be a str")
        pulumi.set(__self__, "diagnostic_tracing_upto", diagnostic_tracing_upto)
        if domain_ocid and not isinstance(domain_ocid, str):
            raise TypeError("Expected argument 'domain_ocid' to be a str")
        pulumi.set(__self__, "domain_ocid", domain_ocid)
        if enable_terms_of_use and not isinstance(enable_terms_of_use, bool):
            raise TypeError("Expected argument 'enable_terms_of_use' to be a bool")
        pulumi.set(__self__, "enable_terms_of_use", enable_terms_of_use)
        if external_id and not isinstance(external_id, str):
            raise TypeError("Expected argument 'external_id' to be a str")
        pulumi.set(__self__, "external_id", external_id)
        if iam_upst_session_expiry and not isinstance(iam_upst_session_expiry, int):
            raise TypeError("Expected argument 'iam_upst_session_expiry' to be a int")
        pulumi.set(__self__, "iam_upst_session_expiry", iam_upst_session_expiry)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if idcs_created_bies and not isinstance(idcs_created_bies, list):
            raise TypeError("Expected argument 'idcs_created_bies' to be a list")
        pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        if idcs_endpoint and not isinstance(idcs_endpoint, str):
            raise TypeError("Expected argument 'idcs_endpoint' to be a str")
        pulumi.set(__self__, "idcs_endpoint", idcs_endpoint)
        if idcs_last_modified_bies and not isinstance(idcs_last_modified_bies, list):
            raise TypeError("Expected argument 'idcs_last_modified_bies' to be a list")
        pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        if idcs_last_upgraded_in_release and not isinstance(idcs_last_upgraded_in_release, str):
            raise TypeError("Expected argument 'idcs_last_upgraded_in_release' to be a str")
        pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        if idcs_prevented_operations and not isinstance(idcs_prevented_operations, list):
            raise TypeError("Expected argument 'idcs_prevented_operations' to be a list")
        pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        if images and not isinstance(images, list):
            raise TypeError("Expected argument 'images' to be a list")
        pulumi.set(__self__, "images", images)
        if is_hosted_page and not isinstance(is_hosted_page, bool):
            raise TypeError("Expected argument 'is_hosted_page' to be a bool")
        pulumi.set(__self__, "is_hosted_page", is_hosted_page)
        if issuer and not isinstance(issuer, str):
            raise TypeError("Expected argument 'issuer' to be a str")
        pulumi.set(__self__, "issuer", issuer)
        if locale and not isinstance(locale, str):
            raise TypeError("Expected argument 'locale' to be a str")
        pulumi.set(__self__, "locale", locale)
        if login_texts and not isinstance(login_texts, list):
            raise TypeError("Expected argument 'login_texts' to be a list")
        pulumi.set(__self__, "login_texts", login_texts)
        if max_no_of_app_cmva_to_return and not isinstance(max_no_of_app_cmva_to_return, int):
            raise TypeError("Expected argument 'max_no_of_app_cmva_to_return' to be a int")
        pulumi.set(__self__, "max_no_of_app_cmva_to_return", max_no_of_app_cmva_to_return)
        if max_no_of_app_role_members_to_return and not isinstance(max_no_of_app_role_members_to_return, int):
            raise TypeError("Expected argument 'max_no_of_app_role_members_to_return' to be a int")
        pulumi.set(__self__, "max_no_of_app_role_members_to_return", max_no_of_app_role_members_to_return)
        if metas and not isinstance(metas, list):
            raise TypeError("Expected argument 'metas' to be a list")
        pulumi.set(__self__, "metas", metas)
        if migration_status and not isinstance(migration_status, str):
            raise TypeError("Expected argument 'migration_status' to be a str")
        pulumi.set(__self__, "migration_status", migration_status)
        if ocid and not isinstance(ocid, str):
            raise TypeError("Expected argument 'ocid' to be a str")
        pulumi.set(__self__, "ocid", ocid)
        if on_premises_provisioning and not isinstance(on_premises_provisioning, bool):
            raise TypeError("Expected argument 'on_premises_provisioning' to be a bool")
        pulumi.set(__self__, "on_premises_provisioning", on_premises_provisioning)
        if preferred_language and not isinstance(preferred_language, str):
            raise TypeError("Expected argument 'preferred_language' to be a str")
        pulumi.set(__self__, "preferred_language", preferred_language)
        if prev_issuer and not isinstance(prev_issuer, str):
            raise TypeError("Expected argument 'prev_issuer' to be a str")
        pulumi.set(__self__, "prev_issuer", prev_issuer)
        if privacy_policy_url and not isinstance(privacy_policy_url, str):
            raise TypeError("Expected argument 'privacy_policy_url' to be a str")
        pulumi.set(__self__, "privacy_policy_url", privacy_policy_url)
        if purge_configs and not isinstance(purge_configs, list):
            raise TypeError("Expected argument 'purge_configs' to be a list")
        pulumi.set(__self__, "purge_configs", purge_configs)
        if re_auth_factors and not isinstance(re_auth_factors, list):
            raise TypeError("Expected argument 're_auth_factors' to be a list")
        pulumi.set(__self__, "re_auth_factors", re_auth_factors)
        if re_auth_when_changing_my_authentication_factors and not isinstance(re_auth_when_changing_my_authentication_factors, bool):
            raise TypeError("Expected argument 're_auth_when_changing_my_authentication_factors' to be a bool")
        pulumi.set(__self__, "re_auth_when_changing_my_authentication_factors", re_auth_when_changing_my_authentication_factors)
        if resource_type_schema_version and not isinstance(resource_type_schema_version, str):
            raise TypeError("Expected argument 'resource_type_schema_version' to be a str")
        pulumi.set(__self__, "resource_type_schema_version", resource_type_schema_version)
        if schemas and not isinstance(schemas, list):
            raise TypeError("Expected argument 'schemas' to be a list")
        pulumi.set(__self__, "schemas", schemas)
        if service_admin_cannot_list_other_users and not isinstance(service_admin_cannot_list_other_users, bool):
            raise TypeError("Expected argument 'service_admin_cannot_list_other_users' to be a bool")
        pulumi.set(__self__, "service_admin_cannot_list_other_users", service_admin_cannot_list_other_users)
        if setting_id and not isinstance(setting_id, str):
            raise TypeError("Expected argument 'setting_id' to be a str")
        pulumi.set(__self__, "setting_id", setting_id)
        if signing_cert_public_access and not isinstance(signing_cert_public_access, bool):
            raise TypeError("Expected argument 'signing_cert_public_access' to be a bool")
        pulumi.set(__self__, "signing_cert_public_access", signing_cert_public_access)
        if sub_mapping_attr and not isinstance(sub_mapping_attr, str):
            raise TypeError("Expected argument 'sub_mapping_attr' to be a str")
        pulumi.set(__self__, "sub_mapping_attr", sub_mapping_attr)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if tenancy_ocid and not isinstance(tenancy_ocid, str):
            raise TypeError("Expected argument 'tenancy_ocid' to be a str")
        pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)
        if tenant_custom_claims and not isinstance(tenant_custom_claims, list):
            raise TypeError("Expected argument 'tenant_custom_claims' to be a list")
        pulumi.set(__self__, "tenant_custom_claims", tenant_custom_claims)
        if terms_of_use_url and not isinstance(terms_of_use_url, str):
            raise TypeError("Expected argument 'terms_of_use_url' to be a str")
        pulumi.set(__self__, "terms_of_use_url", terms_of_use_url)
        if timezone and not isinstance(timezone, str):
            raise TypeError("Expected argument 'timezone' to be a str")
        pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter(name="accountAlwaysTrustScope")
    def account_always_trust_scope(self) -> bool:
        """
        Indicates whether all the Apps in this customer tenancy should trust each other. A value of true overrides the 'defaultTrustScope' attribute here in Settings, as well as any App-specific 'trustScope' attribute, to force in effect 'trustScope=Account' for every App in this customer tenancy.
        """
        return pulumi.get(self, "account_always_trust_scope")

    @property
    @pulumi.getter(name="allowedDomains")
    def allowed_domains(self) -> Sequence[str]:
        """
        One or more email domains allowed in a user's email field. If unassigned, any domain is allowed.
        """
        return pulumi.get(self, "allowed_domains")

    @property
    @pulumi.getter(name="allowedForgotPasswordFlowReturnUrls")
    def allowed_forgot_password_flow_return_urls(self) -> Sequence[str]:
        """
        If specified, indicates the set of Urls which can be returned to after successful forgot password flow
        """
        return pulumi.get(self, "allowed_forgot_password_flow_return_urls")

    @property
    @pulumi.getter(name="allowedNotificationRedirectUrls")
    def allowed_notification_redirect_urls(self) -> Sequence[str]:
        """
        If specified, indicates the set of allowed notification redirect Urls which can be specified as the value of \\"notificationRedirectUrl\\" in the POST .../admin/v1/MePasswordResetRequestor request payload, which will then be included in the reset password email notification sent to a user as part of the forgot password / password reset flow.
        """
        return pulumi.get(self, "allowed_notification_redirect_urls")

    @property
    @pulumi.getter(name="attributeSets")
    def attribute_sets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "attribute_sets")

    @property
    @pulumi.getter
    def attributes(self) -> Optional[str]:
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter(name="auditEventRetentionPeriod")
    def audit_event_retention_period(self) -> int:
        """
        Audit Event retention period. If set, overrides default of 30 days after which Audit Events will be purged
        """
        return pulumi.get(self, "audit_event_retention_period")

    @property
    @pulumi.getter
    def authorization(self) -> Optional[str]:
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="certificateValidations")
    def certificate_validations(self) -> Sequence['outputs.GetDomainsSettingCertificateValidationResult']:
        """
        Certificate Validation Config
        """
        return pulumi.get(self, "certificate_validations")

    @property
    @pulumi.getter(name="cloudAccountName")
    def cloud_account_name(self) -> str:
        """
        The attribute to store the cloud account name
        """
        return pulumi.get(self, "cloud_account_name")

    @property
    @pulumi.getter(name="cloudGateCorsSettings")
    def cloud_gate_cors_settings(self) -> Sequence['outputs.GetDomainsSettingCloudGateCorsSettingResult']:
        """
        A complex attribute that specifies the Cloud Gate cross origin resource sharing settings.
        """
        return pulumi.get(self, "cloud_gate_cors_settings")

    @property
    @pulumi.getter(name="cloudMigrationCustomUrl")
    def cloud_migration_custom_url(self) -> str:
        """
        If specified, indicates the custom SIM Migrator Url which can be used while SIM to Oracle Identity Cloud Service CloudAccount Migration.
        """
        return pulumi.get(self, "cloud_migration_custom_url")

    @property
    @pulumi.getter(name="cloudMigrationUrlEnabled")
    def cloud_migration_url_enabled(self) -> bool:
        """
        CloudAccountMigration: Enable Custom SIM Migrator Url.
        """
        return pulumi.get(self, "cloud_migration_url_enabled")

    @property
    @pulumi.getter(name="companyNames")
    def company_names(self) -> Sequence['outputs.GetDomainsSettingCompanyNameResult']:
        """
        Name of the company in different locales
        """
        return pulumi.get(self, "company_names")

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="contactEmails")
    def contact_emails(self) -> Sequence[str]:
        """
        Contact emails used to notify tenants. Can be one or more user or group alias emails.
        """
        return pulumi.get(self, "contact_emails")

    @property
    @pulumi.getter(name="csrAccess")
    def csr_access(self) -> str:
        """
        This value indicates whether Customer Service Representatives can login and have readOnly or readWrite access.  A value of 'none' means CSR cannot login to the services.
        """
        return pulumi.get(self, "csr_access")

    @property
    @pulumi.getter(name="customBranding")
    def custom_branding(self) -> bool:
        """
        Indicates if the branding is default or custom
        """
        return pulumi.get(self, "custom_branding")

    @property
    @pulumi.getter(name="customCssLocation")
    def custom_css_location(self) -> str:
        """
        Storage URL location where the sanitized custom css is located
        """
        return pulumi.get(self, "custom_css_location")

    @property
    @pulumi.getter(name="customHtmlLocation")
    def custom_html_location(self) -> str:
        """
        Storage URL location where the sanitized custom html is located
        """
        return pulumi.get(self, "custom_html_location")

    @property
    @pulumi.getter(name="customTranslation")
    def custom_translation(self) -> str:
        """
        Custom translations (JSON String)
        """
        return pulumi.get(self, "custom_translation")

    @property
    @pulumi.getter(name="defaultCompanyNames")
    def default_company_names(self) -> Sequence['outputs.GetDomainsSettingDefaultCompanyNameResult']:
        """
        Default name of the Company in different locales
        """
        return pulumi.get(self, "default_company_names")

    @property
    @pulumi.getter(name="defaultImages")
    def default_images(self) -> Sequence['outputs.GetDomainsSettingDefaultImageResult']:
        """
        References to various images
        """
        return pulumi.get(self, "default_images")

    @property
    @pulumi.getter(name="defaultLoginTexts")
    def default_login_texts(self) -> Sequence['outputs.GetDomainsSettingDefaultLoginTextResult']:
        """
        Default Login text in different locales
        """
        return pulumi.get(self, "default_login_texts")

    @property
    @pulumi.getter(name="defaultTrustScope")
    def default_trust_scope(self) -> str:
        """
        **Deprecated Since: 18.3.6**
        """
        return pulumi.get(self, "default_trust_scope")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> bool:
        """
        A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
        """
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter(name="diagnosticLevel")
    def diagnostic_level(self) -> int:
        """
        The level of diagnostic logging that is currently in effect. A level of 0 (zero) indicates that diagnostic logging is disabled. A level of 1 (one) indicates that diagnostic logging is enabled.
        """
        return pulumi.get(self, "diagnostic_level")

    @property
    @pulumi.getter(name="diagnosticRecordForSearchIdentifiesReturnedResources")
    def diagnostic_record_for_search_identifies_returned_resources(self) -> bool:
        """
        Controls whether DiagnosticRecords for external search-operations (against SCIM resource-types in the Admin service) identify returned resources.  If true, indicates that for each successful external search-operation at least one DiagnosticRecord will include at least one identifier for each matching resource that is returned in that search-response.  If false, no DiagnosticRecord should be expected to identify returned resources for a search-operation.  The default value is false.
        """
        return pulumi.get(self, "diagnostic_record_for_search_identifies_returned_resources")

    @property
    @pulumi.getter(name="diagnosticTracingUpto")
    def diagnostic_tracing_upto(self) -> str:
        """
        The end time up to which diagnostic recording is switched on
        """
        return pulumi.get(self, "diagnostic_tracing_upto")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter(name="enableTermsOfUse")
    def enable_terms_of_use(self) -> bool:
        """
        Indicates if Terms of Use is enabled in UI
        """
        return pulumi.get(self, "enable_terms_of_use")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> str:
        """
        An identifier for the Resource as defined by the Service Consumer. The externalId may simplify identification of the Resource between Service Consumer and Service Provider by allowing the Consumer to refer to the Resource with its own identifier, obviating the need to store a local mapping between the local identifier of the Resource and the identifier used by the Service Provider. Each Resource MAY include a non-empty externalId value. The value of the externalId attribute is always issued by the Service Consumer and can never be specified by the Service Provider. The Service Provider MUST always interpret the externalId as scoped to the Service Consumer's tenant.
        """
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter(name="iamUpstSessionExpiry")
    def iam_upst_session_expiry(self) -> int:
        """
        Maximum duration for IAM User Principal Session Token expiry
        """
        return pulumi.get(self, "iam_upst_session_expiry")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider's entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Sequence['outputs.GetDomainsSettingIdcsCreatedByResult']:
        """
        The User or App who created the Resource
        """
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> str:
        return pulumi.get(self, "idcs_endpoint")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Sequence['outputs.GetDomainsSettingIdcsLastModifiedByResult']:
        """
        The User or App who modified the Resource
        """
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> str:
        """
        The release number when the resource was upgraded.
        """
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Sequence[str]:
        """
        Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
        """
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter
    def images(self) -> Sequence['outputs.GetDomainsSettingImageResult']:
        """
        References to various images
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="isHostedPage")
    def is_hosted_page(self) -> bool:
        """
        Indicates if 'hosted' option was selected
        """
        return pulumi.get(self, "is_hosted_page")

    @property
    @pulumi.getter
    def issuer(self) -> str:
        """
        Tenant issuer.
        """
        return pulumi.get(self, "issuer")

    @property
    @pulumi.getter
    def locale(self) -> str:
        """
        Locale
        """
        return pulumi.get(self, "locale")

    @property
    @pulumi.getter(name="loginTexts")
    def login_texts(self) -> Sequence['outputs.GetDomainsSettingLoginTextResult']:
        """
        Login text in different locales
        """
        return pulumi.get(self, "login_texts")

    @property
    @pulumi.getter(name="maxNoOfAppCmvaToReturn")
    def max_no_of_app_cmva_to_return(self) -> int:
        """
        Limit the maximum return of CMVA for an App
        """
        return pulumi.get(self, "max_no_of_app_cmva_to_return")

    @property
    @pulumi.getter(name="maxNoOfAppRoleMembersToReturn")
    def max_no_of_app_role_members_to_return(self) -> int:
        """
        Limit the maximum return of members for an AppRole
        """
        return pulumi.get(self, "max_no_of_app_role_members_to_return")

    @property
    @pulumi.getter
    def metas(self) -> Sequence['outputs.GetDomainsSettingMetaResult']:
        """
        A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
        """
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter(name="migrationStatus")
    def migration_status(self) -> str:
        """
        Database Migration Status
        """
        return pulumi.get(self, "migration_status")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="onPremisesProvisioning")
    def on_premises_provisioning(self) -> bool:
        """
        On-Premises provisioning feature toggle.
        """
        return pulumi.get(self, "on_premises_provisioning")

    @property
    @pulumi.getter(name="preferredLanguage")
    def preferred_language(self) -> str:
        """
        Preferred written or spoken language used for localized user interfaces
        """
        return pulumi.get(self, "preferred_language")

    @property
    @pulumi.getter(name="prevIssuer")
    def prev_issuer(self) -> str:
        """
        Previous Tenant issuer. This is an Oracle Identity Cloud Service internal attribute which is not meant to be directly modified by ID Admin. Even if the request body (Settings) contains this attribute, the actual value will be set according to the Oracle Identity Cloud Service internal logic rather than solely based on the value provided in the request payload.
        """
        return pulumi.get(self, "prev_issuer")

    @property
    @pulumi.getter(name="privacyPolicyUrl")
    def privacy_policy_url(self) -> str:
        """
        Privacy Policy URL
        """
        return pulumi.get(self, "privacy_policy_url")

    @property
    @pulumi.getter(name="purgeConfigs")
    def purge_configs(self) -> Sequence['outputs.GetDomainsSettingPurgeConfigResult']:
        """
        Purge Configs for different Resource Types
        """
        return pulumi.get(self, "purge_configs")

    @property
    @pulumi.getter(name="reAuthFactors")
    def re_auth_factors(self) -> Sequence[str]:
        """
        If reAuthWhenChangingMyAuthenticationFactors is true (default), this attribute specifies which re-authentication factor to use. Allowed value is \\"password\\".
        """
        return pulumi.get(self, "re_auth_factors")

    @property
    @pulumi.getter(name="reAuthWhenChangingMyAuthenticationFactors")
    def re_auth_when_changing_my_authentication_factors(self) -> bool:
        """
        Specifies whether re-authentication is required or not when a user changes one of their security factors such as password or email. Default is true to ensure more secure behavior.
        """
        return pulumi.get(self, "re_auth_when_changing_my_authentication_factors")

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> Optional[str]:
        return pulumi.get(self, "resource_type_schema_version")

    @property
    @pulumi.getter
    def schemas(self) -> Sequence[str]:
        """
        REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \\"enterprise\\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
        """
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter(name="serviceAdminCannotListOtherUsers")
    def service_admin_cannot_list_other_users(self) -> bool:
        """
        By default, a service admin can list all users in stripe. If true, a service admin cannot list other users.
        """
        return pulumi.get(self, "service_admin_cannot_list_other_users")

    @property
    @pulumi.getter(name="settingId")
    def setting_id(self) -> str:
        return pulumi.get(self, "setting_id")

    @property
    @pulumi.getter(name="signingCertPublicAccess")
    def signing_cert_public_access(self) -> bool:
        """
        Indicates if access on SigningCert is allowed to public or not
        """
        return pulumi.get(self, "signing_cert_public_access")

    @property
    @pulumi.getter(name="subMappingAttr")
    def sub_mapping_attr(self) -> str:
        """
        **Added In:** 20.1.3
        """
        return pulumi.get(self, "sub_mapping_attr")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetDomainsSettingTagResult']:
        """
        A list of tags on this resource.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "tenancy_ocid")

    @property
    @pulumi.getter(name="tenantCustomClaims")
    def tenant_custom_claims(self) -> Sequence['outputs.GetDomainsSettingTenantCustomClaimResult']:
        """
        Custom claims associated with the specific tenant
        """
        return pulumi.get(self, "tenant_custom_claims")

    @property
    @pulumi.getter(name="termsOfUseUrl")
    def terms_of_use_url(self) -> str:
        """
        Terms of Use URL
        """
        return pulumi.get(self, "terms_of_use_url")

    @property
    @pulumi.getter
    def timezone(self) -> str:
        """
        User's timezone
        """
        return pulumi.get(self, "timezone")


class AwaitableGetDomainsSettingResult(GetDomainsSettingResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDomainsSettingResult(
            account_always_trust_scope=self.account_always_trust_scope,
            allowed_domains=self.allowed_domains,
            allowed_forgot_password_flow_return_urls=self.allowed_forgot_password_flow_return_urls,
            allowed_notification_redirect_urls=self.allowed_notification_redirect_urls,
            attribute_sets=self.attribute_sets,
            attributes=self.attributes,
            audit_event_retention_period=self.audit_event_retention_period,
            authorization=self.authorization,
            certificate_validations=self.certificate_validations,
            cloud_account_name=self.cloud_account_name,
            cloud_gate_cors_settings=self.cloud_gate_cors_settings,
            cloud_migration_custom_url=self.cloud_migration_custom_url,
            cloud_migration_url_enabled=self.cloud_migration_url_enabled,
            company_names=self.company_names,
            compartment_ocid=self.compartment_ocid,
            contact_emails=self.contact_emails,
            csr_access=self.csr_access,
            custom_branding=self.custom_branding,
            custom_css_location=self.custom_css_location,
            custom_html_location=self.custom_html_location,
            custom_translation=self.custom_translation,
            default_company_names=self.default_company_names,
            default_images=self.default_images,
            default_login_texts=self.default_login_texts,
            default_trust_scope=self.default_trust_scope,
            delete_in_progress=self.delete_in_progress,
            diagnostic_level=self.diagnostic_level,
            diagnostic_record_for_search_identifies_returned_resources=self.diagnostic_record_for_search_identifies_returned_resources,
            diagnostic_tracing_upto=self.diagnostic_tracing_upto,
            domain_ocid=self.domain_ocid,
            enable_terms_of_use=self.enable_terms_of_use,
            external_id=self.external_id,
            iam_upst_session_expiry=self.iam_upst_session_expiry,
            id=self.id,
            idcs_created_bies=self.idcs_created_bies,
            idcs_endpoint=self.idcs_endpoint,
            idcs_last_modified_bies=self.idcs_last_modified_bies,
            idcs_last_upgraded_in_release=self.idcs_last_upgraded_in_release,
            idcs_prevented_operations=self.idcs_prevented_operations,
            images=self.images,
            is_hosted_page=self.is_hosted_page,
            issuer=self.issuer,
            locale=self.locale,
            login_texts=self.login_texts,
            max_no_of_app_cmva_to_return=self.max_no_of_app_cmva_to_return,
            max_no_of_app_role_members_to_return=self.max_no_of_app_role_members_to_return,
            metas=self.metas,
            migration_status=self.migration_status,
            ocid=self.ocid,
            on_premises_provisioning=self.on_premises_provisioning,
            preferred_language=self.preferred_language,
            prev_issuer=self.prev_issuer,
            privacy_policy_url=self.privacy_policy_url,
            purge_configs=self.purge_configs,
            re_auth_factors=self.re_auth_factors,
            re_auth_when_changing_my_authentication_factors=self.re_auth_when_changing_my_authentication_factors,
            resource_type_schema_version=self.resource_type_schema_version,
            schemas=self.schemas,
            service_admin_cannot_list_other_users=self.service_admin_cannot_list_other_users,
            setting_id=self.setting_id,
            signing_cert_public_access=self.signing_cert_public_access,
            sub_mapping_attr=self.sub_mapping_attr,
            tags=self.tags,
            tenancy_ocid=self.tenancy_ocid,
            tenant_custom_claims=self.tenant_custom_claims,
            terms_of_use_url=self.terms_of_use_url,
            timezone=self.timezone)


def get_domains_setting(attribute_sets: Optional[Sequence[str]] = None,
                        attributes: Optional[str] = None,
                        authorization: Optional[str] = None,
                        idcs_endpoint: Optional[str] = None,
                        resource_type_schema_version: Optional[str] = None,
                        setting_id: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDomainsSettingResult:
    """
    This data source provides details about a specific Setting resource in Oracle Cloud Infrastructure Identity Domains service.

    Get Settings

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_setting = oci.Identity.get_domains_setting(idcs_endpoint=data["oci_identity_domain"]["test_domain"]["url"],
        setting_id="Settings",
        attribute_sets=["all"],
        attributes="",
        authorization=var["setting_authorization"],
        resource_type_schema_version=var["setting_resource_type_schema_version"])
    ```


    :param Sequence[str] attribute_sets: A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    :param str attributes: A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    :param str authorization: The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    :param str idcs_endpoint: The basic endpoint for the identity domain
    :param str resource_type_schema_version: An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    :param str setting_id: ID of the resource
    """
    __args__ = dict()
    __args__['attributeSets'] = attribute_sets
    __args__['attributes'] = attributes
    __args__['authorization'] = authorization
    __args__['idcsEndpoint'] = idcs_endpoint
    __args__['resourceTypeSchemaVersion'] = resource_type_schema_version
    __args__['settingId'] = setting_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:Identity/getDomainsSetting:getDomainsSetting', __args__, opts=opts, typ=GetDomainsSettingResult).value

    return AwaitableGetDomainsSettingResult(
        account_always_trust_scope=pulumi.get(__ret__, 'account_always_trust_scope'),
        allowed_domains=pulumi.get(__ret__, 'allowed_domains'),
        allowed_forgot_password_flow_return_urls=pulumi.get(__ret__, 'allowed_forgot_password_flow_return_urls'),
        allowed_notification_redirect_urls=pulumi.get(__ret__, 'allowed_notification_redirect_urls'),
        attribute_sets=pulumi.get(__ret__, 'attribute_sets'),
        attributes=pulumi.get(__ret__, 'attributes'),
        audit_event_retention_period=pulumi.get(__ret__, 'audit_event_retention_period'),
        authorization=pulumi.get(__ret__, 'authorization'),
        certificate_validations=pulumi.get(__ret__, 'certificate_validations'),
        cloud_account_name=pulumi.get(__ret__, 'cloud_account_name'),
        cloud_gate_cors_settings=pulumi.get(__ret__, 'cloud_gate_cors_settings'),
        cloud_migration_custom_url=pulumi.get(__ret__, 'cloud_migration_custom_url'),
        cloud_migration_url_enabled=pulumi.get(__ret__, 'cloud_migration_url_enabled'),
        company_names=pulumi.get(__ret__, 'company_names'),
        compartment_ocid=pulumi.get(__ret__, 'compartment_ocid'),
        contact_emails=pulumi.get(__ret__, 'contact_emails'),
        csr_access=pulumi.get(__ret__, 'csr_access'),
        custom_branding=pulumi.get(__ret__, 'custom_branding'),
        custom_css_location=pulumi.get(__ret__, 'custom_css_location'),
        custom_html_location=pulumi.get(__ret__, 'custom_html_location'),
        custom_translation=pulumi.get(__ret__, 'custom_translation'),
        default_company_names=pulumi.get(__ret__, 'default_company_names'),
        default_images=pulumi.get(__ret__, 'default_images'),
        default_login_texts=pulumi.get(__ret__, 'default_login_texts'),
        default_trust_scope=pulumi.get(__ret__, 'default_trust_scope'),
        delete_in_progress=pulumi.get(__ret__, 'delete_in_progress'),
        diagnostic_level=pulumi.get(__ret__, 'diagnostic_level'),
        diagnostic_record_for_search_identifies_returned_resources=pulumi.get(__ret__, 'diagnostic_record_for_search_identifies_returned_resources'),
        diagnostic_tracing_upto=pulumi.get(__ret__, 'diagnostic_tracing_upto'),
        domain_ocid=pulumi.get(__ret__, 'domain_ocid'),
        enable_terms_of_use=pulumi.get(__ret__, 'enable_terms_of_use'),
        external_id=pulumi.get(__ret__, 'external_id'),
        iam_upst_session_expiry=pulumi.get(__ret__, 'iam_upst_session_expiry'),
        id=pulumi.get(__ret__, 'id'),
        idcs_created_bies=pulumi.get(__ret__, 'idcs_created_bies'),
        idcs_endpoint=pulumi.get(__ret__, 'idcs_endpoint'),
        idcs_last_modified_bies=pulumi.get(__ret__, 'idcs_last_modified_bies'),
        idcs_last_upgraded_in_release=pulumi.get(__ret__, 'idcs_last_upgraded_in_release'),
        idcs_prevented_operations=pulumi.get(__ret__, 'idcs_prevented_operations'),
        images=pulumi.get(__ret__, 'images'),
        is_hosted_page=pulumi.get(__ret__, 'is_hosted_page'),
        issuer=pulumi.get(__ret__, 'issuer'),
        locale=pulumi.get(__ret__, 'locale'),
        login_texts=pulumi.get(__ret__, 'login_texts'),
        max_no_of_app_cmva_to_return=pulumi.get(__ret__, 'max_no_of_app_cmva_to_return'),
        max_no_of_app_role_members_to_return=pulumi.get(__ret__, 'max_no_of_app_role_members_to_return'),
        metas=pulumi.get(__ret__, 'metas'),
        migration_status=pulumi.get(__ret__, 'migration_status'),
        ocid=pulumi.get(__ret__, 'ocid'),
        on_premises_provisioning=pulumi.get(__ret__, 'on_premises_provisioning'),
        preferred_language=pulumi.get(__ret__, 'preferred_language'),
        prev_issuer=pulumi.get(__ret__, 'prev_issuer'),
        privacy_policy_url=pulumi.get(__ret__, 'privacy_policy_url'),
        purge_configs=pulumi.get(__ret__, 'purge_configs'),
        re_auth_factors=pulumi.get(__ret__, 're_auth_factors'),
        re_auth_when_changing_my_authentication_factors=pulumi.get(__ret__, 're_auth_when_changing_my_authentication_factors'),
        resource_type_schema_version=pulumi.get(__ret__, 'resource_type_schema_version'),
        schemas=pulumi.get(__ret__, 'schemas'),
        service_admin_cannot_list_other_users=pulumi.get(__ret__, 'service_admin_cannot_list_other_users'),
        setting_id=pulumi.get(__ret__, 'setting_id'),
        signing_cert_public_access=pulumi.get(__ret__, 'signing_cert_public_access'),
        sub_mapping_attr=pulumi.get(__ret__, 'sub_mapping_attr'),
        tags=pulumi.get(__ret__, 'tags'),
        tenancy_ocid=pulumi.get(__ret__, 'tenancy_ocid'),
        tenant_custom_claims=pulumi.get(__ret__, 'tenant_custom_claims'),
        terms_of_use_url=pulumi.get(__ret__, 'terms_of_use_url'),
        timezone=pulumi.get(__ret__, 'timezone'))


@_utilities.lift_output_func(get_domains_setting)
def get_domains_setting_output(attribute_sets: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                               attributes: Optional[pulumi.Input[Optional[str]]] = None,
                               authorization: Optional[pulumi.Input[Optional[str]]] = None,
                               idcs_endpoint: Optional[pulumi.Input[str]] = None,
                               resource_type_schema_version: Optional[pulumi.Input[Optional[str]]] = None,
                               setting_id: Optional[pulumi.Input[str]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDomainsSettingResult]:
    """
    This data source provides details about a specific Setting resource in Oracle Cloud Infrastructure Identity Domains service.

    Get Settings

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_setting = oci.Identity.get_domains_setting(idcs_endpoint=data["oci_identity_domain"]["test_domain"]["url"],
        setting_id="Settings",
        attribute_sets=["all"],
        attributes="",
        authorization=var["setting_authorization"],
        resource_type_schema_version=var["setting_resource_type_schema_version"])
    ```


    :param Sequence[str] attribute_sets: A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    :param str attributes: A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    :param str authorization: The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    :param str idcs_endpoint: The basic endpoint for the identity domain
    :param str resource_type_schema_version: An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    :param str setting_id: ID of the resource
    """
    ...
