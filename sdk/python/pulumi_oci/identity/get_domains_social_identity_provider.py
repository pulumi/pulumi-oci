# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetDomainsSocialIdentityProviderResult',
    'AwaitableGetDomainsSocialIdentityProviderResult',
    'get_domains_social_identity_provider',
    'get_domains_social_identity_provider_output',
]

@pulumi.output_type
class GetDomainsSocialIdentityProviderResult:
    """
    A collection of values returned by getDomainsSocialIdentityProvider.
    """
    def __init__(__self__, access_token_url=None, account_linking_enabled=None, admin_scopes=None, authorization=None, authz_url=None, auto_redirect_enabled=None, client_credential_in_payload=None, clock_skew_in_seconds=None, compartment_ocid=None, consumer_key=None, consumer_secret=None, delete_in_progress=None, description=None, discovery_url=None, domain_ocid=None, enabled=None, icon_url=None, id=None, id_attribute=None, idcs_created_bies=None, idcs_endpoint=None, idcs_last_modified_bies=None, idcs_last_upgraded_in_release=None, idcs_prevented_operations=None, jit_prov_assigned_groups=None, jit_prov_group_static_list_enabled=None, metas=None, name=None, ocid=None, profile_url=None, redirect_url=None, refresh_token_url=None, registration_enabled=None, relay_idp_param_mappings=None, resource_type_schema_version=None, schemas=None, scopes=None, service_provider_name=None, show_on_login=None, social_identity_provider_id=None, social_jit_provisioning_enabled=None, status=None, tags=None, tenancy_ocid=None):
        if access_token_url and not isinstance(access_token_url, str):
            raise TypeError("Expected argument 'access_token_url' to be a str")
        pulumi.set(__self__, "access_token_url", access_token_url)
        if account_linking_enabled and not isinstance(account_linking_enabled, bool):
            raise TypeError("Expected argument 'account_linking_enabled' to be a bool")
        pulumi.set(__self__, "account_linking_enabled", account_linking_enabled)
        if admin_scopes and not isinstance(admin_scopes, list):
            raise TypeError("Expected argument 'admin_scopes' to be a list")
        pulumi.set(__self__, "admin_scopes", admin_scopes)
        if authorization and not isinstance(authorization, str):
            raise TypeError("Expected argument 'authorization' to be a str")
        pulumi.set(__self__, "authorization", authorization)
        if authz_url and not isinstance(authz_url, str):
            raise TypeError("Expected argument 'authz_url' to be a str")
        pulumi.set(__self__, "authz_url", authz_url)
        if auto_redirect_enabled and not isinstance(auto_redirect_enabled, bool):
            raise TypeError("Expected argument 'auto_redirect_enabled' to be a bool")
        pulumi.set(__self__, "auto_redirect_enabled", auto_redirect_enabled)
        if client_credential_in_payload and not isinstance(client_credential_in_payload, bool):
            raise TypeError("Expected argument 'client_credential_in_payload' to be a bool")
        pulumi.set(__self__, "client_credential_in_payload", client_credential_in_payload)
        if clock_skew_in_seconds and not isinstance(clock_skew_in_seconds, int):
            raise TypeError("Expected argument 'clock_skew_in_seconds' to be a int")
        pulumi.set(__self__, "clock_skew_in_seconds", clock_skew_in_seconds)
        if compartment_ocid and not isinstance(compartment_ocid, str):
            raise TypeError("Expected argument 'compartment_ocid' to be a str")
        pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        if consumer_key and not isinstance(consumer_key, str):
            raise TypeError("Expected argument 'consumer_key' to be a str")
        pulumi.set(__self__, "consumer_key", consumer_key)
        if consumer_secret and not isinstance(consumer_secret, str):
            raise TypeError("Expected argument 'consumer_secret' to be a str")
        pulumi.set(__self__, "consumer_secret", consumer_secret)
        if delete_in_progress and not isinstance(delete_in_progress, bool):
            raise TypeError("Expected argument 'delete_in_progress' to be a bool")
        pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if discovery_url and not isinstance(discovery_url, str):
            raise TypeError("Expected argument 'discovery_url' to be a str")
        pulumi.set(__self__, "discovery_url", discovery_url)
        if domain_ocid and not isinstance(domain_ocid, str):
            raise TypeError("Expected argument 'domain_ocid' to be a str")
        pulumi.set(__self__, "domain_ocid", domain_ocid)
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        pulumi.set(__self__, "enabled", enabled)
        if icon_url and not isinstance(icon_url, str):
            raise TypeError("Expected argument 'icon_url' to be a str")
        pulumi.set(__self__, "icon_url", icon_url)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if id_attribute and not isinstance(id_attribute, str):
            raise TypeError("Expected argument 'id_attribute' to be a str")
        pulumi.set(__self__, "id_attribute", id_attribute)
        if idcs_created_bies and not isinstance(idcs_created_bies, list):
            raise TypeError("Expected argument 'idcs_created_bies' to be a list")
        pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        if idcs_endpoint and not isinstance(idcs_endpoint, str):
            raise TypeError("Expected argument 'idcs_endpoint' to be a str")
        pulumi.set(__self__, "idcs_endpoint", idcs_endpoint)
        if idcs_last_modified_bies and not isinstance(idcs_last_modified_bies, list):
            raise TypeError("Expected argument 'idcs_last_modified_bies' to be a list")
        pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        if idcs_last_upgraded_in_release and not isinstance(idcs_last_upgraded_in_release, str):
            raise TypeError("Expected argument 'idcs_last_upgraded_in_release' to be a str")
        pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        if idcs_prevented_operations and not isinstance(idcs_prevented_operations, list):
            raise TypeError("Expected argument 'idcs_prevented_operations' to be a list")
        pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        if jit_prov_assigned_groups and not isinstance(jit_prov_assigned_groups, list):
            raise TypeError("Expected argument 'jit_prov_assigned_groups' to be a list")
        pulumi.set(__self__, "jit_prov_assigned_groups", jit_prov_assigned_groups)
        if jit_prov_group_static_list_enabled and not isinstance(jit_prov_group_static_list_enabled, bool):
            raise TypeError("Expected argument 'jit_prov_group_static_list_enabled' to be a bool")
        pulumi.set(__self__, "jit_prov_group_static_list_enabled", jit_prov_group_static_list_enabled)
        if metas and not isinstance(metas, list):
            raise TypeError("Expected argument 'metas' to be a list")
        pulumi.set(__self__, "metas", metas)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if ocid and not isinstance(ocid, str):
            raise TypeError("Expected argument 'ocid' to be a str")
        pulumi.set(__self__, "ocid", ocid)
        if profile_url and not isinstance(profile_url, str):
            raise TypeError("Expected argument 'profile_url' to be a str")
        pulumi.set(__self__, "profile_url", profile_url)
        if redirect_url and not isinstance(redirect_url, str):
            raise TypeError("Expected argument 'redirect_url' to be a str")
        pulumi.set(__self__, "redirect_url", redirect_url)
        if refresh_token_url and not isinstance(refresh_token_url, str):
            raise TypeError("Expected argument 'refresh_token_url' to be a str")
        pulumi.set(__self__, "refresh_token_url", refresh_token_url)
        if registration_enabled and not isinstance(registration_enabled, bool):
            raise TypeError("Expected argument 'registration_enabled' to be a bool")
        pulumi.set(__self__, "registration_enabled", registration_enabled)
        if relay_idp_param_mappings and not isinstance(relay_idp_param_mappings, list):
            raise TypeError("Expected argument 'relay_idp_param_mappings' to be a list")
        pulumi.set(__self__, "relay_idp_param_mappings", relay_idp_param_mappings)
        if resource_type_schema_version and not isinstance(resource_type_schema_version, str):
            raise TypeError("Expected argument 'resource_type_schema_version' to be a str")
        pulumi.set(__self__, "resource_type_schema_version", resource_type_schema_version)
        if schemas and not isinstance(schemas, list):
            raise TypeError("Expected argument 'schemas' to be a list")
        pulumi.set(__self__, "schemas", schemas)
        if scopes and not isinstance(scopes, list):
            raise TypeError("Expected argument 'scopes' to be a list")
        pulumi.set(__self__, "scopes", scopes)
        if service_provider_name and not isinstance(service_provider_name, str):
            raise TypeError("Expected argument 'service_provider_name' to be a str")
        pulumi.set(__self__, "service_provider_name", service_provider_name)
        if show_on_login and not isinstance(show_on_login, bool):
            raise TypeError("Expected argument 'show_on_login' to be a bool")
        pulumi.set(__self__, "show_on_login", show_on_login)
        if social_identity_provider_id and not isinstance(social_identity_provider_id, str):
            raise TypeError("Expected argument 'social_identity_provider_id' to be a str")
        pulumi.set(__self__, "social_identity_provider_id", social_identity_provider_id)
        if social_jit_provisioning_enabled and not isinstance(social_jit_provisioning_enabled, bool):
            raise TypeError("Expected argument 'social_jit_provisioning_enabled' to be a bool")
        pulumi.set(__self__, "social_jit_provisioning_enabled", social_jit_provisioning_enabled)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if tenancy_ocid and not isinstance(tenancy_ocid, str):
            raise TypeError("Expected argument 'tenancy_ocid' to be a str")
        pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)

    @property
    @pulumi.getter(name="accessTokenUrl")
    def access_token_url(self) -> str:
        """
        Social IDP Access token URL
        """
        return pulumi.get(self, "access_token_url")

    @property
    @pulumi.getter(name="accountLinkingEnabled")
    def account_linking_enabled(self) -> bool:
        """
        Whether account linking is enabled
        """
        return pulumi.get(self, "account_linking_enabled")

    @property
    @pulumi.getter(name="adminScopes")
    def admin_scopes(self) -> Sequence[str]:
        """
        Admin scope to request
        """
        return pulumi.get(self, "admin_scopes")

    @property
    @pulumi.getter
    def authorization(self) -> Optional[str]:
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="authzUrl")
    def authz_url(self) -> str:
        """
        Social IDP Authorization URL
        """
        return pulumi.get(self, "authz_url")

    @property
    @pulumi.getter(name="autoRedirectEnabled")
    def auto_redirect_enabled(self) -> bool:
        """
        Whether social auto redirect is enabled. The IDP policy should be configured with only one Social IDP, and without username/password selected.
        """
        return pulumi.get(self, "auto_redirect_enabled")

    @property
    @pulumi.getter(name="clientCredentialInPayload")
    def client_credential_in_payload(self) -> bool:
        """
        Whether the client credential is contained in payload
        """
        return pulumi.get(self, "client_credential_in_payload")

    @property
    @pulumi.getter(name="clockSkewInSeconds")
    def clock_skew_in_seconds(self) -> int:
        """
        Social IDP allowed clock skew time
        """
        return pulumi.get(self, "clock_skew_in_seconds")

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="consumerKey")
    def consumer_key(self) -> str:
        """
        Social IDP Client Application Client ID
        """
        return pulumi.get(self, "consumer_key")

    @property
    @pulumi.getter(name="consumerSecret")
    def consumer_secret(self) -> str:
        """
        Social IDP Client Application Client Secret
        """
        return pulumi.get(self, "consumer_secret")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> bool:
        """
        A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
        """
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Social IDP description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="discoveryUrl")
    def discovery_url(self) -> str:
        """
        Discovery URL
        """
        return pulumi.get(self, "discovery_url")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Whether the IDP is enabled or not
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="iconUrl")
    def icon_url(self) -> str:
        """
        ICON URL for social idp
        """
        return pulumi.get(self, "icon_url")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider's entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idAttribute")
    def id_attribute(self) -> str:
        """
        Id attribute used for account linking
        """
        return pulumi.get(self, "id_attribute")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Sequence['outputs.GetDomainsSocialIdentityProviderIdcsCreatedByResult']:
        """
        The User or App who created the Resource
        """
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> str:
        return pulumi.get(self, "idcs_endpoint")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Sequence['outputs.GetDomainsSocialIdentityProviderIdcsLastModifiedByResult']:
        """
        The User or App who modified the Resource
        """
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> str:
        """
        The release number when the resource was upgraded.
        """
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Sequence[str]:
        """
        Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
        """
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter(name="jitProvAssignedGroups")
    def jit_prov_assigned_groups(self) -> Sequence['outputs.GetDomainsSocialIdentityProviderJitProvAssignedGroupResult']:
        """
        Lists the groups each social JIT-provisioned user is a member. Just-in-Time user-provisioning applies this static list when jitProvGroupStaticListEnabled:true.
        """
        return pulumi.get(self, "jit_prov_assigned_groups")

    @property
    @pulumi.getter(name="jitProvGroupStaticListEnabled")
    def jit_prov_group_static_list_enabled(self) -> bool:
        """
        Set to true to indicate Social JIT User Provisioning Groups should be assigned from a static list
        """
        return pulumi.get(self, "jit_prov_group_static_list_enabled")

    @property
    @pulumi.getter
    def metas(self) -> Sequence['outputs.GetDomainsSocialIdentityProviderMetaResult']:
        """
        A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
        """
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Social provider name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="profileUrl")
    def profile_url(self) -> str:
        """
        Social IDP User profile URL
        """
        return pulumi.get(self, "profile_url")

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> str:
        """
        redirect URL for social idp
        """
        return pulumi.get(self, "redirect_url")

    @property
    @pulumi.getter(name="refreshTokenUrl")
    def refresh_token_url(self) -> str:
        """
        Social IDP Refresh token URL
        """
        return pulumi.get(self, "refresh_token_url")

    @property
    @pulumi.getter(name="registrationEnabled")
    def registration_enabled(self) -> bool:
        """
        Whether registration is enabled
        """
        return pulumi.get(self, "registration_enabled")

    @property
    @pulumi.getter(name="relayIdpParamMappings")
    def relay_idp_param_mappings(self) -> Sequence['outputs.GetDomainsSocialIdentityProviderRelayIdpParamMappingResult']:
        """
        Relay Param variable for Social IDP
        """
        return pulumi.get(self, "relay_idp_param_mappings")

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> Optional[str]:
        return pulumi.get(self, "resource_type_schema_version")

    @property
    @pulumi.getter
    def schemas(self) -> Sequence[str]:
        """
        REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \\"enterprise\\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
        """
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter
    def scopes(self) -> Sequence[str]:
        """
        Scope to request
        """
        return pulumi.get(self, "scopes")

    @property
    @pulumi.getter(name="serviceProviderName")
    def service_provider_name(self) -> str:
        """
        Service Provider Name
        """
        return pulumi.get(self, "service_provider_name")

    @property
    @pulumi.getter(name="showOnLogin")
    def show_on_login(self) -> bool:
        """
        Whether show on login
        """
        return pulumi.get(self, "show_on_login")

    @property
    @pulumi.getter(name="socialIdentityProviderId")
    def social_identity_provider_id(self) -> str:
        return pulumi.get(self, "social_identity_provider_id")

    @property
    @pulumi.getter(name="socialJitProvisioningEnabled")
    def social_jit_provisioning_enabled(self) -> bool:
        """
        Whether Social JIT Provisioning is enabled
        """
        return pulumi.get(self, "social_jit_provisioning_enabled")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetDomainsSocialIdentityProviderTagResult']:
        """
        A list of tags on this resource.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "tenancy_ocid")


class AwaitableGetDomainsSocialIdentityProviderResult(GetDomainsSocialIdentityProviderResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDomainsSocialIdentityProviderResult(
            access_token_url=self.access_token_url,
            account_linking_enabled=self.account_linking_enabled,
            admin_scopes=self.admin_scopes,
            authorization=self.authorization,
            authz_url=self.authz_url,
            auto_redirect_enabled=self.auto_redirect_enabled,
            client_credential_in_payload=self.client_credential_in_payload,
            clock_skew_in_seconds=self.clock_skew_in_seconds,
            compartment_ocid=self.compartment_ocid,
            consumer_key=self.consumer_key,
            consumer_secret=self.consumer_secret,
            delete_in_progress=self.delete_in_progress,
            description=self.description,
            discovery_url=self.discovery_url,
            domain_ocid=self.domain_ocid,
            enabled=self.enabled,
            icon_url=self.icon_url,
            id=self.id,
            id_attribute=self.id_attribute,
            idcs_created_bies=self.idcs_created_bies,
            idcs_endpoint=self.idcs_endpoint,
            idcs_last_modified_bies=self.idcs_last_modified_bies,
            idcs_last_upgraded_in_release=self.idcs_last_upgraded_in_release,
            idcs_prevented_operations=self.idcs_prevented_operations,
            jit_prov_assigned_groups=self.jit_prov_assigned_groups,
            jit_prov_group_static_list_enabled=self.jit_prov_group_static_list_enabled,
            metas=self.metas,
            name=self.name,
            ocid=self.ocid,
            profile_url=self.profile_url,
            redirect_url=self.redirect_url,
            refresh_token_url=self.refresh_token_url,
            registration_enabled=self.registration_enabled,
            relay_idp_param_mappings=self.relay_idp_param_mappings,
            resource_type_schema_version=self.resource_type_schema_version,
            schemas=self.schemas,
            scopes=self.scopes,
            service_provider_name=self.service_provider_name,
            show_on_login=self.show_on_login,
            social_identity_provider_id=self.social_identity_provider_id,
            social_jit_provisioning_enabled=self.social_jit_provisioning_enabled,
            status=self.status,
            tags=self.tags,
            tenancy_ocid=self.tenancy_ocid)


def get_domains_social_identity_provider(authorization: Optional[str] = None,
                                         idcs_endpoint: Optional[str] = None,
                                         resource_type_schema_version: Optional[str] = None,
                                         social_identity_provider_id: Optional[str] = None,
                                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDomainsSocialIdentityProviderResult:
    """
    This data source provides details about a specific Social Identity Provider resource in Oracle Cloud Infrastructure Identity Domains service.

    Get a Social Identity Provider

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_social_identity_provider = oci.Identity.get_domains_social_identity_provider(idcs_endpoint=test_domain["url"],
        social_identity_provider_id=test_identity_provider["id"],
        authorization=social_identity_provider_authorization,
        resource_type_schema_version=social_identity_provider_resource_type_schema_version)
    ```


    :param str authorization: The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    :param str idcs_endpoint: The basic endpoint for the identity domain
    :param str resource_type_schema_version: An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    :param str social_identity_provider_id: ID of the resource
    """
    __args__ = dict()
    __args__['authorization'] = authorization
    __args__['idcsEndpoint'] = idcs_endpoint
    __args__['resourceTypeSchemaVersion'] = resource_type_schema_version
    __args__['socialIdentityProviderId'] = social_identity_provider_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:Identity/getDomainsSocialIdentityProvider:getDomainsSocialIdentityProvider', __args__, opts=opts, typ=GetDomainsSocialIdentityProviderResult).value

    return AwaitableGetDomainsSocialIdentityProviderResult(
        access_token_url=pulumi.get(__ret__, 'access_token_url'),
        account_linking_enabled=pulumi.get(__ret__, 'account_linking_enabled'),
        admin_scopes=pulumi.get(__ret__, 'admin_scopes'),
        authorization=pulumi.get(__ret__, 'authorization'),
        authz_url=pulumi.get(__ret__, 'authz_url'),
        auto_redirect_enabled=pulumi.get(__ret__, 'auto_redirect_enabled'),
        client_credential_in_payload=pulumi.get(__ret__, 'client_credential_in_payload'),
        clock_skew_in_seconds=pulumi.get(__ret__, 'clock_skew_in_seconds'),
        compartment_ocid=pulumi.get(__ret__, 'compartment_ocid'),
        consumer_key=pulumi.get(__ret__, 'consumer_key'),
        consumer_secret=pulumi.get(__ret__, 'consumer_secret'),
        delete_in_progress=pulumi.get(__ret__, 'delete_in_progress'),
        description=pulumi.get(__ret__, 'description'),
        discovery_url=pulumi.get(__ret__, 'discovery_url'),
        domain_ocid=pulumi.get(__ret__, 'domain_ocid'),
        enabled=pulumi.get(__ret__, 'enabled'),
        icon_url=pulumi.get(__ret__, 'icon_url'),
        id=pulumi.get(__ret__, 'id'),
        id_attribute=pulumi.get(__ret__, 'id_attribute'),
        idcs_created_bies=pulumi.get(__ret__, 'idcs_created_bies'),
        idcs_endpoint=pulumi.get(__ret__, 'idcs_endpoint'),
        idcs_last_modified_bies=pulumi.get(__ret__, 'idcs_last_modified_bies'),
        idcs_last_upgraded_in_release=pulumi.get(__ret__, 'idcs_last_upgraded_in_release'),
        idcs_prevented_operations=pulumi.get(__ret__, 'idcs_prevented_operations'),
        jit_prov_assigned_groups=pulumi.get(__ret__, 'jit_prov_assigned_groups'),
        jit_prov_group_static_list_enabled=pulumi.get(__ret__, 'jit_prov_group_static_list_enabled'),
        metas=pulumi.get(__ret__, 'metas'),
        name=pulumi.get(__ret__, 'name'),
        ocid=pulumi.get(__ret__, 'ocid'),
        profile_url=pulumi.get(__ret__, 'profile_url'),
        redirect_url=pulumi.get(__ret__, 'redirect_url'),
        refresh_token_url=pulumi.get(__ret__, 'refresh_token_url'),
        registration_enabled=pulumi.get(__ret__, 'registration_enabled'),
        relay_idp_param_mappings=pulumi.get(__ret__, 'relay_idp_param_mappings'),
        resource_type_schema_version=pulumi.get(__ret__, 'resource_type_schema_version'),
        schemas=pulumi.get(__ret__, 'schemas'),
        scopes=pulumi.get(__ret__, 'scopes'),
        service_provider_name=pulumi.get(__ret__, 'service_provider_name'),
        show_on_login=pulumi.get(__ret__, 'show_on_login'),
        social_identity_provider_id=pulumi.get(__ret__, 'social_identity_provider_id'),
        social_jit_provisioning_enabled=pulumi.get(__ret__, 'social_jit_provisioning_enabled'),
        status=pulumi.get(__ret__, 'status'),
        tags=pulumi.get(__ret__, 'tags'),
        tenancy_ocid=pulumi.get(__ret__, 'tenancy_ocid'))
def get_domains_social_identity_provider_output(authorization: Optional[pulumi.Input[Optional[str]]] = None,
                                                idcs_endpoint: Optional[pulumi.Input[str]] = None,
                                                resource_type_schema_version: Optional[pulumi.Input[Optional[str]]] = None,
                                                social_identity_provider_id: Optional[pulumi.Input[str]] = None,
                                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDomainsSocialIdentityProviderResult]:
    """
    This data source provides details about a specific Social Identity Provider resource in Oracle Cloud Infrastructure Identity Domains service.

    Get a Social Identity Provider

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_social_identity_provider = oci.Identity.get_domains_social_identity_provider(idcs_endpoint=test_domain["url"],
        social_identity_provider_id=test_identity_provider["id"],
        authorization=social_identity_provider_authorization,
        resource_type_schema_version=social_identity_provider_resource_type_schema_version)
    ```


    :param str authorization: The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    :param str idcs_endpoint: The basic endpoint for the identity domain
    :param str resource_type_schema_version: An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    :param str social_identity_provider_id: ID of the resource
    """
    __args__ = dict()
    __args__['authorization'] = authorization
    __args__['idcsEndpoint'] = idcs_endpoint
    __args__['resourceTypeSchemaVersion'] = resource_type_schema_version
    __args__['socialIdentityProviderId'] = social_identity_provider_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('oci:Identity/getDomainsSocialIdentityProvider:getDomainsSocialIdentityProvider', __args__, opts=opts, typ=GetDomainsSocialIdentityProviderResult)
    return __ret__.apply(lambda __response__: GetDomainsSocialIdentityProviderResult(
        access_token_url=pulumi.get(__response__, 'access_token_url'),
        account_linking_enabled=pulumi.get(__response__, 'account_linking_enabled'),
        admin_scopes=pulumi.get(__response__, 'admin_scopes'),
        authorization=pulumi.get(__response__, 'authorization'),
        authz_url=pulumi.get(__response__, 'authz_url'),
        auto_redirect_enabled=pulumi.get(__response__, 'auto_redirect_enabled'),
        client_credential_in_payload=pulumi.get(__response__, 'client_credential_in_payload'),
        clock_skew_in_seconds=pulumi.get(__response__, 'clock_skew_in_seconds'),
        compartment_ocid=pulumi.get(__response__, 'compartment_ocid'),
        consumer_key=pulumi.get(__response__, 'consumer_key'),
        consumer_secret=pulumi.get(__response__, 'consumer_secret'),
        delete_in_progress=pulumi.get(__response__, 'delete_in_progress'),
        description=pulumi.get(__response__, 'description'),
        discovery_url=pulumi.get(__response__, 'discovery_url'),
        domain_ocid=pulumi.get(__response__, 'domain_ocid'),
        enabled=pulumi.get(__response__, 'enabled'),
        icon_url=pulumi.get(__response__, 'icon_url'),
        id=pulumi.get(__response__, 'id'),
        id_attribute=pulumi.get(__response__, 'id_attribute'),
        idcs_created_bies=pulumi.get(__response__, 'idcs_created_bies'),
        idcs_endpoint=pulumi.get(__response__, 'idcs_endpoint'),
        idcs_last_modified_bies=pulumi.get(__response__, 'idcs_last_modified_bies'),
        idcs_last_upgraded_in_release=pulumi.get(__response__, 'idcs_last_upgraded_in_release'),
        idcs_prevented_operations=pulumi.get(__response__, 'idcs_prevented_operations'),
        jit_prov_assigned_groups=pulumi.get(__response__, 'jit_prov_assigned_groups'),
        jit_prov_group_static_list_enabled=pulumi.get(__response__, 'jit_prov_group_static_list_enabled'),
        metas=pulumi.get(__response__, 'metas'),
        name=pulumi.get(__response__, 'name'),
        ocid=pulumi.get(__response__, 'ocid'),
        profile_url=pulumi.get(__response__, 'profile_url'),
        redirect_url=pulumi.get(__response__, 'redirect_url'),
        refresh_token_url=pulumi.get(__response__, 'refresh_token_url'),
        registration_enabled=pulumi.get(__response__, 'registration_enabled'),
        relay_idp_param_mappings=pulumi.get(__response__, 'relay_idp_param_mappings'),
        resource_type_schema_version=pulumi.get(__response__, 'resource_type_schema_version'),
        schemas=pulumi.get(__response__, 'schemas'),
        scopes=pulumi.get(__response__, 'scopes'),
        service_provider_name=pulumi.get(__response__, 'service_provider_name'),
        show_on_login=pulumi.get(__response__, 'show_on_login'),
        social_identity_provider_id=pulumi.get(__response__, 'social_identity_provider_id'),
        social_jit_provisioning_enabled=pulumi.get(__response__, 'social_jit_provisioning_enabled'),
        status=pulumi.get(__response__, 'status'),
        tags=pulumi.get(__response__, 'tags'),
        tenancy_ocid=pulumi.get(__response__, 'tenancy_ocid')))
