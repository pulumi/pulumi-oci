# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetIdentityProviderGroupsResult',
    'AwaitableGetIdentityProviderGroupsResult',
    'get_identity_provider_groups',
    'get_identity_provider_groups_output',
]

@pulumi.output_type
class GetIdentityProviderGroupsResult:
    """
    A collection of values returned by getIdentityProviderGroups.
    """
    def __init__(__self__, filters=None, id=None, identity_provider_groups=None, identity_provider_id=None, name=None, state=None):
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if identity_provider_groups and not isinstance(identity_provider_groups, list):
            raise TypeError("Expected argument 'identity_provider_groups' to be a list")
        pulumi.set(__self__, "identity_provider_groups", identity_provider_groups)
        if identity_provider_id and not isinstance(identity_provider_id, str):
            raise TypeError("Expected argument 'identity_provider_id' to be a str")
        pulumi.set(__self__, "identity_provider_id", identity_provider_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetIdentityProviderGroupsFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="identityProviderGroups")
    def identity_provider_groups(self) -> Sequence['outputs.GetIdentityProviderGroupsIdentityProviderGroupResult']:
        """
        The list of identity_provider_groups.
        """
        return pulumi.get(self, "identity_provider_groups")

    @property
    @pulumi.getter(name="identityProviderId")
    def identity_provider_id(self) -> str:
        """
        The OCID of the `IdentityProvider` this group belongs to.
        """
        return pulumi.get(self, "identity_provider_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Display name of the group
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")


class AwaitableGetIdentityProviderGroupsResult(GetIdentityProviderGroupsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIdentityProviderGroupsResult(
            filters=self.filters,
            id=self.id,
            identity_provider_groups=self.identity_provider_groups,
            identity_provider_id=self.identity_provider_id,
            name=self.name,
            state=self.state)


def get_identity_provider_groups(filters: Optional[Sequence[pulumi.InputType['GetIdentityProviderGroupsFilterArgs']]] = None,
                                 identity_provider_id: Optional[str] = None,
                                 name: Optional[str] = None,
                                 state: Optional[str] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIdentityProviderGroupsResult:
    """
    This data source provides the list of Identity Provider Groups in Oracle Cloud Infrastructure Identity service.

    **Deprecated.** For more information, see [Deprecated IAM Service APIs](https://docs.cloud.oracle.com/iaas/Content/Identity/Reference/deprecatediamapis.htm).

    Lists the identity provider groups.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_identity_provider_groups = oci.Identity.get_identity_provider_groups(identity_provider_id=oci_identity_identity_provider["test_identity_provider"]["id"],
        name=var["identity_provider_group_name"],
        state=var["identity_provider_group_state"])
    ```


    :param str identity_provider_id: The OCID of the identity provider.
    :param str name: A filter to only return resources that match the given name exactly.
    :param str state: A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['identityProviderId'] = identity_provider_id
    __args__['name'] = name
    __args__['state'] = state
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:Identity/getIdentityProviderGroups:getIdentityProviderGroups', __args__, opts=opts, typ=GetIdentityProviderGroupsResult).value

    return AwaitableGetIdentityProviderGroupsResult(
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        identity_provider_groups=pulumi.get(__ret__, 'identity_provider_groups'),
        identity_provider_id=pulumi.get(__ret__, 'identity_provider_id'),
        name=pulumi.get(__ret__, 'name'),
        state=pulumi.get(__ret__, 'state'))


@_utilities.lift_output_func(get_identity_provider_groups)
def get_identity_provider_groups_output(filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetIdentityProviderGroupsFilterArgs']]]]] = None,
                                        identity_provider_id: Optional[pulumi.Input[str]] = None,
                                        name: Optional[pulumi.Input[Optional[str]]] = None,
                                        state: Optional[pulumi.Input[Optional[str]]] = None,
                                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetIdentityProviderGroupsResult]:
    """
    This data source provides the list of Identity Provider Groups in Oracle Cloud Infrastructure Identity service.

    **Deprecated.** For more information, see [Deprecated IAM Service APIs](https://docs.cloud.oracle.com/iaas/Content/Identity/Reference/deprecatediamapis.htm).

    Lists the identity provider groups.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_identity_provider_groups = oci.Identity.get_identity_provider_groups(identity_provider_id=oci_identity_identity_provider["test_identity_provider"]["id"],
        name=var["identity_provider_group_name"],
        state=var["identity_provider_group_state"])
    ```


    :param str identity_provider_id: The OCID of the identity provider.
    :param str name: A filter to only return resources that match the given name exactly.
    :param str state: A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
    """
    ...
