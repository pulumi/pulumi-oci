# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetIdentityProvidersResult',
    'AwaitableGetIdentityProvidersResult',
    'get_identity_providers',
    'get_identity_providers_output',
]

@pulumi.output_type
class GetIdentityProvidersResult:
    """
    A collection of values returned by getIdentityProviders.
    """
    def __init__(__self__, compartment_id=None, filters=None, id=None, identity_providers=None, name=None, protocol=None, state=None):
        if compartment_id and not isinstance(compartment_id, str):
            raise TypeError("Expected argument 'compartment_id' to be a str")
        pulumi.set(__self__, "compartment_id", compartment_id)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if identity_providers and not isinstance(identity_providers, list):
            raise TypeError("Expected argument 'identity_providers' to be a list")
        pulumi.set(__self__, "identity_providers", identity_providers)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if protocol and not isinstance(protocol, str):
            raise TypeError("Expected argument 'protocol' to be a str")
        pulumi.set(__self__, "protocol", protocol)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetIdentityProvidersFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="identityProviders")
    def identity_providers(self) -> Optional[Sequence['outputs.GetIdentityProvidersIdentityProviderResult']]:
        return pulumi.get(self, "identity_providers")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")


class AwaitableGetIdentityProvidersResult(GetIdentityProvidersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIdentityProvidersResult(
            compartment_id=self.compartment_id,
            filters=self.filters,
            id=self.id,
            identity_providers=self.identity_providers,
            name=self.name,
            protocol=self.protocol,
            state=self.state)


def get_identity_providers(compartment_id: Optional[str] = None,
                           filters: Optional[Sequence[pulumi.InputType['GetIdentityProvidersFilterArgs']]] = None,
                           name: Optional[str] = None,
                           protocol: Optional[str] = None,
                           state: Optional[str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIdentityProvidersResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['compartmentId'] = compartment_id
    __args__['filters'] = filters
    __args__['name'] = name
    __args__['protocol'] = protocol
    __args__['state'] = state
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:Identity/getIdentityProviders:getIdentityProviders', __args__, opts=opts, typ=GetIdentityProvidersResult).value

    return AwaitableGetIdentityProvidersResult(
        compartment_id=pulumi.get(__ret__, 'compartment_id'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        identity_providers=pulumi.get(__ret__, 'identity_providers'),
        name=pulumi.get(__ret__, 'name'),
        protocol=pulumi.get(__ret__, 'protocol'),
        state=pulumi.get(__ret__, 'state'))


@_utilities.lift_output_func(get_identity_providers)
def get_identity_providers_output(compartment_id: Optional[pulumi.Input[str]] = None,
                                  filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetIdentityProvidersFilterArgs']]]]] = None,
                                  name: Optional[pulumi.Input[Optional[str]]] = None,
                                  protocol: Optional[pulumi.Input[str]] = None,
                                  state: Optional[pulumi.Input[Optional[str]]] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetIdentityProvidersResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
