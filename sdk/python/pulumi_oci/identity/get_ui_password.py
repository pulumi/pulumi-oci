# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetUiPasswordResult',
    'AwaitableGetUiPasswordResult',
    'get_ui_password',
    'get_ui_password_output',
]

@pulumi.output_type
class GetUiPasswordResult:
    """
    A collection of values returned by getUiPassword.
    """
    def __init__(__self__, id=None, inactive_status=None, password=None, state=None, time_created=None, user_id=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if inactive_status and not isinstance(inactive_status, str):
            raise TypeError("Expected argument 'inactive_status' to be a str")
        pulumi.set(__self__, "inactive_status", inactive_status)
        if password and not isinstance(password, str):
            raise TypeError("Expected argument 'password' to be a str")
        pulumi.set(__self__, "password", password)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if time_created and not isinstance(time_created, str):
            raise TypeError("Expected argument 'time_created' to be a str")
        pulumi.set(__self__, "time_created", time_created)
        if user_id and not isinstance(user_id, str):
            raise TypeError("Expected argument 'user_id' to be a str")
        pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inactiveStatus")
    def inactive_status(self) -> Optional[str]:
        return pulumi.get(self, "inactive_status")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> str:
        return pulumi.get(self, "user_id")


class AwaitableGetUiPasswordResult(GetUiPasswordResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetUiPasswordResult(
            id=self.id,
            inactive_status=self.inactive_status,
            password=self.password,
            state=self.state,
            time_created=self.time_created,
            user_id=self.user_id)


def get_ui_password(user_id: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetUiPasswordResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['userId'] = user_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:Identity/getUiPassword:getUiPassword', __args__, opts=opts, typ=GetUiPasswordResult).value

    return AwaitableGetUiPasswordResult(
        id=pulumi.get(__ret__, 'id'),
        inactive_status=pulumi.get(__ret__, 'inactive_status'),
        password=pulumi.get(__ret__, 'password'),
        state=pulumi.get(__ret__, 'state'),
        time_created=pulumi.get(__ret__, 'time_created'),
        user_id=pulumi.get(__ret__, 'user_id'))


@_utilities.lift_output_func(get_ui_password)
def get_ui_password_output(user_id: Optional[pulumi.Input[str]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetUiPasswordResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
