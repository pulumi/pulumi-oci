# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'AuthenticationPolicyNetworkPolicy',
    'AuthenticationPolicyPasswordPolicy',
    'DomainReplicaRegion',
    'NetworkSourceVirtualSourceList',
    'TagValidator',
    'UserCapability',
    'GetAllowedDomainLicenseTypesAllowedDomainLicenseTypeResult',
    'GetAllowedDomainLicenseTypesFilterResult',
    'GetApiKeysApiKeyResult',
    'GetApiKeysFilterResult',
    'GetAuthTokensFilterResult',
    'GetAuthTokensTokenResult',
    'GetAuthenticationPolicyNetworkPolicyResult',
    'GetAuthenticationPolicyPasswordPolicyResult',
    'GetAvailabilityDomainsAvailabilityDomainResult',
    'GetAvailabilityDomainsFilterResult',
    'GetCompartmentsCompartmentResult',
    'GetCompartmentsFilterResult',
    'GetCostTrackingTagsFilterResult',
    'GetCostTrackingTagsTagResult',
    'GetCostTrackingTagsTagValidatorResult',
    'GetCustomerSecretKeysCustomerSecretKeyResult',
    'GetCustomerSecretKeysFilterResult',
    'GetDbCredentialsDbCredentialResult',
    'GetDbCredentialsFilterResult',
    'GetDomainReplicaRegionResult',
    'GetDomainsDomainResult',
    'GetDomainsDomainReplicaRegionResult',
    'GetDomainsFilterResult',
    'GetDynamicGroupsDynamicGroupResult',
    'GetDynamicGroupsFilterResult',
    'GetFaultDomainsFaultDomainResult',
    'GetFaultDomainsFilterResult',
    'GetGroupsFilterResult',
    'GetGroupsGroupResult',
    'GetIamWorkRequestErrorsFilterResult',
    'GetIamWorkRequestErrorsIamWorkRequestErrorResult',
    'GetIamWorkRequestLogsFilterResult',
    'GetIamWorkRequestLogsIamWorkRequestLogResult',
    'GetIamWorkRequestResourceResult',
    'GetIamWorkRequestsFilterResult',
    'GetIamWorkRequestsIamWorkRequestResult',
    'GetIamWorkRequestsIamWorkRequestResourceResult',
    'GetIdentityProviderGroupsFilterResult',
    'GetIdentityProviderGroupsIdentityProviderGroupResult',
    'GetIdentityProvidersFilterResult',
    'GetIdentityProvidersIdentityProviderResult',
    'GetIdpGroupMappingsFilterResult',
    'GetIdpGroupMappingsIdpGroupMappingResult',
    'GetNetworkSourceVirtualSourceListResult',
    'GetNetworkSourcesFilterResult',
    'GetNetworkSourcesNetworkSourceResult',
    'GetNetworkSourcesNetworkSourceVirtualSourceListResult',
    'GetPoliciesFilterResult',
    'GetPoliciesPolicyResult',
    'GetRegionSubscriptionsFilterResult',
    'GetRegionSubscriptionsRegionSubscriptionResult',
    'GetRegionsFilterResult',
    'GetRegionsRegionResult',
    'GetSmtpCredentialsFilterResult',
    'GetSmtpCredentialsSmtpCredentialResult',
    'GetSwiftPasswordsFilterResult',
    'GetSwiftPasswordsPasswordResult',
    'GetTagDefaultsFilterResult',
    'GetTagDefaultsTagDefaultResult',
    'GetTagNamespacesFilterResult',
    'GetTagNamespacesTagNamespaceResult',
    'GetTagStandardTagNamespaceTemplateTagDefinitionTemplateResult',
    'GetTagStandardTagNamespaceTemplatesFilterResult',
    'GetTagStandardTagNamespaceTemplatesStandardTagNamespaceTemplateResult',
    'GetTagValidatorResult',
    'GetTagsFilterResult',
    'GetTagsTagResult',
    'GetTagsTagValidatorResult',
    'GetUserCapabilityResult',
    'GetUserGroupMembershipsFilterResult',
    'GetUserGroupMembershipsMembershipResult',
    'GetUsersFilterResult',
    'GetUsersUserResult',
    'GetUsersUserCapabilityResult',
]

@pulumi.output_type
class AuthenticationPolicyNetworkPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkSourceIds":
            suggest = "network_source_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AuthenticationPolicyNetworkPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AuthenticationPolicyNetworkPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AuthenticationPolicyNetworkPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 network_source_ids: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] network_source_ids: (Updatable) Network Source ids
        """
        if network_source_ids is not None:
            pulumi.set(__self__, "network_source_ids", network_source_ids)

    @property
    @pulumi.getter(name="networkSourceIds")
    def network_source_ids(self) -> Optional[Sequence[str]]:
        """
        (Updatable) Network Source ids
        """
        return pulumi.get(self, "network_source_ids")


@pulumi.output_type
class AuthenticationPolicyPasswordPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isLowercaseCharactersRequired":
            suggest = "is_lowercase_characters_required"
        elif key == "isNumericCharactersRequired":
            suggest = "is_numeric_characters_required"
        elif key == "isSpecialCharactersRequired":
            suggest = "is_special_characters_required"
        elif key == "isUppercaseCharactersRequired":
            suggest = "is_uppercase_characters_required"
        elif key == "isUsernameContainmentAllowed":
            suggest = "is_username_containment_allowed"
        elif key == "minimumPasswordLength":
            suggest = "minimum_password_length"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AuthenticationPolicyPasswordPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AuthenticationPolicyPasswordPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AuthenticationPolicyPasswordPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_lowercase_characters_required: Optional[bool] = None,
                 is_numeric_characters_required: Optional[bool] = None,
                 is_special_characters_required: Optional[bool] = None,
                 is_uppercase_characters_required: Optional[bool] = None,
                 is_username_containment_allowed: Optional[bool] = None,
                 minimum_password_length: Optional[int] = None):
        """
        :param bool is_lowercase_characters_required: (Updatable) At least one lower case character required.
        :param bool is_numeric_characters_required: (Updatable) At least one numeric character required.
        :param bool is_special_characters_required: (Updatable) At least one special character required.
        :param bool is_uppercase_characters_required: (Updatable) At least one uppercase character required.
        :param bool is_username_containment_allowed: (Updatable) User name is allowed to be part of the password.
        :param int minimum_password_length: (Updatable) Minimum password length required.
        """
        if is_lowercase_characters_required is not None:
            pulumi.set(__self__, "is_lowercase_characters_required", is_lowercase_characters_required)
        if is_numeric_characters_required is not None:
            pulumi.set(__self__, "is_numeric_characters_required", is_numeric_characters_required)
        if is_special_characters_required is not None:
            pulumi.set(__self__, "is_special_characters_required", is_special_characters_required)
        if is_uppercase_characters_required is not None:
            pulumi.set(__self__, "is_uppercase_characters_required", is_uppercase_characters_required)
        if is_username_containment_allowed is not None:
            pulumi.set(__self__, "is_username_containment_allowed", is_username_containment_allowed)
        if minimum_password_length is not None:
            pulumi.set(__self__, "minimum_password_length", minimum_password_length)

    @property
    @pulumi.getter(name="isLowercaseCharactersRequired")
    def is_lowercase_characters_required(self) -> Optional[bool]:
        """
        (Updatable) At least one lower case character required.
        """
        return pulumi.get(self, "is_lowercase_characters_required")

    @property
    @pulumi.getter(name="isNumericCharactersRequired")
    def is_numeric_characters_required(self) -> Optional[bool]:
        """
        (Updatable) At least one numeric character required.
        """
        return pulumi.get(self, "is_numeric_characters_required")

    @property
    @pulumi.getter(name="isSpecialCharactersRequired")
    def is_special_characters_required(self) -> Optional[bool]:
        """
        (Updatable) At least one special character required.
        """
        return pulumi.get(self, "is_special_characters_required")

    @property
    @pulumi.getter(name="isUppercaseCharactersRequired")
    def is_uppercase_characters_required(self) -> Optional[bool]:
        """
        (Updatable) At least one uppercase character required.
        """
        return pulumi.get(self, "is_uppercase_characters_required")

    @property
    @pulumi.getter(name="isUsernameContainmentAllowed")
    def is_username_containment_allowed(self) -> Optional[bool]:
        """
        (Updatable) User name is allowed to be part of the password.
        """
        return pulumi.get(self, "is_username_containment_allowed")

    @property
    @pulumi.getter(name="minimumPasswordLength")
    def minimum_password_length(self) -> Optional[int]:
        """
        (Updatable) Minimum password length required.
        """
        return pulumi.get(self, "minimum_password_length")


@pulumi.output_type
class DomainReplicaRegion(dict):
    def __init__(__self__, *,
                 region: Optional[str] = None,
                 state: Optional[str] = None,
                 url: Optional[str] = None):
        """
        :param str region: A REPLICATION_ENABLED region, e.g. us-ashburn-1. See [Regions and Availability Domains](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/regions.htm) for the full list of supported region names.
        :param str state: The current state.
        :param str url: Region agnostic domain URL.
        """
        if region is not None:
            pulumi.set(__self__, "region", region)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        A REPLICATION_ENABLED region, e.g. us-ashburn-1. See [Regions and Availability Domains](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/regions.htm) for the full list of supported region names.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        The current state.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        Region agnostic domain URL.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class NetworkSourceVirtualSourceList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipRanges":
            suggest = "ip_ranges"
        elif key == "vcnId":
            suggest = "vcn_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkSourceVirtualSourceList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkSourceVirtualSourceList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkSourceVirtualSourceList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_ranges: Sequence[str],
                 vcn_id: str):
        pulumi.set(__self__, "ip_ranges", ip_ranges)
        pulumi.set(__self__, "vcn_id", vcn_id)

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Sequence[str]:
        return pulumi.get(self, "ip_ranges")

    @property
    @pulumi.getter(name="vcnId")
    def vcn_id(self) -> str:
        return pulumi.get(self, "vcn_id")


@pulumi.output_type
class TagValidator(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "validatorType":
            suggest = "validator_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TagValidator. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TagValidator.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TagValidator.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 validator_type: str,
                 values: Sequence[str]):
        """
        :param str validator_type: (Updatable) Specifies the type of validation: a static value (no validation) or a list.
        :param Sequence[str] values: (Updatable) The list of allowed values for a definedTag value.
        """
        pulumi.set(__self__, "validator_type", validator_type)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="validatorType")
    def validator_type(self) -> str:
        """
        (Updatable) Specifies the type of validation: a static value (no validation) or a list.
        """
        return pulumi.get(self, "validator_type")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        (Updatable) The list of allowed values for a definedTag value.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class UserCapability(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "canUseApiKeys":
            suggest = "can_use_api_keys"
        elif key == "canUseAuthTokens":
            suggest = "can_use_auth_tokens"
        elif key == "canUseConsolePassword":
            suggest = "can_use_console_password"
        elif key == "canUseCustomerSecretKeys":
            suggest = "can_use_customer_secret_keys"
        elif key == "canUseDbCredentials":
            suggest = "can_use_db_credentials"
        elif key == "canUseOauth2clientCredentials":
            suggest = "can_use_oauth2client_credentials"
        elif key == "canUseSmtpCredentials":
            suggest = "can_use_smtp_credentials"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserCapability. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserCapability.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserCapability.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 can_use_api_keys: Optional[bool] = None,
                 can_use_auth_tokens: Optional[bool] = None,
                 can_use_console_password: Optional[bool] = None,
                 can_use_customer_secret_keys: Optional[bool] = None,
                 can_use_db_credentials: Optional[bool] = None,
                 can_use_oauth2client_credentials: Optional[bool] = None,
                 can_use_smtp_credentials: Optional[bool] = None):
        """
        :param bool can_use_api_keys: Indicates if the user can use API keys.
        :param bool can_use_auth_tokens: Indicates if the user can use SWIFT passwords / auth tokens.
        :param bool can_use_console_password: Indicates if the user can log in to the console.
        :param bool can_use_customer_secret_keys: Indicates if the user can use SigV4 symmetric keys.
        :param bool can_use_db_credentials: Indicates if the user can use DB passwords.
        :param bool can_use_oauth2client_credentials: Indicates if the user can use OAuth2 credentials and tokens.
        :param bool can_use_smtp_credentials: Indicates if the user can use SMTP passwords.
        """
        if can_use_api_keys is not None:
            pulumi.set(__self__, "can_use_api_keys", can_use_api_keys)
        if can_use_auth_tokens is not None:
            pulumi.set(__self__, "can_use_auth_tokens", can_use_auth_tokens)
        if can_use_console_password is not None:
            pulumi.set(__self__, "can_use_console_password", can_use_console_password)
        if can_use_customer_secret_keys is not None:
            pulumi.set(__self__, "can_use_customer_secret_keys", can_use_customer_secret_keys)
        if can_use_db_credentials is not None:
            pulumi.set(__self__, "can_use_db_credentials", can_use_db_credentials)
        if can_use_oauth2client_credentials is not None:
            pulumi.set(__self__, "can_use_oauth2client_credentials", can_use_oauth2client_credentials)
        if can_use_smtp_credentials is not None:
            pulumi.set(__self__, "can_use_smtp_credentials", can_use_smtp_credentials)

    @property
    @pulumi.getter(name="canUseApiKeys")
    def can_use_api_keys(self) -> Optional[bool]:
        """
        Indicates if the user can use API keys.
        """
        return pulumi.get(self, "can_use_api_keys")

    @property
    @pulumi.getter(name="canUseAuthTokens")
    def can_use_auth_tokens(self) -> Optional[bool]:
        """
        Indicates if the user can use SWIFT passwords / auth tokens.
        """
        return pulumi.get(self, "can_use_auth_tokens")

    @property
    @pulumi.getter(name="canUseConsolePassword")
    def can_use_console_password(self) -> Optional[bool]:
        """
        Indicates if the user can log in to the console.
        """
        return pulumi.get(self, "can_use_console_password")

    @property
    @pulumi.getter(name="canUseCustomerSecretKeys")
    def can_use_customer_secret_keys(self) -> Optional[bool]:
        """
        Indicates if the user can use SigV4 symmetric keys.
        """
        return pulumi.get(self, "can_use_customer_secret_keys")

    @property
    @pulumi.getter(name="canUseDbCredentials")
    def can_use_db_credentials(self) -> Optional[bool]:
        """
        Indicates if the user can use DB passwords.
        """
        return pulumi.get(self, "can_use_db_credentials")

    @property
    @pulumi.getter(name="canUseOauth2clientCredentials")
    def can_use_oauth2client_credentials(self) -> Optional[bool]:
        """
        Indicates if the user can use OAuth2 credentials and tokens.
        """
        return pulumi.get(self, "can_use_oauth2client_credentials")

    @property
    @pulumi.getter(name="canUseSmtpCredentials")
    def can_use_smtp_credentials(self) -> Optional[bool]:
        """
        Indicates if the user can use SMTP passwords.
        """
        return pulumi.get(self, "can_use_smtp_credentials")


@pulumi.output_type
class GetAllowedDomainLicenseTypesAllowedDomainLicenseTypeResult(dict):
    def __init__(__self__, *,
                 description: str,
                 license_type: str,
                 name: str):
        """
        :param str description: The license type description.
        :param str license_type: The license type identifier.  Example: "oracle-apps-premium"
        :param str name: The license type name.  Example: "Oracle Apps Premium"
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "license_type", license_type)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The license type description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> str:
        """
        The license type identifier.  Example: "oracle-apps-premium"
        """
        return pulumi.get(self, "license_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The license type name.  Example: "Oracle Apps Premium"
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetAllowedDomainLicenseTypesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: The license type name.  Example: "Oracle Apps Premium"
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The license type name.  Example: "Oracle Apps Premium"
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetApiKeysApiKeyResult(dict):
    def __init__(__self__, *,
                 fingerprint: str,
                 id: str,
                 inactive_status: str,
                 key_value: str,
                 state: str,
                 time_created: str,
                 user_id: str):
        """
        :param str fingerprint: The key's fingerprint (e.g., 12:34:56:78:90:ab:cd:ef:12:34:56:78:90:ab:cd:ef).
        :param str id: An Oracle-assigned identifier for the key, in this format: TENANCY_OCID/USER_OCID/KEY_FINGERPRINT.
        :param str inactive_status: The detailed status of INACTIVE lifecycleState.
        :param str key_value: The key's value.
        :param str state: The API key's current state.
        :param str time_created: Date and time the `ApiKey` object was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        :param str user_id: The OCID of the user.
        """
        pulumi.set(__self__, "fingerprint", fingerprint)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "inactive_status", inactive_status)
        pulumi.set(__self__, "key_value", key_value)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter
    def fingerprint(self) -> str:
        """
        The key's fingerprint (e.g., 12:34:56:78:90:ab:cd:ef:12:34:56:78:90:ab:cd:ef).
        """
        return pulumi.get(self, "fingerprint")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        An Oracle-assigned identifier for the key, in this format: TENANCY_OCID/USER_OCID/KEY_FINGERPRINT.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inactiveStatus")
    def inactive_status(self) -> str:
        """
        The detailed status of INACTIVE lifecycleState.
        """
        return pulumi.get(self, "inactive_status")

    @property
    @pulumi.getter(name="keyValue")
    def key_value(self) -> str:
        """
        The key's value.
        """
        return pulumi.get(self, "key_value")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The API key's current state.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        Date and time the `ApiKey` object was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> str:
        """
        The OCID of the user.
        """
        return pulumi.get(self, "user_id")


@pulumi.output_type
class GetApiKeysFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetAuthTokensFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetAuthTokensTokenResult(dict):
    def __init__(__self__, *,
                 description: str,
                 id: str,
                 inactive_state: str,
                 state: str,
                 time_created: str,
                 time_expires: str,
                 token: str,
                 user_id: str):
        """
        :param str description: The description you assign to the auth token. Does not have to be unique, and it's changeable.
        :param str id: The OCID of the auth token.
        :param str inactive_state: The detailed status of INACTIVE lifecycleState.
        :param str state: The token's current state.
        :param str time_created: Date and time the `AuthToken` object was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        :param str time_expires: Date and time when this auth token will expire, in the format defined by RFC3339. Null if it never expires.  Example: `2016-08-25T21:10:29.600Z`
        :param str token: The auth token. The value is available only in the response for `CreateAuthToken`, and not for `ListAuthTokens` or `UpdateAuthToken`.
        :param str user_id: The OCID of the user.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "inactive_state", inactive_state)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_expires", time_expires)
        pulumi.set(__self__, "token", token)
        pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description you assign to the auth token. Does not have to be unique, and it's changeable.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The OCID of the auth token.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inactiveState")
    def inactive_state(self) -> str:
        """
        The detailed status of INACTIVE lifecycleState.
        """
        return pulumi.get(self, "inactive_state")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The token's current state.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        Date and time the `AuthToken` object was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeExpires")
    def time_expires(self) -> str:
        """
        Date and time when this auth token will expire, in the format defined by RFC3339. Null if it never expires.  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_expires")

    @property
    @pulumi.getter
    def token(self) -> str:
        """
        The auth token. The value is available only in the response for `CreateAuthToken`, and not for `ListAuthTokens` or `UpdateAuthToken`.
        """
        return pulumi.get(self, "token")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> str:
        """
        The OCID of the user.
        """
        return pulumi.get(self, "user_id")


@pulumi.output_type
class GetAuthenticationPolicyNetworkPolicyResult(dict):
    def __init__(__self__, *,
                 network_source_ids: Sequence[str]):
        """
        :param Sequence[str] network_source_ids: Network Source ids
        """
        pulumi.set(__self__, "network_source_ids", network_source_ids)

    @property
    @pulumi.getter(name="networkSourceIds")
    def network_source_ids(self) -> Sequence[str]:
        """
        Network Source ids
        """
        return pulumi.get(self, "network_source_ids")


@pulumi.output_type
class GetAuthenticationPolicyPasswordPolicyResult(dict):
    def __init__(__self__, *,
                 is_lowercase_characters_required: bool,
                 is_numeric_characters_required: bool,
                 is_special_characters_required: bool,
                 is_uppercase_characters_required: bool,
                 is_username_containment_allowed: bool,
                 minimum_password_length: int):
        """
        :param bool is_lowercase_characters_required: At least one lower case character required.
        :param bool is_numeric_characters_required: At least one numeric character required.
        :param bool is_special_characters_required: At least one special character required.
        :param bool is_uppercase_characters_required: At least one uppercase character required.
        :param bool is_username_containment_allowed: User name is allowed to be part of the password.
        :param int minimum_password_length: Minimum password length required.
        """
        pulumi.set(__self__, "is_lowercase_characters_required", is_lowercase_characters_required)
        pulumi.set(__self__, "is_numeric_characters_required", is_numeric_characters_required)
        pulumi.set(__self__, "is_special_characters_required", is_special_characters_required)
        pulumi.set(__self__, "is_uppercase_characters_required", is_uppercase_characters_required)
        pulumi.set(__self__, "is_username_containment_allowed", is_username_containment_allowed)
        pulumi.set(__self__, "minimum_password_length", minimum_password_length)

    @property
    @pulumi.getter(name="isLowercaseCharactersRequired")
    def is_lowercase_characters_required(self) -> bool:
        """
        At least one lower case character required.
        """
        return pulumi.get(self, "is_lowercase_characters_required")

    @property
    @pulumi.getter(name="isNumericCharactersRequired")
    def is_numeric_characters_required(self) -> bool:
        """
        At least one numeric character required.
        """
        return pulumi.get(self, "is_numeric_characters_required")

    @property
    @pulumi.getter(name="isSpecialCharactersRequired")
    def is_special_characters_required(self) -> bool:
        """
        At least one special character required.
        """
        return pulumi.get(self, "is_special_characters_required")

    @property
    @pulumi.getter(name="isUppercaseCharactersRequired")
    def is_uppercase_characters_required(self) -> bool:
        """
        At least one uppercase character required.
        """
        return pulumi.get(self, "is_uppercase_characters_required")

    @property
    @pulumi.getter(name="isUsernameContainmentAllowed")
    def is_username_containment_allowed(self) -> bool:
        """
        User name is allowed to be part of the password.
        """
        return pulumi.get(self, "is_username_containment_allowed")

    @property
    @pulumi.getter(name="minimumPasswordLength")
    def minimum_password_length(self) -> int:
        """
        Minimum password length required.
        """
        return pulumi.get(self, "minimum_password_length")


@pulumi.output_type
class GetAvailabilityDomainsAvailabilityDomainResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 id: str,
                 name: str):
        """
        :param str compartment_id: The OCID of the compartment (remember that the tenancy is simply the root compartment).
        :param str id: The OCID of the Availability Domain.
        :param str name: The name of the Availability Domain.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The OCID of the compartment (remember that the tenancy is simply the root compartment).
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The OCID of the Availability Domain.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Availability Domain.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetAvailabilityDomainsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: The name of the Availability Domain.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Availability Domain.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetCompartmentsCompartmentResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 defined_tags: Mapping[str, Any],
                 description: str,
                 enable_delete: bool,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 inactive_state: str,
                 is_accessible: bool,
                 name: str,
                 state: str,
                 time_created: str):
        """
        :param str compartment_id: The OCID of the compartment (remember that the tenancy is simply the root compartment).
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param str description: The description you assign to the compartment. Does not have to be unique, and it's changeable.
        :param Mapping[str, Any] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param str id: The OCID of the compartment.
        :param str inactive_state: The detailed status of INACTIVE lifecycleState.
        :param bool is_accessible: Indicates whether or not the compartment is accessible for the user making the request. Returns true when the user has INSPECT permissions directly on a resource in the compartment or indirectly (permissions can be on a resource in a subcompartment).
        :param str name: A filter to only return resources that match the given name exactly.
        :param str state: A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
        :param str time_created: Date and time the compartment was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enable_delete", enable_delete)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "inactive_state", inactive_state)
        pulumi.set(__self__, "is_accessible", is_accessible)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The OCID of the compartment (remember that the tenancy is simply the root compartment).
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description you assign to the compartment. Does not have to be unique, and it's changeable.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="enableDelete")
    def enable_delete(self) -> bool:
        return pulumi.get(self, "enable_delete")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The OCID of the compartment.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inactiveState")
    def inactive_state(self) -> str:
        """
        The detailed status of INACTIVE lifecycleState.
        """
        return pulumi.get(self, "inactive_state")

    @property
    @pulumi.getter(name="isAccessible")
    def is_accessible(self) -> bool:
        """
        Indicates whether or not the compartment is accessible for the user making the request. Returns true when the user has INSPECT permissions directly on a resource in the compartment or indirectly (permissions can be on a resource in a subcompartment).
        """
        return pulumi.get(self, "is_accessible")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to only return resources that match the given name exactly.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        Date and time the compartment was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetCompartmentsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: A filter to only return resources that match the given name exactly.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to only return resources that match the given name exactly.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetCostTrackingTagsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: The name assigned to the tag during creation. This is the tag key definition. The name must be unique within the tag namespace and cannot be changed.
        :param Sequence[str] values: The list of allowed values for a definedTag value.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name assigned to the tag during creation. This is the tag key definition. The name must be unique within the tag namespace and cannot be changed.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        The list of allowed values for a definedTag value.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetCostTrackingTagsTagResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 defined_tags: Mapping[str, Any],
                 description: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 is_cost_tracking: bool,
                 is_retired: bool,
                 name: str,
                 state: str,
                 tag_namespace_id: str,
                 tag_namespace_name: str,
                 time_created: str,
                 validators: Sequence['outputs.GetCostTrackingTagsTagValidatorResult']):
        """
        :param str compartment_id: The OCID of the compartment (remember that the tenancy is simply the root compartment).
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
        :param str description: The description you assign to the tag.
        :param Mapping[str, Any] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        :param str id: The OCID of the tag definition.
        :param bool is_cost_tracking: Indicates whether the tag is enabled for cost tracking.
        :param bool is_retired: Indicates whether the tag is retired. See [Retiring Key Definitions and Namespace Definitions](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/taggingoverview.htm#Retiring).
        :param str name: The name assigned to the tag during creation. This is the tag key definition. The name must be unique within the tag namespace and cannot be changed.
        :param str state: The tag's current state. After creating a tag, make sure its `lifecycleState` is ACTIVE before using it. After retiring a tag, make sure its `lifecycleState` is INACTIVE before using it. If you delete a tag, you cannot delete another tag until the deleted tag's `lifecycleState` changes from DELETING to DELETED.
        :param str tag_namespace_id: The OCID of the namespace that contains the tag definition.
        :param str tag_namespace_name: The name of the tag namespace that contains the tag definition.
        :param str time_created: Date and time the tag was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        :param Sequence['GetCostTrackingTagsTagValidatorArgs'] validators: Validates a definedTag value. Each validator performs validation steps in addition to the standard validation for definedTag values. For more information, see [Limits on Tags](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/taggingoverview.htm#Limits).
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_cost_tracking", is_cost_tracking)
        pulumi.set(__self__, "is_retired", is_retired)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "tag_namespace_id", tag_namespace_id)
        pulumi.set(__self__, "tag_namespace_name", tag_namespace_name)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "validators", validators)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The OCID of the compartment (remember that the tenancy is simply the root compartment).
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description you assign to the tag.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The OCID of the tag definition.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isCostTracking")
    def is_cost_tracking(self) -> bool:
        """
        Indicates whether the tag is enabled for cost tracking.
        """
        return pulumi.get(self, "is_cost_tracking")

    @property
    @pulumi.getter(name="isRetired")
    def is_retired(self) -> bool:
        """
        Indicates whether the tag is retired. See [Retiring Key Definitions and Namespace Definitions](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/taggingoverview.htm#Retiring).
        """
        return pulumi.get(self, "is_retired")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name assigned to the tag during creation. This is the tag key definition. The name must be unique within the tag namespace and cannot be changed.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The tag's current state. After creating a tag, make sure its `lifecycleState` is ACTIVE before using it. After retiring a tag, make sure its `lifecycleState` is INACTIVE before using it. If you delete a tag, you cannot delete another tag until the deleted tag's `lifecycleState` changes from DELETING to DELETED.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="tagNamespaceId")
    def tag_namespace_id(self) -> str:
        """
        The OCID of the namespace that contains the tag definition.
        """
        return pulumi.get(self, "tag_namespace_id")

    @property
    @pulumi.getter(name="tagNamespaceName")
    def tag_namespace_name(self) -> str:
        """
        The name of the tag namespace that contains the tag definition.
        """
        return pulumi.get(self, "tag_namespace_name")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        Date and time the tag was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter
    def validators(self) -> Sequence['outputs.GetCostTrackingTagsTagValidatorResult']:
        """
        Validates a definedTag value. Each validator performs validation steps in addition to the standard validation for definedTag values. For more information, see [Limits on Tags](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/taggingoverview.htm#Limits).
        """
        return pulumi.get(self, "validators")


@pulumi.output_type
class GetCostTrackingTagsTagValidatorResult(dict):
    def __init__(__self__, *,
                 validator_type: str,
                 values: Sequence[str]):
        """
        :param str validator_type: Specifies the type of validation: a static value (no validation) or a list.
        :param Sequence[str] values: The list of allowed values for a definedTag value.
        """
        pulumi.set(__self__, "validator_type", validator_type)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="validatorType")
    def validator_type(self) -> str:
        """
        Specifies the type of validation: a static value (no validation) or a list.
        """
        return pulumi.get(self, "validator_type")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        The list of allowed values for a definedTag value.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetCustomerSecretKeysCustomerSecretKeyResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 id: str,
                 inactive_state: str,
                 key: str,
                 state: str,
                 time_created: str,
                 time_expires: str,
                 user_id: str):
        """
        :param str display_name: The display name you assign to the secret key. Does not have to be unique, and it's changeable.
        :param str id: The access key portion of the key pair.
        :param str inactive_state: The detailed status of INACTIVE lifecycleState.
        :param str state: The secret key's current state.
        :param str time_created: Date and time the `CustomerSecretKey` object was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        :param str time_expires: Date and time when this password will expire, in the format defined by RFC3339. Null if it never expires.  Example: `2016-08-25T21:10:29.600Z`
        :param str user_id: The OCID of the user.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "inactive_state", inactive_state)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_expires", time_expires)
        pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The display name you assign to the secret key. Does not have to be unique, and it's changeable.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The access key portion of the key pair.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inactiveState")
    def inactive_state(self) -> str:
        """
        The detailed status of INACTIVE lifecycleState.
        """
        return pulumi.get(self, "inactive_state")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The secret key's current state.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        Date and time the `CustomerSecretKey` object was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeExpires")
    def time_expires(self) -> str:
        """
        Date and time when this password will expire, in the format defined by RFC3339. Null if it never expires.  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_expires")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> str:
        """
        The OCID of the user.
        """
        return pulumi.get(self, "user_id")


@pulumi.output_type
class GetCustomerSecretKeysFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDbCredentialsDbCredentialResult(dict):
    def __init__(__self__, *,
                 description: str,
                 id: str,
                 lifecycle_details: str,
                 password: str,
                 state: str,
                 time_created: str,
                 time_expires: str,
                 user_id: str):
        """
        :param str description: The description you assign to the DB credential. Does not have to be unique, and it's changeable.
        :param str id: The OCID of the DB credential.
        :param str state: A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
        :param str time_created: Date and time the `DbCredential` object was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        :param str time_expires: Date and time when this credential will expire, in the format defined by RFC3339. Null if it never expires.  Example: `2016-08-25T21:10:29.600Z`
        :param str user_id: The OCID of the user.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_expires", time_expires)
        pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description you assign to the DB credential. Does not have to be unique, and it's changeable.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The OCID of the DB credential.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        Date and time the `DbCredential` object was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeExpires")
    def time_expires(self) -> str:
        """
        Date and time when this credential will expire, in the format defined by RFC3339. Null if it never expires.  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_expires")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> str:
        """
        The OCID of the user.
        """
        return pulumi.get(self, "user_id")


@pulumi.output_type
class GetDbCredentialsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: A filter to only return resources that match the given name exactly.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to only return resources that match the given name exactly.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDomainReplicaRegionResult(dict):
    def __init__(__self__, *,
                 region: str,
                 state: str,
                 url: str):
        """
        :param str region: A REPLICATION_ENABLED region, e.g. us-ashburn-1. See [Regions and Availability Domains](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/regions.htm) for the full list of supported region names.
        :param str state: The current state.
        :param str url: Region agnostic domain URL.
        """
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        A REPLICATION_ENABLED region, e.g. us-ashburn-1. See [Regions and Availability Domains](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/regions.htm) for the full list of supported region names.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The current state.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        Region agnostic domain URL.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetDomainsDomainResult(dict):
    def __init__(__self__, *,
                 admin_email: str,
                 admin_first_name: str,
                 admin_last_name: str,
                 admin_user_name: str,
                 compartment_id: str,
                 defined_tags: Mapping[str, Any],
                 description: str,
                 display_name: str,
                 freeform_tags: Mapping[str, Any],
                 home_region: str,
                 home_region_url: str,
                 id: str,
                 is_hidden_on_login: bool,
                 is_notification_bypassed: bool,
                 is_primary_email_required: bool,
                 license_type: str,
                 lifecycle_details: str,
                 replica_regions: Sequence['outputs.GetDomainsDomainReplicaRegionResult'],
                 state: str,
                 time_created: str,
                 type: str,
                 url: str):
        """
        :param str compartment_id: The OCID of the compartment (remember that the tenancy is simply the root compartment).
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param str description: The domain descripition
        :param str display_name: The mutable display name of the domain
        :param Mapping[str, Any] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param str home_region: The home region for the domain. See [Regions and Availability Domains](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/regions.htm) for the full list of supported region names.  Example: `us-phoenix-1`
        :param str home_region_url: The region specific domain URL
        :param str id: The OCID of the domain
        :param bool is_hidden_on_login: Indicate if the domain is visible at login screen or not
        :param str license_type: The domain license type
        :param str lifecycle_details: Any additional details about the current state of the Domain.
        :param Sequence['GetDomainsDomainReplicaRegionArgs'] replica_regions: The regions domain is replication to.
        :param str state: A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
        :param str time_created: Date and time the domain was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        :param str type: The domain type
        :param str url: The region agnostic domain URL
        """
        pulumi.set(__self__, "admin_email", admin_email)
        pulumi.set(__self__, "admin_first_name", admin_first_name)
        pulumi.set(__self__, "admin_last_name", admin_last_name)
        pulumi.set(__self__, "admin_user_name", admin_user_name)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "home_region", home_region)
        pulumi.set(__self__, "home_region_url", home_region_url)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_hidden_on_login", is_hidden_on_login)
        pulumi.set(__self__, "is_notification_bypassed", is_notification_bypassed)
        pulumi.set(__self__, "is_primary_email_required", is_primary_email_required)
        pulumi.set(__self__, "license_type", license_type)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "replica_regions", replica_regions)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="adminEmail")
    def admin_email(self) -> str:
        return pulumi.get(self, "admin_email")

    @property
    @pulumi.getter(name="adminFirstName")
    def admin_first_name(self) -> str:
        return pulumi.get(self, "admin_first_name")

    @property
    @pulumi.getter(name="adminLastName")
    def admin_last_name(self) -> str:
        return pulumi.get(self, "admin_last_name")

    @property
    @pulumi.getter(name="adminUserName")
    def admin_user_name(self) -> str:
        return pulumi.get(self, "admin_user_name")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The OCID of the compartment (remember that the tenancy is simply the root compartment).
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The domain descripition
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The mutable display name of the domain
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="homeRegion")
    def home_region(self) -> str:
        """
        The home region for the domain. See [Regions and Availability Domains](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/regions.htm) for the full list of supported region names.  Example: `us-phoenix-1`
        """
        return pulumi.get(self, "home_region")

    @property
    @pulumi.getter(name="homeRegionUrl")
    def home_region_url(self) -> str:
        """
        The region specific domain URL
        """
        return pulumi.get(self, "home_region_url")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The OCID of the domain
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isHiddenOnLogin")
    def is_hidden_on_login(self) -> bool:
        """
        Indicate if the domain is visible at login screen or not
        """
        return pulumi.get(self, "is_hidden_on_login")

    @property
    @pulumi.getter(name="isNotificationBypassed")
    def is_notification_bypassed(self) -> bool:
        return pulumi.get(self, "is_notification_bypassed")

    @property
    @pulumi.getter(name="isPrimaryEmailRequired")
    def is_primary_email_required(self) -> bool:
        return pulumi.get(self, "is_primary_email_required")

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> str:
        """
        The domain license type
        """
        return pulumi.get(self, "license_type")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        Any additional details about the current state of the Domain.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="replicaRegions")
    def replica_regions(self) -> Sequence['outputs.GetDomainsDomainReplicaRegionResult']:
        """
        The regions domain is replication to.
        """
        return pulumi.get(self, "replica_regions")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        Date and time the domain was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The domain type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        The region agnostic domain URL
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetDomainsDomainReplicaRegionResult(dict):
    def __init__(__self__, *,
                 region: str,
                 state: str,
                 url: str):
        """
        :param str region: A REPLICATION_ENABLED region, e.g. us-ashburn-1. See [Regions and Availability Domains](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/regions.htm) for the full list of supported region names.
        :param str state: A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
        :param str url: The region agnostic domain URL
        """
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        A REPLICATION_ENABLED region, e.g. us-ashburn-1. See [Regions and Availability Domains](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/regions.htm) for the full list of supported region names.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        The region agnostic domain URL
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetDomainsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: A filter to only return resources that match the given name exactly.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to only return resources that match the given name exactly.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDynamicGroupsDynamicGroupResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 defined_tags: Mapping[str, Any],
                 description: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 inactive_state: str,
                 matching_rule: str,
                 name: str,
                 state: str,
                 time_created: str):
        """
        :param str compartment_id: The OCID of the compartment (remember that the tenancy is simply the root compartment).
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param str description: The description you assign to the group. Does not have to be unique, and it's changeable.
        :param Mapping[str, Any] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param str id: The OCID of the group.
        :param str inactive_state: The detailed status of INACTIVE lifecycleState.
        :param str matching_rule: A rule string that defines which instance certificates will be matched. For syntax, see [Managing Dynamic Groups](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingdynamicgroups.htm).
        :param str name: A filter to only return resources that match the given name exactly.
        :param str state: A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
        :param str time_created: Date and time the group was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "inactive_state", inactive_state)
        pulumi.set(__self__, "matching_rule", matching_rule)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The OCID of the compartment (remember that the tenancy is simply the root compartment).
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description you assign to the group. Does not have to be unique, and it's changeable.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The OCID of the group.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inactiveState")
    def inactive_state(self) -> str:
        """
        The detailed status of INACTIVE lifecycleState.
        """
        return pulumi.get(self, "inactive_state")

    @property
    @pulumi.getter(name="matchingRule")
    def matching_rule(self) -> str:
        """
        A rule string that defines which instance certificates will be matched. For syntax, see [Managing Dynamic Groups](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingdynamicgroups.htm).
        """
        return pulumi.get(self, "matching_rule")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to only return resources that match the given name exactly.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        Date and time the group was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetDynamicGroupsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: A filter to only return resources that match the given name exactly.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to only return resources that match the given name exactly.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetFaultDomainsFaultDomainResult(dict):
    def __init__(__self__, *,
                 availability_domain: str,
                 compartment_id: str,
                 id: str,
                 name: str):
        """
        :param str availability_domain: The name of the availibilityDomain.
        :param str compartment_id: The OCID of the compartment (remember that the tenancy is simply the root compartment).
        :param str id: The OCID of the Fault Domain.
        :param str name: The name of the Fault Domain.
        """
        pulumi.set(__self__, "availability_domain", availability_domain)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> str:
        """
        The name of the availibilityDomain.
        """
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The OCID of the compartment (remember that the tenancy is simply the root compartment).
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The OCID of the Fault Domain.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Fault Domain.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFaultDomainsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: The name of the Fault Domain.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Fault Domain.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetGroupsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: A filter to only return resources that match the given name exactly.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to only return resources that match the given name exactly.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetGroupsGroupResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 defined_tags: Mapping[str, Any],
                 description: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 inactive_state: str,
                 name: str,
                 state: str,
                 time_created: str):
        """
        :param str compartment_id: The OCID of the compartment (remember that the tenancy is simply the root compartment).
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param str description: The description you assign to the group. Does not have to be unique, and it's changeable.
        :param Mapping[str, Any] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param str id: The OCID of the group.
        :param str inactive_state: The detailed status of INACTIVE lifecycleState.
        :param str name: A filter to only return resources that match the given name exactly.
        :param str state: A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
        :param str time_created: Date and time the group was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "inactive_state", inactive_state)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The OCID of the compartment (remember that the tenancy is simply the root compartment).
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description you assign to the group. Does not have to be unique, and it's changeable.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The OCID of the group.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inactiveState")
    def inactive_state(self) -> str:
        """
        The detailed status of INACTIVE lifecycleState.
        """
        return pulumi.get(self, "inactive_state")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to only return resources that match the given name exactly.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        Date and time the group was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetIamWorkRequestErrorsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetIamWorkRequestErrorsIamWorkRequestErrorResult(dict):
    def __init__(__self__, *,
                 code: str,
                 message: str,
                 timestamp: str):
        """
        :param str code: A machine-usable code for the error that occured.
        :param str message: A human-readable error string.
        :param str timestamp: The date and time the error occurred.
        """
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "timestamp", timestamp)

    @property
    @pulumi.getter
    def code(self) -> str:
        """
        A machine-usable code for the error that occured.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        A human-readable error string.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def timestamp(self) -> str:
        """
        The date and time the error occurred.
        """
        return pulumi.get(self, "timestamp")


@pulumi.output_type
class GetIamWorkRequestLogsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetIamWorkRequestLogsIamWorkRequestLogResult(dict):
    def __init__(__self__, *,
                 message: str,
                 timestamp: str):
        """
        :param str message: A human-readable error string.
        :param str timestamp: Date and time the log was written, in the format defined by RFC3339. Example: `2016-08-25T21:10:29.600Z`
        """
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "timestamp", timestamp)

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        A human-readable error string.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def timestamp(self) -> str:
        """
        Date and time the log was written, in the format defined by RFC3339. Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "timestamp")


@pulumi.output_type
class GetIamWorkRequestResourceResult(dict):
    def __init__(__self__, *,
                 action_type: str,
                 entity_type: str,
                 entity_uri: str,
                 identifier: str):
        """
        :param str action_type: The way in which this resource is affected by the work tracked in the work request. A resource being created, updated, or deleted will remain in the IN_PROGRESS state until work is complete for that resource at which point it will transition to CREATED, UPDATED, or DELETED, respectively.
        :param str entity_type: The resource type the work request is affects.
        :param str entity_uri: The URI path that the user can do a GET on to access the resource metadata.
        :param str identifier: An OCID of the resource that the work request affects.
        """
        pulumi.set(__self__, "action_type", action_type)
        pulumi.set(__self__, "entity_type", entity_type)
        pulumi.set(__self__, "entity_uri", entity_uri)
        pulumi.set(__self__, "identifier", identifier)

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> str:
        """
        The way in which this resource is affected by the work tracked in the work request. A resource being created, updated, or deleted will remain in the IN_PROGRESS state until work is complete for that resource at which point it will transition to CREATED, UPDATED, or DELETED, respectively.
        """
        return pulumi.get(self, "action_type")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        The resource type the work request is affects.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="entityUri")
    def entity_uri(self) -> str:
        """
        The URI path that the user can do a GET on to access the resource metadata.
        """
        return pulumi.get(self, "entity_uri")

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        An OCID of the resource that the work request affects.
        """
        return pulumi.get(self, "identifier")


@pulumi.output_type
class GetIamWorkRequestsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetIamWorkRequestsIamWorkRequestResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 id: str,
                 operation_type: str,
                 percent_complete: float,
                 resources: Sequence['outputs.GetIamWorkRequestsIamWorkRequestResourceResult'],
                 status: str,
                 time_accepted: str,
                 time_finished: str,
                 time_started: str):
        """
        :param str compartment_id: The OCID of the compartment (remember that the tenancy is simply the root compartment).
        :param str id: The OCID of the work request.
        :param str operation_type: The asynchronous operation tracked by this IAM work request.
        :param float percent_complete: How much progress the operation has made.
        :param Sequence['GetIamWorkRequestsIamWorkRequestResourceArgs'] resources: The resources this work request affects.
        :param str status: Status of the work request
        :param str time_accepted: Date and time the work was accepted, in the format defined by RFC3339. Example: `2016-08-25T21:10:29.600Z`
        :param str time_finished: Date and time the work completed, in the format defined by RFC3339. Example: `2016-08-25T21:10:29.600Z`
        :param str time_started: Date and time the work started, in the format defined by RFC3339. Example: `2016-08-25T21:10:29.600Z`
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "operation_type", operation_type)
        pulumi.set(__self__, "percent_complete", percent_complete)
        pulumi.set(__self__, "resources", resources)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "time_accepted", time_accepted)
        pulumi.set(__self__, "time_finished", time_finished)
        pulumi.set(__self__, "time_started", time_started)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The OCID of the compartment (remember that the tenancy is simply the root compartment).
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The OCID of the work request.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="operationType")
    def operation_type(self) -> str:
        """
        The asynchronous operation tracked by this IAM work request.
        """
        return pulumi.get(self, "operation_type")

    @property
    @pulumi.getter(name="percentComplete")
    def percent_complete(self) -> float:
        """
        How much progress the operation has made.
        """
        return pulumi.get(self, "percent_complete")

    @property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetIamWorkRequestsIamWorkRequestResourceResult']:
        """
        The resources this work request affects.
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of the work request
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="timeAccepted")
    def time_accepted(self) -> str:
        """
        Date and time the work was accepted, in the format defined by RFC3339. Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_accepted")

    @property
    @pulumi.getter(name="timeFinished")
    def time_finished(self) -> str:
        """
        Date and time the work completed, in the format defined by RFC3339. Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_finished")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> str:
        """
        Date and time the work started, in the format defined by RFC3339. Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_started")


@pulumi.output_type
class GetIamWorkRequestsIamWorkRequestResourceResult(dict):
    def __init__(__self__, *,
                 action_type: str,
                 entity_type: str,
                 entity_uri: str,
                 identifier: str):
        """
        :param str action_type: The way in which this resource is affected by the work tracked in the work request. A resource being created, updated, or deleted will remain in the IN_PROGRESS state until work is complete for that resource at which point it will transition to CREATED, UPDATED, or DELETED, respectively.
        :param str entity_type: The resource type the work request is affects.
        :param str entity_uri: The URI path that the user can do a GET on to access the resource metadata.
        :param str identifier: An OCID of the resource that the work request affects.
        """
        pulumi.set(__self__, "action_type", action_type)
        pulumi.set(__self__, "entity_type", entity_type)
        pulumi.set(__self__, "entity_uri", entity_uri)
        pulumi.set(__self__, "identifier", identifier)

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> str:
        """
        The way in which this resource is affected by the work tracked in the work request. A resource being created, updated, or deleted will remain in the IN_PROGRESS state until work is complete for that resource at which point it will transition to CREATED, UPDATED, or DELETED, respectively.
        """
        return pulumi.get(self, "action_type")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        The resource type the work request is affects.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="entityUri")
    def entity_uri(self) -> str:
        """
        The URI path that the user can do a GET on to access the resource metadata.
        """
        return pulumi.get(self, "entity_uri")

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        An OCID of the resource that the work request affects.
        """
        return pulumi.get(self, "identifier")


@pulumi.output_type
class GetIdentityProviderGroupsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: A filter to only return resources that match the given name exactly.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to only return resources that match the given name exactly.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetIdentityProviderGroupsIdentityProviderGroupResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 external_identifier: str,
                 id: str,
                 identity_provider_id: str,
                 name: str,
                 time_created: str,
                 time_modified: str):
        """
        :param str display_name: Display name of the group
        :param str external_identifier: Identifier of the group in the identity provider
        :param str id: The OCID of the `IdentityProviderGroup`.
        :param str identity_provider_id: The OCID of the identity provider.
        :param str name: A filter to only return resources that match the given name exactly.
        :param str time_created: Date and time the `IdentityProviderGroup` was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        :param str time_modified: Date and time the `IdentityProviderGroup` was last modified, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "external_identifier", external_identifier)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "identity_provider_id", identity_provider_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_modified", time_modified)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Display name of the group
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="externalIdentifier")
    def external_identifier(self) -> str:
        """
        Identifier of the group in the identity provider
        """
        return pulumi.get(self, "external_identifier")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The OCID of the `IdentityProviderGroup`.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="identityProviderId")
    def identity_provider_id(self) -> str:
        """
        The OCID of the identity provider.
        """
        return pulumi.get(self, "identity_provider_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to only return resources that match the given name exactly.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        Date and time the `IdentityProviderGroup` was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeModified")
    def time_modified(self) -> str:
        """
        Date and time the `IdentityProviderGroup` was last modified, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_modified")


@pulumi.output_type
class GetIdentityProvidersFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: A filter to only return resources that match the given name exactly.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to only return resources that match the given name exactly.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetIdentityProvidersIdentityProviderResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 defined_tags: Mapping[str, Any],
                 description: str,
                 freeform_attributes: Mapping[str, Any],
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 inactive_state: str,
                 metadata: str,
                 metadata_url: str,
                 name: str,
                 product_type: str,
                 protocol: str,
                 redirect_url: str,
                 signing_certificate: str,
                 state: str,
                 time_created: str):
        """
        :param str compartment_id: The OCID of the compartment (remember that the tenancy is simply the root compartment).
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param str description: The description you assign to the `IdentityProvider` during creation. Does not have to be unique, and it's changeable.
        :param Mapping[str, Any] freeform_attributes: Extra name value pairs associated with this identity provider. Example: `{"clientId": "app_sf3kdjf3"}`
        :param Mapping[str, Any] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param str id: The OCID of the `IdentityProvider`.
        :param str inactive_state: The detailed status of INACTIVE lifecycleState.
        :param str metadata: The XML that contains the information required for federating Identity with SAML2 Identity Provider.
        :param str metadata_url: The URL for retrieving the identity provider's metadata, which contains information required for federating.
        :param str name: A filter to only return resources that match the given name exactly.
        :param str product_type: The identity provider service or product. Supported identity providers are Oracle Identity Cloud Service (IDCS) and Microsoft Active Directory Federation Services (ADFS).
        :param str protocol: The protocol used for federation.
        :param str redirect_url: The URL to redirect federated users to for authentication with the identity provider.
        :param str signing_certificate: The identity provider's signing certificate used by the IAM Service to validate the SAML2 token.
        :param str state: A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
        :param str time_created: Date and time the `IdentityProvider` was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "freeform_attributes", freeform_attributes)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "inactive_state", inactive_state)
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "metadata_url", metadata_url)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "product_type", product_type)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "redirect_url", redirect_url)
        pulumi.set(__self__, "signing_certificate", signing_certificate)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The OCID of the compartment (remember that the tenancy is simply the root compartment).
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description you assign to the `IdentityProvider` during creation. Does not have to be unique, and it's changeable.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="freeformAttributes")
    def freeform_attributes(self) -> Mapping[str, Any]:
        """
        Extra name value pairs associated with this identity provider. Example: `{"clientId": "app_sf3kdjf3"}`
        """
        return pulumi.get(self, "freeform_attributes")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The OCID of the `IdentityProvider`.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inactiveState")
    def inactive_state(self) -> str:
        """
        The detailed status of INACTIVE lifecycleState.
        """
        return pulumi.get(self, "inactive_state")

    @property
    @pulumi.getter
    def metadata(self) -> str:
        """
        The XML that contains the information required for federating Identity with SAML2 Identity Provider.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="metadataUrl")
    def metadata_url(self) -> str:
        """
        The URL for retrieving the identity provider's metadata, which contains information required for federating.
        """
        return pulumi.get(self, "metadata_url")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to only return resources that match the given name exactly.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="productType")
    def product_type(self) -> str:
        """
        The identity provider service or product. Supported identity providers are Oracle Identity Cloud Service (IDCS) and Microsoft Active Directory Federation Services (ADFS).
        """
        return pulumi.get(self, "product_type")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        The protocol used for federation.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> str:
        """
        The URL to redirect federated users to for authentication with the identity provider.
        """
        return pulumi.get(self, "redirect_url")

    @property
    @pulumi.getter(name="signingCertificate")
    def signing_certificate(self) -> str:
        """
        The identity provider's signing certificate used by the IAM Service to validate the SAML2 token.
        """
        return pulumi.get(self, "signing_certificate")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        Date and time the `IdentityProvider` was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetIdpGroupMappingsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetIdpGroupMappingsIdpGroupMappingResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 group_id: str,
                 id: str,
                 identity_provider_id: str,
                 idp_group_name: str,
                 inactive_state: str,
                 state: str,
                 time_created: str):
        """
        :param str compartment_id: The OCID of the tenancy containing the `IdentityProvider`.
        :param str group_id: The OCID of the IAM Service group that is mapped to the IdP group.
        :param str id: The OCID of the `IdpGroupMapping`.
        :param str identity_provider_id: The OCID of the identity provider.
        :param str idp_group_name: The name of the IdP group that is mapped to the IAM Service group.
        :param str inactive_state: The detailed status of INACTIVE lifecycleState.
        :param str state: The mapping's current state.
        :param str time_created: Date and time the mapping was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "identity_provider_id", identity_provider_id)
        pulumi.set(__self__, "idp_group_name", idp_group_name)
        pulumi.set(__self__, "inactive_state", inactive_state)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The OCID of the tenancy containing the `IdentityProvider`.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> str:
        """
        The OCID of the IAM Service group that is mapped to the IdP group.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The OCID of the `IdpGroupMapping`.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="identityProviderId")
    def identity_provider_id(self) -> str:
        """
        The OCID of the identity provider.
        """
        return pulumi.get(self, "identity_provider_id")

    @property
    @pulumi.getter(name="idpGroupName")
    def idp_group_name(self) -> str:
        """
        The name of the IdP group that is mapped to the IAM Service group.
        """
        return pulumi.get(self, "idp_group_name")

    @property
    @pulumi.getter(name="inactiveState")
    def inactive_state(self) -> str:
        """
        The detailed status of INACTIVE lifecycleState.
        """
        return pulumi.get(self, "inactive_state")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The mapping's current state.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        Date and time the mapping was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetNetworkSourceVirtualSourceListResult(dict):
    def __init__(__self__, *,
                 ip_ranges: Sequence[str],
                 vcn_id: str):
        pulumi.set(__self__, "ip_ranges", ip_ranges)
        pulumi.set(__self__, "vcn_id", vcn_id)

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Sequence[str]:
        return pulumi.get(self, "ip_ranges")

    @property
    @pulumi.getter(name="vcnId")
    def vcn_id(self) -> str:
        return pulumi.get(self, "vcn_id")


@pulumi.output_type
class GetNetworkSourcesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: A filter to only return resources that match the given name exactly.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to only return resources that match the given name exactly.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetNetworkSourcesNetworkSourceResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 defined_tags: Mapping[str, Any],
                 description: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 inactive_state: str,
                 name: str,
                 public_source_lists: Sequence[str],
                 services: Sequence[str],
                 state: str,
                 time_created: str,
                 virtual_source_lists: Sequence['outputs.GetNetworkSourcesNetworkSourceVirtualSourceListResult']):
        """
        :param str compartment_id: The OCID of the compartment (remember that the tenancy is simply the root compartment).
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param str description: The description you assign to the network source. Does not have to be unique, and it's changeable.
        :param Mapping[str, Any] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param str id: The OCID of the network source.
        :param str inactive_state: The detailed status of INACTIVE lifecycleState.
        :param str name: A filter to only return resources that match the given name exactly.
        :param Sequence[str] public_source_lists: A list of allowed public IP addresses and CIDR ranges.
        :param Sequence[str] services: A list of services allowed to make on-behalf-of requests. These requests can have different source IPs than those specified in the network source. Currently, only `all` and `none` are supported. The default is `all`.
        :param str state: A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
        :param str time_created: Date and time the group was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        :param Sequence['GetNetworkSourcesNetworkSourceVirtualSourceListArgs'] virtual_source_lists: A list of allowed VCN OCID and IP range pairs. Example:`"vcnId": "ocid1.vcn.oc1.iad.aaaaaaaaexampleuniqueID", "ipRanges": [ "129.213.39.0/24" ]`
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "inactive_state", inactive_state)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "public_source_lists", public_source_lists)
        pulumi.set(__self__, "services", services)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "virtual_source_lists", virtual_source_lists)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The OCID of the compartment (remember that the tenancy is simply the root compartment).
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description you assign to the network source. Does not have to be unique, and it's changeable.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The OCID of the network source.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inactiveState")
    def inactive_state(self) -> str:
        """
        The detailed status of INACTIVE lifecycleState.
        """
        return pulumi.get(self, "inactive_state")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to only return resources that match the given name exactly.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="publicSourceLists")
    def public_source_lists(self) -> Sequence[str]:
        """
        A list of allowed public IP addresses and CIDR ranges.
        """
        return pulumi.get(self, "public_source_lists")

    @property
    @pulumi.getter
    def services(self) -> Sequence[str]:
        """
        A list of services allowed to make on-behalf-of requests. These requests can have different source IPs than those specified in the network source. Currently, only `all` and `none` are supported. The default is `all`.
        """
        return pulumi.get(self, "services")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        Date and time the group was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="virtualSourceLists")
    def virtual_source_lists(self) -> Sequence['outputs.GetNetworkSourcesNetworkSourceVirtualSourceListResult']:
        """
        A list of allowed VCN OCID and IP range pairs. Example:`"vcnId": "ocid1.vcn.oc1.iad.aaaaaaaaexampleuniqueID", "ipRanges": [ "129.213.39.0/24" ]`
        """
        return pulumi.get(self, "virtual_source_lists")


@pulumi.output_type
class GetNetworkSourcesNetworkSourceVirtualSourceListResult(dict):
    def __init__(__self__, *,
                 ip_ranges: Sequence[str],
                 vcn_id: str):
        pulumi.set(__self__, "ip_ranges", ip_ranges)
        pulumi.set(__self__, "vcn_id", vcn_id)

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Sequence[str]:
        return pulumi.get(self, "ip_ranges")

    @property
    @pulumi.getter(name="vcnId")
    def vcn_id(self) -> str:
        return pulumi.get(self, "vcn_id")


@pulumi.output_type
class GetPoliciesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: A filter to only return resources that match the given name exactly.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to only return resources that match the given name exactly.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetPoliciesPolicyResult(dict):
    def __init__(__self__, *,
                 e_tag: str,
                 compartment_id: str,
                 defined_tags: Mapping[str, Any],
                 description: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 inactive_state: str,
                 last_update_e_tag: str,
                 name: str,
                 policy_hash: str,
                 state: str,
                 statements: Sequence[str],
                 time_created: str,
                 version_date: str):
        """
        :param str compartment_id: The OCID of the compartment (remember that the tenancy is simply the root compartment).
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param str description: The description you assign to the policy. Does not have to be unique, and it's changeable.
        :param Mapping[str, Any] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param str id: The OCID of the policy.
        :param str inactive_state: The detailed status of INACTIVE lifecycleState.
        :param str name: A filter to only return resources that match the given name exactly.
        :param str state: A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
        :param Sequence[str] statements: An array of one or more policy statements written in the policy language.
        :param str time_created: Date and time the policy was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        :param str version_date: The version of the policy. If null or set to an empty string, when a request comes in for authorization, the policy will be evaluated according to the current behavior of the services at that moment. If set to a particular date (YYYY-MM-DD), the policy will be evaluated according to the behavior of the services on that date.
        """
        pulumi.set(__self__, "e_tag", e_tag)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "inactive_state", inactive_state)
        pulumi.set(__self__, "last_update_e_tag", last_update_e_tag)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "policy_hash", policy_hash)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "statements", statements)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "version_date", version_date)

    @property
    @pulumi.getter(name="ETag")
    def e_tag(self) -> str:
        return pulumi.get(self, "e_tag")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The OCID of the compartment (remember that the tenancy is simply the root compartment).
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description you assign to the policy. Does not have to be unique, and it's changeable.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The OCID of the policy.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inactiveState")
    def inactive_state(self) -> str:
        """
        The detailed status of INACTIVE lifecycleState.
        """
        return pulumi.get(self, "inactive_state")

    @property
    @pulumi.getter(name="lastUpdateETag")
    def last_update_e_tag(self) -> str:
        return pulumi.get(self, "last_update_e_tag")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to only return resources that match the given name exactly.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="policyHash")
    def policy_hash(self) -> str:
        return pulumi.get(self, "policy_hash")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def statements(self) -> Sequence[str]:
        """
        An array of one or more policy statements written in the policy language.
        """
        return pulumi.get(self, "statements")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        Date and time the policy was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="versionDate")
    def version_date(self) -> str:
        """
        The version of the policy. If null or set to an empty string, when a request comes in for authorization, the policy will be evaluated according to the current behavior of the services at that moment. If set to a particular date (YYYY-MM-DD), the policy will be evaluated according to the behavior of the services on that date.
        """
        return pulumi.get(self, "version_date")


@pulumi.output_type
class GetRegionSubscriptionsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetRegionSubscriptionsRegionSubscriptionResult(dict):
    def __init__(__self__, *,
                 is_home_region: bool,
                 region_key: str,
                 region_name: str,
                 state: str,
                 tenancy_id: str):
        """
        :param bool is_home_region: Indicates if the region is the home region or not.
        :param str region_key: The region's key. See [Regions and Availability Domains](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/regions.htm) for the full list of supported 3-letter region codes.  Example: `PHX`
        :param str region_name: The region's name. See [Regions and Availability Domains](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/regions.htm) for the full list of supported region names.  Example: `us-phoenix-1`
        :param str tenancy_id: The OCID of the tenancy.
        """
        pulumi.set(__self__, "is_home_region", is_home_region)
        pulumi.set(__self__, "region_key", region_key)
        pulumi.set(__self__, "region_name", region_name)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "tenancy_id", tenancy_id)

    @property
    @pulumi.getter(name="isHomeRegion")
    def is_home_region(self) -> bool:
        """
        Indicates if the region is the home region or not.
        """
        return pulumi.get(self, "is_home_region")

    @property
    @pulumi.getter(name="regionKey")
    def region_key(self) -> str:
        """
        The region's key. See [Regions and Availability Domains](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/regions.htm) for the full list of supported 3-letter region codes.  Example: `PHX`
        """
        return pulumi.get(self, "region_key")

    @property
    @pulumi.getter(name="regionName")
    def region_name(self) -> str:
        """
        The region's name. See [Regions and Availability Domains](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/regions.htm) for the full list of supported region names.  Example: `us-phoenix-1`
        """
        return pulumi.get(self, "region_name")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="tenancyId")
    def tenancy_id(self) -> str:
        """
        The OCID of the tenancy.
        """
        return pulumi.get(self, "tenancy_id")


@pulumi.output_type
class GetRegionsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: The name of the region. See [Regions and Availability Domains](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/regions.htm) for the full list of supported region names.  Example: `us-phoenix-1`
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the region. See [Regions and Availability Domains](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/regions.htm) for the full list of supported region names.  Example: `us-phoenix-1`
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetRegionsRegionResult(dict):
    def __init__(__self__, *,
                 key: str,
                 name: str):
        """
        :param str key: The key of the region. See [Regions and Availability Domains](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/regions.htm) for the full list of supported 3-letter region codes.  Example: `PHX`
        :param str name: The name of the region. See [Regions and Availability Domains](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/regions.htm) for the full list of supported region names.  Example: `us-phoenix-1`
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of the region. See [Regions and Availability Domains](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/regions.htm) for the full list of supported 3-letter region codes.  Example: `PHX`
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the region. See [Regions and Availability Domains](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/regions.htm) for the full list of supported region names.  Example: `us-phoenix-1`
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSmtpCredentialsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSmtpCredentialsSmtpCredentialResult(dict):
    def __init__(__self__, *,
                 description: str,
                 id: str,
                 inactive_state: str,
                 password: str,
                 state: str,
                 time_created: str,
                 time_expires: str,
                 user_id: str,
                 username: str):
        """
        :param str description: The description you assign to the SMTP credential. Does not have to be unique, and it's changeable.
        :param str id: The OCID of the SMTP credential.
        :param str inactive_state: The detailed status of INACTIVE lifecycleState.
        :param str state: The credential's current state.
        :param str time_created: Date and time the `SmtpCredential` object was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        :param str time_expires: Date and time when this credential will expire, in the format defined by RFC3339. Null if it never expires.  Example: `2016-08-25T21:10:29.600Z`
        :param str user_id: The OCID of the user.
        :param str username: The SMTP user name.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "inactive_state", inactive_state)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_expires", time_expires)
        pulumi.set(__self__, "user_id", user_id)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description you assign to the SMTP credential. Does not have to be unique, and it's changeable.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The OCID of the SMTP credential.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inactiveState")
    def inactive_state(self) -> str:
        """
        The detailed status of INACTIVE lifecycleState.
        """
        return pulumi.get(self, "inactive_state")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The credential's current state.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        Date and time the `SmtpCredential` object was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeExpires")
    def time_expires(self) -> str:
        """
        Date and time when this credential will expire, in the format defined by RFC3339. Null if it never expires.  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_expires")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> str:
        """
        The OCID of the user.
        """
        return pulumi.get(self, "user_id")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        The SMTP user name.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class GetSwiftPasswordsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSwiftPasswordsPasswordResult(dict):
    def __init__(__self__, *,
                 description: str,
                 expires_on: str,
                 id: str,
                 inactive_state: str,
                 password: str,
                 state: str,
                 time_created: str,
                 user_id: str):
        """
        :param str description: The description you assign to the Swift password. Does not have to be unique, and it's changeable.
        :param str expires_on: Date and time when this password will expire, in the format defined by RFC3339. Null if it never expires.  Example: `2016-08-25T21:10:29.600Z`
        :param str id: The OCID of the Swift password.
        :param str inactive_state: The detailed status of INACTIVE lifecycleState.
        :param str password: The Swift password. The value is available only in the response for `CreateSwiftPassword`, and not for `ListSwiftPasswords` or `UpdateSwiftPassword`.
        :param str state: The password's current state.
        :param str time_created: Date and time the `SwiftPassword` object was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        :param str user_id: The OCID of the user.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "expires_on", expires_on)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "inactive_state", inactive_state)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description you assign to the Swift password. Does not have to be unique, and it's changeable.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="expiresOn")
    def expires_on(self) -> str:
        """
        Date and time when this password will expire, in the format defined by RFC3339. Null if it never expires.  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "expires_on")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The OCID of the Swift password.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inactiveState")
    def inactive_state(self) -> str:
        """
        The detailed status of INACTIVE lifecycleState.
        """
        return pulumi.get(self, "inactive_state")

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        The Swift password. The value is available only in the response for `CreateSwiftPassword`, and not for `ListSwiftPasswords` or `UpdateSwiftPassword`.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The password's current state.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        Date and time the `SwiftPassword` object was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> str:
        """
        The OCID of the user.
        """
        return pulumi.get(self, "user_id")


@pulumi.output_type
class GetTagDefaultsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetTagDefaultsTagDefaultResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 id: str,
                 is_required: bool,
                 state: str,
                 tag_definition_id: str,
                 tag_definition_name: str,
                 tag_namespace_id: str,
                 time_created: str,
                 value: str):
        """
        :param str compartment_id: The OCID of the compartment (remember that the tenancy is simply the root compartment).
        :param str id: A filter to only return resources that match the specified OCID exactly.
        :param bool is_required: If you specify that a value is required, a value is set during resource creation (either by the user creating the resource or another tag defualt). If no value is set, resource creation is blocked.
               * If the `isRequired` flag is set to "true", the value is set during resource creation.
               * If the `isRequired` flag is set to "false", the value you enter is set during resource creation.
        :param str state: A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
        :param str tag_definition_id: The OCID of the tag definition.
        :param str tag_definition_name: The name used in the tag definition. This field is informational in the context of the tag default.
        :param str tag_namespace_id: The OCID of the tag namespace that contains the tag definition.
        :param str time_created: Date and time the `TagDefault` object was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        :param str value: The default value for the tag definition. This will be applied to all new resources created in the compartment.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_required", is_required)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "tag_definition_id", tag_definition_id)
        pulumi.set(__self__, "tag_definition_name", tag_definition_name)
        pulumi.set(__self__, "tag_namespace_id", tag_namespace_id)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The OCID of the compartment (remember that the tenancy is simply the root compartment).
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        A filter to only return resources that match the specified OCID exactly.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> bool:
        """
        If you specify that a value is required, a value is set during resource creation (either by the user creating the resource or another tag defualt). If no value is set, resource creation is blocked.
        * If the `isRequired` flag is set to "true", the value is set during resource creation.
        * If the `isRequired` flag is set to "false", the value you enter is set during resource creation.
        """
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="tagDefinitionId")
    def tag_definition_id(self) -> str:
        """
        The OCID of the tag definition.
        """
        return pulumi.get(self, "tag_definition_id")

    @property
    @pulumi.getter(name="tagDefinitionName")
    def tag_definition_name(self) -> str:
        """
        The name used in the tag definition. This field is informational in the context of the tag default.
        """
        return pulumi.get(self, "tag_definition_name")

    @property
    @pulumi.getter(name="tagNamespaceId")
    def tag_namespace_id(self) -> str:
        """
        The OCID of the tag namespace that contains the tag definition.
        """
        return pulumi.get(self, "tag_namespace_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        Date and time the `TagDefault` object was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The default value for the tag definition. This will be applied to all new resources created in the compartment.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTagNamespacesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: The name of the tag namespace. It must be unique across all tag namespaces in the tenancy and cannot be changed.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the tag namespace. It must be unique across all tag namespaces in the tenancy and cannot be changed.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetTagNamespacesTagNamespaceResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 defined_tags: Mapping[str, Any],
                 description: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 is_retired: bool,
                 name: str,
                 state: str,
                 time_created: str):
        """
        :param str compartment_id: The OCID of the compartment (remember that the tenancy is simply the root compartment).
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param str description: The description you assign to the tag namespace.
        :param Mapping[str, Any] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param str id: The OCID of the tag namespace.
        :param bool is_retired: Whether the tag namespace is retired. For more information, see [Retiring Key Definitions and Namespace Definitions](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/taggingoverview.htm#Retiring).
        :param str name: The name of the tag namespace. It must be unique across all tag namespaces in the tenancy and cannot be changed.
        :param str state: A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
        :param str time_created: Date and time the tag namespace was created, in the format defined by RFC3339. Example: `2016-08-25T21:10:29.600Z`
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_retired", is_retired)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The OCID of the compartment (remember that the tenancy is simply the root compartment).
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description you assign to the tag namespace.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The OCID of the tag namespace.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isRetired")
    def is_retired(self) -> bool:
        """
        Whether the tag namespace is retired. For more information, see [Retiring Key Definitions and Namespace Definitions](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/taggingoverview.htm#Retiring).
        """
        return pulumi.get(self, "is_retired")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the tag namespace. It must be unique across all tag namespaces in the tenancy and cannot be changed.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        Date and time the tag namespace was created, in the format defined by RFC3339. Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetTagStandardTagNamespaceTemplateTagDefinitionTemplateResult(dict):
    def __init__(__self__, *,
                 description: str,
                 enum_mutability: str,
                 is_cost_tracking: bool,
                 possible_values: Sequence[str],
                 tag_definition_name: str,
                 type: str):
        """
        :param str description: The default description of the tag namespace that users can use to create the tag definition
        :param str enum_mutability: The mutability of the possible values list for enum tags. This will default to IMMUTABLE for string value tags
        :param bool is_cost_tracking: Is the tag a cost tracking tag. Default will be false as cost tracking tags have been deprecated
        :param Sequence[str] possible_values: List of possible values. An optional parameter that will be present if the type of definition is enum.
        :param str tag_definition_name: The name of this standard tag definition
        :param str type: The type of tag definition. Enum or string.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enum_mutability", enum_mutability)
        pulumi.set(__self__, "is_cost_tracking", is_cost_tracking)
        pulumi.set(__self__, "possible_values", possible_values)
        pulumi.set(__self__, "tag_definition_name", tag_definition_name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The default description of the tag namespace that users can use to create the tag definition
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="enumMutability")
    def enum_mutability(self) -> str:
        """
        The mutability of the possible values list for enum tags. This will default to IMMUTABLE for string value tags
        """
        return pulumi.get(self, "enum_mutability")

    @property
    @pulumi.getter(name="isCostTracking")
    def is_cost_tracking(self) -> bool:
        """
        Is the tag a cost tracking tag. Default will be false as cost tracking tags have been deprecated
        """
        return pulumi.get(self, "is_cost_tracking")

    @property
    @pulumi.getter(name="possibleValues")
    def possible_values(self) -> Sequence[str]:
        """
        List of possible values. An optional parameter that will be present if the type of definition is enum.
        """
        return pulumi.get(self, "possible_values")

    @property
    @pulumi.getter(name="tagDefinitionName")
    def tag_definition_name(self) -> str:
        """
        The name of this standard tag definition
        """
        return pulumi.get(self, "tag_definition_name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of tag definition. Enum or string.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetTagStandardTagNamespaceTemplatesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetTagStandardTagNamespaceTemplatesStandardTagNamespaceTemplateResult(dict):
    def __init__(__self__, *,
                 description: str,
                 standard_tag_namespace_name: str,
                 status: str):
        """
        :param str description: The default description of the tag namespace that users can use to create the tag namespace
        :param str standard_tag_namespace_name: The reserved name of this standard tag namespace
        :param str status: The status of the standard tag namespace
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "standard_tag_namespace_name", standard_tag_namespace_name)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The default description of the tag namespace that users can use to create the tag namespace
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="standardTagNamespaceName")
    def standard_tag_namespace_name(self) -> str:
        """
        The reserved name of this standard tag namespace
        """
        return pulumi.get(self, "standard_tag_namespace_name")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of the standard tag namespace
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetTagValidatorResult(dict):
    def __init__(__self__, *,
                 validator_type: str,
                 values: Sequence[str]):
        """
        :param str validator_type: Specifies the type of validation: a static value (no validation) or a list.
        :param Sequence[str] values: The list of allowed values for a definedTag value.
        """
        pulumi.set(__self__, "validator_type", validator_type)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="validatorType")
    def validator_type(self) -> str:
        """
        Specifies the type of validation: a static value (no validation) or a list.
        """
        return pulumi.get(self, "validator_type")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        The list of allowed values for a definedTag value.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetTagsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: The name assigned to the tag during creation. This is the tag key definition. The name must be unique within the tag namespace and cannot be changed.
        :param Sequence[str] values: The list of allowed values for a definedTag value.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name assigned to the tag during creation. This is the tag key definition. The name must be unique within the tag namespace and cannot be changed.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        The list of allowed values for a definedTag value.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetTagsTagResult(dict):
    def __init__(__self__, *,
                 defined_tags: Mapping[str, Any],
                 description: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 is_cost_tracking: bool,
                 is_retired: bool,
                 name: str,
                 state: str,
                 tag_namespace_id: str,
                 time_created: str,
                 validators: Sequence['outputs.GetTagsTagValidatorResult']):
        """
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
        :param str description: The description you assign to the tag.
        :param Mapping[str, Any] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        :param str id: The OCID of the tag definition.
        :param bool is_cost_tracking: Indicates whether the tag is enabled for cost tracking.
        :param bool is_retired: Indicates whether the tag is retired. See [Retiring Key Definitions and Namespace Definitions](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/taggingoverview.htm#Retiring).
        :param str name: The name assigned to the tag during creation. This is the tag key definition. The name must be unique within the tag namespace and cannot be changed.
        :param str state: A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
        :param str tag_namespace_id: The OCID of the tag namespace.
        :param str time_created: Date and time the tag was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        :param Sequence['GetTagsTagValidatorArgs'] validators: Validates a definedTag value. Each validator performs validation steps in addition to the standard validation for definedTag values. For more information, see [Limits on Tags](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/taggingoverview.htm#Limits).
        """
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_cost_tracking", is_cost_tracking)
        pulumi.set(__self__, "is_retired", is_retired)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "tag_namespace_id", tag_namespace_id)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "validators", validators)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description you assign to the tag.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The OCID of the tag definition.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isCostTracking")
    def is_cost_tracking(self) -> bool:
        """
        Indicates whether the tag is enabled for cost tracking.
        """
        return pulumi.get(self, "is_cost_tracking")

    @property
    @pulumi.getter(name="isRetired")
    def is_retired(self) -> bool:
        """
        Indicates whether the tag is retired. See [Retiring Key Definitions and Namespace Definitions](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/taggingoverview.htm#Retiring).
        """
        return pulumi.get(self, "is_retired")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name assigned to the tag during creation. This is the tag key definition. The name must be unique within the tag namespace and cannot be changed.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="tagNamespaceId")
    def tag_namespace_id(self) -> str:
        """
        The OCID of the tag namespace.
        """
        return pulumi.get(self, "tag_namespace_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        Date and time the tag was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter
    def validators(self) -> Sequence['outputs.GetTagsTagValidatorResult']:
        """
        Validates a definedTag value. Each validator performs validation steps in addition to the standard validation for definedTag values. For more information, see [Limits on Tags](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/taggingoverview.htm#Limits).
        """
        return pulumi.get(self, "validators")


@pulumi.output_type
class GetTagsTagValidatorResult(dict):
    def __init__(__self__, *,
                 validator_type: str,
                 values: Sequence[str]):
        """
        :param str validator_type: Specifies the type of validation: a static value (no validation) or a list.
        :param Sequence[str] values: The list of allowed values for a definedTag value.
        """
        pulumi.set(__self__, "validator_type", validator_type)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="validatorType")
    def validator_type(self) -> str:
        """
        Specifies the type of validation: a static value (no validation) or a list.
        """
        return pulumi.get(self, "validator_type")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        The list of allowed values for a definedTag value.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetUserCapabilityResult(dict):
    def __init__(__self__, *,
                 can_use_api_keys: bool,
                 can_use_auth_tokens: bool,
                 can_use_console_password: bool,
                 can_use_customer_secret_keys: bool,
                 can_use_db_credentials: bool,
                 can_use_oauth2client_credentials: bool,
                 can_use_smtp_credentials: bool):
        """
        :param bool can_use_api_keys: Indicates if the user can use API keys.
        :param bool can_use_auth_tokens: Indicates if the user can use SWIFT passwords / auth tokens.
        :param bool can_use_console_password: Indicates if the user can log in to the console.
        :param bool can_use_customer_secret_keys: Indicates if the user can use SigV4 symmetric keys.
        :param bool can_use_db_credentials: Indicates if the user can use DB passwords.
        :param bool can_use_oauth2client_credentials: Indicates if the user can use OAuth2 credentials and tokens.
        :param bool can_use_smtp_credentials: Indicates if the user can use SMTP passwords.
        """
        pulumi.set(__self__, "can_use_api_keys", can_use_api_keys)
        pulumi.set(__self__, "can_use_auth_tokens", can_use_auth_tokens)
        pulumi.set(__self__, "can_use_console_password", can_use_console_password)
        pulumi.set(__self__, "can_use_customer_secret_keys", can_use_customer_secret_keys)
        pulumi.set(__self__, "can_use_db_credentials", can_use_db_credentials)
        pulumi.set(__self__, "can_use_oauth2client_credentials", can_use_oauth2client_credentials)
        pulumi.set(__self__, "can_use_smtp_credentials", can_use_smtp_credentials)

    @property
    @pulumi.getter(name="canUseApiKeys")
    def can_use_api_keys(self) -> bool:
        """
        Indicates if the user can use API keys.
        """
        return pulumi.get(self, "can_use_api_keys")

    @property
    @pulumi.getter(name="canUseAuthTokens")
    def can_use_auth_tokens(self) -> bool:
        """
        Indicates if the user can use SWIFT passwords / auth tokens.
        """
        return pulumi.get(self, "can_use_auth_tokens")

    @property
    @pulumi.getter(name="canUseConsolePassword")
    def can_use_console_password(self) -> bool:
        """
        Indicates if the user can log in to the console.
        """
        return pulumi.get(self, "can_use_console_password")

    @property
    @pulumi.getter(name="canUseCustomerSecretKeys")
    def can_use_customer_secret_keys(self) -> bool:
        """
        Indicates if the user can use SigV4 symmetric keys.
        """
        return pulumi.get(self, "can_use_customer_secret_keys")

    @property
    @pulumi.getter(name="canUseDbCredentials")
    def can_use_db_credentials(self) -> bool:
        """
        Indicates if the user can use DB passwords.
        """
        return pulumi.get(self, "can_use_db_credentials")

    @property
    @pulumi.getter(name="canUseOauth2clientCredentials")
    def can_use_oauth2client_credentials(self) -> bool:
        """
        Indicates if the user can use OAuth2 credentials and tokens.
        """
        return pulumi.get(self, "can_use_oauth2client_credentials")

    @property
    @pulumi.getter(name="canUseSmtpCredentials")
    def can_use_smtp_credentials(self) -> bool:
        """
        Indicates if the user can use SMTP passwords.
        """
        return pulumi.get(self, "can_use_smtp_credentials")


@pulumi.output_type
class GetUserGroupMembershipsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetUserGroupMembershipsMembershipResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 group_id: str,
                 id: str,
                 inactive_state: str,
                 state: str,
                 time_created: str,
                 user_id: str):
        """
        :param str compartment_id: The OCID of the compartment (remember that the tenancy is simply the root compartment).
        :param str group_id: The OCID of the group.
        :param str id: The OCID of the membership.
        :param str inactive_state: The detailed status of INACTIVE lifecycleState.
        :param str state: The membership's current state.
        :param str time_created: Date and time the membership was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        :param str user_id: The OCID of the user.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "inactive_state", inactive_state)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The OCID of the compartment (remember that the tenancy is simply the root compartment).
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> str:
        """
        The OCID of the group.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The OCID of the membership.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inactiveState")
    def inactive_state(self) -> str:
        """
        The detailed status of INACTIVE lifecycleState.
        """
        return pulumi.get(self, "inactive_state")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The membership's current state.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        Date and time the membership was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> str:
        """
        The OCID of the user.
        """
        return pulumi.get(self, "user_id")


@pulumi.output_type
class GetUsersFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: A filter to only return resources that match the given name exactly.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to only return resources that match the given name exactly.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetUsersUserResult(dict):
    def __init__(__self__, *,
                 capabilities: Sequence['outputs.GetUsersUserCapabilityResult'],
                 compartment_id: str,
                 db_user_name: str,
                 defined_tags: Mapping[str, Any],
                 description: str,
                 email: str,
                 email_verified: bool,
                 external_identifier: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 identity_provider_id: str,
                 inactive_state: str,
                 last_successful_login_time: str,
                 name: str,
                 previous_successful_login_time: str,
                 state: str,
                 time_created: str):
        """
        :param Sequence['GetUsersUserCapabilityArgs'] capabilities: Properties indicating how the user is allowed to authenticate.
        :param str compartment_id: The OCID of the compartment (remember that the tenancy is simply the root compartment).
        :param str db_user_name: DB username of the DB credential. Has to be unique across the tenancy.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param str description: The description you assign to the user. Does not have to be unique, and it's changeable.
        :param str email: The email address you assign to the user. The email address must be unique across all users in the tenancy.
        :param bool email_verified: Whether the email address has been validated.
        :param str external_identifier: The id of a user in the identity provider.
        :param Mapping[str, Any] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        :param str id: The OCID of the user.
        :param str identity_provider_id: The id of the identity provider.
        :param str inactive_state: Returned only if the user's `lifecycleState` is INACTIVE. A 16-bit value showing the reason why the user is inactive:
               * bit 0: SUSPENDED (reserved for future use)
               * bit 1: DISABLED (reserved for future use)
               * bit 2: BLOCKED (the user has exceeded the maximum number of failed login attempts for the Console)
        :param str last_successful_login_time: The date and time of when the user most recently logged in the format defined by RFC3339 (ex. `2016-08-25T21:10:29.600Z`). If there is no login history, this field is null.
        :param str name: A filter to only return resources that match the given name exactly.
        :param str previous_successful_login_time: The date and time of when the user most recently logged in the format defined by RFC3339 (ex. `2016-08-25T21:10:29.600Z`). If there is no login history, this field is null.
        :param str state: A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
        :param str time_created: Date and time the user was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        """
        pulumi.set(__self__, "capabilities", capabilities)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "db_user_name", db_user_name)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "email_verified", email_verified)
        pulumi.set(__self__, "external_identifier", external_identifier)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "identity_provider_id", identity_provider_id)
        pulumi.set(__self__, "inactive_state", inactive_state)
        pulumi.set(__self__, "last_successful_login_time", last_successful_login_time)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "previous_successful_login_time", previous_successful_login_time)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter
    def capabilities(self) -> Sequence['outputs.GetUsersUserCapabilityResult']:
        """
        Properties indicating how the user is allowed to authenticate.
        """
        return pulumi.get(self, "capabilities")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The OCID of the compartment (remember that the tenancy is simply the root compartment).
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="dbUserName")
    def db_user_name(self) -> str:
        """
        DB username of the DB credential. Has to be unique across the tenancy.
        """
        return pulumi.get(self, "db_user_name")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description you assign to the user. Does not have to be unique, and it's changeable.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def email(self) -> str:
        """
        The email address you assign to the user. The email address must be unique across all users in the tenancy.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="emailVerified")
    def email_verified(self) -> bool:
        """
        Whether the email address has been validated.
        """
        return pulumi.get(self, "email_verified")

    @property
    @pulumi.getter(name="externalIdentifier")
    def external_identifier(self) -> str:
        """
        The id of a user in the identity provider.
        """
        return pulumi.get(self, "external_identifier")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The OCID of the user.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="identityProviderId")
    def identity_provider_id(self) -> str:
        """
        The id of the identity provider.
        """
        return pulumi.get(self, "identity_provider_id")

    @property
    @pulumi.getter(name="inactiveState")
    def inactive_state(self) -> str:
        """
        Returned only if the user's `lifecycleState` is INACTIVE. A 16-bit value showing the reason why the user is inactive:
        * bit 0: SUSPENDED (reserved for future use)
        * bit 1: DISABLED (reserved for future use)
        * bit 2: BLOCKED (the user has exceeded the maximum number of failed login attempts for the Console)
        """
        return pulumi.get(self, "inactive_state")

    @property
    @pulumi.getter(name="lastSuccessfulLoginTime")
    def last_successful_login_time(self) -> str:
        """
        The date and time of when the user most recently logged in the format defined by RFC3339 (ex. `2016-08-25T21:10:29.600Z`). If there is no login history, this field is null.
        """
        return pulumi.get(self, "last_successful_login_time")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to only return resources that match the given name exactly.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="previousSuccessfulLoginTime")
    def previous_successful_login_time(self) -> str:
        """
        The date and time of when the user most recently logged in the format defined by RFC3339 (ex. `2016-08-25T21:10:29.600Z`). If there is no login history, this field is null.
        """
        return pulumi.get(self, "previous_successful_login_time")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        Date and time the user was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetUsersUserCapabilityResult(dict):
    def __init__(__self__, *,
                 can_use_api_keys: bool,
                 can_use_auth_tokens: bool,
                 can_use_console_password: bool,
                 can_use_customer_secret_keys: bool,
                 can_use_db_credentials: bool,
                 can_use_oauth2client_credentials: bool,
                 can_use_smtp_credentials: bool):
        """
        :param bool can_use_api_keys: Indicates if the user can use API keys.
        :param bool can_use_auth_tokens: Indicates if the user can use SWIFT passwords / auth tokens.
        :param bool can_use_console_password: Indicates if the user can log in to the console.
        :param bool can_use_customer_secret_keys: Indicates if the user can use SigV4 symmetric keys.
        :param bool can_use_db_credentials: Indicates if the user can use DB passwords.
        :param bool can_use_oauth2client_credentials: Indicates if the user can use OAuth2 credentials and tokens.
        :param bool can_use_smtp_credentials: Indicates if the user can use SMTP passwords.
        """
        pulumi.set(__self__, "can_use_api_keys", can_use_api_keys)
        pulumi.set(__self__, "can_use_auth_tokens", can_use_auth_tokens)
        pulumi.set(__self__, "can_use_console_password", can_use_console_password)
        pulumi.set(__self__, "can_use_customer_secret_keys", can_use_customer_secret_keys)
        pulumi.set(__self__, "can_use_db_credentials", can_use_db_credentials)
        pulumi.set(__self__, "can_use_oauth2client_credentials", can_use_oauth2client_credentials)
        pulumi.set(__self__, "can_use_smtp_credentials", can_use_smtp_credentials)

    @property
    @pulumi.getter(name="canUseApiKeys")
    def can_use_api_keys(self) -> bool:
        """
        Indicates if the user can use API keys.
        """
        return pulumi.get(self, "can_use_api_keys")

    @property
    @pulumi.getter(name="canUseAuthTokens")
    def can_use_auth_tokens(self) -> bool:
        """
        Indicates if the user can use SWIFT passwords / auth tokens.
        """
        return pulumi.get(self, "can_use_auth_tokens")

    @property
    @pulumi.getter(name="canUseConsolePassword")
    def can_use_console_password(self) -> bool:
        """
        Indicates if the user can log in to the console.
        """
        return pulumi.get(self, "can_use_console_password")

    @property
    @pulumi.getter(name="canUseCustomerSecretKeys")
    def can_use_customer_secret_keys(self) -> bool:
        """
        Indicates if the user can use SigV4 symmetric keys.
        """
        return pulumi.get(self, "can_use_customer_secret_keys")

    @property
    @pulumi.getter(name="canUseDbCredentials")
    def can_use_db_credentials(self) -> bool:
        """
        Indicates if the user can use DB passwords.
        """
        return pulumi.get(self, "can_use_db_credentials")

    @property
    @pulumi.getter(name="canUseOauth2clientCredentials")
    def can_use_oauth2client_credentials(self) -> bool:
        """
        Indicates if the user can use OAuth2 credentials and tokens.
        """
        return pulumi.get(self, "can_use_oauth2client_credentials")

    @property
    @pulumi.getter(name="canUseSmtpCredentials")
    def can_use_smtp_credentials(self) -> bool:
        """
        Indicates if the user can use SMTP passwords.
        """
        return pulumi.get(self, "can_use_smtp_credentials")


