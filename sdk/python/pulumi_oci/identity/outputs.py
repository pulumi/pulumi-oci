# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'AuthenticationPolicyNetworkPolicy',
    'AuthenticationPolicyPasswordPolicy',
    'DomainReplicaRegion',
    'DomainsApiKeyIdcsCreatedBy',
    'DomainsApiKeyIdcsLastModifiedBy',
    'DomainsApiKeyMeta',
    'DomainsApiKeyTag',
    'DomainsApiKeyUrnietfparamsscimschemasoracleidcsextensionselfChangeUser',
    'DomainsApiKeyUser',
    'DomainsAuthTokenIdcsCreatedBy',
    'DomainsAuthTokenIdcsLastModifiedBy',
    'DomainsAuthTokenMeta',
    'DomainsAuthTokenTag',
    'DomainsAuthTokenUrnietfparamsscimschemasoracleidcsextensionselfChangeUser',
    'DomainsAuthTokenUser',
    'DomainsAuthenticationFactorSettingBypassCodeSettings',
    'DomainsAuthenticationFactorSettingClientAppSettings',
    'DomainsAuthenticationFactorSettingCompliancePolicy',
    'DomainsAuthenticationFactorSettingEmailSettings',
    'DomainsAuthenticationFactorSettingEndpointRestrictions',
    'DomainsAuthenticationFactorSettingIdcsCreatedBy',
    'DomainsAuthenticationFactorSettingIdcsLastModifiedBy',
    'DomainsAuthenticationFactorSettingIdentityStoreSettings',
    'DomainsAuthenticationFactorSettingMeta',
    'DomainsAuthenticationFactorSettingNotificationSettings',
    'DomainsAuthenticationFactorSettingTag',
    'DomainsAuthenticationFactorSettingThirdPartyFactor',
    'DomainsAuthenticationFactorSettingTotpSettings',
    'DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionfidoAuthenticationFactorSettings',
    'DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettings',
    'DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettingsDuoSecuritySettings',
    'DomainsCustomerSecretKeyIdcsCreatedBy',
    'DomainsCustomerSecretKeyIdcsLastModifiedBy',
    'DomainsCustomerSecretKeyMeta',
    'DomainsCustomerSecretKeyTag',
    'DomainsCustomerSecretKeyUrnietfparamsscimschemasoracleidcsextensionselfChangeUser',
    'DomainsCustomerSecretKeyUser',
    'DomainsDynamicResourceGroupDynamicGroupAppRole',
    'DomainsDynamicResourceGroupGrant',
    'DomainsDynamicResourceGroupIdcsCreatedBy',
    'DomainsDynamicResourceGroupIdcsLastModifiedBy',
    'DomainsDynamicResourceGroupMeta',
    'DomainsDynamicResourceGroupTag',
    'DomainsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTags',
    'DomainsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagsDefinedTag',
    'DomainsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagsFreeformTag',
    'DomainsGroupIdcsCreatedBy',
    'DomainsGroupIdcsLastModifiedBy',
    'DomainsGroupMember',
    'DomainsGroupMeta',
    'DomainsGroupTag',
    'DomainsGroupUrnietfparamsscimschemasoracleidcsextensionOciTags',
    'DomainsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagsDefinedTag',
    'DomainsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagsFreeformTag',
    'DomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroup',
    'DomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupDomainLevelSchemaName',
    'DomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupInstanceLevelSchemaName',
    'DomainsGroupUrnietfparamsscimschemasoracleidcsextensiondynamicGroup',
    'DomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroup',
    'DomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupAppRole',
    'DomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupGrant',
    'DomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupOwner',
    'DomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupPasswordPolicy',
    'DomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupSyncedFromApp',
    'DomainsGroupUrnietfparamsscimschemasoracleidcsextensionposixGroup',
    'DomainsGroupUrnietfparamsscimschemasoracleidcsextensionrequestableGroup',
    'DomainsIdentityProviderCorrelationPolicy',
    'DomainsIdentityProviderIdcsCreatedBy',
    'DomainsIdentityProviderIdcsLastModifiedBy',
    'DomainsIdentityProviderJitUserProvAssignedGroup',
    'DomainsIdentityProviderJitUserProvAttributes',
    'DomainsIdentityProviderJitUserProvGroupMapping',
    'DomainsIdentityProviderMeta',
    'DomainsIdentityProviderTag',
    'DomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider',
    'DomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionx509identityProvider',
    'DomainsKmsiSettingIdcsCreatedBy',
    'DomainsKmsiSettingIdcsLastModifiedBy',
    'DomainsKmsiSettingMeta',
    'DomainsKmsiSettingTag',
    'DomainsMyApiKeyIdcsCreatedBy',
    'DomainsMyApiKeyIdcsLastModifiedBy',
    'DomainsMyApiKeyMeta',
    'DomainsMyApiKeyTag',
    'DomainsMyApiKeyUser',
    'DomainsMyAuthTokenIdcsCreatedBy',
    'DomainsMyAuthTokenIdcsLastModifiedBy',
    'DomainsMyAuthTokenMeta',
    'DomainsMyAuthTokenTag',
    'DomainsMyAuthTokenUser',
    'DomainsMyCustomerSecretKeyIdcsCreatedBy',
    'DomainsMyCustomerSecretKeyIdcsLastModifiedBy',
    'DomainsMyCustomerSecretKeyMeta',
    'DomainsMyCustomerSecretKeyTag',
    'DomainsMyCustomerSecretKeyUser',
    'DomainsMyOauth2clientCredentialIdcsCreatedBy',
    'DomainsMyOauth2clientCredentialIdcsLastModifiedBy',
    'DomainsMyOauth2clientCredentialMeta',
    'DomainsMyOauth2clientCredentialScope',
    'DomainsMyOauth2clientCredentialTag',
    'DomainsMyOauth2clientCredentialUser',
    'DomainsMySmtpCredentialIdcsCreatedBy',
    'DomainsMySmtpCredentialIdcsLastModifiedBy',
    'DomainsMySmtpCredentialMeta',
    'DomainsMySmtpCredentialTag',
    'DomainsMySmtpCredentialUser',
    'DomainsMySupportAccountIdcsCreatedBy',
    'DomainsMySupportAccountIdcsLastModifiedBy',
    'DomainsMySupportAccountMeta',
    'DomainsMySupportAccountTag',
    'DomainsMySupportAccountUser',
    'DomainsMyUserDbCredentialIdcsCreatedBy',
    'DomainsMyUserDbCredentialIdcsLastModifiedBy',
    'DomainsMyUserDbCredentialMeta',
    'DomainsMyUserDbCredentialTag',
    'DomainsMyUserDbCredentialUser',
    'DomainsOauth2clientCredentialIdcsCreatedBy',
    'DomainsOauth2clientCredentialIdcsLastModifiedBy',
    'DomainsOauth2clientCredentialMeta',
    'DomainsOauth2clientCredentialScope',
    'DomainsOauth2clientCredentialTag',
    'DomainsOauth2clientCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUser',
    'DomainsOauth2clientCredentialUser',
    'DomainsPasswordPolicyConfiguredPasswordPolicyRule',
    'DomainsPasswordPolicyGroup',
    'DomainsPasswordPolicyIdcsCreatedBy',
    'DomainsPasswordPolicyIdcsLastModifiedBy',
    'DomainsPasswordPolicyMeta',
    'DomainsPasswordPolicyTag',
    'DomainsSmtpCredentialIdcsCreatedBy',
    'DomainsSmtpCredentialIdcsLastModifiedBy',
    'DomainsSmtpCredentialMeta',
    'DomainsSmtpCredentialTag',
    'DomainsSmtpCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUser',
    'DomainsSmtpCredentialUser',
    'DomainsUserAddress',
    'DomainsUserDbCredentialIdcsCreatedBy',
    'DomainsUserDbCredentialIdcsLastModifiedBy',
    'DomainsUserDbCredentialMeta',
    'DomainsUserDbCredentialTag',
    'DomainsUserDbCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUser',
    'DomainsUserDbCredentialUser',
    'DomainsUserEmail',
    'DomainsUserEntitlement',
    'DomainsUserGroup',
    'DomainsUserIdcsCreatedBy',
    'DomainsUserIdcsLastModifiedBy',
    'DomainsUserIm',
    'DomainsUserMeta',
    'DomainsUserName',
    'DomainsUserPhoneNumber',
    'DomainsUserPhoto',
    'DomainsUserRole',
    'DomainsUserTag',
    'DomainsUserUrnietfparamsscimschemasextensionenterprise20user',
    'DomainsUserUrnietfparamsscimschemasextensionenterprise20userManager',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionOciTags',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionOciTagsDefinedTag',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionOciTagsFreeformTag',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionadaptiveUser',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionadaptiveUserRiskScore',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensioncapabilitiesUser',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensiondbCredentialsUser',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensiondbUserUser',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensiondbUserUserPasswordVerifier',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionkerberosUserUser',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionkerberosUserUserRealmUser',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUser',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserBypassCode',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserDevice',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserPreferredDevice',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserTrustedUserAgent',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUser',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserApplicablePasswordPolicy',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordlessUser',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordlessUserFactorIdentifier',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionposixUser',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUser',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUserSecQuestion',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionselfChangeUser',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionselfRegistrationUser',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionselfRegistrationUserSelfRegistrationProfile',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionsffUser',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionsocialAccountUser',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionsocialAccountUserSocialAccount',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensiontermsOfUseUser',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensiontermsOfUseUserTermsOfUseConsent',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUser',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserApiKey',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserAuthToken',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserCustomerSecretKey',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserDbCredential',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserOAuth2clientCredential',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserSmtpCredential',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUser',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLocked',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserRecoveryLocked',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUser',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAccount',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAppRole',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserApplicableAuthenticationTargetApp',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserDelegatedAuthenticationTargetApp',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserGrant',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserIdcsAppRolesLimitedToGroup',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserSupportAccount',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserSyncedFromApp',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserUserToken',
    'DomainsUserX509certificate',
    'NetworkSourceVirtualSourceList',
    'TagValidator',
    'UserCapability',
    'GetAllowedDomainLicenseTypesAllowedDomainLicenseTypeResult',
    'GetAllowedDomainLicenseTypesFilterResult',
    'GetApiKeysApiKeyResult',
    'GetApiKeysFilterResult',
    'GetAuthTokensFilterResult',
    'GetAuthTokensTokenResult',
    'GetAuthenticationPolicyNetworkPolicyResult',
    'GetAuthenticationPolicyPasswordPolicyResult',
    'GetAvailabilityDomainsAvailabilityDomainResult',
    'GetAvailabilityDomainsFilterResult',
    'GetCompartmentsCompartmentResult',
    'GetCompartmentsFilterResult',
    'GetCostTrackingTagsFilterResult',
    'GetCostTrackingTagsTagResult',
    'GetCostTrackingTagsTagValidatorResult',
    'GetCustomerSecretKeysCustomerSecretKeyResult',
    'GetCustomerSecretKeysFilterResult',
    'GetDbCredentialsDbCredentialResult',
    'GetDbCredentialsFilterResult',
    'GetDomainReplicaRegionResult',
    'GetDomainsApiKeyIdcsCreatedByResult',
    'GetDomainsApiKeyIdcsLastModifiedByResult',
    'GetDomainsApiKeyMetaResult',
    'GetDomainsApiKeyTagResult',
    'GetDomainsApiKeyUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult',
    'GetDomainsApiKeyUserResult',
    'GetDomainsApiKeysApiKeyResult',
    'GetDomainsApiKeysApiKeyIdcsCreatedByResult',
    'GetDomainsApiKeysApiKeyIdcsLastModifiedByResult',
    'GetDomainsApiKeysApiKeyMetaResult',
    'GetDomainsApiKeysApiKeyTagResult',
    'GetDomainsApiKeysApiKeyUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult',
    'GetDomainsApiKeysApiKeyUserResult',
    'GetDomainsAuthTokenIdcsCreatedByResult',
    'GetDomainsAuthTokenIdcsLastModifiedByResult',
    'GetDomainsAuthTokenMetaResult',
    'GetDomainsAuthTokenTagResult',
    'GetDomainsAuthTokenUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult',
    'GetDomainsAuthTokenUserResult',
    'GetDomainsAuthTokensAuthTokenResult',
    'GetDomainsAuthTokensAuthTokenIdcsCreatedByResult',
    'GetDomainsAuthTokensAuthTokenIdcsLastModifiedByResult',
    'GetDomainsAuthTokensAuthTokenMetaResult',
    'GetDomainsAuthTokensAuthTokenTagResult',
    'GetDomainsAuthTokensAuthTokenUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult',
    'GetDomainsAuthTokensAuthTokenUserResult',
    'GetDomainsAuthenticationFactorSettingBypassCodeSettingResult',
    'GetDomainsAuthenticationFactorSettingClientAppSettingResult',
    'GetDomainsAuthenticationFactorSettingCompliancePolicyResult',
    'GetDomainsAuthenticationFactorSettingEmailSettingResult',
    'GetDomainsAuthenticationFactorSettingEndpointRestrictionResult',
    'GetDomainsAuthenticationFactorSettingIdcsCreatedByResult',
    'GetDomainsAuthenticationFactorSettingIdcsLastModifiedByResult',
    'GetDomainsAuthenticationFactorSettingIdentityStoreSettingResult',
    'GetDomainsAuthenticationFactorSettingMetaResult',
    'GetDomainsAuthenticationFactorSettingNotificationSettingResult',
    'GetDomainsAuthenticationFactorSettingTagResult',
    'GetDomainsAuthenticationFactorSettingThirdPartyFactorResult',
    'GetDomainsAuthenticationFactorSettingTotpSettingResult',
    'GetDomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionfidoAuthenticationFactorSettingResult',
    'GetDomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettingResult',
    'GetDomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettingDuoSecuritySettingResult',
    'GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingResult',
    'GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingBypassCodeSettingResult',
    'GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingClientAppSettingResult',
    'GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingCompliancePolicyResult',
    'GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingEmailSettingResult',
    'GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingEndpointRestrictionResult',
    'GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingIdcsCreatedByResult',
    'GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingIdcsLastModifiedByResult',
    'GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingIdentityStoreSettingResult',
    'GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingMetaResult',
    'GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingNotificationSettingResult',
    'GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingTagResult',
    'GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingThirdPartyFactorResult',
    'GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingTotpSettingResult',
    'GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionfidoAuthenticationFactorSettingResult',
    'GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettingResult',
    'GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettingDuoSecuritySettingResult',
    'GetDomainsCustomerSecretKeyIdcsCreatedByResult',
    'GetDomainsCustomerSecretKeyIdcsLastModifiedByResult',
    'GetDomainsCustomerSecretKeyMetaResult',
    'GetDomainsCustomerSecretKeyTagResult',
    'GetDomainsCustomerSecretKeyUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult',
    'GetDomainsCustomerSecretKeyUserResult',
    'GetDomainsCustomerSecretKeysCustomerSecretKeyResult',
    'GetDomainsCustomerSecretKeysCustomerSecretKeyIdcsCreatedByResult',
    'GetDomainsCustomerSecretKeysCustomerSecretKeyIdcsLastModifiedByResult',
    'GetDomainsCustomerSecretKeysCustomerSecretKeyMetaResult',
    'GetDomainsCustomerSecretKeysCustomerSecretKeyTagResult',
    'GetDomainsCustomerSecretKeysCustomerSecretKeyUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult',
    'GetDomainsCustomerSecretKeysCustomerSecretKeyUserResult',
    'GetDomainsDomainResult',
    'GetDomainsDomainReplicaRegionResult',
    'GetDomainsDynamicResourceGroupDynamicGroupAppRoleResult',
    'GetDomainsDynamicResourceGroupGrantResult',
    'GetDomainsDynamicResourceGroupIdcsCreatedByResult',
    'GetDomainsDynamicResourceGroupIdcsLastModifiedByResult',
    'GetDomainsDynamicResourceGroupMetaResult',
    'GetDomainsDynamicResourceGroupTagResult',
    'GetDomainsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagResult',
    'GetDomainsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTagResult',
    'GetDomainsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTagResult',
    'GetDomainsDynamicResourceGroupsDynamicResourceGroupResult',
    'GetDomainsDynamicResourceGroupsDynamicResourceGroupDynamicGroupAppRoleResult',
    'GetDomainsDynamicResourceGroupsDynamicResourceGroupGrantResult',
    'GetDomainsDynamicResourceGroupsDynamicResourceGroupIdcsCreatedByResult',
    'GetDomainsDynamicResourceGroupsDynamicResourceGroupIdcsLastModifiedByResult',
    'GetDomainsDynamicResourceGroupsDynamicResourceGroupMetaResult',
    'GetDomainsDynamicResourceGroupsDynamicResourceGroupTagResult',
    'GetDomainsDynamicResourceGroupsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagResult',
    'GetDomainsDynamicResourceGroupsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTagResult',
    'GetDomainsDynamicResourceGroupsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTagResult',
    'GetDomainsFilterResult',
    'GetDomainsGroupIdcsCreatedByResult',
    'GetDomainsGroupIdcsLastModifiedByResult',
    'GetDomainsGroupMemberResult',
    'GetDomainsGroupMetaResult',
    'GetDomainsGroupTagResult',
    'GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagResult',
    'GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTagResult',
    'GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTagResult',
    'GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupResult',
    'GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupDomainLevelSchemaNameResult',
    'GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupInstanceLevelSchemaNameResult',
    'GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiondynamicGroupResult',
    'GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupResult',
    'GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupAppRoleResult',
    'GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupGrantResult',
    'GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupOwnerResult',
    'GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupPasswordPolicyResult',
    'GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupSyncedFromAppResult',
    'GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensionposixGroupResult',
    'GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensionrequestableGroupResult',
    'GetDomainsGroupsGroupResult',
    'GetDomainsGroupsGroupIdcsCreatedByResult',
    'GetDomainsGroupsGroupIdcsLastModifiedByResult',
    'GetDomainsGroupsGroupMemberResult',
    'GetDomainsGroupsGroupMetaResult',
    'GetDomainsGroupsGroupTagResult',
    'GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagResult',
    'GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTagResult',
    'GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTagResult',
    'GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupResult',
    'GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupDomainLevelSchemaNameResult',
    'GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupInstanceLevelSchemaNameResult',
    'GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiondynamicGroupResult',
    'GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupResult',
    'GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupAppRoleResult',
    'GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupGrantResult',
    'GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupOwnerResult',
    'GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupPasswordPolicyResult',
    'GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupSyncedFromAppResult',
    'GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensionposixGroupResult',
    'GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensionrequestableGroupResult',
    'GetDomainsIdentityProviderCorrelationPolicyResult',
    'GetDomainsIdentityProviderIdcsCreatedByResult',
    'GetDomainsIdentityProviderIdcsLastModifiedByResult',
    'GetDomainsIdentityProviderJitUserProvAssignedGroupResult',
    'GetDomainsIdentityProviderJitUserProvAttributeResult',
    'GetDomainsIdentityProviderJitUserProvGroupMappingResult',
    'GetDomainsIdentityProviderMetaResult',
    'GetDomainsIdentityProviderTagResult',
    'GetDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProviderResult',
    'GetDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionx509identityProviderResult',
    'GetDomainsIdentityProvidersIdentityProviderResult',
    'GetDomainsIdentityProvidersIdentityProviderCorrelationPolicyResult',
    'GetDomainsIdentityProvidersIdentityProviderIdcsCreatedByResult',
    'GetDomainsIdentityProvidersIdentityProviderIdcsLastModifiedByResult',
    'GetDomainsIdentityProvidersIdentityProviderJitUserProvAssignedGroupResult',
    'GetDomainsIdentityProvidersIdentityProviderJitUserProvAttributeResult',
    'GetDomainsIdentityProvidersIdentityProviderJitUserProvGroupMappingResult',
    'GetDomainsIdentityProvidersIdentityProviderMetaResult',
    'GetDomainsIdentityProvidersIdentityProviderTagResult',
    'GetDomainsIdentityProvidersIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProviderResult',
    'GetDomainsIdentityProvidersIdentityProviderUrnietfparamsscimschemasoracleidcsextensionx509identityProviderResult',
    'GetDomainsKmsiSettingIdcsCreatedByResult',
    'GetDomainsKmsiSettingIdcsLastModifiedByResult',
    'GetDomainsKmsiSettingMetaResult',
    'GetDomainsKmsiSettingTagResult',
    'GetDomainsKmsiSettingsKmsiSettingResult',
    'GetDomainsKmsiSettingsKmsiSettingIdcsCreatedByResult',
    'GetDomainsKmsiSettingsKmsiSettingIdcsLastModifiedByResult',
    'GetDomainsKmsiSettingsKmsiSettingMetaResult',
    'GetDomainsKmsiSettingsKmsiSettingTagResult',
    'GetDomainsMyApiKeyIdcsCreatedByResult',
    'GetDomainsMyApiKeyIdcsLastModifiedByResult',
    'GetDomainsMyApiKeyMetaResult',
    'GetDomainsMyApiKeyTagResult',
    'GetDomainsMyApiKeyUserResult',
    'GetDomainsMyApiKeysMyApiKeyResult',
    'GetDomainsMyApiKeysMyApiKeyIdcsCreatedByResult',
    'GetDomainsMyApiKeysMyApiKeyIdcsLastModifiedByResult',
    'GetDomainsMyApiKeysMyApiKeyMetaResult',
    'GetDomainsMyApiKeysMyApiKeyTagResult',
    'GetDomainsMyApiKeysMyApiKeyUserResult',
    'GetDomainsMyAuthTokenIdcsCreatedByResult',
    'GetDomainsMyAuthTokenIdcsLastModifiedByResult',
    'GetDomainsMyAuthTokenMetaResult',
    'GetDomainsMyAuthTokenTagResult',
    'GetDomainsMyAuthTokenUserResult',
    'GetDomainsMyAuthTokensMyAuthTokenResult',
    'GetDomainsMyAuthTokensMyAuthTokenIdcsCreatedByResult',
    'GetDomainsMyAuthTokensMyAuthTokenIdcsLastModifiedByResult',
    'GetDomainsMyAuthTokensMyAuthTokenMetaResult',
    'GetDomainsMyAuthTokensMyAuthTokenTagResult',
    'GetDomainsMyAuthTokensMyAuthTokenUserResult',
    'GetDomainsMyCustomerSecretKeyIdcsCreatedByResult',
    'GetDomainsMyCustomerSecretKeyIdcsLastModifiedByResult',
    'GetDomainsMyCustomerSecretKeyMetaResult',
    'GetDomainsMyCustomerSecretKeyTagResult',
    'GetDomainsMyCustomerSecretKeyUserResult',
    'GetDomainsMyCustomerSecretKeysMyCustomerSecretKeyResult',
    'GetDomainsMyCustomerSecretKeysMyCustomerSecretKeyIdcsCreatedByResult',
    'GetDomainsMyCustomerSecretKeysMyCustomerSecretKeyIdcsLastModifiedByResult',
    'GetDomainsMyCustomerSecretKeysMyCustomerSecretKeyMetaResult',
    'GetDomainsMyCustomerSecretKeysMyCustomerSecretKeyTagResult',
    'GetDomainsMyCustomerSecretKeysMyCustomerSecretKeyUserResult',
    'GetDomainsMyDeviceAdditionalAttributeResult',
    'GetDomainsMyDeviceAuthenticationFactorResult',
    'GetDomainsMyDeviceIdcsCreatedByResult',
    'GetDomainsMyDeviceIdcsLastModifiedByResult',
    'GetDomainsMyDeviceMetaResult',
    'GetDomainsMyDeviceNonComplianceResult',
    'GetDomainsMyDevicePushNotificationTargetResult',
    'GetDomainsMyDeviceTagResult',
    'GetDomainsMyDeviceThirdPartyFactorResult',
    'GetDomainsMyDeviceUserResult',
    'GetDomainsMyDevicesMyDeviceResult',
    'GetDomainsMyDevicesMyDeviceAdditionalAttributeResult',
    'GetDomainsMyDevicesMyDeviceAuthenticationFactorResult',
    'GetDomainsMyDevicesMyDeviceIdcsCreatedByResult',
    'GetDomainsMyDevicesMyDeviceIdcsLastModifiedByResult',
    'GetDomainsMyDevicesMyDeviceMetaResult',
    'GetDomainsMyDevicesMyDeviceNonComplianceResult',
    'GetDomainsMyDevicesMyDevicePushNotificationTargetResult',
    'GetDomainsMyDevicesMyDeviceTagResult',
    'GetDomainsMyDevicesMyDeviceThirdPartyFactorResult',
    'GetDomainsMyDevicesMyDeviceUserResult',
    'GetDomainsMyGroupsMyGroupResult',
    'GetDomainsMyGroupsMyGroupIdcsCreatedByResult',
    'GetDomainsMyGroupsMyGroupIdcsLastModifiedByResult',
    'GetDomainsMyGroupsMyGroupMemberResult',
    'GetDomainsMyGroupsMyGroupMetaResult',
    'GetDomainsMyGroupsMyGroupTagResult',
    'GetDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupResult',
    'GetDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupAppRoleResult',
    'GetDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupGrantResult',
    'GetDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupOwnerResult',
    'GetDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupPasswordPolicyResult',
    'GetDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupSyncedFromAppResult',
    'GetDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensionposixGroupResult',
    'GetDomainsMyOauth2clientCredentialIdcsCreatedByResult',
    'GetDomainsMyOauth2clientCredentialIdcsLastModifiedByResult',
    'GetDomainsMyOauth2clientCredentialMetaResult',
    'GetDomainsMyOauth2clientCredentialScopeResult',
    'GetDomainsMyOauth2clientCredentialTagResult',
    'GetDomainsMyOauth2clientCredentialUserResult',
    'GetDomainsMyOauth2clientCredentialsMyOauth2clientCredentialResult',
    'GetDomainsMyOauth2clientCredentialsMyOauth2clientCredentialIdcsCreatedByResult',
    'GetDomainsMyOauth2clientCredentialsMyOauth2clientCredentialIdcsLastModifiedByResult',
    'GetDomainsMyOauth2clientCredentialsMyOauth2clientCredentialMetaResult',
    'GetDomainsMyOauth2clientCredentialsMyOauth2clientCredentialScopeResult',
    'GetDomainsMyOauth2clientCredentialsMyOauth2clientCredentialTagResult',
    'GetDomainsMyOauth2clientCredentialsMyOauth2clientCredentialUserResult',
    'GetDomainsMySmtpCredentialIdcsCreatedByResult',
    'GetDomainsMySmtpCredentialIdcsLastModifiedByResult',
    'GetDomainsMySmtpCredentialMetaResult',
    'GetDomainsMySmtpCredentialTagResult',
    'GetDomainsMySmtpCredentialUserResult',
    'GetDomainsMySmtpCredentialsMySmtpCredentialResult',
    'GetDomainsMySmtpCredentialsMySmtpCredentialIdcsCreatedByResult',
    'GetDomainsMySmtpCredentialsMySmtpCredentialIdcsLastModifiedByResult',
    'GetDomainsMySmtpCredentialsMySmtpCredentialMetaResult',
    'GetDomainsMySmtpCredentialsMySmtpCredentialTagResult',
    'GetDomainsMySmtpCredentialsMySmtpCredentialUserResult',
    'GetDomainsMySupportAccountIdcsCreatedByResult',
    'GetDomainsMySupportAccountIdcsLastModifiedByResult',
    'GetDomainsMySupportAccountMetaResult',
    'GetDomainsMySupportAccountTagResult',
    'GetDomainsMySupportAccountUserResult',
    'GetDomainsMySupportAccountsMySupportAccountResult',
    'GetDomainsMySupportAccountsMySupportAccountIdcsCreatedByResult',
    'GetDomainsMySupportAccountsMySupportAccountIdcsLastModifiedByResult',
    'GetDomainsMySupportAccountsMySupportAccountMetaResult',
    'GetDomainsMySupportAccountsMySupportAccountTagResult',
    'GetDomainsMySupportAccountsMySupportAccountUserResult',
    'GetDomainsMyTrustedUserAgentIdcsCreatedByResult',
    'GetDomainsMyTrustedUserAgentIdcsLastModifiedByResult',
    'GetDomainsMyTrustedUserAgentMetaResult',
    'GetDomainsMyTrustedUserAgentTagResult',
    'GetDomainsMyTrustedUserAgentTrustedFactorResult',
    'GetDomainsMyTrustedUserAgentUserResult',
    'GetDomainsMyTrustedUserAgentsMyTrustedUserAgentResult',
    'GetDomainsMyTrustedUserAgentsMyTrustedUserAgentIdcsCreatedByResult',
    'GetDomainsMyTrustedUserAgentsMyTrustedUserAgentIdcsLastModifiedByResult',
    'GetDomainsMyTrustedUserAgentsMyTrustedUserAgentMetaResult',
    'GetDomainsMyTrustedUserAgentsMyTrustedUserAgentTagResult',
    'GetDomainsMyTrustedUserAgentsMyTrustedUserAgentTrustedFactorResult',
    'GetDomainsMyTrustedUserAgentsMyTrustedUserAgentUserResult',
    'GetDomainsMyUserDbCredentialIdcsCreatedByResult',
    'GetDomainsMyUserDbCredentialIdcsLastModifiedByResult',
    'GetDomainsMyUserDbCredentialMetaResult',
    'GetDomainsMyUserDbCredentialTagResult',
    'GetDomainsMyUserDbCredentialUserResult',
    'GetDomainsMyUserDbCredentialsMyUserDbCredentialResult',
    'GetDomainsMyUserDbCredentialsMyUserDbCredentialIdcsCreatedByResult',
    'GetDomainsMyUserDbCredentialsMyUserDbCredentialIdcsLastModifiedByResult',
    'GetDomainsMyUserDbCredentialsMyUserDbCredentialMetaResult',
    'GetDomainsMyUserDbCredentialsMyUserDbCredentialTagResult',
    'GetDomainsMyUserDbCredentialsMyUserDbCredentialUserResult',
    'GetDomainsOauth2clientCredentialIdcsCreatedByResult',
    'GetDomainsOauth2clientCredentialIdcsLastModifiedByResult',
    'GetDomainsOauth2clientCredentialMetaResult',
    'GetDomainsOauth2clientCredentialScopeResult',
    'GetDomainsOauth2clientCredentialTagResult',
    'GetDomainsOauth2clientCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult',
    'GetDomainsOauth2clientCredentialUserResult',
    'GetDomainsOauth2clientCredentialsOauth2clientCredentialResult',
    'GetDomainsOauth2clientCredentialsOauth2clientCredentialIdcsCreatedByResult',
    'GetDomainsOauth2clientCredentialsOauth2clientCredentialIdcsLastModifiedByResult',
    'GetDomainsOauth2clientCredentialsOauth2clientCredentialMetaResult',
    'GetDomainsOauth2clientCredentialsOauth2clientCredentialScopeResult',
    'GetDomainsOauth2clientCredentialsOauth2clientCredentialTagResult',
    'GetDomainsOauth2clientCredentialsOauth2clientCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult',
    'GetDomainsOauth2clientCredentialsOauth2clientCredentialUserResult',
    'GetDomainsPasswordPoliciesPasswordPolicyResult',
    'GetDomainsPasswordPoliciesPasswordPolicyConfiguredPasswordPolicyRuleResult',
    'GetDomainsPasswordPoliciesPasswordPolicyGroupResult',
    'GetDomainsPasswordPoliciesPasswordPolicyIdcsCreatedByResult',
    'GetDomainsPasswordPoliciesPasswordPolicyIdcsLastModifiedByResult',
    'GetDomainsPasswordPoliciesPasswordPolicyMetaResult',
    'GetDomainsPasswordPoliciesPasswordPolicyTagResult',
    'GetDomainsPasswordPolicyConfiguredPasswordPolicyRuleResult',
    'GetDomainsPasswordPolicyGroupResult',
    'GetDomainsPasswordPolicyIdcsCreatedByResult',
    'GetDomainsPasswordPolicyIdcsLastModifiedByResult',
    'GetDomainsPasswordPolicyMetaResult',
    'GetDomainsPasswordPolicyTagResult',
    'GetDomainsSmtpCredentialIdcsCreatedByResult',
    'GetDomainsSmtpCredentialIdcsLastModifiedByResult',
    'GetDomainsSmtpCredentialMetaResult',
    'GetDomainsSmtpCredentialTagResult',
    'GetDomainsSmtpCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult',
    'GetDomainsSmtpCredentialUserResult',
    'GetDomainsSmtpCredentialsSmtpCredentialResult',
    'GetDomainsSmtpCredentialsSmtpCredentialIdcsCreatedByResult',
    'GetDomainsSmtpCredentialsSmtpCredentialIdcsLastModifiedByResult',
    'GetDomainsSmtpCredentialsSmtpCredentialMetaResult',
    'GetDomainsSmtpCredentialsSmtpCredentialTagResult',
    'GetDomainsSmtpCredentialsSmtpCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult',
    'GetDomainsSmtpCredentialsSmtpCredentialUserResult',
    'GetDomainsUserAddressResult',
    'GetDomainsUserDbCredentialIdcsCreatedByResult',
    'GetDomainsUserDbCredentialIdcsLastModifiedByResult',
    'GetDomainsUserDbCredentialMetaResult',
    'GetDomainsUserDbCredentialTagResult',
    'GetDomainsUserDbCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult',
    'GetDomainsUserDbCredentialUserResult',
    'GetDomainsUserDbCredentialsUserDbCredentialResult',
    'GetDomainsUserDbCredentialsUserDbCredentialIdcsCreatedByResult',
    'GetDomainsUserDbCredentialsUserDbCredentialIdcsLastModifiedByResult',
    'GetDomainsUserDbCredentialsUserDbCredentialMetaResult',
    'GetDomainsUserDbCredentialsUserDbCredentialTagResult',
    'GetDomainsUserDbCredentialsUserDbCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult',
    'GetDomainsUserDbCredentialsUserDbCredentialUserResult',
    'GetDomainsUserEmailResult',
    'GetDomainsUserEntitlementResult',
    'GetDomainsUserGroupResult',
    'GetDomainsUserIdcsCreatedByResult',
    'GetDomainsUserIdcsLastModifiedByResult',
    'GetDomainsUserImResult',
    'GetDomainsUserMetaResult',
    'GetDomainsUserNameResult',
    'GetDomainsUserPhoneNumberResult',
    'GetDomainsUserPhotoResult',
    'GetDomainsUserRoleResult',
    'GetDomainsUserTagResult',
    'GetDomainsUserUrnietfparamsscimschemasextensionenterprise20userResult',
    'GetDomainsUserUrnietfparamsscimschemasextensionenterprise20userManagerResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionOciTagResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTagResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTagResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionadaptiveUserResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionadaptiveUserRiskScoreResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensioncapabilitiesUserResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensiondbCredentialsUserResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensiondbUserUserResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensiondbUserUserPasswordVerifierResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionkerberosUserUserResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionkerberosUserUserRealmUserResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserBypassCodeResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserDeviceResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserPreferredDeviceResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserTrustedUserAgentResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserApplicablePasswordPolicyResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordlessUserResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordlessUserFactorIdentifierResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionposixUserResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUserResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUserSecQuestionResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionselfRegistrationUserResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionselfRegistrationUserSelfRegistrationProfileResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionsffUserResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionsocialAccountUserResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionsocialAccountUserSocialAccountResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensiontermsOfUseUserResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensiontermsOfUseUserTermsOfUseConsentResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserApiKeyResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserAuthTokenResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserCustomerSecretKeyResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserDbCredentialResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserOAuth2clientCredentialResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserSmtpCredentialResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLockedResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserRecoveryLockedResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAccountResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAppRoleResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserApplicableAuthenticationTargetAppResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserDelegatedAuthenticationTargetAppResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserGrantResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserIdcsAppRolesLimitedToGroupResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserSupportAccountResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserSyncedFromAppResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserUserTokenResult',
    'GetDomainsUserX509certificateResult',
    'GetDomainsUsersUserResult',
    'GetDomainsUsersUserAddressResult',
    'GetDomainsUsersUserEmailResult',
    'GetDomainsUsersUserEntitlementResult',
    'GetDomainsUsersUserGroupResult',
    'GetDomainsUsersUserIdcsCreatedByResult',
    'GetDomainsUsersUserIdcsLastModifiedByResult',
    'GetDomainsUsersUserImResult',
    'GetDomainsUsersUserMetaResult',
    'GetDomainsUsersUserNameResult',
    'GetDomainsUsersUserPhoneNumberResult',
    'GetDomainsUsersUserPhotoResult',
    'GetDomainsUsersUserRoleResult',
    'GetDomainsUsersUserTagResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasextensionenterprise20userResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasextensionenterprise20userManagerResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionOciTagResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTagResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTagResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionadaptiveUserResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionadaptiveUserRiskScoreResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensioncapabilitiesUserResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensiondbCredentialsUserResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensiondbUserUserResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensiondbUserUserPasswordVerifierResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionkerberosUserUserResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionkerberosUserUserRealmUserResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserBypassCodeResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserDeviceResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserPreferredDeviceResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserTrustedUserAgentResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserApplicablePasswordPolicyResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionpasswordlessUserResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionpasswordlessUserFactorIdentifierResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionposixUserResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUserResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUserSecQuestionResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionselfRegistrationUserResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionselfRegistrationUserSelfRegistrationProfileResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionsffUserResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionsocialAccountUserResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionsocialAccountUserSocialAccountResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensiontermsOfUseUserResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensiontermsOfUseUserTermsOfUseConsentResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserApiKeyResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserAuthTokenResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserCustomerSecretKeyResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserDbCredentialResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserOAuth2clientCredentialResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserSmtpCredentialResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLockedResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserRecoveryLockedResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserAccountResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserAppRoleResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserApplicableAuthenticationTargetAppResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserDelegatedAuthenticationTargetAppResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserGrantResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserIdcsAppRolesLimitedToGroupResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserSupportAccountResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserSyncedFromAppResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserUserTokenResult',
    'GetDomainsUsersUserX509certificateResult',
    'GetDynamicGroupsDynamicGroupResult',
    'GetDynamicGroupsFilterResult',
    'GetFaultDomainsFaultDomainResult',
    'GetFaultDomainsFilterResult',
    'GetGroupsFilterResult',
    'GetGroupsGroupResult',
    'GetIamWorkRequestErrorsFilterResult',
    'GetIamWorkRequestErrorsIamWorkRequestErrorResult',
    'GetIamWorkRequestLogsFilterResult',
    'GetIamWorkRequestLogsIamWorkRequestLogResult',
    'GetIamWorkRequestResourceResult',
    'GetIamWorkRequestsFilterResult',
    'GetIamWorkRequestsIamWorkRequestResult',
    'GetIamWorkRequestsIamWorkRequestResourceResult',
    'GetIdentityProviderGroupsFilterResult',
    'GetIdentityProviderGroupsIdentityProviderGroupResult',
    'GetIdentityProvidersFilterResult',
    'GetIdentityProvidersIdentityProviderResult',
    'GetIdpGroupMappingsFilterResult',
    'GetIdpGroupMappingsIdpGroupMappingResult',
    'GetNetworkSourceVirtualSourceListResult',
    'GetNetworkSourcesFilterResult',
    'GetNetworkSourcesNetworkSourceResult',
    'GetNetworkSourcesNetworkSourceVirtualSourceListResult',
    'GetPoliciesFilterResult',
    'GetPoliciesPolicyResult',
    'GetRegionSubscriptionsFilterResult',
    'GetRegionSubscriptionsRegionSubscriptionResult',
    'GetRegionsFilterResult',
    'GetRegionsRegionResult',
    'GetSmtpCredentialsFilterResult',
    'GetSmtpCredentialsSmtpCredentialResult',
    'GetSwiftPasswordsFilterResult',
    'GetSwiftPasswordsPasswordResult',
    'GetTagDefaultsFilterResult',
    'GetTagDefaultsTagDefaultResult',
    'GetTagNamespacesFilterResult',
    'GetTagNamespacesTagNamespaceResult',
    'GetTagStandardTagNamespaceTemplateTagDefinitionTemplateResult',
    'GetTagStandardTagNamespaceTemplatesFilterResult',
    'GetTagStandardTagNamespaceTemplatesStandardTagNamespaceTemplateResult',
    'GetTagValidatorResult',
    'GetTagsFilterResult',
    'GetTagsTagResult',
    'GetTagsTagValidatorResult',
    'GetUserCapabilityResult',
    'GetUserGroupMembershipsFilterResult',
    'GetUserGroupMembershipsMembershipResult',
    'GetUsersFilterResult',
    'GetUsersUserResult',
    'GetUsersUserCapabilityResult',
]

@pulumi.output_type
class AuthenticationPolicyNetworkPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkSourceIds":
            suggest = "network_source_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AuthenticationPolicyNetworkPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AuthenticationPolicyNetworkPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AuthenticationPolicyNetworkPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 network_source_ids: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] network_source_ids: (Updatable) Network Source ids
        """
        if network_source_ids is not None:
            pulumi.set(__self__, "network_source_ids", network_source_ids)

    @property
    @pulumi.getter(name="networkSourceIds")
    def network_source_ids(self) -> Optional[Sequence[str]]:
        """
        (Updatable) Network Source ids
        """
        return pulumi.get(self, "network_source_ids")


@pulumi.output_type
class AuthenticationPolicyPasswordPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isLowercaseCharactersRequired":
            suggest = "is_lowercase_characters_required"
        elif key == "isNumericCharactersRequired":
            suggest = "is_numeric_characters_required"
        elif key == "isSpecialCharactersRequired":
            suggest = "is_special_characters_required"
        elif key == "isUppercaseCharactersRequired":
            suggest = "is_uppercase_characters_required"
        elif key == "isUsernameContainmentAllowed":
            suggest = "is_username_containment_allowed"
        elif key == "minimumPasswordLength":
            suggest = "minimum_password_length"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AuthenticationPolicyPasswordPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AuthenticationPolicyPasswordPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AuthenticationPolicyPasswordPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_lowercase_characters_required: Optional[bool] = None,
                 is_numeric_characters_required: Optional[bool] = None,
                 is_special_characters_required: Optional[bool] = None,
                 is_uppercase_characters_required: Optional[bool] = None,
                 is_username_containment_allowed: Optional[bool] = None,
                 minimum_password_length: Optional[int] = None):
        """
        :param bool is_lowercase_characters_required: (Updatable) At least one lower case character required.
        :param bool is_numeric_characters_required: (Updatable) At least one numeric character required.
        :param bool is_special_characters_required: (Updatable) At least one special character required.
        :param bool is_uppercase_characters_required: (Updatable) At least one uppercase character required.
        :param bool is_username_containment_allowed: (Updatable) User name is allowed to be part of the password.
        :param int minimum_password_length: (Updatable) Minimum password length required.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        if is_lowercase_characters_required is not None:
            pulumi.set(__self__, "is_lowercase_characters_required", is_lowercase_characters_required)
        if is_numeric_characters_required is not None:
            pulumi.set(__self__, "is_numeric_characters_required", is_numeric_characters_required)
        if is_special_characters_required is not None:
            pulumi.set(__self__, "is_special_characters_required", is_special_characters_required)
        if is_uppercase_characters_required is not None:
            pulumi.set(__self__, "is_uppercase_characters_required", is_uppercase_characters_required)
        if is_username_containment_allowed is not None:
            pulumi.set(__self__, "is_username_containment_allowed", is_username_containment_allowed)
        if minimum_password_length is not None:
            pulumi.set(__self__, "minimum_password_length", minimum_password_length)

    @property
    @pulumi.getter(name="isLowercaseCharactersRequired")
    def is_lowercase_characters_required(self) -> Optional[bool]:
        """
        (Updatable) At least one lower case character required.
        """
        return pulumi.get(self, "is_lowercase_characters_required")

    @property
    @pulumi.getter(name="isNumericCharactersRequired")
    def is_numeric_characters_required(self) -> Optional[bool]:
        """
        (Updatable) At least one numeric character required.
        """
        return pulumi.get(self, "is_numeric_characters_required")

    @property
    @pulumi.getter(name="isSpecialCharactersRequired")
    def is_special_characters_required(self) -> Optional[bool]:
        """
        (Updatable) At least one special character required.
        """
        return pulumi.get(self, "is_special_characters_required")

    @property
    @pulumi.getter(name="isUppercaseCharactersRequired")
    def is_uppercase_characters_required(self) -> Optional[bool]:
        """
        (Updatable) At least one uppercase character required.
        """
        return pulumi.get(self, "is_uppercase_characters_required")

    @property
    @pulumi.getter(name="isUsernameContainmentAllowed")
    def is_username_containment_allowed(self) -> Optional[bool]:
        """
        (Updatable) User name is allowed to be part of the password.
        """
        return pulumi.get(self, "is_username_containment_allowed")

    @property
    @pulumi.getter(name="minimumPasswordLength")
    def minimum_password_length(self) -> Optional[int]:
        """
        (Updatable) Minimum password length required.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "minimum_password_length")


@pulumi.output_type
class DomainReplicaRegion(dict):
    def __init__(__self__, *,
                 region: Optional[str] = None,
                 state: Optional[str] = None,
                 url: Optional[str] = None):
        """
        :param str region: A REPLICATION_ENABLED region, e.g. us-ashburn-1. See [Regions and Availability Domains](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/regions.htm) for the full list of supported region names.
        :param str state: The current state.
        :param str url: Region agnostic domain URL.
        """
        if region is not None:
            pulumi.set(__self__, "region", region)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        A REPLICATION_ENABLED region, e.g. us-ashburn-1. See [Regions and Availability Domains](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/regions.htm) for the full list of supported region names.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        The current state.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        Region agnostic domain URL.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class DomainsApiKeyIdcsCreatedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str value: User's id
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param str display: (Updatable) User display name
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ocid: User's ocid
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) The URI that corresponds to the user linked to this credential
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param str type: The type of resource, User or App, that modified this Resource
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        """
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) User display name

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        """
        User's ocid

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) The URI that corresponds to the user linked to this credential

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of resource, User or App, that modified this Resource

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsApiKeyIdcsLastModifiedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str value: User's id
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param str display: (Updatable) User display name
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ocid: User's ocid
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) The URI that corresponds to the user linked to this credential
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param str type: The type of resource, User or App, that modified this Resource
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        """
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) User display name

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        """
        User's ocid

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) The URI that corresponds to the user linked to this credential

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of resource, User or App, that modified this Resource

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsApiKeyMeta(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastModified":
            suggest = "last_modified"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsApiKeyMeta. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsApiKeyMeta.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsApiKeyMeta.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param str created: The DateTime the Resource was added to the Service Provider
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: dateTime
               * uniqueness: none
        :param str last_modified: The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: dateTime
               * uniqueness: none
        :param str location: The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str resource_type: Name of the resource type of the resource--for example, Users or Groups
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str version: The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        """
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        """
        The DateTime the Resource was added to the Service Provider

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: dateTime
        * uniqueness: none
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        """
        The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: dateTime
        * uniqueness: none
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        """
        The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        """
        Name of the resource type of the resource--for example, Users or Groups

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        The version of the Resource being returned. This value must be the same as the ETag HTTP response header.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class DomainsApiKeyTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Key or name of the tag.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        :param str value: User's id
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key or name of the tag.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsApiKeyUrnietfparamsscimschemasoracleidcsextensionselfChangeUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowSelfChange":
            suggest = "allow_self_change"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsApiKeyUrnietfparamsscimschemasoracleidcsextensionselfChangeUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsApiKeyUrnietfparamsscimschemasoracleidcsextensionselfChangeUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsApiKeyUrnietfparamsscimschemasoracleidcsextensionselfChangeUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_self_change: Optional[bool] = None):
        """
        :param bool allow_self_change: If true, allows requesting user to update themselves. If false, requesting user can't update themself (default).
               
               **Added In:** 2205182039
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: writeOnly
               * required: false
               * returned: never
               * type: boolean
               * uniqueness: none
        """
        if allow_self_change is not None:
            pulumi.set(__self__, "allow_self_change", allow_self_change)

    @property
    @pulumi.getter(name="allowSelfChange")
    def allow_self_change(self) -> Optional[bool]:
        """
        If true, allows requesting user to update themselves. If false, requesting user can't update themself (default).

        **Added In:** 2205182039

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: writeOnly
        * required: false
        * returned: never
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "allow_self_change")


@pulumi.output_type
class DomainsApiKeyUser(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str display: (Updatable) User display name
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str name: (Updatable) User name
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ocid: User's ocid
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) The URI that corresponds to the user linked to this credential
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param str value: User's id
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        if display is not None:
            pulumi.set(__self__, "display", display)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) User display name

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        (Updatable) User name

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        """
        User's ocid

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) The URI that corresponds to the user linked to this credential

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        User's id

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsAuthTokenIdcsCreatedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str value: User's id
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param str display: (Updatable) User display name
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ocid: User's ocid
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) The URI that corresponds to the user linked to this credential
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param str type: The type of resource, User or App, that modified this Resource
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        """
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) User display name

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        """
        User's ocid

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) The URI that corresponds to the user linked to this credential

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of resource, User or App, that modified this Resource

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsAuthTokenIdcsLastModifiedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str value: User's id
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param str display: (Updatable) User display name
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ocid: User's ocid
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) The URI that corresponds to the user linked to this credential
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param str type: The type of resource, User or App, that modified this Resource
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        """
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) User display name

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        """
        User's ocid

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) The URI that corresponds to the user linked to this credential

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of resource, User or App, that modified this Resource

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsAuthTokenMeta(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastModified":
            suggest = "last_modified"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsAuthTokenMeta. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsAuthTokenMeta.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsAuthTokenMeta.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param str created: The DateTime the Resource was added to the Service Provider
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: dateTime
               * uniqueness: none
        :param str last_modified: The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: dateTime
               * uniqueness: none
        :param str location: The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str resource_type: Name of the resource type of the resource--for example, Users or Groups
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str version: The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        """
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        """
        The DateTime the Resource was added to the Service Provider

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: dateTime
        * uniqueness: none
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        """
        The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: dateTime
        * uniqueness: none
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        """
        The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        """
        Name of the resource type of the resource--for example, Users or Groups

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        The version of the Resource being returned. This value must be the same as the ETag HTTP response header.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class DomainsAuthTokenTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Key or name of the tag.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        :param str value: User's id
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key or name of the tag.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsAuthTokenUrnietfparamsscimschemasoracleidcsextensionselfChangeUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowSelfChange":
            suggest = "allow_self_change"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsAuthTokenUrnietfparamsscimschemasoracleidcsextensionselfChangeUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsAuthTokenUrnietfparamsscimschemasoracleidcsextensionselfChangeUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsAuthTokenUrnietfparamsscimschemasoracleidcsextensionselfChangeUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_self_change: Optional[bool] = None):
        """
        :param bool allow_self_change: If true, allows requesting user to update themselves. If false, requesting user can't update themself (default).
               
               **Added In:** 2205182039
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: writeOnly
               * required: false
               * returned: never
               * type: boolean
               * uniqueness: none
        """
        if allow_self_change is not None:
            pulumi.set(__self__, "allow_self_change", allow_self_change)

    @property
    @pulumi.getter(name="allowSelfChange")
    def allow_self_change(self) -> Optional[bool]:
        """
        If true, allows requesting user to update themselves. If false, requesting user can't update themself (default).

        **Added In:** 2205182039

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: writeOnly
        * required: false
        * returned: never
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "allow_self_change")


@pulumi.output_type
class DomainsAuthTokenUser(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str display: (Updatable) User display name
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str name: (Updatable) User name
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ocid: User's ocid
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) The URI that corresponds to the user linked to this credential
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param str value: User's id
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        if display is not None:
            pulumi.set(__self__, "display", display)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) User display name

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        (Updatable) User name

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        """
        User's ocid

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) The URI that corresponds to the user linked to this credential

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        User's id

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsAuthenticationFactorSettingBypassCodeSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "helpDeskCodeExpiryInMins":
            suggest = "help_desk_code_expiry_in_mins"
        elif key == "helpDeskGenerationEnabled":
            suggest = "help_desk_generation_enabled"
        elif key == "helpDeskMaxUsage":
            suggest = "help_desk_max_usage"
        elif key == "maxActive":
            suggest = "max_active"
        elif key == "selfServiceGenerationEnabled":
            suggest = "self_service_generation_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsAuthenticationFactorSettingBypassCodeSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsAuthenticationFactorSettingBypassCodeSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsAuthenticationFactorSettingBypassCodeSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 help_desk_code_expiry_in_mins: int,
                 help_desk_generation_enabled: bool,
                 help_desk_max_usage: int,
                 length: int,
                 max_active: int,
                 self_service_generation_enabled: bool):
        """
        :param int help_desk_code_expiry_in_mins: (Updatable) Expiry (in minutes) of any bypass code that is generated by the help desk
               
               **SCIM++ Properties:**
               * idcsMaxValue: 9999999
               * idcsMinValue: 1
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: integer
               * uniqueness: none
        :param bool help_desk_generation_enabled: (Updatable) If true, indicates that help desk bypass code generation is enabled
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: boolean
               * uniqueness: none
        :param int help_desk_max_usage: (Updatable) The maximum number of times that any bypass code that is generated by the help desk can be used
               
               **SCIM++ Properties:**
               * idcsMaxValue: 999
               * idcsMinValue: 1
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: integer
               * uniqueness: none
        :param int length: (Updatable) Exact length of the bypass code to be generated
               
               **SCIM++ Properties:**
               * idcsMaxValue: 20
               * idcsMinValue: 8
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: integer
               * uniqueness: none
        :param int max_active: (Updatable) The maximum number of bypass codes that can be issued to any user
               
               **SCIM++ Properties:**
               * idcsMaxValue: 6
               * idcsMinValue: 1
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: integer
               * uniqueness: none
        :param bool self_service_generation_enabled: (Updatable) If true, indicates that self-service bypass code generation is enabled
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: boolean
               * uniqueness: none
        """
        pulumi.set(__self__, "help_desk_code_expiry_in_mins", help_desk_code_expiry_in_mins)
        pulumi.set(__self__, "help_desk_generation_enabled", help_desk_generation_enabled)
        pulumi.set(__self__, "help_desk_max_usage", help_desk_max_usage)
        pulumi.set(__self__, "length", length)
        pulumi.set(__self__, "max_active", max_active)
        pulumi.set(__self__, "self_service_generation_enabled", self_service_generation_enabled)

    @property
    @pulumi.getter(name="helpDeskCodeExpiryInMins")
    def help_desk_code_expiry_in_mins(self) -> int:
        """
        (Updatable) Expiry (in minutes) of any bypass code that is generated by the help desk

        **SCIM++ Properties:**
        * idcsMaxValue: 9999999
        * idcsMinValue: 1
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: integer
        * uniqueness: none
        """
        return pulumi.get(self, "help_desk_code_expiry_in_mins")

    @property
    @pulumi.getter(name="helpDeskGenerationEnabled")
    def help_desk_generation_enabled(self) -> bool:
        """
        (Updatable) If true, indicates that help desk bypass code generation is enabled

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "help_desk_generation_enabled")

    @property
    @pulumi.getter(name="helpDeskMaxUsage")
    def help_desk_max_usage(self) -> int:
        """
        (Updatable) The maximum number of times that any bypass code that is generated by the help desk can be used

        **SCIM++ Properties:**
        * idcsMaxValue: 999
        * idcsMinValue: 1
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: integer
        * uniqueness: none
        """
        return pulumi.get(self, "help_desk_max_usage")

    @property
    @pulumi.getter
    def length(self) -> int:
        """
        (Updatable) Exact length of the bypass code to be generated

        **SCIM++ Properties:**
        * idcsMaxValue: 20
        * idcsMinValue: 8
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: integer
        * uniqueness: none
        """
        return pulumi.get(self, "length")

    @property
    @pulumi.getter(name="maxActive")
    def max_active(self) -> int:
        """
        (Updatable) The maximum number of bypass codes that can be issued to any user

        **SCIM++ Properties:**
        * idcsMaxValue: 6
        * idcsMinValue: 1
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: integer
        * uniqueness: none
        """
        return pulumi.get(self, "max_active")

    @property
    @pulumi.getter(name="selfServiceGenerationEnabled")
    def self_service_generation_enabled(self) -> bool:
        """
        (Updatable) If true, indicates that self-service bypass code generation is enabled

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "self_service_generation_enabled")


@pulumi.output_type
class DomainsAuthenticationFactorSettingClientAppSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deviceProtectionPolicy":
            suggest = "device_protection_policy"
        elif key == "initialLockoutPeriodInSecs":
            suggest = "initial_lockout_period_in_secs"
        elif key == "keyPairLength":
            suggest = "key_pair_length"
        elif key == "lockoutEscalationPattern":
            suggest = "lockout_escalation_pattern"
        elif key == "maxFailuresBeforeLockout":
            suggest = "max_failures_before_lockout"
        elif key == "maxFailuresBeforeWarning":
            suggest = "max_failures_before_warning"
        elif key == "maxLockoutIntervalInSecs":
            suggest = "max_lockout_interval_in_secs"
        elif key == "minPinLength":
            suggest = "min_pin_length"
        elif key == "policyUpdateFreqInDays":
            suggest = "policy_update_freq_in_days"
        elif key == "requestSigningAlgo":
            suggest = "request_signing_algo"
        elif key == "sharedSecretEncoding":
            suggest = "shared_secret_encoding"
        elif key == "unlockAppForEachRequestEnabled":
            suggest = "unlock_app_for_each_request_enabled"
        elif key == "unlockAppIntervalInSecs":
            suggest = "unlock_app_interval_in_secs"
        elif key == "unlockOnAppForegroundEnabled":
            suggest = "unlock_on_app_foreground_enabled"
        elif key == "unlockOnAppStartEnabled":
            suggest = "unlock_on_app_start_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsAuthenticationFactorSettingClientAppSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsAuthenticationFactorSettingClientAppSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsAuthenticationFactorSettingClientAppSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 device_protection_policy: str,
                 initial_lockout_period_in_secs: int,
                 key_pair_length: int,
                 lockout_escalation_pattern: str,
                 max_failures_before_lockout: int,
                 max_failures_before_warning: int,
                 max_lockout_interval_in_secs: int,
                 min_pin_length: int,
                 policy_update_freq_in_days: int,
                 request_signing_algo: str,
                 shared_secret_encoding: str,
                 unlock_app_for_each_request_enabled: bool,
                 unlock_app_interval_in_secs: int,
                 unlock_on_app_foreground_enabled: bool,
                 unlock_on_app_start_enabled: bool):
        """
        :param str device_protection_policy: (Updatable) Indicates what protection policy that the system applies on a device. By default, the value is NONE, which indicates that the system applies no protection policy. A value of APP_PIN indicates that the system requires a Personal Identification Number (PIN). A value of DEVICE_BIOMETRIC_OR_APP_PIN indicates that either a PIN or a biometric authentication factor is required.
               
               **SCIM++ Properties:**
               * idcsCanonicalValueSourceFilter: attrName eq "deviceProtectionPolicy" and attrValues.value eq "$(deviceProtectionPolicy)"
               * idcsCanonicalValueSourceResourceType: AllowedValue
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        :param int initial_lockout_period_in_secs: (Updatable) The period of time in seconds that the system will lock a user out of the service after that user exceeds the maximum number of login failures
               
               **SCIM++ Properties:**
               * idcsMaxValue: 86400
               * idcsMinValue: 30
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: integer
               * uniqueness: none
        :param int key_pair_length: (Updatable) The size of the key that the system uses to generate the public-private key pair
               
               **SCIM++ Properties:**
               * idcsMaxValue: 4000
               * idcsMinValue: 32
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: integer
               * uniqueness: none
        :param str lockout_escalation_pattern: (Updatable) The pattern of escalation that the system follows, in locking a particular user out of the service.
               
               **SCIM++ Properties:**
               * idcsCanonicalValueSourceFilter: attrName eq "lockoutEscalationPattern" and attrValues.value eq "$(lockoutEscalationPattern)"
               * idcsCanonicalValueSourceResourceType: AllowedValue
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        :param int max_failures_before_lockout: (Updatable) The maximum number of times that a particular user can fail to login before the system locks that user out of the service
               
               **SCIM++ Properties:**
               * idcsMaxValue: 10
               * idcsMinValue: 5
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: integer
               * uniqueness: none
        :param int max_failures_before_warning: (Updatable) The maximum number of login failures that the system will allow before raising a warning and sending an alert via email
               
               **SCIM++ Properties:**
               * idcsMaxValue: 10
               * idcsMinValue: 0
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: integer
               * uniqueness: none
        :param int max_lockout_interval_in_secs: (Updatable) The maximum period of time that the system will lock a particular user out of the service regardless of what the configured pattern of escalation would otherwise dictate
               
               **SCIM++ Properties:**
               * idcsMaxValue: 86400
               * idcsMinValue: 30
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: integer
               * uniqueness: none
        :param int min_pin_length: (Updatable) Minimum length of the Personal Identification Number (PIN)
               
               **SCIM++ Properties:**
               * idcsMaxValue: 10
               * idcsMinValue: 6
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: integer
               * uniqueness: none
        :param int policy_update_freq_in_days: (Updatable) The period of time in days after which a client should refresh its policy by re-reading that policy from the server
               
               **SCIM++ Properties:**
               * idcsMaxValue: 999
               * idcsMinValue: 1
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: integer
               * uniqueness: none
        :param str request_signing_algo: (Updatable) Indicates which algorithm the system will use to sign requests
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        :param str shared_secret_encoding: (Updatable) Indicates the type of encoding that the system should use to generate a shared secret
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        :param bool unlock_app_for_each_request_enabled: (Updatable) If true, indicates that the system should require the user to unlock the client app for each request. In order to unlock the App, the user must supply a Personal Identification Number (PIN) or a biometric authentication-factor.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: boolean
               * uniqueness: none
        :param int unlock_app_interval_in_secs: (Updatable) Specifies the period of time in seconds after which the client App should require the user to unlock the App. In order to unlock the App, the user must supply a Personal Identification Number (PIN) or a biometric authentication-factor. A value of zero means that it is disabled.
               
               **SCIM++ Properties:**
               * idcsMaxValue: 9999999
               * idcsMinValue: 0
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: integer
               * uniqueness: none
        :param bool unlock_on_app_foreground_enabled: (Updatable) If true, indicates that the system should require the user to unlock the client App, when the client App comes to the foreground in the display of the device. In order to unlock the App, the user must supply a Personal Identification Number (PIN) or a biometric authentication-factor.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: boolean
               * uniqueness: none
        :param bool unlock_on_app_start_enabled: (Updatable) If true, indicates that the system should require the user to unlock the client App whenever the App is started. In order to unlock the App, the user must supply a Personal Identification Number (PIN) or a biometric authentication-factor.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: boolean
               * uniqueness: none
        """
        pulumi.set(__self__, "device_protection_policy", device_protection_policy)
        pulumi.set(__self__, "initial_lockout_period_in_secs", initial_lockout_period_in_secs)
        pulumi.set(__self__, "key_pair_length", key_pair_length)
        pulumi.set(__self__, "lockout_escalation_pattern", lockout_escalation_pattern)
        pulumi.set(__self__, "max_failures_before_lockout", max_failures_before_lockout)
        pulumi.set(__self__, "max_failures_before_warning", max_failures_before_warning)
        pulumi.set(__self__, "max_lockout_interval_in_secs", max_lockout_interval_in_secs)
        pulumi.set(__self__, "min_pin_length", min_pin_length)
        pulumi.set(__self__, "policy_update_freq_in_days", policy_update_freq_in_days)
        pulumi.set(__self__, "request_signing_algo", request_signing_algo)
        pulumi.set(__self__, "shared_secret_encoding", shared_secret_encoding)
        pulumi.set(__self__, "unlock_app_for_each_request_enabled", unlock_app_for_each_request_enabled)
        pulumi.set(__self__, "unlock_app_interval_in_secs", unlock_app_interval_in_secs)
        pulumi.set(__self__, "unlock_on_app_foreground_enabled", unlock_on_app_foreground_enabled)
        pulumi.set(__self__, "unlock_on_app_start_enabled", unlock_on_app_start_enabled)

    @property
    @pulumi.getter(name="deviceProtectionPolicy")
    def device_protection_policy(self) -> str:
        """
        (Updatable) Indicates what protection policy that the system applies on a device. By default, the value is NONE, which indicates that the system applies no protection policy. A value of APP_PIN indicates that the system requires a Personal Identification Number (PIN). A value of DEVICE_BIOMETRIC_OR_APP_PIN indicates that either a PIN or a biometric authentication factor is required.

        **SCIM++ Properties:**
        * idcsCanonicalValueSourceFilter: attrName eq "deviceProtectionPolicy" and attrValues.value eq "$(deviceProtectionPolicy)"
        * idcsCanonicalValueSourceResourceType: AllowedValue
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "device_protection_policy")

    @property
    @pulumi.getter(name="initialLockoutPeriodInSecs")
    def initial_lockout_period_in_secs(self) -> int:
        """
        (Updatable) The period of time in seconds that the system will lock a user out of the service after that user exceeds the maximum number of login failures

        **SCIM++ Properties:**
        * idcsMaxValue: 86400
        * idcsMinValue: 30
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: integer
        * uniqueness: none
        """
        return pulumi.get(self, "initial_lockout_period_in_secs")

    @property
    @pulumi.getter(name="keyPairLength")
    def key_pair_length(self) -> int:
        """
        (Updatable) The size of the key that the system uses to generate the public-private key pair

        **SCIM++ Properties:**
        * idcsMaxValue: 4000
        * idcsMinValue: 32
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: integer
        * uniqueness: none
        """
        return pulumi.get(self, "key_pair_length")

    @property
    @pulumi.getter(name="lockoutEscalationPattern")
    def lockout_escalation_pattern(self) -> str:
        """
        (Updatable) The pattern of escalation that the system follows, in locking a particular user out of the service.

        **SCIM++ Properties:**
        * idcsCanonicalValueSourceFilter: attrName eq "lockoutEscalationPattern" and attrValues.value eq "$(lockoutEscalationPattern)"
        * idcsCanonicalValueSourceResourceType: AllowedValue
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "lockout_escalation_pattern")

    @property
    @pulumi.getter(name="maxFailuresBeforeLockout")
    def max_failures_before_lockout(self) -> int:
        """
        (Updatable) The maximum number of times that a particular user can fail to login before the system locks that user out of the service

        **SCIM++ Properties:**
        * idcsMaxValue: 10
        * idcsMinValue: 5
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: integer
        * uniqueness: none
        """
        return pulumi.get(self, "max_failures_before_lockout")

    @property
    @pulumi.getter(name="maxFailuresBeforeWarning")
    def max_failures_before_warning(self) -> int:
        """
        (Updatable) The maximum number of login failures that the system will allow before raising a warning and sending an alert via email

        **SCIM++ Properties:**
        * idcsMaxValue: 10
        * idcsMinValue: 0
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: integer
        * uniqueness: none
        """
        return pulumi.get(self, "max_failures_before_warning")

    @property
    @pulumi.getter(name="maxLockoutIntervalInSecs")
    def max_lockout_interval_in_secs(self) -> int:
        """
        (Updatable) The maximum period of time that the system will lock a particular user out of the service regardless of what the configured pattern of escalation would otherwise dictate

        **SCIM++ Properties:**
        * idcsMaxValue: 86400
        * idcsMinValue: 30
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: integer
        * uniqueness: none
        """
        return pulumi.get(self, "max_lockout_interval_in_secs")

    @property
    @pulumi.getter(name="minPinLength")
    def min_pin_length(self) -> int:
        """
        (Updatable) Minimum length of the Personal Identification Number (PIN)

        **SCIM++ Properties:**
        * idcsMaxValue: 10
        * idcsMinValue: 6
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: integer
        * uniqueness: none
        """
        return pulumi.get(self, "min_pin_length")

    @property
    @pulumi.getter(name="policyUpdateFreqInDays")
    def policy_update_freq_in_days(self) -> int:
        """
        (Updatable) The period of time in days after which a client should refresh its policy by re-reading that policy from the server

        **SCIM++ Properties:**
        * idcsMaxValue: 999
        * idcsMinValue: 1
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: integer
        * uniqueness: none
        """
        return pulumi.get(self, "policy_update_freq_in_days")

    @property
    @pulumi.getter(name="requestSigningAlgo")
    def request_signing_algo(self) -> str:
        """
        (Updatable) Indicates which algorithm the system will use to sign requests

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "request_signing_algo")

    @property
    @pulumi.getter(name="sharedSecretEncoding")
    def shared_secret_encoding(self) -> str:
        """
        (Updatable) Indicates the type of encoding that the system should use to generate a shared secret

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "shared_secret_encoding")

    @property
    @pulumi.getter(name="unlockAppForEachRequestEnabled")
    def unlock_app_for_each_request_enabled(self) -> bool:
        """
        (Updatable) If true, indicates that the system should require the user to unlock the client app for each request. In order to unlock the App, the user must supply a Personal Identification Number (PIN) or a biometric authentication-factor.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "unlock_app_for_each_request_enabled")

    @property
    @pulumi.getter(name="unlockAppIntervalInSecs")
    def unlock_app_interval_in_secs(self) -> int:
        """
        (Updatable) Specifies the period of time in seconds after which the client App should require the user to unlock the App. In order to unlock the App, the user must supply a Personal Identification Number (PIN) or a biometric authentication-factor. A value of zero means that it is disabled.

        **SCIM++ Properties:**
        * idcsMaxValue: 9999999
        * idcsMinValue: 0
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: integer
        * uniqueness: none
        """
        return pulumi.get(self, "unlock_app_interval_in_secs")

    @property
    @pulumi.getter(name="unlockOnAppForegroundEnabled")
    def unlock_on_app_foreground_enabled(self) -> bool:
        """
        (Updatable) If true, indicates that the system should require the user to unlock the client App, when the client App comes to the foreground in the display of the device. In order to unlock the App, the user must supply a Personal Identification Number (PIN) or a biometric authentication-factor.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "unlock_on_app_foreground_enabled")

    @property
    @pulumi.getter(name="unlockOnAppStartEnabled")
    def unlock_on_app_start_enabled(self) -> bool:
        """
        (Updatable) If true, indicates that the system should require the user to unlock the client App whenever the App is started. In order to unlock the App, the user must supply a Personal Identification Number (PIN) or a biometric authentication-factor.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "unlock_on_app_start_enabled")


@pulumi.output_type
class DomainsAuthenticationFactorSettingCompliancePolicy(dict):
    def __init__(__self__, *,
                 action: str,
                 name: str,
                 value: str):
        """
        :param str action: (Updatable) The action to be taken if the value of the attribute is not as expected
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        :param str name: (Updatable) The name of the attribute being evaluated
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        :param str value: (Updatable) Value of the tag.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        (Updatable) The action to be taken if the value of the attribute is not as expected

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Updatable) The name of the attribute being evaluated

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        (Updatable) Value of the tag.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsAuthenticationFactorSettingEmailSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "emailLinkEnabled":
            suggest = "email_link_enabled"
        elif key == "emailLinkCustomUrl":
            suggest = "email_link_custom_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsAuthenticationFactorSettingEmailSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsAuthenticationFactorSettingEmailSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsAuthenticationFactorSettingEmailSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 email_link_enabled: bool,
                 email_link_custom_url: Optional[str] = None):
        """
        :param bool email_link_enabled: (Updatable) Specifies whether Email link is enabled or not.
               
               **Added In:** 20.1.3
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: boolean
               * uniqueness: none
        :param str email_link_custom_url: (Updatable) Custom redirect Url which will be used in email link
               
               **Added In:** 20.1.3
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        """
        pulumi.set(__self__, "email_link_enabled", email_link_enabled)
        if email_link_custom_url is not None:
            pulumi.set(__self__, "email_link_custom_url", email_link_custom_url)

    @property
    @pulumi.getter(name="emailLinkEnabled")
    def email_link_enabled(self) -> bool:
        """
        (Updatable) Specifies whether Email link is enabled or not.

        **Added In:** 20.1.3

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "email_link_enabled")

    @property
    @pulumi.getter(name="emailLinkCustomUrl")
    def email_link_custom_url(self) -> Optional[str]:
        """
        (Updatable) Custom redirect Url which will be used in email link

        **Added In:** 20.1.3

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "email_link_custom_url")


@pulumi.output_type
class DomainsAuthenticationFactorSettingEndpointRestrictions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxEndpointTrustDurationInDays":
            suggest = "max_endpoint_trust_duration_in_days"
        elif key == "maxEnrolledDevices":
            suggest = "max_enrolled_devices"
        elif key == "maxIncorrectAttempts":
            suggest = "max_incorrect_attempts"
        elif key == "maxTrustedEndpoints":
            suggest = "max_trusted_endpoints"
        elif key == "trustedEndpointsEnabled":
            suggest = "trusted_endpoints_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsAuthenticationFactorSettingEndpointRestrictions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsAuthenticationFactorSettingEndpointRestrictions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsAuthenticationFactorSettingEndpointRestrictions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_endpoint_trust_duration_in_days: int,
                 max_enrolled_devices: int,
                 max_incorrect_attempts: int,
                 max_trusted_endpoints: int,
                 trusted_endpoints_enabled: bool):
        """
        :param int max_endpoint_trust_duration_in_days: (Updatable) Maximum number of days until an endpoint can be trusted
               
               **SCIM++ Properties:**
               * idcsMaxValue: 180
               * idcsMinValue: 1
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: integer
               * uniqueness: none
        :param int max_enrolled_devices: (Updatable) Maximum number of enrolled devices per user
               
               **SCIM++ Properties:**
               * idcsMaxValue: 20
               * idcsMinValue: 1
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: integer
               * uniqueness: none
        :param int max_incorrect_attempts: (Updatable) An integer that represents the maximum number of failed MFA logins before an account is locked
               
               **SCIM++ Properties:**
               * idcsMaxValue: 20
               * idcsMinValue: 5
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: integer
               * uniqueness: none
        :param int max_trusted_endpoints: (Updatable) Max number of trusted endpoints per user
               
               **SCIM++ Properties:**
               * idcsMaxValue: 20
               * idcsMinValue: 1
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: integer
               * uniqueness: none
        :param bool trusted_endpoints_enabled: (Updatable) Specify if trusted endpoints are enabled
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: boolean
               * uniqueness: none
        """
        pulumi.set(__self__, "max_endpoint_trust_duration_in_days", max_endpoint_trust_duration_in_days)
        pulumi.set(__self__, "max_enrolled_devices", max_enrolled_devices)
        pulumi.set(__self__, "max_incorrect_attempts", max_incorrect_attempts)
        pulumi.set(__self__, "max_trusted_endpoints", max_trusted_endpoints)
        pulumi.set(__self__, "trusted_endpoints_enabled", trusted_endpoints_enabled)

    @property
    @pulumi.getter(name="maxEndpointTrustDurationInDays")
    def max_endpoint_trust_duration_in_days(self) -> int:
        """
        (Updatable) Maximum number of days until an endpoint can be trusted

        **SCIM++ Properties:**
        * idcsMaxValue: 180
        * idcsMinValue: 1
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: integer
        * uniqueness: none
        """
        return pulumi.get(self, "max_endpoint_trust_duration_in_days")

    @property
    @pulumi.getter(name="maxEnrolledDevices")
    def max_enrolled_devices(self) -> int:
        """
        (Updatable) Maximum number of enrolled devices per user

        **SCIM++ Properties:**
        * idcsMaxValue: 20
        * idcsMinValue: 1
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: integer
        * uniqueness: none
        """
        return pulumi.get(self, "max_enrolled_devices")

    @property
    @pulumi.getter(name="maxIncorrectAttempts")
    def max_incorrect_attempts(self) -> int:
        """
        (Updatable) An integer that represents the maximum number of failed MFA logins before an account is locked

        **SCIM++ Properties:**
        * idcsMaxValue: 20
        * idcsMinValue: 5
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: integer
        * uniqueness: none
        """
        return pulumi.get(self, "max_incorrect_attempts")

    @property
    @pulumi.getter(name="maxTrustedEndpoints")
    def max_trusted_endpoints(self) -> int:
        """
        (Updatable) Max number of trusted endpoints per user

        **SCIM++ Properties:**
        * idcsMaxValue: 20
        * idcsMinValue: 1
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: integer
        * uniqueness: none
        """
        return pulumi.get(self, "max_trusted_endpoints")

    @property
    @pulumi.getter(name="trustedEndpointsEnabled")
    def trusted_endpoints_enabled(self) -> bool:
        """
        (Updatable) Specify if trusted endpoints are enabled

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "trusted_endpoints_enabled")


@pulumi.output_type
class DomainsAuthenticationFactorSettingIdcsCreatedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str value: (Updatable) Value of the tag.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        :param str display: (Updatable) The displayName of the User or App who modified this Resource
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ocid: (Updatable) Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: default
               * type: string
               * uniqueness: global
        :param str ref: (Updatable) The URI of the SCIM resource that represents the User or App who modified this Resource
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param str type: (Updatable) The type of resource, User or App, that modified this Resource
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        """
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        (Updatable) Value of the tag.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) The displayName of the User or App who modified this Resource

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        """
        (Updatable) Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: default
        * type: string
        * uniqueness: global
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) The URI of the SCIM resource that represents the User or App who modified this Resource

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        (Updatable) The type of resource, User or App, that modified this Resource

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsAuthenticationFactorSettingIdcsLastModifiedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str value: (Updatable) Value of the tag.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        :param str display: (Updatable) The displayName of the User or App who modified this Resource
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ocid: (Updatable) Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: default
               * type: string
               * uniqueness: global
        :param str ref: (Updatable) The URI of the SCIM resource that represents the User or App who modified this Resource
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param str type: (Updatable) The type of resource, User or App, that modified this Resource
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        """
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        (Updatable) Value of the tag.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) The displayName of the User or App who modified this Resource

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        """
        (Updatable) Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: default
        * type: string
        * uniqueness: global
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) The URI of the SCIM resource that represents the User or App who modified this Resource

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        (Updatable) The type of resource, User or App, that modified this Resource

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsAuthenticationFactorSettingIdentityStoreSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mobileNumberEnabled":
            suggest = "mobile_number_enabled"
        elif key == "mobileNumberUpdateEnabled":
            suggest = "mobile_number_update_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsAuthenticationFactorSettingIdentityStoreSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsAuthenticationFactorSettingIdentityStoreSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsAuthenticationFactorSettingIdentityStoreSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mobile_number_enabled: Optional[bool] = None,
                 mobile_number_update_enabled: Optional[bool] = None):
        """
        :param bool mobile_number_enabled: (Updatable) If true, indicates that Multi-Factor Authentication should use the mobile number in the identity store
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: boolean
               * uniqueness: none
        :param bool mobile_number_update_enabled: (Updatable) If true, indicates that the user can update the mobile number in the user's Multi-Factor Authentication profile
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: boolean
               * uniqueness: none
        """
        if mobile_number_enabled is not None:
            pulumi.set(__self__, "mobile_number_enabled", mobile_number_enabled)
        if mobile_number_update_enabled is not None:
            pulumi.set(__self__, "mobile_number_update_enabled", mobile_number_update_enabled)

    @property
    @pulumi.getter(name="mobileNumberEnabled")
    def mobile_number_enabled(self) -> Optional[bool]:
        """
        (Updatable) If true, indicates that Multi-Factor Authentication should use the mobile number in the identity store

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "mobile_number_enabled")

    @property
    @pulumi.getter(name="mobileNumberUpdateEnabled")
    def mobile_number_update_enabled(self) -> Optional[bool]:
        """
        (Updatable) If true, indicates that the user can update the mobile number in the user's Multi-Factor Authentication profile

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "mobile_number_update_enabled")


@pulumi.output_type
class DomainsAuthenticationFactorSettingMeta(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastModified":
            suggest = "last_modified"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsAuthenticationFactorSettingMeta. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsAuthenticationFactorSettingMeta.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsAuthenticationFactorSettingMeta.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param str created: (Updatable) The DateTime the Resource was added to the Service Provider
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: dateTime
               * uniqueness: none
        :param str last_modified: (Updatable) The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: dateTime
               * uniqueness: none
        :param str location: (Updatable) The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str resource_type: (Updatable) Name of the resource type of the resource--for example, Users or Groups
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str version: (Updatable) The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        """
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        """
        (Updatable) The DateTime the Resource was added to the Service Provider

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: dateTime
        * uniqueness: none
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        """
        (Updatable) The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: dateTime
        * uniqueness: none
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        """
        (Updatable) The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        """
        (Updatable) Name of the resource type of the resource--for example, Users or Groups

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        (Updatable) The version of the Resource being returned. This value must be the same as the ETag HTTP response header.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class DomainsAuthenticationFactorSettingNotificationSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pullEnabled":
            suggest = "pull_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsAuthenticationFactorSettingNotificationSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsAuthenticationFactorSettingNotificationSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsAuthenticationFactorSettingNotificationSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 pull_enabled: bool):
        """
        :param bool pull_enabled: (Updatable) If true, indicates that the Mobile App Pull Notification channel is enabled for authentication
               
               **Added In:** 17.4.2
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: boolean
               * uniqueness: none
        """
        pulumi.set(__self__, "pull_enabled", pull_enabled)

    @property
    @pulumi.getter(name="pullEnabled")
    def pull_enabled(self) -> bool:
        """
        (Updatable) If true, indicates that the Mobile App Pull Notification channel is enabled for authentication

        **Added In:** 17.4.2

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "pull_enabled")


@pulumi.output_type
class DomainsAuthenticationFactorSettingTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: (Updatable) Key or name of the tag.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        :param str value: (Updatable) Value of the tag.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        (Updatable) Key or name of the tag.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        (Updatable) Value of the tag.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsAuthenticationFactorSettingThirdPartyFactor(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "duoSecurity":
            suggest = "duo_security"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsAuthenticationFactorSettingThirdPartyFactor. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsAuthenticationFactorSettingThirdPartyFactor.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsAuthenticationFactorSettingThirdPartyFactor.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duo_security: bool):
        """
        :param bool duo_security: (Updatable) To enable Duo Security factor
               
               **Added In:** 19.2.1
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: boolean
               * uniqueness: none
        """
        pulumi.set(__self__, "duo_security", duo_security)

    @property
    @pulumi.getter(name="duoSecurity")
    def duo_security(self) -> bool:
        """
        (Updatable) To enable Duo Security factor

        **Added In:** 19.2.1

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "duo_security")


@pulumi.output_type
class DomainsAuthenticationFactorSettingTotpSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "emailOtpValidityDurationInMins":
            suggest = "email_otp_validity_duration_in_mins"
        elif key == "emailPasscodeLength":
            suggest = "email_passcode_length"
        elif key == "hashingAlgorithm":
            suggest = "hashing_algorithm"
        elif key == "jwtValidityDurationInSecs":
            suggest = "jwt_validity_duration_in_secs"
        elif key == "keyRefreshIntervalInDays":
            suggest = "key_refresh_interval_in_days"
        elif key == "passcodeLength":
            suggest = "passcode_length"
        elif key == "smsOtpValidityDurationInMins":
            suggest = "sms_otp_validity_duration_in_mins"
        elif key == "smsPasscodeLength":
            suggest = "sms_passcode_length"
        elif key == "timeStepInSecs":
            suggest = "time_step_in_secs"
        elif key == "timeStepTolerance":
            suggest = "time_step_tolerance"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsAuthenticationFactorSettingTotpSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsAuthenticationFactorSettingTotpSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsAuthenticationFactorSettingTotpSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 email_otp_validity_duration_in_mins: int,
                 email_passcode_length: int,
                 hashing_algorithm: str,
                 jwt_validity_duration_in_secs: int,
                 key_refresh_interval_in_days: int,
                 passcode_length: int,
                 sms_otp_validity_duration_in_mins: int,
                 sms_passcode_length: int,
                 time_step_in_secs: int,
                 time_step_tolerance: int):
        """
        :param int email_otp_validity_duration_in_mins: (Updatable) The period of time (in minutes) that a one-time passcode remains valid that the system sends by email.
               
               **Added In:** 18.1.2
               
               **SCIM++ Properties:**
               * idcsMaxValue: 60
               * idcsMinValue: 2
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: integer
               * uniqueness: none
        :param int email_passcode_length: (Updatable) Exact length of the email one-time passcode.
               
               **Added In:** 18.1.2
               
               **SCIM++ Properties:**
               * idcsMaxValue: 10
               * idcsMinValue: 4
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: integer
               * uniqueness: none
        :param str hashing_algorithm: (Updatable) The hashing algorithm to be used to calculate a One-Time Passcode. By default, the system uses SHA1.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        :param int jwt_validity_duration_in_secs: (Updatable) The period of time (in seconds) that a JSON Web Token (JWT) is valid
               
               **SCIM++ Properties:**
               * idcsMaxValue: 99999
               * idcsMinValue: 30
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: integer
               * uniqueness: none
        :param int key_refresh_interval_in_days: (Updatable) The duration of time (in days) after which the shared secret has to be refreshed
               
               **SCIM++ Properties:**
               * idcsMaxValue: 999
               * idcsMinValue: 30
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: integer
               * uniqueness: none
        :param int passcode_length: (Updatable) Exact length of the One-Time Passcode that the system should generate
               
               **SCIM++ Properties:**
               * idcsMaxValue: 10
               * idcsMinValue: 4
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: integer
               * uniqueness: none
        :param int sms_otp_validity_duration_in_mins: (Updatable) The period of time (in minutes) for which a One-Time Passcode that the system sends by Short Message Service (SMS) or by voice remains valid
               
               **SCIM++ Properties:**
               * idcsMaxValue: 60
               * idcsMinValue: 2
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: integer
               * uniqueness: none
        :param int sms_passcode_length: (Updatable) Exact length of the Short Message Service (SMS) One-Time Passcode
               
               **SCIM++ Properties:**
               * idcsMaxValue: 10
               * idcsMinValue: 4
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: integer
               * uniqueness: none
        :param int time_step_in_secs: (Updatable) Time (in secs) to be used as the time step
               
               **SCIM++ Properties:**
               * idcsMaxValue: 300
               * idcsMinValue: 30
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: integer
               * uniqueness: none
        :param int time_step_tolerance: (Updatable) The tolerance/step-size that the system should use when validating a One-Time Passcode
               
               **SCIM++ Properties:**
               * idcsMaxValue: 3
               * idcsMinValue: 2
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: integer
               * uniqueness: none
        """
        pulumi.set(__self__, "email_otp_validity_duration_in_mins", email_otp_validity_duration_in_mins)
        pulumi.set(__self__, "email_passcode_length", email_passcode_length)
        pulumi.set(__self__, "hashing_algorithm", hashing_algorithm)
        pulumi.set(__self__, "jwt_validity_duration_in_secs", jwt_validity_duration_in_secs)
        pulumi.set(__self__, "key_refresh_interval_in_days", key_refresh_interval_in_days)
        pulumi.set(__self__, "passcode_length", passcode_length)
        pulumi.set(__self__, "sms_otp_validity_duration_in_mins", sms_otp_validity_duration_in_mins)
        pulumi.set(__self__, "sms_passcode_length", sms_passcode_length)
        pulumi.set(__self__, "time_step_in_secs", time_step_in_secs)
        pulumi.set(__self__, "time_step_tolerance", time_step_tolerance)

    @property
    @pulumi.getter(name="emailOtpValidityDurationInMins")
    def email_otp_validity_duration_in_mins(self) -> int:
        """
        (Updatable) The period of time (in minutes) that a one-time passcode remains valid that the system sends by email.

        **Added In:** 18.1.2

        **SCIM++ Properties:**
        * idcsMaxValue: 60
        * idcsMinValue: 2
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: integer
        * uniqueness: none
        """
        return pulumi.get(self, "email_otp_validity_duration_in_mins")

    @property
    @pulumi.getter(name="emailPasscodeLength")
    def email_passcode_length(self) -> int:
        """
        (Updatable) Exact length of the email one-time passcode.

        **Added In:** 18.1.2

        **SCIM++ Properties:**
        * idcsMaxValue: 10
        * idcsMinValue: 4
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: integer
        * uniqueness: none
        """
        return pulumi.get(self, "email_passcode_length")

    @property
    @pulumi.getter(name="hashingAlgorithm")
    def hashing_algorithm(self) -> str:
        """
        (Updatable) The hashing algorithm to be used to calculate a One-Time Passcode. By default, the system uses SHA1.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "hashing_algorithm")

    @property
    @pulumi.getter(name="jwtValidityDurationInSecs")
    def jwt_validity_duration_in_secs(self) -> int:
        """
        (Updatable) The period of time (in seconds) that a JSON Web Token (JWT) is valid

        **SCIM++ Properties:**
        * idcsMaxValue: 99999
        * idcsMinValue: 30
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: integer
        * uniqueness: none
        """
        return pulumi.get(self, "jwt_validity_duration_in_secs")

    @property
    @pulumi.getter(name="keyRefreshIntervalInDays")
    def key_refresh_interval_in_days(self) -> int:
        """
        (Updatable) The duration of time (in days) after which the shared secret has to be refreshed

        **SCIM++ Properties:**
        * idcsMaxValue: 999
        * idcsMinValue: 30
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: integer
        * uniqueness: none
        """
        return pulumi.get(self, "key_refresh_interval_in_days")

    @property
    @pulumi.getter(name="passcodeLength")
    def passcode_length(self) -> int:
        """
        (Updatable) Exact length of the One-Time Passcode that the system should generate

        **SCIM++ Properties:**
        * idcsMaxValue: 10
        * idcsMinValue: 4
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: integer
        * uniqueness: none
        """
        return pulumi.get(self, "passcode_length")

    @property
    @pulumi.getter(name="smsOtpValidityDurationInMins")
    def sms_otp_validity_duration_in_mins(self) -> int:
        """
        (Updatable) The period of time (in minutes) for which a One-Time Passcode that the system sends by Short Message Service (SMS) or by voice remains valid

        **SCIM++ Properties:**
        * idcsMaxValue: 60
        * idcsMinValue: 2
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: integer
        * uniqueness: none
        """
        return pulumi.get(self, "sms_otp_validity_duration_in_mins")

    @property
    @pulumi.getter(name="smsPasscodeLength")
    def sms_passcode_length(self) -> int:
        """
        (Updatable) Exact length of the Short Message Service (SMS) One-Time Passcode

        **SCIM++ Properties:**
        * idcsMaxValue: 10
        * idcsMinValue: 4
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: integer
        * uniqueness: none
        """
        return pulumi.get(self, "sms_passcode_length")

    @property
    @pulumi.getter(name="timeStepInSecs")
    def time_step_in_secs(self) -> int:
        """
        (Updatable) Time (in secs) to be used as the time step

        **SCIM++ Properties:**
        * idcsMaxValue: 300
        * idcsMinValue: 30
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: integer
        * uniqueness: none
        """
        return pulumi.get(self, "time_step_in_secs")

    @property
    @pulumi.getter(name="timeStepTolerance")
    def time_step_tolerance(self) -> int:
        """
        (Updatable) The tolerance/step-size that the system should use when validating a One-Time Passcode

        **SCIM++ Properties:**
        * idcsMaxValue: 3
        * idcsMinValue: 2
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: integer
        * uniqueness: none
        """
        return pulumi.get(self, "time_step_tolerance")


@pulumi.output_type
class DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionfidoAuthenticationFactorSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authenticatorSelectionAttachment":
            suggest = "authenticator_selection_attachment"
        elif key == "authenticatorSelectionRequireResidentKey":
            suggest = "authenticator_selection_require_resident_key"
        elif key == "authenticatorSelectionResidentKey":
            suggest = "authenticator_selection_resident_key"
        elif key == "authenticatorSelectionUserVerification":
            suggest = "authenticator_selection_user_verification"
        elif key == "excludeCredentials":
            suggest = "exclude_credentials"
        elif key == "publicKeyTypes":
            suggest = "public_key_types"
        elif key == "domainValidationLevel":
            suggest = "domain_validation_level"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionfidoAuthenticationFactorSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionfidoAuthenticationFactorSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionfidoAuthenticationFactorSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 attestation: str,
                 authenticator_selection_attachment: str,
                 authenticator_selection_require_resident_key: bool,
                 authenticator_selection_resident_key: str,
                 authenticator_selection_user_verification: str,
                 exclude_credentials: bool,
                 public_key_types: Sequence[str],
                 timeout: int,
                 domain_validation_level: Optional[int] = None):
        """
        :param str attestation: (Updatable) Attribute used to define the type of attestation required.
               
               **Added In:** 2009232244
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        :param str authenticator_selection_attachment: (Updatable) Attribute used to define authenticator selection attachment.
               
               **Added In:** 2009232244
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        :param bool authenticator_selection_require_resident_key: (Updatable) Flag used to indicate authenticator selection is required or not
               
               **Added In:** 2009232244
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: boolean
               * uniqueness: none
        :param str authenticator_selection_resident_key: (Updatable) Attribute used to define authenticator selection resident key requirement.
               
               **Added In:** 2009232244
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        :param str authenticator_selection_user_verification: (Updatable) Attribute used to define authenticator selection verification.
               
               **Added In:** 2009232244
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        :param bool exclude_credentials: (Updatable) Flag used to indicate whether we need to restrict creation of multiple credentials in same authenticator
               
               **Added In:** 2009232244
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: boolean
               * uniqueness: none
        :param Sequence[str] public_key_types: (Updatable) List of server supported public key algorithms
               
               **Added In:** 2009232244
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: true
               * mutability: readWrite
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        :param int timeout: (Updatable) Timeout for the fido authentication to complete
               
               **Added In:** 2009232244
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * idcsMaxValue: 600000
               * idcsMinValue: 10000
               * required: true
               * returned: default
               * type: integer
               * uniqueness: none
        :param int domain_validation_level: (Updatable) Number of domain levels IDCS should use for origin comparision
               
               **Added In:** 2109020413
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * idcsMaxValue: 2
               * idcsMinValue: 0
               * required: false
               * returned: default
               * type: integer
               * uniqueness: none
        """
        pulumi.set(__self__, "attestation", attestation)
        pulumi.set(__self__, "authenticator_selection_attachment", authenticator_selection_attachment)
        pulumi.set(__self__, "authenticator_selection_require_resident_key", authenticator_selection_require_resident_key)
        pulumi.set(__self__, "authenticator_selection_resident_key", authenticator_selection_resident_key)
        pulumi.set(__self__, "authenticator_selection_user_verification", authenticator_selection_user_verification)
        pulumi.set(__self__, "exclude_credentials", exclude_credentials)
        pulumi.set(__self__, "public_key_types", public_key_types)
        pulumi.set(__self__, "timeout", timeout)
        if domain_validation_level is not None:
            pulumi.set(__self__, "domain_validation_level", domain_validation_level)

    @property
    @pulumi.getter
    def attestation(self) -> str:
        """
        (Updatable) Attribute used to define the type of attestation required.

        **Added In:** 2009232244

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "attestation")

    @property
    @pulumi.getter(name="authenticatorSelectionAttachment")
    def authenticator_selection_attachment(self) -> str:
        """
        (Updatable) Attribute used to define authenticator selection attachment.

        **Added In:** 2009232244

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "authenticator_selection_attachment")

    @property
    @pulumi.getter(name="authenticatorSelectionRequireResidentKey")
    def authenticator_selection_require_resident_key(self) -> bool:
        """
        (Updatable) Flag used to indicate authenticator selection is required or not

        **Added In:** 2009232244

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "authenticator_selection_require_resident_key")

    @property
    @pulumi.getter(name="authenticatorSelectionResidentKey")
    def authenticator_selection_resident_key(self) -> str:
        """
        (Updatable) Attribute used to define authenticator selection resident key requirement.

        **Added In:** 2009232244

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "authenticator_selection_resident_key")

    @property
    @pulumi.getter(name="authenticatorSelectionUserVerification")
    def authenticator_selection_user_verification(self) -> str:
        """
        (Updatable) Attribute used to define authenticator selection verification.

        **Added In:** 2009232244

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "authenticator_selection_user_verification")

    @property
    @pulumi.getter(name="excludeCredentials")
    def exclude_credentials(self) -> bool:
        """
        (Updatable) Flag used to indicate whether we need to restrict creation of multiple credentials in same authenticator

        **Added In:** 2009232244

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "exclude_credentials")

    @property
    @pulumi.getter(name="publicKeyTypes")
    def public_key_types(self) -> Sequence[str]:
        """
        (Updatable) List of server supported public key algorithms

        **Added In:** 2009232244

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: true
        * mutability: readWrite
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "public_key_types")

    @property
    @pulumi.getter
    def timeout(self) -> int:
        """
        (Updatable) Timeout for the fido authentication to complete

        **Added In:** 2009232244

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * idcsMaxValue: 600000
        * idcsMinValue: 10000
        * required: true
        * returned: default
        * type: integer
        * uniqueness: none
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter(name="domainValidationLevel")
    def domain_validation_level(self) -> Optional[int]:
        """
        (Updatable) Number of domain levels IDCS should use for origin comparision

        **Added In:** 2109020413

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * idcsMaxValue: 2
        * idcsMinValue: 0
        * required: false
        * returned: default
        * type: integer
        * uniqueness: none
        """
        return pulumi.get(self, "domain_validation_level")


@pulumi.output_type
class DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "duoSecuritySettings":
            suggest = "duo_security_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duo_security_settings: Optional['outputs.DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettingsDuoSecuritySettings'] = None):
        """
        :param 'DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettingsDuoSecuritySettingsArgs' duo_security_settings: (Updatable) Settings related to Duo Security
               
               **Added In:** 19.2.1
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: complex
               * uniqueness: none
        """
        if duo_security_settings is not None:
            pulumi.set(__self__, "duo_security_settings", duo_security_settings)

    @property
    @pulumi.getter(name="duoSecuritySettings")
    def duo_security_settings(self) -> Optional['outputs.DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettingsDuoSecuritySettings']:
        """
        (Updatable) Settings related to Duo Security

        **Added In:** 19.2.1

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: complex
        * uniqueness: none
        """
        return pulumi.get(self, "duo_security_settings")


@pulumi.output_type
class DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettingsDuoSecuritySettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiHostname":
            suggest = "api_hostname"
        elif key == "integrationKey":
            suggest = "integration_key"
        elif key == "secretKey":
            suggest = "secret_key"
        elif key == "userMappingAttribute":
            suggest = "user_mapping_attribute"
        elif key == "attestationKey":
            suggest = "attestation_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettingsDuoSecuritySettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettingsDuoSecuritySettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettingsDuoSecuritySettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_hostname: str,
                 integration_key: str,
                 secret_key: str,
                 user_mapping_attribute: str,
                 attestation_key: Optional[str] = None):
        """
        :param str api_hostname: (Updatable) Hostname to access the Duo security account
               
               **Added In:** 19.2.1
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        :param str integration_key: (Updatable) Integration key from Duo Security authenticator
               
               **Added In:** 19.2.1
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        :param str secret_key: (Updatable) Secret key from Duo Security authenticator
               
               **Added In:** 19.2.1
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        :param str user_mapping_attribute: (Updatable) User attribute mapping value
               
               **Added In:** 19.2.1
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        :param str attestation_key: (Updatable) Attestation key to attest the request and response between Duo Security
               
               **Added In:** 19.2.1
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: never
               * type: string
               * uniqueness: none
        """
        pulumi.set(__self__, "api_hostname", api_hostname)
        pulumi.set(__self__, "integration_key", integration_key)
        pulumi.set(__self__, "secret_key", secret_key)
        pulumi.set(__self__, "user_mapping_attribute", user_mapping_attribute)
        if attestation_key is not None:
            pulumi.set(__self__, "attestation_key", attestation_key)

    @property
    @pulumi.getter(name="apiHostname")
    def api_hostname(self) -> str:
        """
        (Updatable) Hostname to access the Duo security account

        **Added In:** 19.2.1

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "api_hostname")

    @property
    @pulumi.getter(name="integrationKey")
    def integration_key(self) -> str:
        """
        (Updatable) Integration key from Duo Security authenticator

        **Added In:** 19.2.1

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "integration_key")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> str:
        """
        (Updatable) Secret key from Duo Security authenticator

        **Added In:** 19.2.1

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "secret_key")

    @property
    @pulumi.getter(name="userMappingAttribute")
    def user_mapping_attribute(self) -> str:
        """
        (Updatable) User attribute mapping value

        **Added In:** 19.2.1

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "user_mapping_attribute")

    @property
    @pulumi.getter(name="attestationKey")
    def attestation_key(self) -> Optional[str]:
        """
        (Updatable) Attestation key to attest the request and response between Duo Security

        **Added In:** 19.2.1

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: never
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "attestation_key")


@pulumi.output_type
class DomainsCustomerSecretKeyIdcsCreatedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str value: User's id
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param str display: (Updatable) User display name
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ocid: User's ocid
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) The URI that corresponds to the user linked to this credential
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param str type: The type of resource, User or App, that modified this Resource
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        """
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) User display name

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        """
        User's ocid

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) The URI that corresponds to the user linked to this credential

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of resource, User or App, that modified this Resource

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsCustomerSecretKeyIdcsLastModifiedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str value: User's id
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param str display: (Updatable) User display name
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ocid: User's ocid
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) The URI that corresponds to the user linked to this credential
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param str type: The type of resource, User or App, that modified this Resource
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        """
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) User display name

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        """
        User's ocid

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) The URI that corresponds to the user linked to this credential

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of resource, User or App, that modified this Resource

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsCustomerSecretKeyMeta(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastModified":
            suggest = "last_modified"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsCustomerSecretKeyMeta. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsCustomerSecretKeyMeta.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsCustomerSecretKeyMeta.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param str created: The DateTime the Resource was added to the Service Provider
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: dateTime
               * uniqueness: none
        :param str last_modified: The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: dateTime
               * uniqueness: none
        :param str location: The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str resource_type: Name of the resource type of the resource--for example, Users or Groups
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str version: The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        """
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        """
        The DateTime the Resource was added to the Service Provider

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: dateTime
        * uniqueness: none
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        """
        The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: dateTime
        * uniqueness: none
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        """
        The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        """
        Name of the resource type of the resource--for example, Users or Groups

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        The version of the Resource being returned. This value must be the same as the ETag HTTP response header.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class DomainsCustomerSecretKeyTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Key or name of the tag.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        :param str value: User's id
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key or name of the tag.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsCustomerSecretKeyUrnietfparamsscimschemasoracleidcsextensionselfChangeUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowSelfChange":
            suggest = "allow_self_change"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsCustomerSecretKeyUrnietfparamsscimschemasoracleidcsextensionselfChangeUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsCustomerSecretKeyUrnietfparamsscimschemasoracleidcsextensionselfChangeUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsCustomerSecretKeyUrnietfparamsscimschemasoracleidcsextensionselfChangeUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_self_change: Optional[bool] = None):
        """
        :param bool allow_self_change: If true, allows requesting user to update themselves. If false, requesting user can't update themself (default).
               
               **Added In:** 2205182039
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: writeOnly
               * required: false
               * returned: never
               * type: boolean
               * uniqueness: none
        """
        if allow_self_change is not None:
            pulumi.set(__self__, "allow_self_change", allow_self_change)

    @property
    @pulumi.getter(name="allowSelfChange")
    def allow_self_change(self) -> Optional[bool]:
        """
        If true, allows requesting user to update themselves. If false, requesting user can't update themself (default).

        **Added In:** 2205182039

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: writeOnly
        * required: false
        * returned: never
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "allow_self_change")


@pulumi.output_type
class DomainsCustomerSecretKeyUser(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str display: (Updatable) User display name
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str name: (Updatable) User name
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ocid: User's ocid
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) The URI that corresponds to the user linked to this credential
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param str value: User's id
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        if display is not None:
            pulumi.set(__self__, "display", display)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) User display name

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        (Updatable) User name

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        """
        User's ocid

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) The URI that corresponds to the user linked to this credential

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        User's id

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsDynamicResourceGroupDynamicGroupAppRole(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adminRole":
            suggest = "admin_role"
        elif key == "appId":
            suggest = "app_id"
        elif key == "appName":
            suggest = "app_name"
        elif key == "legacyGroupName":
            suggest = "legacy_group_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsDynamicResourceGroupDynamicGroupAppRole. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsDynamicResourceGroupDynamicGroupAppRole.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsDynamicResourceGroupDynamicGroupAppRole.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 value: str,
                 admin_role: Optional[bool] = None,
                 app_id: Optional[str] = None,
                 app_name: Optional[str] = None,
                 display: Optional[str] = None,
                 legacy_group_name: Optional[str] = None,
                 ref: Optional[str] = None):
        """
        :param str value: (Updatable) Oracle Cloud Infrastructure Tag value
               
               **Added In:** 2011192329
               
               **SCIM++ Properties:**
               * caseExact: false
               * required: true
               * mutability: readWrite
               * returned: default
               * type: string
               * idcsSearchable: true
               * uniqueness: none
        :param bool admin_role: (Updatable) If true, then the role provides administrative access privileges. READ-ONLY.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: request
               * type: boolean
               * uniqueness: none
        :param str app_id: (Updatable) App identifier
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsAddedSinceVersion: 3
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str app_name: (Updatable) Name of parent App. READ-ONLY.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: request
               * type: string
               * uniqueness: none
        :param str display: (Updatable) The displayName of the User or App who modified this Resource
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str legacy_group_name: (Updatable) The name of the legacy group associated with this AppRole.
               
               **SCIM++ Properties:**
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: request
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) The URI of the SCIM resource that represents the User or App who modified this Resource
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        """
        pulumi.set(__self__, "value", value)
        if admin_role is not None:
            pulumi.set(__self__, "admin_role", admin_role)
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if app_name is not None:
            pulumi.set(__self__, "app_name", app_name)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if legacy_group_name is not None:
            pulumi.set(__self__, "legacy_group_name", legacy_group_name)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        (Updatable) Oracle Cloud Infrastructure Tag value

        **Added In:** 2011192329

        **SCIM++ Properties:**
        * caseExact: false
        * required: true
        * mutability: readWrite
        * returned: default
        * type: string
        * idcsSearchable: true
        * uniqueness: none
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="adminRole")
    def admin_role(self) -> Optional[bool]:
        """
        (Updatable) If true, then the role provides administrative access privileges. READ-ONLY.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: request
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "admin_role")

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[str]:
        """
        (Updatable) App identifier

        **SCIM++ Properties:**
        * caseExact: true
        * idcsAddedSinceVersion: 3
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="appName")
    def app_name(self) -> Optional[str]:
        """
        (Updatable) Name of parent App. READ-ONLY.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: request
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "app_name")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) The displayName of the User or App who modified this Resource

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter(name="legacyGroupName")
    def legacy_group_name(self) -> Optional[str]:
        """
        (Updatable) The name of the legacy group associated with this AppRole.

        **SCIM++ Properties:**
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: request
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "legacy_group_name")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) The URI of the SCIM resource that represents the User or App who modified this Resource

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsDynamicResourceGroupGrant(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "appId":
            suggest = "app_id"
        elif key == "grantMechanism":
            suggest = "grant_mechanism"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsDynamicResourceGroupGrant. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsDynamicResourceGroupGrant.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsDynamicResourceGroupGrant.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app_id: Optional[str] = None,
                 grant_mechanism: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str app_id: (Updatable) App identifier
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsAddedSinceVersion: 3
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str grant_mechanism: (Updatable) Each value of grantMechanism indicates how (or by what component) some App (or App-Entitlement) was granted.\\nA customer or the UI should use only grantMechanism values that start with 'ADMINISTRATOR':\\n - 'ADMINISTRATOR_TO_USER' is for a direct grant to a specific User.\\n - 'ADMINISTRATOR_TO_GROUP' is for a grant to a specific Group, which results in indirect grants to Users who are members of that Group.\\n - 'ADMINISTRATOR_TO_APP' is for a grant to a specific App.  The grantee (client) App gains access to the granted (server) App.
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsAddedSinceVersion: 3
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) The URI of the SCIM resource that represents the User or App who modified this Resource
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param str value: (Updatable) Oracle Cloud Infrastructure Tag value
               
               **Added In:** 2011192329
               
               **SCIM++ Properties:**
               * caseExact: false
               * required: true
               * mutability: readWrite
               * returned: default
               * type: string
               * idcsSearchable: true
               * uniqueness: none
        """
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if grant_mechanism is not None:
            pulumi.set(__self__, "grant_mechanism", grant_mechanism)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[str]:
        """
        (Updatable) App identifier

        **SCIM++ Properties:**
        * caseExact: true
        * idcsAddedSinceVersion: 3
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="grantMechanism")
    def grant_mechanism(self) -> Optional[str]:
        """
        (Updatable) Each value of grantMechanism indicates how (or by what component) some App (or App-Entitlement) was granted.\\nA customer or the UI should use only grantMechanism values that start with 'ADMINISTRATOR':\\n - 'ADMINISTRATOR_TO_USER' is for a direct grant to a specific User.\\n - 'ADMINISTRATOR_TO_GROUP' is for a grant to a specific Group, which results in indirect grants to Users who are members of that Group.\\n - 'ADMINISTRATOR_TO_APP' is for a grant to a specific App.  The grantee (client) App gains access to the granted (server) App.

        **SCIM++ Properties:**
        * caseExact: true
        * idcsAddedSinceVersion: 3
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "grant_mechanism")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) The URI of the SCIM resource that represents the User or App who modified this Resource

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        (Updatable) Oracle Cloud Infrastructure Tag value

        **Added In:** 2011192329

        **SCIM++ Properties:**
        * caseExact: false
        * required: true
        * mutability: readWrite
        * returned: default
        * type: string
        * idcsSearchable: true
        * uniqueness: none
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsDynamicResourceGroupIdcsCreatedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str value: (Updatable) Oracle Cloud Infrastructure Tag value
               
               **Added In:** 2011192329
               
               **SCIM++ Properties:**
               * caseExact: false
               * required: true
               * mutability: readWrite
               * returned: default
               * type: string
               * idcsSearchable: true
               * uniqueness: none
        :param str display: (Updatable) The displayName of the User or App who modified this Resource
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ocid: (Updatable) Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: default
               * type: string
               * uniqueness: global
        :param str ref: (Updatable) The URI of the SCIM resource that represents the User or App who modified this Resource
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param str type: (Updatable) The type of resource, User or App, that modified this Resource
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        """
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        (Updatable) Oracle Cloud Infrastructure Tag value

        **Added In:** 2011192329

        **SCIM++ Properties:**
        * caseExact: false
        * required: true
        * mutability: readWrite
        * returned: default
        * type: string
        * idcsSearchable: true
        * uniqueness: none
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) The displayName of the User or App who modified this Resource

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        """
        (Updatable) Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: default
        * type: string
        * uniqueness: global
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) The URI of the SCIM resource that represents the User or App who modified this Resource

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        (Updatable) The type of resource, User or App, that modified this Resource

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsDynamicResourceGroupIdcsLastModifiedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str value: (Updatable) Oracle Cloud Infrastructure Tag value
               
               **Added In:** 2011192329
               
               **SCIM++ Properties:**
               * caseExact: false
               * required: true
               * mutability: readWrite
               * returned: default
               * type: string
               * idcsSearchable: true
               * uniqueness: none
        :param str display: (Updatable) The displayName of the User or App who modified this Resource
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ocid: (Updatable) Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: default
               * type: string
               * uniqueness: global
        :param str ref: (Updatable) The URI of the SCIM resource that represents the User or App who modified this Resource
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param str type: (Updatable) The type of resource, User or App, that modified this Resource
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        """
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        (Updatable) Oracle Cloud Infrastructure Tag value

        **Added In:** 2011192329

        **SCIM++ Properties:**
        * caseExact: false
        * required: true
        * mutability: readWrite
        * returned: default
        * type: string
        * idcsSearchable: true
        * uniqueness: none
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) The displayName of the User or App who modified this Resource

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        """
        (Updatable) Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: default
        * type: string
        * uniqueness: global
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) The URI of the SCIM resource that represents the User or App who modified this Resource

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        (Updatable) The type of resource, User or App, that modified this Resource

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsDynamicResourceGroupMeta(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastModified":
            suggest = "last_modified"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsDynamicResourceGroupMeta. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsDynamicResourceGroupMeta.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsDynamicResourceGroupMeta.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param str created: (Updatable) The DateTime the Resource was added to the Service Provider
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: dateTime
               * uniqueness: none
        :param str last_modified: (Updatable) The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: dateTime
               * uniqueness: none
        :param str location: (Updatable) The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str resource_type: (Updatable) Name of the resource type of the resource--for example, Users or Groups
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str version: (Updatable) The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        """
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        """
        (Updatable) The DateTime the Resource was added to the Service Provider

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: dateTime
        * uniqueness: none
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        """
        (Updatable) The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: dateTime
        * uniqueness: none
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        """
        (Updatable) The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        """
        (Updatable) Name of the resource type of the resource--for example, Users or Groups

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        (Updatable) The version of the Resource being returned. This value must be the same as the ETag HTTP response header.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class DomainsDynamicResourceGroupTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: (Updatable) Oracle Cloud Infrastructure Tag key
               
               **Added In:** 2011192329
               
               **SCIM++ Properties:**
               * caseExact: false
               * type: string
               * required: true
               * mutability: readWrite
               * returned: default
               * idcsSearchable: true
               * uniqueness: none
        :param str value: (Updatable) Oracle Cloud Infrastructure Tag value
               
               **Added In:** 2011192329
               
               **SCIM++ Properties:**
               * caseExact: false
               * required: true
               * mutability: readWrite
               * returned: default
               * type: string
               * idcsSearchable: true
               * uniqueness: none
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        (Updatable) Oracle Cloud Infrastructure Tag key

        **Added In:** 2011192329

        **SCIM++ Properties:**
        * caseExact: false
        * type: string
        * required: true
        * mutability: readWrite
        * returned: default
        * idcsSearchable: true
        * uniqueness: none
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        (Updatable) Oracle Cloud Infrastructure Tag value

        **Added In:** 2011192329

        **SCIM++ Properties:**
        * caseExact: false
        * required: true
        * mutability: readWrite
        * returned: default
        * type: string
        * idcsSearchable: true
        * uniqueness: none
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTags(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "definedTags":
            suggest = "defined_tags"
        elif key == "freeformTags":
            suggest = "freeform_tags"
        elif key == "tagSlug":
            suggest = "tag_slug"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTags. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTags.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTags.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 defined_tags: Optional[Sequence['outputs.DomainsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagsDefinedTag']] = None,
                 freeform_tags: Optional[Sequence['outputs.DomainsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagsFreeformTag']] = None,
                 tag_slug: Optional[str] = None):
        """
        :param Sequence['DomainsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagsDefinedTagArgs'] defined_tags: (Updatable) Oracle Cloud Infrastructure Defined Tags
               
               **Added In:** 2011192329
               
               **SCIM++ Properties:**
               * idcsCompositeKey: [namespace, key, value]
               * type: complex
               * idcsSearchable: true
               * required: false
               * mutability: readWrite
               * multiValued: true
               * returned: default
        :param Sequence['DomainsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagsFreeformTagArgs'] freeform_tags: (Updatable) Oracle Cloud Infrastructure Freeform Tags
               
               **Added In:** 2011192329
               
               **SCIM++ Properties:**
               * idcsCompositeKey: [key, value]
               * idcsSearchable: true
               * type: complex
               * required: false
               * mutability: readWrite
               * returned: default
               * multiValued: true
        :param str tag_slug: (Updatable) Oracle Cloud Infrastructure Tag slug
               
               **Added In:** 2011192329
               
               **SCIM++ Properties:**
               * type: binary
               * mutability: readOnly
               * returned: request
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if tag_slug is not None:
            pulumi.set(__self__, "tag_slug", tag_slug)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Sequence['outputs.DomainsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagsDefinedTag']]:
        """
        (Updatable) Oracle Cloud Infrastructure Defined Tags

        **Added In:** 2011192329

        **SCIM++ Properties:**
        * idcsCompositeKey: [namespace, key, value]
        * type: complex
        * idcsSearchable: true
        * required: false
        * mutability: readWrite
        * multiValued: true
        * returned: default
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Sequence['outputs.DomainsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagsFreeformTag']]:
        """
        (Updatable) Oracle Cloud Infrastructure Freeform Tags

        **Added In:** 2011192329

        **SCIM++ Properties:**
        * idcsCompositeKey: [key, value]
        * idcsSearchable: true
        * type: complex
        * required: false
        * mutability: readWrite
        * returned: default
        * multiValued: true
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="tagSlug")
    def tag_slug(self) -> Optional[str]:
        """
        (Updatable) Oracle Cloud Infrastructure Tag slug

        **Added In:** 2011192329

        **SCIM++ Properties:**
        * type: binary
        * mutability: readOnly
        * returned: request


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "tag_slug")


@pulumi.output_type
class DomainsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagsDefinedTag(dict):
    def __init__(__self__, *,
                 key: str,
                 namespace: str,
                 value: str):
        """
        :param str key: (Updatable) Oracle Cloud Infrastructure Tag key
               
               **Added In:** 2011192329
               
               **SCIM++ Properties:**
               * caseExact: false
               * type: string
               * required: true
               * mutability: readWrite
               * returned: default
               * idcsSearchable: true
               * uniqueness: none
        :param str namespace: (Updatable) Oracle Cloud Infrastructure Tag namespace
               
               **Added In:** 2011192329
               
               **SCIM++ Properties:**
               * caseExact: false
               * type: string
               * required: true
               * mutability: readWrite
               * returned: default
               * idcsSearchable: true
               * uniqueness: none
        :param str value: (Updatable) Oracle Cloud Infrastructure Tag value
               
               **Added In:** 2011192329
               
               **SCIM++ Properties:**
               * caseExact: false
               * required: true
               * mutability: readWrite
               * returned: default
               * type: string
               * idcsSearchable: true
               * uniqueness: none
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        (Updatable) Oracle Cloud Infrastructure Tag key

        **Added In:** 2011192329

        **SCIM++ Properties:**
        * caseExact: false
        * type: string
        * required: true
        * mutability: readWrite
        * returned: default
        * idcsSearchable: true
        * uniqueness: none
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        (Updatable) Oracle Cloud Infrastructure Tag namespace

        **Added In:** 2011192329

        **SCIM++ Properties:**
        * caseExact: false
        * type: string
        * required: true
        * mutability: readWrite
        * returned: default
        * idcsSearchable: true
        * uniqueness: none
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        (Updatable) Oracle Cloud Infrastructure Tag value

        **Added In:** 2011192329

        **SCIM++ Properties:**
        * caseExact: false
        * required: true
        * mutability: readWrite
        * returned: default
        * type: string
        * idcsSearchable: true
        * uniqueness: none
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagsFreeformTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: (Updatable) Oracle Cloud Infrastructure Tag key
               
               **Added In:** 2011192329
               
               **SCIM++ Properties:**
               * caseExact: false
               * type: string
               * required: true
               * mutability: readWrite
               * returned: default
               * idcsSearchable: true
               * uniqueness: none
        :param str value: (Updatable) Oracle Cloud Infrastructure Tag value
               
               **Added In:** 2011192329
               
               **SCIM++ Properties:**
               * caseExact: false
               * required: true
               * mutability: readWrite
               * returned: default
               * type: string
               * idcsSearchable: true
               * uniqueness: none
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        (Updatable) Oracle Cloud Infrastructure Tag key

        **Added In:** 2011192329

        **SCIM++ Properties:**
        * caseExact: false
        * type: string
        * required: true
        * mutability: readWrite
        * returned: default
        * idcsSearchable: true
        * uniqueness: none
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        (Updatable) Oracle Cloud Infrastructure Tag value

        **Added In:** 2011192329

        **SCIM++ Properties:**
        * caseExact: false
        * required: true
        * mutability: readWrite
        * returned: default
        * type: string
        * idcsSearchable: true
        * uniqueness: none
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsGroupIdcsCreatedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str value: (Updatable) The ID of the App.
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        :param str display: (Updatable) App Display Name
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * caseExact: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ocid: (Updatable) Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: default
               * type: string
               * uniqueness: global
        :param str ref: (Updatable) App URI
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param str type: (Updatable) The type of the entity that created this Group.
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * idcsDefaultValue: App
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        """
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        (Updatable) The ID of the App.

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) App Display Name

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * caseExact: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        """
        (Updatable) Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: default
        * type: string
        * uniqueness: global
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) App URI

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        (Updatable) The type of the entity that created this Group.

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * idcsDefaultValue: App
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsGroupIdcsLastModifiedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str value: (Updatable) The ID of the App.
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        :param str display: (Updatable) App Display Name
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * caseExact: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ocid: (Updatable) Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: default
               * type: string
               * uniqueness: global
        :param str ref: (Updatable) App URI
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param str type: (Updatable) The type of the entity that created this Group.
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * idcsDefaultValue: App
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        """
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        (Updatable) The ID of the App.

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) App Display Name

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * caseExact: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        """
        (Updatable) Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: default
        * type: string
        * uniqueness: global
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) App URI

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        (Updatable) The type of the entity that created this Group.

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * idcsDefaultValue: App
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsGroupMember(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dateAdded":
            suggest = "date_added"
        elif key == "membershipOcid":
            suggest = "membership_ocid"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsGroupMember. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsGroupMember.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsGroupMember.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 value: str,
                 date_added: Optional[str] = None,
                 display: Optional[str] = None,
                 membership_ocid: Optional[str] = None,
                 name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None):
        """
        :param str type: (Updatable) The type of the entity that created this Group.
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * idcsDefaultValue: App
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        :param str value: (Updatable) The ID of the App.
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        :param str date_added: (Updatable) The DateTime the member was added to the Group.
               
               **Added In:** 2012271618
               
               **SCIM++ Properties:**
               * caseExact: false
               * multiValued: false
               * mutability: readOnly
               * returned: default
               * type: dateTime
               * uniqueness: none
        :param str display: (Updatable) App Display Name
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * caseExact: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str membership_ocid: (Updatable) Membership Ocid
               
               **Added In:** 2102181953
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str name: (Updatable) PasswordPolicy Name
               
               **Added In:** 20.1.3
               
               **SCIM++ Properties:**
               * caseExact: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ocid: (Updatable) Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: default
               * type: string
               * uniqueness: global
        :param str ref: (Updatable) App URI
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if date_added is not None:
            pulumi.set(__self__, "date_added", date_added)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if membership_ocid is not None:
            pulumi.set(__self__, "membership_ocid", membership_ocid)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        (Updatable) The type of the entity that created this Group.

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * idcsDefaultValue: App
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        (Updatable) The ID of the App.

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="dateAdded")
    def date_added(self) -> Optional[str]:
        """
        (Updatable) The DateTime the member was added to the Group.

        **Added In:** 2012271618

        **SCIM++ Properties:**
        * caseExact: false
        * multiValued: false
        * mutability: readOnly
        * returned: default
        * type: dateTime
        * uniqueness: none
        """
        return pulumi.get(self, "date_added")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) App Display Name

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * caseExact: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter(name="membershipOcid")
    def membership_ocid(self) -> Optional[str]:
        """
        (Updatable) Membership Ocid

        **Added In:** 2102181953

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "membership_ocid")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        (Updatable) PasswordPolicy Name

        **Added In:** 20.1.3

        **SCIM++ Properties:**
        * caseExact: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        """
        (Updatable) Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: default
        * type: string
        * uniqueness: global
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) App URI

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsGroupMeta(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastModified":
            suggest = "last_modified"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsGroupMeta. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsGroupMeta.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsGroupMeta.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param str created: (Updatable) The DateTime the Resource was added to the Service Provider
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: dateTime
               * uniqueness: none
        :param str last_modified: (Updatable) The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: dateTime
               * uniqueness: none
        :param str location: (Updatable) The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str resource_type: (Updatable) Name of the resource type of the resource--for example, Users or Groups
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str version: (Updatable) The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        """
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        """
        (Updatable) The DateTime the Resource was added to the Service Provider

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: dateTime
        * uniqueness: none
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        """
        (Updatable) The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: dateTime
        * uniqueness: none
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        """
        (Updatable) The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        """
        (Updatable) Name of the resource type of the resource--for example, Users or Groups

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        (Updatable) The version of the Resource being returned. This value must be the same as the ETag HTTP response header.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class DomainsGroupTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: (Updatable) Oracle Cloud Infrastructure Tag key
               
               **Added In:** 2011192329
               
               **SCIM++ Properties:**
               * caseExact: false
               * type: string
               * required: true
               * mutability: readWrite
               * returned: default
               * idcsSearchable: true
               * uniqueness: none
        :param str value: (Updatable) The ID of the App.
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        (Updatable) Oracle Cloud Infrastructure Tag key

        **Added In:** 2011192329

        **SCIM++ Properties:**
        * caseExact: false
        * type: string
        * required: true
        * mutability: readWrite
        * returned: default
        * idcsSearchable: true
        * uniqueness: none
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        (Updatable) The ID of the App.

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsGroupUrnietfparamsscimschemasoracleidcsextensionOciTags(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "definedTags":
            suggest = "defined_tags"
        elif key == "freeformTags":
            suggest = "freeform_tags"
        elif key == "tagSlug":
            suggest = "tag_slug"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsGroupUrnietfparamsscimschemasoracleidcsextensionOciTags. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsGroupUrnietfparamsscimschemasoracleidcsextensionOciTags.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsGroupUrnietfparamsscimschemasoracleidcsextensionOciTags.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 defined_tags: Optional[Sequence['outputs.DomainsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagsDefinedTag']] = None,
                 freeform_tags: Optional[Sequence['outputs.DomainsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagsFreeformTag']] = None,
                 tag_slug: Optional[str] = None):
        """
        :param Sequence['DomainsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagsDefinedTagArgs'] defined_tags: (Updatable) Oracle Cloud Infrastructure Defined Tags
               
               **Added In:** 2011192329
               
               **SCIM++ Properties:**
               * idcsCompositeKey: [namespace, key, value]
               * type: complex
               * idcsSearchable: true
               * required: false
               * mutability: readWrite
               * multiValued: true
               * returned: default
        :param Sequence['DomainsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagsFreeformTagArgs'] freeform_tags: (Updatable) Oracle Cloud Infrastructure Freeform Tags
               
               **Added In:** 2011192329
               
               **SCIM++ Properties:**
               * idcsCompositeKey: [key, value]
               * idcsSearchable: true
               * type: complex
               * required: false
               * mutability: readWrite
               * returned: default
               * multiValued: true
        :param str tag_slug: (Updatable) Oracle Cloud Infrastructure Tag slug
               
               **Added In:** 2011192329
               
               **SCIM++ Properties:**
               * type: binary
               * mutability: readOnly
               * returned: request
        """
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if tag_slug is not None:
            pulumi.set(__self__, "tag_slug", tag_slug)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Sequence['outputs.DomainsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagsDefinedTag']]:
        """
        (Updatable) Oracle Cloud Infrastructure Defined Tags

        **Added In:** 2011192329

        **SCIM++ Properties:**
        * idcsCompositeKey: [namespace, key, value]
        * type: complex
        * idcsSearchable: true
        * required: false
        * mutability: readWrite
        * multiValued: true
        * returned: default
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Sequence['outputs.DomainsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagsFreeformTag']]:
        """
        (Updatable) Oracle Cloud Infrastructure Freeform Tags

        **Added In:** 2011192329

        **SCIM++ Properties:**
        * idcsCompositeKey: [key, value]
        * idcsSearchable: true
        * type: complex
        * required: false
        * mutability: readWrite
        * returned: default
        * multiValued: true
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="tagSlug")
    def tag_slug(self) -> Optional[str]:
        """
        (Updatable) Oracle Cloud Infrastructure Tag slug

        **Added In:** 2011192329

        **SCIM++ Properties:**
        * type: binary
        * mutability: readOnly
        * returned: request
        """
        return pulumi.get(self, "tag_slug")


@pulumi.output_type
class DomainsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagsDefinedTag(dict):
    def __init__(__self__, *,
                 key: str,
                 namespace: str,
                 value: str):
        """
        :param str key: (Updatable) Oracle Cloud Infrastructure Tag key
               
               **Added In:** 2011192329
               
               **SCIM++ Properties:**
               * caseExact: false
               * type: string
               * required: true
               * mutability: readWrite
               * returned: default
               * idcsSearchable: true
               * uniqueness: none
        :param str namespace: (Updatable) Oracle Cloud Infrastructure Tag namespace
               
               **Added In:** 2011192329
               
               **SCIM++ Properties:**
               * caseExact: false
               * type: string
               * required: true
               * mutability: readWrite
               * returned: default
               * idcsSearchable: true
               * uniqueness: none
        :param str value: (Updatable) The ID of the App.
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        (Updatable) Oracle Cloud Infrastructure Tag key

        **Added In:** 2011192329

        **SCIM++ Properties:**
        * caseExact: false
        * type: string
        * required: true
        * mutability: readWrite
        * returned: default
        * idcsSearchable: true
        * uniqueness: none
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        (Updatable) Oracle Cloud Infrastructure Tag namespace

        **Added In:** 2011192329

        **SCIM++ Properties:**
        * caseExact: false
        * type: string
        * required: true
        * mutability: readWrite
        * returned: default
        * idcsSearchable: true
        * uniqueness: none
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        (Updatable) The ID of the App.

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagsFreeformTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: (Updatable) Oracle Cloud Infrastructure Tag key
               
               **Added In:** 2011192329
               
               **SCIM++ Properties:**
               * caseExact: false
               * type: string
               * required: true
               * mutability: readWrite
               * returned: default
               * idcsSearchable: true
               * uniqueness: none
        :param str value: (Updatable) The ID of the App.
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        (Updatable) Oracle Cloud Infrastructure Tag key

        **Added In:** 2011192329

        **SCIM++ Properties:**
        * caseExact: false
        * type: string
        * required: true
        * mutability: readWrite
        * returned: default
        * idcsSearchable: true
        * uniqueness: none
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        (Updatable) The ID of the App.

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "domainLevelSchema":
            suggest = "domain_level_schema"
        elif key == "domainLevelSchemaNames":
            suggest = "domain_level_schema_names"
        elif key == "instanceLevelSchema":
            suggest = "instance_level_schema"
        elif key == "instanceLevelSchemaNames":
            suggest = "instance_level_schema_names"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 domain_level_schema: Optional[str] = None,
                 domain_level_schema_names: Optional[Sequence['outputs.DomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupDomainLevelSchemaName']] = None,
                 instance_level_schema: Optional[str] = None,
                 instance_level_schema_names: Optional[Sequence['outputs.DomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupInstanceLevelSchemaName']] = None):
        """
        :param str domain_level_schema: (Updatable) DBCS Domain-level schema-name.  This attribute refers implicitly to a value of 'domainLevelSchemaNames' for a particular DB Domain.
               
               **Added In:** 18.2.4
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * idcsSensitive: none
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: request
               * type: string
               * uniqueness: none
        :param Sequence['DomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupDomainLevelSchemaNameArgs'] domain_level_schema_names: (Updatable) DBCS Domain-level schema-names. Each value is specific to a DB Domain.
               
               **Added In:** 18.2.4
               
               **SCIM++ Properties:**
               * idcsCompositeKey: [domainName, schemaName]
               * idcsSearchable: true
               * multiValued: true
               * mutability: readOnly
               * required: false
               * returned: request
               * type: complex
        :param str instance_level_schema: (Updatable) DBCS instance-level schema-name. This attribute refers implicitly to a value of 'instanceLevelSchemaNames' for a particular DB Instance.
               
               **Added In:** 18.2.4
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * idcsSensitive: none
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: request
               * type: string
               * uniqueness: none
        :param Sequence['DomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupInstanceLevelSchemaNameArgs'] instance_level_schema_names: (Updatable) DBCS instance-level schema-names. Each schema-name is specific to a DB Instance.
               
               **Added In:** 18.2.4
               
               **SCIM++ Properties:**
               * idcsCompositeKey: [dbInstanceId, schemaName]
               * idcsSearchable: true
               * multiValued: true
               * mutability: readOnly
               * required: false
               * returned: request
               * type: complex
        """
        if domain_level_schema is not None:
            pulumi.set(__self__, "domain_level_schema", domain_level_schema)
        if domain_level_schema_names is not None:
            pulumi.set(__self__, "domain_level_schema_names", domain_level_schema_names)
        if instance_level_schema is not None:
            pulumi.set(__self__, "instance_level_schema", instance_level_schema)
        if instance_level_schema_names is not None:
            pulumi.set(__self__, "instance_level_schema_names", instance_level_schema_names)

    @property
    @pulumi.getter(name="domainLevelSchema")
    def domain_level_schema(self) -> Optional[str]:
        """
        (Updatable) DBCS Domain-level schema-name.  This attribute refers implicitly to a value of 'domainLevelSchemaNames' for a particular DB Domain.

        **Added In:** 18.2.4

        **SCIM++ Properties:**
        * idcsSearchable: false
        * idcsSensitive: none
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: request
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "domain_level_schema")

    @property
    @pulumi.getter(name="domainLevelSchemaNames")
    def domain_level_schema_names(self) -> Optional[Sequence['outputs.DomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupDomainLevelSchemaName']]:
        """
        (Updatable) DBCS Domain-level schema-names. Each value is specific to a DB Domain.

        **Added In:** 18.2.4

        **SCIM++ Properties:**
        * idcsCompositeKey: [domainName, schemaName]
        * idcsSearchable: true
        * multiValued: true
        * mutability: readOnly
        * required: false
        * returned: request
        * type: complex
        """
        return pulumi.get(self, "domain_level_schema_names")

    @property
    @pulumi.getter(name="instanceLevelSchema")
    def instance_level_schema(self) -> Optional[str]:
        """
        (Updatable) DBCS instance-level schema-name. This attribute refers implicitly to a value of 'instanceLevelSchemaNames' for a particular DB Instance.

        **Added In:** 18.2.4

        **SCIM++ Properties:**
        * idcsSearchable: false
        * idcsSensitive: none
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: request
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "instance_level_schema")

    @property
    @pulumi.getter(name="instanceLevelSchemaNames")
    def instance_level_schema_names(self) -> Optional[Sequence['outputs.DomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupInstanceLevelSchemaName']]:
        """
        (Updatable) DBCS instance-level schema-names. Each schema-name is specific to a DB Instance.

        **Added In:** 18.2.4

        **SCIM++ Properties:**
        * idcsCompositeKey: [dbInstanceId, schemaName]
        * idcsSearchable: true
        * multiValued: true
        * mutability: readOnly
        * required: false
        * returned: request
        * type: complex
        """
        return pulumi.get(self, "instance_level_schema_names")


@pulumi.output_type
class DomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupDomainLevelSchemaName(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "domainName":
            suggest = "domain_name"
        elif key == "schemaName":
            suggest = "schema_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupDomainLevelSchemaName. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupDomainLevelSchemaName.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupDomainLevelSchemaName.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 domain_name: str,
                 schema_name: str):
        """
        :param str domain_name: (Updatable) DBCS Domain Name
               
               **Added In:** 18.2.4
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        :param str schema_name: (Updatable) The DBCS schema-name granted to this Group for the DB instance that 'dbInstanceId' specifies.
               
               **Added In:** 18.2.4
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        """
        pulumi.set(__self__, "domain_name", domain_name)
        pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> str:
        """
        (Updatable) DBCS Domain Name

        **Added In:** 18.2.4

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "domain_name")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> str:
        """
        (Updatable) The DBCS schema-name granted to this Group for the DB instance that 'dbInstanceId' specifies.

        **Added In:** 18.2.4

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "schema_name")


@pulumi.output_type
class DomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupInstanceLevelSchemaName(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dbInstanceId":
            suggest = "db_instance_id"
        elif key == "schemaName":
            suggest = "schema_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupInstanceLevelSchemaName. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupInstanceLevelSchemaName.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupInstanceLevelSchemaName.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 db_instance_id: str,
                 schema_name: str):
        """
        :param str db_instance_id: (Updatable) App Id of DBCS App instance
               
               **Added In:** 18.2.4
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        :param str schema_name: (Updatable) The DBCS schema-name granted to this Group for the DB instance that 'dbInstanceId' specifies.
               
               **Added In:** 18.2.4
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        """
        pulumi.set(__self__, "db_instance_id", db_instance_id)
        pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter(name="dbInstanceId")
    def db_instance_id(self) -> str:
        """
        (Updatable) App Id of DBCS App instance

        **Added In:** 18.2.4

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "db_instance_id")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> str:
        """
        (Updatable) The DBCS schema-name granted to this Group for the DB instance that 'dbInstanceId' specifies.

        **Added In:** 18.2.4

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "schema_name")


@pulumi.output_type
class DomainsGroupUrnietfparamsscimschemasoracleidcsextensiondynamicGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "membershipRule":
            suggest = "membership_rule"
        elif key == "membershipType":
            suggest = "membership_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsGroupUrnietfparamsscimschemasoracleidcsextensiondynamicGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsGroupUrnietfparamsscimschemasoracleidcsextensiondynamicGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsGroupUrnietfparamsscimschemasoracleidcsextensiondynamicGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 membership_rule: Optional[str] = None,
                 membership_type: Optional[str] = None):
        """
        :param str membership_rule: (Updatable) Membership rule
               
               **Added In:** 19.2.1
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str membership_type: (Updatable) Membership type
               
               **Added In:** 19.2.1
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        """
        if membership_rule is not None:
            pulumi.set(__self__, "membership_rule", membership_rule)
        if membership_type is not None:
            pulumi.set(__self__, "membership_type", membership_type)

    @property
    @pulumi.getter(name="membershipRule")
    def membership_rule(self) -> Optional[str]:
        """
        (Updatable) Membership rule

        **Added In:** 19.2.1

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "membership_rule")

    @property
    @pulumi.getter(name="membershipType")
    def membership_type(self) -> Optional[str]:
        """
        (Updatable) Membership type

        **Added In:** 19.2.1

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "membership_type")


@pulumi.output_type
class DomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "appRoles":
            suggest = "app_roles"
        elif key == "creationMechanism":
            suggest = "creation_mechanism"
        elif key == "passwordPolicies":
            suggest = "password_policies"
        elif key == "syncedFromApps":
            suggest = "synced_from_apps"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app_roles: Optional[Sequence['outputs.DomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupAppRole']] = None,
                 creation_mechanism: Optional[str] = None,
                 description: Optional[str] = None,
                 grants: Optional[Sequence['outputs.DomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupGrant']] = None,
                 owners: Optional[Sequence['outputs.DomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupOwner']] = None,
                 password_policies: Optional[Sequence['outputs.DomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupPasswordPolicy']] = None,
                 synced_from_apps: Optional[Sequence['outputs.DomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupSyncedFromApp']] = None):
        """
        :param Sequence['DomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupAppRoleArgs'] app_roles: (Updatable) A list of appRoles that the user belongs to, either thorough direct membership, nested groups, or dynamically calculated
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsCompositeKey: [value]
               * idcsSearchable: true
               * multiValued: true
               * mutability: readOnly
               * required: false
               * returned: request
               * type: complex
               * uniqueness: none
        :param str creation_mechanism: (Updatable) Source from which this group got created.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsCsvAttributeNameMappings: [[defaultValue:import]]
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: request
               * type: string
               * uniqueness: none
        :param str description: (Updatable) Group description
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsCsvAttributeName: Description
               * idcsCsvAttributeNameMappings: [[columnHeaderName:Description]]
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param Sequence['DomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupGrantArgs'] grants: (Updatable) Grants assigned to group
               
               **SCIM++ Properties:**
               * idcsSearchable: true
               * multiValued: true
               * mutability: readOnly
               * required: false
               * returned: request
               * type: complex
               * uniqueness: none
        :param Sequence['DomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupOwnerArgs'] owners: (Updatable) Group owners
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsCompositeKey: [value, type]
               * idcsSearchable: true
               * multiValued: true
               * mutability: readWrite
               * required: false
               * returned: request
               * type: complex
               * uniqueness: none
        :param Sequence['DomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupPasswordPolicyArgs'] password_policies: (Updatable) Password Policy associated with this Group.
               
               **Added In:** 20.1.3
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsCompositeKey: [value]
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: request
               * type: complex
               * uniqueness: none
        :param Sequence['DomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupSyncedFromAppArgs'] synced_from_apps: (Updatable) The entity that created this Group.
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * idcsCompositeKey: [value]
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: request
               * type: complex
               * uniqueness: none
        """
        if app_roles is not None:
            pulumi.set(__self__, "app_roles", app_roles)
        if creation_mechanism is not None:
            pulumi.set(__self__, "creation_mechanism", creation_mechanism)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if grants is not None:
            pulumi.set(__self__, "grants", grants)
        if owners is not None:
            pulumi.set(__self__, "owners", owners)
        if password_policies is not None:
            pulumi.set(__self__, "password_policies", password_policies)
        if synced_from_apps is not None:
            pulumi.set(__self__, "synced_from_apps", synced_from_apps)

    @property
    @pulumi.getter(name="appRoles")
    def app_roles(self) -> Optional[Sequence['outputs.DomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupAppRole']]:
        """
        (Updatable) A list of appRoles that the user belongs to, either thorough direct membership, nested groups, or dynamically calculated

        **SCIM++ Properties:**
        * caseExact: false
        * idcsCompositeKey: [value]
        * idcsSearchable: true
        * multiValued: true
        * mutability: readOnly
        * required: false
        * returned: request
        * type: complex
        * uniqueness: none
        """
        return pulumi.get(self, "app_roles")

    @property
    @pulumi.getter(name="creationMechanism")
    def creation_mechanism(self) -> Optional[str]:
        """
        (Updatable) Source from which this group got created.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsCsvAttributeNameMappings: [[defaultValue:import]]
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: request
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "creation_mechanism")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        (Updatable) Group description

        **SCIM++ Properties:**
        * caseExact: false
        * idcsCsvAttributeName: Description
        * idcsCsvAttributeNameMappings: [[columnHeaderName:Description]]
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def grants(self) -> Optional[Sequence['outputs.DomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupGrant']]:
        """
        (Updatable) Grants assigned to group

        **SCIM++ Properties:**
        * idcsSearchable: true
        * multiValued: true
        * mutability: readOnly
        * required: false
        * returned: request
        * type: complex
        * uniqueness: none
        """
        return pulumi.get(self, "grants")

    @property
    @pulumi.getter
    def owners(self) -> Optional[Sequence['outputs.DomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupOwner']]:
        """
        (Updatable) Group owners

        **SCIM++ Properties:**
        * caseExact: false
        * idcsCompositeKey: [value, type]
        * idcsSearchable: true
        * multiValued: true
        * mutability: readWrite
        * required: false
        * returned: request
        * type: complex
        * uniqueness: none
        """
        return pulumi.get(self, "owners")

    @property
    @pulumi.getter(name="passwordPolicies")
    def password_policies(self) -> Optional[Sequence['outputs.DomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupPasswordPolicy']]:
        """
        (Updatable) Password Policy associated with this Group.

        **Added In:** 20.1.3

        **SCIM++ Properties:**
        * caseExact: false
        * idcsCompositeKey: [value]
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: request
        * type: complex
        * uniqueness: none
        """
        return pulumi.get(self, "password_policies")

    @property
    @pulumi.getter(name="syncedFromApps")
    def synced_from_apps(self) -> Optional[Sequence['outputs.DomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupSyncedFromApp']]:
        """
        (Updatable) The entity that created this Group.

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * idcsCompositeKey: [value]
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: request
        * type: complex
        * uniqueness: none
        """
        return pulumi.get(self, "synced_from_apps")


@pulumi.output_type
class DomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupAppRole(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adminRole":
            suggest = "admin_role"
        elif key == "appId":
            suggest = "app_id"
        elif key == "appName":
            suggest = "app_name"
        elif key == "legacyGroupName":
            suggest = "legacy_group_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupAppRole. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupAppRole.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupAppRole.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 value: str,
                 admin_role: Optional[bool] = None,
                 app_id: Optional[str] = None,
                 app_name: Optional[str] = None,
                 display: Optional[str] = None,
                 legacy_group_name: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str value: (Updatable) The ID of the App.
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        :param bool admin_role: (Updatable) If true, then the role provides administrative access privileges. READ-ONLY.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: request
               * type: boolean
               * uniqueness: none
        :param str app_id: (Updatable) App identifier
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str app_name: (Updatable) Name of parent App. READ-ONLY.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: request
               * type: string
               * uniqueness: none
        :param str display: (Updatable) App Display Name
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * caseExact: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str legacy_group_name: (Updatable) The name of the legacy group associated with this AppRole.
               
               **SCIM++ Properties:**
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) App URI
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param str type: (Updatable) The type of the entity that created this Group.
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * idcsDefaultValue: App
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        """
        pulumi.set(__self__, "value", value)
        if admin_role is not None:
            pulumi.set(__self__, "admin_role", admin_role)
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if app_name is not None:
            pulumi.set(__self__, "app_name", app_name)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if legacy_group_name is not None:
            pulumi.set(__self__, "legacy_group_name", legacy_group_name)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        (Updatable) The ID of the App.

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="adminRole")
    def admin_role(self) -> Optional[bool]:
        """
        (Updatable) If true, then the role provides administrative access privileges. READ-ONLY.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: request
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "admin_role")

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[str]:
        """
        (Updatable) App identifier

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="appName")
    def app_name(self) -> Optional[str]:
        """
        (Updatable) Name of parent App. READ-ONLY.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: request
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "app_name")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) App Display Name

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * caseExact: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter(name="legacyGroupName")
    def legacy_group_name(self) -> Optional[str]:
        """
        (Updatable) The name of the legacy group associated with this AppRole.

        **SCIM++ Properties:**
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "legacy_group_name")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) App URI

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        (Updatable) The type of the entity that created this Group.

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * idcsDefaultValue: App
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupGrant(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "appId":
            suggest = "app_id"
        elif key == "grantMechanism":
            suggest = "grant_mechanism"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupGrant. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupGrant.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupGrant.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app_id: Optional[str] = None,
                 grant_mechanism: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str app_id: (Updatable) App identifier
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str grant_mechanism: (Updatable) Each value of grantMechanism indicates how (or by what component) some App (or App-Entitlement) was granted.\\nA customer or the UI should use only grantMechanism values that start with 'ADMINISTRATOR':\\n - 'ADMINISTRATOR_TO_USER' is for a direct grant to a specific User.\\n - 'ADMINISTRATOR_TO_GROUP' is for a grant to a specific Group, which results in indirect grants to Users who are members of that Group.\\n - 'ADMINISTRATOR_TO_APP' is for a grant to a specific App.  The grantee (client) App gains access to the granted (server) App.
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) App URI
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param str value: (Updatable) The ID of the App.
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        """
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if grant_mechanism is not None:
            pulumi.set(__self__, "grant_mechanism", grant_mechanism)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[str]:
        """
        (Updatable) App identifier

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="grantMechanism")
    def grant_mechanism(self) -> Optional[str]:
        """
        (Updatable) Each value of grantMechanism indicates how (or by what component) some App (or App-Entitlement) was granted.\\nA customer or the UI should use only grantMechanism values that start with 'ADMINISTRATOR':\\n - 'ADMINISTRATOR_TO_USER' is for a direct grant to a specific User.\\n - 'ADMINISTRATOR_TO_GROUP' is for a grant to a specific Group, which results in indirect grants to Users who are members of that Group.\\n - 'ADMINISTRATOR_TO_APP' is for a grant to a specific App.  The grantee (client) App gains access to the granted (server) App.

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "grant_mechanism")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) App URI

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        (Updatable) The ID of the App.

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupOwner(dict):
    def __init__(__self__, *,
                 type: str,
                 value: str,
                 display: Optional[str] = None,
                 ref: Optional[str] = None):
        """
        :param str type: (Updatable) The type of the entity that created this Group.
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * idcsDefaultValue: App
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        :param str value: (Updatable) The ID of the App.
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        :param str display: (Updatable) App Display Name
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * caseExact: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) App URI
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        (Updatable) The type of the entity that created this Group.

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * idcsDefaultValue: App
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        (Updatable) The ID of the App.

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) App Display Name

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * caseExact: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) App URI

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupPasswordPolicy(dict):
    def __init__(__self__, *,
                 value: str,
                 name: Optional[str] = None,
                 priority: Optional[int] = None,
                 ref: Optional[str] = None):
        """
        :param str value: (Updatable) The ID of the App.
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        :param str name: (Updatable) PasswordPolicy Name
               
               **Added In:** 20.1.3
               
               **SCIM++ Properties:**
               * caseExact: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param int priority: (Updatable) PasswordPolicy priority
               
               **Added In:** 20.1.3
               
               **SCIM++ Properties:**
               * caseExact: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: integer
               * uniqueness: none
        :param str ref: (Updatable) App URI
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        """
        pulumi.set(__self__, "value", value)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        (Updatable) The ID of the App.

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        (Updatable) PasswordPolicy Name

        **Added In:** 20.1.3

        **SCIM++ Properties:**
        * caseExact: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        """
        (Updatable) PasswordPolicy priority

        **Added In:** 20.1.3

        **SCIM++ Properties:**
        * caseExact: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: integer
        * uniqueness: none
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) App URI

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupSyncedFromApp(dict):
    def __init__(__self__, *,
                 type: str,
                 value: str,
                 display: Optional[str] = None,
                 ref: Optional[str] = None):
        """
        :param str type: (Updatable) The type of the entity that created this Group.
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * idcsDefaultValue: App
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        :param str value: (Updatable) The ID of the App.
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        :param str display: (Updatable) App Display Name
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * caseExact: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) App URI
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        (Updatable) The type of the entity that created this Group.

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * idcsDefaultValue: App
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        (Updatable) The ID of the App.

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) App Display Name

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * caseExact: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) App URI

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsGroupUrnietfparamsscimschemasoracleidcsextensionposixGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "gidNumber":
            suggest = "gid_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsGroupUrnietfparamsscimschemasoracleidcsextensionposixGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsGroupUrnietfparamsscimschemasoracleidcsextensionposixGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsGroupUrnietfparamsscimschemasoracleidcsextensionposixGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 gid_number: Optional[int] = None):
        """
        :param int gid_number: (Updatable) Integer uniquely identifying a group in a POSIX administrative domain
               
               **SCIM++ Properties:**
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: request
               * type: integer
               * uniqueness: server
        """
        if gid_number is not None:
            pulumi.set(__self__, "gid_number", gid_number)

    @property
    @pulumi.getter(name="gidNumber")
    def gid_number(self) -> Optional[int]:
        """
        (Updatable) Integer uniquely identifying a group in a POSIX administrative domain

        **SCIM++ Properties:**
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: request
        * type: integer
        * uniqueness: server
        """
        return pulumi.get(self, "gid_number")


@pulumi.output_type
class DomainsGroupUrnietfparamsscimschemasoracleidcsextensionrequestableGroup(dict):
    def __init__(__self__, *,
                 requestable: Optional[bool] = None):
        """
        :param bool requestable: (Updatable) Flag controlling whether group membership can be request by user through self service console.
               
               **Added In:** 17.3.4
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * idcsCsvAttributeNameMappings: [[columnHeaderName:Requestable, mapsTo:requestable]]
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: request
               * type: boolean
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        if requestable is not None:
            pulumi.set(__self__, "requestable", requestable)

    @property
    @pulumi.getter
    def requestable(self) -> Optional[bool]:
        """
        (Updatable) Flag controlling whether group membership can be request by user through self service console.

        **Added In:** 17.3.4

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * idcsCsvAttributeNameMappings: [[columnHeaderName:Requestable, mapsTo:requestable]]
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: request
        * type: boolean
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "requestable")


@pulumi.output_type
class DomainsIdentityProviderCorrelationPolicy(dict):
    def __init__(__self__, *,
                 type: str,
                 value: str,
                 display: Optional[str] = None,
                 ref: Optional[str] = None):
        """
        :param str type: (Updatable) Identity Provider Type
               
               **Added In:** 20.1.3
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        :param str value: (Updatable) Value of the tag.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        :param str display: (Updatable) A human readable name, primarily used for display purposes. READ-ONLY.
               
               **Added In:** 20.1.3
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) Group URI
               
               **Added In:** 2205120021
               
               **SCIM++ Properties:**
               * multiValued: false
               * mutability: readOnly
               * required: true
               * returned: default
               * type: reference
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        (Updatable) Identity Provider Type

        **Added In:** 20.1.3

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        (Updatable) Value of the tag.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) A human readable name, primarily used for display purposes. READ-ONLY.

        **Added In:** 20.1.3

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) Group URI

        **Added In:** 2205120021

        **SCIM++ Properties:**
        * multiValued: false
        * mutability: readOnly
        * required: true
        * returned: default
        * type: reference
        """
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsIdentityProviderIdcsCreatedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str value: (Updatable) Value of the tag.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        :param str display: (Updatable) A human readable name, primarily used for display purposes. READ-ONLY.
               
               **Added In:** 20.1.3
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ocid: (Updatable) Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: default
               * type: string
               * uniqueness: global
        :param str ref: (Updatable) Group URI
               
               **Added In:** 2205120021
               
               **SCIM++ Properties:**
               * multiValued: false
               * mutability: readOnly
               * required: true
               * returned: default
               * type: reference
        :param str type: (Updatable) Identity Provider Type
               
               **Added In:** 20.1.3
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        """
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        (Updatable) Value of the tag.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) A human readable name, primarily used for display purposes. READ-ONLY.

        **Added In:** 20.1.3

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        """
        (Updatable) Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: default
        * type: string
        * uniqueness: global
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) Group URI

        **Added In:** 2205120021

        **SCIM++ Properties:**
        * multiValued: false
        * mutability: readOnly
        * required: true
        * returned: default
        * type: reference
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        (Updatable) Identity Provider Type

        **Added In:** 20.1.3

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsIdentityProviderIdcsLastModifiedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str value: (Updatable) Value of the tag.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        :param str display: (Updatable) A human readable name, primarily used for display purposes. READ-ONLY.
               
               **Added In:** 20.1.3
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ocid: (Updatable) Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: default
               * type: string
               * uniqueness: global
        :param str ref: (Updatable) Group URI
               
               **Added In:** 2205120021
               
               **SCIM++ Properties:**
               * multiValued: false
               * mutability: readOnly
               * required: true
               * returned: default
               * type: reference
        :param str type: (Updatable) Identity Provider Type
               
               **Added In:** 20.1.3
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        """
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        (Updatable) Value of the tag.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) A human readable name, primarily used for display purposes. READ-ONLY.

        **Added In:** 20.1.3

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        """
        (Updatable) Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: default
        * type: string
        * uniqueness: global
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) Group URI

        **Added In:** 2205120021

        **SCIM++ Properties:**
        * multiValued: false
        * mutability: readOnly
        * required: true
        * returned: default
        * type: reference
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        (Updatable) Identity Provider Type

        **Added In:** 20.1.3

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsIdentityProviderJitUserProvAssignedGroup(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ref: Optional[str] = None):
        """
        :param str value: (Updatable) Value of the tag.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        :param str display: (Updatable) A human readable name, primarily used for display purposes. READ-ONLY.
               
               **Added In:** 20.1.3
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) Group URI
               
               **Added In:** 2205120021
               
               **SCIM++ Properties:**
               * multiValued: false
               * mutability: readOnly
               * required: true
               * returned: default
               * type: reference
        """
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        (Updatable) Value of the tag.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) A human readable name, primarily used for display purposes. READ-ONLY.

        **Added In:** 20.1.3

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) Group URI

        **Added In:** 2205120021

        **SCIM++ Properties:**
        * multiValued: false
        * mutability: readOnly
        * required: true
        * returned: default
        * type: reference
        """
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsIdentityProviderJitUserProvAttributes(dict):
    def __init__(__self__, *,
                 value: str,
                 ref: Optional[str] = None):
        """
        :param str value: (Updatable) Value of the tag.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) Group URI
               
               **Added In:** 2205120021
               
               **SCIM++ Properties:**
               * multiValued: false
               * mutability: readOnly
               * required: true
               * returned: default
               * type: reference
        """
        pulumi.set(__self__, "value", value)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        (Updatable) Value of the tag.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) Group URI

        **Added In:** 2205120021

        **SCIM++ Properties:**
        * multiValued: false
        * mutability: readOnly
        * required: true
        * returned: default
        * type: reference
        """
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsIdentityProviderJitUserProvGroupMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "idpGroup":
            suggest = "idp_group"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsIdentityProviderJitUserProvGroupMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsIdentityProviderJitUserProvGroupMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsIdentityProviderJitUserProvGroupMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 idp_group: str,
                 value: str,
                 ref: Optional[str] = None):
        """
        :param str idp_group: (Updatable) IDP Group Name
               
               **Added In:** 2205120021
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * type: string
        :param str value: (Updatable) Value of the tag.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) Group URI
               
               **Added In:** 2205120021
               
               **SCIM++ Properties:**
               * multiValued: false
               * mutability: readOnly
               * required: true
               * returned: default
               * type: reference
        """
        pulumi.set(__self__, "idp_group", idp_group)
        pulumi.set(__self__, "value", value)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter(name="idpGroup")
    def idp_group(self) -> str:
        """
        (Updatable) IDP Group Name

        **Added In:** 2205120021

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * type: string
        """
        return pulumi.get(self, "idp_group")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        (Updatable) Value of the tag.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) Group URI

        **Added In:** 2205120021

        **SCIM++ Properties:**
        * multiValued: false
        * mutability: readOnly
        * required: true
        * returned: default
        * type: reference
        """
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsIdentityProviderMeta(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastModified":
            suggest = "last_modified"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsIdentityProviderMeta. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsIdentityProviderMeta.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsIdentityProviderMeta.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param str created: (Updatable) The DateTime the Resource was added to the Service Provider
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: dateTime
               * uniqueness: none
        :param str last_modified: (Updatable) The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: dateTime
               * uniqueness: none
        :param str location: (Updatable) The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str resource_type: (Updatable) Name of the resource type of the resource--for example, Users or Groups
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str version: (Updatable) The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        """
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        """
        (Updatable) The DateTime the Resource was added to the Service Provider

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: dateTime
        * uniqueness: none
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        """
        (Updatable) The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: dateTime
        * uniqueness: none
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        """
        (Updatable) The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        """
        (Updatable) Name of the resource type of the resource--for example, Users or Groups

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        (Updatable) The version of the Resource being returned. This value must be the same as the ETag HTTP response header.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class DomainsIdentityProviderTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: (Updatable) Key or name of the tag.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        :param str value: (Updatable) Value of the tag.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        (Updatable) Key or name of the tag.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        (Updatable) Value of the tag.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountLinkingEnabled":
            suggest = "account_linking_enabled"
        elif key == "consumerKey":
            suggest = "consumer_key"
        elif key == "consumerSecret":
            suggest = "consumer_secret"
        elif key == "registrationEnabled":
            suggest = "registration_enabled"
        elif key == "serviceProviderName":
            suggest = "service_provider_name"
        elif key == "accessTokenUrl":
            suggest = "access_token_url"
        elif key == "adminScopes":
            suggest = "admin_scopes"
        elif key == "authzUrl":
            suggest = "authz_url"
        elif key == "clientCredentialInPayload":
            suggest = "client_credential_in_payload"
        elif key == "clockSkewInSeconds":
            suggest = "clock_skew_in_seconds"
        elif key == "discoveryUrl":
            suggest = "discovery_url"
        elif key == "idAttribute":
            suggest = "id_attribute"
        elif key == "profileUrl":
            suggest = "profile_url"
        elif key == "redirectUrl":
            suggest = "redirect_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_linking_enabled: bool,
                 consumer_key: str,
                 consumer_secret: str,
                 registration_enabled: bool,
                 service_provider_name: str,
                 access_token_url: Optional[str] = None,
                 admin_scopes: Optional[Sequence[str]] = None,
                 authz_url: Optional[str] = None,
                 client_credential_in_payload: Optional[bool] = None,
                 clock_skew_in_seconds: Optional[int] = None,
                 discovery_url: Optional[str] = None,
                 id_attribute: Optional[str] = None,
                 profile_url: Optional[str] = None,
                 redirect_url: Optional[str] = None,
                 scopes: Optional[Sequence[str]] = None,
                 status: Optional[str] = None):
        """
        :param bool account_linking_enabled: (Updatable) Whether account linking is enabled
               
               **Added In:** 20.1.3
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: boolean
               * uniqueness: none
        :param str consumer_key: (Updatable) Social IDP Client Application Client ID
               
               **Added In:** 20.1.3
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        :param str consumer_secret: (Updatable) Social IDP Client Application Client Secret
               
               **Added In:** 20.1.3
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * idcsSensitive: encrypt
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        :param bool registration_enabled: (Updatable) Whether registration is enabled
               
               **Added In:** 20.1.3
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: boolean
               * uniqueness: none
        :param str service_provider_name: (Updatable) Service Provider Name
               
               **Added In:** 20.1.3
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        :param str access_token_url: (Updatable) Social IDP Access token URL
               
               **Added In:** 20.1.3
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param Sequence[str] admin_scopes: (Updatable) Admin scope to request
               
               **Added In:** 20.1.3
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: true
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str authz_url: (Updatable) Social IDP Authorization URL
               
               **Added In:** 20.1.3
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param bool client_credential_in_payload: (Updatable) Whether the client credential is contained in payload
               
               **Added In:** 20.1.3
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: boolean
               * uniqueness: none
        :param int clock_skew_in_seconds: (Updatable) Social IDP allowed clock skew time
               
               **Added In:** 20.1.3
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: integer
               * uniqueness: none
        :param str discovery_url: (Updatable) Discovery URL
               
               **Added In:** 20.1.3
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str id_attribute: (Updatable) Id attribute used for account linking
               
               **Added In:** 20.1.3
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str profile_url: (Updatable) Social IDP User profile URL
               
               **Added In:** 20.1.3
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str redirect_url: (Updatable) redirect URL for social idp
               
               **Added In:** 20.1.3
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param Sequence[str] scopes: (Updatable) Scope to request
               
               **Added In:** 20.1.3
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: true
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str status: (Updatable) Status
               
               **Added In:** 20.1.3
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        """
        pulumi.set(__self__, "account_linking_enabled", account_linking_enabled)
        pulumi.set(__self__, "consumer_key", consumer_key)
        pulumi.set(__self__, "consumer_secret", consumer_secret)
        pulumi.set(__self__, "registration_enabled", registration_enabled)
        pulumi.set(__self__, "service_provider_name", service_provider_name)
        if access_token_url is not None:
            pulumi.set(__self__, "access_token_url", access_token_url)
        if admin_scopes is not None:
            pulumi.set(__self__, "admin_scopes", admin_scopes)
        if authz_url is not None:
            pulumi.set(__self__, "authz_url", authz_url)
        if client_credential_in_payload is not None:
            pulumi.set(__self__, "client_credential_in_payload", client_credential_in_payload)
        if clock_skew_in_seconds is not None:
            pulumi.set(__self__, "clock_skew_in_seconds", clock_skew_in_seconds)
        if discovery_url is not None:
            pulumi.set(__self__, "discovery_url", discovery_url)
        if id_attribute is not None:
            pulumi.set(__self__, "id_attribute", id_attribute)
        if profile_url is not None:
            pulumi.set(__self__, "profile_url", profile_url)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="accountLinkingEnabled")
    def account_linking_enabled(self) -> bool:
        """
        (Updatable) Whether account linking is enabled

        **Added In:** 20.1.3

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "account_linking_enabled")

    @property
    @pulumi.getter(name="consumerKey")
    def consumer_key(self) -> str:
        """
        (Updatable) Social IDP Client Application Client ID

        **Added In:** 20.1.3

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "consumer_key")

    @property
    @pulumi.getter(name="consumerSecret")
    def consumer_secret(self) -> str:
        """
        (Updatable) Social IDP Client Application Client Secret

        **Added In:** 20.1.3

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * idcsSensitive: encrypt
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "consumer_secret")

    @property
    @pulumi.getter(name="registrationEnabled")
    def registration_enabled(self) -> bool:
        """
        (Updatable) Whether registration is enabled

        **Added In:** 20.1.3

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "registration_enabled")

    @property
    @pulumi.getter(name="serviceProviderName")
    def service_provider_name(self) -> str:
        """
        (Updatable) Service Provider Name

        **Added In:** 20.1.3

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "service_provider_name")

    @property
    @pulumi.getter(name="accessTokenUrl")
    def access_token_url(self) -> Optional[str]:
        """
        (Updatable) Social IDP Access token URL

        **Added In:** 20.1.3

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "access_token_url")

    @property
    @pulumi.getter(name="adminScopes")
    def admin_scopes(self) -> Optional[Sequence[str]]:
        """
        (Updatable) Admin scope to request

        **Added In:** 20.1.3

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: true
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "admin_scopes")

    @property
    @pulumi.getter(name="authzUrl")
    def authz_url(self) -> Optional[str]:
        """
        (Updatable) Social IDP Authorization URL

        **Added In:** 20.1.3

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "authz_url")

    @property
    @pulumi.getter(name="clientCredentialInPayload")
    def client_credential_in_payload(self) -> Optional[bool]:
        """
        (Updatable) Whether the client credential is contained in payload

        **Added In:** 20.1.3

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "client_credential_in_payload")

    @property
    @pulumi.getter(name="clockSkewInSeconds")
    def clock_skew_in_seconds(self) -> Optional[int]:
        """
        (Updatable) Social IDP allowed clock skew time

        **Added In:** 20.1.3

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: integer
        * uniqueness: none
        """
        return pulumi.get(self, "clock_skew_in_seconds")

    @property
    @pulumi.getter(name="discoveryUrl")
    def discovery_url(self) -> Optional[str]:
        """
        (Updatable) Discovery URL

        **Added In:** 20.1.3

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "discovery_url")

    @property
    @pulumi.getter(name="idAttribute")
    def id_attribute(self) -> Optional[str]:
        """
        (Updatable) Id attribute used for account linking

        **Added In:** 20.1.3

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "id_attribute")

    @property
    @pulumi.getter(name="profileUrl")
    def profile_url(self) -> Optional[str]:
        """
        (Updatable) Social IDP User profile URL

        **Added In:** 20.1.3

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "profile_url")

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[str]:
        """
        (Updatable) redirect URL for social idp

        **Added In:** 20.1.3

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "redirect_url")

    @property
    @pulumi.getter
    def scopes(self) -> Optional[Sequence[str]]:
        """
        (Updatable) Scope to request

        **Added In:** 20.1.3

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: true
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "scopes")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        (Updatable) Status

        **Added In:** 20.1.3

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class DomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionx509identityProvider(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certMatchAttribute":
            suggest = "cert_match_attribute"
        elif key == "signingCertificateChains":
            suggest = "signing_certificate_chains"
        elif key == "userMatchAttribute":
            suggest = "user_match_attribute"
        elif key == "crlCheckOnOcspFailureEnabled":
            suggest = "crl_check_on_ocsp_failure_enabled"
        elif key == "crlEnabled":
            suggest = "crl_enabled"
        elif key == "crlLocation":
            suggest = "crl_location"
        elif key == "crlReloadDuration":
            suggest = "crl_reload_duration"
        elif key == "ocspAllowUnknownResponseStatus":
            suggest = "ocsp_allow_unknown_response_status"
        elif key == "ocspEnableSignedResponse":
            suggest = "ocsp_enable_signed_response"
        elif key == "ocspEnabled":
            suggest = "ocsp_enabled"
        elif key == "ocspResponderUrl":
            suggest = "ocsp_responder_url"
        elif key == "ocspRevalidateTime":
            suggest = "ocsp_revalidate_time"
        elif key == "ocspServerName":
            suggest = "ocsp_server_name"
        elif key == "ocspTrustCertChains":
            suggest = "ocsp_trust_cert_chains"
        elif key == "otherCertMatchAttribute":
            suggest = "other_cert_match_attribute"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionx509identityProvider. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionx509identityProvider.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionx509identityProvider.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cert_match_attribute: str,
                 signing_certificate_chains: Sequence[str],
                 user_match_attribute: str,
                 crl_check_on_ocsp_failure_enabled: Optional[bool] = None,
                 crl_enabled: Optional[bool] = None,
                 crl_location: Optional[str] = None,
                 crl_reload_duration: Optional[int] = None,
                 ocsp_allow_unknown_response_status: Optional[bool] = None,
                 ocsp_enable_signed_response: Optional[bool] = None,
                 ocsp_enabled: Optional[bool] = None,
                 ocsp_responder_url: Optional[str] = None,
                 ocsp_revalidate_time: Optional[int] = None,
                 ocsp_server_name: Optional[str] = None,
                 ocsp_trust_cert_chains: Optional[Sequence[str]] = None,
                 other_cert_match_attribute: Optional[str] = None):
        """
        :param str cert_match_attribute: (Updatable) X509 Certificate Matching Attribute
               
               **Added In:** 2010242156
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        :param Sequence[str] signing_certificate_chains: (Updatable) Certificate alias list to create a chain for the incoming client certificate
               
               **Added In:** 2010242156
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: true
               * mutability: readWrite
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        :param str user_match_attribute: (Updatable) This property specifies the userstore attribute value that must match the incoming certificate attribute.
               
               **Added In:** 2010242156
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        :param bool crl_check_on_ocsp_failure_enabled: (Updatable) Fallback on CRL Validation if OCSP fails.
               
               **Added In:** 2010242156
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: boolean
               * uniqueness: none
        :param bool crl_enabled: (Updatable) Set to true to enable CRL Validation
               
               **Added In:** 2010242156
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: boolean
               * uniqueness: none
        :param str crl_location: (Updatable) CRL Location URL
               
               **Added In:** 2010242156
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param int crl_reload_duration: (Updatable) Fetch the CRL contents every X minutes
               
               **Added In:** 2010242156
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: integer
               * uniqueness: none
        :param bool ocsp_allow_unknown_response_status: (Updatable) Allow access if OCSP response is UNKNOWN or OCSP Responder does not respond within the timeout duration
               
               **Added In:** 2010242156
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: boolean
               * uniqueness: none
        :param bool ocsp_enable_signed_response: (Updatable) Describes if the OCSP response is signed
               
               **Added In:** 2010242156
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: boolean
               * uniqueness: none
        :param bool ocsp_enabled: (Updatable) Set to true to enable OCSP Validation
               
               **Added In:** 2010242156
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: boolean
               * uniqueness: none
        :param str ocsp_responder_url: (Updatable) This property specifies OCSP Responder URL.
               
               **Added In:** 2010242156
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param int ocsp_revalidate_time: (Updatable) Revalidate OCSP status for user after X hours
               
               **Added In:** 2010242156
               
               **SCIM++ Properties:**
               * idcsMaxValue: 24
               * idcsMinValue: 0
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: integer
               * uniqueness: none
        :param str ocsp_server_name: (Updatable) This property specifies the OCSP Server alias name
               
               **Added In:** 2010242156
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param Sequence[str] ocsp_trust_cert_chains: (Updatable) OCSP Trusted Certificate Chain
               
               **Added In:** 2010242156
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: true
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str other_cert_match_attribute: (Updatable) Check for specific conditions of other certificate attributes
               
               **Added In:** 2010242156
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        """
        pulumi.set(__self__, "cert_match_attribute", cert_match_attribute)
        pulumi.set(__self__, "signing_certificate_chains", signing_certificate_chains)
        pulumi.set(__self__, "user_match_attribute", user_match_attribute)
        if crl_check_on_ocsp_failure_enabled is not None:
            pulumi.set(__self__, "crl_check_on_ocsp_failure_enabled", crl_check_on_ocsp_failure_enabled)
        if crl_enabled is not None:
            pulumi.set(__self__, "crl_enabled", crl_enabled)
        if crl_location is not None:
            pulumi.set(__self__, "crl_location", crl_location)
        if crl_reload_duration is not None:
            pulumi.set(__self__, "crl_reload_duration", crl_reload_duration)
        if ocsp_allow_unknown_response_status is not None:
            pulumi.set(__self__, "ocsp_allow_unknown_response_status", ocsp_allow_unknown_response_status)
        if ocsp_enable_signed_response is not None:
            pulumi.set(__self__, "ocsp_enable_signed_response", ocsp_enable_signed_response)
        if ocsp_enabled is not None:
            pulumi.set(__self__, "ocsp_enabled", ocsp_enabled)
        if ocsp_responder_url is not None:
            pulumi.set(__self__, "ocsp_responder_url", ocsp_responder_url)
        if ocsp_revalidate_time is not None:
            pulumi.set(__self__, "ocsp_revalidate_time", ocsp_revalidate_time)
        if ocsp_server_name is not None:
            pulumi.set(__self__, "ocsp_server_name", ocsp_server_name)
        if ocsp_trust_cert_chains is not None:
            pulumi.set(__self__, "ocsp_trust_cert_chains", ocsp_trust_cert_chains)
        if other_cert_match_attribute is not None:
            pulumi.set(__self__, "other_cert_match_attribute", other_cert_match_attribute)

    @property
    @pulumi.getter(name="certMatchAttribute")
    def cert_match_attribute(self) -> str:
        """
        (Updatable) X509 Certificate Matching Attribute

        **Added In:** 2010242156

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "cert_match_attribute")

    @property
    @pulumi.getter(name="signingCertificateChains")
    def signing_certificate_chains(self) -> Sequence[str]:
        """
        (Updatable) Certificate alias list to create a chain for the incoming client certificate

        **Added In:** 2010242156

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: true
        * mutability: readWrite
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "signing_certificate_chains")

    @property
    @pulumi.getter(name="userMatchAttribute")
    def user_match_attribute(self) -> str:
        """
        (Updatable) This property specifies the userstore attribute value that must match the incoming certificate attribute.

        **Added In:** 2010242156

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "user_match_attribute")

    @property
    @pulumi.getter(name="crlCheckOnOcspFailureEnabled")
    def crl_check_on_ocsp_failure_enabled(self) -> Optional[bool]:
        """
        (Updatable) Fallback on CRL Validation if OCSP fails.

        **Added In:** 2010242156

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "crl_check_on_ocsp_failure_enabled")

    @property
    @pulumi.getter(name="crlEnabled")
    def crl_enabled(self) -> Optional[bool]:
        """
        (Updatable) Set to true to enable CRL Validation

        **Added In:** 2010242156

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "crl_enabled")

    @property
    @pulumi.getter(name="crlLocation")
    def crl_location(self) -> Optional[str]:
        """
        (Updatable) CRL Location URL

        **Added In:** 2010242156

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "crl_location")

    @property
    @pulumi.getter(name="crlReloadDuration")
    def crl_reload_duration(self) -> Optional[int]:
        """
        (Updatable) Fetch the CRL contents every X minutes

        **Added In:** 2010242156

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: integer
        * uniqueness: none
        """
        return pulumi.get(self, "crl_reload_duration")

    @property
    @pulumi.getter(name="ocspAllowUnknownResponseStatus")
    def ocsp_allow_unknown_response_status(self) -> Optional[bool]:
        """
        (Updatable) Allow access if OCSP response is UNKNOWN or OCSP Responder does not respond within the timeout duration

        **Added In:** 2010242156

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "ocsp_allow_unknown_response_status")

    @property
    @pulumi.getter(name="ocspEnableSignedResponse")
    def ocsp_enable_signed_response(self) -> Optional[bool]:
        """
        (Updatable) Describes if the OCSP response is signed

        **Added In:** 2010242156

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "ocsp_enable_signed_response")

    @property
    @pulumi.getter(name="ocspEnabled")
    def ocsp_enabled(self) -> Optional[bool]:
        """
        (Updatable) Set to true to enable OCSP Validation

        **Added In:** 2010242156

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "ocsp_enabled")

    @property
    @pulumi.getter(name="ocspResponderUrl")
    def ocsp_responder_url(self) -> Optional[str]:
        """
        (Updatable) This property specifies OCSP Responder URL.

        **Added In:** 2010242156

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "ocsp_responder_url")

    @property
    @pulumi.getter(name="ocspRevalidateTime")
    def ocsp_revalidate_time(self) -> Optional[int]:
        """
        (Updatable) Revalidate OCSP status for user after X hours

        **Added In:** 2010242156

        **SCIM++ Properties:**
        * idcsMaxValue: 24
        * idcsMinValue: 0
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: integer
        * uniqueness: none
        """
        return pulumi.get(self, "ocsp_revalidate_time")

    @property
    @pulumi.getter(name="ocspServerName")
    def ocsp_server_name(self) -> Optional[str]:
        """
        (Updatable) This property specifies the OCSP Server alias name

        **Added In:** 2010242156

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "ocsp_server_name")

    @property
    @pulumi.getter(name="ocspTrustCertChains")
    def ocsp_trust_cert_chains(self) -> Optional[Sequence[str]]:
        """
        (Updatable) OCSP Trusted Certificate Chain

        **Added In:** 2010242156

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: true
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "ocsp_trust_cert_chains")

    @property
    @pulumi.getter(name="otherCertMatchAttribute")
    def other_cert_match_attribute(self) -> Optional[str]:
        """
        (Updatable) Check for specific conditions of other certificate attributes

        **Added In:** 2010242156

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "other_cert_match_attribute")


@pulumi.output_type
class DomainsKmsiSettingIdcsCreatedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str value: (Updatable) Value of the tag.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        :param str display: (Updatable) The displayName of the User or App who modified this Resource
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ocid: (Updatable) Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: default
               * type: string
               * uniqueness: global
        :param str ref: (Updatable) The URI of the SCIM resource that represents the User or App who modified this Resource
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param str type: (Updatable) The type of resource, User or App, that modified this Resource
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        """
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        (Updatable) Value of the tag.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) The displayName of the User or App who modified this Resource

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        """
        (Updatable) Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: default
        * type: string
        * uniqueness: global
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) The URI of the SCIM resource that represents the User or App who modified this Resource

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        (Updatable) The type of resource, User or App, that modified this Resource

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsKmsiSettingIdcsLastModifiedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str value: (Updatable) Value of the tag.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        :param str display: (Updatable) The displayName of the User or App who modified this Resource
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ocid: (Updatable) Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: default
               * type: string
               * uniqueness: global
        :param str ref: (Updatable) The URI of the SCIM resource that represents the User or App who modified this Resource
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param str type: (Updatable) The type of resource, User or App, that modified this Resource
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        """
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        (Updatable) Value of the tag.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) The displayName of the User or App who modified this Resource

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        """
        (Updatable) Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: default
        * type: string
        * uniqueness: global
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) The URI of the SCIM resource that represents the User or App who modified this Resource

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        (Updatable) The type of resource, User or App, that modified this Resource

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsKmsiSettingMeta(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastModified":
            suggest = "last_modified"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsKmsiSettingMeta. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsKmsiSettingMeta.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsKmsiSettingMeta.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param str created: (Updatable) The DateTime the Resource was added to the Service Provider
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: dateTime
               * uniqueness: none
        :param str last_modified: (Updatable) The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: dateTime
               * uniqueness: none
        :param str location: (Updatable) The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str resource_type: (Updatable) Name of the resource type of the resource--for example, Users or Groups
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str version: (Updatable) The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        """
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        """
        (Updatable) The DateTime the Resource was added to the Service Provider

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: dateTime
        * uniqueness: none
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        """
        (Updatable) The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: dateTime
        * uniqueness: none
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        """
        (Updatable) The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        """
        (Updatable) Name of the resource type of the resource--for example, Users or Groups

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        (Updatable) The version of the Resource being returned. This value must be the same as the ETag HTTP response header.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class DomainsKmsiSettingTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: (Updatable) Key or name of the tag.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        :param str value: (Updatable) Value of the tag.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        (Updatable) Key or name of the tag.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        (Updatable) Value of the tag.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsMyApiKeyIdcsCreatedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str value: User's id
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param str display: (Updatable) User display name
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ocid: User's ocid
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) The URI that corresponds to the user linked to this credential
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param str type: The type of resource, User or App, that modified this Resource
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        """
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) User display name

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        """
        User's ocid

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) The URI that corresponds to the user linked to this credential

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of resource, User or App, that modified this Resource

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsMyApiKeyIdcsLastModifiedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str value: User's id
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param str display: (Updatable) User display name
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ocid: User's ocid
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) The URI that corresponds to the user linked to this credential
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param str type: The type of resource, User or App, that modified this Resource
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        """
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) User display name

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        """
        User's ocid

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) The URI that corresponds to the user linked to this credential

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of resource, User or App, that modified this Resource

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsMyApiKeyMeta(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastModified":
            suggest = "last_modified"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsMyApiKeyMeta. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsMyApiKeyMeta.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsMyApiKeyMeta.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param str created: The DateTime the Resource was added to the Service Provider
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: dateTime
               * uniqueness: none
        :param str last_modified: The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: dateTime
               * uniqueness: none
        :param str location: The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str resource_type: Name of the resource type of the resource--for example, Users or Groups
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str version: The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        """
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        """
        The DateTime the Resource was added to the Service Provider

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: dateTime
        * uniqueness: none
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        """
        The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: dateTime
        * uniqueness: none
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        """
        The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        """
        Name of the resource type of the resource--for example, Users or Groups

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        The version of the Resource being returned. This value must be the same as the ETag HTTP response header.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class DomainsMyApiKeyTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Key or name of the tag.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        :param str value: User's id
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key or name of the tag.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsMyApiKeyUser(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str display: (Updatable) User display name
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str name: (Updatable) User name
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ocid: User's ocid
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) The URI that corresponds to the user linked to this credential
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param str value: User's id
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        if display is not None:
            pulumi.set(__self__, "display", display)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) User display name

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        (Updatable) User name

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        """
        User's ocid

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) The URI that corresponds to the user linked to this credential

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        User's id

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsMyAuthTokenIdcsCreatedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str value: User's id
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param str display: (Updatable) User display name
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ocid: User's ocid
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) The URI that corresponds to the user linked to this credential
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param str type: The type of resource, User or App, that modified this Resource
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        """
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) User display name

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        """
        User's ocid

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) The URI that corresponds to the user linked to this credential

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of resource, User or App, that modified this Resource

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsMyAuthTokenIdcsLastModifiedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str value: User's id
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param str display: (Updatable) User display name
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ocid: User's ocid
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) The URI that corresponds to the user linked to this credential
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param str type: The type of resource, User or App, that modified this Resource
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        """
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) User display name

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        """
        User's ocid

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) The URI that corresponds to the user linked to this credential

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of resource, User or App, that modified this Resource

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsMyAuthTokenMeta(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastModified":
            suggest = "last_modified"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsMyAuthTokenMeta. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsMyAuthTokenMeta.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsMyAuthTokenMeta.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param str created: The DateTime the Resource was added to the Service Provider
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: dateTime
               * uniqueness: none
        :param str last_modified: The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: dateTime
               * uniqueness: none
        :param str location: The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str resource_type: Name of the resource type of the resource--for example, Users or Groups
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str version: The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        """
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        """
        The DateTime the Resource was added to the Service Provider

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: dateTime
        * uniqueness: none
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        """
        The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: dateTime
        * uniqueness: none
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        """
        The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        """
        Name of the resource type of the resource--for example, Users or Groups

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        The version of the Resource being returned. This value must be the same as the ETag HTTP response header.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class DomainsMyAuthTokenTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Key or name of the tag.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        :param str value: User's id
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key or name of the tag.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsMyAuthTokenUser(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str display: (Updatable) User display name
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str name: (Updatable) User name
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ocid: User's ocid
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) The URI that corresponds to the user linked to this credential
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param str value: User's id
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        if display is not None:
            pulumi.set(__self__, "display", display)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) User display name

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        (Updatable) User name

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        """
        User's ocid

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) The URI that corresponds to the user linked to this credential

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        User's id

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsMyCustomerSecretKeyIdcsCreatedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str value: User's id
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param str display: (Updatable) User display name
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ocid: User's ocid
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) The URI that corresponds to the user linked to this credential
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param str type: The type of resource, User or App, that modified this Resource
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        """
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) User display name

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        """
        User's ocid

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) The URI that corresponds to the user linked to this credential

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of resource, User or App, that modified this Resource

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsMyCustomerSecretKeyIdcsLastModifiedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str value: User's id
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param str display: (Updatable) User display name
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ocid: User's ocid
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) The URI that corresponds to the user linked to this credential
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param str type: The type of resource, User or App, that modified this Resource
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        """
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) User display name

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        """
        User's ocid

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) The URI that corresponds to the user linked to this credential

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of resource, User or App, that modified this Resource

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsMyCustomerSecretKeyMeta(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastModified":
            suggest = "last_modified"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsMyCustomerSecretKeyMeta. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsMyCustomerSecretKeyMeta.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsMyCustomerSecretKeyMeta.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param str created: The DateTime the Resource was added to the Service Provider
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: dateTime
               * uniqueness: none
        :param str last_modified: The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: dateTime
               * uniqueness: none
        :param str location: The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str resource_type: Name of the resource type of the resource--for example, Users or Groups
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str version: The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        """
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        """
        The DateTime the Resource was added to the Service Provider

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: dateTime
        * uniqueness: none
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        """
        The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: dateTime
        * uniqueness: none
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        """
        The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        """
        Name of the resource type of the resource--for example, Users or Groups

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        The version of the Resource being returned. This value must be the same as the ETag HTTP response header.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class DomainsMyCustomerSecretKeyTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Key or name of the tag.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        :param str value: User's id
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key or name of the tag.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsMyCustomerSecretKeyUser(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str display: (Updatable) User display name
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str name: (Updatable) User name
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ocid: User's ocid
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) The URI that corresponds to the user linked to this credential
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param str value: User's id
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        if display is not None:
            pulumi.set(__self__, "display", display)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) User display name

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        (Updatable) User name

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        """
        User's ocid

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) The URI that corresponds to the user linked to this credential

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        User's id

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsMyOauth2clientCredentialIdcsCreatedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str value: User's id
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param str display: (Updatable) User display name
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ocid: User's ocid
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) The URI that corresponds to the user linked to this credential
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param str type: The type of resource, User or App, that modified this Resource
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        """
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) User display name

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        """
        User's ocid

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) The URI that corresponds to the user linked to this credential

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of resource, User or App, that modified this Resource

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsMyOauth2clientCredentialIdcsLastModifiedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str value: User's id
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param str display: (Updatable) User display name
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ocid: User's ocid
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) The URI that corresponds to the user linked to this credential
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param str type: The type of resource, User or App, that modified this Resource
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        """
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) User display name

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        """
        User's ocid

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) The URI that corresponds to the user linked to this credential

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of resource, User or App, that modified this Resource

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsMyOauth2clientCredentialMeta(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastModified":
            suggest = "last_modified"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsMyOauth2clientCredentialMeta. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsMyOauth2clientCredentialMeta.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsMyOauth2clientCredentialMeta.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param str created: The DateTime the Resource was added to the Service Provider
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: dateTime
               * uniqueness: none
        :param str last_modified: The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: dateTime
               * uniqueness: none
        :param str location: The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str resource_type: Name of the resource type of the resource--for example, Users or Groups
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str version: The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        """
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        """
        The DateTime the Resource was added to the Service Provider

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: dateTime
        * uniqueness: none
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        """
        The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: dateTime
        * uniqueness: none
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        """
        The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        """
        Name of the resource type of the resource--for example, Users or Groups

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        The version of the Resource being returned. This value must be the same as the ETag HTTP response header.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class DomainsMyOauth2clientCredentialScope(dict):
    def __init__(__self__, *,
                 audience: str,
                 scope: str):
        """
        :param str audience: Audience
               
               **SCIM++ Properties:**
               * caseExact: false
               * type: string
               * mutability: readWrite
               * required: true
               * returned: default
        :param str scope: Scope
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsScimCompliant: false
               * type: string
               * mutability: readWrite
               * multiValued: false
               * required: true
               * returned: default
        """
        pulumi.set(__self__, "audience", audience)
        pulumi.set(__self__, "scope", scope)

    @property
    @pulumi.getter
    def audience(self) -> str:
        """
        Audience

        **SCIM++ Properties:**
        * caseExact: false
        * type: string
        * mutability: readWrite
        * required: true
        * returned: default
        """
        return pulumi.get(self, "audience")

    @property
    @pulumi.getter
    def scope(self) -> str:
        """
        Scope

        **SCIM++ Properties:**
        * caseExact: false
        * idcsScimCompliant: false
        * type: string
        * mutability: readWrite
        * multiValued: false
        * required: true
        * returned: default
        """
        return pulumi.get(self, "scope")


@pulumi.output_type
class DomainsMyOauth2clientCredentialTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Key or name of the tag.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        :param str value: User's id
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key or name of the tag.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsMyOauth2clientCredentialUser(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str display: (Updatable) User display name
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str name: (Updatable) User name
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ocid: User's ocid
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) The URI that corresponds to the user linked to this credential
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param str value: User's id
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        if display is not None:
            pulumi.set(__self__, "display", display)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) User display name

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        (Updatable) User name

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        """
        User's ocid

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) The URI that corresponds to the user linked to this credential

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        User's id

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsMySmtpCredentialIdcsCreatedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str value: User's id
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        :param str display: (Updatable) User display name
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ocid: User's ocid
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) The URI that corresponds to the user linked to this credential
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param str type: The type of resource, User or App, that modified this Resource
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        """
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) User display name

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        """
        User's ocid

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) The URI that corresponds to the user linked to this credential

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of resource, User or App, that modified this Resource

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsMySmtpCredentialIdcsLastModifiedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str value: User's id
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        :param str display: (Updatable) User display name
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ocid: User's ocid
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) The URI that corresponds to the user linked to this credential
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param str type: The type of resource, User or App, that modified this Resource
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        """
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) User display name

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        """
        User's ocid

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) The URI that corresponds to the user linked to this credential

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of resource, User or App, that modified this Resource

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsMySmtpCredentialMeta(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastModified":
            suggest = "last_modified"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsMySmtpCredentialMeta. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsMySmtpCredentialMeta.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsMySmtpCredentialMeta.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param str created: The DateTime the Resource was added to the Service Provider
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: dateTime
               * uniqueness: none
        :param str last_modified: The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: dateTime
               * uniqueness: none
        :param str location: The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str resource_type: Name of the resource type of the resource--for example, Users or Groups
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str version: The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        """
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        """
        The DateTime the Resource was added to the Service Provider

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: dateTime
        * uniqueness: none
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        """
        The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: dateTime
        * uniqueness: none
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        """
        The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        """
        Name of the resource type of the resource--for example, Users or Groups

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        The version of the Resource being returned. This value must be the same as the ETag HTTP response header.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class DomainsMySmtpCredentialTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Key or name of the tag.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        :param str value: User's id
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key or name of the tag.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsMySmtpCredentialUser(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str display: (Updatable) User display name
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str name: (Updatable) User name
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ocid: User's ocid
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) The URI that corresponds to the user linked to this credential
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param str value: User's id
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        """
        if display is not None:
            pulumi.set(__self__, "display", display)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) User display name

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        (Updatable) User name

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        """
        User's ocid

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) The URI that corresponds to the user linked to this credential

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        User's id

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsMySupportAccountIdcsCreatedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str value: User's id
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        :param str display: (Updatable) User display name
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ocid: User's ocid
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) The URI that corresponds to the user linked to this Support Account
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param str type: The type of resource, User or App, that modified this Resource
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        """
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) User display name

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        """
        User's ocid

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) The URI that corresponds to the user linked to this Support Account

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of resource, User or App, that modified this Resource

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsMySupportAccountIdcsLastModifiedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str value: User's id
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        :param str display: (Updatable) User display name
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ocid: User's ocid
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) The URI that corresponds to the user linked to this Support Account
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param str type: The type of resource, User or App, that modified this Resource
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        """
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) User display name

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        """
        User's ocid

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) The URI that corresponds to the user linked to this Support Account

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of resource, User or App, that modified this Resource

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsMySupportAccountMeta(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastModified":
            suggest = "last_modified"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsMySupportAccountMeta. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsMySupportAccountMeta.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsMySupportAccountMeta.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param str created: The DateTime the Resource was added to the Service Provider
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: dateTime
               * uniqueness: none
        :param str last_modified: The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: dateTime
               * uniqueness: none
        :param str location: The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str resource_type: Name of the resource type of the resource--for example, Users or Groups
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str version: The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        """
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        """
        The DateTime the Resource was added to the Service Provider

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: dateTime
        * uniqueness: none
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        """
        The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: dateTime
        * uniqueness: none
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        """
        The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        """
        Name of the resource type of the resource--for example, Users or Groups

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        The version of the Resource being returned. This value must be the same as the ETag HTTP response header.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class DomainsMySupportAccountTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Key or name of the tag.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        :param str value: User's id
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key or name of the tag.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsMySupportAccountUser(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str display: (Updatable) User display name
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str name: (Updatable) User name
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ocid: User's ocid
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) The URI that corresponds to the user linked to this Support Account
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param str value: User's id
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        """
        if display is not None:
            pulumi.set(__self__, "display", display)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) User display name

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        (Updatable) User name

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        """
        User's ocid

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) The URI that corresponds to the user linked to this Support Account

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        User's id

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsMyUserDbCredentialIdcsCreatedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str value: User's id
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: true
               * returned: always
               * type: string
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param str display: (Updatable) User display name
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ocid: User's ocid
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) The URI that corresponds to the user linked to this credential
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param str type: The type of resource, User or App, that modified this Resource
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        """
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: true
        * returned: always
        * type: string
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) User display name

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        """
        User's ocid

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) The URI that corresponds to the user linked to this credential

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of resource, User or App, that modified this Resource

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsMyUserDbCredentialIdcsLastModifiedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str value: User's id
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: true
               * returned: always
               * type: string
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param str display: (Updatable) User display name
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ocid: User's ocid
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) The URI that corresponds to the user linked to this credential
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param str type: The type of resource, User or App, that modified this Resource
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        """
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: true
        * returned: always
        * type: string
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) User display name

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        """
        User's ocid

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) The URI that corresponds to the user linked to this credential

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of resource, User or App, that modified this Resource

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsMyUserDbCredentialMeta(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastModified":
            suggest = "last_modified"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsMyUserDbCredentialMeta. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsMyUserDbCredentialMeta.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsMyUserDbCredentialMeta.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param str created: The DateTime the Resource was added to the Service Provider
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: dateTime
               * uniqueness: none
        :param str last_modified: The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: dateTime
               * uniqueness: none
        :param str location: The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str resource_type: Name of the resource type of the resource--for example, Users or Groups
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str version: The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        """
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        """
        The DateTime the Resource was added to the Service Provider

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: dateTime
        * uniqueness: none
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        """
        The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: dateTime
        * uniqueness: none
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        """
        The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        """
        Name of the resource type of the resource--for example, Users or Groups

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        The version of the Resource being returned. This value must be the same as the ETag HTTP response header.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class DomainsMyUserDbCredentialTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Key or name of the tag.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        :param str value: User's id
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: true
               * returned: always
               * type: string
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key or name of the tag.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: true
        * returned: always
        * type: string
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsMyUserDbCredentialUser(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None):
        """
        :param str value: User's id
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: true
               * returned: always
               * type: string
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param str display: (Updatable) User display name
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str name: (Updatable) User name
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ocid: User's ocid
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) The URI that corresponds to the user linked to this credential
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        """
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: true
        * returned: always
        * type: string
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) User display name

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        (Updatable) User name

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        """
        User's ocid

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) The URI that corresponds to the user linked to this credential

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsOauth2clientCredentialIdcsCreatedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str value: User's id
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param str display: (Updatable) User display name
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ocid: User's ocid
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) The URI that corresponds to the user linked to this credential
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param str type: The type of resource, User or App, that modified this Resource
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        """
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) User display name

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        """
        User's ocid

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) The URI that corresponds to the user linked to this credential

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of resource, User or App, that modified this Resource

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsOauth2clientCredentialIdcsLastModifiedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str value: User's id
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param str display: (Updatable) User display name
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ocid: User's ocid
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) The URI that corresponds to the user linked to this credential
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param str type: The type of resource, User or App, that modified this Resource
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        """
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) User display name

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        """
        User's ocid

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) The URI that corresponds to the user linked to this credential

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of resource, User or App, that modified this Resource

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsOauth2clientCredentialMeta(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastModified":
            suggest = "last_modified"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsOauth2clientCredentialMeta. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsOauth2clientCredentialMeta.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsOauth2clientCredentialMeta.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param str created: The DateTime the Resource was added to the Service Provider
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: dateTime
               * uniqueness: none
        :param str last_modified: The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: dateTime
               * uniqueness: none
        :param str location: The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str resource_type: Name of the resource type of the resource--for example, Users or Groups
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str version: The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        """
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        """
        The DateTime the Resource was added to the Service Provider

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: dateTime
        * uniqueness: none
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        """
        The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: dateTime
        * uniqueness: none
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        """
        The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        """
        Name of the resource type of the resource--for example, Users or Groups

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        The version of the Resource being returned. This value must be the same as the ETag HTTP response header.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class DomainsOauth2clientCredentialScope(dict):
    def __init__(__self__, *,
                 audience: str,
                 scope: str):
        """
        :param str audience: Audience
               
               **SCIM++ Properties:**
               * caseExact: false
               * type: string
               * mutability: readWrite
               * required: true
               * returned: default
        :param str scope: Scope
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsScimCompliant: false
               * type: string
               * mutability: readWrite
               * multiValued: false
               * required: true
               * returned: default
        """
        pulumi.set(__self__, "audience", audience)
        pulumi.set(__self__, "scope", scope)

    @property
    @pulumi.getter
    def audience(self) -> str:
        """
        Audience

        **SCIM++ Properties:**
        * caseExact: false
        * type: string
        * mutability: readWrite
        * required: true
        * returned: default
        """
        return pulumi.get(self, "audience")

    @property
    @pulumi.getter
    def scope(self) -> str:
        """
        Scope

        **SCIM++ Properties:**
        * caseExact: false
        * idcsScimCompliant: false
        * type: string
        * mutability: readWrite
        * multiValued: false
        * required: true
        * returned: default
        """
        return pulumi.get(self, "scope")


@pulumi.output_type
class DomainsOauth2clientCredentialTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Key or name of the tag.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        :param str value: User's id
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key or name of the tag.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsOauth2clientCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowSelfChange":
            suggest = "allow_self_change"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsOauth2clientCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsOauth2clientCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsOauth2clientCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_self_change: Optional[bool] = None):
        """
        :param bool allow_self_change: If true, allows requesting user to update themselves. If false, requesting user can't update themself (default).
               
               **Added In:** 2205182039
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: writeOnly
               * required: false
               * returned: never
               * type: boolean
               * uniqueness: none
        """
        if allow_self_change is not None:
            pulumi.set(__self__, "allow_self_change", allow_self_change)

    @property
    @pulumi.getter(name="allowSelfChange")
    def allow_self_change(self) -> Optional[bool]:
        """
        If true, allows requesting user to update themselves. If false, requesting user can't update themself (default).

        **Added In:** 2205182039

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: writeOnly
        * required: false
        * returned: never
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "allow_self_change")


@pulumi.output_type
class DomainsOauth2clientCredentialUser(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str display: (Updatable) User display name
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str name: (Updatable) User name
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ocid: User's ocid
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) The URI that corresponds to the user linked to this credential
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param str value: User's id
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        if display is not None:
            pulumi.set(__self__, "display", display)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) User display name

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        (Updatable) User name

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        """
        User's ocid

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) The URI that corresponds to the user linked to this credential

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        User's id

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsPasswordPolicyConfiguredPasswordPolicyRule(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: (Updatable) Key or name of the tag.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        :param str value: (Updatable) Value of the tag.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        (Updatable) Key or name of the tag.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        (Updatable) Value of the tag.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsPasswordPolicyGroup(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ref: Optional[str] = None):
        """
        :param str value: (Updatable) Value of the tag.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        :param str display: (Updatable) The displayName of the User or App who modified this Resource
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) The URI of the SCIM resource that represents the User or App who modified this Resource
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        """
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        (Updatable) Value of the tag.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) The displayName of the User or App who modified this Resource

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) The URI of the SCIM resource that represents the User or App who modified this Resource

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsPasswordPolicyIdcsCreatedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str value: (Updatable) Value of the tag.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        :param str display: (Updatable) The displayName of the User or App who modified this Resource
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ocid: (Updatable) Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: default
               * type: string
               * uniqueness: global
        :param str ref: (Updatable) The URI of the SCIM resource that represents the User or App who modified this Resource
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param str type: (Updatable) The type of resource, User or App, that modified this Resource
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        """
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        (Updatable) Value of the tag.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) The displayName of the User or App who modified this Resource

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        """
        (Updatable) Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: default
        * type: string
        * uniqueness: global
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) The URI of the SCIM resource that represents the User or App who modified this Resource

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        (Updatable) The type of resource, User or App, that modified this Resource

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsPasswordPolicyIdcsLastModifiedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str value: (Updatable) Value of the tag.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        :param str display: (Updatable) The displayName of the User or App who modified this Resource
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ocid: (Updatable) Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: default
               * type: string
               * uniqueness: global
        :param str ref: (Updatable) The URI of the SCIM resource that represents the User or App who modified this Resource
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param str type: (Updatable) The type of resource, User or App, that modified this Resource
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        """
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        (Updatable) Value of the tag.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) The displayName of the User or App who modified this Resource

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        """
        (Updatable) Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: default
        * type: string
        * uniqueness: global
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) The URI of the SCIM resource that represents the User or App who modified this Resource

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        (Updatable) The type of resource, User or App, that modified this Resource

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsPasswordPolicyMeta(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastModified":
            suggest = "last_modified"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsPasswordPolicyMeta. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsPasswordPolicyMeta.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsPasswordPolicyMeta.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param str created: (Updatable) The DateTime the Resource was added to the Service Provider
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: dateTime
               * uniqueness: none
        :param str last_modified: (Updatable) The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: dateTime
               * uniqueness: none
        :param str location: (Updatable) The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str resource_type: (Updatable) Name of the resource type of the resource--for example, Users or Groups
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str version: (Updatable) The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        """
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        """
        (Updatable) The DateTime the Resource was added to the Service Provider

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: dateTime
        * uniqueness: none
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        """
        (Updatable) The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: dateTime
        * uniqueness: none
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        """
        (Updatable) The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        """
        (Updatable) Name of the resource type of the resource--for example, Users or Groups

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        (Updatable) The version of the Resource being returned. This value must be the same as the ETag HTTP response header.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class DomainsPasswordPolicyTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: (Updatable) Key or name of the tag.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        :param str value: (Updatable) Value of the tag.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        (Updatable) Key or name of the tag.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        (Updatable) Value of the tag.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsSmtpCredentialIdcsCreatedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str value: User's id
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        :param str display: (Updatable) User display name
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ocid: User's ocid
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) The URI that corresponds to the user linked to this credential
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param str type: The type of resource, User or App, that modified this Resource
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        """
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) User display name

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        """
        User's ocid

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) The URI that corresponds to the user linked to this credential

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of resource, User or App, that modified this Resource

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsSmtpCredentialIdcsLastModifiedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str value: User's id
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        :param str display: (Updatable) User display name
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ocid: User's ocid
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) The URI that corresponds to the user linked to this credential
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param str type: The type of resource, User or App, that modified this Resource
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        """
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) User display name

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        """
        User's ocid

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) The URI that corresponds to the user linked to this credential

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of resource, User or App, that modified this Resource

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsSmtpCredentialMeta(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastModified":
            suggest = "last_modified"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsSmtpCredentialMeta. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsSmtpCredentialMeta.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsSmtpCredentialMeta.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param str created: The DateTime the Resource was added to the Service Provider
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: dateTime
               * uniqueness: none
        :param str last_modified: The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: dateTime
               * uniqueness: none
        :param str location: The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str resource_type: Name of the resource type of the resource--for example, Users or Groups
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str version: The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        """
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        """
        The DateTime the Resource was added to the Service Provider

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: dateTime
        * uniqueness: none
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        """
        The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: dateTime
        * uniqueness: none
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        """
        The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        """
        Name of the resource type of the resource--for example, Users or Groups

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        The version of the Resource being returned. This value must be the same as the ETag HTTP response header.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class DomainsSmtpCredentialTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Key or name of the tag.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        :param str value: User's id
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key or name of the tag.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsSmtpCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowSelfChange":
            suggest = "allow_self_change"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsSmtpCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsSmtpCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsSmtpCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_self_change: Optional[bool] = None):
        """
        :param bool allow_self_change: If true, allows requesting user to update themselves. If false, requesting user can't update themself (default).
               
               **Added In:** 2205182039
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: writeOnly
               * required: false
               * returned: never
               * type: boolean
               * uniqueness: none
        """
        if allow_self_change is not None:
            pulumi.set(__self__, "allow_self_change", allow_self_change)

    @property
    @pulumi.getter(name="allowSelfChange")
    def allow_self_change(self) -> Optional[bool]:
        """
        If true, allows requesting user to update themselves. If false, requesting user can't update themself (default).

        **Added In:** 2205182039

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: writeOnly
        * required: false
        * returned: never
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "allow_self_change")


@pulumi.output_type
class DomainsSmtpCredentialUser(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str display: (Updatable) User display name
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str name: (Updatable) User name
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ocid: User's ocid
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) The URI that corresponds to the user linked to this credential
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param str value: User's id
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        """
        if display is not None:
            pulumi.set(__self__, "display", display)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) User display name

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        (Updatable) User name

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        """
        User's ocid

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) The URI that corresponds to the user linked to this credential

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        User's id

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsUserAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "postalCode":
            suggest = "postal_code"
        elif key == "streetAddress":
            suggest = "street_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 country: Optional[str] = None,
                 formatted: Optional[str] = None,
                 locality: Optional[str] = None,
                 postal_code: Optional[str] = None,
                 primary: Optional[bool] = None,
                 region: Optional[str] = None,
                 street_address: Optional[str] = None):
        """
        :param str type: (Updatable) A label indicating the attribute's function.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str country: (Updatable) The country name component.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsCanonicalValueSourceFilter: attrName eq "countries" and attrValues.value eq "upper($(country))"
               * idcsCanonicalValueSourceResourceType: AllowedValue
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str formatted: (Updatable) Full name
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str locality: (Updatable) The city or locality component.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str postal_code: (Updatable) The zipcode or postal code component.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param bool primary: (Updatable) A Boolean value indicating the 'primary' or preferred attribute value for this attribute. The primary attribute value 'true' MUST appear no more than once.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: boolean
               * uniqueness: none
        :param str region: (Updatable) The state or region component.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str street_address: (Updatable) The full street address component, which may include house number, street name, PO BOX, and multi-line extended street address information. This attribute MAY contain newlines.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        """
        pulumi.set(__self__, "type", type)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if formatted is not None:
            pulumi.set(__self__, "formatted", formatted)
        if locality is not None:
            pulumi.set(__self__, "locality", locality)
        if postal_code is not None:
            pulumi.set(__self__, "postal_code", postal_code)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if street_address is not None:
            pulumi.set(__self__, "street_address", street_address)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        (Updatable) A label indicating the attribute's function.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        """
        (Updatable) The country name component.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsCanonicalValueSourceFilter: attrName eq "countries" and attrValues.value eq "upper($(country))"
        * idcsCanonicalValueSourceResourceType: AllowedValue
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "country")

    @property
    @pulumi.getter
    def formatted(self) -> Optional[str]:
        """
        (Updatable) Full name

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "formatted")

    @property
    @pulumi.getter
    def locality(self) -> Optional[str]:
        """
        (Updatable) The city or locality component.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "locality")

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> Optional[str]:
        """
        (Updatable) The zipcode or postal code component.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "postal_code")

    @property
    @pulumi.getter
    def primary(self) -> Optional[bool]:
        """
        (Updatable) A Boolean value indicating the 'primary' or preferred attribute value for this attribute. The primary attribute value 'true' MUST appear no more than once.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        (Updatable) The state or region component.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="streetAddress")
    def street_address(self) -> Optional[str]:
        """
        (Updatable) The full street address component, which may include house number, street name, PO BOX, and multi-line extended street address information. This attribute MAY contain newlines.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "street_address")


@pulumi.output_type
class DomainsUserDbCredentialIdcsCreatedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str value: User's id
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: true
               * returned: always
               * type: string
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param str display: (Updatable) User display name
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ocid: User's ocid
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) The URI that corresponds to the user linked to this credential
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param str type: The type of resource, User or App, that modified this Resource
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        """
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: true
        * returned: always
        * type: string
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) User display name

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        """
        User's ocid

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) The URI that corresponds to the user linked to this credential

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of resource, User or App, that modified this Resource

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsUserDbCredentialIdcsLastModifiedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str value: User's id
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: true
               * returned: always
               * type: string
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param str display: (Updatable) User display name
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ocid: User's ocid
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) The URI that corresponds to the user linked to this credential
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param str type: The type of resource, User or App, that modified this Resource
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        """
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: true
        * returned: always
        * type: string
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) User display name

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        """
        User's ocid

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) The URI that corresponds to the user linked to this credential

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of resource, User or App, that modified this Resource

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsUserDbCredentialMeta(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastModified":
            suggest = "last_modified"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserDbCredentialMeta. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserDbCredentialMeta.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserDbCredentialMeta.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param str created: The DateTime the Resource was added to the Service Provider
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: dateTime
               * uniqueness: none
        :param str last_modified: The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: dateTime
               * uniqueness: none
        :param str location: The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str resource_type: Name of the resource type of the resource--for example, Users or Groups
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str version: The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        """
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        """
        The DateTime the Resource was added to the Service Provider

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: dateTime
        * uniqueness: none
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        """
        The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: dateTime
        * uniqueness: none
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        """
        The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        """
        Name of the resource type of the resource--for example, Users or Groups

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        The version of the Resource being returned. This value must be the same as the ETag HTTP response header.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class DomainsUserDbCredentialTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Key or name of the tag.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        :param str value: User's id
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: true
               * returned: always
               * type: string
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key or name of the tag.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: true
        * returned: always
        * type: string
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsUserDbCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowSelfChange":
            suggest = "allow_self_change"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserDbCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserDbCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserDbCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_self_change: Optional[bool] = None):
        """
        :param bool allow_self_change: If true, allows requesting user to update themselves. If false, requesting user can't update themself (default).
               
               **Added In:** 2205182039
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: writeOnly
               * required: false
               * returned: never
               * type: boolean
               * uniqueness: none
        """
        if allow_self_change is not None:
            pulumi.set(__self__, "allow_self_change", allow_self_change)

    @property
    @pulumi.getter(name="allowSelfChange")
    def allow_self_change(self) -> Optional[bool]:
        """
        If true, allows requesting user to update themselves. If false, requesting user can't update themself (default).

        **Added In:** 2205182039

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: writeOnly
        * required: false
        * returned: never
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "allow_self_change")


@pulumi.output_type
class DomainsUserDbCredentialUser(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None):
        """
        :param str value: User's id
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: true
               * returned: always
               * type: string
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param str display: (Updatable) User display name
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str name: (Updatable) User name
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ocid: User's ocid
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) The URI that corresponds to the user linked to this credential
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        """
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: true
        * returned: always
        * type: string
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) User display name

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        (Updatable) User name

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        """
        User's ocid

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) The URI that corresponds to the user linked to this credential

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsUserEmail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pendingVerificationData":
            suggest = "pending_verification_data"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserEmail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserEmail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserEmail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 value: str,
                 pending_verification_data: Optional[str] = None,
                 primary: Optional[bool] = None,
                 secondary: Optional[bool] = None,
                 verified: Optional[bool] = None):
        """
        :param str type: (Updatable) A label indicating the attribute's function.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str value: (Updatable) The value of a X509 certificate.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: binary
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param str pending_verification_data: (Updatable) Pending e-mail address verification
               
               **Added In:** 19.1.4
               
               **SCIM++ Properties:**
               * caseExact: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param bool primary: (Updatable) A Boolean value indicating the 'primary' or preferred attribute value for this attribute. The primary attribute value 'true' MUST appear no more than once.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: boolean
               * uniqueness: none
        :param bool secondary: (Updatable) A Boolean value that indicates whether the email address is the secondary email address. The secondary attribute value 'true' MUST appear no more than once.
               
               **Added In:** 18.2.6
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: boolean
               * uniqueness: none
        :param bool verified: (Updatable) A Boolean value that indicates if the phone number is verified.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: boolean
               * uniqueness: none
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if pending_verification_data is not None:
            pulumi.set(__self__, "pending_verification_data", pending_verification_data)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if secondary is not None:
            pulumi.set(__self__, "secondary", secondary)
        if verified is not None:
            pulumi.set(__self__, "verified", verified)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        (Updatable) A label indicating the attribute's function.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        (Updatable) The value of a X509 certificate.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: binary
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="pendingVerificationData")
    def pending_verification_data(self) -> Optional[str]:
        """
        (Updatable) Pending e-mail address verification

        **Added In:** 19.1.4

        **SCIM++ Properties:**
        * caseExact: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "pending_verification_data")

    @property
    @pulumi.getter
    def primary(self) -> Optional[bool]:
        """
        (Updatable) A Boolean value indicating the 'primary' or preferred attribute value for this attribute. The primary attribute value 'true' MUST appear no more than once.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def secondary(self) -> Optional[bool]:
        """
        (Updatable) A Boolean value that indicates whether the email address is the secondary email address. The secondary attribute value 'true' MUST appear no more than once.

        **Added In:** 18.2.6

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "secondary")

    @property
    @pulumi.getter
    def verified(self) -> Optional[bool]:
        """
        (Updatable) A Boolean value that indicates if the phone number is verified.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "verified")


@pulumi.output_type
class DomainsUserEntitlement(dict):
    def __init__(__self__, *,
                 type: str,
                 value: str,
                 display: Optional[str] = None,
                 primary: Optional[bool] = None):
        """
        :param str type: (Updatable) A label indicating the attribute's function.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str value: (Updatable) The value of a X509 certificate.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: binary
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param str display: (Updatable) A human readable name, primarily used for display purposes.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param bool primary: (Updatable) A Boolean value indicating the 'primary' or preferred attribute value for this attribute. The primary attribute value 'true' MUST appear no more than once.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: boolean
               * uniqueness: none
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        (Updatable) A label indicating the attribute's function.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        (Updatable) The value of a X509 certificate.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: binary
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) A human readable name, primarily used for display purposes.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def primary(self) -> Optional[bool]:
        """
        (Updatable) A Boolean value indicating the 'primary' or preferred attribute value for this attribute. The primary attribute value 'true' MUST appear no more than once.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "primary")


@pulumi.output_type
class DomainsUserGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dateAdded":
            suggest = "date_added"
        elif key == "externalId":
            suggest = "external_id"
        elif key == "membershipOcid":
            suggest = "membership_ocid"
        elif key == "nonUniqueDisplay":
            suggest = "non_unique_display"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 value: str,
                 date_added: Optional[str] = None,
                 display: Optional[str] = None,
                 external_id: Optional[str] = None,
                 membership_ocid: Optional[str] = None,
                 non_unique_display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str value: (Updatable) The value of a X509 certificate.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: binary
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param str date_added: (Updatable) Date when the member is Added to the group
               
               **Added In:** 2105200541
               
               **SCIM++ Properties:**
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: dateTime
               * uniqueness: none
        :param str display: (Updatable) A human readable name, primarily used for display purposes.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str external_id: (Updatable) An identifier for the Resource as defined by the Service Consumer. READ-ONLY.
               
               **Added In:** 2011192329
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str membership_ocid: (Updatable) Membership Ocid
               
               **Added In:** 2103141444
               
               **SCIM++ Properties:**
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str non_unique_display: (Updatable) A human readable name for Group as defined by the Service Consumer. READ-ONLY.
               
               **Added In:** 2011192329
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ocid: (Updatable) Ocid of the User's Support Account.
               
               **Added In:** 2103141444
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) User Token URI
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param str type: (Updatable) A label indicating the attribute's function.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        """
        pulumi.set(__self__, "value", value)
        if date_added is not None:
            pulumi.set(__self__, "date_added", date_added)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if membership_ocid is not None:
            pulumi.set(__self__, "membership_ocid", membership_ocid)
        if non_unique_display is not None:
            pulumi.set(__self__, "non_unique_display", non_unique_display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        (Updatable) The value of a X509 certificate.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: binary
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="dateAdded")
    def date_added(self) -> Optional[str]:
        """
        (Updatable) Date when the member is Added to the group

        **Added In:** 2105200541

        **SCIM++ Properties:**
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: dateTime
        * uniqueness: none
        """
        return pulumi.get(self, "date_added")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) A human readable name, primarily used for display purposes.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[str]:
        """
        (Updatable) An identifier for the Resource as defined by the Service Consumer. READ-ONLY.

        **Added In:** 2011192329

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter(name="membershipOcid")
    def membership_ocid(self) -> Optional[str]:
        """
        (Updatable) Membership Ocid

        **Added In:** 2103141444

        **SCIM++ Properties:**
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "membership_ocid")

    @property
    @pulumi.getter(name="nonUniqueDisplay")
    def non_unique_display(self) -> Optional[str]:
        """
        (Updatable) A human readable name for Group as defined by the Service Consumer. READ-ONLY.

        **Added In:** 2011192329

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "non_unique_display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        """
        (Updatable) Ocid of the User's Support Account.

        **Added In:** 2103141444

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) User Token URI

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        (Updatable) A label indicating the attribute's function.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsUserIdcsCreatedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str value: (Updatable) The value of a X509 certificate.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: binary
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param str display: (Updatable) A human readable name, primarily used for display purposes.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ocid: (Updatable) Ocid of the User's Support Account.
               
               **Added In:** 2103141444
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) User Token URI
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param str type: (Updatable) A label indicating the attribute's function.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        """
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        (Updatable) The value of a X509 certificate.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: binary
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) A human readable name, primarily used for display purposes.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        """
        (Updatable) Ocid of the User's Support Account.

        **Added In:** 2103141444

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) User Token URI

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        (Updatable) A label indicating the attribute's function.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsUserIdcsLastModifiedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str value: (Updatable) The value of a X509 certificate.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: binary
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param str display: (Updatable) A human readable name, primarily used for display purposes.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ocid: (Updatable) Ocid of the User's Support Account.
               
               **Added In:** 2103141444
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) User Token URI
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param str type: (Updatable) A label indicating the attribute's function.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        """
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        (Updatable) The value of a X509 certificate.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: binary
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) A human readable name, primarily used for display purposes.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        """
        (Updatable) Ocid of the User's Support Account.

        **Added In:** 2103141444

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) User Token URI

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        (Updatable) A label indicating the attribute's function.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsUserIm(dict):
    def __init__(__self__, *,
                 type: str,
                 value: str,
                 display: Optional[str] = None,
                 primary: Optional[bool] = None):
        """
        :param str type: (Updatable) A label indicating the attribute's function.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str value: (Updatable) The value of a X509 certificate.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: binary
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param str display: (Updatable) A human readable name, primarily used for display purposes.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param bool primary: (Updatable) A Boolean value indicating the 'primary' or preferred attribute value for this attribute. The primary attribute value 'true' MUST appear no more than once.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: boolean
               * uniqueness: none
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        (Updatable) A label indicating the attribute's function.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        (Updatable) The value of a X509 certificate.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: binary
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) A human readable name, primarily used for display purposes.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def primary(self) -> Optional[bool]:
        """
        (Updatable) A Boolean value indicating the 'primary' or preferred attribute value for this attribute. The primary attribute value 'true' MUST appear no more than once.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "primary")


@pulumi.output_type
class DomainsUserMeta(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastModified":
            suggest = "last_modified"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserMeta. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserMeta.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserMeta.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param str created: (Updatable) The DateTime the Resource was added to the Service Provider
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: dateTime
               * uniqueness: none
        :param str last_modified: (Updatable) The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: dateTime
               * uniqueness: none
        :param str location: (Updatable) The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str resource_type: (Updatable) Name of the resource type of the resource--for example, Users or Groups
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str version: (Updatable) The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        """
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        """
        (Updatable) The DateTime the Resource was added to the Service Provider

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: dateTime
        * uniqueness: none
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        """
        (Updatable) The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: dateTime
        * uniqueness: none
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        """
        (Updatable) The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        """
        (Updatable) Name of the resource type of the resource--for example, Users or Groups

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        (Updatable) The version of the Resource being returned. This value must be the same as the ETag HTTP response header.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class DomainsUserName(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "familyName":
            suggest = "family_name"
        elif key == "givenName":
            suggest = "given_name"
        elif key == "honorificPrefix":
            suggest = "honorific_prefix"
        elif key == "honorificSuffix":
            suggest = "honorific_suffix"
        elif key == "middleName":
            suggest = "middle_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserName. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserName.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserName.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 family_name: str,
                 formatted: Optional[str] = None,
                 given_name: Optional[str] = None,
                 honorific_prefix: Optional[str] = None,
                 honorific_suffix: Optional[str] = None,
                 middle_name: Optional[str] = None):
        """
        :param str family_name: (Updatable) Last name
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsCsvAttributeName: Last Name
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        :param str formatted: (Updatable) Full name
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str given_name: (Updatable) First name
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsCsvAttributeName: First Name
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str honorific_prefix: (Updatable) Prefix
               
               **SCIM++ Properties:**
               * idcsCsvAttributeName: Honorific Prefix
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str honorific_suffix: (Updatable) Suffix
               
               **SCIM++ Properties:**
               * idcsCsvAttributeName: Honorific Suffix
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str middle_name: (Updatable) Middle name
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsCsvAttributeName: Middle Name
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        """
        pulumi.set(__self__, "family_name", family_name)
        if formatted is not None:
            pulumi.set(__self__, "formatted", formatted)
        if given_name is not None:
            pulumi.set(__self__, "given_name", given_name)
        if honorific_prefix is not None:
            pulumi.set(__self__, "honorific_prefix", honorific_prefix)
        if honorific_suffix is not None:
            pulumi.set(__self__, "honorific_suffix", honorific_suffix)
        if middle_name is not None:
            pulumi.set(__self__, "middle_name", middle_name)

    @property
    @pulumi.getter(name="familyName")
    def family_name(self) -> str:
        """
        (Updatable) Last name

        **SCIM++ Properties:**
        * caseExact: false
        * idcsCsvAttributeName: Last Name
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "family_name")

    @property
    @pulumi.getter
    def formatted(self) -> Optional[str]:
        """
        (Updatable) Full name

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "formatted")

    @property
    @pulumi.getter(name="givenName")
    def given_name(self) -> Optional[str]:
        """
        (Updatable) First name

        **SCIM++ Properties:**
        * caseExact: false
        * idcsCsvAttributeName: First Name
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "given_name")

    @property
    @pulumi.getter(name="honorificPrefix")
    def honorific_prefix(self) -> Optional[str]:
        """
        (Updatable) Prefix

        **SCIM++ Properties:**
        * idcsCsvAttributeName: Honorific Prefix
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "honorific_prefix")

    @property
    @pulumi.getter(name="honorificSuffix")
    def honorific_suffix(self) -> Optional[str]:
        """
        (Updatable) Suffix

        **SCIM++ Properties:**
        * idcsCsvAttributeName: Honorific Suffix
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "honorific_suffix")

    @property
    @pulumi.getter(name="middleName")
    def middle_name(self) -> Optional[str]:
        """
        (Updatable) Middle name

        **SCIM++ Properties:**
        * caseExact: false
        * idcsCsvAttributeName: Middle Name
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "middle_name")


@pulumi.output_type
class DomainsUserPhoneNumber(dict):
    def __init__(__self__, *,
                 type: str,
                 value: str,
                 display: Optional[str] = None,
                 primary: Optional[bool] = None,
                 verified: Optional[bool] = None):
        """
        :param str type: (Updatable) A label indicating the attribute's function.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str value: (Updatable) The value of a X509 certificate.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: binary
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param str display: (Updatable) A human readable name, primarily used for display purposes.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param bool primary: (Updatable) A Boolean value indicating the 'primary' or preferred attribute value for this attribute. The primary attribute value 'true' MUST appear no more than once.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: boolean
               * uniqueness: none
        :param bool verified: (Updatable) A Boolean value that indicates if the phone number is verified.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: boolean
               * uniqueness: none
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if verified is not None:
            pulumi.set(__self__, "verified", verified)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        (Updatable) A label indicating the attribute's function.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        (Updatable) The value of a X509 certificate.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: binary
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) A human readable name, primarily used for display purposes.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def primary(self) -> Optional[bool]:
        """
        (Updatable) A Boolean value indicating the 'primary' or preferred attribute value for this attribute. The primary attribute value 'true' MUST appear no more than once.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def verified(self) -> Optional[bool]:
        """
        (Updatable) A Boolean value that indicates if the phone number is verified.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "verified")


@pulumi.output_type
class DomainsUserPhoto(dict):
    def __init__(__self__, *,
                 type: str,
                 value: str,
                 display: Optional[str] = None,
                 primary: Optional[bool] = None):
        """
        :param str type: (Updatable) A label indicating the attribute's function.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str value: (Updatable) The value of a X509 certificate.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: binary
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param str display: (Updatable) A human readable name, primarily used for display purposes.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param bool primary: (Updatable) A Boolean value indicating the 'primary' or preferred attribute value for this attribute. The primary attribute value 'true' MUST appear no more than once.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: boolean
               * uniqueness: none
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        (Updatable) A label indicating the attribute's function.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        (Updatable) The value of a X509 certificate.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: binary
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) A human readable name, primarily used for display purposes.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def primary(self) -> Optional[bool]:
        """
        (Updatable) A Boolean value indicating the 'primary' or preferred attribute value for this attribute. The primary attribute value 'true' MUST appear no more than once.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "primary")


@pulumi.output_type
class DomainsUserRole(dict):
    def __init__(__self__, *,
                 type: str,
                 value: str,
                 display: Optional[str] = None,
                 primary: Optional[bool] = None):
        """
        :param str type: (Updatable) A label indicating the attribute's function.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str value: (Updatable) The value of a X509 certificate.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: binary
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param str display: (Updatable) A human readable name, primarily used for display purposes.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param bool primary: (Updatable) A Boolean value indicating the 'primary' or preferred attribute value for this attribute. The primary attribute value 'true' MUST appear no more than once.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: boolean
               * uniqueness: none
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        (Updatable) A label indicating the attribute's function.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        (Updatable) The value of a X509 certificate.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: binary
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) A human readable name, primarily used for display purposes.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def primary(self) -> Optional[bool]:
        """
        (Updatable) A Boolean value indicating the 'primary' or preferred attribute value for this attribute. The primary attribute value 'true' MUST appear no more than once.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "primary")


@pulumi.output_type
class DomainsUserTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: (Updatable) The value of of the User's api key.
               
               **Added In:** 2106240046
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        :param str value: (Updatable) The value of a X509 certificate.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: binary
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        (Updatable) The value of of the User's api key.

        **Added In:** 2106240046

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        (Updatable) The value of a X509 certificate.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: binary
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasextensionenterprise20user(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "costCenter":
            suggest = "cost_center"
        elif key == "employeeNumber":
            suggest = "employee_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserUrnietfparamsscimschemasextensionenterprise20user. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserUrnietfparamsscimschemasextensionenterprise20user.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserUrnietfparamsscimschemasextensionenterprise20user.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cost_center: Optional[str] = None,
                 department: Optional[str] = None,
                 division: Optional[str] = None,
                 employee_number: Optional[str] = None,
                 manager: Optional['outputs.DomainsUserUrnietfparamsscimschemasextensionenterprise20userManager'] = None,
                 organization: Optional[str] = None):
        """
        :param str cost_center: (Updatable) Identifies the name of a cost center.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsCsvAttributeName: Cost Center
               * idcsCsvAttributeNameMappings: [[columnHeaderName:Cost Center]]
               * idcsPii: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str department: (Updatable) Identifies the name of a department.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsCsvAttributeName: Department
               * idcsCsvAttributeNameMappings: [[columnHeaderName:Department]]
               * idcsPii: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str division: (Updatable) Identifies the name of a division.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsCsvAttributeName: Division
               * idcsCsvAttributeNameMappings: [[columnHeaderName:Division]]
               * idcsPii: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str employee_number: (Updatable) Numeric or alphanumeric identifier assigned to  a person, typically based on order of hire or association with an organization.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsCsvAttributeName: Employee Number
               * idcsCsvAttributeNameMappings: [[columnHeaderName:Employee Number]]
               * idcsPii: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param 'DomainsUserUrnietfparamsscimschemasextensionenterprise20userManagerArgs' manager: (Updatable) The User's manager. A complex type that optionally allows Service Providers to represent organizational hierarchy by referencing the 'id' attribute of another User.
               
               **SCIM++ Properties:**
               * idcsCsvAttributeNameMappings: [[columnHeaderName:Manager, deprecatedColumnHeaderName:Manager Name, mapsTo:manager.value]]
               * idcsPii: true
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: complex
               * uniqueness: none
        :param str organization: (Updatable) Identifies the name of an organization.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsCsvAttributeName: Organization
               * idcsCsvAttributeNameMappings: [[columnHeaderName:Organization Name, deprecatedColumnHeaderName:Organization]]
               * idcsPii: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        """
        if cost_center is not None:
            pulumi.set(__self__, "cost_center", cost_center)
        if department is not None:
            pulumi.set(__self__, "department", department)
        if division is not None:
            pulumi.set(__self__, "division", division)
        if employee_number is not None:
            pulumi.set(__self__, "employee_number", employee_number)
        if manager is not None:
            pulumi.set(__self__, "manager", manager)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)

    @property
    @pulumi.getter(name="costCenter")
    def cost_center(self) -> Optional[str]:
        """
        (Updatable) Identifies the name of a cost center.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsCsvAttributeName: Cost Center
        * idcsCsvAttributeNameMappings: [[columnHeaderName:Cost Center]]
        * idcsPii: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "cost_center")

    @property
    @pulumi.getter
    def department(self) -> Optional[str]:
        """
        (Updatable) Identifies the name of a department.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsCsvAttributeName: Department
        * idcsCsvAttributeNameMappings: [[columnHeaderName:Department]]
        * idcsPii: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "department")

    @property
    @pulumi.getter
    def division(self) -> Optional[str]:
        """
        (Updatable) Identifies the name of a division.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsCsvAttributeName: Division
        * idcsCsvAttributeNameMappings: [[columnHeaderName:Division]]
        * idcsPii: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "division")

    @property
    @pulumi.getter(name="employeeNumber")
    def employee_number(self) -> Optional[str]:
        """
        (Updatable) Numeric or alphanumeric identifier assigned to  a person, typically based on order of hire or association with an organization.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsCsvAttributeName: Employee Number
        * idcsCsvAttributeNameMappings: [[columnHeaderName:Employee Number]]
        * idcsPii: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "employee_number")

    @property
    @pulumi.getter
    def manager(self) -> Optional['outputs.DomainsUserUrnietfparamsscimschemasextensionenterprise20userManager']:
        """
        (Updatable) The User's manager. A complex type that optionally allows Service Providers to represent organizational hierarchy by referencing the 'id' attribute of another User.

        **SCIM++ Properties:**
        * idcsCsvAttributeNameMappings: [[columnHeaderName:Manager, deprecatedColumnHeaderName:Manager Name, mapsTo:manager.value]]
        * idcsPii: true
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: complex
        * uniqueness: none
        """
        return pulumi.get(self, "manager")

    @property
    @pulumi.getter
    def organization(self) -> Optional[str]:
        """
        (Updatable) Identifies the name of an organization.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsCsvAttributeName: Organization
        * idcsCsvAttributeNameMappings: [[columnHeaderName:Organization Name, deprecatedColumnHeaderName:Organization]]
        * idcsPii: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "organization")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasextensionenterprise20userManager(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserUrnietfparamsscimschemasextensionenterprise20userManager. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserUrnietfparamsscimschemasextensionenterprise20userManager.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserUrnietfparamsscimschemasextensionenterprise20userManager.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str display_name: (Updatable) The displayName of the User's manager. OPTIONAL and READ-ONLY.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) User Token URI
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param str value: (Updatable) The value of a X509 certificate.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: binary
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        (Updatable) The displayName of the User's manager. OPTIONAL and READ-ONLY.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) User Token URI

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        (Updatable) The value of a X509 certificate.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: binary
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionOciTags(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "definedTags":
            suggest = "defined_tags"
        elif key == "freeformTags":
            suggest = "freeform_tags"
        elif key == "tagSlug":
            suggest = "tag_slug"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserUrnietfparamsscimschemasoracleidcsextensionOciTags. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionOciTags.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionOciTags.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 defined_tags: Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionOciTagsDefinedTag']] = None,
                 freeform_tags: Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionOciTagsFreeformTag']] = None,
                 tag_slug: Optional[str] = None):
        """
        :param Sequence['DomainsUserUrnietfparamsscimschemasoracleidcsextensionOciTagsDefinedTagArgs'] defined_tags: (Updatable) Oracle Cloud Infrastructure Defined Tags
               
               **Added In:** 2011192329
               
               **SCIM++ Properties:**
               * idcsCompositeKey: [namespace, key, value]
               * type: complex
               * idcsSearchable: true
               * required: false
               * mutability: readWrite
               * multiValued: true
               * returned: default
        :param Sequence['DomainsUserUrnietfparamsscimschemasoracleidcsextensionOciTagsFreeformTagArgs'] freeform_tags: (Updatable) Oracle Cloud Infrastructure Freeform Tags
               
               **Added In:** 2011192329
               
               **SCIM++ Properties:**
               * idcsCompositeKey: [key, value]
               * idcsSearchable: true
               * type: complex
               * required: false
               * mutability: readWrite
               * returned: default
               * multiValued: true
        :param str tag_slug: (Updatable) Oracle Cloud Infrastructure Tag slug
               
               **Added In:** 2011192329
               
               **SCIM++ Properties:**
               * type: binary
               * mutability: readOnly
               * returned: request
        """
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if tag_slug is not None:
            pulumi.set(__self__, "tag_slug", tag_slug)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionOciTagsDefinedTag']]:
        """
        (Updatable) Oracle Cloud Infrastructure Defined Tags

        **Added In:** 2011192329

        **SCIM++ Properties:**
        * idcsCompositeKey: [namespace, key, value]
        * type: complex
        * idcsSearchable: true
        * required: false
        * mutability: readWrite
        * multiValued: true
        * returned: default
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionOciTagsFreeformTag']]:
        """
        (Updatable) Oracle Cloud Infrastructure Freeform Tags

        **Added In:** 2011192329

        **SCIM++ Properties:**
        * idcsCompositeKey: [key, value]
        * idcsSearchable: true
        * type: complex
        * required: false
        * mutability: readWrite
        * returned: default
        * multiValued: true
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="tagSlug")
    def tag_slug(self) -> Optional[str]:
        """
        (Updatable) Oracle Cloud Infrastructure Tag slug

        **Added In:** 2011192329

        **SCIM++ Properties:**
        * type: binary
        * mutability: readOnly
        * returned: request
        """
        return pulumi.get(self, "tag_slug")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionOciTagsDefinedTag(dict):
    def __init__(__self__, *,
                 key: str,
                 namespace: str,
                 value: str):
        """
        :param str key: (Updatable) The value of of the User's api key.
               
               **Added In:** 2106240046
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        :param str namespace: (Updatable) Oracle Cloud Infrastructure Tag namespace
               
               **Added In:** 2011192329
               
               **SCIM++ Properties:**
               * caseExact: false
               * type: string
               * required: true
               * mutability: readWrite
               * returned: default
               * idcsSearchable: true
               * uniqueness: none
        :param str value: (Updatable) The value of a X509 certificate.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: binary
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        (Updatable) The value of of the User's api key.

        **Added In:** 2106240046

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        (Updatable) Oracle Cloud Infrastructure Tag namespace

        **Added In:** 2011192329

        **SCIM++ Properties:**
        * caseExact: false
        * type: string
        * required: true
        * mutability: readWrite
        * returned: default
        * idcsSearchable: true
        * uniqueness: none
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        (Updatable) The value of a X509 certificate.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: binary
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionOciTagsFreeformTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: (Updatable) The value of of the User's api key.
               
               **Added In:** 2106240046
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        :param str value: (Updatable) The value of a X509 certificate.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: binary
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        (Updatable) The value of of the User's api key.

        **Added In:** 2106240046

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        (Updatable) The value of a X509 certificate.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: binary
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionadaptiveUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "riskLevel":
            suggest = "risk_level"
        elif key == "riskScores":
            suggest = "risk_scores"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserUrnietfparamsscimschemasoracleidcsextensionadaptiveUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionadaptiveUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionadaptiveUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 risk_level: Optional[str] = None,
                 risk_scores: Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionadaptiveUserRiskScore']] = None):
        """
        :param str risk_level: (Updatable) Risk Level
               
               **Added In:** 18.1.6
               
               **SCIM++ Properties:**
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: always
               * type: string
               * uniqueness: none
        :param Sequence['DomainsUserUrnietfparamsscimschemasoracleidcsextensionadaptiveUserRiskScoreArgs'] risk_scores: (Updatable) The risk score pertaining to the user.
               
               **Added In:** 18.1.6
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsCompositeKey: [value]
               * multiValued: true
               * mutability: readWrite
               * required: false
               * returned: request
               * type: complex
               * uniqueness: none
        """
        if risk_level is not None:
            pulumi.set(__self__, "risk_level", risk_level)
        if risk_scores is not None:
            pulumi.set(__self__, "risk_scores", risk_scores)

    @property
    @pulumi.getter(name="riskLevel")
    def risk_level(self) -> Optional[str]:
        """
        (Updatable) Risk Level

        **Added In:** 18.1.6

        **SCIM++ Properties:**
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "risk_level")

    @property
    @pulumi.getter(name="riskScores")
    def risk_scores(self) -> Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionadaptiveUserRiskScore']]:
        """
        (Updatable) The risk score pertaining to the user.

        **Added In:** 18.1.6

        **SCIM++ Properties:**
        * caseExact: false
        * idcsCompositeKey: [value]
        * multiValued: true
        * mutability: readWrite
        * required: false
        * returned: request
        * type: complex
        * uniqueness: none
        """
        return pulumi.get(self, "risk_scores")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionadaptiveUserRiskScore(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastUpdateTimestamp":
            suggest = "last_update_timestamp"
        elif key == "riskLevel":
            suggest = "risk_level"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserUrnietfparamsscimschemasoracleidcsextensionadaptiveUserRiskScore. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionadaptiveUserRiskScore.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionadaptiveUserRiskScore.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 last_update_timestamp: str,
                 risk_level: str,
                 score: int,
                 value: str,
                 ref: Optional[str] = None,
                 source: Optional[str] = None,
                 status: Optional[str] = None):
        """
        :param str last_update_timestamp: (Updatable) Last update timestamp for the risk score
               
               **Added In:** 18.1.6
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: always
               * type: dateTime
               * uniqueness: none
        :param str risk_level: (Updatable) Risk Level
               
               **Added In:** 18.1.6
               
               **SCIM++ Properties:**
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: always
               * type: string
               * uniqueness: none
        :param int score: (Updatable) Risk Score value
               
               **Added In:** 18.1.6
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: always
               * type: integer
               * uniqueness: none
        :param str value: (Updatable) The value of a X509 certificate.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: binary
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param str ref: (Updatable) User Token URI
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param str source: (Updatable) Risk Provider Profile Source
               
               **Added In:** 18.1.6
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        :param str status: (Updatable) A supplemental status indicating the reason why a user is disabled
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: request
               * type: string
               * uniqueness: none
        """
        pulumi.set(__self__, "last_update_timestamp", last_update_timestamp)
        pulumi.set(__self__, "risk_level", risk_level)
        pulumi.set(__self__, "score", score)
        pulumi.set(__self__, "value", value)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="lastUpdateTimestamp")
    def last_update_timestamp(self) -> str:
        """
        (Updatable) Last update timestamp for the risk score

        **Added In:** 18.1.6

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: always
        * type: dateTime
        * uniqueness: none
        """
        return pulumi.get(self, "last_update_timestamp")

    @property
    @pulumi.getter(name="riskLevel")
    def risk_level(self) -> str:
        """
        (Updatable) Risk Level

        **Added In:** 18.1.6

        **SCIM++ Properties:**
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "risk_level")

    @property
    @pulumi.getter
    def score(self) -> int:
        """
        (Updatable) Risk Score value

        **Added In:** 18.1.6

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: always
        * type: integer
        * uniqueness: none
        """
        return pulumi.get(self, "score")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        (Updatable) The value of a X509 certificate.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: binary
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) User Token URI

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        """
        (Updatable) Risk Provider Profile Source

        **Added In:** 18.1.6

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        (Updatable) A supplemental status indicating the reason why a user is disabled

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: request
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensioncapabilitiesUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "canUseApiKeys":
            suggest = "can_use_api_keys"
        elif key == "canUseAuthTokens":
            suggest = "can_use_auth_tokens"
        elif key == "canUseConsolePassword":
            suggest = "can_use_console_password"
        elif key == "canUseCustomerSecretKeys":
            suggest = "can_use_customer_secret_keys"
        elif key == "canUseDbCredentials":
            suggest = "can_use_db_credentials"
        elif key == "canUseOauth2clientCredentials":
            suggest = "can_use_oauth2client_credentials"
        elif key == "canUseSmtpCredentials":
            suggest = "can_use_smtp_credentials"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserUrnietfparamsscimschemasoracleidcsextensioncapabilitiesUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensioncapabilitiesUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensioncapabilitiesUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 can_use_api_keys: Optional[bool] = None,
                 can_use_auth_tokens: Optional[bool] = None,
                 can_use_console_password: Optional[bool] = None,
                 can_use_customer_secret_keys: Optional[bool] = None,
                 can_use_db_credentials: Optional[bool] = None,
                 can_use_oauth2client_credentials: Optional[bool] = None,
                 can_use_smtp_credentials: Optional[bool] = None):
        """
        :param bool can_use_api_keys: (Updatable) Indicates weather a user can use api keys
               
               **Added In:** 2012271618
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: boolean
               * uniqueness: none
        :param bool can_use_auth_tokens: (Updatable) Indicates weather a user can use auth tokens
               
               **Added In:** 2012271618
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: boolean
               * uniqueness: none
        :param bool can_use_console_password: (Updatable) Indicates weather a user can use console password
               
               **Added In:** 2012271618
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: boolean
               * uniqueness: none
        :param bool can_use_customer_secret_keys: (Updatable) Indicates weather a user can use customer secret keys
               
               **Added In:** 2012271618
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: boolean
               * uniqueness: none
        :param bool can_use_db_credentials: (Updatable) Indicates weather a user can use db credentials
               
               **Added In:** 2012271618
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: boolean
               * uniqueness: none
        :param bool can_use_oauth2client_credentials: (Updatable) Indicates weather a user can use oauth2 client credentials
               
               **Added In:** 2012271618
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: boolean
               * uniqueness: none
        :param bool can_use_smtp_credentials: (Updatable) Indicates weather a user can use smtp credentials
               
               **Added In:** 2012271618
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: boolean
               * uniqueness: none
        """
        if can_use_api_keys is not None:
            pulumi.set(__self__, "can_use_api_keys", can_use_api_keys)
        if can_use_auth_tokens is not None:
            pulumi.set(__self__, "can_use_auth_tokens", can_use_auth_tokens)
        if can_use_console_password is not None:
            pulumi.set(__self__, "can_use_console_password", can_use_console_password)
        if can_use_customer_secret_keys is not None:
            pulumi.set(__self__, "can_use_customer_secret_keys", can_use_customer_secret_keys)
        if can_use_db_credentials is not None:
            pulumi.set(__self__, "can_use_db_credentials", can_use_db_credentials)
        if can_use_oauth2client_credentials is not None:
            pulumi.set(__self__, "can_use_oauth2client_credentials", can_use_oauth2client_credentials)
        if can_use_smtp_credentials is not None:
            pulumi.set(__self__, "can_use_smtp_credentials", can_use_smtp_credentials)

    @property
    @pulumi.getter(name="canUseApiKeys")
    def can_use_api_keys(self) -> Optional[bool]:
        """
        (Updatable) Indicates weather a user can use api keys

        **Added In:** 2012271618

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "can_use_api_keys")

    @property
    @pulumi.getter(name="canUseAuthTokens")
    def can_use_auth_tokens(self) -> Optional[bool]:
        """
        (Updatable) Indicates weather a user can use auth tokens

        **Added In:** 2012271618

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "can_use_auth_tokens")

    @property
    @pulumi.getter(name="canUseConsolePassword")
    def can_use_console_password(self) -> Optional[bool]:
        """
        (Updatable) Indicates weather a user can use console password

        **Added In:** 2012271618

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "can_use_console_password")

    @property
    @pulumi.getter(name="canUseCustomerSecretKeys")
    def can_use_customer_secret_keys(self) -> Optional[bool]:
        """
        (Updatable) Indicates weather a user can use customer secret keys

        **Added In:** 2012271618

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "can_use_customer_secret_keys")

    @property
    @pulumi.getter(name="canUseDbCredentials")
    def can_use_db_credentials(self) -> Optional[bool]:
        """
        (Updatable) Indicates weather a user can use db credentials

        **Added In:** 2012271618

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "can_use_db_credentials")

    @property
    @pulumi.getter(name="canUseOauth2clientCredentials")
    def can_use_oauth2client_credentials(self) -> Optional[bool]:
        """
        (Updatable) Indicates weather a user can use oauth2 client credentials

        **Added In:** 2012271618

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "can_use_oauth2client_credentials")

    @property
    @pulumi.getter(name="canUseSmtpCredentials")
    def can_use_smtp_credentials(self) -> Optional[bool]:
        """
        (Updatable) Indicates weather a user can use smtp credentials

        **Added In:** 2012271618

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "can_use_smtp_credentials")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensiondbCredentialsUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dbLoginAttempts":
            suggest = "db_login_attempts"
        elif key == "dbUserName":
            suggest = "db_user_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserUrnietfparamsscimschemasoracleidcsextensiondbCredentialsUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensiondbCredentialsUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensiondbCredentialsUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 db_login_attempts: Optional[int] = None,
                 db_user_name: Optional[str] = None):
        """
        :param int db_login_attempts: (Updatable) The number of failed login attempts. The value is reset to 0 after a successful login.
               
               **Added In:** 2102181953
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: request
               * type: integer
               * uniqueness: none
        :param str db_user_name: (Updatable) The Database User Name
               
               **Added In:** 2102181953
               
               **SCIM++ Properties:**
               * multiValued: false
               * mutability: readWrite
               * required: false
               * type: string
               * returned: request
               * caseExact: false
               * uniqueness: none
               * idcsSearchable: true
        """
        if db_login_attempts is not None:
            pulumi.set(__self__, "db_login_attempts", db_login_attempts)
        if db_user_name is not None:
            pulumi.set(__self__, "db_user_name", db_user_name)

    @property
    @pulumi.getter(name="dbLoginAttempts")
    def db_login_attempts(self) -> Optional[int]:
        """
        (Updatable) The number of failed login attempts. The value is reset to 0 after a successful login.

        **Added In:** 2102181953

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: request
        * type: integer
        * uniqueness: none
        """
        return pulumi.get(self, "db_login_attempts")

    @property
    @pulumi.getter(name="dbUserName")
    def db_user_name(self) -> Optional[str]:
        """
        (Updatable) The Database User Name

        **Added In:** 2102181953

        **SCIM++ Properties:**
        * multiValued: false
        * mutability: readWrite
        * required: false
        * type: string
        * returned: request
        * caseExact: false
        * uniqueness: none
        * idcsSearchable: true
        """
        return pulumi.get(self, "db_user_name")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensiondbUserUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dbGlobalRoles":
            suggest = "db_global_roles"
        elif key == "domainLevelSchema":
            suggest = "domain_level_schema"
        elif key == "instanceLevelSchema":
            suggest = "instance_level_schema"
        elif key == "isDbUser":
            suggest = "is_db_user"
        elif key == "passwordVerifiers":
            suggest = "password_verifiers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserUrnietfparamsscimschemasoracleidcsextensiondbUserUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensiondbUserUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensiondbUserUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 db_global_roles: Optional[Sequence[str]] = None,
                 domain_level_schema: Optional[str] = None,
                 instance_level_schema: Optional[str] = None,
                 is_db_user: Optional[bool] = None,
                 password_verifiers: Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensiondbUserUserPasswordVerifier']] = None):
        """
        :param Sequence[str] db_global_roles: (Updatable) DB global roles to which the user is granted access.
               
               **Added In:** 18.2.2
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * idcsSensitive: none
               * multiValued: true
               * mutability: readOnly
               * required: false
               * returned: request
               * type: string
               * uniqueness: none
        :param str domain_level_schema: (Updatable) DB domain level schema to which the user is granted access.
               
               **Added In:** 18.2.2
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * idcsSensitive: none
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: request
               * type: string
               * uniqueness: none
        :param str instance_level_schema: (Updatable) DB instance level schema to which the user is granted access.
               
               **Added In:** 18.2.2
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * idcsSensitive: none
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: request
               * type: string
               * uniqueness: none
        :param bool is_db_user: (Updatable) If true, indicates this is a database user.
               
               **Added In:** 18.2.2
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: request
               * type: boolean
               * uniqueness: none
        :param Sequence['DomainsUserUrnietfparamsscimschemasoracleidcsextensiondbUserUserPasswordVerifierArgs'] password_verifiers: (Updatable) Password Verifiers for DB User.
               
               **Added In:** 18.2.2
               
               **SCIM++ Properties:**
               * idcsCompositeKey: [type]
               * idcsSearchable: true
               * multiValued: true
               * mutability: readOnly
               * required: false
               * returned: request
               * type: complex
               * uniqueness: none
        """
        if db_global_roles is not None:
            pulumi.set(__self__, "db_global_roles", db_global_roles)
        if domain_level_schema is not None:
            pulumi.set(__self__, "domain_level_schema", domain_level_schema)
        if instance_level_schema is not None:
            pulumi.set(__self__, "instance_level_schema", instance_level_schema)
        if is_db_user is not None:
            pulumi.set(__self__, "is_db_user", is_db_user)
        if password_verifiers is not None:
            pulumi.set(__self__, "password_verifiers", password_verifiers)

    @property
    @pulumi.getter(name="dbGlobalRoles")
    def db_global_roles(self) -> Optional[Sequence[str]]:
        """
        (Updatable) DB global roles to which the user is granted access.

        **Added In:** 18.2.2

        **SCIM++ Properties:**
        * idcsSearchable: false
        * idcsSensitive: none
        * multiValued: true
        * mutability: readOnly
        * required: false
        * returned: request
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "db_global_roles")

    @property
    @pulumi.getter(name="domainLevelSchema")
    def domain_level_schema(self) -> Optional[str]:
        """
        (Updatable) DB domain level schema to which the user is granted access.

        **Added In:** 18.2.2

        **SCIM++ Properties:**
        * idcsSearchable: false
        * idcsSensitive: none
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: request
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "domain_level_schema")

    @property
    @pulumi.getter(name="instanceLevelSchema")
    def instance_level_schema(self) -> Optional[str]:
        """
        (Updatable) DB instance level schema to which the user is granted access.

        **Added In:** 18.2.2

        **SCIM++ Properties:**
        * idcsSearchable: false
        * idcsSensitive: none
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: request
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "instance_level_schema")

    @property
    @pulumi.getter(name="isDbUser")
    def is_db_user(self) -> Optional[bool]:
        """
        (Updatable) If true, indicates this is a database user.

        **Added In:** 18.2.2

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: request
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "is_db_user")

    @property
    @pulumi.getter(name="passwordVerifiers")
    def password_verifiers(self) -> Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensiondbUserUserPasswordVerifier']]:
        """
        (Updatable) Password Verifiers for DB User.

        **Added In:** 18.2.2

        **SCIM++ Properties:**
        * idcsCompositeKey: [type]
        * idcsSearchable: true
        * multiValued: true
        * mutability: readOnly
        * required: false
        * returned: request
        * type: complex
        * uniqueness: none
        """
        return pulumi.get(self, "password_verifiers")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensiondbUserUserPasswordVerifier(dict):
    def __init__(__self__, *,
                 type: str,
                 value: str):
        """
        :param str type: (Updatable) A label indicating the attribute's function.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str value: (Updatable) The value of a X509 certificate.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: binary
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        (Updatable) A label indicating the attribute's function.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        (Updatable) The value of a X509 certificate.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: binary
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionkerberosUserUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "realmUsers":
            suggest = "realm_users"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserUrnietfparamsscimschemasoracleidcsextensionkerberosUserUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionkerberosUserUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionkerberosUserUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 realm_users: Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionkerberosUserUserRealmUser']] = None):
        """
        :param Sequence['DomainsUserUrnietfparamsscimschemasoracleidcsextensionkerberosUserUserRealmUserArgs'] realm_users: (Updatable) A list of kerberos realm users for an Oracle Cloud Infrastructure IAM User
               
               **SCIM++ Properties:**
               * idcsCompositeKey: [value]
               * multiValued: true
               * mutability: readWrite
               * required: false
               * returned: request
               * type: complex
               * uniqueness: none
        """
        if realm_users is not None:
            pulumi.set(__self__, "realm_users", realm_users)

    @property
    @pulumi.getter(name="realmUsers")
    def realm_users(self) -> Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionkerberosUserUserRealmUser']]:
        """
        (Updatable) A list of kerberos realm users for an Oracle Cloud Infrastructure IAM User

        **SCIM++ Properties:**
        * idcsCompositeKey: [value]
        * multiValued: true
        * mutability: readWrite
        * required: false
        * returned: request
        * type: complex
        * uniqueness: none
        """
        return pulumi.get(self, "realm_users")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionkerberosUserUserRealmUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "principalName":
            suggest = "principal_name"
        elif key == "realmName":
            suggest = "realm_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserUrnietfparamsscimschemasoracleidcsextensionkerberosUserUserRealmUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionkerberosUserUserRealmUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionkerberosUserUserRealmUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 value: str,
                 principal_name: Optional[str] = None,
                 realm_name: Optional[str] = None,
                 ref: Optional[str] = None):
        """
        :param str value: (Updatable) The value of a X509 certificate.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: binary
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param str principal_name: (Updatable) Principal Name of the KerberosRealmUser associated with the Oracle Cloud Infrastructure IAM User.
               
               **SCIM++ Properties:**
               * idcsPii: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str realm_name: (Updatable) Realm Name for the KerberosRealmUser associated with the Oracle Cloud Infrastructure IAM User.
               
               **SCIM++ Properties:**
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) User Token URI
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        """
        pulumi.set(__self__, "value", value)
        if principal_name is not None:
            pulumi.set(__self__, "principal_name", principal_name)
        if realm_name is not None:
            pulumi.set(__self__, "realm_name", realm_name)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        (Updatable) The value of a X509 certificate.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: binary
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="principalName")
    def principal_name(self) -> Optional[str]:
        """
        (Updatable) Principal Name of the KerberosRealmUser associated with the Oracle Cloud Infrastructure IAM User.

        **SCIM++ Properties:**
        * idcsPii: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "principal_name")

    @property
    @pulumi.getter(name="realmName")
    def realm_name(self) -> Optional[str]:
        """
        (Updatable) Realm Name for the KerberosRealmUser associated with the Oracle Cloud Infrastructure IAM User.

        **SCIM++ Properties:**
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "realm_name")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) User Token URI

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bypassCodes":
            suggest = "bypass_codes"
        elif key == "loginAttempts":
            suggest = "login_attempts"
        elif key == "mfaEnabledOn":
            suggest = "mfa_enabled_on"
        elif key == "mfaIgnoredApps":
            suggest = "mfa_ignored_apps"
        elif key == "mfaStatus":
            suggest = "mfa_status"
        elif key == "preferredAuthenticationFactor":
            suggest = "preferred_authentication_factor"
        elif key == "preferredAuthenticationMethod":
            suggest = "preferred_authentication_method"
        elif key == "preferredDevice":
            suggest = "preferred_device"
        elif key == "preferredThirdPartyVendor":
            suggest = "preferred_third_party_vendor"
        elif key == "trustedUserAgents":
            suggest = "trusted_user_agents"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bypass_codes: Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserBypassCode']] = None,
                 devices: Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserDevice']] = None,
                 login_attempts: Optional[int] = None,
                 mfa_enabled_on: Optional[str] = None,
                 mfa_ignored_apps: Optional[Sequence[str]] = None,
                 mfa_status: Optional[str] = None,
                 preferred_authentication_factor: Optional[str] = None,
                 preferred_authentication_method: Optional[str] = None,
                 preferred_device: Optional['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserPreferredDevice'] = None,
                 preferred_third_party_vendor: Optional[str] = None,
                 trusted_user_agents: Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserTrustedUserAgent']] = None):
        """
        :param Sequence['DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserBypassCodeArgs'] bypass_codes: (Updatable) A list of bypass codes belongs to user
               
               **Added In:** 18.3.6
               
               **SCIM++ Properties:**
               * idcsCompositeKey: [value]
               * multiValued: true
               * mutability: readOnly
               * required: false
               * returned: request
               * type: complex
               * uniqueness: none
        :param Sequence['DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserDeviceArgs'] devices: (Updatable) A list of devices enrolled by the user.
               
               **Added In:** 18.3.6
               
               **SCIM++ Properties:**
               * idcsCompositeKey: [value]
               * multiValued: true
               * mutability: readOnly
               * required: false
               * returned: request
               * type: complex
               * uniqueness: none
        :param int login_attempts: (Updatable) The number of failed login attempts. The value is reset to 0 after a successful login.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * idcsAllowUpdatesInReadOnlyMode: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: request
               * type: integer
               * uniqueness: none
        :param str mfa_enabled_on: (Updatable) This represents the date when the user enrolled for multi factor authentication. This will be set to null, when the user resets his factors.
               
               **Added In:** 18.3.6
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: request
               * type: dateTime
               * uniqueness: none
        :param Sequence[str] mfa_ignored_apps: (Updatable) User MFA Ignored Apps Identifiers
               
               **Added In:** 19.2.1
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: true
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str mfa_status: (Updatable) User Opted for MFA
               
               **Added In:** 18.3.6
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str preferred_authentication_factor: (Updatable) Preferred Authentication Factor Type
               
               **Added In:** 18.3.6
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str preferred_authentication_method: (Updatable) Preferred Authentication method
               
               **Added In:** 2009232244
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param 'DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserPreferredDeviceArgs' preferred_device: (Updatable) User preferred device
               
               **Added In:** 18.3.6
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: complex
               * uniqueness: none
        :param str preferred_third_party_vendor: (Updatable) Preferred Third party vendor name
               
               **Added In:** 19.2.1
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param Sequence['DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserTrustedUserAgentArgs'] trusted_user_agents: (Updatable) A list of trusted User Agents owned by this user. Multi-Factored Authentication uses Trusted User Agents to authenticate users.  A User Agent is software application that a user uses to issue requests. For example, a User Agent could be a particular browser (possibly one of several executing on a desktop or laptop) or a particular mobile application (again, oneof several executing on a particular mobile device). A User Agent is trusted once the Multi-Factor Authentication has verified it in some way.
               
               **Added In:** 18.3.6
               
               **SCIM++ Properties:**
               * idcsCompositeKey: [value]
               * multiValued: true
               * mutability: readWrite
               * required: false
               * returned: request
               * type: complex
               * uniqueness: none
        """
        if bypass_codes is not None:
            pulumi.set(__self__, "bypass_codes", bypass_codes)
        if devices is not None:
            pulumi.set(__self__, "devices", devices)
        if login_attempts is not None:
            pulumi.set(__self__, "login_attempts", login_attempts)
        if mfa_enabled_on is not None:
            pulumi.set(__self__, "mfa_enabled_on", mfa_enabled_on)
        if mfa_ignored_apps is not None:
            pulumi.set(__self__, "mfa_ignored_apps", mfa_ignored_apps)
        if mfa_status is not None:
            pulumi.set(__self__, "mfa_status", mfa_status)
        if preferred_authentication_factor is not None:
            pulumi.set(__self__, "preferred_authentication_factor", preferred_authentication_factor)
        if preferred_authentication_method is not None:
            pulumi.set(__self__, "preferred_authentication_method", preferred_authentication_method)
        if preferred_device is not None:
            pulumi.set(__self__, "preferred_device", preferred_device)
        if preferred_third_party_vendor is not None:
            pulumi.set(__self__, "preferred_third_party_vendor", preferred_third_party_vendor)
        if trusted_user_agents is not None:
            pulumi.set(__self__, "trusted_user_agents", trusted_user_agents)

    @property
    @pulumi.getter(name="bypassCodes")
    def bypass_codes(self) -> Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserBypassCode']]:
        """
        (Updatable) A list of bypass codes belongs to user

        **Added In:** 18.3.6

        **SCIM++ Properties:**
        * idcsCompositeKey: [value]
        * multiValued: true
        * mutability: readOnly
        * required: false
        * returned: request
        * type: complex
        * uniqueness: none
        """
        return pulumi.get(self, "bypass_codes")

    @property
    @pulumi.getter
    def devices(self) -> Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserDevice']]:
        """
        (Updatable) A list of devices enrolled by the user.

        **Added In:** 18.3.6

        **SCIM++ Properties:**
        * idcsCompositeKey: [value]
        * multiValued: true
        * mutability: readOnly
        * required: false
        * returned: request
        * type: complex
        * uniqueness: none
        """
        return pulumi.get(self, "devices")

    @property
    @pulumi.getter(name="loginAttempts")
    def login_attempts(self) -> Optional[int]:
        """
        (Updatable) The number of failed login attempts. The value is reset to 0 after a successful login.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * idcsAllowUpdatesInReadOnlyMode: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: request
        * type: integer
        * uniqueness: none
        """
        return pulumi.get(self, "login_attempts")

    @property
    @pulumi.getter(name="mfaEnabledOn")
    def mfa_enabled_on(self) -> Optional[str]:
        """
        (Updatable) This represents the date when the user enrolled for multi factor authentication. This will be set to null, when the user resets his factors.

        **Added In:** 18.3.6

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: request
        * type: dateTime
        * uniqueness: none
        """
        return pulumi.get(self, "mfa_enabled_on")

    @property
    @pulumi.getter(name="mfaIgnoredApps")
    def mfa_ignored_apps(self) -> Optional[Sequence[str]]:
        """
        (Updatable) User MFA Ignored Apps Identifiers

        **Added In:** 19.2.1

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: true
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "mfa_ignored_apps")

    @property
    @pulumi.getter(name="mfaStatus")
    def mfa_status(self) -> Optional[str]:
        """
        (Updatable) User Opted for MFA

        **Added In:** 18.3.6

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "mfa_status")

    @property
    @pulumi.getter(name="preferredAuthenticationFactor")
    def preferred_authentication_factor(self) -> Optional[str]:
        """
        (Updatable) Preferred Authentication Factor Type

        **Added In:** 18.3.6

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "preferred_authentication_factor")

    @property
    @pulumi.getter(name="preferredAuthenticationMethod")
    def preferred_authentication_method(self) -> Optional[str]:
        """
        (Updatable) Preferred Authentication method

        **Added In:** 2009232244

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "preferred_authentication_method")

    @property
    @pulumi.getter(name="preferredDevice")
    def preferred_device(self) -> Optional['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserPreferredDevice']:
        """
        (Updatable) User preferred device

        **Added In:** 18.3.6

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: complex
        * uniqueness: none
        """
        return pulumi.get(self, "preferred_device")

    @property
    @pulumi.getter(name="preferredThirdPartyVendor")
    def preferred_third_party_vendor(self) -> Optional[str]:
        """
        (Updatable) Preferred Third party vendor name

        **Added In:** 19.2.1

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "preferred_third_party_vendor")

    @property
    @pulumi.getter(name="trustedUserAgents")
    def trusted_user_agents(self) -> Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserTrustedUserAgent']]:
        """
        (Updatable) A list of trusted User Agents owned by this user. Multi-Factored Authentication uses Trusted User Agents to authenticate users.  A User Agent is software application that a user uses to issue requests. For example, a User Agent could be a particular browser (possibly one of several executing on a desktop or laptop) or a particular mobile application (again, oneof several executing on a particular mobile device). A User Agent is trusted once the Multi-Factor Authentication has verified it in some way.

        **Added In:** 18.3.6

        **SCIM++ Properties:**
        * idcsCompositeKey: [value]
        * multiValued: true
        * mutability: readWrite
        * required: false
        * returned: request
        * type: complex
        * uniqueness: none
        """
        return pulumi.get(self, "trusted_user_agents")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserBypassCode(dict):
    def __init__(__self__, *,
                 value: str,
                 ref: Optional[str] = None):
        """
        :param str value: (Updatable) The value of a X509 certificate.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: binary
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param str ref: (Updatable) User Token URI
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        """
        pulumi.set(__self__, "value", value)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        (Updatable) The value of a X509 certificate.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: binary
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) User Token URI

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserDevice(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authenticationMethod":
            suggest = "authentication_method"
        elif key == "factorStatus":
            suggest = "factor_status"
        elif key == "factorType":
            suggest = "factor_type"
        elif key == "lastSyncTime":
            suggest = "last_sync_time"
        elif key == "thirdPartyVendorName":
            suggest = "third_party_vendor_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserDevice. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserDevice.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserDevice.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 value: str,
                 authentication_method: Optional[str] = None,
                 display: Optional[str] = None,
                 factor_status: Optional[str] = None,
                 factor_type: Optional[str] = None,
                 last_sync_time: Optional[str] = None,
                 ref: Optional[str] = None,
                 status: Optional[str] = None,
                 third_party_vendor_name: Optional[str] = None):
        """
        :param str value: (Updatable) The value of a X509 certificate.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: binary
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param str authentication_method: (Updatable) Authentication method.
               
               **Added In:** 2009232244
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str display: (Updatable) A human readable name, primarily used for display purposes.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str factor_status: (Updatable) Device authentication factor status.
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str factor_type: (Updatable) Authentication Factor Type
               
               **Added In:** 20.1.3
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str last_sync_time: (Updatable) Last Sync time for device.
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: dateTime
               * uniqueness: none
        :param str ref: (Updatable) User Token URI
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param str status: (Updatable) A supplemental status indicating the reason why a user is disabled
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: request
               * type: string
               * uniqueness: none
        :param str third_party_vendor_name: (Updatable) Third party factor vendor name.
               
               **Added In:** 2009232244
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        """
        pulumi.set(__self__, "value", value)
        if authentication_method is not None:
            pulumi.set(__self__, "authentication_method", authentication_method)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if factor_status is not None:
            pulumi.set(__self__, "factor_status", factor_status)
        if factor_type is not None:
            pulumi.set(__self__, "factor_type", factor_type)
        if last_sync_time is not None:
            pulumi.set(__self__, "last_sync_time", last_sync_time)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if third_party_vendor_name is not None:
            pulumi.set(__self__, "third_party_vendor_name", third_party_vendor_name)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        (Updatable) The value of a X509 certificate.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: binary
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="authenticationMethod")
    def authentication_method(self) -> Optional[str]:
        """
        (Updatable) Authentication method.

        **Added In:** 2009232244

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "authentication_method")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) A human readable name, primarily used for display purposes.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter(name="factorStatus")
    def factor_status(self) -> Optional[str]:
        """
        (Updatable) Device authentication factor status.

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "factor_status")

    @property
    @pulumi.getter(name="factorType")
    def factor_type(self) -> Optional[str]:
        """
        (Updatable) Authentication Factor Type

        **Added In:** 20.1.3

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "factor_type")

    @property
    @pulumi.getter(name="lastSyncTime")
    def last_sync_time(self) -> Optional[str]:
        """
        (Updatable) Last Sync time for device.

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: dateTime
        * uniqueness: none
        """
        return pulumi.get(self, "last_sync_time")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) User Token URI

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        (Updatable) A supplemental status indicating the reason why a user is disabled

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: request
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="thirdPartyVendorName")
    def third_party_vendor_name(self) -> Optional[str]:
        """
        (Updatable) Third party factor vendor name.

        **Added In:** 2009232244

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "third_party_vendor_name")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserPreferredDevice(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ref: Optional[str] = None):
        """
        :param str value: (Updatable) The value of a X509 certificate.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: binary
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param str display: (Updatable) A human readable name, primarily used for display purposes.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) User Token URI
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        """
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        (Updatable) The value of a X509 certificate.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: binary
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) A human readable name, primarily used for display purposes.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) User Token URI

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserTrustedUserAgent(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ref: Optional[str] = None):
        """
        :param str value: (Updatable) The value of a X509 certificate.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: binary
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param str display: (Updatable) A human readable name, primarily used for display purposes.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) User Token URI
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        """
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        (Updatable) The value of a X509 certificate.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: binary
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) A human readable name, primarily used for display purposes.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) User Token URI

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applicablePasswordPolicy":
            suggest = "applicable_password_policy"
        elif key == "cantChange":
            suggest = "cant_change"
        elif key == "cantExpire":
            suggest = "cant_expire"
        elif key == "lastFailedValidationDate":
            suggest = "last_failed_validation_date"
        elif key == "lastSuccessfulSetDate":
            suggest = "last_successful_set_date"
        elif key == "lastSuccessfulValidationDate":
            suggest = "last_successful_validation_date"
        elif key == "mustChange":
            suggest = "must_change"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 applicable_password_policy: Optional['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserApplicablePasswordPolicy'] = None,
                 cant_change: Optional[bool] = None,
                 cant_expire: Optional[bool] = None,
                 expired: Optional[bool] = None,
                 last_failed_validation_date: Optional[str] = None,
                 last_successful_set_date: Optional[str] = None,
                 last_successful_validation_date: Optional[str] = None,
                 must_change: Optional[bool] = None):
        """
        :param 'DomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserApplicablePasswordPolicyArgs' applicable_password_policy: (Updatable) Applicable Password Policy
               
               **Added In:** 20.1.3
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsCompositeKey: [value]
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: request
               * type: complex
               * uniqueness: none
        :param bool cant_change: (Updatable) Indicates that the current password MAY NOT be changed and all other password expiry settings SHALL be ignored
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: request
               * type: boolean
               * uniqueness: none
        :param bool cant_expire: (Updatable) Indicates that the password expiry policy will not be applied for the current Resource
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: request
               * type: boolean
               * uniqueness: none
        :param bool expired: (Updatable) Indicates whether user password is expired. If this value is false, password expiry will still be evaluated during user login.
               
               **Added In:** 20.1.3
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: request
               * type: boolean
               * uniqueness: none
        :param str last_failed_validation_date: (Updatable) A DateTime that specifies the date and time when last failed password validation was set
               
               **Added In:** 2011192329
               
               **SCIM++ Properties:**
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: request
               * type: dateTime
               * uniqueness: none
        :param str last_successful_set_date: (Updatable) A DateTime that specifies the date and time when the current password was set
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: request
               * type: dateTime
               * uniqueness: none
        :param str last_successful_validation_date: (Updatable) A DateTime that specifies the date and time when last successful password validation was set
               
               **Added In:** 2011192329
               
               **SCIM++ Properties:**
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: request
               * type: dateTime
               * uniqueness: none
        :param bool must_change: (Updatable) Indicates that the subject password value MUST change on next login. If not changed, typically the account is locked. The value may be set indirectly when the subject's current password expires or directly set by an administrator.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: request
               * type: boolean
               * uniqueness: none
        """
        if applicable_password_policy is not None:
            pulumi.set(__self__, "applicable_password_policy", applicable_password_policy)
        if cant_change is not None:
            pulumi.set(__self__, "cant_change", cant_change)
        if cant_expire is not None:
            pulumi.set(__self__, "cant_expire", cant_expire)
        if expired is not None:
            pulumi.set(__self__, "expired", expired)
        if last_failed_validation_date is not None:
            pulumi.set(__self__, "last_failed_validation_date", last_failed_validation_date)
        if last_successful_set_date is not None:
            pulumi.set(__self__, "last_successful_set_date", last_successful_set_date)
        if last_successful_validation_date is not None:
            pulumi.set(__self__, "last_successful_validation_date", last_successful_validation_date)
        if must_change is not None:
            pulumi.set(__self__, "must_change", must_change)

    @property
    @pulumi.getter(name="applicablePasswordPolicy")
    def applicable_password_policy(self) -> Optional['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserApplicablePasswordPolicy']:
        """
        (Updatable) Applicable Password Policy

        **Added In:** 20.1.3

        **SCIM++ Properties:**
        * caseExact: false
        * idcsCompositeKey: [value]
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: request
        * type: complex
        * uniqueness: none
        """
        return pulumi.get(self, "applicable_password_policy")

    @property
    @pulumi.getter(name="cantChange")
    def cant_change(self) -> Optional[bool]:
        """
        (Updatable) Indicates that the current password MAY NOT be changed and all other password expiry settings SHALL be ignored

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: request
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "cant_change")

    @property
    @pulumi.getter(name="cantExpire")
    def cant_expire(self) -> Optional[bool]:
        """
        (Updatable) Indicates that the password expiry policy will not be applied for the current Resource

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: request
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "cant_expire")

    @property
    @pulumi.getter
    def expired(self) -> Optional[bool]:
        """
        (Updatable) Indicates whether user password is expired. If this value is false, password expiry will still be evaluated during user login.

        **Added In:** 20.1.3

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: request
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "expired")

    @property
    @pulumi.getter(name="lastFailedValidationDate")
    def last_failed_validation_date(self) -> Optional[str]:
        """
        (Updatable) A DateTime that specifies the date and time when last failed password validation was set

        **Added In:** 2011192329

        **SCIM++ Properties:**
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: request
        * type: dateTime
        * uniqueness: none
        """
        return pulumi.get(self, "last_failed_validation_date")

    @property
    @pulumi.getter(name="lastSuccessfulSetDate")
    def last_successful_set_date(self) -> Optional[str]:
        """
        (Updatable) A DateTime that specifies the date and time when the current password was set

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: request
        * type: dateTime
        * uniqueness: none
        """
        return pulumi.get(self, "last_successful_set_date")

    @property
    @pulumi.getter(name="lastSuccessfulValidationDate")
    def last_successful_validation_date(self) -> Optional[str]:
        """
        (Updatable) A DateTime that specifies the date and time when last successful password validation was set

        **Added In:** 2011192329

        **SCIM++ Properties:**
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: request
        * type: dateTime
        * uniqueness: none
        """
        return pulumi.get(self, "last_successful_validation_date")

    @property
    @pulumi.getter(name="mustChange")
    def must_change(self) -> Optional[bool]:
        """
        (Updatable) Indicates that the subject password value MUST change on next login. If not changed, typically the account is locked. The value may be set indirectly when the subject's current password expires or directly set by an administrator.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: request
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "must_change")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserApplicablePasswordPolicy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 priority: Optional[int] = None,
                 ref: Optional[str] = None):
        """
        :param str value: (Updatable) The value of a X509 certificate.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: binary
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param str display: (Updatable) A human readable name, primarily used for display purposes.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param int priority: (Updatable) PasswordPolicy priority
               
               **Added In:** 20.1.3
               
               **SCIM++ Properties:**
               * caseExact: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: integer
               * uniqueness: none
        :param str ref: (Updatable) User Token URI
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        """
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        (Updatable) The value of a X509 certificate.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: binary
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) A human readable name, primarily used for display purposes.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        """
        (Updatable) PasswordPolicy priority

        **Added In:** 20.1.3

        **SCIM++ Properties:**
        * caseExact: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: integer
        * uniqueness: none
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) User Token URI

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordlessUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "factorIdentifier":
            suggest = "factor_identifier"
        elif key == "factorMethod":
            suggest = "factor_method"
        elif key == "factorType":
            suggest = "factor_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordlessUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordlessUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordlessUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 factor_identifier: Optional['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordlessUserFactorIdentifier'] = None,
                 factor_method: Optional[str] = None,
                 factor_type: Optional[str] = None):
        """
        :param 'DomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordlessUserFactorIdentifierArgs' factor_identifier: (Updatable) Factor Identifier ID
               
               **Added In:** 20.1.3
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: complex
               * uniqueness: none
        :param str factor_method: (Updatable) Authentication Factor Method
               
               **Added In:** 2009232244
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str factor_type: (Updatable) Authentication Factor Type
               
               **Added In:** 20.1.3
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        """
        if factor_identifier is not None:
            pulumi.set(__self__, "factor_identifier", factor_identifier)
        if factor_method is not None:
            pulumi.set(__self__, "factor_method", factor_method)
        if factor_type is not None:
            pulumi.set(__self__, "factor_type", factor_type)

    @property
    @pulumi.getter(name="factorIdentifier")
    def factor_identifier(self) -> Optional['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordlessUserFactorIdentifier']:
        """
        (Updatable) Factor Identifier ID

        **Added In:** 20.1.3

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: complex
        * uniqueness: none
        """
        return pulumi.get(self, "factor_identifier")

    @property
    @pulumi.getter(name="factorMethod")
    def factor_method(self) -> Optional[str]:
        """
        (Updatable) Authentication Factor Method

        **Added In:** 2009232244

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "factor_method")

    @property
    @pulumi.getter(name="factorType")
    def factor_type(self) -> Optional[str]:
        """
        (Updatable) Authentication Factor Type

        **Added In:** 20.1.3

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "factor_type")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordlessUserFactorIdentifier(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ref: Optional[str] = None):
        """
        :param str value: (Updatable) The value of a X509 certificate.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: binary
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param str display: (Updatable) A human readable name, primarily used for display purposes.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) User Token URI
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        """
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        (Updatable) The value of a X509 certificate.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: binary
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) A human readable name, primarily used for display purposes.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) User Token URI

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionposixUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "gidNumber":
            suggest = "gid_number"
        elif key == "homeDirectory":
            suggest = "home_directory"
        elif key == "loginShell":
            suggest = "login_shell"
        elif key == "uidNumber":
            suggest = "uid_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserUrnietfparamsscimschemasoracleidcsextensionposixUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionposixUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionposixUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 gecos: Optional[str] = None,
                 gid_number: Optional[int] = None,
                 home_directory: Optional[str] = None,
                 login_shell: Optional[str] = None,
                 uid_number: Optional[int] = None):
        """
        :param str gecos: (Updatable) General information about the POSIX account such as their real name and phone number
               
               **SCIM++ Properties:**
               * caseExact: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: request
               * type: string
               * uniqueness: none
        :param int gid_number: (Updatable) Primary Group identifier of the POSIX user
               
               **SCIM++ Properties:**
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: request
               * type: integer
               * uniqueness: none
        :param str home_directory: (Updatable) The absolute path to the home directory of the POSIX account
               
               **SCIM++ Properties:**
               * caseExact: true
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: request
               * type: string
               * uniqueness: none
        :param str login_shell: (Updatable) The path to the login shell of the POSIX account
               
               **SCIM++ Properties:**
               * caseExact: true
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: request
               * type: string
               * uniqueness: none
        :param int uid_number: (Updatable) Integer uniquely identifying a user in a POSIX administrative domain
               
               **SCIM++ Properties:**
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: request
               * type: integer
               * uniqueness: server
        """
        if gecos is not None:
            pulumi.set(__self__, "gecos", gecos)
        if gid_number is not None:
            pulumi.set(__self__, "gid_number", gid_number)
        if home_directory is not None:
            pulumi.set(__self__, "home_directory", home_directory)
        if login_shell is not None:
            pulumi.set(__self__, "login_shell", login_shell)
        if uid_number is not None:
            pulumi.set(__self__, "uid_number", uid_number)

    @property
    @pulumi.getter
    def gecos(self) -> Optional[str]:
        """
        (Updatable) General information about the POSIX account such as their real name and phone number

        **SCIM++ Properties:**
        * caseExact: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: request
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "gecos")

    @property
    @pulumi.getter(name="gidNumber")
    def gid_number(self) -> Optional[int]:
        """
        (Updatable) Primary Group identifier of the POSIX user

        **SCIM++ Properties:**
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: request
        * type: integer
        * uniqueness: none
        """
        return pulumi.get(self, "gid_number")

    @property
    @pulumi.getter(name="homeDirectory")
    def home_directory(self) -> Optional[str]:
        """
        (Updatable) The absolute path to the home directory of the POSIX account

        **SCIM++ Properties:**
        * caseExact: true
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: request
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "home_directory")

    @property
    @pulumi.getter(name="loginShell")
    def login_shell(self) -> Optional[str]:
        """
        (Updatable) The path to the login shell of the POSIX account

        **SCIM++ Properties:**
        * caseExact: true
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: request
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "login_shell")

    @property
    @pulumi.getter(name="uidNumber")
    def uid_number(self) -> Optional[int]:
        """
        (Updatable) Integer uniquely identifying a user in a POSIX administrative domain

        **SCIM++ Properties:**
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: request
        * type: integer
        * uniqueness: server
        """
        return pulumi.get(self, "uid_number")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secQuestions":
            suggest = "sec_questions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserUrnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sec_questions: Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUserSecQuestion']] = None):
        """
        :param Sequence['DomainsUserUrnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUserSecQuestionArgs'] sec_questions: (Updatable) Security question and answers provided by end-user for Account recovery and/or MFA. While setting up security questions, end-user can also provide hint along with answer.
               
               **SCIM++ Properties:**
               * idcsCompositeKey: [value]
               * multiValued: true
               * mutability: readWrite
               * required: false
               * returned: request
               * type: complex
               * uniqueness: none
        """
        if sec_questions is not None:
            pulumi.set(__self__, "sec_questions", sec_questions)

    @property
    @pulumi.getter(name="secQuestions")
    def sec_questions(self) -> Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUserSecQuestion']]:
        """
        (Updatable) Security question and answers provided by end-user for Account recovery and/or MFA. While setting up security questions, end-user can also provide hint along with answer.

        **SCIM++ Properties:**
        * idcsCompositeKey: [value]
        * multiValued: true
        * mutability: readWrite
        * required: false
        * returned: request
        * type: complex
        * uniqueness: none
        """
        return pulumi.get(self, "sec_questions")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUserSecQuestion(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hintText":
            suggest = "hint_text"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserUrnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUserSecQuestion. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUserSecQuestion.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUserSecQuestion.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 answer: str,
                 value: str,
                 hint_text: Optional[str] = None,
                 ref: Optional[str] = None):
        """
        :param str answer: (Updatable) Answer provided by an user for a security question.
               
               **SCIM++ Properties:**
               * idcsCsvAttributeName: Answer
               * idcsSearchable: false
               * idcsSensitive: hash
               * multiValued: false
               * mutability: writeOnly
               * required: true
               * returned: never
               * type: string
               * uniqueness: none
               * idcsPii: true
        :param str value: (Updatable) The value of a X509 certificate.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: binary
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param str hint_text: (Updatable) Hint for an answer given by user while setting up Security Question.
               
               **SCIM++ Properties:**
               * caseExact: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) User Token URI
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        """
        pulumi.set(__self__, "answer", answer)
        pulumi.set(__self__, "value", value)
        if hint_text is not None:
            pulumi.set(__self__, "hint_text", hint_text)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def answer(self) -> str:
        """
        (Updatable) Answer provided by an user for a security question.

        **SCIM++ Properties:**
        * idcsCsvAttributeName: Answer
        * idcsSearchable: false
        * idcsSensitive: hash
        * multiValued: false
        * mutability: writeOnly
        * required: true
        * returned: never
        * type: string
        * uniqueness: none
        * idcsPii: true
        """
        return pulumi.get(self, "answer")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        (Updatable) The value of a X509 certificate.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: binary
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="hintText")
    def hint_text(self) -> Optional[str]:
        """
        (Updatable) Hint for an answer given by user while setting up Security Question.

        **SCIM++ Properties:**
        * caseExact: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "hint_text")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) User Token URI

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionselfChangeUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowSelfChange":
            suggest = "allow_self_change"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserUrnietfparamsscimschemasoracleidcsextensionselfChangeUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionselfChangeUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionselfChangeUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_self_change: Optional[bool] = None):
        """
        :param bool allow_self_change: (Updatable) If true, allows requesting user to update themselves. If false, requesting user can't update themself (default).
               
               **Added In:** 2205182039
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: writeOnly
               * required: false
               * returned: never
               * type: boolean
               * uniqueness: none
        """
        if allow_self_change is not None:
            pulumi.set(__self__, "allow_self_change", allow_self_change)

    @property
    @pulumi.getter(name="allowSelfChange")
    def allow_self_change(self) -> Optional[bool]:
        """
        (Updatable) If true, allows requesting user to update themselves. If false, requesting user can't update themself (default).

        **Added In:** 2205182039

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: writeOnly
        * required: false
        * returned: never
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "allow_self_change")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionselfRegistrationUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "selfRegistrationProfile":
            suggest = "self_registration_profile"
        elif key == "consentGranted":
            suggest = "consent_granted"
        elif key == "userToken":
            suggest = "user_token"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserUrnietfparamsscimschemasoracleidcsextensionselfRegistrationUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionselfRegistrationUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionselfRegistrationUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 self_registration_profile: 'outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionselfRegistrationUserSelfRegistrationProfile',
                 consent_granted: Optional[bool] = None,
                 user_token: Optional[str] = None):
        """
        :param 'DomainsUserUrnietfparamsscimschemasoracleidcsextensionselfRegistrationUserSelfRegistrationProfileArgs' self_registration_profile: (Updatable) Self registration profile used when user is self registered.
               
               **SCIM++ Properties:**
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: true
               * returned: request
               * type: complex
               * uniqueness: none
        :param bool consent_granted: (Updatable) A boolean value that indicates whether the consent is granted.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: default
               * type: boolean
               * uniqueness: none
        :param str user_token: (Updatable) User token returned if userFlowControlledByExternalClient is true
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * caseExact: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: complex
               * uniqueness: none
        """
        pulumi.set(__self__, "self_registration_profile", self_registration_profile)
        if consent_granted is not None:
            pulumi.set(__self__, "consent_granted", consent_granted)
        if user_token is not None:
            pulumi.set(__self__, "user_token", user_token)

    @property
    @pulumi.getter(name="selfRegistrationProfile")
    def self_registration_profile(self) -> 'outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionselfRegistrationUserSelfRegistrationProfile':
        """
        (Updatable) Self registration profile used when user is self registered.

        **SCIM++ Properties:**
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: true
        * returned: request
        * type: complex
        * uniqueness: none
        """
        return pulumi.get(self, "self_registration_profile")

    @property
    @pulumi.getter(name="consentGranted")
    def consent_granted(self) -> Optional[bool]:
        """
        (Updatable) A boolean value that indicates whether the consent is granted.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: default
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "consent_granted")

    @property
    @pulumi.getter(name="userToken")
    def user_token(self) -> Optional[str]:
        """
        (Updatable) User token returned if userFlowControlledByExternalClient is true

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * caseExact: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: complex
        * uniqueness: none
        """
        return pulumi.get(self, "user_token")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionselfRegistrationUserSelfRegistrationProfile(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ref: Optional[str] = None):
        """
        :param str value: (Updatable) The value of a X509 certificate.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: binary
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param str display: (Updatable) A human readable name, primarily used for display purposes.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) User Token URI
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        """
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        (Updatable) The value of a X509 certificate.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: binary
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) A human readable name, primarily used for display purposes.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) User Token URI

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionsffUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sffAuthKeys":
            suggest = "sff_auth_keys"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserUrnietfparamsscimschemasoracleidcsextensionsffUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionsffUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionsffUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sff_auth_keys: Optional[str] = None):
        """
        :param str sff_auth_keys: (Updatable) SFF auth keys clob
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: request
               * type: string
               * uniqueness: none
        """
        if sff_auth_keys is not None:
            pulumi.set(__self__, "sff_auth_keys", sff_auth_keys)

    @property
    @pulumi.getter(name="sffAuthKeys")
    def sff_auth_keys(self) -> Optional[str]:
        """
        (Updatable) SFF auth keys clob

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: request
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "sff_auth_keys")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionsocialAccountUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "socialAccounts":
            suggest = "social_accounts"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserUrnietfparamsscimschemasoracleidcsextensionsocialAccountUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionsocialAccountUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionsocialAccountUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 social_accounts: Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionsocialAccountUserSocialAccount']] = None):
        """
        :param Sequence['DomainsUserUrnietfparamsscimschemasoracleidcsextensionsocialAccountUserSocialAccountArgs'] social_accounts: (Updatable) Description:
               
               **SCIM++ Properties:**
               * idcsCompositeKey: [value]
               * idcsSearchable: true
               * multiValued: true
               * mutability: readOnly
               * required: false
               * returned: request
               * idcsPii: true
               * type: complex
               * uniqueness: none
        """
        if social_accounts is not None:
            pulumi.set(__self__, "social_accounts", social_accounts)

    @property
    @pulumi.getter(name="socialAccounts")
    def social_accounts(self) -> Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionsocialAccountUserSocialAccount']]:
        """
        (Updatable) Description:

        **SCIM++ Properties:**
        * idcsCompositeKey: [value]
        * idcsSearchable: true
        * multiValued: true
        * mutability: readOnly
        * required: false
        * returned: request
        * idcsPii: true
        * type: complex
        * uniqueness: none
        """
        return pulumi.get(self, "social_accounts")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionsocialAccountUserSocialAccount(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ref: Optional[str] = None):
        """
        :param str value: (Updatable) The value of a X509 certificate.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: binary
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param str display: (Updatable) A human readable name, primarily used for display purposes.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) User Token URI
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        """
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        (Updatable) The value of a X509 certificate.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: binary
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) A human readable name, primarily used for display purposes.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) User Token URI

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensiontermsOfUseUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "termsOfUseConsents":
            suggest = "terms_of_use_consents"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserUrnietfparamsscimschemasoracleidcsextensiontermsOfUseUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensiontermsOfUseUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensiontermsOfUseUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 terms_of_use_consents: Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensiontermsOfUseUserTermsOfUseConsent']] = None):
        """
        :param Sequence['DomainsUserUrnietfparamsscimschemasoracleidcsextensiontermsOfUseUserTermsOfUseConsentArgs'] terms_of_use_consents: (Updatable) Description:
               
               **Added In:** 18.2.6
               
               **SCIM++ Properties:**
               * idcsCompositeKey: [value]
               * idcsSearchable: true
               * multiValued: true
               * mutability: readWrite
               * required: false
               * returned: request
               * type: complex
               * uniqueness: none
        """
        if terms_of_use_consents is not None:
            pulumi.set(__self__, "terms_of_use_consents", terms_of_use_consents)

    @property
    @pulumi.getter(name="termsOfUseConsents")
    def terms_of_use_consents(self) -> Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensiontermsOfUseUserTermsOfUseConsent']]:
        """
        (Updatable) Description:

        **Added In:** 18.2.6

        **SCIM++ Properties:**
        * idcsCompositeKey: [value]
        * idcsSearchable: true
        * multiValued: true
        * mutability: readWrite
        * required: false
        * returned: request
        * type: complex
        * uniqueness: none
        """
        return pulumi.get(self, "terms_of_use_consents")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensiontermsOfUseUserTermsOfUseConsent(dict):
    def __init__(__self__, *,
                 value: str,
                 ref: Optional[str] = None):
        """
        :param str value: (Updatable) The value of a X509 certificate.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: binary
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param str ref: (Updatable) User Token URI
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        """
        pulumi.set(__self__, "value", value)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        (Updatable) The value of a X509 certificate.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: binary
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) User Token URI

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKeys":
            suggest = "api_keys"
        elif key == "authTokens":
            suggest = "auth_tokens"
        elif key == "customerSecretKeys":
            suggest = "customer_secret_keys"
        elif key == "dbCredentials":
            suggest = "db_credentials"
        elif key == "oAuth2clientCredentials":
            suggest = "o_auth2client_credentials"
        elif key == "smtpCredentials":
            suggest = "smtp_credentials"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_keys: Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserApiKey']] = None,
                 auth_tokens: Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserAuthToken']] = None,
                 customer_secret_keys: Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserCustomerSecretKey']] = None,
                 db_credentials: Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserDbCredential']] = None,
                 o_auth2client_credentials: Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserOAuth2clientCredential']] = None,
                 smtp_credentials: Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserSmtpCredential']] = None):
        """
        :param Sequence['DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserApiKeyArgs'] api_keys: (Updatable) A list of api keys corresponding to user.
               
               **Added In:** 2012271618
               
               **SCIM++ Properties:**
               * idcsCompositeKey: [value]
               * idcsSearchable: true
               * multiValued: true
               * mutability: readOnly
               * required: false
               * returned: request
               * type: complex
               * uniqueness: none
        :param Sequence['DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserAuthTokenArgs'] auth_tokens: (Updatable) A list of auth tokens corresponding to user.
               
               **Added In:** 2012271618
               
               **SCIM++ Properties:**
               * idcsCompositeKey: [value]
               * idcsSearchable: true
               * multiValued: true
               * mutability: readOnly
               * required: false
               * returned: request
               * type: complex
               * uniqueness: none
        :param Sequence['DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserCustomerSecretKeyArgs'] customer_secret_keys: (Updatable) A list of customer secret keys corresponding to user.
               
               **Added In:** 2102181953
               
               **SCIM++ Properties:**
               * idcsCompositeKey: [value]
               * idcsSearchable: true
               * multiValued: true
               * mutability: readOnly
               * required: false
               * returned: request
               * type: complex
               * uniqueness: none
        :param Sequence['DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserDbCredentialArgs'] db_credentials: (Updatable) A list of db credentials corresponding to user.
               
               **Added In:** 2102181953
               
               **SCIM++ Properties:**
               * idcsCompositeKey: [value]
               * idcsSearchable: true
               * multiValued: true
               * mutability: readOnly
               * required: false
               * returned: request
               * type: complex
               * uniqueness: none
        :param Sequence['DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserOAuth2clientCredentialArgs'] o_auth2client_credentials: (Updatable) A list of oauth2 client credentials corresponding to user.
               
               **Added In:** 2012271618
               
               **SCIM++ Properties:**
               * idcsCompositeKey: [value]
               * idcsSearchable: true
               * multiValued: true
               * mutability: readOnly
               * required: false
               * returned: request
               * type: complex
               * uniqueness: none
        :param Sequence['DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserSmtpCredentialArgs'] smtp_credentials: (Updatable) A list of smtp credentials corresponding to user.
               
               **Added In:** 2012271618
               
               **SCIM++ Properties:**
               * idcsCompositeKey: [value]
               * idcsSearchable: true
               * multiValued: true
               * mutability: readOnly
               * required: false
               * returned: request
               * type: complex
               * uniqueness: none
        """
        if api_keys is not None:
            pulumi.set(__self__, "api_keys", api_keys)
        if auth_tokens is not None:
            pulumi.set(__self__, "auth_tokens", auth_tokens)
        if customer_secret_keys is not None:
            pulumi.set(__self__, "customer_secret_keys", customer_secret_keys)
        if db_credentials is not None:
            pulumi.set(__self__, "db_credentials", db_credentials)
        if o_auth2client_credentials is not None:
            pulumi.set(__self__, "o_auth2client_credentials", o_auth2client_credentials)
        if smtp_credentials is not None:
            pulumi.set(__self__, "smtp_credentials", smtp_credentials)

    @property
    @pulumi.getter(name="apiKeys")
    def api_keys(self) -> Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserApiKey']]:
        """
        (Updatable) A list of api keys corresponding to user.

        **Added In:** 2012271618

        **SCIM++ Properties:**
        * idcsCompositeKey: [value]
        * idcsSearchable: true
        * multiValued: true
        * mutability: readOnly
        * required: false
        * returned: request
        * type: complex
        * uniqueness: none
        """
        return pulumi.get(self, "api_keys")

    @property
    @pulumi.getter(name="authTokens")
    def auth_tokens(self) -> Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserAuthToken']]:
        """
        (Updatable) A list of auth tokens corresponding to user.

        **Added In:** 2012271618

        **SCIM++ Properties:**
        * idcsCompositeKey: [value]
        * idcsSearchable: true
        * multiValued: true
        * mutability: readOnly
        * required: false
        * returned: request
        * type: complex
        * uniqueness: none
        """
        return pulumi.get(self, "auth_tokens")

    @property
    @pulumi.getter(name="customerSecretKeys")
    def customer_secret_keys(self) -> Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserCustomerSecretKey']]:
        """
        (Updatable) A list of customer secret keys corresponding to user.

        **Added In:** 2102181953

        **SCIM++ Properties:**
        * idcsCompositeKey: [value]
        * idcsSearchable: true
        * multiValued: true
        * mutability: readOnly
        * required: false
        * returned: request
        * type: complex
        * uniqueness: none
        """
        return pulumi.get(self, "customer_secret_keys")

    @property
    @pulumi.getter(name="dbCredentials")
    def db_credentials(self) -> Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserDbCredential']]:
        """
        (Updatable) A list of db credentials corresponding to user.

        **Added In:** 2102181953

        **SCIM++ Properties:**
        * idcsCompositeKey: [value]
        * idcsSearchable: true
        * multiValued: true
        * mutability: readOnly
        * required: false
        * returned: request
        * type: complex
        * uniqueness: none
        """
        return pulumi.get(self, "db_credentials")

    @property
    @pulumi.getter(name="oAuth2clientCredentials")
    def o_auth2client_credentials(self) -> Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserOAuth2clientCredential']]:
        """
        (Updatable) A list of oauth2 client credentials corresponding to user.

        **Added In:** 2012271618

        **SCIM++ Properties:**
        * idcsCompositeKey: [value]
        * idcsSearchable: true
        * multiValued: true
        * mutability: readOnly
        * required: false
        * returned: request
        * type: complex
        * uniqueness: none
        """
        return pulumi.get(self, "o_auth2client_credentials")

    @property
    @pulumi.getter(name="smtpCredentials")
    def smtp_credentials(self) -> Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserSmtpCredential']]:
        """
        (Updatable) A list of smtp credentials corresponding to user.

        **Added In:** 2012271618

        **SCIM++ Properties:**
        * idcsCompositeKey: [value]
        * idcsSearchable: true
        * multiValued: true
        * mutability: readOnly
        * required: false
        * returned: request
        * type: complex
        * uniqueness: none
        """
        return pulumi.get(self, "smtp_credentials")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserApiKey(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str key: (Updatable) The value of of the User's api key.
               
               **Added In:** 2106240046
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        :param str ocid: (Updatable) Ocid of the User's Support Account.
               
               **Added In:** 2103141444
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) User Token URI
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param str value: (Updatable) The value of a X509 certificate.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: binary
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        (Updatable) The value of of the User's api key.

        **Added In:** 2106240046

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        """
        (Updatable) Ocid of the User's Support Account.

        **Added In:** 2103141444

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) User Token URI

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        (Updatable) The value of a X509 certificate.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: binary
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserAuthToken(dict):
    def __init__(__self__, *,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str ocid: (Updatable) Ocid of the User's Support Account.
               
               **Added In:** 2103141444
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) User Token URI
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param str value: (Updatable) The value of a X509 certificate.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: binary
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        """
        (Updatable) Ocid of the User's Support Account.

        **Added In:** 2103141444

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) User Token URI

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        (Updatable) The value of a X509 certificate.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: binary
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserCustomerSecretKey(dict):
    def __init__(__self__, *,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str ocid: (Updatable) Ocid of the User's Support Account.
               
               **Added In:** 2103141444
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) User Token URI
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param str value: (Updatable) The value of a X509 certificate.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: binary
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        """
        (Updatable) Ocid of the User's Support Account.

        **Added In:** 2103141444

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) User Token URI

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        (Updatable) The value of a X509 certificate.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: binary
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserDbCredential(dict):
    def __init__(__self__, *,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str ocid: (Updatable) Ocid of the User's Support Account.
               
               **Added In:** 2103141444
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) User Token URI
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param str value: (Updatable) The value of a X509 certificate.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: binary
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        """
        (Updatable) Ocid of the User's Support Account.

        **Added In:** 2103141444

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) User Token URI

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        (Updatable) The value of a X509 certificate.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: binary
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserOAuth2clientCredential(dict):
    def __init__(__self__, *,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str ocid: (Updatable) Ocid of the User's Support Account.
               
               **Added In:** 2103141444
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) User Token URI
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param str value: (Updatable) The value of a X509 certificate.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: binary
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        """
        (Updatable) Ocid of the User's Support Account.

        **Added In:** 2103141444

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) User Token URI

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        (Updatable) The value of a X509 certificate.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: binary
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserSmtpCredential(dict):
    def __init__(__self__, *,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str ocid: (Updatable) Ocid of the User's Support Account.
               
               **Added In:** 2103141444
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) User Token URI
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param str value: (Updatable) The value of a X509 certificate.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: binary
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        """
        (Updatable) Ocid of the User's Support Account.

        **Added In:** 2103141444

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) User Token URI

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        (Updatable) The value of a X509 certificate.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: binary
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastFailedLoginDate":
            suggest = "last_failed_login_date"
        elif key == "lastSuccessfulLoginDate":
            suggest = "last_successful_login_date"
        elif key == "loginAttempts":
            suggest = "login_attempts"
        elif key == "maxConcurrentSessions":
            suggest = "max_concurrent_sessions"
        elif key == "previousSuccessfulLoginDate":
            suggest = "previous_successful_login_date"
        elif key == "recoveryAttempts":
            suggest = "recovery_attempts"
        elif key == "recoveryEnrollAttempts":
            suggest = "recovery_enroll_attempts"
        elif key == "recoveryLocked":
            suggest = "recovery_locked"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 last_failed_login_date: Optional[str] = None,
                 last_successful_login_date: Optional[str] = None,
                 locked: Optional['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLocked'] = None,
                 login_attempts: Optional[int] = None,
                 max_concurrent_sessions: Optional[int] = None,
                 previous_successful_login_date: Optional[str] = None,
                 recovery_attempts: Optional[int] = None,
                 recovery_enroll_attempts: Optional[int] = None,
                 recovery_locked: Optional['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserRecoveryLocked'] = None):
        """
        :param str last_failed_login_date: (Updatable) The last failed login date
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * idcsAllowUpdatesInReadOnlyMode: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: request
               * type: dateTime
               * uniqueness: none
        :param str last_successful_login_date: (Updatable) The last successful login date
               
               **SCIM++ Properties:**
               * idcsSearchable: true
               * idcsAllowUpdatesInReadOnlyMode: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: request
               * type: dateTime
               * uniqueness: none
        :param 'DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLockedArgs' locked: (Updatable) A complex attribute that indicates an account is locked (blocking new sessions)
               
               **SCIM++ Properties:**
               * idcsCsvAttributeNameMappings: [[columnHeaderName:Locked, mapsTo:locked.on], [columnHeaderName:Locked Reason, mapsTo:locked.reason], [columnHeaderName:Locked Date, mapsTo:locked.lockDate]]
               * idcsSearchable: false
               * idcsAllowUpdatesInReadOnlyMode: true
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: complex
               * uniqueness: none
        :param int login_attempts: (Updatable) The number of failed login attempts. The value is reset to 0 after a successful login.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * idcsAllowUpdatesInReadOnlyMode: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: request
               * type: integer
               * uniqueness: none
        :param int max_concurrent_sessions: (Updatable) Maximum number of concurrent sessions for a User
               
               **Added In:** 20.1.3
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsMaxValue: 999
               * idcsMinValue: 1
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: integer
               * uniqueness: none
        :param str previous_successful_login_date: (Updatable) The previous successful login date
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: request
               * type: dateTime
               * uniqueness: none
        :param int recovery_attempts: (Updatable) The number of failed recovery attempts. The value is reset to 0 after a successful login.
               
               **Added In:** 19.1.4
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: request
               * type: integer
               * uniqueness: none
        :param int recovery_enroll_attempts: (Updatable) The number of failed account recovery enrollment attempts.
               
               **Added In:** 19.1.4
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: request
               * type: integer
               * uniqueness: none
        :param 'DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserRecoveryLockedArgs' recovery_locked: (Updatable) A complex attribute that indicates an password recovery is locked (blocking new sessions)
               
               **Added In:** 19.1.4
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: complex
               * uniqueness: none
        """
        if last_failed_login_date is not None:
            pulumi.set(__self__, "last_failed_login_date", last_failed_login_date)
        if last_successful_login_date is not None:
            pulumi.set(__self__, "last_successful_login_date", last_successful_login_date)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if login_attempts is not None:
            pulumi.set(__self__, "login_attempts", login_attempts)
        if max_concurrent_sessions is not None:
            pulumi.set(__self__, "max_concurrent_sessions", max_concurrent_sessions)
        if previous_successful_login_date is not None:
            pulumi.set(__self__, "previous_successful_login_date", previous_successful_login_date)
        if recovery_attempts is not None:
            pulumi.set(__self__, "recovery_attempts", recovery_attempts)
        if recovery_enroll_attempts is not None:
            pulumi.set(__self__, "recovery_enroll_attempts", recovery_enroll_attempts)
        if recovery_locked is not None:
            pulumi.set(__self__, "recovery_locked", recovery_locked)

    @property
    @pulumi.getter(name="lastFailedLoginDate")
    def last_failed_login_date(self) -> Optional[str]:
        """
        (Updatable) The last failed login date

        **SCIM++ Properties:**
        * idcsSearchable: false
        * idcsAllowUpdatesInReadOnlyMode: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: request
        * type: dateTime
        * uniqueness: none
        """
        return pulumi.get(self, "last_failed_login_date")

    @property
    @pulumi.getter(name="lastSuccessfulLoginDate")
    def last_successful_login_date(self) -> Optional[str]:
        """
        (Updatable) The last successful login date

        **SCIM++ Properties:**
        * idcsSearchable: true
        * idcsAllowUpdatesInReadOnlyMode: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: request
        * type: dateTime
        * uniqueness: none
        """
        return pulumi.get(self, "last_successful_login_date")

    @property
    @pulumi.getter
    def locked(self) -> Optional['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLocked']:
        """
        (Updatable) A complex attribute that indicates an account is locked (blocking new sessions)

        **SCIM++ Properties:**
        * idcsCsvAttributeNameMappings: [[columnHeaderName:Locked, mapsTo:locked.on], [columnHeaderName:Locked Reason, mapsTo:locked.reason], [columnHeaderName:Locked Date, mapsTo:locked.lockDate]]
        * idcsSearchable: false
        * idcsAllowUpdatesInReadOnlyMode: true
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: complex
        * uniqueness: none
        """
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="loginAttempts")
    def login_attempts(self) -> Optional[int]:
        """
        (Updatable) The number of failed login attempts. The value is reset to 0 after a successful login.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * idcsAllowUpdatesInReadOnlyMode: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: request
        * type: integer
        * uniqueness: none
        """
        return pulumi.get(self, "login_attempts")

    @property
    @pulumi.getter(name="maxConcurrentSessions")
    def max_concurrent_sessions(self) -> Optional[int]:
        """
        (Updatable) Maximum number of concurrent sessions for a User

        **Added In:** 20.1.3

        **SCIM++ Properties:**
        * caseExact: false
        * idcsMaxValue: 999
        * idcsMinValue: 1
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: integer
        * uniqueness: none
        """
        return pulumi.get(self, "max_concurrent_sessions")

    @property
    @pulumi.getter(name="previousSuccessfulLoginDate")
    def previous_successful_login_date(self) -> Optional[str]:
        """
        (Updatable) The previous successful login date

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: request
        * type: dateTime
        * uniqueness: none
        """
        return pulumi.get(self, "previous_successful_login_date")

    @property
    @pulumi.getter(name="recoveryAttempts")
    def recovery_attempts(self) -> Optional[int]:
        """
        (Updatable) The number of failed recovery attempts. The value is reset to 0 after a successful login.

        **Added In:** 19.1.4

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: request
        * type: integer
        * uniqueness: none
        """
        return pulumi.get(self, "recovery_attempts")

    @property
    @pulumi.getter(name="recoveryEnrollAttempts")
    def recovery_enroll_attempts(self) -> Optional[int]:
        """
        (Updatable) The number of failed account recovery enrollment attempts.

        **Added In:** 19.1.4

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: request
        * type: integer
        * uniqueness: none
        """
        return pulumi.get(self, "recovery_enroll_attempts")

    @property
    @pulumi.getter(name="recoveryLocked")
    def recovery_locked(self) -> Optional['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserRecoveryLocked']:
        """
        (Updatable) A complex attribute that indicates an password recovery is locked (blocking new sessions)

        **Added In:** 19.1.4

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: complex
        * uniqueness: none
        """
        return pulumi.get(self, "recovery_locked")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLocked(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lockDate":
            suggest = "lock_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLocked. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLocked.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLocked.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expired: Optional[bool] = None,
                 lock_date: Optional[str] = None,
                 on: Optional[bool] = None,
                 reason: Optional[int] = None):
        """
        :param bool expired: (Updatable) Indicates whether user password is expired. If this value is false, password expiry will still be evaluated during user login.
               
               **Added In:** 20.1.3
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: request
               * type: boolean
               * uniqueness: none
        :param str lock_date: (Updatable) The date and time that the current resource was locked
               
               **Added In:** 19.1.4
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: dateTime
               * uniqueness: none
        :param bool on: (Updatable) Indicates that the rev is locked
               
               **Added In:** 19.1.4
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: boolean
               * uniqueness: none
        :param int reason: (Updatable) Indicates the reason for locking. Valid values are: 0 - failed password login attempts, 1 - admin lock, 2 - failed reset password attempts, 3 - failed MFA login attempts, 4 - failed MFA login attempts for federated user, 5 - failed Database login attempts
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: integer
               * uniqueness: none
        """
        if expired is not None:
            pulumi.set(__self__, "expired", expired)
        if lock_date is not None:
            pulumi.set(__self__, "lock_date", lock_date)
        if on is not None:
            pulumi.set(__self__, "on", on)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def expired(self) -> Optional[bool]:
        """
        (Updatable) Indicates whether user password is expired. If this value is false, password expiry will still be evaluated during user login.

        **Added In:** 20.1.3

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: request
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "expired")

    @property
    @pulumi.getter(name="lockDate")
    def lock_date(self) -> Optional[str]:
        """
        (Updatable) The date and time that the current resource was locked

        **Added In:** 19.1.4

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: dateTime
        * uniqueness: none
        """
        return pulumi.get(self, "lock_date")

    @property
    @pulumi.getter
    def on(self) -> Optional[bool]:
        """
        (Updatable) Indicates that the rev is locked

        **Added In:** 19.1.4

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "on")

    @property
    @pulumi.getter
    def reason(self) -> Optional[int]:
        """
        (Updatable) Indicates the reason for locking. Valid values are: 0 - failed password login attempts, 1 - admin lock, 2 - failed reset password attempts, 3 - failed MFA login attempts, 4 - failed MFA login attempts for federated user, 5 - failed Database login attempts

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: integer
        * uniqueness: none
        """
        return pulumi.get(self, "reason")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserRecoveryLocked(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lockDate":
            suggest = "lock_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserRecoveryLocked. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserRecoveryLocked.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserRecoveryLocked.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 lock_date: Optional[str] = None,
                 on: Optional[bool] = None):
        """
        :param str lock_date: (Updatable) The date and time that the current resource was locked
               
               **Added In:** 19.1.4
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: dateTime
               * uniqueness: none
        :param bool on: (Updatable) Indicates that the rev is locked
               
               **Added In:** 19.1.4
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: boolean
               * uniqueness: none
        """
        if lock_date is not None:
            pulumi.set(__self__, "lock_date", lock_date)
        if on is not None:
            pulumi.set(__self__, "on", on)

    @property
    @pulumi.getter(name="lockDate")
    def lock_date(self) -> Optional[str]:
        """
        (Updatable) The date and time that the current resource was locked

        **Added In:** 19.1.4

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: dateTime
        * uniqueness: none
        """
        return pulumi.get(self, "lock_date")

    @property
    @pulumi.getter
    def on(self) -> Optional[bool]:
        """
        (Updatable) Indicates that the rev is locked

        **Added In:** 19.1.4

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "on")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountRecoveryRequired":
            suggest = "account_recovery_required"
        elif key == "appRoles":
            suggest = "app_roles"
        elif key == "applicableAuthenticationTargetApps":
            suggest = "applicable_authentication_target_apps"
        elif key == "bypassNotification":
            suggest = "bypass_notification"
        elif key == "creationMechanism":
            suggest = "creation_mechanism"
        elif key == "delegatedAuthenticationTargetApp":
            suggest = "delegated_authentication_target_app"
        elif key == "doNotShowGettingStarted":
            suggest = "do_not_show_getting_started"
        elif key == "idcsAppRolesLimitedToGroups":
            suggest = "idcs_app_roles_limited_to_groups"
        elif key == "isAccountRecoveryEnrolled":
            suggest = "is_account_recovery_enrolled"
        elif key == "isAuthenticationDelegated":
            suggest = "is_authentication_delegated"
        elif key == "isFederatedUser":
            suggest = "is_federated_user"
        elif key == "isGroupMembershipNormalized":
            suggest = "is_group_membership_normalized"
        elif key == "isGroupMembershipSyncedToUsersGroups":
            suggest = "is_group_membership_synced_to_users_groups"
        elif key == "notificationEmailTemplateId":
            suggest = "notification_email_template_id"
        elif key == "supportAccounts":
            suggest = "support_accounts"
        elif key == "syncedFromApp":
            suggest = "synced_from_app"
        elif key == "userFlowControlledByExternalClient":
            suggest = "user_flow_controlled_by_external_client"
        elif key == "userProvider":
            suggest = "user_provider"
        elif key == "userTokens":
            suggest = "user_tokens"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_recovery_required: Optional[bool] = None,
                 accounts: Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAccount']] = None,
                 app_roles: Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAppRole']] = None,
                 applicable_authentication_target_apps: Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserApplicableAuthenticationTargetApp']] = None,
                 bypass_notification: Optional[bool] = None,
                 creation_mechanism: Optional[str] = None,
                 delegated_authentication_target_app: Optional['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserDelegatedAuthenticationTargetApp'] = None,
                 do_not_show_getting_started: Optional[bool] = None,
                 grants: Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserGrant']] = None,
                 idcs_app_roles_limited_to_groups: Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserIdcsAppRolesLimitedToGroup']] = None,
                 is_account_recovery_enrolled: Optional[bool] = None,
                 is_authentication_delegated: Optional[bool] = None,
                 is_federated_user: Optional[bool] = None,
                 is_group_membership_normalized: Optional[bool] = None,
                 is_group_membership_synced_to_users_groups: Optional[bool] = None,
                 notification_email_template_id: Optional[str] = None,
                 status: Optional[str] = None,
                 support_accounts: Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserSupportAccount']] = None,
                 synced_from_app: Optional['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserSyncedFromApp'] = None,
                 user_flow_controlled_by_external_client: Optional[bool] = None,
                 user_provider: Optional[str] = None,
                 user_tokens: Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserUserToken']] = None):
        """
        :param bool account_recovery_required: (Updatable) Boolean value to prompt user to setup account recovery during login.
               
               **Added In:** 19.1.4
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: request
               * type: boolean
               * uniqueness: none
        :param Sequence['DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAccountArgs'] accounts: (Updatable) Accounts assigned to this User. Each value of this attribute refers to an app-specific identity that is owned by this User. Therefore, this attribute is a convenience that allows one to see on each User the Apps to which that User has access.
               
               **SCIM++ Properties:**
               * idcsPii: true
               * idcsSearchable: true
               * multiValued: true
               * mutability: readOnly
               * required: false
               * returned: request
               * type: complex
               * uniqueness: none
        :param Sequence['DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAppRoleArgs'] app_roles: (Updatable) A list of all AppRoles to which this User belongs directly, indirectly or implicitly. The User could belong directly because the User is a member of the AppRole, could belong indirectly because the User is a member of a Group that is a member of the AppRole, or could belong implicitly because the AppRole is public.
               
               **SCIM++ Properties:**
               * idcsCompositeKey: [value]
               * multiValued: true
               * mutability: readOnly
               * required: false
               * returned: request
               * type: complex
               * uniqueness: none
        :param Sequence['DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserApplicableAuthenticationTargetAppArgs'] applicable_authentication_target_apps: (Updatable) The app against which the user will authenticate. The value is not persisted but rather calculated. If the user's delegatedAuthenticationTargetApp is set, that value is returned. Otherwise, the app returned by evaluating the user's applicable Delegated Authentication Policy is returned.
               
               **Added In:** 18.1.6
               
               **SCIM++ Properties:**
               * idcsCompositeKey: [value]
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: request
               * type: complex
               * uniqueness: none
        :param bool bypass_notification: (Updatable) A Boolean value indicating whether or not to send email notification after creating the user. This attribute is not used in update/replace operations.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsCsvAttributeNameMappings: [[columnHeaderName:ByPass Notification]]
               * idcsSearchable: false
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: never
               * type: boolean
               * uniqueness: none
        :param str creation_mechanism: (Updatable) User creation mechanism
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsCsvAttributeNameMappings: [[defaultValue:import]]
               * idcsSearchable: true
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: request
               * type: string
               * uniqueness: none
        :param 'DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserDelegatedAuthenticationTargetAppArgs' delegated_authentication_target_app: (Updatable) If set, indicates the user's preferred authentication target app. If not set and the user's \\"syncedFromApp\\" is set and is enabled for delegated authentication, it is used. Otherwise, the user authenticates locally to Oracle Cloud Infrastructure IAM.
               
               **Added In:** 17.4.6
               
               **SCIM++ Properties:**
               * idcsCompositeKey: [value]
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: complex
               * uniqueness: none
        :param bool do_not_show_getting_started: (Updatable) A Boolean value indicating whether or not to hide the getting started page
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: boolean
               * uniqueness: none
        :param Sequence['DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserGrantArgs'] grants: (Updatable) Grants to this User. Each value of this attribute refers to a Grant to this User of some App (and optionally of some entitlement). Therefore, this attribute is a convenience that allows one to see on each User all of the Grants to that User.
               
               **SCIM++ Properties:**
               * idcsSearchable: true
               * multiValued: true
               * mutability: readOnly
               * required: false
               * returned: request
               * type: complex
               * uniqueness: none
        :param Sequence['DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserIdcsAppRolesLimitedToGroupArgs'] idcs_app_roles_limited_to_groups: (Updatable) Description:
               
               **Added In:** 19.2.1
               
               **SCIM++ Properties:**
               * idcsCompositeKey: [value, idcsAppRoleId]
               * idcsSearchable: true
               * multiValued: true
               * mutability: readOnly
               * required: false
               * returned: request
               * type: complex
        :param bool is_account_recovery_enrolled: (Updatable) A Boolean value indicating whether or not a user is enrolled for account recovery
               
               **Added In:** 19.1.4
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: request
               * type: boolean
               * uniqueness: none
        :param bool is_authentication_delegated: (Updatable) A Boolean value indicating whether or not authentication request by this user should be delegated to a remote app. This value should be true only when the User was originally synced from an app which is enabled for delegated authentication
               
               **Added In:** 17.4.6
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: never
               * type: boolean
               * uniqueness: none
        :param bool is_federated_user: (Updatable) A Boolean value indicating whether or not the user is federated.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsCsvAttributeName: Federated
               * idcsCsvAttributeNameMappings: [[columnHeaderName:Federated]]
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: boolean
               * uniqueness: none
        :param bool is_group_membership_normalized: (Updatable) A Boolean value indicating whether or not group membership is normalized for this user.
               
               **Deprecated Since: 19.3.3**
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: never
               * type: boolean
               * uniqueness: none
        :param bool is_group_membership_synced_to_users_groups: (Updatable) A Boolean value Indicates whether this User's group membership has been sync'ed from Group.members to UsersGroups.
               
               **Added In:** 19.3.3
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: never
               * type: boolean
               * uniqueness: none
        :param str notification_email_template_id: (Updatable) Specifies the EmailTemplate to be used when sending notification to the user this request is for. If specified, it overrides the default EmailTemplate for this event.
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: writeOnly
               * required: false
               * returned: never
               * type: string
               * uniqueness: none
        :param str status: (Updatable) A supplemental status indicating the reason why a user is disabled
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: request
               * type: string
               * uniqueness: none
        :param Sequence['DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserSupportAccountArgs'] support_accounts: (Updatable) A list of Support Accounts corresponding to user.
               
               **Added In:** 2103141444
               
               **SCIM++ Properties:**
               * idcsCompositeKey: [value]
               * idcsSearchable: true
               * multiValued: true
               * mutability: readOnly
               * required: false
               * returned: request
               * type: complex
               * uniqueness: none
        :param 'DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserSyncedFromAppArgs' synced_from_app: (Updatable) Managed App or an Identity Source from where the user is synced. If enabled, this Managed App or Identity Source can be used for performing delegated authentication.
               
               **Added In:** 18.2.6
               
               **SCIM++ Properties:**
               * idcsCompositeKey: [value]
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: complex
               * uniqueness: none
        :param bool user_flow_controlled_by_external_client: (Updatable) A Boolean value indicating whether to bypass notification and return user token to be used by an external client to control the user flow.
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: immutable
               * required: false
               * returned: never
               * type: boolean
               * uniqueness: none
        :param str user_provider: (Updatable) User Support Account Provider
               
               **Added In:** 2103141444
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        :param Sequence['DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserUserTokenArgs'] user_tokens: (Updatable) User token returned if userFlowControlledByExternalClient is true
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * caseExact: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: complex
               * uniqueness: none
        """
        if account_recovery_required is not None:
            pulumi.set(__self__, "account_recovery_required", account_recovery_required)
        if accounts is not None:
            pulumi.set(__self__, "accounts", accounts)
        if app_roles is not None:
            pulumi.set(__self__, "app_roles", app_roles)
        if applicable_authentication_target_apps is not None:
            pulumi.set(__self__, "applicable_authentication_target_apps", applicable_authentication_target_apps)
        if bypass_notification is not None:
            pulumi.set(__self__, "bypass_notification", bypass_notification)
        if creation_mechanism is not None:
            pulumi.set(__self__, "creation_mechanism", creation_mechanism)
        if delegated_authentication_target_app is not None:
            pulumi.set(__self__, "delegated_authentication_target_app", delegated_authentication_target_app)
        if do_not_show_getting_started is not None:
            pulumi.set(__self__, "do_not_show_getting_started", do_not_show_getting_started)
        if grants is not None:
            pulumi.set(__self__, "grants", grants)
        if idcs_app_roles_limited_to_groups is not None:
            pulumi.set(__self__, "idcs_app_roles_limited_to_groups", idcs_app_roles_limited_to_groups)
        if is_account_recovery_enrolled is not None:
            pulumi.set(__self__, "is_account_recovery_enrolled", is_account_recovery_enrolled)
        if is_authentication_delegated is not None:
            pulumi.set(__self__, "is_authentication_delegated", is_authentication_delegated)
        if is_federated_user is not None:
            pulumi.set(__self__, "is_federated_user", is_federated_user)
        if is_group_membership_normalized is not None:
            pulumi.set(__self__, "is_group_membership_normalized", is_group_membership_normalized)
        if is_group_membership_synced_to_users_groups is not None:
            pulumi.set(__self__, "is_group_membership_synced_to_users_groups", is_group_membership_synced_to_users_groups)
        if notification_email_template_id is not None:
            pulumi.set(__self__, "notification_email_template_id", notification_email_template_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if support_accounts is not None:
            pulumi.set(__self__, "support_accounts", support_accounts)
        if synced_from_app is not None:
            pulumi.set(__self__, "synced_from_app", synced_from_app)
        if user_flow_controlled_by_external_client is not None:
            pulumi.set(__self__, "user_flow_controlled_by_external_client", user_flow_controlled_by_external_client)
        if user_provider is not None:
            pulumi.set(__self__, "user_provider", user_provider)
        if user_tokens is not None:
            pulumi.set(__self__, "user_tokens", user_tokens)

    @property
    @pulumi.getter(name="accountRecoveryRequired")
    def account_recovery_required(self) -> Optional[bool]:
        """
        (Updatable) Boolean value to prompt user to setup account recovery during login.

        **Added In:** 19.1.4

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: request
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "account_recovery_required")

    @property
    @pulumi.getter
    def accounts(self) -> Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAccount']]:
        """
        (Updatable) Accounts assigned to this User. Each value of this attribute refers to an app-specific identity that is owned by this User. Therefore, this attribute is a convenience that allows one to see on each User the Apps to which that User has access.

        **SCIM++ Properties:**
        * idcsPii: true
        * idcsSearchable: true
        * multiValued: true
        * mutability: readOnly
        * required: false
        * returned: request
        * type: complex
        * uniqueness: none
        """
        return pulumi.get(self, "accounts")

    @property
    @pulumi.getter(name="appRoles")
    def app_roles(self) -> Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAppRole']]:
        """
        (Updatable) A list of all AppRoles to which this User belongs directly, indirectly or implicitly. The User could belong directly because the User is a member of the AppRole, could belong indirectly because the User is a member of a Group that is a member of the AppRole, or could belong implicitly because the AppRole is public.

        **SCIM++ Properties:**
        * idcsCompositeKey: [value]
        * multiValued: true
        * mutability: readOnly
        * required: false
        * returned: request
        * type: complex
        * uniqueness: none
        """
        return pulumi.get(self, "app_roles")

    @property
    @pulumi.getter(name="applicableAuthenticationTargetApps")
    def applicable_authentication_target_apps(self) -> Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserApplicableAuthenticationTargetApp']]:
        """
        (Updatable) The app against which the user will authenticate. The value is not persisted but rather calculated. If the user's delegatedAuthenticationTargetApp is set, that value is returned. Otherwise, the app returned by evaluating the user's applicable Delegated Authentication Policy is returned.

        **Added In:** 18.1.6

        **SCIM++ Properties:**
        * idcsCompositeKey: [value]
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: request
        * type: complex
        * uniqueness: none
        """
        return pulumi.get(self, "applicable_authentication_target_apps")

    @property
    @pulumi.getter(name="bypassNotification")
    def bypass_notification(self) -> Optional[bool]:
        """
        (Updatable) A Boolean value indicating whether or not to send email notification after creating the user. This attribute is not used in update/replace operations.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsCsvAttributeNameMappings: [[columnHeaderName:ByPass Notification]]
        * idcsSearchable: false
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: never
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "bypass_notification")

    @property
    @pulumi.getter(name="creationMechanism")
    def creation_mechanism(self) -> Optional[str]:
        """
        (Updatable) User creation mechanism

        **SCIM++ Properties:**
        * caseExact: false
        * idcsCsvAttributeNameMappings: [[defaultValue:import]]
        * idcsSearchable: true
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: request
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "creation_mechanism")

    @property
    @pulumi.getter(name="delegatedAuthenticationTargetApp")
    def delegated_authentication_target_app(self) -> Optional['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserDelegatedAuthenticationTargetApp']:
        """
        (Updatable) If set, indicates the user's preferred authentication target app. If not set and the user's \\"syncedFromApp\\" is set and is enabled for delegated authentication, it is used. Otherwise, the user authenticates locally to Oracle Cloud Infrastructure IAM.

        **Added In:** 17.4.6

        **SCIM++ Properties:**
        * idcsCompositeKey: [value]
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: complex
        * uniqueness: none
        """
        return pulumi.get(self, "delegated_authentication_target_app")

    @property
    @pulumi.getter(name="doNotShowGettingStarted")
    def do_not_show_getting_started(self) -> Optional[bool]:
        """
        (Updatable) A Boolean value indicating whether or not to hide the getting started page

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "do_not_show_getting_started")

    @property
    @pulumi.getter
    def grants(self) -> Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserGrant']]:
        """
        (Updatable) Grants to this User. Each value of this attribute refers to a Grant to this User of some App (and optionally of some entitlement). Therefore, this attribute is a convenience that allows one to see on each User all of the Grants to that User.

        **SCIM++ Properties:**
        * idcsSearchable: true
        * multiValued: true
        * mutability: readOnly
        * required: false
        * returned: request
        * type: complex
        * uniqueness: none
        """
        return pulumi.get(self, "grants")

    @property
    @pulumi.getter(name="idcsAppRolesLimitedToGroups")
    def idcs_app_roles_limited_to_groups(self) -> Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserIdcsAppRolesLimitedToGroup']]:
        """
        (Updatable) Description:

        **Added In:** 19.2.1

        **SCIM++ Properties:**
        * idcsCompositeKey: [value, idcsAppRoleId]
        * idcsSearchable: true
        * multiValued: true
        * mutability: readOnly
        * required: false
        * returned: request
        * type: complex
        """
        return pulumi.get(self, "idcs_app_roles_limited_to_groups")

    @property
    @pulumi.getter(name="isAccountRecoveryEnrolled")
    def is_account_recovery_enrolled(self) -> Optional[bool]:
        """
        (Updatable) A Boolean value indicating whether or not a user is enrolled for account recovery

        **Added In:** 19.1.4

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: request
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "is_account_recovery_enrolled")

    @property
    @pulumi.getter(name="isAuthenticationDelegated")
    def is_authentication_delegated(self) -> Optional[bool]:
        """
        (Updatable) A Boolean value indicating whether or not authentication request by this user should be delegated to a remote app. This value should be true only when the User was originally synced from an app which is enabled for delegated authentication

        **Added In:** 17.4.6

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: never
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "is_authentication_delegated")

    @property
    @pulumi.getter(name="isFederatedUser")
    def is_federated_user(self) -> Optional[bool]:
        """
        (Updatable) A Boolean value indicating whether or not the user is federated.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsCsvAttributeName: Federated
        * idcsCsvAttributeNameMappings: [[columnHeaderName:Federated]]
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "is_federated_user")

    @property
    @pulumi.getter(name="isGroupMembershipNormalized")
    def is_group_membership_normalized(self) -> Optional[bool]:
        """
        (Updatable) A Boolean value indicating whether or not group membership is normalized for this user.

        **Deprecated Since: 19.3.3**

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: never
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "is_group_membership_normalized")

    @property
    @pulumi.getter(name="isGroupMembershipSyncedToUsersGroups")
    def is_group_membership_synced_to_users_groups(self) -> Optional[bool]:
        """
        (Updatable) A Boolean value Indicates whether this User's group membership has been sync'ed from Group.members to UsersGroups.

        **Added In:** 19.3.3

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: never
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "is_group_membership_synced_to_users_groups")

    @property
    @pulumi.getter(name="notificationEmailTemplateId")
    def notification_email_template_id(self) -> Optional[str]:
        """
        (Updatable) Specifies the EmailTemplate to be used when sending notification to the user this request is for. If specified, it overrides the default EmailTemplate for this event.

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: writeOnly
        * required: false
        * returned: never
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "notification_email_template_id")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        (Updatable) A supplemental status indicating the reason why a user is disabled

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: request
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="supportAccounts")
    def support_accounts(self) -> Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserSupportAccount']]:
        """
        (Updatable) A list of Support Accounts corresponding to user.

        **Added In:** 2103141444

        **SCIM++ Properties:**
        * idcsCompositeKey: [value]
        * idcsSearchable: true
        * multiValued: true
        * mutability: readOnly
        * required: false
        * returned: request
        * type: complex
        * uniqueness: none
        """
        return pulumi.get(self, "support_accounts")

    @property
    @pulumi.getter(name="syncedFromApp")
    def synced_from_app(self) -> Optional['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserSyncedFromApp']:
        """
        (Updatable) Managed App or an Identity Source from where the user is synced. If enabled, this Managed App or Identity Source can be used for performing delegated authentication.

        **Added In:** 18.2.6

        **SCIM++ Properties:**
        * idcsCompositeKey: [value]
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: complex
        * uniqueness: none
        """
        return pulumi.get(self, "synced_from_app")

    @property
    @pulumi.getter(name="userFlowControlledByExternalClient")
    def user_flow_controlled_by_external_client(self) -> Optional[bool]:
        """
        (Updatable) A Boolean value indicating whether to bypass notification and return user token to be used by an external client to control the user flow.

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: immutable
        * required: false
        * returned: never
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "user_flow_controlled_by_external_client")

    @property
    @pulumi.getter(name="userProvider")
    def user_provider(self) -> Optional[str]:
        """
        (Updatable) User Support Account Provider

        **Added In:** 2103141444

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "user_provider")

    @property
    @pulumi.getter(name="userTokens")
    def user_tokens(self) -> Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserUserToken']]:
        """
        (Updatable) User token returned if userFlowControlledByExternalClient is true

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * caseExact: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: complex
        * uniqueness: none
        """
        return pulumi.get(self, "user_tokens")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAccount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "appId":
            suggest = "app_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAccount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAccount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAccount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 active: Optional[bool] = None,
                 app_id: Optional[str] = None,
                 name: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool active: (Updatable) Status of the account
               
               **Added In:** 17.4.6
               
               **SCIM++ Properties:**
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: boolean
               * uniqueness: none
        :param str app_id: (Updatable) The ID of the App in this Grant.
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str name: (Updatable) Name of the account assigned to the User.
               
               **Added In:** 17.4.6
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) User Token URI
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param str value: (Updatable) The value of a X509 certificate.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: binary
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        if active is not None:
            pulumi.set(__self__, "active", active)
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def active(self) -> Optional[bool]:
        """
        (Updatable) Status of the account

        **Added In:** 17.4.6

        **SCIM++ Properties:**
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[str]:
        """
        (Updatable) The ID of the App in this Grant.

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        (Updatable) Name of the account assigned to the User.

        **Added In:** 17.4.6

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) User Token URI

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        (Updatable) The value of a X509 certificate.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: binary
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAppRole(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adminRole":
            suggest = "admin_role"
        elif key == "appId":
            suggest = "app_id"
        elif key == "appName":
            suggest = "app_name"
        elif key == "legacyGroupName":
            suggest = "legacy_group_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAppRole. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAppRole.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAppRole.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 value: str,
                 admin_role: Optional[bool] = None,
                 app_id: Optional[str] = None,
                 app_name: Optional[str] = None,
                 display: Optional[str] = None,
                 legacy_group_name: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str value: (Updatable) The value of a X509 certificate.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: binary
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param bool admin_role: (Updatable) If true, then the role provides administrative access privileges. READ-ONLY.
               
               **SCIM++ Properties:**
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: boolean
               * uniqueness: none
        :param str app_id: (Updatable) The ID of the App in this Grant.
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str app_name: (Updatable) The name (Client ID) of the App that defines this AppRole.
               
               **SCIM++ Properties:**
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str display: (Updatable) A human readable name, primarily used for display purposes.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str legacy_group_name: (Updatable) The name (if any) under which this AppRole should appear in this User's group-memberships for reasons of backward compatibility. Oracle Cloud Infrastructure IAM distinguishes between Groups and AppRoles, but some services still expect AppRoles appear as if they were service-instance-specific Groups.
               
               **SCIM++ Properties:**
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) User Token URI
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param str type: (Updatable) A label indicating the attribute's function.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        """
        pulumi.set(__self__, "value", value)
        if admin_role is not None:
            pulumi.set(__self__, "admin_role", admin_role)
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if app_name is not None:
            pulumi.set(__self__, "app_name", app_name)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if legacy_group_name is not None:
            pulumi.set(__self__, "legacy_group_name", legacy_group_name)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        (Updatable) The value of a X509 certificate.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: binary
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="adminRole")
    def admin_role(self) -> Optional[bool]:
        """
        (Updatable) If true, then the role provides administrative access privileges. READ-ONLY.

        **SCIM++ Properties:**
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "admin_role")

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[str]:
        """
        (Updatable) The ID of the App in this Grant.

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="appName")
    def app_name(self) -> Optional[str]:
        """
        (Updatable) The name (Client ID) of the App that defines this AppRole.

        **SCIM++ Properties:**
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "app_name")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) A human readable name, primarily used for display purposes.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter(name="legacyGroupName")
    def legacy_group_name(self) -> Optional[str]:
        """
        (Updatable) The name (if any) under which this AppRole should appear in this User's group-memberships for reasons of backward compatibility. Oracle Cloud Infrastructure IAM distinguishes between Groups and AppRoles, but some services still expect AppRoles appear as if they were service-instance-specific Groups.

        **SCIM++ Properties:**
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "legacy_group_name")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) User Token URI

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        (Updatable) A label indicating the attribute's function.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserApplicableAuthenticationTargetApp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "targetRequestTimeout":
            suggest = "target_request_timeout"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserApplicableAuthenticationTargetApp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserApplicableAuthenticationTargetApp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserApplicableAuthenticationTargetApp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 display: Optional[str] = None,
                 ref: Optional[str] = None,
                 target_request_timeout: Optional[int] = None,
                 value: Optional[str] = None):
        """
        :param str type: (Updatable) A label indicating the attribute's function.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str display: (Updatable) A human readable name, primarily used for display purposes.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) User Token URI
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param int target_request_timeout: (Updatable) Timeout interval for Synchronization TargetAction in milliseconds
               
               **Added In:** 18.2.6
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: integer
               * uniqueness: none
        :param str value: (Updatable) The value of a X509 certificate.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: binary
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        pulumi.set(__self__, "type", type)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if target_request_timeout is not None:
            pulumi.set(__self__, "target_request_timeout", target_request_timeout)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        (Updatable) A label indicating the attribute's function.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) A human readable name, primarily used for display purposes.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) User Token URI

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="targetRequestTimeout")
    def target_request_timeout(self) -> Optional[int]:
        """
        (Updatable) Timeout interval for Synchronization TargetAction in milliseconds

        **Added In:** 18.2.6

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: integer
        * uniqueness: none
        """
        return pulumi.get(self, "target_request_timeout")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        (Updatable) The value of a X509 certificate.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: binary
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserDelegatedAuthenticationTargetApp(dict):
    def __init__(__self__, *,
                 type: str,
                 value: str,
                 display: Optional[str] = None,
                 ref: Optional[str] = None):
        """
        :param str type: (Updatable) A label indicating the attribute's function.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str value: (Updatable) The value of a X509 certificate.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: binary
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param str display: (Updatable) A human readable name, primarily used for display purposes.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) User Token URI
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        (Updatable) A label indicating the attribute's function.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        (Updatable) The value of a X509 certificate.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: binary
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) A human readable name, primarily used for display purposes.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) User Token URI

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserGrant(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "appId":
            suggest = "app_id"
        elif key == "grantMechanism":
            suggest = "grant_mechanism"
        elif key == "grantorId":
            suggest = "grantor_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserGrant. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserGrant.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserGrant.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app_id: Optional[str] = None,
                 grant_mechanism: Optional[str] = None,
                 grantor_id: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str app_id: (Updatable) The ID of the App in this Grant.
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str grant_mechanism: (Updatable) Each value of grantMechanism indicates how (or by what component) some App (or App-Entitlement) was granted.\\nA customer or the UI should use only grantMechanism values that start with 'ADMINISTRATOR':\\n - 'ADMINISTRATOR_TO_USER' is for a direct grant to a specific User.\\n - 'ADMINISTRATOR_TO_GROUP' is for a grant to a specific Group, which results in indirect grants to Users who are members of that Group.\\n - 'ADMINISTRATOR_TO_APP' is for a grant to a specific App.  The grantee (client) App gains access to the granted (server) App.
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str grantor_id: (Updatable) Grantor identifier
               
               **Added In:** 20.1.3
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) User Token URI
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param str value: (Updatable) The value of a X509 certificate.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: binary
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if grant_mechanism is not None:
            pulumi.set(__self__, "grant_mechanism", grant_mechanism)
        if grantor_id is not None:
            pulumi.set(__self__, "grantor_id", grantor_id)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[str]:
        """
        (Updatable) The ID of the App in this Grant.

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="grantMechanism")
    def grant_mechanism(self) -> Optional[str]:
        """
        (Updatable) Each value of grantMechanism indicates how (or by what component) some App (or App-Entitlement) was granted.\\nA customer or the UI should use only grantMechanism values that start with 'ADMINISTRATOR':\\n - 'ADMINISTRATOR_TO_USER' is for a direct grant to a specific User.\\n - 'ADMINISTRATOR_TO_GROUP' is for a grant to a specific Group, which results in indirect grants to Users who are members of that Group.\\n - 'ADMINISTRATOR_TO_APP' is for a grant to a specific App.  The grantee (client) App gains access to the granted (server) App.

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "grant_mechanism")

    @property
    @pulumi.getter(name="grantorId")
    def grantor_id(self) -> Optional[str]:
        """
        (Updatable) Grantor identifier

        **Added In:** 20.1.3

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "grantor_id")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) User Token URI

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        (Updatable) The value of a X509 certificate.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: binary
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserIdcsAppRolesLimitedToGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "idcsAppRoleId":
            suggest = "idcs_app_role_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserIdcsAppRolesLimitedToGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserIdcsAppRolesLimitedToGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserIdcsAppRolesLimitedToGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 idcs_app_role_id: str,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None):
        """
        :param str idcs_app_role_id: (Updatable) The id of the Oracle Cloud Infrastructure IAM AppRole grant limited to one or more Groups.
               
               **Added In:** 19.2.1
               
               **SCIM++ Properties:**
               * idcsCsvAttributeName: IDCS AppRole Name
               * idcsSearchable: true
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: string
               * uniqueness: none
        :param str value: (Updatable) The value of a X509 certificate.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: binary
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param str display: (Updatable) A human readable name, primarily used for display purposes.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ocid: (Updatable) Ocid of the User's Support Account.
               
               **Added In:** 2103141444
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) User Token URI
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        """
        pulumi.set(__self__, "idcs_app_role_id", idcs_app_role_id)
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter(name="idcsAppRoleId")
    def idcs_app_role_id(self) -> str:
        """
        (Updatable) The id of the Oracle Cloud Infrastructure IAM AppRole grant limited to one or more Groups.

        **Added In:** 19.2.1

        **SCIM++ Properties:**
        * idcsCsvAttributeName: IDCS AppRole Name
        * idcsSearchable: true
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "idcs_app_role_id")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        (Updatable) The value of a X509 certificate.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: binary
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) A human readable name, primarily used for display purposes.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        """
        (Updatable) Ocid of the User's Support Account.

        **Added In:** 2103141444

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) User Token URI

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserSupportAccount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userId":
            suggest = "user_id"
        elif key == "userProvider":
            suggest = "user_provider"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserSupportAccount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserSupportAccount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserSupportAccount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 user_id: Optional[str] = None,
                 user_provider: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str ocid: (Updatable) Ocid of the User's Support Account.
               
               **Added In:** 2103141444
               
               **SCIM++ Properties:**
               * caseExact: true
               * idcsSearchable: true
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) User Token URI
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param str user_id: (Updatable) User Support User Id
               
               **Added In:** 2103141444
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        :param str user_provider: (Updatable) User Support Account Provider
               
               **Added In:** 2103141444
               
               **SCIM++ Properties:**
               * caseExact: false
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: always
               * type: string
               * uniqueness: none
        :param str value: (Updatable) The value of a X509 certificate.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: binary
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)
        if user_provider is not None:
            pulumi.set(__self__, "user_provider", user_provider)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        """
        (Updatable) Ocid of the User's Support Account.

        **Added In:** 2103141444

        **SCIM++ Properties:**
        * caseExact: true
        * idcsSearchable: true
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) User Token URI

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[str]:
        """
        (Updatable) User Support User Id

        **Added In:** 2103141444

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "user_id")

    @property
    @pulumi.getter(name="userProvider")
    def user_provider(self) -> Optional[str]:
        """
        (Updatable) User Support Account Provider

        **Added In:** 2103141444

        **SCIM++ Properties:**
        * caseExact: false
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: always
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "user_provider")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        (Updatable) The value of a X509 certificate.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: binary
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserSyncedFromApp(dict):
    def __init__(__self__, *,
                 type: str,
                 value: str,
                 display: Optional[str] = None,
                 ref: Optional[str] = None):
        """
        :param str type: (Updatable) A label indicating the attribute's function.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str value: (Updatable) The value of a X509 certificate.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: binary
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param str display: (Updatable) A human readable name, primarily used for display purposes.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param str ref: (Updatable) User Token URI
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        (Updatable) A label indicating the attribute's function.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        (Updatable) The value of a X509 certificate.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: binary
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) A human readable name, primarily used for display purposes.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) User Token URI

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserUserToken(dict):
    def __init__(__self__, *,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str ref: (Updatable) User Token URI
               
               **Added In:** 18.4.2
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readOnly
               * required: false
               * returned: default
               * type: reference
               * uniqueness: none
        :param str value: (Updatable) The value of a X509 certificate.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: binary
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        (Updatable) User Token URI

        **Added In:** 18.4.2

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readOnly
        * required: false
        * returned: default
        * type: reference
        * uniqueness: none
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        (Updatable) The value of a X509 certificate.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: binary
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsUserX509certificate(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 primary: Optional[bool] = None,
                 type: Optional[str] = None):
        """
        :param str value: (Updatable) The value of a X509 certificate.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: true
               * returned: default
               * type: binary
               * uniqueness: none
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param str display: (Updatable) A human readable name, primarily used for display purposes.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        :param bool primary: (Updatable) A Boolean value indicating the 'primary' or preferred attribute value for this attribute. The primary attribute value 'true' MUST appear no more than once.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: boolean
               * uniqueness: none
        :param str type: (Updatable) A label indicating the attribute's function.
               
               **SCIM++ Properties:**
               * idcsSearchable: false
               * multiValued: false
               * mutability: readWrite
               * required: false
               * returned: default
               * type: string
               * uniqueness: none
        """
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        (Updatable) The value of a X509 certificate.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: true
        * returned: default
        * type: binary
        * uniqueness: none


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        """
        (Updatable) A human readable name, primarily used for display purposes.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def primary(self) -> Optional[bool]:
        """
        (Updatable) A Boolean value indicating the 'primary' or preferred attribute value for this attribute. The primary attribute value 'true' MUST appear no more than once.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: boolean
        * uniqueness: none
        """
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        (Updatable) A label indicating the attribute's function.

        **SCIM++ Properties:**
        * idcsSearchable: false
        * multiValued: false
        * mutability: readWrite
        * required: false
        * returned: default
        * type: string
        * uniqueness: none
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class NetworkSourceVirtualSourceList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipRanges":
            suggest = "ip_ranges"
        elif key == "vcnId":
            suggest = "vcn_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkSourceVirtualSourceList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkSourceVirtualSourceList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkSourceVirtualSourceList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_ranges: Sequence[str],
                 vcn_id: str):
        pulumi.set(__self__, "ip_ranges", ip_ranges)
        pulumi.set(__self__, "vcn_id", vcn_id)

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Sequence[str]:
        return pulumi.get(self, "ip_ranges")

    @property
    @pulumi.getter(name="vcnId")
    def vcn_id(self) -> str:
        return pulumi.get(self, "vcn_id")


@pulumi.output_type
class TagValidator(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "validatorType":
            suggest = "validator_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TagValidator. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TagValidator.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TagValidator.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 validator_type: str,
                 values: Sequence[str]):
        """
        :param str validator_type: (Updatable) Specifies the type of validation: a static value (no validation) or a list.
        :param Sequence[str] values: (Updatable) The list of allowed values for a definedTag value.
        """
        pulumi.set(__self__, "validator_type", validator_type)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="validatorType")
    def validator_type(self) -> str:
        """
        (Updatable) Specifies the type of validation: a static value (no validation) or a list.
        """
        return pulumi.get(self, "validator_type")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        (Updatable) The list of allowed values for a definedTag value.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class UserCapability(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "canUseApiKeys":
            suggest = "can_use_api_keys"
        elif key == "canUseAuthTokens":
            suggest = "can_use_auth_tokens"
        elif key == "canUseConsolePassword":
            suggest = "can_use_console_password"
        elif key == "canUseCustomerSecretKeys":
            suggest = "can_use_customer_secret_keys"
        elif key == "canUseDbCredentials":
            suggest = "can_use_db_credentials"
        elif key == "canUseOauth2clientCredentials":
            suggest = "can_use_oauth2client_credentials"
        elif key == "canUseSmtpCredentials":
            suggest = "can_use_smtp_credentials"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserCapability. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserCapability.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserCapability.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 can_use_api_keys: Optional[bool] = None,
                 can_use_auth_tokens: Optional[bool] = None,
                 can_use_console_password: Optional[bool] = None,
                 can_use_customer_secret_keys: Optional[bool] = None,
                 can_use_db_credentials: Optional[bool] = None,
                 can_use_oauth2client_credentials: Optional[bool] = None,
                 can_use_smtp_credentials: Optional[bool] = None):
        """
        :param bool can_use_api_keys: Indicates if the user can use API keys.
        :param bool can_use_auth_tokens: Indicates if the user can use SWIFT passwords / auth tokens.
        :param bool can_use_console_password: Indicates if the user can log in to the console.
        :param bool can_use_customer_secret_keys: Indicates if the user can use SigV4 symmetric keys.
        :param bool can_use_db_credentials: Indicates if the user can use DB passwords.
        :param bool can_use_oauth2client_credentials: Indicates if the user can use OAuth2 credentials and tokens.
        :param bool can_use_smtp_credentials: Indicates if the user can use SMTP passwords.
        """
        if can_use_api_keys is not None:
            pulumi.set(__self__, "can_use_api_keys", can_use_api_keys)
        if can_use_auth_tokens is not None:
            pulumi.set(__self__, "can_use_auth_tokens", can_use_auth_tokens)
        if can_use_console_password is not None:
            pulumi.set(__self__, "can_use_console_password", can_use_console_password)
        if can_use_customer_secret_keys is not None:
            pulumi.set(__self__, "can_use_customer_secret_keys", can_use_customer_secret_keys)
        if can_use_db_credentials is not None:
            pulumi.set(__self__, "can_use_db_credentials", can_use_db_credentials)
        if can_use_oauth2client_credentials is not None:
            pulumi.set(__self__, "can_use_oauth2client_credentials", can_use_oauth2client_credentials)
        if can_use_smtp_credentials is not None:
            pulumi.set(__self__, "can_use_smtp_credentials", can_use_smtp_credentials)

    @property
    @pulumi.getter(name="canUseApiKeys")
    def can_use_api_keys(self) -> Optional[bool]:
        """
        Indicates if the user can use API keys.
        """
        return pulumi.get(self, "can_use_api_keys")

    @property
    @pulumi.getter(name="canUseAuthTokens")
    def can_use_auth_tokens(self) -> Optional[bool]:
        """
        Indicates if the user can use SWIFT passwords / auth tokens.
        """
        return pulumi.get(self, "can_use_auth_tokens")

    @property
    @pulumi.getter(name="canUseConsolePassword")
    def can_use_console_password(self) -> Optional[bool]:
        """
        Indicates if the user can log in to the console.
        """
        return pulumi.get(self, "can_use_console_password")

    @property
    @pulumi.getter(name="canUseCustomerSecretKeys")
    def can_use_customer_secret_keys(self) -> Optional[bool]:
        """
        Indicates if the user can use SigV4 symmetric keys.
        """
        return pulumi.get(self, "can_use_customer_secret_keys")

    @property
    @pulumi.getter(name="canUseDbCredentials")
    def can_use_db_credentials(self) -> Optional[bool]:
        """
        Indicates if the user can use DB passwords.
        """
        return pulumi.get(self, "can_use_db_credentials")

    @property
    @pulumi.getter(name="canUseOauth2clientCredentials")
    def can_use_oauth2client_credentials(self) -> Optional[bool]:
        """
        Indicates if the user can use OAuth2 credentials and tokens.
        """
        return pulumi.get(self, "can_use_oauth2client_credentials")

    @property
    @pulumi.getter(name="canUseSmtpCredentials")
    def can_use_smtp_credentials(self) -> Optional[bool]:
        """
        Indicates if the user can use SMTP passwords.
        """
        return pulumi.get(self, "can_use_smtp_credentials")


@pulumi.output_type
class GetAllowedDomainLicenseTypesAllowedDomainLicenseTypeResult(dict):
    def __init__(__self__, *,
                 description: str,
                 license_type: str,
                 name: str):
        """
        :param str description: The license type description.
        :param str license_type: The license type identifier.  Example: "oracle-apps-premium"
        :param str name: The license type name.  Example: "Oracle Apps Premium"
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "license_type", license_type)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The license type description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> str:
        """
        The license type identifier.  Example: "oracle-apps-premium"
        """
        return pulumi.get(self, "license_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The license type name.  Example: "Oracle Apps Premium"
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetAllowedDomainLicenseTypesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: The license type name.  Example: "Oracle Apps Premium"
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The license type name.  Example: "Oracle Apps Premium"
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetApiKeysApiKeyResult(dict):
    def __init__(__self__, *,
                 fingerprint: str,
                 id: str,
                 inactive_status: str,
                 key_value: str,
                 state: str,
                 time_created: str,
                 user_id: str):
        """
        :param str fingerprint: The key's fingerprint (e.g., 12:34:56:78:90:ab:cd:ef:12:34:56:78:90:ab:cd:ef).
        :param str id: An Oracle-assigned identifier for the key, in this format: TENANCY_OCID/USER_OCID/KEY_FINGERPRINT.
        :param str inactive_status: The detailed status of INACTIVE lifecycleState.
        :param str key_value: The key's value.
        :param str state: The API key's current state.
        :param str time_created: Date and time the `ApiKey` object was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        :param str user_id: The OCID of the user.
        """
        pulumi.set(__self__, "fingerprint", fingerprint)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "inactive_status", inactive_status)
        pulumi.set(__self__, "key_value", key_value)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter
    def fingerprint(self) -> str:
        """
        The key's fingerprint (e.g., 12:34:56:78:90:ab:cd:ef:12:34:56:78:90:ab:cd:ef).
        """
        return pulumi.get(self, "fingerprint")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        An Oracle-assigned identifier for the key, in this format: TENANCY_OCID/USER_OCID/KEY_FINGERPRINT.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inactiveStatus")
    def inactive_status(self) -> str:
        """
        The detailed status of INACTIVE lifecycleState.
        """
        return pulumi.get(self, "inactive_status")

    @property
    @pulumi.getter(name="keyValue")
    def key_value(self) -> str:
        """
        The key's value.
        """
        return pulumi.get(self, "key_value")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The API key's current state.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        Date and time the `ApiKey` object was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> str:
        """
        The OCID of the user.
        """
        return pulumi.get(self, "user_id")


@pulumi.output_type
class GetApiKeysFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetAuthTokensFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetAuthTokensTokenResult(dict):
    def __init__(__self__, *,
                 description: str,
                 id: str,
                 inactive_state: str,
                 state: str,
                 time_created: str,
                 time_expires: str,
                 token: str,
                 user_id: str):
        """
        :param str description: The description you assign to the auth token. Does not have to be unique, and it's changeable.
        :param str id: The OCID of the auth token.
        :param str inactive_state: The detailed status of INACTIVE lifecycleState.
        :param str state: The token's current state.
        :param str time_created: Date and time the `AuthToken` object was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        :param str time_expires: Date and time when this auth token will expire, in the format defined by RFC3339. Null if it never expires.  Example: `2016-08-25T21:10:29.600Z`
        :param str token: The auth token. The value is available only in the response for `CreateAuthToken`, and not for `ListAuthTokens` or `UpdateAuthToken`.
        :param str user_id: The OCID of the user.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "inactive_state", inactive_state)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_expires", time_expires)
        pulumi.set(__self__, "token", token)
        pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description you assign to the auth token. Does not have to be unique, and it's changeable.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The OCID of the auth token.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inactiveState")
    def inactive_state(self) -> str:
        """
        The detailed status of INACTIVE lifecycleState.
        """
        return pulumi.get(self, "inactive_state")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The token's current state.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        Date and time the `AuthToken` object was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeExpires")
    def time_expires(self) -> str:
        """
        Date and time when this auth token will expire, in the format defined by RFC3339. Null if it never expires.  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_expires")

    @property
    @pulumi.getter
    def token(self) -> str:
        """
        The auth token. The value is available only in the response for `CreateAuthToken`, and not for `ListAuthTokens` or `UpdateAuthToken`.
        """
        return pulumi.get(self, "token")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> str:
        """
        The OCID of the user.
        """
        return pulumi.get(self, "user_id")


@pulumi.output_type
class GetAuthenticationPolicyNetworkPolicyResult(dict):
    def __init__(__self__, *,
                 network_source_ids: Sequence[str]):
        """
        :param Sequence[str] network_source_ids: Network Source ids
        """
        pulumi.set(__self__, "network_source_ids", network_source_ids)

    @property
    @pulumi.getter(name="networkSourceIds")
    def network_source_ids(self) -> Sequence[str]:
        """
        Network Source ids
        """
        return pulumi.get(self, "network_source_ids")


@pulumi.output_type
class GetAuthenticationPolicyPasswordPolicyResult(dict):
    def __init__(__self__, *,
                 is_lowercase_characters_required: bool,
                 is_numeric_characters_required: bool,
                 is_special_characters_required: bool,
                 is_uppercase_characters_required: bool,
                 is_username_containment_allowed: bool,
                 minimum_password_length: int):
        """
        :param bool is_lowercase_characters_required: At least one lower case character required.
        :param bool is_numeric_characters_required: At least one numeric character required.
        :param bool is_special_characters_required: At least one special character required.
        :param bool is_uppercase_characters_required: At least one uppercase character required.
        :param bool is_username_containment_allowed: User name is allowed to be part of the password.
        :param int minimum_password_length: Minimum password length required.
        """
        pulumi.set(__self__, "is_lowercase_characters_required", is_lowercase_characters_required)
        pulumi.set(__self__, "is_numeric_characters_required", is_numeric_characters_required)
        pulumi.set(__self__, "is_special_characters_required", is_special_characters_required)
        pulumi.set(__self__, "is_uppercase_characters_required", is_uppercase_characters_required)
        pulumi.set(__self__, "is_username_containment_allowed", is_username_containment_allowed)
        pulumi.set(__self__, "minimum_password_length", minimum_password_length)

    @property
    @pulumi.getter(name="isLowercaseCharactersRequired")
    def is_lowercase_characters_required(self) -> bool:
        """
        At least one lower case character required.
        """
        return pulumi.get(self, "is_lowercase_characters_required")

    @property
    @pulumi.getter(name="isNumericCharactersRequired")
    def is_numeric_characters_required(self) -> bool:
        """
        At least one numeric character required.
        """
        return pulumi.get(self, "is_numeric_characters_required")

    @property
    @pulumi.getter(name="isSpecialCharactersRequired")
    def is_special_characters_required(self) -> bool:
        """
        At least one special character required.
        """
        return pulumi.get(self, "is_special_characters_required")

    @property
    @pulumi.getter(name="isUppercaseCharactersRequired")
    def is_uppercase_characters_required(self) -> bool:
        """
        At least one uppercase character required.
        """
        return pulumi.get(self, "is_uppercase_characters_required")

    @property
    @pulumi.getter(name="isUsernameContainmentAllowed")
    def is_username_containment_allowed(self) -> bool:
        """
        User name is allowed to be part of the password.
        """
        return pulumi.get(self, "is_username_containment_allowed")

    @property
    @pulumi.getter(name="minimumPasswordLength")
    def minimum_password_length(self) -> int:
        """
        Minimum password length required.
        """
        return pulumi.get(self, "minimum_password_length")


@pulumi.output_type
class GetAvailabilityDomainsAvailabilityDomainResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 id: str,
                 name: str):
        """
        :param str compartment_id: The OCID of the compartment (remember that the tenancy is simply the root compartment).
        :param str id: The OCID of the Availability Domain.
        :param str name: The name of the Availability Domain.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The OCID of the compartment (remember that the tenancy is simply the root compartment).
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The OCID of the Availability Domain.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Availability Domain.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetAvailabilityDomainsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: The name of the Availability Domain.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Availability Domain.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetCompartmentsCompartmentResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 defined_tags: Mapping[str, Any],
                 description: str,
                 enable_delete: bool,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 inactive_state: str,
                 is_accessible: bool,
                 name: str,
                 state: str,
                 time_created: str):
        """
        :param str compartment_id: The OCID of the compartment (remember that the tenancy is simply the root compartment).
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param str description: The description you assign to the compartment. Does not have to be unique, and it's changeable.
        :param Mapping[str, Any] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param str id: The OCID of the compartment.
        :param str inactive_state: The detailed status of INACTIVE lifecycleState.
        :param bool is_accessible: Indicates whether or not the compartment is accessible for the user making the request. Returns true when the user has INSPECT permissions directly on a resource in the compartment or indirectly (permissions can be on a resource in a subcompartment).
        :param str name: A filter to only return resources that match the given name exactly.
        :param str state: A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
        :param str time_created: Date and time the compartment was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enable_delete", enable_delete)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "inactive_state", inactive_state)
        pulumi.set(__self__, "is_accessible", is_accessible)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The OCID of the compartment (remember that the tenancy is simply the root compartment).
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description you assign to the compartment. Does not have to be unique, and it's changeable.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="enableDelete")
    def enable_delete(self) -> bool:
        return pulumi.get(self, "enable_delete")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The OCID of the compartment.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inactiveState")
    def inactive_state(self) -> str:
        """
        The detailed status of INACTIVE lifecycleState.
        """
        return pulumi.get(self, "inactive_state")

    @property
    @pulumi.getter(name="isAccessible")
    def is_accessible(self) -> bool:
        """
        Indicates whether or not the compartment is accessible for the user making the request. Returns true when the user has INSPECT permissions directly on a resource in the compartment or indirectly (permissions can be on a resource in a subcompartment).
        """
        return pulumi.get(self, "is_accessible")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to only return resources that match the given name exactly.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        Date and time the compartment was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetCompartmentsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: A filter to only return resources that match the given name exactly.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to only return resources that match the given name exactly.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetCostTrackingTagsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: The name assigned to the tag during creation. This is the tag key definition. The name must be unique within the tag namespace and cannot be changed.
        :param Sequence[str] values: The list of allowed values for a definedTag value.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name assigned to the tag during creation. This is the tag key definition. The name must be unique within the tag namespace and cannot be changed.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        The list of allowed values for a definedTag value.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetCostTrackingTagsTagResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 defined_tags: Mapping[str, Any],
                 description: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 is_cost_tracking: bool,
                 is_retired: bool,
                 name: str,
                 state: str,
                 tag_namespace_id: str,
                 tag_namespace_name: str,
                 time_created: str,
                 validators: Sequence['outputs.GetCostTrackingTagsTagValidatorResult']):
        """
        :param str compartment_id: The OCID of the compartment (remember that the tenancy is simply the root compartment).
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
        :param str description: The description you assign to the tag.
        :param Mapping[str, Any] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        :param str id: The OCID of the tag definition.
        :param bool is_cost_tracking: Indicates whether the tag is enabled for cost tracking.
        :param bool is_retired: Indicates whether the tag is retired. See [Retiring Key Definitions and Namespace Definitions](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/taggingoverview.htm#Retiring).
        :param str name: The name assigned to the tag during creation. This is the tag key definition. The name must be unique within the tag namespace and cannot be changed.
        :param str state: The tag's current state. After creating a tag, make sure its `lifecycleState` is ACTIVE before using it. After retiring a tag, make sure its `lifecycleState` is INACTIVE before using it. If you delete a tag, you cannot delete another tag until the deleted tag's `lifecycleState` changes from DELETING to DELETED.
        :param str tag_namespace_id: The OCID of the namespace that contains the tag definition.
        :param str tag_namespace_name: The name of the tag namespace that contains the tag definition.
        :param str time_created: Date and time the tag was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        :param Sequence['GetCostTrackingTagsTagValidatorArgs'] validators: Validates a definedTag value. Each validator performs validation steps in addition to the standard validation for definedTag values. For more information, see [Limits on Tags](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/taggingoverview.htm#Limits).
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_cost_tracking", is_cost_tracking)
        pulumi.set(__self__, "is_retired", is_retired)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "tag_namespace_id", tag_namespace_id)
        pulumi.set(__self__, "tag_namespace_name", tag_namespace_name)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "validators", validators)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The OCID of the compartment (remember that the tenancy is simply the root compartment).
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description you assign to the tag.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The OCID of the tag definition.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isCostTracking")
    def is_cost_tracking(self) -> bool:
        """
        Indicates whether the tag is enabled for cost tracking.
        """
        return pulumi.get(self, "is_cost_tracking")

    @property
    @pulumi.getter(name="isRetired")
    def is_retired(self) -> bool:
        """
        Indicates whether the tag is retired. See [Retiring Key Definitions and Namespace Definitions](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/taggingoverview.htm#Retiring).
        """
        return pulumi.get(self, "is_retired")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name assigned to the tag during creation. This is the tag key definition. The name must be unique within the tag namespace and cannot be changed.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The tag's current state. After creating a tag, make sure its `lifecycleState` is ACTIVE before using it. After retiring a tag, make sure its `lifecycleState` is INACTIVE before using it. If you delete a tag, you cannot delete another tag until the deleted tag's `lifecycleState` changes from DELETING to DELETED.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="tagNamespaceId")
    def tag_namespace_id(self) -> str:
        """
        The OCID of the namespace that contains the tag definition.
        """
        return pulumi.get(self, "tag_namespace_id")

    @property
    @pulumi.getter(name="tagNamespaceName")
    def tag_namespace_name(self) -> str:
        """
        The name of the tag namespace that contains the tag definition.
        """
        return pulumi.get(self, "tag_namespace_name")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        Date and time the tag was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter
    def validators(self) -> Sequence['outputs.GetCostTrackingTagsTagValidatorResult']:
        """
        Validates a definedTag value. Each validator performs validation steps in addition to the standard validation for definedTag values. For more information, see [Limits on Tags](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/taggingoverview.htm#Limits).
        """
        return pulumi.get(self, "validators")


@pulumi.output_type
class GetCostTrackingTagsTagValidatorResult(dict):
    def __init__(__self__, *,
                 validator_type: str,
                 values: Sequence[str]):
        """
        :param str validator_type: Specifies the type of validation: a static value (no validation) or a list.
        :param Sequence[str] values: The list of allowed values for a definedTag value.
        """
        pulumi.set(__self__, "validator_type", validator_type)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="validatorType")
    def validator_type(self) -> str:
        """
        Specifies the type of validation: a static value (no validation) or a list.
        """
        return pulumi.get(self, "validator_type")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        The list of allowed values for a definedTag value.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetCustomerSecretKeysCustomerSecretKeyResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 id: str,
                 inactive_state: str,
                 key: str,
                 state: str,
                 time_created: str,
                 time_expires: str,
                 user_id: str):
        """
        :param str display_name: The display name you assign to the secret key. Does not have to be unique, and it's changeable.
        :param str id: The access key portion of the key pair.
        :param str inactive_state: The detailed status of INACTIVE lifecycleState.
        :param str state: The secret key's current state.
        :param str time_created: Date and time the `CustomerSecretKey` object was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        :param str time_expires: Date and time when this password will expire, in the format defined by RFC3339. Null if it never expires.  Example: `2016-08-25T21:10:29.600Z`
        :param str user_id: The OCID of the user.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "inactive_state", inactive_state)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_expires", time_expires)
        pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The display name you assign to the secret key. Does not have to be unique, and it's changeable.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The access key portion of the key pair.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inactiveState")
    def inactive_state(self) -> str:
        """
        The detailed status of INACTIVE lifecycleState.
        """
        return pulumi.get(self, "inactive_state")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The secret key's current state.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        Date and time the `CustomerSecretKey` object was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeExpires")
    def time_expires(self) -> str:
        """
        Date and time when this password will expire, in the format defined by RFC3339. Null if it never expires.  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_expires")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> str:
        """
        The OCID of the user.
        """
        return pulumi.get(self, "user_id")


@pulumi.output_type
class GetCustomerSecretKeysFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDbCredentialsDbCredentialResult(dict):
    def __init__(__self__, *,
                 description: str,
                 id: str,
                 lifecycle_details: str,
                 password: str,
                 state: str,
                 time_created: str,
                 time_expires: str,
                 user_id: str):
        """
        :param str description: The description you assign to the DB credential. Does not have to be unique, and it's changeable.
        :param str id: The OCID of the DB credential.
        :param str state: A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
        :param str time_created: Date and time the `DbCredential` object was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        :param str time_expires: Date and time when this credential will expire, in the format defined by RFC3339. Null if it never expires.  Example: `2016-08-25T21:10:29.600Z`
        :param str user_id: The OCID of the user.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_expires", time_expires)
        pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description you assign to the DB credential. Does not have to be unique, and it's changeable.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The OCID of the DB credential.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        Date and time the `DbCredential` object was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeExpires")
    def time_expires(self) -> str:
        """
        Date and time when this credential will expire, in the format defined by RFC3339. Null if it never expires.  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_expires")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> str:
        """
        The OCID of the user.
        """
        return pulumi.get(self, "user_id")


@pulumi.output_type
class GetDbCredentialsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: A filter to only return resources that match the given name exactly.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to only return resources that match the given name exactly.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDomainReplicaRegionResult(dict):
    def __init__(__self__, *,
                 region: str,
                 state: str,
                 url: str):
        """
        :param str region: A REPLICATION_ENABLED region, e.g. us-ashburn-1. See [Regions and Availability Domains](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/regions.htm) for the full list of supported region names.
        :param str state: The current state.
        :param str url: Region agnostic domain URL.
        """
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        A REPLICATION_ENABLED region, e.g. us-ashburn-1. See [Regions and Availability Domains](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/regions.htm) for the full list of supported region names.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The current state.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        Region agnostic domain URL.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetDomainsApiKeyIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: User display name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsApiKeyIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: User display name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsApiKeyMetaResult(dict):
    def __init__(__self__, *,
                 created: str,
                 last_modified: str,
                 location: str,
                 resource_type: str,
                 version: str):
        """
        :param str created: The DateTime the Resource was added to the Service Provider
        :param str last_modified: The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        :param str location: The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        :param str resource_type: Name of the resource type of the resource--for example, Users or Groups
        :param str version: The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "last_modified", last_modified)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        The DateTime the Resource was added to the Service Provider
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> str:
        """
        The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Name of the resource type of the resource--for example, Users or Groups
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsApiKeyTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Key or name of the tag.
        :param str value: User's id
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key or name of the tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsApiKeyUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult(dict):
    def __init__(__self__, *,
                 allow_self_change: bool):
        """
        :param bool allow_self_change: If true, allows requesting user to update themselves. If false, requesting user can't update themself (default).
        """
        pulumi.set(__self__, "allow_self_change", allow_self_change)

    @property
    @pulumi.getter(name="allowSelfChange")
    def allow_self_change(self) -> bool:
        """
        If true, allows requesting user to update themselves. If false, requesting user can't update themself (default).
        """
        return pulumi.get(self, "allow_self_change")


@pulumi.output_type
class GetDomainsApiKeyUserResult(dict):
    def __init__(__self__, *,
                 display: str,
                 name: str,
                 ocid: str,
                 ref: str,
                 value: str):
        """
        :param str display: User display name
        :param str name: User name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        User name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsApiKeysApiKeyResult(dict):
    def __init__(__self__, *,
                 attribute_sets: Sequence[str],
                 attributes: str,
                 authorization: str,
                 compartment_ocid: str,
                 delete_in_progress: bool,
                 description: str,
                 domain_ocid: str,
                 fingerprint: str,
                 id: str,
                 idcs_created_bies: Sequence['outputs.GetDomainsApiKeysApiKeyIdcsCreatedByResult'],
                 idcs_endpoint: str,
                 idcs_last_modified_bies: Sequence['outputs.GetDomainsApiKeysApiKeyIdcsLastModifiedByResult'],
                 idcs_last_upgraded_in_release: str,
                 idcs_prevented_operations: Sequence[str],
                 key: str,
                 metas: Sequence['outputs.GetDomainsApiKeysApiKeyMetaResult'],
                 ocid: str,
                 resource_type_schema_version: str,
                 schemas: Sequence[str],
                 tags: Sequence['outputs.GetDomainsApiKeysApiKeyTagResult'],
                 tenancy_ocid: str,
                 urnietfparamsscimschemasoracleidcsextensionself_change_users: Sequence['outputs.GetDomainsApiKeysApiKeyUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult'],
                 users: Sequence['outputs.GetDomainsApiKeysApiKeyUserResult']):
        """
        :param Sequence[str] attribute_sets: A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
        :param str attributes: A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
        :param str authorization: The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
        :param str compartment_ocid: Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
        :param bool delete_in_progress: A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
        :param str description: Description
        :param str domain_ocid: Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
        :param str fingerprint: Fingerprint
        :param str id: Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider's entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
        :param Sequence['GetDomainsApiKeysApiKeyIdcsCreatedByArgs'] idcs_created_bies: The User or App who created the Resource
        :param str idcs_endpoint: The basic endpoint for the identity domain
        :param Sequence['GetDomainsApiKeysApiKeyIdcsLastModifiedByArgs'] idcs_last_modified_bies: The User or App who modified the Resource
        :param str idcs_last_upgraded_in_release: The release number when the resource was upgraded.
        :param Sequence[str] idcs_prevented_operations: Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
        :param str key: Key or name of the tag.
        :param Sequence['GetDomainsApiKeysApiKeyMetaArgs'] metas: A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
        :param str ocid: User's ocid
        :param str resource_type_schema_version: An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
        :param Sequence[str] schemas: REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \\"enterprise\\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
        :param Sequence['GetDomainsApiKeysApiKeyTagArgs'] tags: A list of tags on this resource.
        :param str tenancy_ocid: Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
        :param Sequence['GetDomainsApiKeysApiKeyUrnietfparamsscimschemasoracleidcsextensionselfChangeUserArgs'] urnietfparamsscimschemasoracleidcsextensionself_change_users: Controls whether a user can update themselves or not via User related APIs
        :param Sequence['GetDomainsApiKeysApiKeyUserArgs'] users: User linked to api key
        """
        pulumi.set(__self__, "attribute_sets", attribute_sets)
        pulumi.set(__self__, "attributes", attributes)
        pulumi.set(__self__, "authorization", authorization)
        pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "domain_ocid", domain_ocid)
        pulumi.set(__self__, "fingerprint", fingerprint)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        pulumi.set(__self__, "idcs_endpoint", idcs_endpoint)
        pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "metas", metas)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "resource_type_schema_version", resource_type_schema_version)
        pulumi.set(__self__, "schemas", schemas)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)
        pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionself_change_users", urnietfparamsscimschemasoracleidcsextensionself_change_users)
        pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="attributeSets")
    def attribute_sets(self) -> Sequence[str]:
        """
        A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
        """
        return pulumi.get(self, "attribute_sets")

    @property
    @pulumi.getter
    def attributes(self) -> str:
        """
        A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
        """
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter
    def authorization(self) -> str:
        """
        The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
        """
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> bool:
        """
        A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
        """
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter
    def fingerprint(self) -> str:
        """
        Fingerprint
        """
        return pulumi.get(self, "fingerprint")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider's entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Sequence['outputs.GetDomainsApiKeysApiKeyIdcsCreatedByResult']:
        """
        The User or App who created the Resource
        """
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> str:
        """
        The basic endpoint for the identity domain
        """
        return pulumi.get(self, "idcs_endpoint")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Sequence['outputs.GetDomainsApiKeysApiKeyIdcsLastModifiedByResult']:
        """
        The User or App who modified the Resource
        """
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> str:
        """
        The release number when the resource was upgraded.
        """
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Sequence[str]:
        """
        Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
        """
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key or name of the tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def metas(self) -> Sequence['outputs.GetDomainsApiKeysApiKeyMetaResult']:
        """
        A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
        """
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> str:
        """
        An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
        """
        return pulumi.get(self, "resource_type_schema_version")

    @property
    @pulumi.getter
    def schemas(self) -> Sequence[str]:
        """
        REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \\"enterprise\\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
        """
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetDomainsApiKeysApiKeyTagResult']:
        """
        A list of tags on this resource.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "tenancy_ocid")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionselfChangeUsers")
    def urnietfparamsscimschemasoracleidcsextensionself_change_users(self) -> Sequence['outputs.GetDomainsApiKeysApiKeyUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult']:
        """
        Controls whether a user can update themselves or not via User related APIs
        """
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionself_change_users")

    @property
    @pulumi.getter
    def users(self) -> Sequence['outputs.GetDomainsApiKeysApiKeyUserResult']:
        """
        User linked to api key
        """
        return pulumi.get(self, "users")


@pulumi.output_type
class GetDomainsApiKeysApiKeyIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: User display name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsApiKeysApiKeyIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: User display name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsApiKeysApiKeyMetaResult(dict):
    def __init__(__self__, *,
                 created: str,
                 last_modified: str,
                 location: str,
                 resource_type: str,
                 version: str):
        """
        :param str created: The DateTime the Resource was added to the Service Provider
        :param str last_modified: The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        :param str location: The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        :param str resource_type: Name of the resource type of the resource--for example, Users or Groups
        :param str version: The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "last_modified", last_modified)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        The DateTime the Resource was added to the Service Provider
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> str:
        """
        The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Name of the resource type of the resource--for example, Users or Groups
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsApiKeysApiKeyTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Key or name of the tag.
        :param str value: User's id
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key or name of the tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsApiKeysApiKeyUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult(dict):
    def __init__(__self__, *,
                 allow_self_change: bool):
        """
        :param bool allow_self_change: If true, allows requesting user to update themselves. If false, requesting user can't update themself (default).
        """
        pulumi.set(__self__, "allow_self_change", allow_self_change)

    @property
    @pulumi.getter(name="allowSelfChange")
    def allow_self_change(self) -> bool:
        """
        If true, allows requesting user to update themselves. If false, requesting user can't update themself (default).
        """
        return pulumi.get(self, "allow_self_change")


@pulumi.output_type
class GetDomainsApiKeysApiKeyUserResult(dict):
    def __init__(__self__, *,
                 display: str,
                 name: str,
                 ocid: str,
                 ref: str,
                 value: str):
        """
        :param str display: User display name
        :param str name: User name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        User name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAuthTokenIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: User display name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAuthTokenIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: User display name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAuthTokenMetaResult(dict):
    def __init__(__self__, *,
                 created: str,
                 last_modified: str,
                 location: str,
                 resource_type: str,
                 version: str):
        """
        :param str created: The DateTime the Resource was added to the Service Provider
        :param str last_modified: The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        :param str location: The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        :param str resource_type: Name of the resource type of the resource--for example, Users or Groups
        :param str version: The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "last_modified", last_modified)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        The DateTime the Resource was added to the Service Provider
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> str:
        """
        The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Name of the resource type of the resource--for example, Users or Groups
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsAuthTokenTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Key or name of the tag.
        :param str value: User's id
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key or name of the tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAuthTokenUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult(dict):
    def __init__(__self__, *,
                 allow_self_change: bool):
        """
        :param bool allow_self_change: If true, allows requesting user to update themselves. If false, requesting user can't update themself (default).
        """
        pulumi.set(__self__, "allow_self_change", allow_self_change)

    @property
    @pulumi.getter(name="allowSelfChange")
    def allow_self_change(self) -> bool:
        """
        If true, allows requesting user to update themselves. If false, requesting user can't update themself (default).
        """
        return pulumi.get(self, "allow_self_change")


@pulumi.output_type
class GetDomainsAuthTokenUserResult(dict):
    def __init__(__self__, *,
                 display: str,
                 name: str,
                 ocid: str,
                 ref: str,
                 value: str):
        """
        :param str display: User display name
        :param str name: User name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        User name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAuthTokensAuthTokenResult(dict):
    def __init__(__self__, *,
                 attribute_sets: Sequence[str],
                 attributes: str,
                 authorization: str,
                 compartment_ocid: str,
                 delete_in_progress: bool,
                 description: str,
                 domain_ocid: str,
                 expires_on: str,
                 id: str,
                 idcs_created_bies: Sequence['outputs.GetDomainsAuthTokensAuthTokenIdcsCreatedByResult'],
                 idcs_endpoint: str,
                 idcs_last_modified_bies: Sequence['outputs.GetDomainsAuthTokensAuthTokenIdcsLastModifiedByResult'],
                 idcs_last_upgraded_in_release: str,
                 idcs_prevented_operations: Sequence[str],
                 metas: Sequence['outputs.GetDomainsAuthTokensAuthTokenMetaResult'],
                 ocid: str,
                 resource_type_schema_version: str,
                 schemas: Sequence[str],
                 status: str,
                 tags: Sequence['outputs.GetDomainsAuthTokensAuthTokenTagResult'],
                 tenancy_ocid: str,
                 urnietfparamsscimschemasoracleidcsextensionself_change_users: Sequence['outputs.GetDomainsAuthTokensAuthTokenUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult'],
                 users: Sequence['outputs.GetDomainsAuthTokensAuthTokenUserResult']):
        """
        :param Sequence[str] attribute_sets: A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
        :param str attributes: A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
        :param str authorization: The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
        :param str compartment_ocid: Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
        :param bool delete_in_progress: A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
        :param str description: Description
        :param str domain_ocid: Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
        :param str expires_on: User credential expires on
        :param str id: Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider's entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
        :param Sequence['GetDomainsAuthTokensAuthTokenIdcsCreatedByArgs'] idcs_created_bies: The User or App who created the Resource
        :param str idcs_endpoint: The basic endpoint for the identity domain
        :param Sequence['GetDomainsAuthTokensAuthTokenIdcsLastModifiedByArgs'] idcs_last_modified_bies: The User or App who modified the Resource
        :param str idcs_last_upgraded_in_release: The release number when the resource was upgraded.
        :param Sequence[str] idcs_prevented_operations: Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
        :param Sequence['GetDomainsAuthTokensAuthTokenMetaArgs'] metas: A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
        :param str ocid: User's ocid
        :param str resource_type_schema_version: An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
        :param Sequence[str] schemas: REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \\"enterprise\\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
        :param str status: User credential status
        :param Sequence['GetDomainsAuthTokensAuthTokenTagArgs'] tags: A list of tags on this resource.
        :param str tenancy_ocid: Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
        :param Sequence['GetDomainsAuthTokensAuthTokenUrnietfparamsscimschemasoracleidcsextensionselfChangeUserArgs'] urnietfparamsscimschemasoracleidcsextensionself_change_users: Controls whether a user can update themselves or not via User related APIs
        :param Sequence['GetDomainsAuthTokensAuthTokenUserArgs'] users: User linked to auth token
        """
        pulumi.set(__self__, "attribute_sets", attribute_sets)
        pulumi.set(__self__, "attributes", attributes)
        pulumi.set(__self__, "authorization", authorization)
        pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "domain_ocid", domain_ocid)
        pulumi.set(__self__, "expires_on", expires_on)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        pulumi.set(__self__, "idcs_endpoint", idcs_endpoint)
        pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        pulumi.set(__self__, "metas", metas)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "resource_type_schema_version", resource_type_schema_version)
        pulumi.set(__self__, "schemas", schemas)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)
        pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionself_change_users", urnietfparamsscimschemasoracleidcsextensionself_change_users)
        pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="attributeSets")
    def attribute_sets(self) -> Sequence[str]:
        """
        A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
        """
        return pulumi.get(self, "attribute_sets")

    @property
    @pulumi.getter
    def attributes(self) -> str:
        """
        A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
        """
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter
    def authorization(self) -> str:
        """
        The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
        """
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> bool:
        """
        A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
        """
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter(name="expiresOn")
    def expires_on(self) -> str:
        """
        User credential expires on
        """
        return pulumi.get(self, "expires_on")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider's entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Sequence['outputs.GetDomainsAuthTokensAuthTokenIdcsCreatedByResult']:
        """
        The User or App who created the Resource
        """
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> str:
        """
        The basic endpoint for the identity domain
        """
        return pulumi.get(self, "idcs_endpoint")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Sequence['outputs.GetDomainsAuthTokensAuthTokenIdcsLastModifiedByResult']:
        """
        The User or App who modified the Resource
        """
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> str:
        """
        The release number when the resource was upgraded.
        """
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Sequence[str]:
        """
        Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
        """
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter
    def metas(self) -> Sequence['outputs.GetDomainsAuthTokensAuthTokenMetaResult']:
        """
        A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
        """
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> str:
        """
        An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
        """
        return pulumi.get(self, "resource_type_schema_version")

    @property
    @pulumi.getter
    def schemas(self) -> Sequence[str]:
        """
        REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \\"enterprise\\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
        """
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        User credential status
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetDomainsAuthTokensAuthTokenTagResult']:
        """
        A list of tags on this resource.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "tenancy_ocid")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionselfChangeUsers")
    def urnietfparamsscimschemasoracleidcsextensionself_change_users(self) -> Sequence['outputs.GetDomainsAuthTokensAuthTokenUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult']:
        """
        Controls whether a user can update themselves or not via User related APIs
        """
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionself_change_users")

    @property
    @pulumi.getter
    def users(self) -> Sequence['outputs.GetDomainsAuthTokensAuthTokenUserResult']:
        """
        User linked to auth token
        """
        return pulumi.get(self, "users")


@pulumi.output_type
class GetDomainsAuthTokensAuthTokenIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: User display name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAuthTokensAuthTokenIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: User display name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAuthTokensAuthTokenMetaResult(dict):
    def __init__(__self__, *,
                 created: str,
                 last_modified: str,
                 location: str,
                 resource_type: str,
                 version: str):
        """
        :param str created: The DateTime the Resource was added to the Service Provider
        :param str last_modified: The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        :param str location: The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        :param str resource_type: Name of the resource type of the resource--for example, Users or Groups
        :param str version: The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "last_modified", last_modified)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        The DateTime the Resource was added to the Service Provider
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> str:
        """
        The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Name of the resource type of the resource--for example, Users or Groups
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsAuthTokensAuthTokenTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Key or name of the tag.
        :param str value: User's id
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key or name of the tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAuthTokensAuthTokenUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult(dict):
    def __init__(__self__, *,
                 allow_self_change: bool):
        """
        :param bool allow_self_change: If true, allows requesting user to update themselves. If false, requesting user can't update themself (default).
        """
        pulumi.set(__self__, "allow_self_change", allow_self_change)

    @property
    @pulumi.getter(name="allowSelfChange")
    def allow_self_change(self) -> bool:
        """
        If true, allows requesting user to update themselves. If false, requesting user can't update themself (default).
        """
        return pulumi.get(self, "allow_self_change")


@pulumi.output_type
class GetDomainsAuthTokensAuthTokenUserResult(dict):
    def __init__(__self__, *,
                 display: str,
                 name: str,
                 ocid: str,
                 ref: str,
                 value: str):
        """
        :param str display: User display name
        :param str name: User name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        User name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAuthenticationFactorSettingBypassCodeSettingResult(dict):
    def __init__(__self__, *,
                 help_desk_code_expiry_in_mins: int,
                 help_desk_generation_enabled: bool,
                 help_desk_max_usage: int,
                 length: int,
                 max_active: int,
                 self_service_generation_enabled: bool):
        """
        :param int help_desk_code_expiry_in_mins: Expiry (in minutes) of any bypass code that is generated by the help desk
        :param bool help_desk_generation_enabled: If true, indicates that help desk bypass code generation is enabled
        :param int help_desk_max_usage: The maximum number of times that any bypass code that is generated by the help desk can be used
        :param int length: Exact length of the bypass code to be generated
        :param int max_active: The maximum number of bypass codes that can be issued to any user
        :param bool self_service_generation_enabled: If true, indicates that self-service bypass code generation is enabled
        """
        pulumi.set(__self__, "help_desk_code_expiry_in_mins", help_desk_code_expiry_in_mins)
        pulumi.set(__self__, "help_desk_generation_enabled", help_desk_generation_enabled)
        pulumi.set(__self__, "help_desk_max_usage", help_desk_max_usage)
        pulumi.set(__self__, "length", length)
        pulumi.set(__self__, "max_active", max_active)
        pulumi.set(__self__, "self_service_generation_enabled", self_service_generation_enabled)

    @property
    @pulumi.getter(name="helpDeskCodeExpiryInMins")
    def help_desk_code_expiry_in_mins(self) -> int:
        """
        Expiry (in minutes) of any bypass code that is generated by the help desk
        """
        return pulumi.get(self, "help_desk_code_expiry_in_mins")

    @property
    @pulumi.getter(name="helpDeskGenerationEnabled")
    def help_desk_generation_enabled(self) -> bool:
        """
        If true, indicates that help desk bypass code generation is enabled
        """
        return pulumi.get(self, "help_desk_generation_enabled")

    @property
    @pulumi.getter(name="helpDeskMaxUsage")
    def help_desk_max_usage(self) -> int:
        """
        The maximum number of times that any bypass code that is generated by the help desk can be used
        """
        return pulumi.get(self, "help_desk_max_usage")

    @property
    @pulumi.getter
    def length(self) -> int:
        """
        Exact length of the bypass code to be generated
        """
        return pulumi.get(self, "length")

    @property
    @pulumi.getter(name="maxActive")
    def max_active(self) -> int:
        """
        The maximum number of bypass codes that can be issued to any user
        """
        return pulumi.get(self, "max_active")

    @property
    @pulumi.getter(name="selfServiceGenerationEnabled")
    def self_service_generation_enabled(self) -> bool:
        """
        If true, indicates that self-service bypass code generation is enabled
        """
        return pulumi.get(self, "self_service_generation_enabled")


@pulumi.output_type
class GetDomainsAuthenticationFactorSettingClientAppSettingResult(dict):
    def __init__(__self__, *,
                 device_protection_policy: str,
                 initial_lockout_period_in_secs: int,
                 key_pair_length: int,
                 lockout_escalation_pattern: str,
                 max_failures_before_lockout: int,
                 max_failures_before_warning: int,
                 max_lockout_interval_in_secs: int,
                 min_pin_length: int,
                 policy_update_freq_in_days: int,
                 request_signing_algo: str,
                 shared_secret_encoding: str,
                 unlock_app_for_each_request_enabled: bool,
                 unlock_app_interval_in_secs: int,
                 unlock_on_app_foreground_enabled: bool,
                 unlock_on_app_start_enabled: bool):
        """
        :param str device_protection_policy: Indicates what protection policy that the system applies on a device. By default, the value is NONE, which indicates that the system applies no protection policy. A value of APP_PIN indicates that the system requires a Personal Identification Number (PIN). A value of DEVICE_BIOMETRIC_OR_APP_PIN indicates that either a PIN or a biometric authentication factor is required.
        :param int initial_lockout_period_in_secs: The period of time in seconds that the system will lock a user out of the service after that user exceeds the maximum number of login failures
        :param int key_pair_length: The size of the key that the system uses to generate the public-private key pair
        :param str lockout_escalation_pattern: The pattern of escalation that the system follows, in locking a particular user out of the service.
        :param int max_failures_before_lockout: The maximum number of times that a particular user can fail to login before the system locks that user out of the service
        :param int max_failures_before_warning: The maximum number of login failures that the system will allow before raising a warning and sending an alert via email
        :param int max_lockout_interval_in_secs: The maximum period of time that the system will lock a particular user out of the service regardless of what the configured pattern of escalation would otherwise dictate
        :param int min_pin_length: Minimum length of the Personal Identification Number (PIN)
        :param int policy_update_freq_in_days: The period of time in days after which a client should refresh its policy by re-reading that policy from the server
        :param str request_signing_algo: Indicates which algorithm the system will use to sign requests
        :param str shared_secret_encoding: Indicates the type of encoding that the system should use to generate a shared secret
        :param bool unlock_app_for_each_request_enabled: If true, indicates that the system should require the user to unlock the client app for each request. In order to unlock the App, the user must supply a Personal Identification Number (PIN) or a biometric authentication-factor.
        :param int unlock_app_interval_in_secs: Specifies the period of time in seconds after which the client App should require the user to unlock the App. In order to unlock the App, the user must supply a Personal Identification Number (PIN) or a biometric authentication-factor. A value of zero means that it is disabled.
        :param bool unlock_on_app_foreground_enabled: If true, indicates that the system should require the user to unlock the client App, when the client App comes to the foreground in the display of the device. In order to unlock the App, the user must supply a Personal Identification Number (PIN) or a biometric authentication-factor.
        :param bool unlock_on_app_start_enabled: If true, indicates that the system should require the user to unlock the client App whenever the App is started. In order to unlock the App, the user must supply a Personal Identification Number (PIN) or a biometric authentication-factor.
        """
        pulumi.set(__self__, "device_protection_policy", device_protection_policy)
        pulumi.set(__self__, "initial_lockout_period_in_secs", initial_lockout_period_in_secs)
        pulumi.set(__self__, "key_pair_length", key_pair_length)
        pulumi.set(__self__, "lockout_escalation_pattern", lockout_escalation_pattern)
        pulumi.set(__self__, "max_failures_before_lockout", max_failures_before_lockout)
        pulumi.set(__self__, "max_failures_before_warning", max_failures_before_warning)
        pulumi.set(__self__, "max_lockout_interval_in_secs", max_lockout_interval_in_secs)
        pulumi.set(__self__, "min_pin_length", min_pin_length)
        pulumi.set(__self__, "policy_update_freq_in_days", policy_update_freq_in_days)
        pulumi.set(__self__, "request_signing_algo", request_signing_algo)
        pulumi.set(__self__, "shared_secret_encoding", shared_secret_encoding)
        pulumi.set(__self__, "unlock_app_for_each_request_enabled", unlock_app_for_each_request_enabled)
        pulumi.set(__self__, "unlock_app_interval_in_secs", unlock_app_interval_in_secs)
        pulumi.set(__self__, "unlock_on_app_foreground_enabled", unlock_on_app_foreground_enabled)
        pulumi.set(__self__, "unlock_on_app_start_enabled", unlock_on_app_start_enabled)

    @property
    @pulumi.getter(name="deviceProtectionPolicy")
    def device_protection_policy(self) -> str:
        """
        Indicates what protection policy that the system applies on a device. By default, the value is NONE, which indicates that the system applies no protection policy. A value of APP_PIN indicates that the system requires a Personal Identification Number (PIN). A value of DEVICE_BIOMETRIC_OR_APP_PIN indicates that either a PIN or a biometric authentication factor is required.
        """
        return pulumi.get(self, "device_protection_policy")

    @property
    @pulumi.getter(name="initialLockoutPeriodInSecs")
    def initial_lockout_period_in_secs(self) -> int:
        """
        The period of time in seconds that the system will lock a user out of the service after that user exceeds the maximum number of login failures
        """
        return pulumi.get(self, "initial_lockout_period_in_secs")

    @property
    @pulumi.getter(name="keyPairLength")
    def key_pair_length(self) -> int:
        """
        The size of the key that the system uses to generate the public-private key pair
        """
        return pulumi.get(self, "key_pair_length")

    @property
    @pulumi.getter(name="lockoutEscalationPattern")
    def lockout_escalation_pattern(self) -> str:
        """
        The pattern of escalation that the system follows, in locking a particular user out of the service.
        """
        return pulumi.get(self, "lockout_escalation_pattern")

    @property
    @pulumi.getter(name="maxFailuresBeforeLockout")
    def max_failures_before_lockout(self) -> int:
        """
        The maximum number of times that a particular user can fail to login before the system locks that user out of the service
        """
        return pulumi.get(self, "max_failures_before_lockout")

    @property
    @pulumi.getter(name="maxFailuresBeforeWarning")
    def max_failures_before_warning(self) -> int:
        """
        The maximum number of login failures that the system will allow before raising a warning and sending an alert via email
        """
        return pulumi.get(self, "max_failures_before_warning")

    @property
    @pulumi.getter(name="maxLockoutIntervalInSecs")
    def max_lockout_interval_in_secs(self) -> int:
        """
        The maximum period of time that the system will lock a particular user out of the service regardless of what the configured pattern of escalation would otherwise dictate
        """
        return pulumi.get(self, "max_lockout_interval_in_secs")

    @property
    @pulumi.getter(name="minPinLength")
    def min_pin_length(self) -> int:
        """
        Minimum length of the Personal Identification Number (PIN)
        """
        return pulumi.get(self, "min_pin_length")

    @property
    @pulumi.getter(name="policyUpdateFreqInDays")
    def policy_update_freq_in_days(self) -> int:
        """
        The period of time in days after which a client should refresh its policy by re-reading that policy from the server
        """
        return pulumi.get(self, "policy_update_freq_in_days")

    @property
    @pulumi.getter(name="requestSigningAlgo")
    def request_signing_algo(self) -> str:
        """
        Indicates which algorithm the system will use to sign requests
        """
        return pulumi.get(self, "request_signing_algo")

    @property
    @pulumi.getter(name="sharedSecretEncoding")
    def shared_secret_encoding(self) -> str:
        """
        Indicates the type of encoding that the system should use to generate a shared secret
        """
        return pulumi.get(self, "shared_secret_encoding")

    @property
    @pulumi.getter(name="unlockAppForEachRequestEnabled")
    def unlock_app_for_each_request_enabled(self) -> bool:
        """
        If true, indicates that the system should require the user to unlock the client app for each request. In order to unlock the App, the user must supply a Personal Identification Number (PIN) or a biometric authentication-factor.
        """
        return pulumi.get(self, "unlock_app_for_each_request_enabled")

    @property
    @pulumi.getter(name="unlockAppIntervalInSecs")
    def unlock_app_interval_in_secs(self) -> int:
        """
        Specifies the period of time in seconds after which the client App should require the user to unlock the App. In order to unlock the App, the user must supply a Personal Identification Number (PIN) or a biometric authentication-factor. A value of zero means that it is disabled.
        """
        return pulumi.get(self, "unlock_app_interval_in_secs")

    @property
    @pulumi.getter(name="unlockOnAppForegroundEnabled")
    def unlock_on_app_foreground_enabled(self) -> bool:
        """
        If true, indicates that the system should require the user to unlock the client App, when the client App comes to the foreground in the display of the device. In order to unlock the App, the user must supply a Personal Identification Number (PIN) or a biometric authentication-factor.
        """
        return pulumi.get(self, "unlock_on_app_foreground_enabled")

    @property
    @pulumi.getter(name="unlockOnAppStartEnabled")
    def unlock_on_app_start_enabled(self) -> bool:
        """
        If true, indicates that the system should require the user to unlock the client App whenever the App is started. In order to unlock the App, the user must supply a Personal Identification Number (PIN) or a biometric authentication-factor.
        """
        return pulumi.get(self, "unlock_on_app_start_enabled")


@pulumi.output_type
class GetDomainsAuthenticationFactorSettingCompliancePolicyResult(dict):
    def __init__(__self__, *,
                 action: str,
                 name: str,
                 value: str):
        """
        :param str action: The action to be taken if the value of the attribute is not as expected
        :param str name: The name of the attribute being evaluated
        :param str value: Value of the tag.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        The action to be taken if the value of the attribute is not as expected
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the attribute being evaluated
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of the tag.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAuthenticationFactorSettingEmailSettingResult(dict):
    def __init__(__self__, *,
                 email_link_custom_url: str,
                 email_link_enabled: bool):
        """
        :param str email_link_custom_url: Custom redirect Url which will be used in email link
        :param bool email_link_enabled: Specifies whether Email link is enabled or not.
        """
        pulumi.set(__self__, "email_link_custom_url", email_link_custom_url)
        pulumi.set(__self__, "email_link_enabled", email_link_enabled)

    @property
    @pulumi.getter(name="emailLinkCustomUrl")
    def email_link_custom_url(self) -> str:
        """
        Custom redirect Url which will be used in email link
        """
        return pulumi.get(self, "email_link_custom_url")

    @property
    @pulumi.getter(name="emailLinkEnabled")
    def email_link_enabled(self) -> bool:
        """
        Specifies whether Email link is enabled or not.
        """
        return pulumi.get(self, "email_link_enabled")


@pulumi.output_type
class GetDomainsAuthenticationFactorSettingEndpointRestrictionResult(dict):
    def __init__(__self__, *,
                 max_endpoint_trust_duration_in_days: int,
                 max_enrolled_devices: int,
                 max_incorrect_attempts: int,
                 max_trusted_endpoints: int,
                 trusted_endpoints_enabled: bool):
        """
        :param int max_endpoint_trust_duration_in_days: Maximum number of days until an endpoint can be trusted
        :param int max_enrolled_devices: Maximum number of enrolled devices per user
        :param int max_incorrect_attempts: An integer that represents the maximum number of failed MFA logins before an account is locked
        :param int max_trusted_endpoints: Max number of trusted endpoints per user
        :param bool trusted_endpoints_enabled: Specify if trusted endpoints are enabled
        """
        pulumi.set(__self__, "max_endpoint_trust_duration_in_days", max_endpoint_trust_duration_in_days)
        pulumi.set(__self__, "max_enrolled_devices", max_enrolled_devices)
        pulumi.set(__self__, "max_incorrect_attempts", max_incorrect_attempts)
        pulumi.set(__self__, "max_trusted_endpoints", max_trusted_endpoints)
        pulumi.set(__self__, "trusted_endpoints_enabled", trusted_endpoints_enabled)

    @property
    @pulumi.getter(name="maxEndpointTrustDurationInDays")
    def max_endpoint_trust_duration_in_days(self) -> int:
        """
        Maximum number of days until an endpoint can be trusted
        """
        return pulumi.get(self, "max_endpoint_trust_duration_in_days")

    @property
    @pulumi.getter(name="maxEnrolledDevices")
    def max_enrolled_devices(self) -> int:
        """
        Maximum number of enrolled devices per user
        """
        return pulumi.get(self, "max_enrolled_devices")

    @property
    @pulumi.getter(name="maxIncorrectAttempts")
    def max_incorrect_attempts(self) -> int:
        """
        An integer that represents the maximum number of failed MFA logins before an account is locked
        """
        return pulumi.get(self, "max_incorrect_attempts")

    @property
    @pulumi.getter(name="maxTrustedEndpoints")
    def max_trusted_endpoints(self) -> int:
        """
        Max number of trusted endpoints per user
        """
        return pulumi.get(self, "max_trusted_endpoints")

    @property
    @pulumi.getter(name="trustedEndpointsEnabled")
    def trusted_endpoints_enabled(self) -> bool:
        """
        Specify if trusted endpoints are enabled
        """
        return pulumi.get(self, "trusted_endpoints_enabled")


@pulumi.output_type
class GetDomainsAuthenticationFactorSettingIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: The displayName of the User or App who modified this Resource
        :param str ocid: Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        :param str ref: The URI of the SCIM resource that represents the User or App who modified this Resource
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: Value of the tag.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        The displayName of the User or App who modified this Resource
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI of the SCIM resource that represents the User or App who modified this Resource
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of the tag.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAuthenticationFactorSettingIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: The displayName of the User or App who modified this Resource
        :param str ocid: Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        :param str ref: The URI of the SCIM resource that represents the User or App who modified this Resource
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: Value of the tag.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        The displayName of the User or App who modified this Resource
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI of the SCIM resource that represents the User or App who modified this Resource
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of the tag.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAuthenticationFactorSettingIdentityStoreSettingResult(dict):
    def __init__(__self__, *,
                 mobile_number_enabled: bool,
                 mobile_number_update_enabled: bool):
        """
        :param bool mobile_number_enabled: If true, indicates that Multi-Factor Authentication should use the mobile number in the identity store
        :param bool mobile_number_update_enabled: If true, indicates that the user can update the mobile number in the user's Multi-Factor Authentication profile
        """
        pulumi.set(__self__, "mobile_number_enabled", mobile_number_enabled)
        pulumi.set(__self__, "mobile_number_update_enabled", mobile_number_update_enabled)

    @property
    @pulumi.getter(name="mobileNumberEnabled")
    def mobile_number_enabled(self) -> bool:
        """
        If true, indicates that Multi-Factor Authentication should use the mobile number in the identity store
        """
        return pulumi.get(self, "mobile_number_enabled")

    @property
    @pulumi.getter(name="mobileNumberUpdateEnabled")
    def mobile_number_update_enabled(self) -> bool:
        """
        If true, indicates that the user can update the mobile number in the user's Multi-Factor Authentication profile
        """
        return pulumi.get(self, "mobile_number_update_enabled")


@pulumi.output_type
class GetDomainsAuthenticationFactorSettingMetaResult(dict):
    def __init__(__self__, *,
                 created: str,
                 last_modified: str,
                 location: str,
                 resource_type: str,
                 version: str):
        """
        :param str created: The DateTime the Resource was added to the Service Provider
        :param str last_modified: The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        :param str location: The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        :param str resource_type: Name of the resource type of the resource--for example, Users or Groups
        :param str version: The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "last_modified", last_modified)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        The DateTime the Resource was added to the Service Provider
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> str:
        """
        The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Name of the resource type of the resource--for example, Users or Groups
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsAuthenticationFactorSettingNotificationSettingResult(dict):
    def __init__(__self__, *,
                 pull_enabled: bool):
        """
        :param bool pull_enabled: If true, indicates that the Mobile App Pull Notification channel is enabled for authentication
        """
        pulumi.set(__self__, "pull_enabled", pull_enabled)

    @property
    @pulumi.getter(name="pullEnabled")
    def pull_enabled(self) -> bool:
        """
        If true, indicates that the Mobile App Pull Notification channel is enabled for authentication
        """
        return pulumi.get(self, "pull_enabled")


@pulumi.output_type
class GetDomainsAuthenticationFactorSettingTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Key or name of the tag.
        :param str value: Value of the tag.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key or name of the tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of the tag.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAuthenticationFactorSettingThirdPartyFactorResult(dict):
    def __init__(__self__, *,
                 duo_security: bool):
        """
        :param bool duo_security: To enable Duo Security factor
        """
        pulumi.set(__self__, "duo_security", duo_security)

    @property
    @pulumi.getter(name="duoSecurity")
    def duo_security(self) -> bool:
        """
        To enable Duo Security factor
        """
        return pulumi.get(self, "duo_security")


@pulumi.output_type
class GetDomainsAuthenticationFactorSettingTotpSettingResult(dict):
    def __init__(__self__, *,
                 email_otp_validity_duration_in_mins: int,
                 email_passcode_length: int,
                 hashing_algorithm: str,
                 jwt_validity_duration_in_secs: int,
                 key_refresh_interval_in_days: int,
                 passcode_length: int,
                 sms_otp_validity_duration_in_mins: int,
                 sms_passcode_length: int,
                 time_step_in_secs: int,
                 time_step_tolerance: int):
        """
        :param int email_otp_validity_duration_in_mins: The period of time (in minutes) that a one-time passcode remains valid that the system sends by email.
        :param int email_passcode_length: Exact length of the email one-time passcode.
        :param str hashing_algorithm: The hashing algorithm to be used to calculate a One-Time Passcode. By default, the system uses SHA1.
        :param int jwt_validity_duration_in_secs: The period of time (in seconds) that a JSON Web Token (JWT) is valid
        :param int key_refresh_interval_in_days: The duration of time (in days) after which the shared secret has to be refreshed
        :param int passcode_length: Exact length of the One-Time Passcode that the system should generate
        :param int sms_otp_validity_duration_in_mins: The period of time (in minutes) for which a One-Time Passcode that the system sends by Short Message Service (SMS) or by voice remains valid
        :param int sms_passcode_length: Exact length of the Short Message Service (SMS) One-Time Passcode
        :param int time_step_in_secs: Time (in secs) to be used as the time step
        :param int time_step_tolerance: The tolerance/step-size that the system should use when validating a One-Time Passcode
        """
        pulumi.set(__self__, "email_otp_validity_duration_in_mins", email_otp_validity_duration_in_mins)
        pulumi.set(__self__, "email_passcode_length", email_passcode_length)
        pulumi.set(__self__, "hashing_algorithm", hashing_algorithm)
        pulumi.set(__self__, "jwt_validity_duration_in_secs", jwt_validity_duration_in_secs)
        pulumi.set(__self__, "key_refresh_interval_in_days", key_refresh_interval_in_days)
        pulumi.set(__self__, "passcode_length", passcode_length)
        pulumi.set(__self__, "sms_otp_validity_duration_in_mins", sms_otp_validity_duration_in_mins)
        pulumi.set(__self__, "sms_passcode_length", sms_passcode_length)
        pulumi.set(__self__, "time_step_in_secs", time_step_in_secs)
        pulumi.set(__self__, "time_step_tolerance", time_step_tolerance)

    @property
    @pulumi.getter(name="emailOtpValidityDurationInMins")
    def email_otp_validity_duration_in_mins(self) -> int:
        """
        The period of time (in minutes) that a one-time passcode remains valid that the system sends by email.
        """
        return pulumi.get(self, "email_otp_validity_duration_in_mins")

    @property
    @pulumi.getter(name="emailPasscodeLength")
    def email_passcode_length(self) -> int:
        """
        Exact length of the email one-time passcode.
        """
        return pulumi.get(self, "email_passcode_length")

    @property
    @pulumi.getter(name="hashingAlgorithm")
    def hashing_algorithm(self) -> str:
        """
        The hashing algorithm to be used to calculate a One-Time Passcode. By default, the system uses SHA1.
        """
        return pulumi.get(self, "hashing_algorithm")

    @property
    @pulumi.getter(name="jwtValidityDurationInSecs")
    def jwt_validity_duration_in_secs(self) -> int:
        """
        The period of time (in seconds) that a JSON Web Token (JWT) is valid
        """
        return pulumi.get(self, "jwt_validity_duration_in_secs")

    @property
    @pulumi.getter(name="keyRefreshIntervalInDays")
    def key_refresh_interval_in_days(self) -> int:
        """
        The duration of time (in days) after which the shared secret has to be refreshed
        """
        return pulumi.get(self, "key_refresh_interval_in_days")

    @property
    @pulumi.getter(name="passcodeLength")
    def passcode_length(self) -> int:
        """
        Exact length of the One-Time Passcode that the system should generate
        """
        return pulumi.get(self, "passcode_length")

    @property
    @pulumi.getter(name="smsOtpValidityDurationInMins")
    def sms_otp_validity_duration_in_mins(self) -> int:
        """
        The period of time (in minutes) for which a One-Time Passcode that the system sends by Short Message Service (SMS) or by voice remains valid
        """
        return pulumi.get(self, "sms_otp_validity_duration_in_mins")

    @property
    @pulumi.getter(name="smsPasscodeLength")
    def sms_passcode_length(self) -> int:
        """
        Exact length of the Short Message Service (SMS) One-Time Passcode
        """
        return pulumi.get(self, "sms_passcode_length")

    @property
    @pulumi.getter(name="timeStepInSecs")
    def time_step_in_secs(self) -> int:
        """
        Time (in secs) to be used as the time step
        """
        return pulumi.get(self, "time_step_in_secs")

    @property
    @pulumi.getter(name="timeStepTolerance")
    def time_step_tolerance(self) -> int:
        """
        The tolerance/step-size that the system should use when validating a One-Time Passcode
        """
        return pulumi.get(self, "time_step_tolerance")


@pulumi.output_type
class GetDomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionfidoAuthenticationFactorSettingResult(dict):
    def __init__(__self__, *,
                 attestation: str,
                 authenticator_selection_attachment: str,
                 authenticator_selection_require_resident_key: bool,
                 authenticator_selection_resident_key: str,
                 authenticator_selection_user_verification: str,
                 domain_validation_level: int,
                 exclude_credentials: bool,
                 public_key_types: Sequence[str],
                 timeout: int):
        """
        :param str attestation: Attribute used to define the type of attestation required.
        :param str authenticator_selection_attachment: Attribute used to define authenticator selection attachment.
        :param bool authenticator_selection_require_resident_key: Flag used to indicate authenticator selection is required or not
        :param str authenticator_selection_resident_key: Attribute used to define authenticator selection resident key requirement.
        :param str authenticator_selection_user_verification: Attribute used to define authenticator selection verification.
        :param int domain_validation_level: Number of domain levels IDCS should use for origin comparision
        :param bool exclude_credentials: Flag used to indicate whether we need to restrict creation of multiple credentials in same authenticator
        :param Sequence[str] public_key_types: List of server supported public key algorithms
        :param int timeout: Timeout for the fido authentication to complete
        """
        pulumi.set(__self__, "attestation", attestation)
        pulumi.set(__self__, "authenticator_selection_attachment", authenticator_selection_attachment)
        pulumi.set(__self__, "authenticator_selection_require_resident_key", authenticator_selection_require_resident_key)
        pulumi.set(__self__, "authenticator_selection_resident_key", authenticator_selection_resident_key)
        pulumi.set(__self__, "authenticator_selection_user_verification", authenticator_selection_user_verification)
        pulumi.set(__self__, "domain_validation_level", domain_validation_level)
        pulumi.set(__self__, "exclude_credentials", exclude_credentials)
        pulumi.set(__self__, "public_key_types", public_key_types)
        pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def attestation(self) -> str:
        """
        Attribute used to define the type of attestation required.
        """
        return pulumi.get(self, "attestation")

    @property
    @pulumi.getter(name="authenticatorSelectionAttachment")
    def authenticator_selection_attachment(self) -> str:
        """
        Attribute used to define authenticator selection attachment.
        """
        return pulumi.get(self, "authenticator_selection_attachment")

    @property
    @pulumi.getter(name="authenticatorSelectionRequireResidentKey")
    def authenticator_selection_require_resident_key(self) -> bool:
        """
        Flag used to indicate authenticator selection is required or not
        """
        return pulumi.get(self, "authenticator_selection_require_resident_key")

    @property
    @pulumi.getter(name="authenticatorSelectionResidentKey")
    def authenticator_selection_resident_key(self) -> str:
        """
        Attribute used to define authenticator selection resident key requirement.
        """
        return pulumi.get(self, "authenticator_selection_resident_key")

    @property
    @pulumi.getter(name="authenticatorSelectionUserVerification")
    def authenticator_selection_user_verification(self) -> str:
        """
        Attribute used to define authenticator selection verification.
        """
        return pulumi.get(self, "authenticator_selection_user_verification")

    @property
    @pulumi.getter(name="domainValidationLevel")
    def domain_validation_level(self) -> int:
        """
        Number of domain levels IDCS should use for origin comparision
        """
        return pulumi.get(self, "domain_validation_level")

    @property
    @pulumi.getter(name="excludeCredentials")
    def exclude_credentials(self) -> bool:
        """
        Flag used to indicate whether we need to restrict creation of multiple credentials in same authenticator
        """
        return pulumi.get(self, "exclude_credentials")

    @property
    @pulumi.getter(name="publicKeyTypes")
    def public_key_types(self) -> Sequence[str]:
        """
        List of server supported public key algorithms
        """
        return pulumi.get(self, "public_key_types")

    @property
    @pulumi.getter
    def timeout(self) -> int:
        """
        Timeout for the fido authentication to complete
        """
        return pulumi.get(self, "timeout")


@pulumi.output_type
class GetDomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettingResult(dict):
    def __init__(__self__, *,
                 duo_security_settings: Sequence['outputs.GetDomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettingDuoSecuritySettingResult']):
        """
        :param Sequence['GetDomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettingDuoSecuritySettingArgs'] duo_security_settings: Settings related to Duo Security
        """
        pulumi.set(__self__, "duo_security_settings", duo_security_settings)

    @property
    @pulumi.getter(name="duoSecuritySettings")
    def duo_security_settings(self) -> Sequence['outputs.GetDomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettingDuoSecuritySettingResult']:
        """
        Settings related to Duo Security
        """
        return pulumi.get(self, "duo_security_settings")


@pulumi.output_type
class GetDomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettingDuoSecuritySettingResult(dict):
    def __init__(__self__, *,
                 api_hostname: str,
                 attestation_key: str,
                 integration_key: str,
                 secret_key: str,
                 user_mapping_attribute: str):
        """
        :param str api_hostname: Hostname to access the Duo security account
        :param str attestation_key: Attestation key to attest the request and response between Duo Security
        :param str integration_key: Integration key from Duo Security authenticator
        :param str secret_key: Secret key from Duo Security authenticator
        :param str user_mapping_attribute: User attribute mapping value
        """
        pulumi.set(__self__, "api_hostname", api_hostname)
        pulumi.set(__self__, "attestation_key", attestation_key)
        pulumi.set(__self__, "integration_key", integration_key)
        pulumi.set(__self__, "secret_key", secret_key)
        pulumi.set(__self__, "user_mapping_attribute", user_mapping_attribute)

    @property
    @pulumi.getter(name="apiHostname")
    def api_hostname(self) -> str:
        """
        Hostname to access the Duo security account
        """
        return pulumi.get(self, "api_hostname")

    @property
    @pulumi.getter(name="attestationKey")
    def attestation_key(self) -> str:
        """
        Attestation key to attest the request and response between Duo Security
        """
        return pulumi.get(self, "attestation_key")

    @property
    @pulumi.getter(name="integrationKey")
    def integration_key(self) -> str:
        """
        Integration key from Duo Security authenticator
        """
        return pulumi.get(self, "integration_key")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> str:
        """
        Secret key from Duo Security authenticator
        """
        return pulumi.get(self, "secret_key")

    @property
    @pulumi.getter(name="userMappingAttribute")
    def user_mapping_attribute(self) -> str:
        """
        User attribute mapping value
        """
        return pulumi.get(self, "user_mapping_attribute")


@pulumi.output_type
class GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingResult(dict):
    def __init__(__self__, *,
                 attribute_sets: Sequence[str],
                 attributes: str,
                 authentication_factor_setting_id: str,
                 authorization: str,
                 auto_enroll_email_factor_disabled: bool,
                 bypass_code_enabled: bool,
                 bypass_code_settings: Sequence['outputs.GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingBypassCodeSettingResult'],
                 client_app_settings: Sequence['outputs.GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingClientAppSettingResult'],
                 compartment_ocid: str,
                 compliance_policies: Sequence['outputs.GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingCompliancePolicyResult'],
                 delete_in_progress: bool,
                 domain_ocid: str,
                 email_enabled: bool,
                 email_settings: Sequence['outputs.GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingEmailSettingResult'],
                 endpoint_restrictions: Sequence['outputs.GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingEndpointRestrictionResult'],
                 fido_authenticator_enabled: bool,
                 hide_backup_factor_enabled: bool,
                 id: str,
                 idcs_created_bies: Sequence['outputs.GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingIdcsCreatedByResult'],
                 idcs_endpoint: str,
                 idcs_last_modified_bies: Sequence['outputs.GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingIdcsLastModifiedByResult'],
                 idcs_last_upgraded_in_release: str,
                 idcs_prevented_operations: Sequence[str],
                 identity_store_settings: Sequence['outputs.GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingIdentityStoreSettingResult'],
                 metas: Sequence['outputs.GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingMetaResult'],
                 mfa_enabled_category: str,
                 mfa_enrollment_type: str,
                 notification_settings: Sequence['outputs.GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingNotificationSettingResult'],
                 ocid: str,
                 phone_call_enabled: bool,
                 push_enabled: bool,
                 resource_type_schema_version: str,
                 schemas: Sequence[str],
                 security_questions_enabled: bool,
                 sms_enabled: bool,
                 tags: Sequence['outputs.GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingTagResult'],
                 tenancy_ocid: str,
                 third_party_factors: Sequence['outputs.GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingThirdPartyFactorResult'],
                 totp_enabled: bool,
                 totp_settings: Sequence['outputs.GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingTotpSettingResult'],
                 urnietfparamsscimschemasoracleidcsextensionfido_authentication_factor_settings: Sequence['outputs.GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionfidoAuthenticationFactorSettingResult'],
                 urnietfparamsscimschemasoracleidcsextensionthird_party_authentication_factor_settings: Sequence['outputs.GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettingResult'],
                 user_enrollment_disabled_factors: Sequence[str],
                 yubico_otp_enabled: bool):
        """
        :param Sequence[str] attribute_sets: A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
        :param str attributes: A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
        :param str authorization: The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
        :param bool auto_enroll_email_factor_disabled: If true, indicates that email will not be enrolled as a MFA factor automatically if it a account recovery factor
        :param bool bypass_code_enabled: If true, indicates that Bypass Code is enabled for authentication
        :param Sequence['GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingBypassCodeSettingArgs'] bypass_code_settings: Settings related to the bypass code, such as bypass code length, bypass code expiry, max active bypass codes, and so on
        :param Sequence['GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingClientAppSettingArgs'] client_app_settings: Settings related to compliance, Personal Identification Number (PIN) policy, and so on
        :param str compartment_ocid: Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
        :param Sequence['GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingCompliancePolicyArgs'] compliance_policies: Compliance Policy that defines actions to be taken when a condition is violated
        :param bool delete_in_progress: A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
        :param str domain_ocid: Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
        :param bool email_enabled: If true, indicates that the EMAIL channel is enabled for authentication
        :param Sequence['GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingEmailSettingArgs'] email_settings: Settings related to Email Factor, such as enabled email magic link factor, custom url for Email Link
        :param Sequence['GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingEndpointRestrictionArgs'] endpoint_restrictions: Settings that describe the set of restrictions that the system should apply to devices and trusted endpoints of a user
        :param bool fido_authenticator_enabled: If true, indicates that the Fido Authenticator channels are enabled for authentication
        :param bool hide_backup_factor_enabled: If true, indicates that 'Show backup factor(s)' button will be hidden during authentication
        :param str id: Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider's entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
        :param Sequence['GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingIdcsCreatedByArgs'] idcs_created_bies: The User or App who created the Resource
        :param str idcs_endpoint: The basic endpoint for the identity domain
        :param Sequence['GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingIdcsLastModifiedByArgs'] idcs_last_modified_bies: The User or App who modified the Resource
        :param str idcs_last_upgraded_in_release: The release number when the resource was upgraded.
        :param Sequence[str] idcs_prevented_operations: Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
        :param Sequence['GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingIdentityStoreSettingArgs'] identity_store_settings: Settings related to the use of a user's profile details from the identity store
        :param Sequence['GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingMetaArgs'] metas: A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
        :param str mfa_enabled_category: Specifies the category of people for whom Multi-Factor Authentication is enabled. This is a readOnly attribute which reflects the value of mfaEnabledCategory attribute in SsoSettings
        :param str mfa_enrollment_type: Specifies if Multi-Factor Authentication enrollment is mandatory or optional for a user
        :param Sequence['GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingNotificationSettingArgs'] notification_settings: Settings related to the Mobile App Notification channel, such as pull
        :param str ocid: Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        :param bool phone_call_enabled: If true, indicates that the phone (PHONE_CALL) channel is enabled for authentication
        :param bool push_enabled: If true, indicates that the Mobile App Push Notification channel is enabled for authentication
        :param str resource_type_schema_version: An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
        :param Sequence[str] schemas: REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \\"enterprise\\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
        :param bool security_questions_enabled: If true, indicates that Security Questions are enabled for authentication
        :param bool sms_enabled: If true, indicates that the Short Message Service (SMS) channel is enabled for authentication
        :param Sequence['GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingTagArgs'] tags: A list of tags on this resource.
        :param str tenancy_ocid: Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
        :param Sequence['GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingThirdPartyFactorArgs'] third_party_factors: Settings related to third-party factor
        :param bool totp_enabled: If true, indicates that the Mobile App One Time Passcode channel is enabled for authentication
        :param Sequence['GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingTotpSettingArgs'] totp_settings: Settings related to Time-Based One-Time Passcodes (TOTP), such as hashing algo, totp time step, passcode length, and so on
        :param Sequence['GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionfidoAuthenticationFactorSettingArgs'] urnietfparamsscimschemasoracleidcsextensionfido_authentication_factor_settings: This extension defines attributes used to manage Multi-Factor Authentication settings of fido authentication
        :param Sequence['GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettingArgs'] urnietfparamsscimschemasoracleidcsextensionthird_party_authentication_factor_settings: This extension defines attributes used to manage Multi-Factor Authentication settings of third party provider
        :param Sequence[str] user_enrollment_disabled_factors: Factors for which enrollment should be blocked for End User
        :param bool yubico_otp_enabled: If true, indicates that the Yubico OTP is enabled for authentication
        """
        pulumi.set(__self__, "attribute_sets", attribute_sets)
        pulumi.set(__self__, "attributes", attributes)
        pulumi.set(__self__, "authentication_factor_setting_id", authentication_factor_setting_id)
        pulumi.set(__self__, "authorization", authorization)
        pulumi.set(__self__, "auto_enroll_email_factor_disabled", auto_enroll_email_factor_disabled)
        pulumi.set(__self__, "bypass_code_enabled", bypass_code_enabled)
        pulumi.set(__self__, "bypass_code_settings", bypass_code_settings)
        pulumi.set(__self__, "client_app_settings", client_app_settings)
        pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        pulumi.set(__self__, "compliance_policies", compliance_policies)
        pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        pulumi.set(__self__, "domain_ocid", domain_ocid)
        pulumi.set(__self__, "email_enabled", email_enabled)
        pulumi.set(__self__, "email_settings", email_settings)
        pulumi.set(__self__, "endpoint_restrictions", endpoint_restrictions)
        pulumi.set(__self__, "fido_authenticator_enabled", fido_authenticator_enabled)
        pulumi.set(__self__, "hide_backup_factor_enabled", hide_backup_factor_enabled)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        pulumi.set(__self__, "idcs_endpoint", idcs_endpoint)
        pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        pulumi.set(__self__, "identity_store_settings", identity_store_settings)
        pulumi.set(__self__, "metas", metas)
        pulumi.set(__self__, "mfa_enabled_category", mfa_enabled_category)
        pulumi.set(__self__, "mfa_enrollment_type", mfa_enrollment_type)
        pulumi.set(__self__, "notification_settings", notification_settings)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "phone_call_enabled", phone_call_enabled)
        pulumi.set(__self__, "push_enabled", push_enabled)
        pulumi.set(__self__, "resource_type_schema_version", resource_type_schema_version)
        pulumi.set(__self__, "schemas", schemas)
        pulumi.set(__self__, "security_questions_enabled", security_questions_enabled)
        pulumi.set(__self__, "sms_enabled", sms_enabled)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)
        pulumi.set(__self__, "third_party_factors", third_party_factors)
        pulumi.set(__self__, "totp_enabled", totp_enabled)
        pulumi.set(__self__, "totp_settings", totp_settings)
        pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionfido_authentication_factor_settings", urnietfparamsscimschemasoracleidcsextensionfido_authentication_factor_settings)
        pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionthird_party_authentication_factor_settings", urnietfparamsscimschemasoracleidcsextensionthird_party_authentication_factor_settings)
        pulumi.set(__self__, "user_enrollment_disabled_factors", user_enrollment_disabled_factors)
        pulumi.set(__self__, "yubico_otp_enabled", yubico_otp_enabled)

    @property
    @pulumi.getter(name="attributeSets")
    def attribute_sets(self) -> Sequence[str]:
        """
        A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
        """
        return pulumi.get(self, "attribute_sets")

    @property
    @pulumi.getter
    def attributes(self) -> str:
        """
        A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
        """
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter(name="authenticationFactorSettingId")
    def authentication_factor_setting_id(self) -> str:
        return pulumi.get(self, "authentication_factor_setting_id")

    @property
    @pulumi.getter
    def authorization(self) -> str:
        """
        The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
        """
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="autoEnrollEmailFactorDisabled")
    def auto_enroll_email_factor_disabled(self) -> bool:
        """
        If true, indicates that email will not be enrolled as a MFA factor automatically if it a account recovery factor
        """
        return pulumi.get(self, "auto_enroll_email_factor_disabled")

    @property
    @pulumi.getter(name="bypassCodeEnabled")
    def bypass_code_enabled(self) -> bool:
        """
        If true, indicates that Bypass Code is enabled for authentication
        """
        return pulumi.get(self, "bypass_code_enabled")

    @property
    @pulumi.getter(name="bypassCodeSettings")
    def bypass_code_settings(self) -> Sequence['outputs.GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingBypassCodeSettingResult']:
        """
        Settings related to the bypass code, such as bypass code length, bypass code expiry, max active bypass codes, and so on
        """
        return pulumi.get(self, "bypass_code_settings")

    @property
    @pulumi.getter(name="clientAppSettings")
    def client_app_settings(self) -> Sequence['outputs.GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingClientAppSettingResult']:
        """
        Settings related to compliance, Personal Identification Number (PIN) policy, and so on
        """
        return pulumi.get(self, "client_app_settings")

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="compliancePolicies")
    def compliance_policies(self) -> Sequence['outputs.GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingCompliancePolicyResult']:
        """
        Compliance Policy that defines actions to be taken when a condition is violated
        """
        return pulumi.get(self, "compliance_policies")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> bool:
        """
        A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
        """
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter(name="emailEnabled")
    def email_enabled(self) -> bool:
        """
        If true, indicates that the EMAIL channel is enabled for authentication
        """
        return pulumi.get(self, "email_enabled")

    @property
    @pulumi.getter(name="emailSettings")
    def email_settings(self) -> Sequence['outputs.GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingEmailSettingResult']:
        """
        Settings related to Email Factor, such as enabled email magic link factor, custom url for Email Link
        """
        return pulumi.get(self, "email_settings")

    @property
    @pulumi.getter(name="endpointRestrictions")
    def endpoint_restrictions(self) -> Sequence['outputs.GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingEndpointRestrictionResult']:
        """
        Settings that describe the set of restrictions that the system should apply to devices and trusted endpoints of a user
        """
        return pulumi.get(self, "endpoint_restrictions")

    @property
    @pulumi.getter(name="fidoAuthenticatorEnabled")
    def fido_authenticator_enabled(self) -> bool:
        """
        If true, indicates that the Fido Authenticator channels are enabled for authentication
        """
        return pulumi.get(self, "fido_authenticator_enabled")

    @property
    @pulumi.getter(name="hideBackupFactorEnabled")
    def hide_backup_factor_enabled(self) -> bool:
        """
        If true, indicates that 'Show backup factor(s)' button will be hidden during authentication
        """
        return pulumi.get(self, "hide_backup_factor_enabled")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider's entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Sequence['outputs.GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingIdcsCreatedByResult']:
        """
        The User or App who created the Resource
        """
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> str:
        """
        The basic endpoint for the identity domain
        """
        return pulumi.get(self, "idcs_endpoint")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Sequence['outputs.GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingIdcsLastModifiedByResult']:
        """
        The User or App who modified the Resource
        """
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> str:
        """
        The release number when the resource was upgraded.
        """
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Sequence[str]:
        """
        Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
        """
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter(name="identityStoreSettings")
    def identity_store_settings(self) -> Sequence['outputs.GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingIdentityStoreSettingResult']:
        """
        Settings related to the use of a user's profile details from the identity store
        """
        return pulumi.get(self, "identity_store_settings")

    @property
    @pulumi.getter
    def metas(self) -> Sequence['outputs.GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingMetaResult']:
        """
        A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
        """
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter(name="mfaEnabledCategory")
    def mfa_enabled_category(self) -> str:
        """
        Specifies the category of people for whom Multi-Factor Authentication is enabled. This is a readOnly attribute which reflects the value of mfaEnabledCategory attribute in SsoSettings
        """
        return pulumi.get(self, "mfa_enabled_category")

    @property
    @pulumi.getter(name="mfaEnrollmentType")
    def mfa_enrollment_type(self) -> str:
        """
        Specifies if Multi-Factor Authentication enrollment is mandatory or optional for a user
        """
        return pulumi.get(self, "mfa_enrollment_type")

    @property
    @pulumi.getter(name="notificationSettings")
    def notification_settings(self) -> Sequence['outputs.GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingNotificationSettingResult']:
        """
        Settings related to the Mobile App Notification channel, such as pull
        """
        return pulumi.get(self, "notification_settings")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="phoneCallEnabled")
    def phone_call_enabled(self) -> bool:
        """
        If true, indicates that the phone (PHONE_CALL) channel is enabled for authentication
        """
        return pulumi.get(self, "phone_call_enabled")

    @property
    @pulumi.getter(name="pushEnabled")
    def push_enabled(self) -> bool:
        """
        If true, indicates that the Mobile App Push Notification channel is enabled for authentication
        """
        return pulumi.get(self, "push_enabled")

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> str:
        """
        An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
        """
        return pulumi.get(self, "resource_type_schema_version")

    @property
    @pulumi.getter
    def schemas(self) -> Sequence[str]:
        """
        REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \\"enterprise\\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
        """
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter(name="securityQuestionsEnabled")
    def security_questions_enabled(self) -> bool:
        """
        If true, indicates that Security Questions are enabled for authentication
        """
        return pulumi.get(self, "security_questions_enabled")

    @property
    @pulumi.getter(name="smsEnabled")
    def sms_enabled(self) -> bool:
        """
        If true, indicates that the Short Message Service (SMS) channel is enabled for authentication
        """
        return pulumi.get(self, "sms_enabled")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingTagResult']:
        """
        A list of tags on this resource.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "tenancy_ocid")

    @property
    @pulumi.getter(name="thirdPartyFactors")
    def third_party_factors(self) -> Sequence['outputs.GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingThirdPartyFactorResult']:
        """
        Settings related to third-party factor
        """
        return pulumi.get(self, "third_party_factors")

    @property
    @pulumi.getter(name="totpEnabled")
    def totp_enabled(self) -> bool:
        """
        If true, indicates that the Mobile App One Time Passcode channel is enabled for authentication
        """
        return pulumi.get(self, "totp_enabled")

    @property
    @pulumi.getter(name="totpSettings")
    def totp_settings(self) -> Sequence['outputs.GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingTotpSettingResult']:
        """
        Settings related to Time-Based One-Time Passcodes (TOTP), such as hashing algo, totp time step, passcode length, and so on
        """
        return pulumi.get(self, "totp_settings")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionfidoAuthenticationFactorSettings")
    def urnietfparamsscimschemasoracleidcsextensionfido_authentication_factor_settings(self) -> Sequence['outputs.GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionfidoAuthenticationFactorSettingResult']:
        """
        This extension defines attributes used to manage Multi-Factor Authentication settings of fido authentication
        """
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionfido_authentication_factor_settings")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettings")
    def urnietfparamsscimschemasoracleidcsextensionthird_party_authentication_factor_settings(self) -> Sequence['outputs.GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettingResult']:
        """
        This extension defines attributes used to manage Multi-Factor Authentication settings of third party provider
        """
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionthird_party_authentication_factor_settings")

    @property
    @pulumi.getter(name="userEnrollmentDisabledFactors")
    def user_enrollment_disabled_factors(self) -> Sequence[str]:
        """
        Factors for which enrollment should be blocked for End User
        """
        return pulumi.get(self, "user_enrollment_disabled_factors")

    @property
    @pulumi.getter(name="yubicoOtpEnabled")
    def yubico_otp_enabled(self) -> bool:
        """
        If true, indicates that the Yubico OTP is enabled for authentication
        """
        return pulumi.get(self, "yubico_otp_enabled")


@pulumi.output_type
class GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingBypassCodeSettingResult(dict):
    def __init__(__self__, *,
                 help_desk_code_expiry_in_mins: int,
                 help_desk_generation_enabled: bool,
                 help_desk_max_usage: int,
                 length: int,
                 max_active: int,
                 self_service_generation_enabled: bool):
        """
        :param int help_desk_code_expiry_in_mins: Expiry (in minutes) of any bypass code that is generated by the help desk
        :param bool help_desk_generation_enabled: If true, indicates that help desk bypass code generation is enabled
        :param int help_desk_max_usage: The maximum number of times that any bypass code that is generated by the help desk can be used
        :param int length: Exact length of the bypass code to be generated
        :param int max_active: The maximum number of bypass codes that can be issued to any user
        :param bool self_service_generation_enabled: If true, indicates that self-service bypass code generation is enabled
        """
        pulumi.set(__self__, "help_desk_code_expiry_in_mins", help_desk_code_expiry_in_mins)
        pulumi.set(__self__, "help_desk_generation_enabled", help_desk_generation_enabled)
        pulumi.set(__self__, "help_desk_max_usage", help_desk_max_usage)
        pulumi.set(__self__, "length", length)
        pulumi.set(__self__, "max_active", max_active)
        pulumi.set(__self__, "self_service_generation_enabled", self_service_generation_enabled)

    @property
    @pulumi.getter(name="helpDeskCodeExpiryInMins")
    def help_desk_code_expiry_in_mins(self) -> int:
        """
        Expiry (in minutes) of any bypass code that is generated by the help desk
        """
        return pulumi.get(self, "help_desk_code_expiry_in_mins")

    @property
    @pulumi.getter(name="helpDeskGenerationEnabled")
    def help_desk_generation_enabled(self) -> bool:
        """
        If true, indicates that help desk bypass code generation is enabled
        """
        return pulumi.get(self, "help_desk_generation_enabled")

    @property
    @pulumi.getter(name="helpDeskMaxUsage")
    def help_desk_max_usage(self) -> int:
        """
        The maximum number of times that any bypass code that is generated by the help desk can be used
        """
        return pulumi.get(self, "help_desk_max_usage")

    @property
    @pulumi.getter
    def length(self) -> int:
        """
        Exact length of the bypass code to be generated
        """
        return pulumi.get(self, "length")

    @property
    @pulumi.getter(name="maxActive")
    def max_active(self) -> int:
        """
        The maximum number of bypass codes that can be issued to any user
        """
        return pulumi.get(self, "max_active")

    @property
    @pulumi.getter(name="selfServiceGenerationEnabled")
    def self_service_generation_enabled(self) -> bool:
        """
        If true, indicates that self-service bypass code generation is enabled
        """
        return pulumi.get(self, "self_service_generation_enabled")


@pulumi.output_type
class GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingClientAppSettingResult(dict):
    def __init__(__self__, *,
                 device_protection_policy: str,
                 initial_lockout_period_in_secs: int,
                 key_pair_length: int,
                 lockout_escalation_pattern: str,
                 max_failures_before_lockout: int,
                 max_failures_before_warning: int,
                 max_lockout_interval_in_secs: int,
                 min_pin_length: int,
                 policy_update_freq_in_days: int,
                 request_signing_algo: str,
                 shared_secret_encoding: str,
                 unlock_app_for_each_request_enabled: bool,
                 unlock_app_interval_in_secs: int,
                 unlock_on_app_foreground_enabled: bool,
                 unlock_on_app_start_enabled: bool):
        """
        :param str device_protection_policy: Indicates what protection policy that the system applies on a device. By default, the value is NONE, which indicates that the system applies no protection policy. A value of APP_PIN indicates that the system requires a Personal Identification Number (PIN). A value of DEVICE_BIOMETRIC_OR_APP_PIN indicates that either a PIN or a biometric authentication factor is required.
        :param int initial_lockout_period_in_secs: The period of time in seconds that the system will lock a user out of the service after that user exceeds the maximum number of login failures
        :param int key_pair_length: The size of the key that the system uses to generate the public-private key pair
        :param str lockout_escalation_pattern: The pattern of escalation that the system follows, in locking a particular user out of the service.
        :param int max_failures_before_lockout: The maximum number of times that a particular user can fail to login before the system locks that user out of the service
        :param int max_failures_before_warning: The maximum number of login failures that the system will allow before raising a warning and sending an alert via email
        :param int max_lockout_interval_in_secs: The maximum period of time that the system will lock a particular user out of the service regardless of what the configured pattern of escalation would otherwise dictate
        :param int min_pin_length: Minimum length of the Personal Identification Number (PIN)
        :param int policy_update_freq_in_days: The period of time in days after which a client should refresh its policy by re-reading that policy from the server
        :param str request_signing_algo: Indicates which algorithm the system will use to sign requests
        :param str shared_secret_encoding: Indicates the type of encoding that the system should use to generate a shared secret
        :param bool unlock_app_for_each_request_enabled: If true, indicates that the system should require the user to unlock the client app for each request. In order to unlock the App, the user must supply a Personal Identification Number (PIN) or a biometric authentication-factor.
        :param int unlock_app_interval_in_secs: Specifies the period of time in seconds after which the client App should require the user to unlock the App. In order to unlock the App, the user must supply a Personal Identification Number (PIN) or a biometric authentication-factor. A value of zero means that it is disabled.
        :param bool unlock_on_app_foreground_enabled: If true, indicates that the system should require the user to unlock the client App, when the client App comes to the foreground in the display of the device. In order to unlock the App, the user must supply a Personal Identification Number (PIN) or a biometric authentication-factor.
        :param bool unlock_on_app_start_enabled: If true, indicates that the system should require the user to unlock the client App whenever the App is started. In order to unlock the App, the user must supply a Personal Identification Number (PIN) or a biometric authentication-factor.
        """
        pulumi.set(__self__, "device_protection_policy", device_protection_policy)
        pulumi.set(__self__, "initial_lockout_period_in_secs", initial_lockout_period_in_secs)
        pulumi.set(__self__, "key_pair_length", key_pair_length)
        pulumi.set(__self__, "lockout_escalation_pattern", lockout_escalation_pattern)
        pulumi.set(__self__, "max_failures_before_lockout", max_failures_before_lockout)
        pulumi.set(__self__, "max_failures_before_warning", max_failures_before_warning)
        pulumi.set(__self__, "max_lockout_interval_in_secs", max_lockout_interval_in_secs)
        pulumi.set(__self__, "min_pin_length", min_pin_length)
        pulumi.set(__self__, "policy_update_freq_in_days", policy_update_freq_in_days)
        pulumi.set(__self__, "request_signing_algo", request_signing_algo)
        pulumi.set(__self__, "shared_secret_encoding", shared_secret_encoding)
        pulumi.set(__self__, "unlock_app_for_each_request_enabled", unlock_app_for_each_request_enabled)
        pulumi.set(__self__, "unlock_app_interval_in_secs", unlock_app_interval_in_secs)
        pulumi.set(__self__, "unlock_on_app_foreground_enabled", unlock_on_app_foreground_enabled)
        pulumi.set(__self__, "unlock_on_app_start_enabled", unlock_on_app_start_enabled)

    @property
    @pulumi.getter(name="deviceProtectionPolicy")
    def device_protection_policy(self) -> str:
        """
        Indicates what protection policy that the system applies on a device. By default, the value is NONE, which indicates that the system applies no protection policy. A value of APP_PIN indicates that the system requires a Personal Identification Number (PIN). A value of DEVICE_BIOMETRIC_OR_APP_PIN indicates that either a PIN or a biometric authentication factor is required.
        """
        return pulumi.get(self, "device_protection_policy")

    @property
    @pulumi.getter(name="initialLockoutPeriodInSecs")
    def initial_lockout_period_in_secs(self) -> int:
        """
        The period of time in seconds that the system will lock a user out of the service after that user exceeds the maximum number of login failures
        """
        return pulumi.get(self, "initial_lockout_period_in_secs")

    @property
    @pulumi.getter(name="keyPairLength")
    def key_pair_length(self) -> int:
        """
        The size of the key that the system uses to generate the public-private key pair
        """
        return pulumi.get(self, "key_pair_length")

    @property
    @pulumi.getter(name="lockoutEscalationPattern")
    def lockout_escalation_pattern(self) -> str:
        """
        The pattern of escalation that the system follows, in locking a particular user out of the service.
        """
        return pulumi.get(self, "lockout_escalation_pattern")

    @property
    @pulumi.getter(name="maxFailuresBeforeLockout")
    def max_failures_before_lockout(self) -> int:
        """
        The maximum number of times that a particular user can fail to login before the system locks that user out of the service
        """
        return pulumi.get(self, "max_failures_before_lockout")

    @property
    @pulumi.getter(name="maxFailuresBeforeWarning")
    def max_failures_before_warning(self) -> int:
        """
        The maximum number of login failures that the system will allow before raising a warning and sending an alert via email
        """
        return pulumi.get(self, "max_failures_before_warning")

    @property
    @pulumi.getter(name="maxLockoutIntervalInSecs")
    def max_lockout_interval_in_secs(self) -> int:
        """
        The maximum period of time that the system will lock a particular user out of the service regardless of what the configured pattern of escalation would otherwise dictate
        """
        return pulumi.get(self, "max_lockout_interval_in_secs")

    @property
    @pulumi.getter(name="minPinLength")
    def min_pin_length(self) -> int:
        """
        Minimum length of the Personal Identification Number (PIN)
        """
        return pulumi.get(self, "min_pin_length")

    @property
    @pulumi.getter(name="policyUpdateFreqInDays")
    def policy_update_freq_in_days(self) -> int:
        """
        The period of time in days after which a client should refresh its policy by re-reading that policy from the server
        """
        return pulumi.get(self, "policy_update_freq_in_days")

    @property
    @pulumi.getter(name="requestSigningAlgo")
    def request_signing_algo(self) -> str:
        """
        Indicates which algorithm the system will use to sign requests
        """
        return pulumi.get(self, "request_signing_algo")

    @property
    @pulumi.getter(name="sharedSecretEncoding")
    def shared_secret_encoding(self) -> str:
        """
        Indicates the type of encoding that the system should use to generate a shared secret
        """
        return pulumi.get(self, "shared_secret_encoding")

    @property
    @pulumi.getter(name="unlockAppForEachRequestEnabled")
    def unlock_app_for_each_request_enabled(self) -> bool:
        """
        If true, indicates that the system should require the user to unlock the client app for each request. In order to unlock the App, the user must supply a Personal Identification Number (PIN) or a biometric authentication-factor.
        """
        return pulumi.get(self, "unlock_app_for_each_request_enabled")

    @property
    @pulumi.getter(name="unlockAppIntervalInSecs")
    def unlock_app_interval_in_secs(self) -> int:
        """
        Specifies the period of time in seconds after which the client App should require the user to unlock the App. In order to unlock the App, the user must supply a Personal Identification Number (PIN) or a biometric authentication-factor. A value of zero means that it is disabled.
        """
        return pulumi.get(self, "unlock_app_interval_in_secs")

    @property
    @pulumi.getter(name="unlockOnAppForegroundEnabled")
    def unlock_on_app_foreground_enabled(self) -> bool:
        """
        If true, indicates that the system should require the user to unlock the client App, when the client App comes to the foreground in the display of the device. In order to unlock the App, the user must supply a Personal Identification Number (PIN) or a biometric authentication-factor.
        """
        return pulumi.get(self, "unlock_on_app_foreground_enabled")

    @property
    @pulumi.getter(name="unlockOnAppStartEnabled")
    def unlock_on_app_start_enabled(self) -> bool:
        """
        If true, indicates that the system should require the user to unlock the client App whenever the App is started. In order to unlock the App, the user must supply a Personal Identification Number (PIN) or a biometric authentication-factor.
        """
        return pulumi.get(self, "unlock_on_app_start_enabled")


@pulumi.output_type
class GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingCompliancePolicyResult(dict):
    def __init__(__self__, *,
                 action: str,
                 name: str,
                 value: str):
        """
        :param str action: The action to be taken if the value of the attribute is not as expected
        :param str name: The name of the attribute being evaluated
        :param str value: Value of the tag.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        The action to be taken if the value of the attribute is not as expected
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the attribute being evaluated
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of the tag.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingEmailSettingResult(dict):
    def __init__(__self__, *,
                 email_link_custom_url: str,
                 email_link_enabled: bool):
        """
        :param str email_link_custom_url: Custom redirect Url which will be used in email link
        :param bool email_link_enabled: Specifies whether Email link is enabled or not.
        """
        pulumi.set(__self__, "email_link_custom_url", email_link_custom_url)
        pulumi.set(__self__, "email_link_enabled", email_link_enabled)

    @property
    @pulumi.getter(name="emailLinkCustomUrl")
    def email_link_custom_url(self) -> str:
        """
        Custom redirect Url which will be used in email link
        """
        return pulumi.get(self, "email_link_custom_url")

    @property
    @pulumi.getter(name="emailLinkEnabled")
    def email_link_enabled(self) -> bool:
        """
        Specifies whether Email link is enabled or not.
        """
        return pulumi.get(self, "email_link_enabled")


@pulumi.output_type
class GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingEndpointRestrictionResult(dict):
    def __init__(__self__, *,
                 max_endpoint_trust_duration_in_days: int,
                 max_enrolled_devices: int,
                 max_incorrect_attempts: int,
                 max_trusted_endpoints: int,
                 trusted_endpoints_enabled: bool):
        """
        :param int max_endpoint_trust_duration_in_days: Maximum number of days until an endpoint can be trusted
        :param int max_enrolled_devices: Maximum number of enrolled devices per user
        :param int max_incorrect_attempts: An integer that represents the maximum number of failed MFA logins before an account is locked
        :param int max_trusted_endpoints: Max number of trusted endpoints per user
        :param bool trusted_endpoints_enabled: Specify if trusted endpoints are enabled
        """
        pulumi.set(__self__, "max_endpoint_trust_duration_in_days", max_endpoint_trust_duration_in_days)
        pulumi.set(__self__, "max_enrolled_devices", max_enrolled_devices)
        pulumi.set(__self__, "max_incorrect_attempts", max_incorrect_attempts)
        pulumi.set(__self__, "max_trusted_endpoints", max_trusted_endpoints)
        pulumi.set(__self__, "trusted_endpoints_enabled", trusted_endpoints_enabled)

    @property
    @pulumi.getter(name="maxEndpointTrustDurationInDays")
    def max_endpoint_trust_duration_in_days(self) -> int:
        """
        Maximum number of days until an endpoint can be trusted
        """
        return pulumi.get(self, "max_endpoint_trust_duration_in_days")

    @property
    @pulumi.getter(name="maxEnrolledDevices")
    def max_enrolled_devices(self) -> int:
        """
        Maximum number of enrolled devices per user
        """
        return pulumi.get(self, "max_enrolled_devices")

    @property
    @pulumi.getter(name="maxIncorrectAttempts")
    def max_incorrect_attempts(self) -> int:
        """
        An integer that represents the maximum number of failed MFA logins before an account is locked
        """
        return pulumi.get(self, "max_incorrect_attempts")

    @property
    @pulumi.getter(name="maxTrustedEndpoints")
    def max_trusted_endpoints(self) -> int:
        """
        Max number of trusted endpoints per user
        """
        return pulumi.get(self, "max_trusted_endpoints")

    @property
    @pulumi.getter(name="trustedEndpointsEnabled")
    def trusted_endpoints_enabled(self) -> bool:
        """
        Specify if trusted endpoints are enabled
        """
        return pulumi.get(self, "trusted_endpoints_enabled")


@pulumi.output_type
class GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: The displayName of the User or App who modified this Resource
        :param str ocid: Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        :param str ref: The URI of the SCIM resource that represents the User or App who modified this Resource
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: Value of the tag.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        The displayName of the User or App who modified this Resource
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI of the SCIM resource that represents the User or App who modified this Resource
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of the tag.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: The displayName of the User or App who modified this Resource
        :param str ocid: Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        :param str ref: The URI of the SCIM resource that represents the User or App who modified this Resource
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: Value of the tag.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        The displayName of the User or App who modified this Resource
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI of the SCIM resource that represents the User or App who modified this Resource
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of the tag.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingIdentityStoreSettingResult(dict):
    def __init__(__self__, *,
                 mobile_number_enabled: bool,
                 mobile_number_update_enabled: bool):
        """
        :param bool mobile_number_enabled: If true, indicates that Multi-Factor Authentication should use the mobile number in the identity store
        :param bool mobile_number_update_enabled: If true, indicates that the user can update the mobile number in the user's Multi-Factor Authentication profile
        """
        pulumi.set(__self__, "mobile_number_enabled", mobile_number_enabled)
        pulumi.set(__self__, "mobile_number_update_enabled", mobile_number_update_enabled)

    @property
    @pulumi.getter(name="mobileNumberEnabled")
    def mobile_number_enabled(self) -> bool:
        """
        If true, indicates that Multi-Factor Authentication should use the mobile number in the identity store
        """
        return pulumi.get(self, "mobile_number_enabled")

    @property
    @pulumi.getter(name="mobileNumberUpdateEnabled")
    def mobile_number_update_enabled(self) -> bool:
        """
        If true, indicates that the user can update the mobile number in the user's Multi-Factor Authentication profile
        """
        return pulumi.get(self, "mobile_number_update_enabled")


@pulumi.output_type
class GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingMetaResult(dict):
    def __init__(__self__, *,
                 created: str,
                 last_modified: str,
                 location: str,
                 resource_type: str,
                 version: str):
        """
        :param str created: The DateTime the Resource was added to the Service Provider
        :param str last_modified: The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        :param str location: The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        :param str resource_type: Name of the resource type of the resource--for example, Users or Groups
        :param str version: The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "last_modified", last_modified)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        The DateTime the Resource was added to the Service Provider
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> str:
        """
        The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Name of the resource type of the resource--for example, Users or Groups
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingNotificationSettingResult(dict):
    def __init__(__self__, *,
                 pull_enabled: bool):
        """
        :param bool pull_enabled: If true, indicates that the Mobile App Pull Notification channel is enabled for authentication
        """
        pulumi.set(__self__, "pull_enabled", pull_enabled)

    @property
    @pulumi.getter(name="pullEnabled")
    def pull_enabled(self) -> bool:
        """
        If true, indicates that the Mobile App Pull Notification channel is enabled for authentication
        """
        return pulumi.get(self, "pull_enabled")


@pulumi.output_type
class GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Key or name of the tag.
        :param str value: Value of the tag.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key or name of the tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of the tag.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingThirdPartyFactorResult(dict):
    def __init__(__self__, *,
                 duo_security: bool):
        """
        :param bool duo_security: To enable Duo Security factor
        """
        pulumi.set(__self__, "duo_security", duo_security)

    @property
    @pulumi.getter(name="duoSecurity")
    def duo_security(self) -> bool:
        """
        To enable Duo Security factor
        """
        return pulumi.get(self, "duo_security")


@pulumi.output_type
class GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingTotpSettingResult(dict):
    def __init__(__self__, *,
                 email_otp_validity_duration_in_mins: int,
                 email_passcode_length: int,
                 hashing_algorithm: str,
                 jwt_validity_duration_in_secs: int,
                 key_refresh_interval_in_days: int,
                 passcode_length: int,
                 sms_otp_validity_duration_in_mins: int,
                 sms_passcode_length: int,
                 time_step_in_secs: int,
                 time_step_tolerance: int):
        """
        :param int email_otp_validity_duration_in_mins: The period of time (in minutes) that a one-time passcode remains valid that the system sends by email.
        :param int email_passcode_length: Exact length of the email one-time passcode.
        :param str hashing_algorithm: The hashing algorithm to be used to calculate a One-Time Passcode. By default, the system uses SHA1.
        :param int jwt_validity_duration_in_secs: The period of time (in seconds) that a JSON Web Token (JWT) is valid
        :param int key_refresh_interval_in_days: The duration of time (in days) after which the shared secret has to be refreshed
        :param int passcode_length: Exact length of the One-Time Passcode that the system should generate
        :param int sms_otp_validity_duration_in_mins: The period of time (in minutes) for which a One-Time Passcode that the system sends by Short Message Service (SMS) or by voice remains valid
        :param int sms_passcode_length: Exact length of the Short Message Service (SMS) One-Time Passcode
        :param int time_step_in_secs: Time (in secs) to be used as the time step
        :param int time_step_tolerance: The tolerance/step-size that the system should use when validating a One-Time Passcode
        """
        pulumi.set(__self__, "email_otp_validity_duration_in_mins", email_otp_validity_duration_in_mins)
        pulumi.set(__self__, "email_passcode_length", email_passcode_length)
        pulumi.set(__self__, "hashing_algorithm", hashing_algorithm)
        pulumi.set(__self__, "jwt_validity_duration_in_secs", jwt_validity_duration_in_secs)
        pulumi.set(__self__, "key_refresh_interval_in_days", key_refresh_interval_in_days)
        pulumi.set(__self__, "passcode_length", passcode_length)
        pulumi.set(__self__, "sms_otp_validity_duration_in_mins", sms_otp_validity_duration_in_mins)
        pulumi.set(__self__, "sms_passcode_length", sms_passcode_length)
        pulumi.set(__self__, "time_step_in_secs", time_step_in_secs)
        pulumi.set(__self__, "time_step_tolerance", time_step_tolerance)

    @property
    @pulumi.getter(name="emailOtpValidityDurationInMins")
    def email_otp_validity_duration_in_mins(self) -> int:
        """
        The period of time (in minutes) that a one-time passcode remains valid that the system sends by email.
        """
        return pulumi.get(self, "email_otp_validity_duration_in_mins")

    @property
    @pulumi.getter(name="emailPasscodeLength")
    def email_passcode_length(self) -> int:
        """
        Exact length of the email one-time passcode.
        """
        return pulumi.get(self, "email_passcode_length")

    @property
    @pulumi.getter(name="hashingAlgorithm")
    def hashing_algorithm(self) -> str:
        """
        The hashing algorithm to be used to calculate a One-Time Passcode. By default, the system uses SHA1.
        """
        return pulumi.get(self, "hashing_algorithm")

    @property
    @pulumi.getter(name="jwtValidityDurationInSecs")
    def jwt_validity_duration_in_secs(self) -> int:
        """
        The period of time (in seconds) that a JSON Web Token (JWT) is valid
        """
        return pulumi.get(self, "jwt_validity_duration_in_secs")

    @property
    @pulumi.getter(name="keyRefreshIntervalInDays")
    def key_refresh_interval_in_days(self) -> int:
        """
        The duration of time (in days) after which the shared secret has to be refreshed
        """
        return pulumi.get(self, "key_refresh_interval_in_days")

    @property
    @pulumi.getter(name="passcodeLength")
    def passcode_length(self) -> int:
        """
        Exact length of the One-Time Passcode that the system should generate
        """
        return pulumi.get(self, "passcode_length")

    @property
    @pulumi.getter(name="smsOtpValidityDurationInMins")
    def sms_otp_validity_duration_in_mins(self) -> int:
        """
        The period of time (in minutes) for which a One-Time Passcode that the system sends by Short Message Service (SMS) or by voice remains valid
        """
        return pulumi.get(self, "sms_otp_validity_duration_in_mins")

    @property
    @pulumi.getter(name="smsPasscodeLength")
    def sms_passcode_length(self) -> int:
        """
        Exact length of the Short Message Service (SMS) One-Time Passcode
        """
        return pulumi.get(self, "sms_passcode_length")

    @property
    @pulumi.getter(name="timeStepInSecs")
    def time_step_in_secs(self) -> int:
        """
        Time (in secs) to be used as the time step
        """
        return pulumi.get(self, "time_step_in_secs")

    @property
    @pulumi.getter(name="timeStepTolerance")
    def time_step_tolerance(self) -> int:
        """
        The tolerance/step-size that the system should use when validating a One-Time Passcode
        """
        return pulumi.get(self, "time_step_tolerance")


@pulumi.output_type
class GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionfidoAuthenticationFactorSettingResult(dict):
    def __init__(__self__, *,
                 attestation: str,
                 authenticator_selection_attachment: str,
                 authenticator_selection_require_resident_key: bool,
                 authenticator_selection_resident_key: str,
                 authenticator_selection_user_verification: str,
                 domain_validation_level: int,
                 exclude_credentials: bool,
                 public_key_types: Sequence[str],
                 timeout: int):
        """
        :param str attestation: Attribute used to define the type of attestation required.
        :param str authenticator_selection_attachment: Attribute used to define authenticator selection attachment.
        :param bool authenticator_selection_require_resident_key: Flag used to indicate authenticator selection is required or not
        :param str authenticator_selection_resident_key: Attribute used to define authenticator selection resident key requirement.
        :param str authenticator_selection_user_verification: Attribute used to define authenticator selection verification.
        :param int domain_validation_level: Number of domain levels IDCS should use for origin comparision
        :param bool exclude_credentials: Flag used to indicate whether we need to restrict creation of multiple credentials in same authenticator
        :param Sequence[str] public_key_types: List of server supported public key algorithms
        :param int timeout: Timeout for the fido authentication to complete
        """
        pulumi.set(__self__, "attestation", attestation)
        pulumi.set(__self__, "authenticator_selection_attachment", authenticator_selection_attachment)
        pulumi.set(__self__, "authenticator_selection_require_resident_key", authenticator_selection_require_resident_key)
        pulumi.set(__self__, "authenticator_selection_resident_key", authenticator_selection_resident_key)
        pulumi.set(__self__, "authenticator_selection_user_verification", authenticator_selection_user_verification)
        pulumi.set(__self__, "domain_validation_level", domain_validation_level)
        pulumi.set(__self__, "exclude_credentials", exclude_credentials)
        pulumi.set(__self__, "public_key_types", public_key_types)
        pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def attestation(self) -> str:
        """
        Attribute used to define the type of attestation required.
        """
        return pulumi.get(self, "attestation")

    @property
    @pulumi.getter(name="authenticatorSelectionAttachment")
    def authenticator_selection_attachment(self) -> str:
        """
        Attribute used to define authenticator selection attachment.
        """
        return pulumi.get(self, "authenticator_selection_attachment")

    @property
    @pulumi.getter(name="authenticatorSelectionRequireResidentKey")
    def authenticator_selection_require_resident_key(self) -> bool:
        """
        Flag used to indicate authenticator selection is required or not
        """
        return pulumi.get(self, "authenticator_selection_require_resident_key")

    @property
    @pulumi.getter(name="authenticatorSelectionResidentKey")
    def authenticator_selection_resident_key(self) -> str:
        """
        Attribute used to define authenticator selection resident key requirement.
        """
        return pulumi.get(self, "authenticator_selection_resident_key")

    @property
    @pulumi.getter(name="authenticatorSelectionUserVerification")
    def authenticator_selection_user_verification(self) -> str:
        """
        Attribute used to define authenticator selection verification.
        """
        return pulumi.get(self, "authenticator_selection_user_verification")

    @property
    @pulumi.getter(name="domainValidationLevel")
    def domain_validation_level(self) -> int:
        """
        Number of domain levels IDCS should use for origin comparision
        """
        return pulumi.get(self, "domain_validation_level")

    @property
    @pulumi.getter(name="excludeCredentials")
    def exclude_credentials(self) -> bool:
        """
        Flag used to indicate whether we need to restrict creation of multiple credentials in same authenticator
        """
        return pulumi.get(self, "exclude_credentials")

    @property
    @pulumi.getter(name="publicKeyTypes")
    def public_key_types(self) -> Sequence[str]:
        """
        List of server supported public key algorithms
        """
        return pulumi.get(self, "public_key_types")

    @property
    @pulumi.getter
    def timeout(self) -> int:
        """
        Timeout for the fido authentication to complete
        """
        return pulumi.get(self, "timeout")


@pulumi.output_type
class GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettingResult(dict):
    def __init__(__self__, *,
                 duo_security_settings: Sequence['outputs.GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettingDuoSecuritySettingResult']):
        """
        :param Sequence['GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettingDuoSecuritySettingArgs'] duo_security_settings: Settings related to Duo Security
        """
        pulumi.set(__self__, "duo_security_settings", duo_security_settings)

    @property
    @pulumi.getter(name="duoSecuritySettings")
    def duo_security_settings(self) -> Sequence['outputs.GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettingDuoSecuritySettingResult']:
        """
        Settings related to Duo Security
        """
        return pulumi.get(self, "duo_security_settings")


@pulumi.output_type
class GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettingDuoSecuritySettingResult(dict):
    def __init__(__self__, *,
                 api_hostname: str,
                 attestation_key: str,
                 integration_key: str,
                 secret_key: str,
                 user_mapping_attribute: str):
        """
        :param str api_hostname: Hostname to access the Duo security account
        :param str attestation_key: Attestation key to attest the request and response between Duo Security
        :param str integration_key: Integration key from Duo Security authenticator
        :param str secret_key: Secret key from Duo Security authenticator
        :param str user_mapping_attribute: User attribute mapping value
        """
        pulumi.set(__self__, "api_hostname", api_hostname)
        pulumi.set(__self__, "attestation_key", attestation_key)
        pulumi.set(__self__, "integration_key", integration_key)
        pulumi.set(__self__, "secret_key", secret_key)
        pulumi.set(__self__, "user_mapping_attribute", user_mapping_attribute)

    @property
    @pulumi.getter(name="apiHostname")
    def api_hostname(self) -> str:
        """
        Hostname to access the Duo security account
        """
        return pulumi.get(self, "api_hostname")

    @property
    @pulumi.getter(name="attestationKey")
    def attestation_key(self) -> str:
        """
        Attestation key to attest the request and response between Duo Security
        """
        return pulumi.get(self, "attestation_key")

    @property
    @pulumi.getter(name="integrationKey")
    def integration_key(self) -> str:
        """
        Integration key from Duo Security authenticator
        """
        return pulumi.get(self, "integration_key")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> str:
        """
        Secret key from Duo Security authenticator
        """
        return pulumi.get(self, "secret_key")

    @property
    @pulumi.getter(name="userMappingAttribute")
    def user_mapping_attribute(self) -> str:
        """
        User attribute mapping value
        """
        return pulumi.get(self, "user_mapping_attribute")


@pulumi.output_type
class GetDomainsCustomerSecretKeyIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: User display name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsCustomerSecretKeyIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: User display name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsCustomerSecretKeyMetaResult(dict):
    def __init__(__self__, *,
                 created: str,
                 last_modified: str,
                 location: str,
                 resource_type: str,
                 version: str):
        """
        :param str created: The DateTime the Resource was added to the Service Provider
        :param str last_modified: The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        :param str location: The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        :param str resource_type: Name of the resource type of the resource--for example, Users or Groups
        :param str version: The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "last_modified", last_modified)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        The DateTime the Resource was added to the Service Provider
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> str:
        """
        The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Name of the resource type of the resource--for example, Users or Groups
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsCustomerSecretKeyTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Key or name of the tag.
        :param str value: User's id
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key or name of the tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsCustomerSecretKeyUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult(dict):
    def __init__(__self__, *,
                 allow_self_change: bool):
        """
        :param bool allow_self_change: If true, allows requesting user to update themselves. If false, requesting user can't update themself (default).
        """
        pulumi.set(__self__, "allow_self_change", allow_self_change)

    @property
    @pulumi.getter(name="allowSelfChange")
    def allow_self_change(self) -> bool:
        """
        If true, allows requesting user to update themselves. If false, requesting user can't update themself (default).
        """
        return pulumi.get(self, "allow_self_change")


@pulumi.output_type
class GetDomainsCustomerSecretKeyUserResult(dict):
    def __init__(__self__, *,
                 display: str,
                 name: str,
                 ocid: str,
                 ref: str,
                 value: str):
        """
        :param str display: User display name
        :param str name: User name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        User name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsCustomerSecretKeysCustomerSecretKeyResult(dict):
    def __init__(__self__, *,
                 access_key: str,
                 attribute_sets: Sequence[str],
                 attributes: str,
                 authorization: str,
                 compartment_ocid: str,
                 delete_in_progress: bool,
                 description: str,
                 display_name: str,
                 domain_ocid: str,
                 expires_on: str,
                 id: str,
                 idcs_created_bies: Sequence['outputs.GetDomainsCustomerSecretKeysCustomerSecretKeyIdcsCreatedByResult'],
                 idcs_endpoint: str,
                 idcs_last_modified_bies: Sequence['outputs.GetDomainsCustomerSecretKeysCustomerSecretKeyIdcsLastModifiedByResult'],
                 idcs_last_upgraded_in_release: str,
                 idcs_prevented_operations: Sequence[str],
                 metas: Sequence['outputs.GetDomainsCustomerSecretKeysCustomerSecretKeyMetaResult'],
                 ocid: str,
                 resource_type_schema_version: str,
                 schemas: Sequence[str],
                 status: str,
                 tags: Sequence['outputs.GetDomainsCustomerSecretKeysCustomerSecretKeyTagResult'],
                 tenancy_ocid: str,
                 urnietfparamsscimschemasoracleidcsextensionself_change_users: Sequence['outputs.GetDomainsCustomerSecretKeysCustomerSecretKeyUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult'],
                 users: Sequence['outputs.GetDomainsCustomerSecretKeysCustomerSecretKeyUserResult']):
        """
        :param str access_key: Access key
        :param Sequence[str] attribute_sets: A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
        :param str attributes: A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
        :param str authorization: The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
        :param str compartment_ocid: Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
        :param bool delete_in_progress: A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
        :param str description: Description
        :param str display_name: Display Name
        :param str domain_ocid: Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
        :param str expires_on: User credential expires on
        :param str id: Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider's entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
        :param Sequence['GetDomainsCustomerSecretKeysCustomerSecretKeyIdcsCreatedByArgs'] idcs_created_bies: The User or App who created the Resource
        :param str idcs_endpoint: The basic endpoint for the identity domain
        :param Sequence['GetDomainsCustomerSecretKeysCustomerSecretKeyIdcsLastModifiedByArgs'] idcs_last_modified_bies: The User or App who modified the Resource
        :param str idcs_last_upgraded_in_release: The release number when the resource was upgraded.
        :param Sequence[str] idcs_prevented_operations: Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
        :param Sequence['GetDomainsCustomerSecretKeysCustomerSecretKeyMetaArgs'] metas: A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
        :param str ocid: User's ocid
        :param str resource_type_schema_version: An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
        :param Sequence[str] schemas: REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \\"enterprise\\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
        :param str status: User credential status
        :param Sequence['GetDomainsCustomerSecretKeysCustomerSecretKeyTagArgs'] tags: A list of tags on this resource.
        :param str tenancy_ocid: Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
        :param Sequence['GetDomainsCustomerSecretKeysCustomerSecretKeyUrnietfparamsscimschemasoracleidcsextensionselfChangeUserArgs'] urnietfparamsscimschemasoracleidcsextensionself_change_users: Controls whether a user can update themselves or not via User related APIs
        :param Sequence['GetDomainsCustomerSecretKeysCustomerSecretKeyUserArgs'] users: User linked to customer secret key
        """
        pulumi.set(__self__, "access_key", access_key)
        pulumi.set(__self__, "attribute_sets", attribute_sets)
        pulumi.set(__self__, "attributes", attributes)
        pulumi.set(__self__, "authorization", authorization)
        pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "domain_ocid", domain_ocid)
        pulumi.set(__self__, "expires_on", expires_on)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        pulumi.set(__self__, "idcs_endpoint", idcs_endpoint)
        pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        pulumi.set(__self__, "metas", metas)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "resource_type_schema_version", resource_type_schema_version)
        pulumi.set(__self__, "schemas", schemas)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)
        pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionself_change_users", urnietfparamsscimschemasoracleidcsextensionself_change_users)
        pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> str:
        """
        Access key
        """
        return pulumi.get(self, "access_key")

    @property
    @pulumi.getter(name="attributeSets")
    def attribute_sets(self) -> Sequence[str]:
        """
        A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
        """
        return pulumi.get(self, "attribute_sets")

    @property
    @pulumi.getter
    def attributes(self) -> str:
        """
        A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
        """
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter
    def authorization(self) -> str:
        """
        The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
        """
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> bool:
        """
        A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
        """
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Display Name
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter(name="expiresOn")
    def expires_on(self) -> str:
        """
        User credential expires on
        """
        return pulumi.get(self, "expires_on")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider's entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Sequence['outputs.GetDomainsCustomerSecretKeysCustomerSecretKeyIdcsCreatedByResult']:
        """
        The User or App who created the Resource
        """
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> str:
        """
        The basic endpoint for the identity domain
        """
        return pulumi.get(self, "idcs_endpoint")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Sequence['outputs.GetDomainsCustomerSecretKeysCustomerSecretKeyIdcsLastModifiedByResult']:
        """
        The User or App who modified the Resource
        """
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> str:
        """
        The release number when the resource was upgraded.
        """
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Sequence[str]:
        """
        Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
        """
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter
    def metas(self) -> Sequence['outputs.GetDomainsCustomerSecretKeysCustomerSecretKeyMetaResult']:
        """
        A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
        """
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> str:
        """
        An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
        """
        return pulumi.get(self, "resource_type_schema_version")

    @property
    @pulumi.getter
    def schemas(self) -> Sequence[str]:
        """
        REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \\"enterprise\\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
        """
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        User credential status
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetDomainsCustomerSecretKeysCustomerSecretKeyTagResult']:
        """
        A list of tags on this resource.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "tenancy_ocid")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionselfChangeUsers")
    def urnietfparamsscimschemasoracleidcsextensionself_change_users(self) -> Sequence['outputs.GetDomainsCustomerSecretKeysCustomerSecretKeyUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult']:
        """
        Controls whether a user can update themselves or not via User related APIs
        """
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionself_change_users")

    @property
    @pulumi.getter
    def users(self) -> Sequence['outputs.GetDomainsCustomerSecretKeysCustomerSecretKeyUserResult']:
        """
        User linked to customer secret key
        """
        return pulumi.get(self, "users")


@pulumi.output_type
class GetDomainsCustomerSecretKeysCustomerSecretKeyIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: User display name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsCustomerSecretKeysCustomerSecretKeyIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: User display name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsCustomerSecretKeysCustomerSecretKeyMetaResult(dict):
    def __init__(__self__, *,
                 created: str,
                 last_modified: str,
                 location: str,
                 resource_type: str,
                 version: str):
        """
        :param str created: The DateTime the Resource was added to the Service Provider
        :param str last_modified: The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        :param str location: The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        :param str resource_type: Name of the resource type of the resource--for example, Users or Groups
        :param str version: The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "last_modified", last_modified)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        The DateTime the Resource was added to the Service Provider
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> str:
        """
        The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Name of the resource type of the resource--for example, Users or Groups
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsCustomerSecretKeysCustomerSecretKeyTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Key or name of the tag.
        :param str value: User's id
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key or name of the tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsCustomerSecretKeysCustomerSecretKeyUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult(dict):
    def __init__(__self__, *,
                 allow_self_change: bool):
        """
        :param bool allow_self_change: If true, allows requesting user to update themselves. If false, requesting user can't update themself (default).
        """
        pulumi.set(__self__, "allow_self_change", allow_self_change)

    @property
    @pulumi.getter(name="allowSelfChange")
    def allow_self_change(self) -> bool:
        """
        If true, allows requesting user to update themselves. If false, requesting user can't update themself (default).
        """
        return pulumi.get(self, "allow_self_change")


@pulumi.output_type
class GetDomainsCustomerSecretKeysCustomerSecretKeyUserResult(dict):
    def __init__(__self__, *,
                 display: str,
                 name: str,
                 ocid: str,
                 ref: str,
                 value: str):
        """
        :param str display: User display name
        :param str name: User name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        User name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsDomainResult(dict):
    def __init__(__self__, *,
                 admin_email: str,
                 admin_first_name: str,
                 admin_last_name: str,
                 admin_user_name: str,
                 compartment_id: str,
                 defined_tags: Mapping[str, Any],
                 description: str,
                 display_name: str,
                 freeform_tags: Mapping[str, Any],
                 home_region: str,
                 home_region_url: str,
                 id: str,
                 is_hidden_on_login: bool,
                 is_notification_bypassed: bool,
                 is_primary_email_required: bool,
                 license_type: str,
                 lifecycle_details: str,
                 replica_regions: Sequence['outputs.GetDomainsDomainReplicaRegionResult'],
                 state: str,
                 time_created: str,
                 type: str,
                 url: str):
        """
        :param str compartment_id: The OCID of the compartment (remember that the tenancy is simply the root compartment).
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param str description: The domain descripition
        :param str display_name: The mutable display name of the domain
        :param Mapping[str, Any] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param str home_region: The home region for the domain. See [Regions and Availability Domains](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/regions.htm) for the full list of supported region names.  Example: `us-phoenix-1`
        :param str home_region_url: The region specific domain URL
        :param str id: The OCID of the domain
        :param bool is_hidden_on_login: Indicate if the domain is visible at login screen or not
        :param str license_type: The domain license type
        :param str lifecycle_details: Any additional details about the current state of the Domain.
        :param Sequence['GetDomainsDomainReplicaRegionArgs'] replica_regions: The regions domain is replication to.
        :param str state: A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
        :param str time_created: Date and time the domain was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        :param str type: The domain type
        :param str url: The region agnostic domain URL
        """
        pulumi.set(__self__, "admin_email", admin_email)
        pulumi.set(__self__, "admin_first_name", admin_first_name)
        pulumi.set(__self__, "admin_last_name", admin_last_name)
        pulumi.set(__self__, "admin_user_name", admin_user_name)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "home_region", home_region)
        pulumi.set(__self__, "home_region_url", home_region_url)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_hidden_on_login", is_hidden_on_login)
        pulumi.set(__self__, "is_notification_bypassed", is_notification_bypassed)
        pulumi.set(__self__, "is_primary_email_required", is_primary_email_required)
        pulumi.set(__self__, "license_type", license_type)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "replica_regions", replica_regions)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="adminEmail")
    def admin_email(self) -> str:
        return pulumi.get(self, "admin_email")

    @property
    @pulumi.getter(name="adminFirstName")
    def admin_first_name(self) -> str:
        return pulumi.get(self, "admin_first_name")

    @property
    @pulumi.getter(name="adminLastName")
    def admin_last_name(self) -> str:
        return pulumi.get(self, "admin_last_name")

    @property
    @pulumi.getter(name="adminUserName")
    def admin_user_name(self) -> str:
        return pulumi.get(self, "admin_user_name")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The OCID of the compartment (remember that the tenancy is simply the root compartment).
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The domain descripition
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The mutable display name of the domain
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="homeRegion")
    def home_region(self) -> str:
        """
        The home region for the domain. See [Regions and Availability Domains](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/regions.htm) for the full list of supported region names.  Example: `us-phoenix-1`
        """
        return pulumi.get(self, "home_region")

    @property
    @pulumi.getter(name="homeRegionUrl")
    def home_region_url(self) -> str:
        """
        The region specific domain URL
        """
        return pulumi.get(self, "home_region_url")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The OCID of the domain
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isHiddenOnLogin")
    def is_hidden_on_login(self) -> bool:
        """
        Indicate if the domain is visible at login screen or not
        """
        return pulumi.get(self, "is_hidden_on_login")

    @property
    @pulumi.getter(name="isNotificationBypassed")
    def is_notification_bypassed(self) -> bool:
        return pulumi.get(self, "is_notification_bypassed")

    @property
    @pulumi.getter(name="isPrimaryEmailRequired")
    def is_primary_email_required(self) -> bool:
        return pulumi.get(self, "is_primary_email_required")

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> str:
        """
        The domain license type
        """
        return pulumi.get(self, "license_type")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        Any additional details about the current state of the Domain.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="replicaRegions")
    def replica_regions(self) -> Sequence['outputs.GetDomainsDomainReplicaRegionResult']:
        """
        The regions domain is replication to.
        """
        return pulumi.get(self, "replica_regions")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        Date and time the domain was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The domain type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        The region agnostic domain URL
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetDomainsDomainReplicaRegionResult(dict):
    def __init__(__self__, *,
                 region: str,
                 state: str,
                 url: str):
        """
        :param str region: A REPLICATION_ENABLED region, e.g. us-ashburn-1. See [Regions and Availability Domains](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/regions.htm) for the full list of supported region names.
        :param str state: A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
        :param str url: The region agnostic domain URL
        """
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        A REPLICATION_ENABLED region, e.g. us-ashburn-1. See [Regions and Availability Domains](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/regions.htm) for the full list of supported region names.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        The region agnostic domain URL
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetDomainsDynamicResourceGroupDynamicGroupAppRoleResult(dict):
    def __init__(__self__, *,
                 admin_role: bool,
                 app_id: str,
                 app_name: str,
                 display: str,
                 legacy_group_name: str,
                 ref: str,
                 value: str):
        """
        :param bool admin_role: If true, then the role provides administrative access privileges. READ-ONLY.
        :param str app_id: App identifier
        :param str app_name: Name of parent App. READ-ONLY.
        :param str display: The displayName of the User or App who modified this Resource
        :param str legacy_group_name: The name of the legacy group associated with this AppRole.
        :param str ref: The URI of the SCIM resource that represents the User or App who modified this Resource
        :param str value: Oracle Cloud Infrastructure Tag value
        """
        pulumi.set(__self__, "admin_role", admin_role)
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "app_name", app_name)
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "legacy_group_name", legacy_group_name)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="adminRole")
    def admin_role(self) -> bool:
        """
        If true, then the role provides administrative access privileges. READ-ONLY.
        """
        return pulumi.get(self, "admin_role")

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> str:
        """
        App identifier
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="appName")
    def app_name(self) -> str:
        """
        Name of parent App. READ-ONLY.
        """
        return pulumi.get(self, "app_name")

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        The displayName of the User or App who modified this Resource
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter(name="legacyGroupName")
    def legacy_group_name(self) -> str:
        """
        The name of the legacy group associated with this AppRole.
        """
        return pulumi.get(self, "legacy_group_name")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI of the SCIM resource that represents the User or App who modified this Resource
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Oracle Cloud Infrastructure Tag value
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsDynamicResourceGroupGrantResult(dict):
    def __init__(__self__, *,
                 app_id: str,
                 grant_mechanism: str,
                 ref: str,
                 value: str):
        """
        :param str app_id: App identifier
        :param str grant_mechanism: Each value of grantMechanism indicates how (or by what component) some App (or App-Entitlement) was granted.\\nA customer or the UI should use only grantMechanism values that start with 'ADMINISTRATOR':\\n - 'ADMINISTRATOR_TO_USER' is for a direct grant to a specific User.\\n - 'ADMINISTRATOR_TO_GROUP' is for a grant to a specific Group, which results in indirect grants to Users who are members of that Group.\\n - 'ADMINISTRATOR_TO_APP' is for a grant to a specific App.  The grantee (client) App gains access to the granted (server) App.
        :param str ref: The URI of the SCIM resource that represents the User or App who modified this Resource
        :param str value: Oracle Cloud Infrastructure Tag value
        """
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "grant_mechanism", grant_mechanism)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> str:
        """
        App identifier
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="grantMechanism")
    def grant_mechanism(self) -> str:
        """
        Each value of grantMechanism indicates how (or by what component) some App (or App-Entitlement) was granted.\\nA customer or the UI should use only grantMechanism values that start with 'ADMINISTRATOR':\\n - 'ADMINISTRATOR_TO_USER' is for a direct grant to a specific User.\\n - 'ADMINISTRATOR_TO_GROUP' is for a grant to a specific Group, which results in indirect grants to Users who are members of that Group.\\n - 'ADMINISTRATOR_TO_APP' is for a grant to a specific App.  The grantee (client) App gains access to the granted (server) App.
        """
        return pulumi.get(self, "grant_mechanism")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI of the SCIM resource that represents the User or App who modified this Resource
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Oracle Cloud Infrastructure Tag value
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsDynamicResourceGroupIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: The displayName of the User or App who modified this Resource
        :param str ocid: Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        :param str ref: The URI of the SCIM resource that represents the User or App who modified this Resource
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: Oracle Cloud Infrastructure Tag value
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        The displayName of the User or App who modified this Resource
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI of the SCIM resource that represents the User or App who modified this Resource
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Oracle Cloud Infrastructure Tag value
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsDynamicResourceGroupIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: The displayName of the User or App who modified this Resource
        :param str ocid: Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        :param str ref: The URI of the SCIM resource that represents the User or App who modified this Resource
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: Oracle Cloud Infrastructure Tag value
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        The displayName of the User or App who modified this Resource
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI of the SCIM resource that represents the User or App who modified this Resource
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Oracle Cloud Infrastructure Tag value
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsDynamicResourceGroupMetaResult(dict):
    def __init__(__self__, *,
                 created: str,
                 last_modified: str,
                 location: str,
                 resource_type: str,
                 version: str):
        """
        :param str created: The DateTime the Resource was added to the Service Provider
        :param str last_modified: The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        :param str location: The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        :param str resource_type: Name of the resource type of the resource--for example, Users or Groups
        :param str version: The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "last_modified", last_modified)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        The DateTime the Resource was added to the Service Provider
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> str:
        """
        The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Name of the resource type of the resource--for example, Users or Groups
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsDynamicResourceGroupTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Oracle Cloud Infrastructure Tag key
        :param str value: Oracle Cloud Infrastructure Tag value
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Oracle Cloud Infrastructure Tag key
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Oracle Cloud Infrastructure Tag value
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagResult(dict):
    def __init__(__self__, *,
                 defined_tags: Sequence['outputs.GetDomainsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTagResult'],
                 freeform_tags: Sequence['outputs.GetDomainsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTagResult'],
                 tag_slug: str):
        """
        :param Sequence['GetDomainsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTagArgs'] defined_tags: Oracle Cloud Infrastructure Defined Tags
        :param Sequence['GetDomainsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTagArgs'] freeform_tags: Oracle Cloud Infrastructure Freeform Tags
        :param str tag_slug: Oracle Cloud Infrastructure Tag slug
        """
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "tag_slug", tag_slug)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Sequence['outputs.GetDomainsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTagResult']:
        """
        Oracle Cloud Infrastructure Defined Tags
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Sequence['outputs.GetDomainsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTagResult']:
        """
        Oracle Cloud Infrastructure Freeform Tags
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="tagSlug")
    def tag_slug(self) -> str:
        """
        Oracle Cloud Infrastructure Tag slug
        """
        return pulumi.get(self, "tag_slug")


@pulumi.output_type
class GetDomainsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 namespace: str,
                 value: str):
        """
        :param str key: Oracle Cloud Infrastructure Tag key
        :param str namespace: Oracle Cloud Infrastructure Tag namespace
        :param str value: Oracle Cloud Infrastructure Tag value
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Oracle Cloud Infrastructure Tag key
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        Oracle Cloud Infrastructure Tag namespace
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Oracle Cloud Infrastructure Tag value
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Oracle Cloud Infrastructure Tag key
        :param str value: Oracle Cloud Infrastructure Tag value
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Oracle Cloud Infrastructure Tag key
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Oracle Cloud Infrastructure Tag value
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsDynamicResourceGroupsDynamicResourceGroupResult(dict):
    def __init__(__self__, *,
                 attribute_sets: Sequence[str],
                 attributes: str,
                 authorization: str,
                 compartment_ocid: str,
                 delete_in_progress: bool,
                 description: str,
                 display_name: str,
                 domain_ocid: str,
                 dynamic_group_app_roles: Sequence['outputs.GetDomainsDynamicResourceGroupsDynamicResourceGroupDynamicGroupAppRoleResult'],
                 grants: Sequence['outputs.GetDomainsDynamicResourceGroupsDynamicResourceGroupGrantResult'],
                 id: str,
                 idcs_created_bies: Sequence['outputs.GetDomainsDynamicResourceGroupsDynamicResourceGroupIdcsCreatedByResult'],
                 idcs_endpoint: str,
                 idcs_last_modified_bies: Sequence['outputs.GetDomainsDynamicResourceGroupsDynamicResourceGroupIdcsLastModifiedByResult'],
                 idcs_last_upgraded_in_release: str,
                 idcs_prevented_operations: Sequence[str],
                 matching_rule: str,
                 metas: Sequence['outputs.GetDomainsDynamicResourceGroupsDynamicResourceGroupMetaResult'],
                 ocid: str,
                 resource_type_schema_version: str,
                 schemas: Sequence[str],
                 tags: Sequence['outputs.GetDomainsDynamicResourceGroupsDynamicResourceGroupTagResult'],
                 tenancy_ocid: str,
                 urnietfparamsscimschemasoracleidcsextension_oci_tags: Sequence['outputs.GetDomainsDynamicResourceGroupsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagResult']):
        """
        :param Sequence[str] attribute_sets: A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
        :param str attributes: A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
        :param str authorization: The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
        :param str compartment_ocid: Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
        :param bool delete_in_progress: A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
        :param str description: text that explains the purpose of this Dynamic Resource Group
        :param str display_name: User-friendly, mutable identifier
        :param str domain_ocid: Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
        :param Sequence['GetDomainsDynamicResourceGroupsDynamicResourceGroupDynamicGroupAppRoleArgs'] dynamic_group_app_roles: A list of appRoles that are currently granted to this Dynamic Resource Group.  The Identity service will assert these AppRoles for any resource that satisfies the matching-rule of this DynamicResourceGroup.
        :param Sequence['GetDomainsDynamicResourceGroupsDynamicResourceGroupGrantArgs'] grants: Grants assigned to group
        :param str id: Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider's entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
        :param Sequence['GetDomainsDynamicResourceGroupsDynamicResourceGroupIdcsCreatedByArgs'] idcs_created_bies: The User or App who created the Resource
        :param str idcs_endpoint: The basic endpoint for the identity domain
        :param Sequence['GetDomainsDynamicResourceGroupsDynamicResourceGroupIdcsLastModifiedByArgs'] idcs_last_modified_bies: The User or App who modified the Resource
        :param str idcs_last_upgraded_in_release: The release number when the resource was upgraded.
        :param Sequence[str] idcs_prevented_operations: Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
        :param str matching_rule: Store as a string the matching-rule for this Dynamic Resource Group. This may match any number of Apps in this Domain, as well as matching any number of Oracle Cloud Infrastructure resources that are not in any Domain but that are in the Oracle Cloud Infrastructure Compartment that contains this Domain.
        :param Sequence['GetDomainsDynamicResourceGroupsDynamicResourceGroupMetaArgs'] metas: A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
        :param str ocid: Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        :param str resource_type_schema_version: An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
        :param Sequence[str] schemas: REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \\"enterprise\\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
        :param Sequence['GetDomainsDynamicResourceGroupsDynamicResourceGroupTagArgs'] tags: A list of tags on this resource.
        :param str tenancy_ocid: Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
        :param Sequence['GetDomainsDynamicResourceGroupsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagArgs'] urnietfparamsscimschemasoracleidcsextension_oci_tags: Oracle Cloud Infrastructure Tags.
        """
        pulumi.set(__self__, "attribute_sets", attribute_sets)
        pulumi.set(__self__, "attributes", attributes)
        pulumi.set(__self__, "authorization", authorization)
        pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "domain_ocid", domain_ocid)
        pulumi.set(__self__, "dynamic_group_app_roles", dynamic_group_app_roles)
        pulumi.set(__self__, "grants", grants)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        pulumi.set(__self__, "idcs_endpoint", idcs_endpoint)
        pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        pulumi.set(__self__, "matching_rule", matching_rule)
        pulumi.set(__self__, "metas", metas)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "resource_type_schema_version", resource_type_schema_version)
        pulumi.set(__self__, "schemas", schemas)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)
        pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextension_oci_tags", urnietfparamsscimschemasoracleidcsextension_oci_tags)

    @property
    @pulumi.getter(name="attributeSets")
    def attribute_sets(self) -> Sequence[str]:
        """
        A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
        """
        return pulumi.get(self, "attribute_sets")

    @property
    @pulumi.getter
    def attributes(self) -> str:
        """
        A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
        """
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter
    def authorization(self) -> str:
        """
        The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
        """
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> bool:
        """
        A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
        """
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        text that explains the purpose of this Dynamic Resource Group
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        User-friendly, mutable identifier
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter(name="dynamicGroupAppRoles")
    def dynamic_group_app_roles(self) -> Sequence['outputs.GetDomainsDynamicResourceGroupsDynamicResourceGroupDynamicGroupAppRoleResult']:
        """
        A list of appRoles that are currently granted to this Dynamic Resource Group.  The Identity service will assert these AppRoles for any resource that satisfies the matching-rule of this DynamicResourceGroup.
        """
        return pulumi.get(self, "dynamic_group_app_roles")

    @property
    @pulumi.getter
    def grants(self) -> Sequence['outputs.GetDomainsDynamicResourceGroupsDynamicResourceGroupGrantResult']:
        """
        Grants assigned to group
        """
        return pulumi.get(self, "grants")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider's entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Sequence['outputs.GetDomainsDynamicResourceGroupsDynamicResourceGroupIdcsCreatedByResult']:
        """
        The User or App who created the Resource
        """
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> str:
        """
        The basic endpoint for the identity domain
        """
        return pulumi.get(self, "idcs_endpoint")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Sequence['outputs.GetDomainsDynamicResourceGroupsDynamicResourceGroupIdcsLastModifiedByResult']:
        """
        The User or App who modified the Resource
        """
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> str:
        """
        The release number when the resource was upgraded.
        """
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Sequence[str]:
        """
        Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
        """
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter(name="matchingRule")
    def matching_rule(self) -> str:
        """
        Store as a string the matching-rule for this Dynamic Resource Group. This may match any number of Apps in this Domain, as well as matching any number of Oracle Cloud Infrastructure resources that are not in any Domain but that are in the Oracle Cloud Infrastructure Compartment that contains this Domain.
        """
        return pulumi.get(self, "matching_rule")

    @property
    @pulumi.getter
    def metas(self) -> Sequence['outputs.GetDomainsDynamicResourceGroupsDynamicResourceGroupMetaResult']:
        """
        A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
        """
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> str:
        """
        An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
        """
        return pulumi.get(self, "resource_type_schema_version")

    @property
    @pulumi.getter
    def schemas(self) -> Sequence[str]:
        """
        REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \\"enterprise\\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
        """
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetDomainsDynamicResourceGroupsDynamicResourceGroupTagResult']:
        """
        A list of tags on this resource.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "tenancy_ocid")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionOciTags")
    def urnietfparamsscimschemasoracleidcsextension_oci_tags(self) -> Sequence['outputs.GetDomainsDynamicResourceGroupsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagResult']:
        """
        Oracle Cloud Infrastructure Tags.
        """
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextension_oci_tags")


@pulumi.output_type
class GetDomainsDynamicResourceGroupsDynamicResourceGroupDynamicGroupAppRoleResult(dict):
    def __init__(__self__, *,
                 admin_role: bool,
                 app_id: str,
                 app_name: str,
                 display: str,
                 legacy_group_name: str,
                 ref: str,
                 value: str):
        """
        :param bool admin_role: If true, then the role provides administrative access privileges. READ-ONLY.
        :param str app_id: App identifier
        :param str app_name: Name of parent App. READ-ONLY.
        :param str display: The displayName of the User or App who modified this Resource
        :param str legacy_group_name: The name of the legacy group associated with this AppRole.
        :param str ref: The URI of the SCIM resource that represents the User or App who modified this Resource
        :param str value: Oracle Cloud Infrastructure Tag value
        """
        pulumi.set(__self__, "admin_role", admin_role)
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "app_name", app_name)
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "legacy_group_name", legacy_group_name)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="adminRole")
    def admin_role(self) -> bool:
        """
        If true, then the role provides administrative access privileges. READ-ONLY.
        """
        return pulumi.get(self, "admin_role")

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> str:
        """
        App identifier
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="appName")
    def app_name(self) -> str:
        """
        Name of parent App. READ-ONLY.
        """
        return pulumi.get(self, "app_name")

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        The displayName of the User or App who modified this Resource
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter(name="legacyGroupName")
    def legacy_group_name(self) -> str:
        """
        The name of the legacy group associated with this AppRole.
        """
        return pulumi.get(self, "legacy_group_name")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI of the SCIM resource that represents the User or App who modified this Resource
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Oracle Cloud Infrastructure Tag value
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsDynamicResourceGroupsDynamicResourceGroupGrantResult(dict):
    def __init__(__self__, *,
                 app_id: str,
                 grant_mechanism: str,
                 ref: str,
                 value: str):
        """
        :param str app_id: App identifier
        :param str grant_mechanism: Each value of grantMechanism indicates how (or by what component) some App (or App-Entitlement) was granted.\\nA customer or the UI should use only grantMechanism values that start with 'ADMINISTRATOR':\\n - 'ADMINISTRATOR_TO_USER' is for a direct grant to a specific User.\\n - 'ADMINISTRATOR_TO_GROUP' is for a grant to a specific Group, which results in indirect grants to Users who are members of that Group.\\n - 'ADMINISTRATOR_TO_APP' is for a grant to a specific App.  The grantee (client) App gains access to the granted (server) App.
        :param str ref: The URI of the SCIM resource that represents the User or App who modified this Resource
        :param str value: Oracle Cloud Infrastructure Tag value
        """
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "grant_mechanism", grant_mechanism)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> str:
        """
        App identifier
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="grantMechanism")
    def grant_mechanism(self) -> str:
        """
        Each value of grantMechanism indicates how (or by what component) some App (or App-Entitlement) was granted.\\nA customer or the UI should use only grantMechanism values that start with 'ADMINISTRATOR':\\n - 'ADMINISTRATOR_TO_USER' is for a direct grant to a specific User.\\n - 'ADMINISTRATOR_TO_GROUP' is for a grant to a specific Group, which results in indirect grants to Users who are members of that Group.\\n - 'ADMINISTRATOR_TO_APP' is for a grant to a specific App.  The grantee (client) App gains access to the granted (server) App.
        """
        return pulumi.get(self, "grant_mechanism")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI of the SCIM resource that represents the User or App who modified this Resource
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Oracle Cloud Infrastructure Tag value
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsDynamicResourceGroupsDynamicResourceGroupIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: The displayName of the User or App who modified this Resource
        :param str ocid: Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        :param str ref: The URI of the SCIM resource that represents the User or App who modified this Resource
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: Oracle Cloud Infrastructure Tag value
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        The displayName of the User or App who modified this Resource
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI of the SCIM resource that represents the User or App who modified this Resource
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Oracle Cloud Infrastructure Tag value
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsDynamicResourceGroupsDynamicResourceGroupIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: The displayName of the User or App who modified this Resource
        :param str ocid: Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        :param str ref: The URI of the SCIM resource that represents the User or App who modified this Resource
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: Oracle Cloud Infrastructure Tag value
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        The displayName of the User or App who modified this Resource
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI of the SCIM resource that represents the User or App who modified this Resource
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Oracle Cloud Infrastructure Tag value
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsDynamicResourceGroupsDynamicResourceGroupMetaResult(dict):
    def __init__(__self__, *,
                 created: str,
                 last_modified: str,
                 location: str,
                 resource_type: str,
                 version: str):
        """
        :param str created: The DateTime the Resource was added to the Service Provider
        :param str last_modified: The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        :param str location: The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        :param str resource_type: Name of the resource type of the resource--for example, Users or Groups
        :param str version: The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "last_modified", last_modified)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        The DateTime the Resource was added to the Service Provider
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> str:
        """
        The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Name of the resource type of the resource--for example, Users or Groups
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsDynamicResourceGroupsDynamicResourceGroupTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Oracle Cloud Infrastructure Tag key
        :param str value: Oracle Cloud Infrastructure Tag value
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Oracle Cloud Infrastructure Tag key
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Oracle Cloud Infrastructure Tag value
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsDynamicResourceGroupsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagResult(dict):
    def __init__(__self__, *,
                 defined_tags: Sequence['outputs.GetDomainsDynamicResourceGroupsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTagResult'],
                 freeform_tags: Sequence['outputs.GetDomainsDynamicResourceGroupsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTagResult'],
                 tag_slug: str):
        """
        :param Sequence['GetDomainsDynamicResourceGroupsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTagArgs'] defined_tags: Oracle Cloud Infrastructure Defined Tags
        :param Sequence['GetDomainsDynamicResourceGroupsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTagArgs'] freeform_tags: Oracle Cloud Infrastructure Freeform Tags
        :param str tag_slug: Oracle Cloud Infrastructure Tag slug
        """
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "tag_slug", tag_slug)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Sequence['outputs.GetDomainsDynamicResourceGroupsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTagResult']:
        """
        Oracle Cloud Infrastructure Defined Tags
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Sequence['outputs.GetDomainsDynamicResourceGroupsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTagResult']:
        """
        Oracle Cloud Infrastructure Freeform Tags
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="tagSlug")
    def tag_slug(self) -> str:
        """
        Oracle Cloud Infrastructure Tag slug
        """
        return pulumi.get(self, "tag_slug")


@pulumi.output_type
class GetDomainsDynamicResourceGroupsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 namespace: str,
                 value: str):
        """
        :param str key: Oracle Cloud Infrastructure Tag key
        :param str namespace: Oracle Cloud Infrastructure Tag namespace
        :param str value: Oracle Cloud Infrastructure Tag value
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Oracle Cloud Infrastructure Tag key
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        Oracle Cloud Infrastructure Tag namespace
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Oracle Cloud Infrastructure Tag value
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsDynamicResourceGroupsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Oracle Cloud Infrastructure Tag key
        :param str value: Oracle Cloud Infrastructure Tag value
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Oracle Cloud Infrastructure Tag key
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Oracle Cloud Infrastructure Tag value
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: A filter to only return resources that match the given name exactly.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to only return resources that match the given name exactly.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDomainsGroupIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: App Display Name
        :param str ocid: Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        :param str ref: App URI
        :param str type: The type of the entity that created this Group.
        :param str value: The ID of the App.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        App Display Name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        App URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the entity that created this Group.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The ID of the App.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsGroupIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: App Display Name
        :param str ocid: Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        :param str ref: App URI
        :param str type: The type of the entity that created this Group.
        :param str value: The ID of the App.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        App Display Name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        App URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the entity that created this Group.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The ID of the App.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsGroupMemberResult(dict):
    def __init__(__self__, *,
                 date_added: str,
                 display: str,
                 membership_ocid: str,
                 name: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str date_added: The DateTime the member was added to the Group.
        :param str display: App Display Name
        :param str membership_ocid: Membership Ocid
        :param str name: PasswordPolicy Name
        :param str ocid: Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        :param str ref: App URI
        :param str type: The type of the entity that created this Group.
        :param str value: The ID of the App.
        """
        pulumi.set(__self__, "date_added", date_added)
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "membership_ocid", membership_ocid)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="dateAdded")
    def date_added(self) -> str:
        """
        The DateTime the member was added to the Group.
        """
        return pulumi.get(self, "date_added")

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        App Display Name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter(name="membershipOcid")
    def membership_ocid(self) -> str:
        """
        Membership Ocid
        """
        return pulumi.get(self, "membership_ocid")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        PasswordPolicy Name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        App URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the entity that created this Group.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The ID of the App.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsGroupMetaResult(dict):
    def __init__(__self__, *,
                 created: str,
                 last_modified: str,
                 location: str,
                 resource_type: str,
                 version: str):
        """
        :param str created: The DateTime the Resource was added to the Service Provider
        :param str last_modified: The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        :param str location: The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        :param str resource_type: Name of the resource type of the resource--for example, Users or Groups
        :param str version: The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "last_modified", last_modified)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        The DateTime the Resource was added to the Service Provider
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> str:
        """
        The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Name of the resource type of the resource--for example, Users or Groups
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsGroupTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Oracle Cloud Infrastructure Tag key
        :param str value: The ID of the App.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Oracle Cloud Infrastructure Tag key
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The ID of the App.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagResult(dict):
    def __init__(__self__, *,
                 defined_tags: Sequence['outputs.GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTagResult'],
                 freeform_tags: Sequence['outputs.GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTagResult'],
                 tag_slug: str):
        """
        :param Sequence['GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTagArgs'] defined_tags: Oracle Cloud Infrastructure Defined Tags
        :param Sequence['GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTagArgs'] freeform_tags: Oracle Cloud Infrastructure Freeform Tags
        :param str tag_slug: Oracle Cloud Infrastructure Tag slug
        """
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "tag_slug", tag_slug)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Sequence['outputs.GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTagResult']:
        """
        Oracle Cloud Infrastructure Defined Tags
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Sequence['outputs.GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTagResult']:
        """
        Oracle Cloud Infrastructure Freeform Tags
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="tagSlug")
    def tag_slug(self) -> str:
        """
        Oracle Cloud Infrastructure Tag slug
        """
        return pulumi.get(self, "tag_slug")


@pulumi.output_type
class GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 namespace: str,
                 value: str):
        """
        :param str key: Oracle Cloud Infrastructure Tag key
        :param str namespace: Oracle Cloud Infrastructure Tag namespace
        :param str value: The ID of the App.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Oracle Cloud Infrastructure Tag key
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        Oracle Cloud Infrastructure Tag namespace
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The ID of the App.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Oracle Cloud Infrastructure Tag key
        :param str value: The ID of the App.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Oracle Cloud Infrastructure Tag key
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The ID of the App.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupResult(dict):
    def __init__(__self__, *,
                 domain_level_schema: str,
                 domain_level_schema_names: Sequence['outputs.GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupDomainLevelSchemaNameResult'],
                 instance_level_schema: str,
                 instance_level_schema_names: Sequence['outputs.GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupInstanceLevelSchemaNameResult']):
        """
        :param str domain_level_schema: DBCS Domain-level schema-name.  This attribute refers implicitly to a value of 'domainLevelSchemaNames' for a particular DB Domain.
        :param Sequence['GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupDomainLevelSchemaNameArgs'] domain_level_schema_names: DBCS Domain-level schema-names. Each value is specific to a DB Domain.
        :param str instance_level_schema: DBCS instance-level schema-name. This attribute refers implicitly to a value of 'instanceLevelSchemaNames' for a particular DB Instance.
        :param Sequence['GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupInstanceLevelSchemaNameArgs'] instance_level_schema_names: DBCS instance-level schema-names. Each schema-name is specific to a DB Instance.
        """
        pulumi.set(__self__, "domain_level_schema", domain_level_schema)
        pulumi.set(__self__, "domain_level_schema_names", domain_level_schema_names)
        pulumi.set(__self__, "instance_level_schema", instance_level_schema)
        pulumi.set(__self__, "instance_level_schema_names", instance_level_schema_names)

    @property
    @pulumi.getter(name="domainLevelSchema")
    def domain_level_schema(self) -> str:
        """
        DBCS Domain-level schema-name.  This attribute refers implicitly to a value of 'domainLevelSchemaNames' for a particular DB Domain.
        """
        return pulumi.get(self, "domain_level_schema")

    @property
    @pulumi.getter(name="domainLevelSchemaNames")
    def domain_level_schema_names(self) -> Sequence['outputs.GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupDomainLevelSchemaNameResult']:
        """
        DBCS Domain-level schema-names. Each value is specific to a DB Domain.
        """
        return pulumi.get(self, "domain_level_schema_names")

    @property
    @pulumi.getter(name="instanceLevelSchema")
    def instance_level_schema(self) -> str:
        """
        DBCS instance-level schema-name. This attribute refers implicitly to a value of 'instanceLevelSchemaNames' for a particular DB Instance.
        """
        return pulumi.get(self, "instance_level_schema")

    @property
    @pulumi.getter(name="instanceLevelSchemaNames")
    def instance_level_schema_names(self) -> Sequence['outputs.GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupInstanceLevelSchemaNameResult']:
        """
        DBCS instance-level schema-names. Each schema-name is specific to a DB Instance.
        """
        return pulumi.get(self, "instance_level_schema_names")


@pulumi.output_type
class GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupDomainLevelSchemaNameResult(dict):
    def __init__(__self__, *,
                 domain_name: str,
                 schema_name: str):
        """
        :param str domain_name: DBCS Domain Name
        :param str schema_name: The DBCS schema-name granted to this Group for the DB instance that 'dbInstanceId' specifies.
        """
        pulumi.set(__self__, "domain_name", domain_name)
        pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> str:
        """
        DBCS Domain Name
        """
        return pulumi.get(self, "domain_name")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> str:
        """
        The DBCS schema-name granted to this Group for the DB instance that 'dbInstanceId' specifies.
        """
        return pulumi.get(self, "schema_name")


@pulumi.output_type
class GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupInstanceLevelSchemaNameResult(dict):
    def __init__(__self__, *,
                 db_instance_id: str,
                 schema_name: str):
        """
        :param str db_instance_id: App Id of DBCS App instance
        :param str schema_name: The DBCS schema-name granted to this Group for the DB instance that 'dbInstanceId' specifies.
        """
        pulumi.set(__self__, "db_instance_id", db_instance_id)
        pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter(name="dbInstanceId")
    def db_instance_id(self) -> str:
        """
        App Id of DBCS App instance
        """
        return pulumi.get(self, "db_instance_id")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> str:
        """
        The DBCS schema-name granted to this Group for the DB instance that 'dbInstanceId' specifies.
        """
        return pulumi.get(self, "schema_name")


@pulumi.output_type
class GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiondynamicGroupResult(dict):
    def __init__(__self__, *,
                 membership_rule: str,
                 membership_type: str):
        """
        :param str membership_rule: Membership rule
        :param str membership_type: Membership type
        """
        pulumi.set(__self__, "membership_rule", membership_rule)
        pulumi.set(__self__, "membership_type", membership_type)

    @property
    @pulumi.getter(name="membershipRule")
    def membership_rule(self) -> str:
        """
        Membership rule
        """
        return pulumi.get(self, "membership_rule")

    @property
    @pulumi.getter(name="membershipType")
    def membership_type(self) -> str:
        """
        Membership type
        """
        return pulumi.get(self, "membership_type")


@pulumi.output_type
class GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupResult(dict):
    def __init__(__self__, *,
                 app_roles: Sequence['outputs.GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupAppRoleResult'],
                 creation_mechanism: str,
                 description: str,
                 grants: Sequence['outputs.GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupGrantResult'],
                 owners: Sequence['outputs.GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupOwnerResult'],
                 password_policies: Sequence['outputs.GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupPasswordPolicyResult'],
                 synced_from_apps: Sequence['outputs.GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupSyncedFromAppResult']):
        """
        :param Sequence['GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupAppRoleArgs'] app_roles: A list of appRoles that the user belongs to, either thorough direct membership, nested groups, or dynamically calculated
        :param str creation_mechanism: Source from which this group got created.
        :param str description: Group description
        :param Sequence['GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupGrantArgs'] grants: Grants assigned to group
        :param Sequence['GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupOwnerArgs'] owners: Group owners
        :param Sequence['GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupPasswordPolicyArgs'] password_policies: Password Policy associated with this Group.
        :param Sequence['GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupSyncedFromAppArgs'] synced_from_apps: The entity that created this Group.
        """
        pulumi.set(__self__, "app_roles", app_roles)
        pulumi.set(__self__, "creation_mechanism", creation_mechanism)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "grants", grants)
        pulumi.set(__self__, "owners", owners)
        pulumi.set(__self__, "password_policies", password_policies)
        pulumi.set(__self__, "synced_from_apps", synced_from_apps)

    @property
    @pulumi.getter(name="appRoles")
    def app_roles(self) -> Sequence['outputs.GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupAppRoleResult']:
        """
        A list of appRoles that the user belongs to, either thorough direct membership, nested groups, or dynamically calculated
        """
        return pulumi.get(self, "app_roles")

    @property
    @pulumi.getter(name="creationMechanism")
    def creation_mechanism(self) -> str:
        """
        Source from which this group got created.
        """
        return pulumi.get(self, "creation_mechanism")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Group description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def grants(self) -> Sequence['outputs.GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupGrantResult']:
        """
        Grants assigned to group
        """
        return pulumi.get(self, "grants")

    @property
    @pulumi.getter
    def owners(self) -> Sequence['outputs.GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupOwnerResult']:
        """
        Group owners
        """
        return pulumi.get(self, "owners")

    @property
    @pulumi.getter(name="passwordPolicies")
    def password_policies(self) -> Sequence['outputs.GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupPasswordPolicyResult']:
        """
        Password Policy associated with this Group.
        """
        return pulumi.get(self, "password_policies")

    @property
    @pulumi.getter(name="syncedFromApps")
    def synced_from_apps(self) -> Sequence['outputs.GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupSyncedFromAppResult']:
        """
        The entity that created this Group.
        """
        return pulumi.get(self, "synced_from_apps")


@pulumi.output_type
class GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupAppRoleResult(dict):
    def __init__(__self__, *,
                 admin_role: bool,
                 app_id: str,
                 app_name: str,
                 display: str,
                 legacy_group_name: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param bool admin_role: If true, then the role provides administrative access privileges. READ-ONLY.
        :param str app_id: App identifier
        :param str app_name: Name of parent App. READ-ONLY.
        :param str display: App Display Name
        :param str legacy_group_name: The name of the legacy group associated with this AppRole.
        :param str ref: App URI
        :param str type: The type of the entity that created this Group.
        :param str value: The ID of the App.
        """
        pulumi.set(__self__, "admin_role", admin_role)
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "app_name", app_name)
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "legacy_group_name", legacy_group_name)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="adminRole")
    def admin_role(self) -> bool:
        """
        If true, then the role provides administrative access privileges. READ-ONLY.
        """
        return pulumi.get(self, "admin_role")

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> str:
        """
        App identifier
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="appName")
    def app_name(self) -> str:
        """
        Name of parent App. READ-ONLY.
        """
        return pulumi.get(self, "app_name")

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        App Display Name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter(name="legacyGroupName")
    def legacy_group_name(self) -> str:
        """
        The name of the legacy group associated with this AppRole.
        """
        return pulumi.get(self, "legacy_group_name")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        App URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the entity that created this Group.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The ID of the App.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupGrantResult(dict):
    def __init__(__self__, *,
                 app_id: str,
                 grant_mechanism: str,
                 ref: str,
                 value: str):
        """
        :param str app_id: App identifier
        :param str grant_mechanism: Each value of grantMechanism indicates how (or by what component) some App (or App-Entitlement) was granted.\\nA customer or the UI should use only grantMechanism values that start with 'ADMINISTRATOR':\\n - 'ADMINISTRATOR_TO_USER' is for a direct grant to a specific User.\\n - 'ADMINISTRATOR_TO_GROUP' is for a grant to a specific Group, which results in indirect grants to Users who are members of that Group.\\n - 'ADMINISTRATOR_TO_APP' is for a grant to a specific App.  The grantee (client) App gains access to the granted (server) App.
        :param str ref: App URI
        :param str value: The ID of the App.
        """
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "grant_mechanism", grant_mechanism)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> str:
        """
        App identifier
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="grantMechanism")
    def grant_mechanism(self) -> str:
        """
        Each value of grantMechanism indicates how (or by what component) some App (or App-Entitlement) was granted.\\nA customer or the UI should use only grantMechanism values that start with 'ADMINISTRATOR':\\n - 'ADMINISTRATOR_TO_USER' is for a direct grant to a specific User.\\n - 'ADMINISTRATOR_TO_GROUP' is for a grant to a specific Group, which results in indirect grants to Users who are members of that Group.\\n - 'ADMINISTRATOR_TO_APP' is for a grant to a specific App.  The grantee (client) App gains access to the granted (server) App.
        """
        return pulumi.get(self, "grant_mechanism")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        App URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The ID of the App.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupOwnerResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: App Display Name
        :param str ref: App URI
        :param str type: The type of the entity that created this Group.
        :param str value: The ID of the App.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        App Display Name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        App URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the entity that created this Group.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The ID of the App.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupPasswordPolicyResult(dict):
    def __init__(__self__, *,
                 name: str,
                 priority: int,
                 ref: str,
                 value: str):
        """
        :param str name: PasswordPolicy Name
        :param int priority: PasswordPolicy priority
        :param str ref: App URI
        :param str value: The ID of the App.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        PasswordPolicy Name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        PasswordPolicy priority
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        App URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The ID of the App.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupSyncedFromAppResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: App Display Name
        :param str ref: App URI
        :param str type: The type of the entity that created this Group.
        :param str value: The ID of the App.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        App Display Name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        App URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the entity that created this Group.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The ID of the App.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensionposixGroupResult(dict):
    def __init__(__self__, *,
                 gid_number: int):
        """
        :param int gid_number: Integer uniquely identifying a group in a POSIX administrative domain
        """
        pulumi.set(__self__, "gid_number", gid_number)

    @property
    @pulumi.getter(name="gidNumber")
    def gid_number(self) -> int:
        """
        Integer uniquely identifying a group in a POSIX administrative domain
        """
        return pulumi.get(self, "gid_number")


@pulumi.output_type
class GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensionrequestableGroupResult(dict):
    def __init__(__self__, *,
                 requestable: bool):
        """
        :param bool requestable: Flag controlling whether group membership can be request by user through self service console.
        """
        pulumi.set(__self__, "requestable", requestable)

    @property
    @pulumi.getter
    def requestable(self) -> bool:
        """
        Flag controlling whether group membership can be request by user through self service console.
        """
        return pulumi.get(self, "requestable")


@pulumi.output_type
class GetDomainsGroupsGroupResult(dict):
    def __init__(__self__, *,
                 attribute_sets: Sequence[str],
                 attributes: str,
                 authorization: str,
                 compartment_ocid: str,
                 delete_in_progress: bool,
                 display_name: str,
                 domain_ocid: str,
                 external_id: str,
                 id: str,
                 idcs_created_bies: Sequence['outputs.GetDomainsGroupsGroupIdcsCreatedByResult'],
                 idcs_endpoint: str,
                 idcs_last_modified_bies: Sequence['outputs.GetDomainsGroupsGroupIdcsLastModifiedByResult'],
                 idcs_last_upgraded_in_release: str,
                 idcs_prevented_operations: Sequence[str],
                 members: Sequence['outputs.GetDomainsGroupsGroupMemberResult'],
                 metas: Sequence['outputs.GetDomainsGroupsGroupMetaResult'],
                 non_unique_display_name: str,
                 ocid: str,
                 resource_type_schema_version: str,
                 schemas: Sequence[str],
                 tags: Sequence['outputs.GetDomainsGroupsGroupTagResult'],
                 tenancy_ocid: str,
                 urnietfparamsscimschemasoracleidcsextension_oci_tags: Sequence['outputs.GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagResult'],
                 urnietfparamsscimschemasoracleidcsextensiondbcs_groups: Sequence['outputs.GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupResult'],
                 urnietfparamsscimschemasoracleidcsextensiondynamic_groups: Sequence['outputs.GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiondynamicGroupResult'],
                 urnietfparamsscimschemasoracleidcsextensiongroup_groups: Sequence['outputs.GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupResult'],
                 urnietfparamsscimschemasoracleidcsextensionposix_groups: Sequence['outputs.GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensionposixGroupResult'],
                 urnietfparamsscimschemasoracleidcsextensionrequestable_groups: Sequence['outputs.GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensionrequestableGroupResult']):
        """
        :param Sequence[str] attribute_sets: A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
        :param str attributes: A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
        :param str authorization: The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
        :param str compartment_ocid: Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
        :param bool delete_in_progress: A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
        :param str display_name: Group display name
        :param str domain_ocid: Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
        :param str external_id: An identifier for the Resource as defined by the Service Consumer. The externalId may simplify identification of the Resource between Service Consumer and Service Provider by allowing the Consumer to refer to the Resource with its own identifier, obviating the need to store a local mapping between the local identifier of the Resource and the identifier used by the Service Provider. Each Resource MAY include a non-empty externalId value. The value of the externalId attribute is always issued by the Service Consumer and can never be specified by the Service Provider. The Service Provider MUST always interpret the externalId as scoped to the Service Consumer's tenant.
        :param str id: Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider's entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
        :param Sequence['GetDomainsGroupsGroupIdcsCreatedByArgs'] idcs_created_bies: The User or App who created the Resource
        :param str idcs_endpoint: The basic endpoint for the identity domain
        :param Sequence['GetDomainsGroupsGroupIdcsLastModifiedByArgs'] idcs_last_modified_bies: The User or App who modified the Resource
        :param str idcs_last_upgraded_in_release: The release number when the resource was upgraded.
        :param Sequence[str] idcs_prevented_operations: Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
        :param Sequence['GetDomainsGroupsGroupMemberArgs'] members: Group members - when requesting members attribute, a max of 10,000 members will be returned in a single request. It is recommended to use startIndex and count to return members in pages instead of in a single response, eg : #attributes=members[startIndex=1%26count=10]
        :param Sequence['GetDomainsGroupsGroupMetaArgs'] metas: A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
        :param str non_unique_display_name: A human readable name for Group as defined by the Service Consumer
        :param str ocid: Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        :param str resource_type_schema_version: An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
        :param Sequence[str] schemas: REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \\"enterprise\\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
        :param Sequence['GetDomainsGroupsGroupTagArgs'] tags: A list of tags on this resource.
        :param str tenancy_ocid: Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
        :param Sequence['GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagArgs'] urnietfparamsscimschemasoracleidcsextension_oci_tags: Oracle Cloud Infrastructure Tags.
        :param Sequence['GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupArgs'] urnietfparamsscimschemasoracleidcsextensiondbcs_groups: Schema for Database Service  Resource
        :param Sequence['GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiondynamicGroupArgs'] urnietfparamsscimschemasoracleidcsextensiondynamic_groups: Dynamic Group
        :param Sequence['GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupArgs'] urnietfparamsscimschemasoracleidcsextensiongroup_groups: Idcs Group
        :param Sequence['GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensionposixGroupArgs'] urnietfparamsscimschemasoracleidcsextensionposix_groups: POSIX Group extension
        :param Sequence['GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensionrequestableGroupArgs'] urnietfparamsscimschemasoracleidcsextensionrequestable_groups: Requestable Group
        """
        pulumi.set(__self__, "attribute_sets", attribute_sets)
        pulumi.set(__self__, "attributes", attributes)
        pulumi.set(__self__, "authorization", authorization)
        pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "domain_ocid", domain_ocid)
        pulumi.set(__self__, "external_id", external_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        pulumi.set(__self__, "idcs_endpoint", idcs_endpoint)
        pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        pulumi.set(__self__, "members", members)
        pulumi.set(__self__, "metas", metas)
        pulumi.set(__self__, "non_unique_display_name", non_unique_display_name)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "resource_type_schema_version", resource_type_schema_version)
        pulumi.set(__self__, "schemas", schemas)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)
        pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextension_oci_tags", urnietfparamsscimschemasoracleidcsextension_oci_tags)
        pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensiondbcs_groups", urnietfparamsscimschemasoracleidcsextensiondbcs_groups)
        pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensiondynamic_groups", urnietfparamsscimschemasoracleidcsextensiondynamic_groups)
        pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensiongroup_groups", urnietfparamsscimschemasoracleidcsextensiongroup_groups)
        pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionposix_groups", urnietfparamsscimschemasoracleidcsextensionposix_groups)
        pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionrequestable_groups", urnietfparamsscimschemasoracleidcsextensionrequestable_groups)

    @property
    @pulumi.getter(name="attributeSets")
    def attribute_sets(self) -> Sequence[str]:
        """
        A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
        """
        return pulumi.get(self, "attribute_sets")

    @property
    @pulumi.getter
    def attributes(self) -> str:
        """
        A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
        """
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter
    def authorization(self) -> str:
        """
        The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
        """
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> bool:
        """
        A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
        """
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Group display name
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> str:
        """
        An identifier for the Resource as defined by the Service Consumer. The externalId may simplify identification of the Resource between Service Consumer and Service Provider by allowing the Consumer to refer to the Resource with its own identifier, obviating the need to store a local mapping between the local identifier of the Resource and the identifier used by the Service Provider. Each Resource MAY include a non-empty externalId value. The value of the externalId attribute is always issued by the Service Consumer and can never be specified by the Service Provider. The Service Provider MUST always interpret the externalId as scoped to the Service Consumer's tenant.
        """
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider's entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Sequence['outputs.GetDomainsGroupsGroupIdcsCreatedByResult']:
        """
        The User or App who created the Resource
        """
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> str:
        """
        The basic endpoint for the identity domain
        """
        return pulumi.get(self, "idcs_endpoint")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Sequence['outputs.GetDomainsGroupsGroupIdcsLastModifiedByResult']:
        """
        The User or App who modified the Resource
        """
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> str:
        """
        The release number when the resource was upgraded.
        """
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Sequence[str]:
        """
        Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
        """
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter
    def members(self) -> Sequence['outputs.GetDomainsGroupsGroupMemberResult']:
        """
        Group members - when requesting members attribute, a max of 10,000 members will be returned in a single request. It is recommended to use startIndex and count to return members in pages instead of in a single response, eg : #attributes=members[startIndex=1%26count=10]
        """
        return pulumi.get(self, "members")

    @property
    @pulumi.getter
    def metas(self) -> Sequence['outputs.GetDomainsGroupsGroupMetaResult']:
        """
        A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
        """
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter(name="nonUniqueDisplayName")
    def non_unique_display_name(self) -> str:
        """
        A human readable name for Group as defined by the Service Consumer
        """
        return pulumi.get(self, "non_unique_display_name")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> str:
        """
        An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
        """
        return pulumi.get(self, "resource_type_schema_version")

    @property
    @pulumi.getter
    def schemas(self) -> Sequence[str]:
        """
        REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \\"enterprise\\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
        """
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetDomainsGroupsGroupTagResult']:
        """
        A list of tags on this resource.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "tenancy_ocid")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionOciTags")
    def urnietfparamsscimschemasoracleidcsextension_oci_tags(self) -> Sequence['outputs.GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagResult']:
        """
        Oracle Cloud Infrastructure Tags.
        """
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextension_oci_tags")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensiondbcsGroups")
    def urnietfparamsscimschemasoracleidcsextensiondbcs_groups(self) -> Sequence['outputs.GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupResult']:
        """
        Schema for Database Service  Resource
        """
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensiondbcs_groups")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensiondynamicGroups")
    def urnietfparamsscimschemasoracleidcsextensiondynamic_groups(self) -> Sequence['outputs.GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiondynamicGroupResult']:
        """
        Dynamic Group
        """
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensiondynamic_groups")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensiongroupGroups")
    def urnietfparamsscimschemasoracleidcsextensiongroup_groups(self) -> Sequence['outputs.GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupResult']:
        """
        Idcs Group
        """
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensiongroup_groups")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionposixGroups")
    def urnietfparamsscimschemasoracleidcsextensionposix_groups(self) -> Sequence['outputs.GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensionposixGroupResult']:
        """
        POSIX Group extension
        """
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionposix_groups")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionrequestableGroups")
    def urnietfparamsscimschemasoracleidcsextensionrequestable_groups(self) -> Sequence['outputs.GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensionrequestableGroupResult']:
        """
        Requestable Group
        """
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionrequestable_groups")


@pulumi.output_type
class GetDomainsGroupsGroupIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: App Display Name
        :param str ocid: Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        :param str ref: App URI
        :param str type: The type of the entity that created this Group.
        :param str value: The ID of the App.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        App Display Name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        App URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the entity that created this Group.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The ID of the App.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsGroupsGroupIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: App Display Name
        :param str ocid: Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        :param str ref: App URI
        :param str type: The type of the entity that created this Group.
        :param str value: The ID of the App.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        App Display Name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        App URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the entity that created this Group.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The ID of the App.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsGroupsGroupMemberResult(dict):
    def __init__(__self__, *,
                 date_added: str,
                 display: str,
                 membership_ocid: str,
                 name: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str date_added: The DateTime the member was added to the Group.
        :param str display: App Display Name
        :param str membership_ocid: Membership Ocid
        :param str name: PasswordPolicy Name
        :param str ocid: Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        :param str ref: App URI
        :param str type: The type of the entity that created this Group.
        :param str value: The ID of the App.
        """
        pulumi.set(__self__, "date_added", date_added)
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "membership_ocid", membership_ocid)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="dateAdded")
    def date_added(self) -> str:
        """
        The DateTime the member was added to the Group.
        """
        return pulumi.get(self, "date_added")

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        App Display Name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter(name="membershipOcid")
    def membership_ocid(self) -> str:
        """
        Membership Ocid
        """
        return pulumi.get(self, "membership_ocid")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        PasswordPolicy Name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        App URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the entity that created this Group.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The ID of the App.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsGroupsGroupMetaResult(dict):
    def __init__(__self__, *,
                 created: str,
                 last_modified: str,
                 location: str,
                 resource_type: str,
                 version: str):
        """
        :param str created: The DateTime the Resource was added to the Service Provider
        :param str last_modified: The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        :param str location: The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        :param str resource_type: Name of the resource type of the resource--for example, Users or Groups
        :param str version: The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "last_modified", last_modified)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        The DateTime the Resource was added to the Service Provider
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> str:
        """
        The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Name of the resource type of the resource--for example, Users or Groups
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsGroupsGroupTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Oracle Cloud Infrastructure Tag key
        :param str value: The ID of the App.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Oracle Cloud Infrastructure Tag key
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The ID of the App.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagResult(dict):
    def __init__(__self__, *,
                 defined_tags: Sequence['outputs.GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTagResult'],
                 freeform_tags: Sequence['outputs.GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTagResult'],
                 tag_slug: str):
        """
        :param Sequence['GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTagArgs'] defined_tags: Oracle Cloud Infrastructure Defined Tags
        :param Sequence['GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTagArgs'] freeform_tags: Oracle Cloud Infrastructure Freeform Tags
        :param str tag_slug: Oracle Cloud Infrastructure Tag slug
        """
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "tag_slug", tag_slug)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Sequence['outputs.GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTagResult']:
        """
        Oracle Cloud Infrastructure Defined Tags
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Sequence['outputs.GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTagResult']:
        """
        Oracle Cloud Infrastructure Freeform Tags
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="tagSlug")
    def tag_slug(self) -> str:
        """
        Oracle Cloud Infrastructure Tag slug
        """
        return pulumi.get(self, "tag_slug")


@pulumi.output_type
class GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 namespace: str,
                 value: str):
        """
        :param str key: Oracle Cloud Infrastructure Tag key
        :param str namespace: Oracle Cloud Infrastructure Tag namespace
        :param str value: The ID of the App.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Oracle Cloud Infrastructure Tag key
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        Oracle Cloud Infrastructure Tag namespace
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The ID of the App.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Oracle Cloud Infrastructure Tag key
        :param str value: The ID of the App.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Oracle Cloud Infrastructure Tag key
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The ID of the App.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupResult(dict):
    def __init__(__self__, *,
                 domain_level_schema: str,
                 domain_level_schema_names: Sequence['outputs.GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupDomainLevelSchemaNameResult'],
                 instance_level_schema: str,
                 instance_level_schema_names: Sequence['outputs.GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupInstanceLevelSchemaNameResult']):
        """
        :param str domain_level_schema: DBCS Domain-level schema-name.  This attribute refers implicitly to a value of 'domainLevelSchemaNames' for a particular DB Domain.
        :param Sequence['GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupDomainLevelSchemaNameArgs'] domain_level_schema_names: DBCS Domain-level schema-names. Each value is specific to a DB Domain.
        :param str instance_level_schema: DBCS instance-level schema-name. This attribute refers implicitly to a value of 'instanceLevelSchemaNames' for a particular DB Instance.
        :param Sequence['GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupInstanceLevelSchemaNameArgs'] instance_level_schema_names: DBCS instance-level schema-names. Each schema-name is specific to a DB Instance.
        """
        pulumi.set(__self__, "domain_level_schema", domain_level_schema)
        pulumi.set(__self__, "domain_level_schema_names", domain_level_schema_names)
        pulumi.set(__self__, "instance_level_schema", instance_level_schema)
        pulumi.set(__self__, "instance_level_schema_names", instance_level_schema_names)

    @property
    @pulumi.getter(name="domainLevelSchema")
    def domain_level_schema(self) -> str:
        """
        DBCS Domain-level schema-name.  This attribute refers implicitly to a value of 'domainLevelSchemaNames' for a particular DB Domain.
        """
        return pulumi.get(self, "domain_level_schema")

    @property
    @pulumi.getter(name="domainLevelSchemaNames")
    def domain_level_schema_names(self) -> Sequence['outputs.GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupDomainLevelSchemaNameResult']:
        """
        DBCS Domain-level schema-names. Each value is specific to a DB Domain.
        """
        return pulumi.get(self, "domain_level_schema_names")

    @property
    @pulumi.getter(name="instanceLevelSchema")
    def instance_level_schema(self) -> str:
        """
        DBCS instance-level schema-name. This attribute refers implicitly to a value of 'instanceLevelSchemaNames' for a particular DB Instance.
        """
        return pulumi.get(self, "instance_level_schema")

    @property
    @pulumi.getter(name="instanceLevelSchemaNames")
    def instance_level_schema_names(self) -> Sequence['outputs.GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupInstanceLevelSchemaNameResult']:
        """
        DBCS instance-level schema-names. Each schema-name is specific to a DB Instance.
        """
        return pulumi.get(self, "instance_level_schema_names")


@pulumi.output_type
class GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupDomainLevelSchemaNameResult(dict):
    def __init__(__self__, *,
                 domain_name: str,
                 schema_name: str):
        """
        :param str domain_name: DBCS Domain Name
        :param str schema_name: The DBCS schema-name granted to this Group for the DB instance that 'dbInstanceId' specifies.
        """
        pulumi.set(__self__, "domain_name", domain_name)
        pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> str:
        """
        DBCS Domain Name
        """
        return pulumi.get(self, "domain_name")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> str:
        """
        The DBCS schema-name granted to this Group for the DB instance that 'dbInstanceId' specifies.
        """
        return pulumi.get(self, "schema_name")


@pulumi.output_type
class GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupInstanceLevelSchemaNameResult(dict):
    def __init__(__self__, *,
                 db_instance_id: str,
                 schema_name: str):
        """
        :param str db_instance_id: App Id of DBCS App instance
        :param str schema_name: The DBCS schema-name granted to this Group for the DB instance that 'dbInstanceId' specifies.
        """
        pulumi.set(__self__, "db_instance_id", db_instance_id)
        pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter(name="dbInstanceId")
    def db_instance_id(self) -> str:
        """
        App Id of DBCS App instance
        """
        return pulumi.get(self, "db_instance_id")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> str:
        """
        The DBCS schema-name granted to this Group for the DB instance that 'dbInstanceId' specifies.
        """
        return pulumi.get(self, "schema_name")


@pulumi.output_type
class GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiondynamicGroupResult(dict):
    def __init__(__self__, *,
                 membership_rule: str,
                 membership_type: str):
        """
        :param str membership_rule: Membership rule
        :param str membership_type: Membership type
        """
        pulumi.set(__self__, "membership_rule", membership_rule)
        pulumi.set(__self__, "membership_type", membership_type)

    @property
    @pulumi.getter(name="membershipRule")
    def membership_rule(self) -> str:
        """
        Membership rule
        """
        return pulumi.get(self, "membership_rule")

    @property
    @pulumi.getter(name="membershipType")
    def membership_type(self) -> str:
        """
        Membership type
        """
        return pulumi.get(self, "membership_type")


@pulumi.output_type
class GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupResult(dict):
    def __init__(__self__, *,
                 app_roles: Sequence['outputs.GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupAppRoleResult'],
                 creation_mechanism: str,
                 description: str,
                 grants: Sequence['outputs.GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupGrantResult'],
                 owners: Sequence['outputs.GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupOwnerResult'],
                 password_policies: Sequence['outputs.GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupPasswordPolicyResult'],
                 synced_from_apps: Sequence['outputs.GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupSyncedFromAppResult']):
        """
        :param Sequence['GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupAppRoleArgs'] app_roles: A list of appRoles that the user belongs to, either thorough direct membership, nested groups, or dynamically calculated
        :param str creation_mechanism: Source from which this group got created.
        :param str description: Group description
        :param Sequence['GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupGrantArgs'] grants: Grants assigned to group
        :param Sequence['GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupOwnerArgs'] owners: Group owners
        :param Sequence['GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupPasswordPolicyArgs'] password_policies: Password Policy associated with this Group.
        :param Sequence['GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupSyncedFromAppArgs'] synced_from_apps: The entity that created this Group.
        """
        pulumi.set(__self__, "app_roles", app_roles)
        pulumi.set(__self__, "creation_mechanism", creation_mechanism)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "grants", grants)
        pulumi.set(__self__, "owners", owners)
        pulumi.set(__self__, "password_policies", password_policies)
        pulumi.set(__self__, "synced_from_apps", synced_from_apps)

    @property
    @pulumi.getter(name="appRoles")
    def app_roles(self) -> Sequence['outputs.GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupAppRoleResult']:
        """
        A list of appRoles that the user belongs to, either thorough direct membership, nested groups, or dynamically calculated
        """
        return pulumi.get(self, "app_roles")

    @property
    @pulumi.getter(name="creationMechanism")
    def creation_mechanism(self) -> str:
        """
        Source from which this group got created.
        """
        return pulumi.get(self, "creation_mechanism")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Group description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def grants(self) -> Sequence['outputs.GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupGrantResult']:
        """
        Grants assigned to group
        """
        return pulumi.get(self, "grants")

    @property
    @pulumi.getter
    def owners(self) -> Sequence['outputs.GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupOwnerResult']:
        """
        Group owners
        """
        return pulumi.get(self, "owners")

    @property
    @pulumi.getter(name="passwordPolicies")
    def password_policies(self) -> Sequence['outputs.GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupPasswordPolicyResult']:
        """
        Password Policy associated with this Group.
        """
        return pulumi.get(self, "password_policies")

    @property
    @pulumi.getter(name="syncedFromApps")
    def synced_from_apps(self) -> Sequence['outputs.GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupSyncedFromAppResult']:
        """
        The entity that created this Group.
        """
        return pulumi.get(self, "synced_from_apps")


@pulumi.output_type
class GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupAppRoleResult(dict):
    def __init__(__self__, *,
                 admin_role: bool,
                 app_id: str,
                 app_name: str,
                 display: str,
                 legacy_group_name: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param bool admin_role: If true, then the role provides administrative access privileges. READ-ONLY.
        :param str app_id: App identifier
        :param str app_name: Name of parent App. READ-ONLY.
        :param str display: App Display Name
        :param str legacy_group_name: The name of the legacy group associated with this AppRole.
        :param str ref: App URI
        :param str type: The type of the entity that created this Group.
        :param str value: The ID of the App.
        """
        pulumi.set(__self__, "admin_role", admin_role)
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "app_name", app_name)
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "legacy_group_name", legacy_group_name)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="adminRole")
    def admin_role(self) -> bool:
        """
        If true, then the role provides administrative access privileges. READ-ONLY.
        """
        return pulumi.get(self, "admin_role")

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> str:
        """
        App identifier
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="appName")
    def app_name(self) -> str:
        """
        Name of parent App. READ-ONLY.
        """
        return pulumi.get(self, "app_name")

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        App Display Name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter(name="legacyGroupName")
    def legacy_group_name(self) -> str:
        """
        The name of the legacy group associated with this AppRole.
        """
        return pulumi.get(self, "legacy_group_name")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        App URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the entity that created this Group.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The ID of the App.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupGrantResult(dict):
    def __init__(__self__, *,
                 app_id: str,
                 grant_mechanism: str,
                 ref: str,
                 value: str):
        """
        :param str app_id: App identifier
        :param str grant_mechanism: Each value of grantMechanism indicates how (or by what component) some App (or App-Entitlement) was granted.\\nA customer or the UI should use only grantMechanism values that start with 'ADMINISTRATOR':\\n - 'ADMINISTRATOR_TO_USER' is for a direct grant to a specific User.\\n - 'ADMINISTRATOR_TO_GROUP' is for a grant to a specific Group, which results in indirect grants to Users who are members of that Group.\\n - 'ADMINISTRATOR_TO_APP' is for a grant to a specific App.  The grantee (client) App gains access to the granted (server) App.
        :param str ref: App URI
        :param str value: The ID of the App.
        """
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "grant_mechanism", grant_mechanism)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> str:
        """
        App identifier
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="grantMechanism")
    def grant_mechanism(self) -> str:
        """
        Each value of grantMechanism indicates how (or by what component) some App (or App-Entitlement) was granted.\\nA customer or the UI should use only grantMechanism values that start with 'ADMINISTRATOR':\\n - 'ADMINISTRATOR_TO_USER' is for a direct grant to a specific User.\\n - 'ADMINISTRATOR_TO_GROUP' is for a grant to a specific Group, which results in indirect grants to Users who are members of that Group.\\n - 'ADMINISTRATOR_TO_APP' is for a grant to a specific App.  The grantee (client) App gains access to the granted (server) App.
        """
        return pulumi.get(self, "grant_mechanism")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        App URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The ID of the App.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupOwnerResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: App Display Name
        :param str ref: App URI
        :param str type: The type of the entity that created this Group.
        :param str value: The ID of the App.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        App Display Name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        App URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the entity that created this Group.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The ID of the App.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupPasswordPolicyResult(dict):
    def __init__(__self__, *,
                 name: str,
                 priority: int,
                 ref: str,
                 value: str):
        """
        :param str name: PasswordPolicy Name
        :param int priority: PasswordPolicy priority
        :param str ref: App URI
        :param str value: The ID of the App.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        PasswordPolicy Name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        PasswordPolicy priority
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        App URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The ID of the App.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupSyncedFromAppResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: App Display Name
        :param str ref: App URI
        :param str type: The type of the entity that created this Group.
        :param str value: The ID of the App.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        App Display Name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        App URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the entity that created this Group.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The ID of the App.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensionposixGroupResult(dict):
    def __init__(__self__, *,
                 gid_number: int):
        """
        :param int gid_number: Integer uniquely identifying a group in a POSIX administrative domain
        """
        pulumi.set(__self__, "gid_number", gid_number)

    @property
    @pulumi.getter(name="gidNumber")
    def gid_number(self) -> int:
        """
        Integer uniquely identifying a group in a POSIX administrative domain
        """
        return pulumi.get(self, "gid_number")


@pulumi.output_type
class GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensionrequestableGroupResult(dict):
    def __init__(__self__, *,
                 requestable: bool):
        """
        :param bool requestable: Flag controlling whether group membership can be request by user through self service console.
        """
        pulumi.set(__self__, "requestable", requestable)

    @property
    @pulumi.getter
    def requestable(self) -> bool:
        """
        Flag controlling whether group membership can be request by user through self service console.
        """
        return pulumi.get(self, "requestable")


@pulumi.output_type
class GetDomainsIdentityProviderCorrelationPolicyResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: A human readable name, primarily used for display purposes. READ-ONLY.
        :param str ref: Group URI
        :param str type: Identity Provider Type
        :param str value: Value of the tag.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        A human readable name, primarily used for display purposes. READ-ONLY.
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        Group URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Identity Provider Type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of the tag.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsIdentityProviderIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: A human readable name, primarily used for display purposes. READ-ONLY.
        :param str ocid: Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        :param str ref: Group URI
        :param str type: Identity Provider Type
        :param str value: Value of the tag.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        A human readable name, primarily used for display purposes. READ-ONLY.
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        Group URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Identity Provider Type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of the tag.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsIdentityProviderIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: A human readable name, primarily used for display purposes. READ-ONLY.
        :param str ocid: Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        :param str ref: Group URI
        :param str type: Identity Provider Type
        :param str value: Value of the tag.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        A human readable name, primarily used for display purposes. READ-ONLY.
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        Group URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Identity Provider Type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of the tag.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsIdentityProviderJitUserProvAssignedGroupResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ref: str,
                 value: str):
        """
        :param str display: A human readable name, primarily used for display purposes. READ-ONLY.
        :param str ref: Group URI
        :param str value: Value of the tag.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        A human readable name, primarily used for display purposes. READ-ONLY.
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        Group URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of the tag.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsIdentityProviderJitUserProvAttributeResult(dict):
    def __init__(__self__, *,
                 ref: str,
                 value: str):
        """
        :param str ref: Group URI
        :param str value: Value of the tag.
        """
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        Group URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of the tag.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsIdentityProviderJitUserProvGroupMappingResult(dict):
    def __init__(__self__, *,
                 idp_group: str,
                 ref: str,
                 value: str):
        """
        :param str idp_group: IDP Group Name
        :param str ref: Group URI
        :param str value: Value of the tag.
        """
        pulumi.set(__self__, "idp_group", idp_group)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="idpGroup")
    def idp_group(self) -> str:
        """
        IDP Group Name
        """
        return pulumi.get(self, "idp_group")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        Group URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of the tag.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsIdentityProviderMetaResult(dict):
    def __init__(__self__, *,
                 created: str,
                 last_modified: str,
                 location: str,
                 resource_type: str,
                 version: str):
        """
        :param str created: The DateTime the Resource was added to the Service Provider
        :param str last_modified: The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        :param str location: The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        :param str resource_type: Name of the resource type of the resource--for example, Users or Groups
        :param str version: The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "last_modified", last_modified)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        The DateTime the Resource was added to the Service Provider
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> str:
        """
        The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Name of the resource type of the resource--for example, Users or Groups
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsIdentityProviderTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Key or name of the tag.
        :param str value: Value of the tag.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key or name of the tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of the tag.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProviderResult(dict):
    def __init__(__self__, *,
                 access_token_url: str,
                 account_linking_enabled: bool,
                 admin_scopes: Sequence[str],
                 authz_url: str,
                 client_credential_in_payload: bool,
                 clock_skew_in_seconds: int,
                 consumer_key: str,
                 consumer_secret: str,
                 discovery_url: str,
                 id_attribute: str,
                 profile_url: str,
                 redirect_url: str,
                 registration_enabled: bool,
                 scopes: Sequence[str],
                 service_provider_name: str,
                 status: str):
        """
        :param str access_token_url: Social IDP Access token URL
        :param bool account_linking_enabled: Whether account linking is enabled
        :param Sequence[str] admin_scopes: Admin scope to request
        :param str authz_url: Social IDP Authorization URL
        :param bool client_credential_in_payload: Whether the client credential is contained in payload
        :param int clock_skew_in_seconds: Social IDP allowed clock skew time
        :param str consumer_key: Social IDP Client Application Client ID
        :param str consumer_secret: Social IDP Client Application Client Secret
        :param str discovery_url: Discovery URL
        :param str id_attribute: Id attribute used for account linking
        :param str profile_url: Social IDP User profile URL
        :param str redirect_url: redirect URL for social idp
        :param bool registration_enabled: Whether registration is enabled
        :param Sequence[str] scopes: Scope to request
        :param str service_provider_name: Service Provider Name
        :param str status: Status
        """
        pulumi.set(__self__, "access_token_url", access_token_url)
        pulumi.set(__self__, "account_linking_enabled", account_linking_enabled)
        pulumi.set(__self__, "admin_scopes", admin_scopes)
        pulumi.set(__self__, "authz_url", authz_url)
        pulumi.set(__self__, "client_credential_in_payload", client_credential_in_payload)
        pulumi.set(__self__, "clock_skew_in_seconds", clock_skew_in_seconds)
        pulumi.set(__self__, "consumer_key", consumer_key)
        pulumi.set(__self__, "consumer_secret", consumer_secret)
        pulumi.set(__self__, "discovery_url", discovery_url)
        pulumi.set(__self__, "id_attribute", id_attribute)
        pulumi.set(__self__, "profile_url", profile_url)
        pulumi.set(__self__, "redirect_url", redirect_url)
        pulumi.set(__self__, "registration_enabled", registration_enabled)
        pulumi.set(__self__, "scopes", scopes)
        pulumi.set(__self__, "service_provider_name", service_provider_name)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="accessTokenUrl")
    def access_token_url(self) -> str:
        """
        Social IDP Access token URL
        """
        return pulumi.get(self, "access_token_url")

    @property
    @pulumi.getter(name="accountLinkingEnabled")
    def account_linking_enabled(self) -> bool:
        """
        Whether account linking is enabled
        """
        return pulumi.get(self, "account_linking_enabled")

    @property
    @pulumi.getter(name="adminScopes")
    def admin_scopes(self) -> Sequence[str]:
        """
        Admin scope to request
        """
        return pulumi.get(self, "admin_scopes")

    @property
    @pulumi.getter(name="authzUrl")
    def authz_url(self) -> str:
        """
        Social IDP Authorization URL
        """
        return pulumi.get(self, "authz_url")

    @property
    @pulumi.getter(name="clientCredentialInPayload")
    def client_credential_in_payload(self) -> bool:
        """
        Whether the client credential is contained in payload
        """
        return pulumi.get(self, "client_credential_in_payload")

    @property
    @pulumi.getter(name="clockSkewInSeconds")
    def clock_skew_in_seconds(self) -> int:
        """
        Social IDP allowed clock skew time
        """
        return pulumi.get(self, "clock_skew_in_seconds")

    @property
    @pulumi.getter(name="consumerKey")
    def consumer_key(self) -> str:
        """
        Social IDP Client Application Client ID
        """
        return pulumi.get(self, "consumer_key")

    @property
    @pulumi.getter(name="consumerSecret")
    def consumer_secret(self) -> str:
        """
        Social IDP Client Application Client Secret
        """
        return pulumi.get(self, "consumer_secret")

    @property
    @pulumi.getter(name="discoveryUrl")
    def discovery_url(self) -> str:
        """
        Discovery URL
        """
        return pulumi.get(self, "discovery_url")

    @property
    @pulumi.getter(name="idAttribute")
    def id_attribute(self) -> str:
        """
        Id attribute used for account linking
        """
        return pulumi.get(self, "id_attribute")

    @property
    @pulumi.getter(name="profileUrl")
    def profile_url(self) -> str:
        """
        Social IDP User profile URL
        """
        return pulumi.get(self, "profile_url")

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> str:
        """
        redirect URL for social idp
        """
        return pulumi.get(self, "redirect_url")

    @property
    @pulumi.getter(name="registrationEnabled")
    def registration_enabled(self) -> bool:
        """
        Whether registration is enabled
        """
        return pulumi.get(self, "registration_enabled")

    @property
    @pulumi.getter
    def scopes(self) -> Sequence[str]:
        """
        Scope to request
        """
        return pulumi.get(self, "scopes")

    @property
    @pulumi.getter(name="serviceProviderName")
    def service_provider_name(self) -> str:
        """
        Service Provider Name
        """
        return pulumi.get(self, "service_provider_name")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionx509identityProviderResult(dict):
    def __init__(__self__, *,
                 cert_match_attribute: str,
                 crl_check_on_ocsp_failure_enabled: bool,
                 crl_enabled: bool,
                 crl_location: str,
                 crl_reload_duration: int,
                 ocsp_allow_unknown_response_status: bool,
                 ocsp_enable_signed_response: bool,
                 ocsp_enabled: bool,
                 ocsp_responder_url: str,
                 ocsp_revalidate_time: int,
                 ocsp_server_name: str,
                 ocsp_trust_cert_chains: Sequence[str],
                 other_cert_match_attribute: str,
                 signing_certificate_chains: Sequence[str],
                 user_match_attribute: str):
        """
        :param str cert_match_attribute: X509 Certificate Matching Attribute
        :param bool crl_check_on_ocsp_failure_enabled: Fallback on CRL Validation if OCSP fails.
        :param bool crl_enabled: Set to true to enable CRL Validation
        :param str crl_location: CRL Location URL
        :param int crl_reload_duration: Fetch the CRL contents every X minutes
        :param bool ocsp_allow_unknown_response_status: Allow access if OCSP response is UNKNOWN or OCSP Responder does not respond within the timeout duration
        :param bool ocsp_enable_signed_response: Describes if the OCSP response is signed
        :param bool ocsp_enabled: Set to true to enable OCSP Validation
        :param str ocsp_responder_url: This property specifies OCSP Responder URL.
        :param int ocsp_revalidate_time: Revalidate OCSP status for user after X hours
        :param str ocsp_server_name: This property specifies the OCSP Server alias name
        :param Sequence[str] ocsp_trust_cert_chains: OCSP Trusted Certificate Chain
        :param str other_cert_match_attribute: Check for specific conditions of other certificate attributes
        :param Sequence[str] signing_certificate_chains: Certificate alias list to create a chain for the incoming client certificate
        :param str user_match_attribute: This property specifies the userstore attribute value that must match the incoming certificate attribute.
        """
        pulumi.set(__self__, "cert_match_attribute", cert_match_attribute)
        pulumi.set(__self__, "crl_check_on_ocsp_failure_enabled", crl_check_on_ocsp_failure_enabled)
        pulumi.set(__self__, "crl_enabled", crl_enabled)
        pulumi.set(__self__, "crl_location", crl_location)
        pulumi.set(__self__, "crl_reload_duration", crl_reload_duration)
        pulumi.set(__self__, "ocsp_allow_unknown_response_status", ocsp_allow_unknown_response_status)
        pulumi.set(__self__, "ocsp_enable_signed_response", ocsp_enable_signed_response)
        pulumi.set(__self__, "ocsp_enabled", ocsp_enabled)
        pulumi.set(__self__, "ocsp_responder_url", ocsp_responder_url)
        pulumi.set(__self__, "ocsp_revalidate_time", ocsp_revalidate_time)
        pulumi.set(__self__, "ocsp_server_name", ocsp_server_name)
        pulumi.set(__self__, "ocsp_trust_cert_chains", ocsp_trust_cert_chains)
        pulumi.set(__self__, "other_cert_match_attribute", other_cert_match_attribute)
        pulumi.set(__self__, "signing_certificate_chains", signing_certificate_chains)
        pulumi.set(__self__, "user_match_attribute", user_match_attribute)

    @property
    @pulumi.getter(name="certMatchAttribute")
    def cert_match_attribute(self) -> str:
        """
        X509 Certificate Matching Attribute
        """
        return pulumi.get(self, "cert_match_attribute")

    @property
    @pulumi.getter(name="crlCheckOnOcspFailureEnabled")
    def crl_check_on_ocsp_failure_enabled(self) -> bool:
        """
        Fallback on CRL Validation if OCSP fails.
        """
        return pulumi.get(self, "crl_check_on_ocsp_failure_enabled")

    @property
    @pulumi.getter(name="crlEnabled")
    def crl_enabled(self) -> bool:
        """
        Set to true to enable CRL Validation
        """
        return pulumi.get(self, "crl_enabled")

    @property
    @pulumi.getter(name="crlLocation")
    def crl_location(self) -> str:
        """
        CRL Location URL
        """
        return pulumi.get(self, "crl_location")

    @property
    @pulumi.getter(name="crlReloadDuration")
    def crl_reload_duration(self) -> int:
        """
        Fetch the CRL contents every X minutes
        """
        return pulumi.get(self, "crl_reload_duration")

    @property
    @pulumi.getter(name="ocspAllowUnknownResponseStatus")
    def ocsp_allow_unknown_response_status(self) -> bool:
        """
        Allow access if OCSP response is UNKNOWN or OCSP Responder does not respond within the timeout duration
        """
        return pulumi.get(self, "ocsp_allow_unknown_response_status")

    @property
    @pulumi.getter(name="ocspEnableSignedResponse")
    def ocsp_enable_signed_response(self) -> bool:
        """
        Describes if the OCSP response is signed
        """
        return pulumi.get(self, "ocsp_enable_signed_response")

    @property
    @pulumi.getter(name="ocspEnabled")
    def ocsp_enabled(self) -> bool:
        """
        Set to true to enable OCSP Validation
        """
        return pulumi.get(self, "ocsp_enabled")

    @property
    @pulumi.getter(name="ocspResponderUrl")
    def ocsp_responder_url(self) -> str:
        """
        This property specifies OCSP Responder URL.
        """
        return pulumi.get(self, "ocsp_responder_url")

    @property
    @pulumi.getter(name="ocspRevalidateTime")
    def ocsp_revalidate_time(self) -> int:
        """
        Revalidate OCSP status for user after X hours
        """
        return pulumi.get(self, "ocsp_revalidate_time")

    @property
    @pulumi.getter(name="ocspServerName")
    def ocsp_server_name(self) -> str:
        """
        This property specifies the OCSP Server alias name
        """
        return pulumi.get(self, "ocsp_server_name")

    @property
    @pulumi.getter(name="ocspTrustCertChains")
    def ocsp_trust_cert_chains(self) -> Sequence[str]:
        """
        OCSP Trusted Certificate Chain
        """
        return pulumi.get(self, "ocsp_trust_cert_chains")

    @property
    @pulumi.getter(name="otherCertMatchAttribute")
    def other_cert_match_attribute(self) -> str:
        """
        Check for specific conditions of other certificate attributes
        """
        return pulumi.get(self, "other_cert_match_attribute")

    @property
    @pulumi.getter(name="signingCertificateChains")
    def signing_certificate_chains(self) -> Sequence[str]:
        """
        Certificate alias list to create a chain for the incoming client certificate
        """
        return pulumi.get(self, "signing_certificate_chains")

    @property
    @pulumi.getter(name="userMatchAttribute")
    def user_match_attribute(self) -> str:
        """
        This property specifies the userstore attribute value that must match the incoming certificate attribute.
        """
        return pulumi.get(self, "user_match_attribute")


@pulumi.output_type
class GetDomainsIdentityProvidersIdentityProviderResult(dict):
    def __init__(__self__, *,
                 assertion_attribute: str,
                 attribute_sets: Sequence[str],
                 attributes: str,
                 authn_request_binding: str,
                 authorization: str,
                 compartment_ocid: str,
                 correlation_policies: Sequence['outputs.GetDomainsIdentityProvidersIdentityProviderCorrelationPolicyResult'],
                 delete_in_progress: bool,
                 description: str,
                 domain_ocid: str,
                 enabled: bool,
                 encryption_certificate: str,
                 external_id: str,
                 icon_url: str,
                 id: str,
                 idcs_created_bies: Sequence['outputs.GetDomainsIdentityProvidersIdentityProviderIdcsCreatedByResult'],
                 idcs_endpoint: str,
                 idcs_last_modified_bies: Sequence['outputs.GetDomainsIdentityProvidersIdentityProviderIdcsLastModifiedByResult'],
                 idcs_last_upgraded_in_release: str,
                 idcs_prevented_operations: Sequence[str],
                 idp_sso_url: str,
                 include_signing_cert_in_signature: bool,
                 jit_user_prov_assigned_groups: Sequence['outputs.GetDomainsIdentityProvidersIdentityProviderJitUserProvAssignedGroupResult'],
                 jit_user_prov_attribute_update_enabled: bool,
                 jit_user_prov_attributes: Sequence['outputs.GetDomainsIdentityProvidersIdentityProviderJitUserProvAttributeResult'],
                 jit_user_prov_create_user_enabled: bool,
                 jit_user_prov_enabled: bool,
                 jit_user_prov_group_assertion_attribute_enabled: bool,
                 jit_user_prov_group_assignment_method: str,
                 jit_user_prov_group_mapping_mode: str,
                 jit_user_prov_group_mappings: Sequence['outputs.GetDomainsIdentityProvidersIdentityProviderJitUserProvGroupMappingResult'],
                 jit_user_prov_group_saml_attribute_name: str,
                 jit_user_prov_group_static_list_enabled: bool,
                 jit_user_prov_ignore_error_on_absent_groups: bool,
                 logout_binding: str,
                 logout_enabled: bool,
                 logout_request_url: str,
                 logout_response_url: str,
                 metadata: str,
                 metas: Sequence['outputs.GetDomainsIdentityProvidersIdentityProviderMetaResult'],
                 name_id_format: str,
                 ocid: str,
                 partner_name: str,
                 partner_provider_id: str,
                 requested_authentication_contexts: Sequence[str],
                 require_force_authn: bool,
                 requires_encrypted_assertion: bool,
                 resource_type_schema_version: str,
                 saml_ho_krequired: bool,
                 schemas: Sequence[str],
                 service_instance_identifier: str,
                 shown_on_login_page: bool,
                 signature_hash_algorithm: str,
                 signing_certificate: str,
                 succinct_id: str,
                 tags: Sequence['outputs.GetDomainsIdentityProvidersIdentityProviderTagResult'],
                 tenancy_ocid: str,
                 tenant_provider_id: str,
                 type: str,
                 urnietfparamsscimschemasoracleidcsextensionsocial_identity_providers: Sequence['outputs.GetDomainsIdentityProvidersIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProviderResult'],
                 urnietfparamsscimschemasoracleidcsextensionx509identity_providers: Sequence['outputs.GetDomainsIdentityProvidersIdentityProviderUrnietfparamsscimschemasoracleidcsextensionx509identityProviderResult'],
                 user_mapping_method: str,
                 user_mapping_store_attribute: str):
        """
        :param str assertion_attribute: Assertion attribute name.
        :param Sequence[str] attribute_sets: A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
        :param str attributes: A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
        :param str authn_request_binding: HTTP binding to use for authentication requests.
        :param str authorization: The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
        :param str compartment_ocid: Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
        :param Sequence['GetDomainsIdentityProvidersIdentityProviderCorrelationPolicyArgs'] correlation_policies: Correlation policy
        :param bool delete_in_progress: A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
        :param str description: Description
        :param str domain_ocid: Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
        :param bool enabled: Set to true to indicate Partner enabled.
        :param str encryption_certificate: Encryption certificate
        :param str external_id: An identifier for the Resource as defined by the Service Consumer. The externalId may simplify identification of the Resource between Service Consumer and Service Provider by allowing the Consumer to refer to the Resource with its own identifier, obviating the need to store a local mapping between the local identifier of the Resource and the identifier used by the Service Provider. Each Resource MAY include a non-empty externalId value. The value of the externalId attribute is always issued by the Service Consumer and can never be specified by the Service Provider. The Service Provider MUST always interpret the externalId as scoped to the Service Consumer's tenant.
        :param str icon_url: Identity Provider Icon URL.
        :param str id: Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider's entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
        :param Sequence['GetDomainsIdentityProvidersIdentityProviderIdcsCreatedByArgs'] idcs_created_bies: The User or App who created the Resource
        :param str idcs_endpoint: The basic endpoint for the identity domain
        :param Sequence['GetDomainsIdentityProvidersIdentityProviderIdcsLastModifiedByArgs'] idcs_last_modified_bies: The User or App who modified the Resource
        :param str idcs_last_upgraded_in_release: The release number when the resource was upgraded.
        :param Sequence[str] idcs_prevented_operations: Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
        :param str idp_sso_url: Identity Provider SSO URL
        :param bool include_signing_cert_in_signature: Set to true to include the signing certificate in the signature.
        :param Sequence['GetDomainsIdentityProvidersIdentityProviderJitUserProvAssignedGroupArgs'] jit_user_prov_assigned_groups: Refers to every group of which a JIT-provisioned User should be a member.  Just-in-Time user-provisioning applies this static list when jitUserProvGroupStaticListEnabled:true.
        :param bool jit_user_prov_attribute_update_enabled: Set to true to indicate JIT User Creation is enabled
        :param Sequence['GetDomainsIdentityProvidersIdentityProviderJitUserProvAttributeArgs'] jit_user_prov_attributes: Assertion To User Mapping
        :param bool jit_user_prov_create_user_enabled: Set to true to indicate JIT User Creation is enabled
        :param bool jit_user_prov_enabled: Set to true to indicate JIT User Provisioning is enabled
        :param bool jit_user_prov_group_assertion_attribute_enabled: Set to true to indicate JIT User Provisioning Groups should be assigned based on assertion attribute
        :param str jit_user_prov_group_assignment_method: The default value is 'Overwrite', which tells Just-In-Time user-provisioning to replace any current group-assignments for a User with those assigned by assertions and/or those assigned statically. Specify 'Merge' if you want Just-In-Time user-provisioning to combine its group-assignments with those the user already has.
        :param str jit_user_prov_group_mapping_mode: Property to indicate the mode of group mapping
        :param Sequence['GetDomainsIdentityProvidersIdentityProviderJitUserProvGroupMappingArgs'] jit_user_prov_group_mappings: The list of mappings between the Identity Domain Group and the IDP group.
        :param str jit_user_prov_group_saml_attribute_name: Name of the assertion attribute containing the users groups
        :param bool jit_user_prov_group_static_list_enabled: Set to true to indicate JIT User Provisioning Groups should be assigned from a static list
        :param bool jit_user_prov_ignore_error_on_absent_groups: Set to true to indicate ignoring absence of group while provisioning
        :param str logout_binding: HTTP binding to use for logout.
        :param bool logout_enabled: Set to true to enable logout.
        :param str logout_request_url: Logout request URL
        :param str logout_response_url: Logout response URL
        :param str metadata: Metadata
        :param Sequence['GetDomainsIdentityProvidersIdentityProviderMetaArgs'] metas: A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
        :param str name_id_format: Default authentication request name ID format.
        :param str ocid: Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        :param str partner_name: Unique name of the trusted Identity Provider.
        :param str partner_provider_id: Provider ID
        :param Sequence[str] requested_authentication_contexts: SAML SP authentication type.
        :param bool require_force_authn: This SP requires requests SAML IdP to enforce re-authentication.
        :param bool requires_encrypted_assertion: SAML SP must accept encrypted assertion only.
        :param str resource_type_schema_version: An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
        :param bool saml_ho_krequired: SAML SP HoK Enabled.
        :param Sequence[str] schemas: REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \\"enterprise\\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
        :param str service_instance_identifier: The serviceInstanceIdentifier of the App that hosts this IdP. This value will match the opcServiceInstanceGUID of any service-instance that the IdP represents.
        :param bool shown_on_login_page: Set to true to indicate whether to show IdP in login page or not.
        :param str signature_hash_algorithm: Signature hash algorithm.
        :param str signing_certificate: Signing certificate
        :param str succinct_id: Succinct ID
        :param Sequence['GetDomainsIdentityProvidersIdentityProviderTagArgs'] tags: A list of tags on this resource.
        :param str tenancy_ocid: Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
        :param str tenant_provider_id: The alternate Provider ID to be used as the Oracle Identity Cloud Service providerID (instead of the one in SamlSettings) when interacting with this IdP.
        :param str type: Identity Provider Type
        :param Sequence['GetDomainsIdentityProvidersIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProviderArgs'] urnietfparamsscimschemasoracleidcsextensionsocial_identity_providers: Social Identity Provider Extension Schema
        :param Sequence['GetDomainsIdentityProvidersIdentityProviderUrnietfparamsscimschemasoracleidcsextensionx509identityProviderArgs'] urnietfparamsscimschemasoracleidcsextensionx509identity_providers: X509 Identity Provider Extension Schema
        :param str user_mapping_method: User mapping method.
        :param str user_mapping_store_attribute: This property specifies the userstore attribute value that must match the incoming assertion attribute value or the incoming nameid attribute value in order to identify the user during SSO.<br>You can construct the userMappingStoreAttribute value by specifying attributes from the Oracle Identity Cloud Service Core Users schema. For examples of how to construct the userMappingStoreAttribute value, see the <b>Example of a Request Body</b> section of the Examples tab for the <a href='./op-admin-v1-identityproviders-post.html'>POST</a> and <a href='./op-admin-v1-identityproviders-id-put.html'>PUT</a> methods of the /IdentityProviders endpoint.
        """
        pulumi.set(__self__, "assertion_attribute", assertion_attribute)
        pulumi.set(__self__, "attribute_sets", attribute_sets)
        pulumi.set(__self__, "attributes", attributes)
        pulumi.set(__self__, "authn_request_binding", authn_request_binding)
        pulumi.set(__self__, "authorization", authorization)
        pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        pulumi.set(__self__, "correlation_policies", correlation_policies)
        pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "domain_ocid", domain_ocid)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "encryption_certificate", encryption_certificate)
        pulumi.set(__self__, "external_id", external_id)
        pulumi.set(__self__, "icon_url", icon_url)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        pulumi.set(__self__, "idcs_endpoint", idcs_endpoint)
        pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        pulumi.set(__self__, "idp_sso_url", idp_sso_url)
        pulumi.set(__self__, "include_signing_cert_in_signature", include_signing_cert_in_signature)
        pulumi.set(__self__, "jit_user_prov_assigned_groups", jit_user_prov_assigned_groups)
        pulumi.set(__self__, "jit_user_prov_attribute_update_enabled", jit_user_prov_attribute_update_enabled)
        pulumi.set(__self__, "jit_user_prov_attributes", jit_user_prov_attributes)
        pulumi.set(__self__, "jit_user_prov_create_user_enabled", jit_user_prov_create_user_enabled)
        pulumi.set(__self__, "jit_user_prov_enabled", jit_user_prov_enabled)
        pulumi.set(__self__, "jit_user_prov_group_assertion_attribute_enabled", jit_user_prov_group_assertion_attribute_enabled)
        pulumi.set(__self__, "jit_user_prov_group_assignment_method", jit_user_prov_group_assignment_method)
        pulumi.set(__self__, "jit_user_prov_group_mapping_mode", jit_user_prov_group_mapping_mode)
        pulumi.set(__self__, "jit_user_prov_group_mappings", jit_user_prov_group_mappings)
        pulumi.set(__self__, "jit_user_prov_group_saml_attribute_name", jit_user_prov_group_saml_attribute_name)
        pulumi.set(__self__, "jit_user_prov_group_static_list_enabled", jit_user_prov_group_static_list_enabled)
        pulumi.set(__self__, "jit_user_prov_ignore_error_on_absent_groups", jit_user_prov_ignore_error_on_absent_groups)
        pulumi.set(__self__, "logout_binding", logout_binding)
        pulumi.set(__self__, "logout_enabled", logout_enabled)
        pulumi.set(__self__, "logout_request_url", logout_request_url)
        pulumi.set(__self__, "logout_response_url", logout_response_url)
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "metas", metas)
        pulumi.set(__self__, "name_id_format", name_id_format)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "partner_name", partner_name)
        pulumi.set(__self__, "partner_provider_id", partner_provider_id)
        pulumi.set(__self__, "requested_authentication_contexts", requested_authentication_contexts)
        pulumi.set(__self__, "require_force_authn", require_force_authn)
        pulumi.set(__self__, "requires_encrypted_assertion", requires_encrypted_assertion)
        pulumi.set(__self__, "resource_type_schema_version", resource_type_schema_version)
        pulumi.set(__self__, "saml_ho_krequired", saml_ho_krequired)
        pulumi.set(__self__, "schemas", schemas)
        pulumi.set(__self__, "service_instance_identifier", service_instance_identifier)
        pulumi.set(__self__, "shown_on_login_page", shown_on_login_page)
        pulumi.set(__self__, "signature_hash_algorithm", signature_hash_algorithm)
        pulumi.set(__self__, "signing_certificate", signing_certificate)
        pulumi.set(__self__, "succinct_id", succinct_id)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)
        pulumi.set(__self__, "tenant_provider_id", tenant_provider_id)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionsocial_identity_providers", urnietfparamsscimschemasoracleidcsextensionsocial_identity_providers)
        pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionx509identity_providers", urnietfparamsscimschemasoracleidcsextensionx509identity_providers)
        pulumi.set(__self__, "user_mapping_method", user_mapping_method)
        pulumi.set(__self__, "user_mapping_store_attribute", user_mapping_store_attribute)

    @property
    @pulumi.getter(name="assertionAttribute")
    def assertion_attribute(self) -> str:
        """
        Assertion attribute name.
        """
        return pulumi.get(self, "assertion_attribute")

    @property
    @pulumi.getter(name="attributeSets")
    def attribute_sets(self) -> Sequence[str]:
        """
        A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
        """
        return pulumi.get(self, "attribute_sets")

    @property
    @pulumi.getter
    def attributes(self) -> str:
        """
        A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
        """
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter(name="authnRequestBinding")
    def authn_request_binding(self) -> str:
        """
        HTTP binding to use for authentication requests.
        """
        return pulumi.get(self, "authn_request_binding")

    @property
    @pulumi.getter
    def authorization(self) -> str:
        """
        The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
        """
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="correlationPolicies")
    def correlation_policies(self) -> Sequence['outputs.GetDomainsIdentityProvidersIdentityProviderCorrelationPolicyResult']:
        """
        Correlation policy
        """
        return pulumi.get(self, "correlation_policies")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> bool:
        """
        A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
        """
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Set to true to indicate Partner enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="encryptionCertificate")
    def encryption_certificate(self) -> str:
        """
        Encryption certificate
        """
        return pulumi.get(self, "encryption_certificate")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> str:
        """
        An identifier for the Resource as defined by the Service Consumer. The externalId may simplify identification of the Resource between Service Consumer and Service Provider by allowing the Consumer to refer to the Resource with its own identifier, obviating the need to store a local mapping between the local identifier of the Resource and the identifier used by the Service Provider. Each Resource MAY include a non-empty externalId value. The value of the externalId attribute is always issued by the Service Consumer and can never be specified by the Service Provider. The Service Provider MUST always interpret the externalId as scoped to the Service Consumer's tenant.
        """
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter(name="iconUrl")
    def icon_url(self) -> str:
        """
        Identity Provider Icon URL.
        """
        return pulumi.get(self, "icon_url")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider's entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Sequence['outputs.GetDomainsIdentityProvidersIdentityProviderIdcsCreatedByResult']:
        """
        The User or App who created the Resource
        """
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> str:
        """
        The basic endpoint for the identity domain
        """
        return pulumi.get(self, "idcs_endpoint")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Sequence['outputs.GetDomainsIdentityProvidersIdentityProviderIdcsLastModifiedByResult']:
        """
        The User or App who modified the Resource
        """
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> str:
        """
        The release number when the resource was upgraded.
        """
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Sequence[str]:
        """
        Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
        """
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter(name="idpSsoUrl")
    def idp_sso_url(self) -> str:
        """
        Identity Provider SSO URL
        """
        return pulumi.get(self, "idp_sso_url")

    @property
    @pulumi.getter(name="includeSigningCertInSignature")
    def include_signing_cert_in_signature(self) -> bool:
        """
        Set to true to include the signing certificate in the signature.
        """
        return pulumi.get(self, "include_signing_cert_in_signature")

    @property
    @pulumi.getter(name="jitUserProvAssignedGroups")
    def jit_user_prov_assigned_groups(self) -> Sequence['outputs.GetDomainsIdentityProvidersIdentityProviderJitUserProvAssignedGroupResult']:
        """
        Refers to every group of which a JIT-provisioned User should be a member.  Just-in-Time user-provisioning applies this static list when jitUserProvGroupStaticListEnabled:true.
        """
        return pulumi.get(self, "jit_user_prov_assigned_groups")

    @property
    @pulumi.getter(name="jitUserProvAttributeUpdateEnabled")
    def jit_user_prov_attribute_update_enabled(self) -> bool:
        """
        Set to true to indicate JIT User Creation is enabled
        """
        return pulumi.get(self, "jit_user_prov_attribute_update_enabled")

    @property
    @pulumi.getter(name="jitUserProvAttributes")
    def jit_user_prov_attributes(self) -> Sequence['outputs.GetDomainsIdentityProvidersIdentityProviderJitUserProvAttributeResult']:
        """
        Assertion To User Mapping
        """
        return pulumi.get(self, "jit_user_prov_attributes")

    @property
    @pulumi.getter(name="jitUserProvCreateUserEnabled")
    def jit_user_prov_create_user_enabled(self) -> bool:
        """
        Set to true to indicate JIT User Creation is enabled
        """
        return pulumi.get(self, "jit_user_prov_create_user_enabled")

    @property
    @pulumi.getter(name="jitUserProvEnabled")
    def jit_user_prov_enabled(self) -> bool:
        """
        Set to true to indicate JIT User Provisioning is enabled
        """
        return pulumi.get(self, "jit_user_prov_enabled")

    @property
    @pulumi.getter(name="jitUserProvGroupAssertionAttributeEnabled")
    def jit_user_prov_group_assertion_attribute_enabled(self) -> bool:
        """
        Set to true to indicate JIT User Provisioning Groups should be assigned based on assertion attribute
        """
        return pulumi.get(self, "jit_user_prov_group_assertion_attribute_enabled")

    @property
    @pulumi.getter(name="jitUserProvGroupAssignmentMethod")
    def jit_user_prov_group_assignment_method(self) -> str:
        """
        The default value is 'Overwrite', which tells Just-In-Time user-provisioning to replace any current group-assignments for a User with those assigned by assertions and/or those assigned statically. Specify 'Merge' if you want Just-In-Time user-provisioning to combine its group-assignments with those the user already has.
        """
        return pulumi.get(self, "jit_user_prov_group_assignment_method")

    @property
    @pulumi.getter(name="jitUserProvGroupMappingMode")
    def jit_user_prov_group_mapping_mode(self) -> str:
        """
        Property to indicate the mode of group mapping
        """
        return pulumi.get(self, "jit_user_prov_group_mapping_mode")

    @property
    @pulumi.getter(name="jitUserProvGroupMappings")
    def jit_user_prov_group_mappings(self) -> Sequence['outputs.GetDomainsIdentityProvidersIdentityProviderJitUserProvGroupMappingResult']:
        """
        The list of mappings between the Identity Domain Group and the IDP group.
        """
        return pulumi.get(self, "jit_user_prov_group_mappings")

    @property
    @pulumi.getter(name="jitUserProvGroupSamlAttributeName")
    def jit_user_prov_group_saml_attribute_name(self) -> str:
        """
        Name of the assertion attribute containing the users groups
        """
        return pulumi.get(self, "jit_user_prov_group_saml_attribute_name")

    @property
    @pulumi.getter(name="jitUserProvGroupStaticListEnabled")
    def jit_user_prov_group_static_list_enabled(self) -> bool:
        """
        Set to true to indicate JIT User Provisioning Groups should be assigned from a static list
        """
        return pulumi.get(self, "jit_user_prov_group_static_list_enabled")

    @property
    @pulumi.getter(name="jitUserProvIgnoreErrorOnAbsentGroups")
    def jit_user_prov_ignore_error_on_absent_groups(self) -> bool:
        """
        Set to true to indicate ignoring absence of group while provisioning
        """
        return pulumi.get(self, "jit_user_prov_ignore_error_on_absent_groups")

    @property
    @pulumi.getter(name="logoutBinding")
    def logout_binding(self) -> str:
        """
        HTTP binding to use for logout.
        """
        return pulumi.get(self, "logout_binding")

    @property
    @pulumi.getter(name="logoutEnabled")
    def logout_enabled(self) -> bool:
        """
        Set to true to enable logout.
        """
        return pulumi.get(self, "logout_enabled")

    @property
    @pulumi.getter(name="logoutRequestUrl")
    def logout_request_url(self) -> str:
        """
        Logout request URL
        """
        return pulumi.get(self, "logout_request_url")

    @property
    @pulumi.getter(name="logoutResponseUrl")
    def logout_response_url(self) -> str:
        """
        Logout response URL
        """
        return pulumi.get(self, "logout_response_url")

    @property
    @pulumi.getter
    def metadata(self) -> str:
        """
        Metadata
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def metas(self) -> Sequence['outputs.GetDomainsIdentityProvidersIdentityProviderMetaResult']:
        """
        A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
        """
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter(name="nameIdFormat")
    def name_id_format(self) -> str:
        """
        Default authentication request name ID format.
        """
        return pulumi.get(self, "name_id_format")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="partnerName")
    def partner_name(self) -> str:
        """
        Unique name of the trusted Identity Provider.
        """
        return pulumi.get(self, "partner_name")

    @property
    @pulumi.getter(name="partnerProviderId")
    def partner_provider_id(self) -> str:
        """
        Provider ID
        """
        return pulumi.get(self, "partner_provider_id")

    @property
    @pulumi.getter(name="requestedAuthenticationContexts")
    def requested_authentication_contexts(self) -> Sequence[str]:
        """
        SAML SP authentication type.
        """
        return pulumi.get(self, "requested_authentication_contexts")

    @property
    @pulumi.getter(name="requireForceAuthn")
    def require_force_authn(self) -> bool:
        """
        This SP requires requests SAML IdP to enforce re-authentication.
        """
        return pulumi.get(self, "require_force_authn")

    @property
    @pulumi.getter(name="requiresEncryptedAssertion")
    def requires_encrypted_assertion(self) -> bool:
        """
        SAML SP must accept encrypted assertion only.
        """
        return pulumi.get(self, "requires_encrypted_assertion")

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> str:
        """
        An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
        """
        return pulumi.get(self, "resource_type_schema_version")

    @property
    @pulumi.getter(name="samlHoKrequired")
    def saml_ho_krequired(self) -> bool:
        """
        SAML SP HoK Enabled.
        """
        return pulumi.get(self, "saml_ho_krequired")

    @property
    @pulumi.getter
    def schemas(self) -> Sequence[str]:
        """
        REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \\"enterprise\\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
        """
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter(name="serviceInstanceIdentifier")
    def service_instance_identifier(self) -> str:
        """
        The serviceInstanceIdentifier of the App that hosts this IdP. This value will match the opcServiceInstanceGUID of any service-instance that the IdP represents.
        """
        return pulumi.get(self, "service_instance_identifier")

    @property
    @pulumi.getter(name="shownOnLoginPage")
    def shown_on_login_page(self) -> bool:
        """
        Set to true to indicate whether to show IdP in login page or not.
        """
        return pulumi.get(self, "shown_on_login_page")

    @property
    @pulumi.getter(name="signatureHashAlgorithm")
    def signature_hash_algorithm(self) -> str:
        """
        Signature hash algorithm.
        """
        return pulumi.get(self, "signature_hash_algorithm")

    @property
    @pulumi.getter(name="signingCertificate")
    def signing_certificate(self) -> str:
        """
        Signing certificate
        """
        return pulumi.get(self, "signing_certificate")

    @property
    @pulumi.getter(name="succinctId")
    def succinct_id(self) -> str:
        """
        Succinct ID
        """
        return pulumi.get(self, "succinct_id")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetDomainsIdentityProvidersIdentityProviderTagResult']:
        """
        A list of tags on this resource.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "tenancy_ocid")

    @property
    @pulumi.getter(name="tenantProviderId")
    def tenant_provider_id(self) -> str:
        """
        The alternate Provider ID to be used as the Oracle Identity Cloud Service providerID (instead of the one in SamlSettings) when interacting with this IdP.
        """
        return pulumi.get(self, "tenant_provider_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Identity Provider Type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionsocialIdentityProviders")
    def urnietfparamsscimschemasoracleidcsextensionsocial_identity_providers(self) -> Sequence['outputs.GetDomainsIdentityProvidersIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProviderResult']:
        """
        Social Identity Provider Extension Schema
        """
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionsocial_identity_providers")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionx509identityProviders")
    def urnietfparamsscimschemasoracleidcsextensionx509identity_providers(self) -> Sequence['outputs.GetDomainsIdentityProvidersIdentityProviderUrnietfparamsscimschemasoracleidcsextensionx509identityProviderResult']:
        """
        X509 Identity Provider Extension Schema
        """
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionx509identity_providers")

    @property
    @pulumi.getter(name="userMappingMethod")
    def user_mapping_method(self) -> str:
        """
        User mapping method.
        """
        return pulumi.get(self, "user_mapping_method")

    @property
    @pulumi.getter(name="userMappingStoreAttribute")
    def user_mapping_store_attribute(self) -> str:
        """
        This property specifies the userstore attribute value that must match the incoming assertion attribute value or the incoming nameid attribute value in order to identify the user during SSO.<br>You can construct the userMappingStoreAttribute value by specifying attributes from the Oracle Identity Cloud Service Core Users schema. For examples of how to construct the userMappingStoreAttribute value, see the <b>Example of a Request Body</b> section of the Examples tab for the <a href='./op-admin-v1-identityproviders-post.html'>POST</a> and <a href='./op-admin-v1-identityproviders-id-put.html'>PUT</a> methods of the /IdentityProviders endpoint.
        """
        return pulumi.get(self, "user_mapping_store_attribute")


@pulumi.output_type
class GetDomainsIdentityProvidersIdentityProviderCorrelationPolicyResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: A human readable name, primarily used for display purposes. READ-ONLY.
        :param str ref: Group URI
        :param str type: Identity Provider Type
        :param str value: Value of the tag.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        A human readable name, primarily used for display purposes. READ-ONLY.
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        Group URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Identity Provider Type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of the tag.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsIdentityProvidersIdentityProviderIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: A human readable name, primarily used for display purposes. READ-ONLY.
        :param str ocid: Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        :param str ref: Group URI
        :param str type: Identity Provider Type
        :param str value: Value of the tag.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        A human readable name, primarily used for display purposes. READ-ONLY.
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        Group URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Identity Provider Type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of the tag.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsIdentityProvidersIdentityProviderIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: A human readable name, primarily used for display purposes. READ-ONLY.
        :param str ocid: Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        :param str ref: Group URI
        :param str type: Identity Provider Type
        :param str value: Value of the tag.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        A human readable name, primarily used for display purposes. READ-ONLY.
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        Group URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Identity Provider Type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of the tag.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsIdentityProvidersIdentityProviderJitUserProvAssignedGroupResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ref: str,
                 value: str):
        """
        :param str display: A human readable name, primarily used for display purposes. READ-ONLY.
        :param str ref: Group URI
        :param str value: Value of the tag.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        A human readable name, primarily used for display purposes. READ-ONLY.
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        Group URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of the tag.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsIdentityProvidersIdentityProviderJitUserProvAttributeResult(dict):
    def __init__(__self__, *,
                 ref: str,
                 value: str):
        """
        :param str ref: Group URI
        :param str value: Value of the tag.
        """
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        Group URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of the tag.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsIdentityProvidersIdentityProviderJitUserProvGroupMappingResult(dict):
    def __init__(__self__, *,
                 idp_group: str,
                 ref: str,
                 value: str):
        """
        :param str idp_group: IDP Group Name
        :param str ref: Group URI
        :param str value: Value of the tag.
        """
        pulumi.set(__self__, "idp_group", idp_group)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="idpGroup")
    def idp_group(self) -> str:
        """
        IDP Group Name
        """
        return pulumi.get(self, "idp_group")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        Group URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of the tag.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsIdentityProvidersIdentityProviderMetaResult(dict):
    def __init__(__self__, *,
                 created: str,
                 last_modified: str,
                 location: str,
                 resource_type: str,
                 version: str):
        """
        :param str created: The DateTime the Resource was added to the Service Provider
        :param str last_modified: The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        :param str location: The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        :param str resource_type: Name of the resource type of the resource--for example, Users or Groups
        :param str version: The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "last_modified", last_modified)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        The DateTime the Resource was added to the Service Provider
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> str:
        """
        The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Name of the resource type of the resource--for example, Users or Groups
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsIdentityProvidersIdentityProviderTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Key or name of the tag.
        :param str value: Value of the tag.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key or name of the tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of the tag.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsIdentityProvidersIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProviderResult(dict):
    def __init__(__self__, *,
                 access_token_url: str,
                 account_linking_enabled: bool,
                 admin_scopes: Sequence[str],
                 authz_url: str,
                 client_credential_in_payload: bool,
                 clock_skew_in_seconds: int,
                 consumer_key: str,
                 consumer_secret: str,
                 discovery_url: str,
                 id_attribute: str,
                 profile_url: str,
                 redirect_url: str,
                 registration_enabled: bool,
                 scopes: Sequence[str],
                 service_provider_name: str,
                 status: str):
        """
        :param str access_token_url: Social IDP Access token URL
        :param bool account_linking_enabled: Whether account linking is enabled
        :param Sequence[str] admin_scopes: Admin scope to request
        :param str authz_url: Social IDP Authorization URL
        :param bool client_credential_in_payload: Whether the client credential is contained in payload
        :param int clock_skew_in_seconds: Social IDP allowed clock skew time
        :param str consumer_key: Social IDP Client Application Client ID
        :param str consumer_secret: Social IDP Client Application Client Secret
        :param str discovery_url: Discovery URL
        :param str id_attribute: Id attribute used for account linking
        :param str profile_url: Social IDP User profile URL
        :param str redirect_url: redirect URL for social idp
        :param bool registration_enabled: Whether registration is enabled
        :param Sequence[str] scopes: Scope to request
        :param str service_provider_name: Service Provider Name
        :param str status: Status
        """
        pulumi.set(__self__, "access_token_url", access_token_url)
        pulumi.set(__self__, "account_linking_enabled", account_linking_enabled)
        pulumi.set(__self__, "admin_scopes", admin_scopes)
        pulumi.set(__self__, "authz_url", authz_url)
        pulumi.set(__self__, "client_credential_in_payload", client_credential_in_payload)
        pulumi.set(__self__, "clock_skew_in_seconds", clock_skew_in_seconds)
        pulumi.set(__self__, "consumer_key", consumer_key)
        pulumi.set(__self__, "consumer_secret", consumer_secret)
        pulumi.set(__self__, "discovery_url", discovery_url)
        pulumi.set(__self__, "id_attribute", id_attribute)
        pulumi.set(__self__, "profile_url", profile_url)
        pulumi.set(__self__, "redirect_url", redirect_url)
        pulumi.set(__self__, "registration_enabled", registration_enabled)
        pulumi.set(__self__, "scopes", scopes)
        pulumi.set(__self__, "service_provider_name", service_provider_name)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="accessTokenUrl")
    def access_token_url(self) -> str:
        """
        Social IDP Access token URL
        """
        return pulumi.get(self, "access_token_url")

    @property
    @pulumi.getter(name="accountLinkingEnabled")
    def account_linking_enabled(self) -> bool:
        """
        Whether account linking is enabled
        """
        return pulumi.get(self, "account_linking_enabled")

    @property
    @pulumi.getter(name="adminScopes")
    def admin_scopes(self) -> Sequence[str]:
        """
        Admin scope to request
        """
        return pulumi.get(self, "admin_scopes")

    @property
    @pulumi.getter(name="authzUrl")
    def authz_url(self) -> str:
        """
        Social IDP Authorization URL
        """
        return pulumi.get(self, "authz_url")

    @property
    @pulumi.getter(name="clientCredentialInPayload")
    def client_credential_in_payload(self) -> bool:
        """
        Whether the client credential is contained in payload
        """
        return pulumi.get(self, "client_credential_in_payload")

    @property
    @pulumi.getter(name="clockSkewInSeconds")
    def clock_skew_in_seconds(self) -> int:
        """
        Social IDP allowed clock skew time
        """
        return pulumi.get(self, "clock_skew_in_seconds")

    @property
    @pulumi.getter(name="consumerKey")
    def consumer_key(self) -> str:
        """
        Social IDP Client Application Client ID
        """
        return pulumi.get(self, "consumer_key")

    @property
    @pulumi.getter(name="consumerSecret")
    def consumer_secret(self) -> str:
        """
        Social IDP Client Application Client Secret
        """
        return pulumi.get(self, "consumer_secret")

    @property
    @pulumi.getter(name="discoveryUrl")
    def discovery_url(self) -> str:
        """
        Discovery URL
        """
        return pulumi.get(self, "discovery_url")

    @property
    @pulumi.getter(name="idAttribute")
    def id_attribute(self) -> str:
        """
        Id attribute used for account linking
        """
        return pulumi.get(self, "id_attribute")

    @property
    @pulumi.getter(name="profileUrl")
    def profile_url(self) -> str:
        """
        Social IDP User profile URL
        """
        return pulumi.get(self, "profile_url")

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> str:
        """
        redirect URL for social idp
        """
        return pulumi.get(self, "redirect_url")

    @property
    @pulumi.getter(name="registrationEnabled")
    def registration_enabled(self) -> bool:
        """
        Whether registration is enabled
        """
        return pulumi.get(self, "registration_enabled")

    @property
    @pulumi.getter
    def scopes(self) -> Sequence[str]:
        """
        Scope to request
        """
        return pulumi.get(self, "scopes")

    @property
    @pulumi.getter(name="serviceProviderName")
    def service_provider_name(self) -> str:
        """
        Service Provider Name
        """
        return pulumi.get(self, "service_provider_name")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetDomainsIdentityProvidersIdentityProviderUrnietfparamsscimschemasoracleidcsextensionx509identityProviderResult(dict):
    def __init__(__self__, *,
                 cert_match_attribute: str,
                 crl_check_on_ocsp_failure_enabled: bool,
                 crl_enabled: bool,
                 crl_location: str,
                 crl_reload_duration: int,
                 ocsp_allow_unknown_response_status: bool,
                 ocsp_enable_signed_response: bool,
                 ocsp_enabled: bool,
                 ocsp_responder_url: str,
                 ocsp_revalidate_time: int,
                 ocsp_server_name: str,
                 ocsp_trust_cert_chains: Sequence[str],
                 other_cert_match_attribute: str,
                 signing_certificate_chains: Sequence[str],
                 user_match_attribute: str):
        """
        :param str cert_match_attribute: X509 Certificate Matching Attribute
        :param bool crl_check_on_ocsp_failure_enabled: Fallback on CRL Validation if OCSP fails.
        :param bool crl_enabled: Set to true to enable CRL Validation
        :param str crl_location: CRL Location URL
        :param int crl_reload_duration: Fetch the CRL contents every X minutes
        :param bool ocsp_allow_unknown_response_status: Allow access if OCSP response is UNKNOWN or OCSP Responder does not respond within the timeout duration
        :param bool ocsp_enable_signed_response: Describes if the OCSP response is signed
        :param bool ocsp_enabled: Set to true to enable OCSP Validation
        :param str ocsp_responder_url: This property specifies OCSP Responder URL.
        :param int ocsp_revalidate_time: Revalidate OCSP status for user after X hours
        :param str ocsp_server_name: This property specifies the OCSP Server alias name
        :param Sequence[str] ocsp_trust_cert_chains: OCSP Trusted Certificate Chain
        :param str other_cert_match_attribute: Check for specific conditions of other certificate attributes
        :param Sequence[str] signing_certificate_chains: Certificate alias list to create a chain for the incoming client certificate
        :param str user_match_attribute: This property specifies the userstore attribute value that must match the incoming certificate attribute.
        """
        pulumi.set(__self__, "cert_match_attribute", cert_match_attribute)
        pulumi.set(__self__, "crl_check_on_ocsp_failure_enabled", crl_check_on_ocsp_failure_enabled)
        pulumi.set(__self__, "crl_enabled", crl_enabled)
        pulumi.set(__self__, "crl_location", crl_location)
        pulumi.set(__self__, "crl_reload_duration", crl_reload_duration)
        pulumi.set(__self__, "ocsp_allow_unknown_response_status", ocsp_allow_unknown_response_status)
        pulumi.set(__self__, "ocsp_enable_signed_response", ocsp_enable_signed_response)
        pulumi.set(__self__, "ocsp_enabled", ocsp_enabled)
        pulumi.set(__self__, "ocsp_responder_url", ocsp_responder_url)
        pulumi.set(__self__, "ocsp_revalidate_time", ocsp_revalidate_time)
        pulumi.set(__self__, "ocsp_server_name", ocsp_server_name)
        pulumi.set(__self__, "ocsp_trust_cert_chains", ocsp_trust_cert_chains)
        pulumi.set(__self__, "other_cert_match_attribute", other_cert_match_attribute)
        pulumi.set(__self__, "signing_certificate_chains", signing_certificate_chains)
        pulumi.set(__self__, "user_match_attribute", user_match_attribute)

    @property
    @pulumi.getter(name="certMatchAttribute")
    def cert_match_attribute(self) -> str:
        """
        X509 Certificate Matching Attribute
        """
        return pulumi.get(self, "cert_match_attribute")

    @property
    @pulumi.getter(name="crlCheckOnOcspFailureEnabled")
    def crl_check_on_ocsp_failure_enabled(self) -> bool:
        """
        Fallback on CRL Validation if OCSP fails.
        """
        return pulumi.get(self, "crl_check_on_ocsp_failure_enabled")

    @property
    @pulumi.getter(name="crlEnabled")
    def crl_enabled(self) -> bool:
        """
        Set to true to enable CRL Validation
        """
        return pulumi.get(self, "crl_enabled")

    @property
    @pulumi.getter(name="crlLocation")
    def crl_location(self) -> str:
        """
        CRL Location URL
        """
        return pulumi.get(self, "crl_location")

    @property
    @pulumi.getter(name="crlReloadDuration")
    def crl_reload_duration(self) -> int:
        """
        Fetch the CRL contents every X minutes
        """
        return pulumi.get(self, "crl_reload_duration")

    @property
    @pulumi.getter(name="ocspAllowUnknownResponseStatus")
    def ocsp_allow_unknown_response_status(self) -> bool:
        """
        Allow access if OCSP response is UNKNOWN or OCSP Responder does not respond within the timeout duration
        """
        return pulumi.get(self, "ocsp_allow_unknown_response_status")

    @property
    @pulumi.getter(name="ocspEnableSignedResponse")
    def ocsp_enable_signed_response(self) -> bool:
        """
        Describes if the OCSP response is signed
        """
        return pulumi.get(self, "ocsp_enable_signed_response")

    @property
    @pulumi.getter(name="ocspEnabled")
    def ocsp_enabled(self) -> bool:
        """
        Set to true to enable OCSP Validation
        """
        return pulumi.get(self, "ocsp_enabled")

    @property
    @pulumi.getter(name="ocspResponderUrl")
    def ocsp_responder_url(self) -> str:
        """
        This property specifies OCSP Responder URL.
        """
        return pulumi.get(self, "ocsp_responder_url")

    @property
    @pulumi.getter(name="ocspRevalidateTime")
    def ocsp_revalidate_time(self) -> int:
        """
        Revalidate OCSP status for user after X hours
        """
        return pulumi.get(self, "ocsp_revalidate_time")

    @property
    @pulumi.getter(name="ocspServerName")
    def ocsp_server_name(self) -> str:
        """
        This property specifies the OCSP Server alias name
        """
        return pulumi.get(self, "ocsp_server_name")

    @property
    @pulumi.getter(name="ocspTrustCertChains")
    def ocsp_trust_cert_chains(self) -> Sequence[str]:
        """
        OCSP Trusted Certificate Chain
        """
        return pulumi.get(self, "ocsp_trust_cert_chains")

    @property
    @pulumi.getter(name="otherCertMatchAttribute")
    def other_cert_match_attribute(self) -> str:
        """
        Check for specific conditions of other certificate attributes
        """
        return pulumi.get(self, "other_cert_match_attribute")

    @property
    @pulumi.getter(name="signingCertificateChains")
    def signing_certificate_chains(self) -> Sequence[str]:
        """
        Certificate alias list to create a chain for the incoming client certificate
        """
        return pulumi.get(self, "signing_certificate_chains")

    @property
    @pulumi.getter(name="userMatchAttribute")
    def user_match_attribute(self) -> str:
        """
        This property specifies the userstore attribute value that must match the incoming certificate attribute.
        """
        return pulumi.get(self, "user_match_attribute")


@pulumi.output_type
class GetDomainsKmsiSettingIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: The displayName of the User or App who modified this Resource
        :param str ocid: Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        :param str ref: The URI of the SCIM resource that represents the User or App who modified this Resource
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: Value of the tag.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        The displayName of the User or App who modified this Resource
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI of the SCIM resource that represents the User or App who modified this Resource
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of the tag.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsKmsiSettingIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: The displayName of the User or App who modified this Resource
        :param str ocid: Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        :param str ref: The URI of the SCIM resource that represents the User or App who modified this Resource
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: Value of the tag.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        The displayName of the User or App who modified this Resource
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI of the SCIM resource that represents the User or App who modified this Resource
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of the tag.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsKmsiSettingMetaResult(dict):
    def __init__(__self__, *,
                 created: str,
                 last_modified: str,
                 location: str,
                 resource_type: str,
                 version: str):
        """
        :param str created: The DateTime the Resource was added to the Service Provider
        :param str last_modified: The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        :param str location: The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        :param str resource_type: Name of the resource type of the resource--for example, Users or Groups
        :param str version: The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "last_modified", last_modified)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        The DateTime the Resource was added to the Service Provider
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> str:
        """
        The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Name of the resource type of the resource--for example, Users or Groups
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsKmsiSettingTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Key or name of the tag.
        :param str value: Value of the tag.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key or name of the tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of the tag.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsKmsiSettingsKmsiSettingResult(dict):
    def __init__(__self__, *,
                 attribute_sets: Sequence[str],
                 attributes: str,
                 authorization: str,
                 compartment_ocid: str,
                 delete_in_progress: bool,
                 domain_ocid: str,
                 external_id: str,
                 id: str,
                 idcs_created_bies: Sequence['outputs.GetDomainsKmsiSettingsKmsiSettingIdcsCreatedByResult'],
                 idcs_endpoint: str,
                 idcs_last_modified_bies: Sequence['outputs.GetDomainsKmsiSettingsKmsiSettingIdcsLastModifiedByResult'],
                 idcs_last_upgraded_in_release: str,
                 idcs_prevented_operations: Sequence[str],
                 kmsi_feature_enabled: bool,
                 kmsi_prompt_enabled: bool,
                 kmsi_setting_id: str,
                 last_enabled_on: str,
                 last_used_validity_in_days: int,
                 max_allowed_sessions: int,
                 metas: Sequence['outputs.GetDomainsKmsiSettingsKmsiSettingMetaResult'],
                 ocid: str,
                 resource_type_schema_version: str,
                 schemas: Sequence[str],
                 tags: Sequence['outputs.GetDomainsKmsiSettingsKmsiSettingTagResult'],
                 tenancy_ocid: str,
                 token_validity_in_days: int,
                 tou_prompt_disabled: bool):
        """
        :param Sequence[str] attribute_sets: A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
        :param str attributes: A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
        :param str authorization: The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
        :param str compartment_ocid: Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
        :param bool delete_in_progress: A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
        :param str domain_ocid: Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
        :param str external_id: An identifier for the Resource as defined by the Service Consumer. The externalId may simplify identification of the Resource between Service Consumer and Service Provider by allowing the Consumer to refer to the Resource with its own identifier, obviating the need to store a local mapping between the local identifier of the Resource and the identifier used by the Service Provider. Each Resource MAY include a non-empty externalId value. The value of the externalId attribute is always issued by the Service Consumer and can never be specified by the Service Provider. The Service Provider MUST always interpret the externalId as scoped to the Service Consumer's tenant.
        :param str id: Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider's entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
        :param Sequence['GetDomainsKmsiSettingsKmsiSettingIdcsCreatedByArgs'] idcs_created_bies: The User or App who created the Resource
        :param str idcs_endpoint: The basic endpoint for the identity domain
        :param Sequence['GetDomainsKmsiSettingsKmsiSettingIdcsLastModifiedByArgs'] idcs_last_modified_bies: The User or App who modified the Resource
        :param str idcs_last_upgraded_in_release: The release number when the resource was upgraded.
        :param Sequence[str] idcs_prevented_operations: Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
        :param bool kmsi_feature_enabled: Identifier represents KMSI feature is enabled or not.
        :param bool kmsi_prompt_enabled: Identifier represents KMSI to be prompted to user or not.
        :param str last_enabled_on: Timestamp of when the KmsiSettings was enabled last time.
        :param int last_used_validity_in_days: Identifier represents duration in days within which kmsi token must be used.
        :param int max_allowed_sessions: Identifier represents maximum KMSI sessions allowed in the system.
        :param Sequence['GetDomainsKmsiSettingsKmsiSettingMetaArgs'] metas: A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
        :param str ocid: Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        :param str resource_type_schema_version: An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
        :param Sequence[str] schemas: REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \\"enterprise\\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
        :param Sequence['GetDomainsKmsiSettingsKmsiSettingTagArgs'] tags: A list of tags on this resource.
        :param str tenancy_ocid: Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
        :param int token_validity_in_days: Identifier represents validity duration in days.
        :param bool tou_prompt_disabled: Identifier represents whether user is prompted for ToU or not.
        """
        pulumi.set(__self__, "attribute_sets", attribute_sets)
        pulumi.set(__self__, "attributes", attributes)
        pulumi.set(__self__, "authorization", authorization)
        pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        pulumi.set(__self__, "domain_ocid", domain_ocid)
        pulumi.set(__self__, "external_id", external_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        pulumi.set(__self__, "idcs_endpoint", idcs_endpoint)
        pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        pulumi.set(__self__, "kmsi_feature_enabled", kmsi_feature_enabled)
        pulumi.set(__self__, "kmsi_prompt_enabled", kmsi_prompt_enabled)
        pulumi.set(__self__, "kmsi_setting_id", kmsi_setting_id)
        pulumi.set(__self__, "last_enabled_on", last_enabled_on)
        pulumi.set(__self__, "last_used_validity_in_days", last_used_validity_in_days)
        pulumi.set(__self__, "max_allowed_sessions", max_allowed_sessions)
        pulumi.set(__self__, "metas", metas)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "resource_type_schema_version", resource_type_schema_version)
        pulumi.set(__self__, "schemas", schemas)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)
        pulumi.set(__self__, "token_validity_in_days", token_validity_in_days)
        pulumi.set(__self__, "tou_prompt_disabled", tou_prompt_disabled)

    @property
    @pulumi.getter(name="attributeSets")
    def attribute_sets(self) -> Sequence[str]:
        """
        A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
        """
        return pulumi.get(self, "attribute_sets")

    @property
    @pulumi.getter
    def attributes(self) -> str:
        """
        A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
        """
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter
    def authorization(self) -> str:
        """
        The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
        """
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> bool:
        """
        A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
        """
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> str:
        """
        An identifier for the Resource as defined by the Service Consumer. The externalId may simplify identification of the Resource between Service Consumer and Service Provider by allowing the Consumer to refer to the Resource with its own identifier, obviating the need to store a local mapping between the local identifier of the Resource and the identifier used by the Service Provider. Each Resource MAY include a non-empty externalId value. The value of the externalId attribute is always issued by the Service Consumer and can never be specified by the Service Provider. The Service Provider MUST always interpret the externalId as scoped to the Service Consumer's tenant.
        """
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider's entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Sequence['outputs.GetDomainsKmsiSettingsKmsiSettingIdcsCreatedByResult']:
        """
        The User or App who created the Resource
        """
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> str:
        """
        The basic endpoint for the identity domain
        """
        return pulumi.get(self, "idcs_endpoint")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Sequence['outputs.GetDomainsKmsiSettingsKmsiSettingIdcsLastModifiedByResult']:
        """
        The User or App who modified the Resource
        """
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> str:
        """
        The release number when the resource was upgraded.
        """
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Sequence[str]:
        """
        Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
        """
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter(name="kmsiFeatureEnabled")
    def kmsi_feature_enabled(self) -> bool:
        """
        Identifier represents KMSI feature is enabled or not.
        """
        return pulumi.get(self, "kmsi_feature_enabled")

    @property
    @pulumi.getter(name="kmsiPromptEnabled")
    def kmsi_prompt_enabled(self) -> bool:
        """
        Identifier represents KMSI to be prompted to user or not.
        """
        return pulumi.get(self, "kmsi_prompt_enabled")

    @property
    @pulumi.getter(name="kmsiSettingId")
    def kmsi_setting_id(self) -> str:
        return pulumi.get(self, "kmsi_setting_id")

    @property
    @pulumi.getter(name="lastEnabledOn")
    def last_enabled_on(self) -> str:
        """
        Timestamp of when the KmsiSettings was enabled last time.
        """
        return pulumi.get(self, "last_enabled_on")

    @property
    @pulumi.getter(name="lastUsedValidityInDays")
    def last_used_validity_in_days(self) -> int:
        """
        Identifier represents duration in days within which kmsi token must be used.
        """
        return pulumi.get(self, "last_used_validity_in_days")

    @property
    @pulumi.getter(name="maxAllowedSessions")
    def max_allowed_sessions(self) -> int:
        """
        Identifier represents maximum KMSI sessions allowed in the system.
        """
        return pulumi.get(self, "max_allowed_sessions")

    @property
    @pulumi.getter
    def metas(self) -> Sequence['outputs.GetDomainsKmsiSettingsKmsiSettingMetaResult']:
        """
        A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
        """
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> str:
        """
        An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
        """
        return pulumi.get(self, "resource_type_schema_version")

    @property
    @pulumi.getter
    def schemas(self) -> Sequence[str]:
        """
        REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \\"enterprise\\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
        """
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetDomainsKmsiSettingsKmsiSettingTagResult']:
        """
        A list of tags on this resource.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "tenancy_ocid")

    @property
    @pulumi.getter(name="tokenValidityInDays")
    def token_validity_in_days(self) -> int:
        """
        Identifier represents validity duration in days.
        """
        return pulumi.get(self, "token_validity_in_days")

    @property
    @pulumi.getter(name="touPromptDisabled")
    def tou_prompt_disabled(self) -> bool:
        """
        Identifier represents whether user is prompted for ToU or not.
        """
        return pulumi.get(self, "tou_prompt_disabled")


@pulumi.output_type
class GetDomainsKmsiSettingsKmsiSettingIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: The displayName of the User or App who modified this Resource
        :param str ocid: Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        :param str ref: The URI of the SCIM resource that represents the User or App who modified this Resource
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: Value of the tag.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        The displayName of the User or App who modified this Resource
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI of the SCIM resource that represents the User or App who modified this Resource
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of the tag.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsKmsiSettingsKmsiSettingIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: The displayName of the User or App who modified this Resource
        :param str ocid: Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        :param str ref: The URI of the SCIM resource that represents the User or App who modified this Resource
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: Value of the tag.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        The displayName of the User or App who modified this Resource
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI of the SCIM resource that represents the User or App who modified this Resource
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of the tag.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsKmsiSettingsKmsiSettingMetaResult(dict):
    def __init__(__self__, *,
                 created: str,
                 last_modified: str,
                 location: str,
                 resource_type: str,
                 version: str):
        """
        :param str created: The DateTime the Resource was added to the Service Provider
        :param str last_modified: The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        :param str location: The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        :param str resource_type: Name of the resource type of the resource--for example, Users or Groups
        :param str version: The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "last_modified", last_modified)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        The DateTime the Resource was added to the Service Provider
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> str:
        """
        The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Name of the resource type of the resource--for example, Users or Groups
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsKmsiSettingsKmsiSettingTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Key or name of the tag.
        :param str value: Value of the tag.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key or name of the tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of the tag.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyApiKeyIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: User display name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyApiKeyIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: User display name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyApiKeyMetaResult(dict):
    def __init__(__self__, *,
                 created: str,
                 last_modified: str,
                 location: str,
                 resource_type: str,
                 version: str):
        """
        :param str created: The DateTime the Resource was added to the Service Provider
        :param str last_modified: The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        :param str location: The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        :param str resource_type: Name of the resource type of the resource--for example, Users or Groups
        :param str version: The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "last_modified", last_modified)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        The DateTime the Resource was added to the Service Provider
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> str:
        """
        The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Name of the resource type of the resource--for example, Users or Groups
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsMyApiKeyTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Key or name of the tag.
        :param str value: User's id
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key or name of the tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyApiKeyUserResult(dict):
    def __init__(__self__, *,
                 display: str,
                 name: str,
                 ocid: str,
                 ref: str,
                 value: str):
        """
        :param str display: User display name
        :param str name: User name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        User name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyApiKeysMyApiKeyResult(dict):
    def __init__(__self__, *,
                 authorization: str,
                 compartment_ocid: str,
                 delete_in_progress: bool,
                 description: str,
                 domain_ocid: str,
                 fingerprint: str,
                 id: str,
                 idcs_created_bies: Sequence['outputs.GetDomainsMyApiKeysMyApiKeyIdcsCreatedByResult'],
                 idcs_endpoint: str,
                 idcs_last_modified_bies: Sequence['outputs.GetDomainsMyApiKeysMyApiKeyIdcsLastModifiedByResult'],
                 idcs_last_upgraded_in_release: str,
                 idcs_prevented_operations: Sequence[str],
                 key: str,
                 metas: Sequence['outputs.GetDomainsMyApiKeysMyApiKeyMetaResult'],
                 ocid: str,
                 resource_type_schema_version: str,
                 schemas: Sequence[str],
                 tags: Sequence['outputs.GetDomainsMyApiKeysMyApiKeyTagResult'],
                 tenancy_ocid: str,
                 users: Sequence['outputs.GetDomainsMyApiKeysMyApiKeyUserResult']):
        """
        :param str authorization: The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
        :param str compartment_ocid: Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
        :param bool delete_in_progress: A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
        :param str description: Description
        :param str domain_ocid: Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
        :param str fingerprint: Fingerprint
        :param str id: Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider's entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
        :param Sequence['GetDomainsMyApiKeysMyApiKeyIdcsCreatedByArgs'] idcs_created_bies: The User or App who created the Resource
        :param str idcs_endpoint: The basic endpoint for the identity domain
        :param Sequence['GetDomainsMyApiKeysMyApiKeyIdcsLastModifiedByArgs'] idcs_last_modified_bies: The User or App who modified the Resource
        :param str idcs_last_upgraded_in_release: The release number when the resource was upgraded.
        :param Sequence[str] idcs_prevented_operations: Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
        :param str key: Key or name of the tag.
        :param Sequence['GetDomainsMyApiKeysMyApiKeyMetaArgs'] metas: A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
        :param str ocid: User's ocid
        :param str resource_type_schema_version: An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
        :param Sequence[str] schemas: REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \\"enterprise\\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
        :param Sequence['GetDomainsMyApiKeysMyApiKeyTagArgs'] tags: A list of tags on this resource.
        :param str tenancy_ocid: Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
        :param Sequence['GetDomainsMyApiKeysMyApiKeyUserArgs'] users: User linked to api key
        """
        pulumi.set(__self__, "authorization", authorization)
        pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "domain_ocid", domain_ocid)
        pulumi.set(__self__, "fingerprint", fingerprint)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        pulumi.set(__self__, "idcs_endpoint", idcs_endpoint)
        pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "metas", metas)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "resource_type_schema_version", resource_type_schema_version)
        pulumi.set(__self__, "schemas", schemas)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)
        pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter
    def authorization(self) -> str:
        """
        The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
        """
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> bool:
        """
        A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
        """
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter
    def fingerprint(self) -> str:
        """
        Fingerprint
        """
        return pulumi.get(self, "fingerprint")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider's entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Sequence['outputs.GetDomainsMyApiKeysMyApiKeyIdcsCreatedByResult']:
        """
        The User or App who created the Resource
        """
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> str:
        """
        The basic endpoint for the identity domain
        """
        return pulumi.get(self, "idcs_endpoint")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Sequence['outputs.GetDomainsMyApiKeysMyApiKeyIdcsLastModifiedByResult']:
        """
        The User or App who modified the Resource
        """
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> str:
        """
        The release number when the resource was upgraded.
        """
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Sequence[str]:
        """
        Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
        """
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key or name of the tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def metas(self) -> Sequence['outputs.GetDomainsMyApiKeysMyApiKeyMetaResult']:
        """
        A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
        """
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> str:
        """
        An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
        """
        return pulumi.get(self, "resource_type_schema_version")

    @property
    @pulumi.getter
    def schemas(self) -> Sequence[str]:
        """
        REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \\"enterprise\\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
        """
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetDomainsMyApiKeysMyApiKeyTagResult']:
        """
        A list of tags on this resource.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "tenancy_ocid")

    @property
    @pulumi.getter
    def users(self) -> Sequence['outputs.GetDomainsMyApiKeysMyApiKeyUserResult']:
        """
        User linked to api key
        """
        return pulumi.get(self, "users")


@pulumi.output_type
class GetDomainsMyApiKeysMyApiKeyIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: User display name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyApiKeysMyApiKeyIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: User display name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyApiKeysMyApiKeyMetaResult(dict):
    def __init__(__self__, *,
                 created: str,
                 last_modified: str,
                 location: str,
                 resource_type: str,
                 version: str):
        """
        :param str created: The DateTime the Resource was added to the Service Provider
        :param str last_modified: The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        :param str location: The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        :param str resource_type: Name of the resource type of the resource--for example, Users or Groups
        :param str version: The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "last_modified", last_modified)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        The DateTime the Resource was added to the Service Provider
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> str:
        """
        The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Name of the resource type of the resource--for example, Users or Groups
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsMyApiKeysMyApiKeyTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Key or name of the tag.
        :param str value: User's id
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key or name of the tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyApiKeysMyApiKeyUserResult(dict):
    def __init__(__self__, *,
                 display: str,
                 name: str,
                 ocid: str,
                 ref: str,
                 value: str):
        """
        :param str display: User display name
        :param str name: User name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        User name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyAuthTokenIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: User display name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyAuthTokenIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: User display name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyAuthTokenMetaResult(dict):
    def __init__(__self__, *,
                 created: str,
                 last_modified: str,
                 location: str,
                 resource_type: str,
                 version: str):
        """
        :param str created: The DateTime the Resource was added to the Service Provider
        :param str last_modified: The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        :param str location: The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        :param str resource_type: Name of the resource type of the resource--for example, Users or Groups
        :param str version: The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "last_modified", last_modified)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        The DateTime the Resource was added to the Service Provider
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> str:
        """
        The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Name of the resource type of the resource--for example, Users or Groups
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsMyAuthTokenTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Key or name of the tag.
        :param str value: User's id
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key or name of the tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyAuthTokenUserResult(dict):
    def __init__(__self__, *,
                 display: str,
                 name: str,
                 ocid: str,
                 ref: str,
                 value: str):
        """
        :param str display: User display name
        :param str name: User name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        User name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyAuthTokensMyAuthTokenResult(dict):
    def __init__(__self__, *,
                 authorization: str,
                 compartment_ocid: str,
                 delete_in_progress: bool,
                 description: str,
                 domain_ocid: str,
                 expires_on: str,
                 id: str,
                 idcs_created_bies: Sequence['outputs.GetDomainsMyAuthTokensMyAuthTokenIdcsCreatedByResult'],
                 idcs_endpoint: str,
                 idcs_last_modified_bies: Sequence['outputs.GetDomainsMyAuthTokensMyAuthTokenIdcsLastModifiedByResult'],
                 idcs_last_upgraded_in_release: str,
                 idcs_prevented_operations: Sequence[str],
                 metas: Sequence['outputs.GetDomainsMyAuthTokensMyAuthTokenMetaResult'],
                 ocid: str,
                 resource_type_schema_version: str,
                 schemas: Sequence[str],
                 status: str,
                 tags: Sequence['outputs.GetDomainsMyAuthTokensMyAuthTokenTagResult'],
                 tenancy_ocid: str,
                 users: Sequence['outputs.GetDomainsMyAuthTokensMyAuthTokenUserResult']):
        """
        :param str authorization: The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
        :param str compartment_ocid: Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
        :param bool delete_in_progress: A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
        :param str description: Description
        :param str domain_ocid: Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
        :param str expires_on: User credential expires on
        :param str id: Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider's entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
        :param Sequence['GetDomainsMyAuthTokensMyAuthTokenIdcsCreatedByArgs'] idcs_created_bies: The User or App who created the Resource
        :param str idcs_endpoint: The basic endpoint for the identity domain
        :param Sequence['GetDomainsMyAuthTokensMyAuthTokenIdcsLastModifiedByArgs'] idcs_last_modified_bies: The User or App who modified the Resource
        :param str idcs_last_upgraded_in_release: The release number when the resource was upgraded.
        :param Sequence[str] idcs_prevented_operations: Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
        :param Sequence['GetDomainsMyAuthTokensMyAuthTokenMetaArgs'] metas: A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
        :param str ocid: User's ocid
        :param str resource_type_schema_version: An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
        :param Sequence[str] schemas: REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \\"enterprise\\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
        :param str status: User credential status
        :param Sequence['GetDomainsMyAuthTokensMyAuthTokenTagArgs'] tags: A list of tags on this resource.
        :param str tenancy_ocid: Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
        :param Sequence['GetDomainsMyAuthTokensMyAuthTokenUserArgs'] users: User linked to auth token
        """
        pulumi.set(__self__, "authorization", authorization)
        pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "domain_ocid", domain_ocid)
        pulumi.set(__self__, "expires_on", expires_on)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        pulumi.set(__self__, "idcs_endpoint", idcs_endpoint)
        pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        pulumi.set(__self__, "metas", metas)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "resource_type_schema_version", resource_type_schema_version)
        pulumi.set(__self__, "schemas", schemas)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)
        pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter
    def authorization(self) -> str:
        """
        The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
        """
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> bool:
        """
        A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
        """
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter(name="expiresOn")
    def expires_on(self) -> str:
        """
        User credential expires on
        """
        return pulumi.get(self, "expires_on")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider's entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Sequence['outputs.GetDomainsMyAuthTokensMyAuthTokenIdcsCreatedByResult']:
        """
        The User or App who created the Resource
        """
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> str:
        """
        The basic endpoint for the identity domain
        """
        return pulumi.get(self, "idcs_endpoint")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Sequence['outputs.GetDomainsMyAuthTokensMyAuthTokenIdcsLastModifiedByResult']:
        """
        The User or App who modified the Resource
        """
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> str:
        """
        The release number when the resource was upgraded.
        """
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Sequence[str]:
        """
        Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
        """
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter
    def metas(self) -> Sequence['outputs.GetDomainsMyAuthTokensMyAuthTokenMetaResult']:
        """
        A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
        """
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> str:
        """
        An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
        """
        return pulumi.get(self, "resource_type_schema_version")

    @property
    @pulumi.getter
    def schemas(self) -> Sequence[str]:
        """
        REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \\"enterprise\\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
        """
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        User credential status
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetDomainsMyAuthTokensMyAuthTokenTagResult']:
        """
        A list of tags on this resource.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "tenancy_ocid")

    @property
    @pulumi.getter
    def users(self) -> Sequence['outputs.GetDomainsMyAuthTokensMyAuthTokenUserResult']:
        """
        User linked to auth token
        """
        return pulumi.get(self, "users")


@pulumi.output_type
class GetDomainsMyAuthTokensMyAuthTokenIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: User display name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyAuthTokensMyAuthTokenIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: User display name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyAuthTokensMyAuthTokenMetaResult(dict):
    def __init__(__self__, *,
                 created: str,
                 last_modified: str,
                 location: str,
                 resource_type: str,
                 version: str):
        """
        :param str created: The DateTime the Resource was added to the Service Provider
        :param str last_modified: The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        :param str location: The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        :param str resource_type: Name of the resource type of the resource--for example, Users or Groups
        :param str version: The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "last_modified", last_modified)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        The DateTime the Resource was added to the Service Provider
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> str:
        """
        The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Name of the resource type of the resource--for example, Users or Groups
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsMyAuthTokensMyAuthTokenTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Key or name of the tag.
        :param str value: User's id
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key or name of the tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyAuthTokensMyAuthTokenUserResult(dict):
    def __init__(__self__, *,
                 display: str,
                 name: str,
                 ocid: str,
                 ref: str,
                 value: str):
        """
        :param str display: User display name
        :param str name: User name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        User name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyCustomerSecretKeyIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: User display name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyCustomerSecretKeyIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: User display name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyCustomerSecretKeyMetaResult(dict):
    def __init__(__self__, *,
                 created: str,
                 last_modified: str,
                 location: str,
                 resource_type: str,
                 version: str):
        """
        :param str created: The DateTime the Resource was added to the Service Provider
        :param str last_modified: The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        :param str location: The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        :param str resource_type: Name of the resource type of the resource--for example, Users or Groups
        :param str version: The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "last_modified", last_modified)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        The DateTime the Resource was added to the Service Provider
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> str:
        """
        The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Name of the resource type of the resource--for example, Users or Groups
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsMyCustomerSecretKeyTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Key or name of the tag.
        :param str value: User's id
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key or name of the tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyCustomerSecretKeyUserResult(dict):
    def __init__(__self__, *,
                 display: str,
                 name: str,
                 ocid: str,
                 ref: str,
                 value: str):
        """
        :param str display: User display name
        :param str name: User name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        User name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyCustomerSecretKeysMyCustomerSecretKeyResult(dict):
    def __init__(__self__, *,
                 access_key: str,
                 authorization: str,
                 compartment_ocid: str,
                 delete_in_progress: bool,
                 description: str,
                 display_name: str,
                 domain_ocid: str,
                 expires_on: str,
                 id: str,
                 idcs_created_bies: Sequence['outputs.GetDomainsMyCustomerSecretKeysMyCustomerSecretKeyIdcsCreatedByResult'],
                 idcs_endpoint: str,
                 idcs_last_modified_bies: Sequence['outputs.GetDomainsMyCustomerSecretKeysMyCustomerSecretKeyIdcsLastModifiedByResult'],
                 idcs_last_upgraded_in_release: str,
                 idcs_prevented_operations: Sequence[str],
                 metas: Sequence['outputs.GetDomainsMyCustomerSecretKeysMyCustomerSecretKeyMetaResult'],
                 ocid: str,
                 resource_type_schema_version: str,
                 schemas: Sequence[str],
                 status: str,
                 tags: Sequence['outputs.GetDomainsMyCustomerSecretKeysMyCustomerSecretKeyTagResult'],
                 tenancy_ocid: str,
                 users: Sequence['outputs.GetDomainsMyCustomerSecretKeysMyCustomerSecretKeyUserResult']):
        """
        :param str access_key: Access key
        :param str authorization: The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
        :param str compartment_ocid: Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
        :param bool delete_in_progress: A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
        :param str description: Description
        :param str display_name: Display Name
        :param str domain_ocid: Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
        :param str expires_on: User credential expires on
        :param str id: Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider's entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
        :param Sequence['GetDomainsMyCustomerSecretKeysMyCustomerSecretKeyIdcsCreatedByArgs'] idcs_created_bies: The User or App who created the Resource
        :param str idcs_endpoint: The basic endpoint for the identity domain
        :param Sequence['GetDomainsMyCustomerSecretKeysMyCustomerSecretKeyIdcsLastModifiedByArgs'] idcs_last_modified_bies: The User or App who modified the Resource
        :param str idcs_last_upgraded_in_release: The release number when the resource was upgraded.
        :param Sequence[str] idcs_prevented_operations: Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
        :param Sequence['GetDomainsMyCustomerSecretKeysMyCustomerSecretKeyMetaArgs'] metas: A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
        :param str ocid: User's ocid
        :param str resource_type_schema_version: An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
        :param Sequence[str] schemas: REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \\"enterprise\\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
        :param str status: User credential status
        :param Sequence['GetDomainsMyCustomerSecretKeysMyCustomerSecretKeyTagArgs'] tags: A list of tags on this resource.
        :param str tenancy_ocid: Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
        :param Sequence['GetDomainsMyCustomerSecretKeysMyCustomerSecretKeyUserArgs'] users: User linked to customer secret key
        """
        pulumi.set(__self__, "access_key", access_key)
        pulumi.set(__self__, "authorization", authorization)
        pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "domain_ocid", domain_ocid)
        pulumi.set(__self__, "expires_on", expires_on)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        pulumi.set(__self__, "idcs_endpoint", idcs_endpoint)
        pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        pulumi.set(__self__, "metas", metas)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "resource_type_schema_version", resource_type_schema_version)
        pulumi.set(__self__, "schemas", schemas)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)
        pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> str:
        """
        Access key
        """
        return pulumi.get(self, "access_key")

    @property
    @pulumi.getter
    def authorization(self) -> str:
        """
        The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
        """
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> bool:
        """
        A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
        """
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Display Name
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter(name="expiresOn")
    def expires_on(self) -> str:
        """
        User credential expires on
        """
        return pulumi.get(self, "expires_on")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider's entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Sequence['outputs.GetDomainsMyCustomerSecretKeysMyCustomerSecretKeyIdcsCreatedByResult']:
        """
        The User or App who created the Resource
        """
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> str:
        """
        The basic endpoint for the identity domain
        """
        return pulumi.get(self, "idcs_endpoint")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Sequence['outputs.GetDomainsMyCustomerSecretKeysMyCustomerSecretKeyIdcsLastModifiedByResult']:
        """
        The User or App who modified the Resource
        """
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> str:
        """
        The release number when the resource was upgraded.
        """
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Sequence[str]:
        """
        Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
        """
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter
    def metas(self) -> Sequence['outputs.GetDomainsMyCustomerSecretKeysMyCustomerSecretKeyMetaResult']:
        """
        A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
        """
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> str:
        """
        An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
        """
        return pulumi.get(self, "resource_type_schema_version")

    @property
    @pulumi.getter
    def schemas(self) -> Sequence[str]:
        """
        REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \\"enterprise\\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
        """
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        User credential status
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetDomainsMyCustomerSecretKeysMyCustomerSecretKeyTagResult']:
        """
        A list of tags on this resource.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "tenancy_ocid")

    @property
    @pulumi.getter
    def users(self) -> Sequence['outputs.GetDomainsMyCustomerSecretKeysMyCustomerSecretKeyUserResult']:
        """
        User linked to customer secret key
        """
        return pulumi.get(self, "users")


@pulumi.output_type
class GetDomainsMyCustomerSecretKeysMyCustomerSecretKeyIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: User display name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyCustomerSecretKeysMyCustomerSecretKeyIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: User display name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyCustomerSecretKeysMyCustomerSecretKeyMetaResult(dict):
    def __init__(__self__, *,
                 created: str,
                 last_modified: str,
                 location: str,
                 resource_type: str,
                 version: str):
        """
        :param str created: The DateTime the Resource was added to the Service Provider
        :param str last_modified: The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        :param str location: The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        :param str resource_type: Name of the resource type of the resource--for example, Users or Groups
        :param str version: The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "last_modified", last_modified)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        The DateTime the Resource was added to the Service Provider
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> str:
        """
        The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Name of the resource type of the resource--for example, Users or Groups
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsMyCustomerSecretKeysMyCustomerSecretKeyTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Key or name of the tag.
        :param str value: User's id
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key or name of the tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyCustomerSecretKeysMyCustomerSecretKeyUserResult(dict):
    def __init__(__self__, *,
                 display: str,
                 name: str,
                 ocid: str,
                 ref: str,
                 value: str):
        """
        :param str display: User display name
        :param str name: User name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        User name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyDeviceAdditionalAttributeResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Key or name of the tag.
        :param str value: The identifier of the user
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key or name of the tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The identifier of the user
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyDeviceAuthenticationFactorResult(dict):
    def __init__(__self__, *,
                 public_key: str,
                 status: str,
                 type: str):
        """
        :param str public_key: Authentication Factor public key issued by client
        :param str status: Device Status
        :param str type: The type of resource, User or App, that modified this Resource
        """
        pulumi.set(__self__, "public_key", public_key)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> str:
        """
        Authentication Factor public key issued by client
        """
        return pulumi.get(self, "public_key")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Device Status
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDomainsMyDeviceIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: User display name
        :param str ocid: The OCID of the user
        :param str ref: The URI that corresponds to the member Resource of this device
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: The identifier of the user
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        The OCID of the user
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the member Resource of this device
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The identifier of the user
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyDeviceIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: User display name
        :param str ocid: The OCID of the user
        :param str ref: The URI that corresponds to the member Resource of this device
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: The identifier of the user
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        The OCID of the user
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the member Resource of this device
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The identifier of the user
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyDeviceMetaResult(dict):
    def __init__(__self__, *,
                 created: str,
                 last_modified: str,
                 location: str,
                 resource_type: str,
                 version: str):
        """
        :param str created: The DateTime the Resource was added to the Service Provider
        :param str last_modified: The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        :param str location: The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        :param str resource_type: Name of the resource type of the resource--for example, Users or Groups
        :param str version: The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "last_modified", last_modified)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        The DateTime the Resource was added to the Service Provider
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> str:
        """
        The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Name of the resource type of the resource--for example, Users or Groups
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsMyDeviceNonComplianceResult(dict):
    def __init__(__self__, *,
                 action: str,
                 name: str,
                 value: str):
        """
        :param str action: Device Compliance Action
        :param str name: Device Compliance name
        :param str value: The identifier of the user
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Device Compliance Action
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Device Compliance name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The identifier of the user
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyDevicePushNotificationTargetResult(dict):
    def __init__(__self__, *,
                 ref: str,
                 value: str):
        """
        :param str ref: The URI that corresponds to the member Resource of this device
        :param str value: The identifier of the user
        """
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the member Resource of this device
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The identifier of the user
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyDeviceTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Key or name of the tag.
        :param str value: The identifier of the user
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key or name of the tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The identifier of the user
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyDeviceThirdPartyFactorResult(dict):
    def __init__(__self__, *,
                 ref: str,
                 third_party_factor_type: str,
                 third_party_vendor_name: str,
                 value: str):
        """
        :param str ref: The URI that corresponds to the member Resource of this device
        :param str third_party_factor_type: Type of the third party authentication factor
        :param str third_party_vendor_name: The vendor name of the third party factor
        :param str value: The identifier of the user
        """
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "third_party_factor_type", third_party_factor_type)
        pulumi.set(__self__, "third_party_vendor_name", third_party_vendor_name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the member Resource of this device
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="thirdPartyFactorType")
    def third_party_factor_type(self) -> str:
        """
        Type of the third party authentication factor
        """
        return pulumi.get(self, "third_party_factor_type")

    @property
    @pulumi.getter(name="thirdPartyVendorName")
    def third_party_vendor_name(self) -> str:
        """
        The vendor name of the third party factor
        """
        return pulumi.get(self, "third_party_vendor_name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The identifier of the user
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyDeviceUserResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 value: str):
        """
        :param str display: User display name
        :param str ocid: The OCID of the user
        :param str ref: The URI that corresponds to the member Resource of this device
        :param str value: The identifier of the user
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        The OCID of the user
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the member Resource of this device
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The identifier of the user
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyDevicesMyDeviceResult(dict):
    def __init__(__self__, *,
                 additional_attributes: Sequence['outputs.GetDomainsMyDevicesMyDeviceAdditionalAttributeResult'],
                 app_version: str,
                 attribute_sets: Sequence[str],
                 attributes: str,
                 authentication_factors: Sequence['outputs.GetDomainsMyDevicesMyDeviceAuthenticationFactorResult'],
                 authentication_method: str,
                 authorization: str,
                 base_public_key: str,
                 compartment_ocid: str,
                 country_code: str,
                 delete_in_progress: bool,
                 device_type: str,
                 device_uuid: str,
                 display_name: str,
                 domain_ocid: str,
                 expires_on: int,
                 external_id: str,
                 id: str,
                 idcs_created_bies: Sequence['outputs.GetDomainsMyDevicesMyDeviceIdcsCreatedByResult'],
                 idcs_endpoint: str,
                 idcs_last_modified_bies: Sequence['outputs.GetDomainsMyDevicesMyDeviceIdcsLastModifiedByResult'],
                 idcs_last_upgraded_in_release: str,
                 idcs_prevented_operations: Sequence[str],
                 is_acc_rec_enabled: bool,
                 is_compliant: bool,
                 last_sync_time: str,
                 last_validated_time: str,
                 metas: Sequence['outputs.GetDomainsMyDevicesMyDeviceMetaResult'],
                 my_device_id: str,
                 non_compliances: Sequence['outputs.GetDomainsMyDevicesMyDeviceNonComplianceResult'],
                 ocid: str,
                 package_id: str,
                 phone_number: str,
                 platform: str,
                 push_notification_targets: Sequence['outputs.GetDomainsMyDevicesMyDevicePushNotificationTargetResult'],
                 reason: str,
                 resource_type_schema_version: str,
                 schemas: Sequence[str],
                 seed: str,
                 seed_dek_id: str,
                 status: str,
                 tags: Sequence['outputs.GetDomainsMyDevicesMyDeviceTagResult'],
                 tenancy_ocid: str,
                 third_party_factors: Sequence['outputs.GetDomainsMyDevicesMyDeviceThirdPartyFactorResult'],
                 users: Sequence['outputs.GetDomainsMyDevicesMyDeviceUserResult']):
        """
        :param Sequence['GetDomainsMyDevicesMyDeviceAdditionalAttributeArgs'] additional_attributes: Device additional attributes
        :param str app_version: Mobile Authenticator App Version
        :param Sequence[str] attribute_sets: A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
        :param str attributes: A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
        :param Sequence['GetDomainsMyDevicesMyDeviceAuthenticationFactorArgs'] authentication_factors: Authentication Factors
        :param str authentication_method: Authentication method used in device. For FIDO, it will contain SECURITY_KEY/WINDOWS_HELLO etc
        :param str authorization: The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
        :param str base_public_key: Device base public Key
        :param str compartment_ocid: Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
        :param str country_code: Country code of user's Phone Number
        :param bool delete_in_progress: A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
        :param str device_type: Device hardware name/model
        :param str device_uuid: Unique id sent from device
        :param str display_name: Device friendly display name
        :param str domain_ocid: Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
        :param int expires_on: Attribute added for replication log, it is not used by IDCS, just added as place holder
        :param str external_id: An identifier for the Resource as defined by the Service Consumer. The externalId may simplify identification of the Resource between Service Consumer and Service Provider by allowing the Consumer to refer to the Resource with its own identifier, obviating the need to store a local mapping between the local identifier of the Resource and the identifier used by the Service Provider. Each Resource MAY include a non-empty externalId value. The value of the externalId attribute is always issued be the Service Consumer and can never be specified by the Service Provider. The Service Provider MUST always interpret the externalId as scoped to the Service Consumer's tenant.
        :param str id: Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider's entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
        :param Sequence['GetDomainsMyDevicesMyDeviceIdcsCreatedByArgs'] idcs_created_bies: The User or App who created the Resource
        :param str idcs_endpoint: The basic endpoint for the identity domain
        :param Sequence['GetDomainsMyDevicesMyDeviceIdcsLastModifiedByArgs'] idcs_last_modified_bies: The User or App who modified the Resource
        :param str idcs_last_upgraded_in_release: The release number when the resource was upgraded.
        :param Sequence[str] idcs_prevented_operations: Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
        :param bool is_acc_rec_enabled: Flag that indicates whether the device is enrolled for account recovery
        :param bool is_compliant: Device Compliance Status
        :param str last_sync_time: Last Sync time for device
        :param str last_validated_time: The most recent timestamp when the device was successfully validated using one time passcode
        :param Sequence['GetDomainsMyDevicesMyDeviceMetaArgs'] metas: A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
        :param Sequence['GetDomainsMyDevicesMyDeviceNonComplianceArgs'] non_compliances: Device Non Compliances
        :param str ocid: The OCID of the user
        :param str package_id: Mobile Authenticator App Package Id
        :param str phone_number: User's Phone Number
        :param str platform: Device Platform
        :param Sequence['GetDomainsMyDevicesMyDevicePushNotificationTargetArgs'] push_notification_targets: Push Notification target. Reference to Device notification related resource
        :param str reason: Additional comments/reasons for the change in device status
        :param str resource_type_schema_version: An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
        :param Sequence[str] schemas: REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \\"enterprise\\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
        :param str seed: Attribute added for replication log, it is not used by IDCS, it is actual encrypted TOTP seed for the user
        :param str seed_dek_id: Attribute added for replication log, it is not used by IDCS, the DEK that encrypts the specific seed for that user
        :param str status: Device Status
        :param Sequence['GetDomainsMyDevicesMyDeviceTagArgs'] tags: A list of tags on this resource.
        :param str tenancy_ocid: Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
        :param Sequence['GetDomainsMyDevicesMyDeviceThirdPartyFactorArgs'] third_party_factors: User's third-party authentication factor details
        :param Sequence['GetDomainsMyDevicesMyDeviceUserArgs'] users: Device member
        """
        pulumi.set(__self__, "additional_attributes", additional_attributes)
        pulumi.set(__self__, "app_version", app_version)
        pulumi.set(__self__, "attribute_sets", attribute_sets)
        pulumi.set(__self__, "attributes", attributes)
        pulumi.set(__self__, "authentication_factors", authentication_factors)
        pulumi.set(__self__, "authentication_method", authentication_method)
        pulumi.set(__self__, "authorization", authorization)
        pulumi.set(__self__, "base_public_key", base_public_key)
        pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        pulumi.set(__self__, "country_code", country_code)
        pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        pulumi.set(__self__, "device_type", device_type)
        pulumi.set(__self__, "device_uuid", device_uuid)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "domain_ocid", domain_ocid)
        pulumi.set(__self__, "expires_on", expires_on)
        pulumi.set(__self__, "external_id", external_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        pulumi.set(__self__, "idcs_endpoint", idcs_endpoint)
        pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        pulumi.set(__self__, "is_acc_rec_enabled", is_acc_rec_enabled)
        pulumi.set(__self__, "is_compliant", is_compliant)
        pulumi.set(__self__, "last_sync_time", last_sync_time)
        pulumi.set(__self__, "last_validated_time", last_validated_time)
        pulumi.set(__self__, "metas", metas)
        pulumi.set(__self__, "my_device_id", my_device_id)
        pulumi.set(__self__, "non_compliances", non_compliances)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "package_id", package_id)
        pulumi.set(__self__, "phone_number", phone_number)
        pulumi.set(__self__, "platform", platform)
        pulumi.set(__self__, "push_notification_targets", push_notification_targets)
        pulumi.set(__self__, "reason", reason)
        pulumi.set(__self__, "resource_type_schema_version", resource_type_schema_version)
        pulumi.set(__self__, "schemas", schemas)
        pulumi.set(__self__, "seed", seed)
        pulumi.set(__self__, "seed_dek_id", seed_dek_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)
        pulumi.set(__self__, "third_party_factors", third_party_factors)
        pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="additionalAttributes")
    def additional_attributes(self) -> Sequence['outputs.GetDomainsMyDevicesMyDeviceAdditionalAttributeResult']:
        """
        Device additional attributes
        """
        return pulumi.get(self, "additional_attributes")

    @property
    @pulumi.getter(name="appVersion")
    def app_version(self) -> str:
        """
        Mobile Authenticator App Version
        """
        return pulumi.get(self, "app_version")

    @property
    @pulumi.getter(name="attributeSets")
    def attribute_sets(self) -> Sequence[str]:
        """
        A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
        """
        return pulumi.get(self, "attribute_sets")

    @property
    @pulumi.getter
    def attributes(self) -> str:
        """
        A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
        """
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter(name="authenticationFactors")
    def authentication_factors(self) -> Sequence['outputs.GetDomainsMyDevicesMyDeviceAuthenticationFactorResult']:
        """
        Authentication Factors
        """
        return pulumi.get(self, "authentication_factors")

    @property
    @pulumi.getter(name="authenticationMethod")
    def authentication_method(self) -> str:
        """
        Authentication method used in device. For FIDO, it will contain SECURITY_KEY/WINDOWS_HELLO etc
        """
        return pulumi.get(self, "authentication_method")

    @property
    @pulumi.getter
    def authorization(self) -> str:
        """
        The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
        """
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="basePublicKey")
    def base_public_key(self) -> str:
        """
        Device base public Key
        """
        return pulumi.get(self, "base_public_key")

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> str:
        """
        Country code of user's Phone Number
        """
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> bool:
        """
        A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
        """
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter(name="deviceType")
    def device_type(self) -> str:
        """
        Device hardware name/model
        """
        return pulumi.get(self, "device_type")

    @property
    @pulumi.getter(name="deviceUuid")
    def device_uuid(self) -> str:
        """
        Unique id sent from device
        """
        return pulumi.get(self, "device_uuid")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Device friendly display name
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter(name="expiresOn")
    def expires_on(self) -> int:
        """
        Attribute added for replication log, it is not used by IDCS, just added as place holder
        """
        return pulumi.get(self, "expires_on")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> str:
        """
        An identifier for the Resource as defined by the Service Consumer. The externalId may simplify identification of the Resource between Service Consumer and Service Provider by allowing the Consumer to refer to the Resource with its own identifier, obviating the need to store a local mapping between the local identifier of the Resource and the identifier used by the Service Provider. Each Resource MAY include a non-empty externalId value. The value of the externalId attribute is always issued be the Service Consumer and can never be specified by the Service Provider. The Service Provider MUST always interpret the externalId as scoped to the Service Consumer's tenant.
        """
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider's entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Sequence['outputs.GetDomainsMyDevicesMyDeviceIdcsCreatedByResult']:
        """
        The User or App who created the Resource
        """
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> str:
        """
        The basic endpoint for the identity domain
        """
        return pulumi.get(self, "idcs_endpoint")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Sequence['outputs.GetDomainsMyDevicesMyDeviceIdcsLastModifiedByResult']:
        """
        The User or App who modified the Resource
        """
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> str:
        """
        The release number when the resource was upgraded.
        """
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Sequence[str]:
        """
        Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
        """
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter(name="isAccRecEnabled")
    def is_acc_rec_enabled(self) -> bool:
        """
        Flag that indicates whether the device is enrolled for account recovery
        """
        return pulumi.get(self, "is_acc_rec_enabled")

    @property
    @pulumi.getter(name="isCompliant")
    def is_compliant(self) -> bool:
        """
        Device Compliance Status
        """
        return pulumi.get(self, "is_compliant")

    @property
    @pulumi.getter(name="lastSyncTime")
    def last_sync_time(self) -> str:
        """
        Last Sync time for device
        """
        return pulumi.get(self, "last_sync_time")

    @property
    @pulumi.getter(name="lastValidatedTime")
    def last_validated_time(self) -> str:
        """
        The most recent timestamp when the device was successfully validated using one time passcode
        """
        return pulumi.get(self, "last_validated_time")

    @property
    @pulumi.getter
    def metas(self) -> Sequence['outputs.GetDomainsMyDevicesMyDeviceMetaResult']:
        """
        A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
        """
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter(name="myDeviceId")
    def my_device_id(self) -> str:
        return pulumi.get(self, "my_device_id")

    @property
    @pulumi.getter(name="nonCompliances")
    def non_compliances(self) -> Sequence['outputs.GetDomainsMyDevicesMyDeviceNonComplianceResult']:
        """
        Device Non Compliances
        """
        return pulumi.get(self, "non_compliances")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        The OCID of the user
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> str:
        """
        Mobile Authenticator App Package Id
        """
        return pulumi.get(self, "package_id")

    @property
    @pulumi.getter(name="phoneNumber")
    def phone_number(self) -> str:
        """
        User's Phone Number
        """
        return pulumi.get(self, "phone_number")

    @property
    @pulumi.getter
    def platform(self) -> str:
        """
        Device Platform
        """
        return pulumi.get(self, "platform")

    @property
    @pulumi.getter(name="pushNotificationTargets")
    def push_notification_targets(self) -> Sequence['outputs.GetDomainsMyDevicesMyDevicePushNotificationTargetResult']:
        """
        Push Notification target. Reference to Device notification related resource
        """
        return pulumi.get(self, "push_notification_targets")

    @property
    @pulumi.getter
    def reason(self) -> str:
        """
        Additional comments/reasons for the change in device status
        """
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> str:
        """
        An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
        """
        return pulumi.get(self, "resource_type_schema_version")

    @property
    @pulumi.getter
    def schemas(self) -> Sequence[str]:
        """
        REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \\"enterprise\\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
        """
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter
    def seed(self) -> str:
        """
        Attribute added for replication log, it is not used by IDCS, it is actual encrypted TOTP seed for the user
        """
        return pulumi.get(self, "seed")

    @property
    @pulumi.getter(name="seedDekId")
    def seed_dek_id(self) -> str:
        """
        Attribute added for replication log, it is not used by IDCS, the DEK that encrypts the specific seed for that user
        """
        return pulumi.get(self, "seed_dek_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Device Status
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetDomainsMyDevicesMyDeviceTagResult']:
        """
        A list of tags on this resource.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "tenancy_ocid")

    @property
    @pulumi.getter(name="thirdPartyFactors")
    def third_party_factors(self) -> Sequence['outputs.GetDomainsMyDevicesMyDeviceThirdPartyFactorResult']:
        """
        User's third-party authentication factor details
        """
        return pulumi.get(self, "third_party_factors")

    @property
    @pulumi.getter
    def users(self) -> Sequence['outputs.GetDomainsMyDevicesMyDeviceUserResult']:
        """
        Device member
        """
        return pulumi.get(self, "users")


@pulumi.output_type
class GetDomainsMyDevicesMyDeviceAdditionalAttributeResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Key or name of the tag.
        :param str value: The identifier of the user
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key or name of the tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The identifier of the user
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyDevicesMyDeviceAuthenticationFactorResult(dict):
    def __init__(__self__, *,
                 public_key: str,
                 status: str,
                 type: str):
        """
        :param str public_key: Authentication Factor public key issued by client
        :param str status: Device Status
        :param str type: The type of resource, User or App, that modified this Resource
        """
        pulumi.set(__self__, "public_key", public_key)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> str:
        """
        Authentication Factor public key issued by client
        """
        return pulumi.get(self, "public_key")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Device Status
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDomainsMyDevicesMyDeviceIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: User display name
        :param str ocid: The OCID of the user
        :param str ref: The URI that corresponds to the member Resource of this device
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: The identifier of the user
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        The OCID of the user
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the member Resource of this device
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The identifier of the user
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyDevicesMyDeviceIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: User display name
        :param str ocid: The OCID of the user
        :param str ref: The URI that corresponds to the member Resource of this device
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: The identifier of the user
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        The OCID of the user
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the member Resource of this device
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The identifier of the user
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyDevicesMyDeviceMetaResult(dict):
    def __init__(__self__, *,
                 created: str,
                 last_modified: str,
                 location: str,
                 resource_type: str,
                 version: str):
        """
        :param str created: The DateTime the Resource was added to the Service Provider
        :param str last_modified: The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        :param str location: The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        :param str resource_type: Name of the resource type of the resource--for example, Users or Groups
        :param str version: The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "last_modified", last_modified)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        The DateTime the Resource was added to the Service Provider
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> str:
        """
        The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Name of the resource type of the resource--for example, Users or Groups
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsMyDevicesMyDeviceNonComplianceResult(dict):
    def __init__(__self__, *,
                 action: str,
                 name: str,
                 value: str):
        """
        :param str action: Device Compliance Action
        :param str name: Device Compliance name
        :param str value: The identifier of the user
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Device Compliance Action
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Device Compliance name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The identifier of the user
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyDevicesMyDevicePushNotificationTargetResult(dict):
    def __init__(__self__, *,
                 ref: str,
                 value: str):
        """
        :param str ref: The URI that corresponds to the member Resource of this device
        :param str value: The identifier of the user
        """
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the member Resource of this device
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The identifier of the user
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyDevicesMyDeviceTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Key or name of the tag.
        :param str value: The identifier of the user
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key or name of the tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The identifier of the user
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyDevicesMyDeviceThirdPartyFactorResult(dict):
    def __init__(__self__, *,
                 ref: str,
                 third_party_factor_type: str,
                 third_party_vendor_name: str,
                 value: str):
        """
        :param str ref: The URI that corresponds to the member Resource of this device
        :param str third_party_factor_type: Type of the third party authentication factor
        :param str third_party_vendor_name: The vendor name of the third party factor
        :param str value: The identifier of the user
        """
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "third_party_factor_type", third_party_factor_type)
        pulumi.set(__self__, "third_party_vendor_name", third_party_vendor_name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the member Resource of this device
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="thirdPartyFactorType")
    def third_party_factor_type(self) -> str:
        """
        Type of the third party authentication factor
        """
        return pulumi.get(self, "third_party_factor_type")

    @property
    @pulumi.getter(name="thirdPartyVendorName")
    def third_party_vendor_name(self) -> str:
        """
        The vendor name of the third party factor
        """
        return pulumi.get(self, "third_party_vendor_name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The identifier of the user
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyDevicesMyDeviceUserResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 value: str):
        """
        :param str display: User display name
        :param str ocid: The OCID of the user
        :param str ref: The URI that corresponds to the member Resource of this device
        :param str value: The identifier of the user
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        The OCID of the user
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the member Resource of this device
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The identifier of the user
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyGroupsMyGroupResult(dict):
    def __init__(__self__, *,
                 compartment_ocid: str,
                 delete_in_progress: bool,
                 display_name: str,
                 domain_ocid: str,
                 external_id: str,
                 id: str,
                 idcs_created_bies: Sequence['outputs.GetDomainsMyGroupsMyGroupIdcsCreatedByResult'],
                 idcs_last_modified_bies: Sequence['outputs.GetDomainsMyGroupsMyGroupIdcsLastModifiedByResult'],
                 idcs_last_upgraded_in_release: str,
                 idcs_prevented_operations: Sequence[str],
                 members: Sequence['outputs.GetDomainsMyGroupsMyGroupMemberResult'],
                 metas: Sequence['outputs.GetDomainsMyGroupsMyGroupMetaResult'],
                 non_unique_display_name: str,
                 ocid: str,
                 schemas: Sequence[str],
                 tags: Sequence['outputs.GetDomainsMyGroupsMyGroupTagResult'],
                 tenancy_ocid: str,
                 urnietfparamsscimschemasoracleidcsextensiongroup_groups: Sequence['outputs.GetDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupResult'],
                 urnietfparamsscimschemasoracleidcsextensionposix_groups: Sequence['outputs.GetDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensionposixGroupResult']):
        """
        :param str compartment_ocid: Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
        :param bool delete_in_progress: A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
        :param str display_name: Group display name
        :param str domain_ocid: Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
        :param str external_id: An identifier for the Resource as defined by the Service Consumer. The externalId may simplify identification of the Resource between Service Consumer and Service Provider by allowing the Consumer to refer to the Resource with its own identifier, obviating the need to store a local mapping between the local identifier of the Resource and the identifier used by the Service Provider. Each Resource MAY include a non-empty externalId value. The value of the externalId attribute is always issued by the Service Consumer and can never be specified by the Service Provider. The Service Provider MUST always interpret the externalId as scoped to the Service Consumer's tenant.
        :param str id: Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider's entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
        :param Sequence['GetDomainsMyGroupsMyGroupIdcsCreatedByArgs'] idcs_created_bies: The User or App who created the Resource
        :param Sequence['GetDomainsMyGroupsMyGroupIdcsLastModifiedByArgs'] idcs_last_modified_bies: The User or App who modified the Resource
        :param str idcs_last_upgraded_in_release: The release number when the resource was upgraded.
        :param Sequence[str] idcs_prevented_operations: Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
        :param Sequence['GetDomainsMyGroupsMyGroupMemberArgs'] members: Group members - when requesting members attribute, a max of 10,000 members will be returned in a single request. It is recommended to use startIndex and count to return members in pages instead of in a single response, eg : #attributes=members[startIndex=1%26count=10]
        :param Sequence['GetDomainsMyGroupsMyGroupMetaArgs'] metas: A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
        :param str non_unique_display_name: A human readable name for Group as defined by the Service Consumer
        :param str ocid: Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        :param Sequence[str] schemas: The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior. REQUIRED.
        :param Sequence['GetDomainsMyGroupsMyGroupTagArgs'] tags: A list of tags on this resource.
        :param str tenancy_ocid: Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
        :param Sequence['GetDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupArgs'] urnietfparamsscimschemasoracleidcsextensiongroup_groups: Idcs Group
        :param Sequence['GetDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensionposixGroupArgs'] urnietfparamsscimschemasoracleidcsextensionposix_groups: POSIX Group extension
        """
        pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "domain_ocid", domain_ocid)
        pulumi.set(__self__, "external_id", external_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        pulumi.set(__self__, "members", members)
        pulumi.set(__self__, "metas", metas)
        pulumi.set(__self__, "non_unique_display_name", non_unique_display_name)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "schemas", schemas)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)
        pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensiongroup_groups", urnietfparamsscimschemasoracleidcsextensiongroup_groups)
        pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionposix_groups", urnietfparamsscimschemasoracleidcsextensionposix_groups)

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> bool:
        """
        A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
        """
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Group display name
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> str:
        """
        An identifier for the Resource as defined by the Service Consumer. The externalId may simplify identification of the Resource between Service Consumer and Service Provider by allowing the Consumer to refer to the Resource with its own identifier, obviating the need to store a local mapping between the local identifier of the Resource and the identifier used by the Service Provider. Each Resource MAY include a non-empty externalId value. The value of the externalId attribute is always issued by the Service Consumer and can never be specified by the Service Provider. The Service Provider MUST always interpret the externalId as scoped to the Service Consumer's tenant.
        """
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider's entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Sequence['outputs.GetDomainsMyGroupsMyGroupIdcsCreatedByResult']:
        """
        The User or App who created the Resource
        """
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Sequence['outputs.GetDomainsMyGroupsMyGroupIdcsLastModifiedByResult']:
        """
        The User or App who modified the Resource
        """
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> str:
        """
        The release number when the resource was upgraded.
        """
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Sequence[str]:
        """
        Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
        """
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter
    def members(self) -> Sequence['outputs.GetDomainsMyGroupsMyGroupMemberResult']:
        """
        Group members - when requesting members attribute, a max of 10,000 members will be returned in a single request. It is recommended to use startIndex and count to return members in pages instead of in a single response, eg : #attributes=members[startIndex=1%26count=10]
        """
        return pulumi.get(self, "members")

    @property
    @pulumi.getter
    def metas(self) -> Sequence['outputs.GetDomainsMyGroupsMyGroupMetaResult']:
        """
        A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
        """
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter(name="nonUniqueDisplayName")
    def non_unique_display_name(self) -> str:
        """
        A human readable name for Group as defined by the Service Consumer
        """
        return pulumi.get(self, "non_unique_display_name")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def schemas(self) -> Sequence[str]:
        """
        The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior. REQUIRED.
        """
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetDomainsMyGroupsMyGroupTagResult']:
        """
        A list of tags on this resource.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "tenancy_ocid")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensiongroupGroups")
    def urnietfparamsscimschemasoracleidcsextensiongroup_groups(self) -> Sequence['outputs.GetDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupResult']:
        """
        Idcs Group
        """
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensiongroup_groups")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionposixGroups")
    def urnietfparamsscimschemasoracleidcsextensionposix_groups(self) -> Sequence['outputs.GetDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensionposixGroupResult']:
        """
        POSIX Group extension
        """
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionposix_groups")


@pulumi.output_type
class GetDomainsMyGroupsMyGroupIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: App Display Name
        :param str ocid: Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        :param str ref: App URI
        :param str type: The type of the entity that created this Group.
        :param str value: The ID of the App.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        App Display Name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        App URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the entity that created this Group.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The ID of the App.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyGroupsMyGroupIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: App Display Name
        :param str ocid: Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        :param str ref: App URI
        :param str type: The type of the entity that created this Group.
        :param str value: The ID of the App.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        App Display Name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        App URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the entity that created this Group.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The ID of the App.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyGroupsMyGroupMemberResult(dict):
    def __init__(__self__, *,
                 date_added: str,
                 display: str,
                 membership_ocid: str,
                 name: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str date_added: The DateTime the member was added to the Group.
        :param str display: App Display Name
        :param str membership_ocid: Membership Ocid
        :param str name: PasswordPolicy Name
        :param str ocid: Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        :param str ref: App URI
        :param str type: The type of the entity that created this Group.
        :param str value: The ID of the App.
        """
        pulumi.set(__self__, "date_added", date_added)
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "membership_ocid", membership_ocid)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="dateAdded")
    def date_added(self) -> str:
        """
        The DateTime the member was added to the Group.
        """
        return pulumi.get(self, "date_added")

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        App Display Name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter(name="membershipOcid")
    def membership_ocid(self) -> str:
        """
        Membership Ocid
        """
        return pulumi.get(self, "membership_ocid")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        PasswordPolicy Name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        App URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the entity that created this Group.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The ID of the App.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyGroupsMyGroupMetaResult(dict):
    def __init__(__self__, *,
                 created: str,
                 last_modified: str,
                 location: str,
                 resource_type: str,
                 version: str):
        """
        :param str created: The DateTime the Resource was added to the Service Provider
        :param str last_modified: The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        :param str location: The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        :param str resource_type: Name of the resource type of the resource--for example, Users or Groups
        :param str version: The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "last_modified", last_modified)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        The DateTime the Resource was added to the Service Provider
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> str:
        """
        The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Name of the resource type of the resource--for example, Users or Groups
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsMyGroupsMyGroupTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Key or name of the tag.
        :param str value: The ID of the App.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key or name of the tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The ID of the App.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupResult(dict):
    def __init__(__self__, *,
                 app_roles: Sequence['outputs.GetDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupAppRoleResult'],
                 creation_mechanism: str,
                 description: str,
                 grants: Sequence['outputs.GetDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupGrantResult'],
                 owners: Sequence['outputs.GetDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupOwnerResult'],
                 password_policies: Sequence['outputs.GetDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupPasswordPolicyResult'],
                 synced_from_apps: Sequence['outputs.GetDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupSyncedFromAppResult']):
        """
        :param Sequence['GetDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupAppRoleArgs'] app_roles: A list of appRoles that the user belongs to, either thorough direct membership, nested groups, or dynamically calculated
        :param str creation_mechanism: Source from which this group got created.
        :param str description: Group description
        :param Sequence['GetDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupGrantArgs'] grants: Grants assigned to group
        :param Sequence['GetDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupOwnerArgs'] owners: Group owners
        :param Sequence['GetDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupPasswordPolicyArgs'] password_policies: Password Policy associated with this Group.
        :param Sequence['GetDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupSyncedFromAppArgs'] synced_from_apps: The entity that created this Group.
        """
        pulumi.set(__self__, "app_roles", app_roles)
        pulumi.set(__self__, "creation_mechanism", creation_mechanism)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "grants", grants)
        pulumi.set(__self__, "owners", owners)
        pulumi.set(__self__, "password_policies", password_policies)
        pulumi.set(__self__, "synced_from_apps", synced_from_apps)

    @property
    @pulumi.getter(name="appRoles")
    def app_roles(self) -> Sequence['outputs.GetDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupAppRoleResult']:
        """
        A list of appRoles that the user belongs to, either thorough direct membership, nested groups, or dynamically calculated
        """
        return pulumi.get(self, "app_roles")

    @property
    @pulumi.getter(name="creationMechanism")
    def creation_mechanism(self) -> str:
        """
        Source from which this group got created.
        """
        return pulumi.get(self, "creation_mechanism")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Group description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def grants(self) -> Sequence['outputs.GetDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupGrantResult']:
        """
        Grants assigned to group
        """
        return pulumi.get(self, "grants")

    @property
    @pulumi.getter
    def owners(self) -> Sequence['outputs.GetDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupOwnerResult']:
        """
        Group owners
        """
        return pulumi.get(self, "owners")

    @property
    @pulumi.getter(name="passwordPolicies")
    def password_policies(self) -> Sequence['outputs.GetDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupPasswordPolicyResult']:
        """
        Password Policy associated with this Group.
        """
        return pulumi.get(self, "password_policies")

    @property
    @pulumi.getter(name="syncedFromApps")
    def synced_from_apps(self) -> Sequence['outputs.GetDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupSyncedFromAppResult']:
        """
        The entity that created this Group.
        """
        return pulumi.get(self, "synced_from_apps")


@pulumi.output_type
class GetDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupAppRoleResult(dict):
    def __init__(__self__, *,
                 admin_role: bool,
                 app_id: str,
                 app_name: str,
                 display: str,
                 legacy_group_name: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param bool admin_role: If true, then the role provides administrative access privileges. READ-ONLY.
        :param str app_id: App identifier
        :param str app_name: Name of parent App. READ-ONLY.
        :param str display: App Display Name
        :param str legacy_group_name: The name of the legacy group associated with this AppRole.
        :param str ref: App URI
        :param str type: The type of the entity that created this Group.
        :param str value: The ID of the App.
        """
        pulumi.set(__self__, "admin_role", admin_role)
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "app_name", app_name)
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "legacy_group_name", legacy_group_name)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="adminRole")
    def admin_role(self) -> bool:
        """
        If true, then the role provides administrative access privileges. READ-ONLY.
        """
        return pulumi.get(self, "admin_role")

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> str:
        """
        App identifier
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="appName")
    def app_name(self) -> str:
        """
        Name of parent App. READ-ONLY.
        """
        return pulumi.get(self, "app_name")

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        App Display Name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter(name="legacyGroupName")
    def legacy_group_name(self) -> str:
        """
        The name of the legacy group associated with this AppRole.
        """
        return pulumi.get(self, "legacy_group_name")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        App URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the entity that created this Group.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The ID of the App.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupGrantResult(dict):
    def __init__(__self__, *,
                 app_id: str,
                 grant_mechanism: str,
                 ref: str,
                 value: str):
        """
        :param str app_id: App identifier
        :param str grant_mechanism: Each value of grantMechanism indicates how (or by what component) some App (or App-Entitlement) was granted.\\nA customer or the UI should use only grantMechanism values that start with 'ADMINISTRATOR':\\n - 'ADMINISTRATOR_TO_USER' is for a direct grant to a specific User.\\n - 'ADMINISTRATOR_TO_GROUP' is for a grant to a specific Group, which results in indirect grants to Users who are members of that Group.\\n - 'ADMINISTRATOR_TO_APP' is for a grant to a specific App.  The grantee (client) App gains access to the granted (server) App.
        :param str ref: App URI
        :param str value: The ID of the App.
        """
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "grant_mechanism", grant_mechanism)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> str:
        """
        App identifier
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="grantMechanism")
    def grant_mechanism(self) -> str:
        """
        Each value of grantMechanism indicates how (or by what component) some App (or App-Entitlement) was granted.\\nA customer or the UI should use only grantMechanism values that start with 'ADMINISTRATOR':\\n - 'ADMINISTRATOR_TO_USER' is for a direct grant to a specific User.\\n - 'ADMINISTRATOR_TO_GROUP' is for a grant to a specific Group, which results in indirect grants to Users who are members of that Group.\\n - 'ADMINISTRATOR_TO_APP' is for a grant to a specific App.  The grantee (client) App gains access to the granted (server) App.
        """
        return pulumi.get(self, "grant_mechanism")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        App URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The ID of the App.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupOwnerResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: App Display Name
        :param str ref: App URI
        :param str type: The type of the entity that created this Group.
        :param str value: The ID of the App.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        App Display Name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        App URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the entity that created this Group.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The ID of the App.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupPasswordPolicyResult(dict):
    def __init__(__self__, *,
                 name: str,
                 priority: int,
                 ref: str,
                 value: str):
        """
        :param str name: PasswordPolicy Name
        :param int priority: PasswordPolicy priority
        :param str ref: App URI
        :param str value: The ID of the App.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        PasswordPolicy Name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        PasswordPolicy priority
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        App URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The ID of the App.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupSyncedFromAppResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: App Display Name
        :param str ref: App URI
        :param str type: The type of the entity that created this Group.
        :param str value: The ID of the App.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        App Display Name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        App URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the entity that created this Group.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The ID of the App.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensionposixGroupResult(dict):
    def __init__(__self__, *,
                 gid_number: int):
        """
        :param int gid_number: Integer uniquely identifying a group in a POSIX administrative domain
        """
        pulumi.set(__self__, "gid_number", gid_number)

    @property
    @pulumi.getter(name="gidNumber")
    def gid_number(self) -> int:
        """
        Integer uniquely identifying a group in a POSIX administrative domain
        """
        return pulumi.get(self, "gid_number")


@pulumi.output_type
class GetDomainsMyOauth2clientCredentialIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: User display name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyOauth2clientCredentialIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: User display name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyOauth2clientCredentialMetaResult(dict):
    def __init__(__self__, *,
                 created: str,
                 last_modified: str,
                 location: str,
                 resource_type: str,
                 version: str):
        """
        :param str created: The DateTime the Resource was added to the Service Provider
        :param str last_modified: The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        :param str location: The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        :param str resource_type: Name of the resource type of the resource--for example, Users or Groups
        :param str version: The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "last_modified", last_modified)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        The DateTime the Resource was added to the Service Provider
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> str:
        """
        The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Name of the resource type of the resource--for example, Users or Groups
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsMyOauth2clientCredentialScopeResult(dict):
    def __init__(__self__, *,
                 audience: str,
                 scope: str):
        """
        :param str audience: Audience
        :param str scope: Scope
        """
        pulumi.set(__self__, "audience", audience)
        pulumi.set(__self__, "scope", scope)

    @property
    @pulumi.getter
    def audience(self) -> str:
        """
        Audience
        """
        return pulumi.get(self, "audience")

    @property
    @pulumi.getter
    def scope(self) -> str:
        """
        Scope
        """
        return pulumi.get(self, "scope")


@pulumi.output_type
class GetDomainsMyOauth2clientCredentialTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Key or name of the tag.
        :param str value: User's id
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key or name of the tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyOauth2clientCredentialUserResult(dict):
    def __init__(__self__, *,
                 display: str,
                 name: str,
                 ocid: str,
                 ref: str,
                 value: str):
        """
        :param str display: User display name
        :param str name: User name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        User name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyOauth2clientCredentialsMyOauth2clientCredentialResult(dict):
    def __init__(__self__, *,
                 authorization: str,
                 compartment_ocid: str,
                 delete_in_progress: bool,
                 description: str,
                 domain_ocid: str,
                 expires_on: str,
                 id: str,
                 idcs_created_bies: Sequence['outputs.GetDomainsMyOauth2clientCredentialsMyOauth2clientCredentialIdcsCreatedByResult'],
                 idcs_endpoint: str,
                 idcs_last_modified_bies: Sequence['outputs.GetDomainsMyOauth2clientCredentialsMyOauth2clientCredentialIdcsLastModifiedByResult'],
                 idcs_last_upgraded_in_release: str,
                 idcs_prevented_operations: Sequence[str],
                 is_reset_secret: bool,
                 metas: Sequence['outputs.GetDomainsMyOauth2clientCredentialsMyOauth2clientCredentialMetaResult'],
                 name: str,
                 ocid: str,
                 resource_type_schema_version: str,
                 schemas: Sequence[str],
                 scopes: Sequence['outputs.GetDomainsMyOauth2clientCredentialsMyOauth2clientCredentialScopeResult'],
                 status: str,
                 tags: Sequence['outputs.GetDomainsMyOauth2clientCredentialsMyOauth2clientCredentialTagResult'],
                 tenancy_ocid: str,
                 users: Sequence['outputs.GetDomainsMyOauth2clientCredentialsMyOauth2clientCredentialUserResult']):
        """
        :param str authorization: The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
        :param str compartment_ocid: Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
        :param bool delete_in_progress: A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
        :param str description: Description
        :param str domain_ocid: Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
        :param str expires_on: User credential expires on
        :param str id: Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider's entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
        :param Sequence['GetDomainsMyOauth2clientCredentialsMyOauth2clientCredentialIdcsCreatedByArgs'] idcs_created_bies: The User or App who created the Resource
        :param str idcs_endpoint: The basic endpoint for the identity domain
        :param Sequence['GetDomainsMyOauth2clientCredentialsMyOauth2clientCredentialIdcsLastModifiedByArgs'] idcs_last_modified_bies: The User or App who modified the Resource
        :param str idcs_last_upgraded_in_release: The release number when the resource was upgraded.
        :param Sequence[str] idcs_prevented_operations: Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
        :param bool is_reset_secret: Specifies if secret need to be reset
        :param Sequence['GetDomainsMyOauth2clientCredentialsMyOauth2clientCredentialMetaArgs'] metas: A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
        :param str name: User name
        :param str ocid: User's ocid
        :param str resource_type_schema_version: An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
        :param Sequence[str] schemas: REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \\"enterprise\\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
        :param Sequence['GetDomainsMyOauth2clientCredentialsMyOauth2clientCredentialScopeArgs'] scopes: Scopes
        :param str status: User credential status
        :param Sequence['GetDomainsMyOauth2clientCredentialsMyOauth2clientCredentialTagArgs'] tags: A list of tags on this resource.
        :param str tenancy_ocid: Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
        :param Sequence['GetDomainsMyOauth2clientCredentialsMyOauth2clientCredentialUserArgs'] users: User linked to oauth2 client credential
        """
        pulumi.set(__self__, "authorization", authorization)
        pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "domain_ocid", domain_ocid)
        pulumi.set(__self__, "expires_on", expires_on)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        pulumi.set(__self__, "idcs_endpoint", idcs_endpoint)
        pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        pulumi.set(__self__, "is_reset_secret", is_reset_secret)
        pulumi.set(__self__, "metas", metas)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "resource_type_schema_version", resource_type_schema_version)
        pulumi.set(__self__, "schemas", schemas)
        pulumi.set(__self__, "scopes", scopes)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)
        pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter
    def authorization(self) -> str:
        """
        The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
        """
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> bool:
        """
        A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
        """
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter(name="expiresOn")
    def expires_on(self) -> str:
        """
        User credential expires on
        """
        return pulumi.get(self, "expires_on")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider's entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Sequence['outputs.GetDomainsMyOauth2clientCredentialsMyOauth2clientCredentialIdcsCreatedByResult']:
        """
        The User or App who created the Resource
        """
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> str:
        """
        The basic endpoint for the identity domain
        """
        return pulumi.get(self, "idcs_endpoint")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Sequence['outputs.GetDomainsMyOauth2clientCredentialsMyOauth2clientCredentialIdcsLastModifiedByResult']:
        """
        The User or App who modified the Resource
        """
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> str:
        """
        The release number when the resource was upgraded.
        """
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Sequence[str]:
        """
        Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
        """
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter(name="isResetSecret")
    def is_reset_secret(self) -> bool:
        """
        Specifies if secret need to be reset
        """
        return pulumi.get(self, "is_reset_secret")

    @property
    @pulumi.getter
    def metas(self) -> Sequence['outputs.GetDomainsMyOauth2clientCredentialsMyOauth2clientCredentialMetaResult']:
        """
        A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
        """
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        User name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> str:
        """
        An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
        """
        return pulumi.get(self, "resource_type_schema_version")

    @property
    @pulumi.getter
    def schemas(self) -> Sequence[str]:
        """
        REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \\"enterprise\\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
        """
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter
    def scopes(self) -> Sequence['outputs.GetDomainsMyOauth2clientCredentialsMyOauth2clientCredentialScopeResult']:
        """
        Scopes
        """
        return pulumi.get(self, "scopes")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        User credential status
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetDomainsMyOauth2clientCredentialsMyOauth2clientCredentialTagResult']:
        """
        A list of tags on this resource.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "tenancy_ocid")

    @property
    @pulumi.getter
    def users(self) -> Sequence['outputs.GetDomainsMyOauth2clientCredentialsMyOauth2clientCredentialUserResult']:
        """
        User linked to oauth2 client credential
        """
        return pulumi.get(self, "users")


@pulumi.output_type
class GetDomainsMyOauth2clientCredentialsMyOauth2clientCredentialIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: User display name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyOauth2clientCredentialsMyOauth2clientCredentialIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: User display name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyOauth2clientCredentialsMyOauth2clientCredentialMetaResult(dict):
    def __init__(__self__, *,
                 created: str,
                 last_modified: str,
                 location: str,
                 resource_type: str,
                 version: str):
        """
        :param str created: The DateTime the Resource was added to the Service Provider
        :param str last_modified: The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        :param str location: The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        :param str resource_type: Name of the resource type of the resource--for example, Users or Groups
        :param str version: The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "last_modified", last_modified)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        The DateTime the Resource was added to the Service Provider
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> str:
        """
        The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Name of the resource type of the resource--for example, Users or Groups
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsMyOauth2clientCredentialsMyOauth2clientCredentialScopeResult(dict):
    def __init__(__self__, *,
                 audience: str,
                 scope: str):
        """
        :param str audience: Audience
        :param str scope: Scope
        """
        pulumi.set(__self__, "audience", audience)
        pulumi.set(__self__, "scope", scope)

    @property
    @pulumi.getter
    def audience(self) -> str:
        """
        Audience
        """
        return pulumi.get(self, "audience")

    @property
    @pulumi.getter
    def scope(self) -> str:
        """
        Scope
        """
        return pulumi.get(self, "scope")


@pulumi.output_type
class GetDomainsMyOauth2clientCredentialsMyOauth2clientCredentialTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Key or name of the tag.
        :param str value: User's id
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key or name of the tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyOauth2clientCredentialsMyOauth2clientCredentialUserResult(dict):
    def __init__(__self__, *,
                 display: str,
                 name: str,
                 ocid: str,
                 ref: str,
                 value: str):
        """
        :param str display: User display name
        :param str name: User name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        User name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMySmtpCredentialIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: User display name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMySmtpCredentialIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: User display name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMySmtpCredentialMetaResult(dict):
    def __init__(__self__, *,
                 created: str,
                 last_modified: str,
                 location: str,
                 resource_type: str,
                 version: str):
        """
        :param str created: The DateTime the Resource was added to the Service Provider
        :param str last_modified: The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        :param str location: The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        :param str resource_type: Name of the resource type of the resource--for example, Users or Groups
        :param str version: The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "last_modified", last_modified)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        The DateTime the Resource was added to the Service Provider
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> str:
        """
        The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Name of the resource type of the resource--for example, Users or Groups
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsMySmtpCredentialTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Key or name of the tag.
        :param str value: User's id
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key or name of the tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMySmtpCredentialUserResult(dict):
    def __init__(__self__, *,
                 display: str,
                 name: str,
                 ocid: str,
                 ref: str,
                 value: str):
        """
        :param str display: User display name
        :param str name: User name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        User name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMySmtpCredentialsMySmtpCredentialResult(dict):
    def __init__(__self__, *,
                 authorization: str,
                 compartment_ocid: str,
                 delete_in_progress: bool,
                 description: str,
                 domain_ocid: str,
                 expires_on: str,
                 id: str,
                 idcs_created_bies: Sequence['outputs.GetDomainsMySmtpCredentialsMySmtpCredentialIdcsCreatedByResult'],
                 idcs_endpoint: str,
                 idcs_last_modified_bies: Sequence['outputs.GetDomainsMySmtpCredentialsMySmtpCredentialIdcsLastModifiedByResult'],
                 idcs_last_upgraded_in_release: str,
                 idcs_prevented_operations: Sequence[str],
                 metas: Sequence['outputs.GetDomainsMySmtpCredentialsMySmtpCredentialMetaResult'],
                 ocid: str,
                 resource_type_schema_version: str,
                 schemas: Sequence[str],
                 status: str,
                 tags: Sequence['outputs.GetDomainsMySmtpCredentialsMySmtpCredentialTagResult'],
                 tenancy_ocid: str,
                 user_name: str,
                 users: Sequence['outputs.GetDomainsMySmtpCredentialsMySmtpCredentialUserResult']):
        """
        :param str authorization: The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
        :param str compartment_ocid: Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
        :param bool delete_in_progress: A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
        :param str description: Description
        :param str domain_ocid: Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
        :param str expires_on: User credential expires on
        :param str id: Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider's entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
        :param Sequence['GetDomainsMySmtpCredentialsMySmtpCredentialIdcsCreatedByArgs'] idcs_created_bies: The User or App who created the Resource
        :param str idcs_endpoint: The basic endpoint for the identity domain
        :param Sequence['GetDomainsMySmtpCredentialsMySmtpCredentialIdcsLastModifiedByArgs'] idcs_last_modified_bies: The User or App who modified the Resource
        :param str idcs_last_upgraded_in_release: The release number when the resource was upgraded.
        :param Sequence[str] idcs_prevented_operations: Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
        :param Sequence['GetDomainsMySmtpCredentialsMySmtpCredentialMetaArgs'] metas: A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
        :param str ocid: User's ocid
        :param str resource_type_schema_version: An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
        :param Sequence[str] schemas: REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \\"enterprise\\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
        :param str status: User credential status
        :param Sequence['GetDomainsMySmtpCredentialsMySmtpCredentialTagArgs'] tags: A list of tags on this resource.
        :param str tenancy_ocid: Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
        :param str user_name: User name
        :param Sequence['GetDomainsMySmtpCredentialsMySmtpCredentialUserArgs'] users: User linked to smtp credential
        """
        pulumi.set(__self__, "authorization", authorization)
        pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "domain_ocid", domain_ocid)
        pulumi.set(__self__, "expires_on", expires_on)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        pulumi.set(__self__, "idcs_endpoint", idcs_endpoint)
        pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        pulumi.set(__self__, "metas", metas)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "resource_type_schema_version", resource_type_schema_version)
        pulumi.set(__self__, "schemas", schemas)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)
        pulumi.set(__self__, "user_name", user_name)
        pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter
    def authorization(self) -> str:
        """
        The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
        """
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> bool:
        """
        A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
        """
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter(name="expiresOn")
    def expires_on(self) -> str:
        """
        User credential expires on
        """
        return pulumi.get(self, "expires_on")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider's entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Sequence['outputs.GetDomainsMySmtpCredentialsMySmtpCredentialIdcsCreatedByResult']:
        """
        The User or App who created the Resource
        """
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> str:
        """
        The basic endpoint for the identity domain
        """
        return pulumi.get(self, "idcs_endpoint")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Sequence['outputs.GetDomainsMySmtpCredentialsMySmtpCredentialIdcsLastModifiedByResult']:
        """
        The User or App who modified the Resource
        """
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> str:
        """
        The release number when the resource was upgraded.
        """
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Sequence[str]:
        """
        Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
        """
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter
    def metas(self) -> Sequence['outputs.GetDomainsMySmtpCredentialsMySmtpCredentialMetaResult']:
        """
        A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
        """
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> str:
        """
        An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
        """
        return pulumi.get(self, "resource_type_schema_version")

    @property
    @pulumi.getter
    def schemas(self) -> Sequence[str]:
        """
        REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \\"enterprise\\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
        """
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        User credential status
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetDomainsMySmtpCredentialsMySmtpCredentialTagResult']:
        """
        A list of tags on this resource.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "tenancy_ocid")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> str:
        """
        User name
        """
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter
    def users(self) -> Sequence['outputs.GetDomainsMySmtpCredentialsMySmtpCredentialUserResult']:
        """
        User linked to smtp credential
        """
        return pulumi.get(self, "users")


@pulumi.output_type
class GetDomainsMySmtpCredentialsMySmtpCredentialIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: User display name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMySmtpCredentialsMySmtpCredentialIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: User display name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMySmtpCredentialsMySmtpCredentialMetaResult(dict):
    def __init__(__self__, *,
                 created: str,
                 last_modified: str,
                 location: str,
                 resource_type: str,
                 version: str):
        """
        :param str created: The DateTime the Resource was added to the Service Provider
        :param str last_modified: The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        :param str location: The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        :param str resource_type: Name of the resource type of the resource--for example, Users or Groups
        :param str version: The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "last_modified", last_modified)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        The DateTime the Resource was added to the Service Provider
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> str:
        """
        The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Name of the resource type of the resource--for example, Users or Groups
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsMySmtpCredentialsMySmtpCredentialTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Key or name of the tag.
        :param str value: User's id
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key or name of the tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMySmtpCredentialsMySmtpCredentialUserResult(dict):
    def __init__(__self__, *,
                 display: str,
                 name: str,
                 ocid: str,
                 ref: str,
                 value: str):
        """
        :param str display: User display name
        :param str name: User name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        User name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMySupportAccountIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: User display name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this Support Account
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this Support Account
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMySupportAccountIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: User display name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this Support Account
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this Support Account
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMySupportAccountMetaResult(dict):
    def __init__(__self__, *,
                 created: str,
                 last_modified: str,
                 location: str,
                 resource_type: str,
                 version: str):
        """
        :param str created: The DateTime the Resource was added to the Service Provider
        :param str last_modified: The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        :param str location: The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        :param str resource_type: Name of the resource type of the resource--for example, Users or Groups
        :param str version: The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "last_modified", last_modified)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        The DateTime the Resource was added to the Service Provider
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> str:
        """
        The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Name of the resource type of the resource--for example, Users or Groups
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsMySupportAccountTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Key or name of the tag.
        :param str value: User's id
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key or name of the tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMySupportAccountUserResult(dict):
    def __init__(__self__, *,
                 display: str,
                 name: str,
                 ocid: str,
                 ref: str,
                 value: str):
        """
        :param str display: User display name
        :param str name: User name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this Support Account
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        User name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this Support Account
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMySupportAccountsMySupportAccountResult(dict):
    def __init__(__self__, *,
                 authorization: str,
                 compartment_ocid: str,
                 delete_in_progress: bool,
                 domain_ocid: str,
                 id: str,
                 idcs_created_bies: Sequence['outputs.GetDomainsMySupportAccountsMySupportAccountIdcsCreatedByResult'],
                 idcs_endpoint: str,
                 idcs_last_modified_bies: Sequence['outputs.GetDomainsMySupportAccountsMySupportAccountIdcsLastModifiedByResult'],
                 idcs_last_upgraded_in_release: str,
                 idcs_prevented_operations: Sequence[str],
                 metas: Sequence['outputs.GetDomainsMySupportAccountsMySupportAccountMetaResult'],
                 my_support_account_provider: str,
                 ocid: str,
                 resource_type_schema_version: str,
                 schemas: Sequence[str],
                 tags: Sequence['outputs.GetDomainsMySupportAccountsMySupportAccountTagResult'],
                 tenancy_ocid: str,
                 token: str,
                 user_id: str,
                 users: Sequence['outputs.GetDomainsMySupportAccountsMySupportAccountUserResult']):
        """
        :param str authorization: The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
        :param str compartment_ocid: Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
        :param bool delete_in_progress: A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
        :param str domain_ocid: Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
        :param str id: Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider's entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
        :param Sequence['GetDomainsMySupportAccountsMySupportAccountIdcsCreatedByArgs'] idcs_created_bies: The User or App who created the Resource
        :param str idcs_endpoint: The basic endpoint for the identity domain
        :param Sequence['GetDomainsMySupportAccountsMySupportAccountIdcsLastModifiedByArgs'] idcs_last_modified_bies: The User or App who modified the Resource
        :param str idcs_last_upgraded_in_release: The release number when the resource was upgraded.
        :param Sequence[str] idcs_prevented_operations: Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
        :param Sequence['GetDomainsMySupportAccountsMySupportAccountMetaArgs'] metas: A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
        :param str my_support_account_provider: User Support Account Provider
        :param str ocid: User's ocid
        :param str resource_type_schema_version: An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
        :param Sequence[str] schemas: REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \\"enterprise\\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
        :param Sequence['GetDomainsMySupportAccountsMySupportAccountTagArgs'] tags: A list of tags on this resource.
        :param str tenancy_ocid: Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
        :param str token: User Support Account Token
        :param str user_id: User Support User Id
        :param Sequence['GetDomainsMySupportAccountsMySupportAccountUserArgs'] users: User linked to Support Account
        """
        pulumi.set(__self__, "authorization", authorization)
        pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        pulumi.set(__self__, "domain_ocid", domain_ocid)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        pulumi.set(__self__, "idcs_endpoint", idcs_endpoint)
        pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        pulumi.set(__self__, "metas", metas)
        pulumi.set(__self__, "my_support_account_provider", my_support_account_provider)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "resource_type_schema_version", resource_type_schema_version)
        pulumi.set(__self__, "schemas", schemas)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)
        pulumi.set(__self__, "token", token)
        pulumi.set(__self__, "user_id", user_id)
        pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter
    def authorization(self) -> str:
        """
        The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
        """
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> bool:
        """
        A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
        """
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider's entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Sequence['outputs.GetDomainsMySupportAccountsMySupportAccountIdcsCreatedByResult']:
        """
        The User or App who created the Resource
        """
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> str:
        """
        The basic endpoint for the identity domain
        """
        return pulumi.get(self, "idcs_endpoint")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Sequence['outputs.GetDomainsMySupportAccountsMySupportAccountIdcsLastModifiedByResult']:
        """
        The User or App who modified the Resource
        """
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> str:
        """
        The release number when the resource was upgraded.
        """
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Sequence[str]:
        """
        Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
        """
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter
    def metas(self) -> Sequence['outputs.GetDomainsMySupportAccountsMySupportAccountMetaResult']:
        """
        A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
        """
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter(name="mySupportAccountProvider")
    def my_support_account_provider(self) -> str:
        """
        User Support Account Provider
        """
        return pulumi.get(self, "my_support_account_provider")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> str:
        """
        An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
        """
        return pulumi.get(self, "resource_type_schema_version")

    @property
    @pulumi.getter
    def schemas(self) -> Sequence[str]:
        """
        REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \\"enterprise\\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
        """
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetDomainsMySupportAccountsMySupportAccountTagResult']:
        """
        A list of tags on this resource.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "tenancy_ocid")

    @property
    @pulumi.getter
    def token(self) -> str:
        """
        User Support Account Token
        """
        return pulumi.get(self, "token")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> str:
        """
        User Support User Id
        """
        return pulumi.get(self, "user_id")

    @property
    @pulumi.getter
    def users(self) -> Sequence['outputs.GetDomainsMySupportAccountsMySupportAccountUserResult']:
        """
        User linked to Support Account
        """
        return pulumi.get(self, "users")


@pulumi.output_type
class GetDomainsMySupportAccountsMySupportAccountIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: User display name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this Support Account
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this Support Account
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMySupportAccountsMySupportAccountIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: User display name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this Support Account
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this Support Account
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMySupportAccountsMySupportAccountMetaResult(dict):
    def __init__(__self__, *,
                 created: str,
                 last_modified: str,
                 location: str,
                 resource_type: str,
                 version: str):
        """
        :param str created: The DateTime the Resource was added to the Service Provider
        :param str last_modified: The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        :param str location: The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        :param str resource_type: Name of the resource type of the resource--for example, Users or Groups
        :param str version: The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "last_modified", last_modified)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        The DateTime the Resource was added to the Service Provider
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> str:
        """
        The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Name of the resource type of the resource--for example, Users or Groups
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsMySupportAccountsMySupportAccountTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Key or name of the tag.
        :param str value: User's id
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key or name of the tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMySupportAccountsMySupportAccountUserResult(dict):
    def __init__(__self__, *,
                 display: str,
                 name: str,
                 ocid: str,
                 ref: str,
                 value: str):
        """
        :param str display: User display name
        :param str name: User name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this Support Account
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        User name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this Support Account
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyTrustedUserAgentIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: Friendly name of the User to be used for purposes of display.
        :param str ocid: The OCID of the user
        :param str ref: Full URI to the user for whom the trust-token was issued.
        :param str type: Trusted Factor
        :param str value: The SCIM ID of the user for whom the trust-token was issued.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        Friendly name of the User to be used for purposes of display.
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        The OCID of the user
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        Full URI to the user for whom the trust-token was issued.
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Trusted Factor
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The SCIM ID of the user for whom the trust-token was issued.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyTrustedUserAgentIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: Friendly name of the User to be used for purposes of display.
        :param str ocid: The OCID of the user
        :param str ref: Full URI to the user for whom the trust-token was issued.
        :param str type: Trusted Factor
        :param str value: The SCIM ID of the user for whom the trust-token was issued.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        Friendly name of the User to be used for purposes of display.
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        The OCID of the user
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        Full URI to the user for whom the trust-token was issued.
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Trusted Factor
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The SCIM ID of the user for whom the trust-token was issued.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyTrustedUserAgentMetaResult(dict):
    def __init__(__self__, *,
                 created: str,
                 last_modified: str,
                 location: str,
                 resource_type: str,
                 version: str):
        """
        :param str created: The DateTime the Resource was added to the Service Provider
        :param str last_modified: The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        :param str location: The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        :param str resource_type: Name of the resource type of the resource--for example, Users or Groups
        :param str version: The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "last_modified", last_modified)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        The DateTime the Resource was added to the Service Provider
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> str:
        """
        The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Name of the resource type of the resource--for example, Users or Groups
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsMyTrustedUserAgentTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Key or name of the tag.
        :param str value: The SCIM ID of the user for whom the trust-token was issued.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key or name of the tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The SCIM ID of the user for whom the trust-token was issued.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyTrustedUserAgentTrustedFactorResult(dict):
    def __init__(__self__, *,
                 category: str,
                 creation_time: str,
                 type: str):
        """
        :param str category: Trusted Factor Type. Local, X509, SAML SOCIAL
        :param str creation_time: trust factor creation time
        :param str type: Trusted Factor
        """
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def category(self) -> str:
        """
        Trusted Factor Type. Local, X509, SAML SOCIAL
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        """
        trust factor creation time
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Trusted Factor
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDomainsMyTrustedUserAgentUserResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 value: str):
        """
        :param str display: Friendly name of the User to be used for purposes of display.
        :param str ocid: The OCID of the user
        :param str ref: Full URI to the user for whom the trust-token was issued.
        :param str value: The SCIM ID of the user for whom the trust-token was issued.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        Friendly name of the User to be used for purposes of display.
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        The OCID of the user
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        Full URI to the user for whom the trust-token was issued.
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The SCIM ID of the user for whom the trust-token was issued.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyTrustedUserAgentsMyTrustedUserAgentResult(dict):
    def __init__(__self__, *,
                 attribute_sets: Sequence[str],
                 attributes: str,
                 authorization: str,
                 compartment_ocid: str,
                 delete_in_progress: bool,
                 domain_ocid: str,
                 expiry_time: str,
                 id: str,
                 idcs_created_bies: Sequence['outputs.GetDomainsMyTrustedUserAgentsMyTrustedUserAgentIdcsCreatedByResult'],
                 idcs_endpoint: str,
                 idcs_last_modified_bies: Sequence['outputs.GetDomainsMyTrustedUserAgentsMyTrustedUserAgentIdcsLastModifiedByResult'],
                 idcs_last_upgraded_in_release: str,
                 idcs_prevented_operations: Sequence[str],
                 last_used_on: str,
                 location: str,
                 metas: Sequence['outputs.GetDomainsMyTrustedUserAgentsMyTrustedUserAgentMetaResult'],
                 my_trusted_user_agent_id: str,
                 name: str,
                 ocid: str,
                 platform: str,
                 resource_type_schema_version: str,
                 schemas: Sequence[str],
                 tags: Sequence['outputs.GetDomainsMyTrustedUserAgentsMyTrustedUserAgentTagResult'],
                 tenancy_ocid: str,
                 token_type: str,
                 trust_token: str,
                 trusted_factors: Sequence['outputs.GetDomainsMyTrustedUserAgentsMyTrustedUserAgentTrustedFactorResult'],
                 users: Sequence['outputs.GetDomainsMyTrustedUserAgentsMyTrustedUserAgentUserResult']):
        """
        :param Sequence[str] attribute_sets: A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
        :param str attributes: A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
        :param str authorization: The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
        :param str compartment_ocid: Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
        :param bool delete_in_progress: A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
        :param str domain_ocid: Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
        :param str expiry_time: Validation period of the trust token.
        :param str id: Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider's entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
        :param Sequence['GetDomainsMyTrustedUserAgentsMyTrustedUserAgentIdcsCreatedByArgs'] idcs_created_bies: The User or App who created the Resource
        :param str idcs_endpoint: The basic endpoint for the identity domain
        :param Sequence['GetDomainsMyTrustedUserAgentsMyTrustedUserAgentIdcsLastModifiedByArgs'] idcs_last_modified_bies: The User or App who modified the Resource
        :param str idcs_last_upgraded_in_release: The release number when the resource was upgraded.
        :param Sequence[str] idcs_prevented_operations: Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
        :param str last_used_on: Indicates when this token was used lastime.
        :param str location: The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        :param Sequence['GetDomainsMyTrustedUserAgentsMyTrustedUserAgentMetaArgs'] metas: A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
        :param str name: The name of the User Agent that the user wants the system to trust and to use in Multi-Factor Authentication.
        :param str ocid: The OCID of the user
        :param str platform: User agent platform for which the trust token has been issued.
        :param str resource_type_schema_version: An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
        :param Sequence[str] schemas: REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \\"enterprise\\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
        :param Sequence['GetDomainsMyTrustedUserAgentsMyTrustedUserAgentTagArgs'] tags: A list of tags on this resource.
        :param str tenancy_ocid: Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
        :param str token_type: The token type being created. This token is used as trusted and kmsi token.
        :param str trust_token: Trust token for the user agent. This is a random string value that will be updated whenever a token that has been issued is verified successfully.
        :param Sequence['GetDomainsMyTrustedUserAgentsMyTrustedUserAgentTrustedFactorArgs'] trusted_factors: Trusted 2FA Factors
        :param Sequence['GetDomainsMyTrustedUserAgentsMyTrustedUserAgentUserArgs'] users: user for whom the trust-token was issued
        """
        pulumi.set(__self__, "attribute_sets", attribute_sets)
        pulumi.set(__self__, "attributes", attributes)
        pulumi.set(__self__, "authorization", authorization)
        pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        pulumi.set(__self__, "domain_ocid", domain_ocid)
        pulumi.set(__self__, "expiry_time", expiry_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        pulumi.set(__self__, "idcs_endpoint", idcs_endpoint)
        pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        pulumi.set(__self__, "last_used_on", last_used_on)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "metas", metas)
        pulumi.set(__self__, "my_trusted_user_agent_id", my_trusted_user_agent_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "platform", platform)
        pulumi.set(__self__, "resource_type_schema_version", resource_type_schema_version)
        pulumi.set(__self__, "schemas", schemas)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)
        pulumi.set(__self__, "token_type", token_type)
        pulumi.set(__self__, "trust_token", trust_token)
        pulumi.set(__self__, "trusted_factors", trusted_factors)
        pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="attributeSets")
    def attribute_sets(self) -> Sequence[str]:
        """
        A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
        """
        return pulumi.get(self, "attribute_sets")

    @property
    @pulumi.getter
    def attributes(self) -> str:
        """
        A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
        """
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter
    def authorization(self) -> str:
        """
        The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
        """
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> bool:
        """
        A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
        """
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter(name="expiryTime")
    def expiry_time(self) -> str:
        """
        Validation period of the trust token.
        """
        return pulumi.get(self, "expiry_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider's entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Sequence['outputs.GetDomainsMyTrustedUserAgentsMyTrustedUserAgentIdcsCreatedByResult']:
        """
        The User or App who created the Resource
        """
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> str:
        """
        The basic endpoint for the identity domain
        """
        return pulumi.get(self, "idcs_endpoint")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Sequence['outputs.GetDomainsMyTrustedUserAgentsMyTrustedUserAgentIdcsLastModifiedByResult']:
        """
        The User or App who modified the Resource
        """
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> str:
        """
        The release number when the resource was upgraded.
        """
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Sequence[str]:
        """
        Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
        """
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter(name="lastUsedOn")
    def last_used_on(self) -> str:
        """
        Indicates when this token was used lastime.
        """
        return pulumi.get(self, "last_used_on")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def metas(self) -> Sequence['outputs.GetDomainsMyTrustedUserAgentsMyTrustedUserAgentMetaResult']:
        """
        A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
        """
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter(name="myTrustedUserAgentId")
    def my_trusted_user_agent_id(self) -> str:
        return pulumi.get(self, "my_trusted_user_agent_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the User Agent that the user wants the system to trust and to use in Multi-Factor Authentication.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        The OCID of the user
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def platform(self) -> str:
        """
        User agent platform for which the trust token has been issued.
        """
        return pulumi.get(self, "platform")

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> str:
        """
        An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
        """
        return pulumi.get(self, "resource_type_schema_version")

    @property
    @pulumi.getter
    def schemas(self) -> Sequence[str]:
        """
        REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \\"enterprise\\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
        """
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetDomainsMyTrustedUserAgentsMyTrustedUserAgentTagResult']:
        """
        A list of tags on this resource.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "tenancy_ocid")

    @property
    @pulumi.getter(name="tokenType")
    def token_type(self) -> str:
        """
        The token type being created. This token is used as trusted and kmsi token.
        """
        return pulumi.get(self, "token_type")

    @property
    @pulumi.getter(name="trustToken")
    def trust_token(self) -> str:
        """
        Trust token for the user agent. This is a random string value that will be updated whenever a token that has been issued is verified successfully.
        """
        return pulumi.get(self, "trust_token")

    @property
    @pulumi.getter(name="trustedFactors")
    def trusted_factors(self) -> Sequence['outputs.GetDomainsMyTrustedUserAgentsMyTrustedUserAgentTrustedFactorResult']:
        """
        Trusted 2FA Factors
        """
        return pulumi.get(self, "trusted_factors")

    @property
    @pulumi.getter
    def users(self) -> Sequence['outputs.GetDomainsMyTrustedUserAgentsMyTrustedUserAgentUserResult']:
        """
        user for whom the trust-token was issued
        """
        return pulumi.get(self, "users")


@pulumi.output_type
class GetDomainsMyTrustedUserAgentsMyTrustedUserAgentIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: Friendly name of the User to be used for purposes of display.
        :param str ocid: The OCID of the user
        :param str ref: Full URI to the user for whom the trust-token was issued.
        :param str type: Trusted Factor
        :param str value: The SCIM ID of the user for whom the trust-token was issued.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        Friendly name of the User to be used for purposes of display.
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        The OCID of the user
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        Full URI to the user for whom the trust-token was issued.
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Trusted Factor
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The SCIM ID of the user for whom the trust-token was issued.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyTrustedUserAgentsMyTrustedUserAgentIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: Friendly name of the User to be used for purposes of display.
        :param str ocid: The OCID of the user
        :param str ref: Full URI to the user for whom the trust-token was issued.
        :param str type: Trusted Factor
        :param str value: The SCIM ID of the user for whom the trust-token was issued.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        Friendly name of the User to be used for purposes of display.
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        The OCID of the user
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        Full URI to the user for whom the trust-token was issued.
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Trusted Factor
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The SCIM ID of the user for whom the trust-token was issued.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyTrustedUserAgentsMyTrustedUserAgentMetaResult(dict):
    def __init__(__self__, *,
                 created: str,
                 last_modified: str,
                 location: str,
                 resource_type: str,
                 version: str):
        """
        :param str created: The DateTime the Resource was added to the Service Provider
        :param str last_modified: The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        :param str location: The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        :param str resource_type: Name of the resource type of the resource--for example, Users or Groups
        :param str version: The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "last_modified", last_modified)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        The DateTime the Resource was added to the Service Provider
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> str:
        """
        The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Name of the resource type of the resource--for example, Users or Groups
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsMyTrustedUserAgentsMyTrustedUserAgentTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Key or name of the tag.
        :param str value: The SCIM ID of the user for whom the trust-token was issued.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key or name of the tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The SCIM ID of the user for whom the trust-token was issued.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyTrustedUserAgentsMyTrustedUserAgentTrustedFactorResult(dict):
    def __init__(__self__, *,
                 category: str,
                 creation_time: str,
                 type: str):
        """
        :param str category: Trusted Factor Type. Local, X509, SAML SOCIAL
        :param str creation_time: trust factor creation time
        :param str type: Trusted Factor
        """
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def category(self) -> str:
        """
        Trusted Factor Type. Local, X509, SAML SOCIAL
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        """
        trust factor creation time
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Trusted Factor
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDomainsMyTrustedUserAgentsMyTrustedUserAgentUserResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 value: str):
        """
        :param str display: Friendly name of the User to be used for purposes of display.
        :param str ocid: The OCID of the user
        :param str ref: Full URI to the user for whom the trust-token was issued.
        :param str value: The SCIM ID of the user for whom the trust-token was issued.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        Friendly name of the User to be used for purposes of display.
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        The OCID of the user
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        Full URI to the user for whom the trust-token was issued.
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The SCIM ID of the user for whom the trust-token was issued.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyUserDbCredentialIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: User display name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyUserDbCredentialIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: User display name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyUserDbCredentialMetaResult(dict):
    def __init__(__self__, *,
                 created: str,
                 last_modified: str,
                 location: str,
                 resource_type: str,
                 version: str):
        """
        :param str created: The DateTime the Resource was added to the Service Provider
        :param str last_modified: The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        :param str location: The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        :param str resource_type: Name of the resource type of the resource--for example, Users or Groups
        :param str version: The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "last_modified", last_modified)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        The DateTime the Resource was added to the Service Provider
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> str:
        """
        The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Name of the resource type of the resource--for example, Users or Groups
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsMyUserDbCredentialTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Key or name of the tag.
        :param str value: User's id
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key or name of the tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyUserDbCredentialUserResult(dict):
    def __init__(__self__, *,
                 display: str,
                 name: str,
                 ocid: str,
                 ref: str,
                 value: str):
        """
        :param str display: User display name
        :param str name: User name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        User name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyUserDbCredentialsMyUserDbCredentialResult(dict):
    def __init__(__self__, *,
                 authorization: str,
                 compartment_ocid: str,
                 db_password: str,
                 delete_in_progress: bool,
                 description: str,
                 domain_ocid: str,
                 expired: bool,
                 expires_on: str,
                 id: str,
                 idcs_created_bies: Sequence['outputs.GetDomainsMyUserDbCredentialsMyUserDbCredentialIdcsCreatedByResult'],
                 idcs_endpoint: str,
                 idcs_last_modified_bies: Sequence['outputs.GetDomainsMyUserDbCredentialsMyUserDbCredentialIdcsLastModifiedByResult'],
                 idcs_last_upgraded_in_release: str,
                 idcs_prevented_operations: Sequence[str],
                 last_set_date: str,
                 metas: Sequence['outputs.GetDomainsMyUserDbCredentialsMyUserDbCredentialMetaResult'],
                 mixed_db_password: str,
                 mixed_salt: str,
                 name: str,
                 ocid: str,
                 resource_type_schema_version: str,
                 salt: str,
                 schemas: Sequence[str],
                 status: str,
                 tags: Sequence['outputs.GetDomainsMyUserDbCredentialsMyUserDbCredentialTagResult'],
                 tenancy_ocid: str,
                 users: Sequence['outputs.GetDomainsMyUserDbCredentialsMyUserDbCredentialUserResult']):
        """
        :param str authorization: The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
        :param str compartment_ocid: Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
        :param str db_password: The db password of the user
        :param bool delete_in_progress: A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
        :param str description: Description
        :param str domain_ocid: Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
        :param bool expired: Indicates that the db password has expired
        :param str expires_on: User credential expires on
        :param str id: Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider's entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
        :param Sequence['GetDomainsMyUserDbCredentialsMyUserDbCredentialIdcsCreatedByArgs'] idcs_created_bies: The User or App who created the Resource
        :param str idcs_endpoint: The basic endpoint for the identity domain
        :param Sequence['GetDomainsMyUserDbCredentialsMyUserDbCredentialIdcsLastModifiedByArgs'] idcs_last_modified_bies: The User or App who modified the Resource
        :param str idcs_last_upgraded_in_release: The release number when the resource was upgraded.
        :param Sequence[str] idcs_prevented_operations: Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
        :param str last_set_date: A DateTime that specifies the date and time when the current db password was set
        :param Sequence['GetDomainsMyUserDbCredentialsMyUserDbCredentialMetaArgs'] metas: A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
        :param str mixed_db_password: The db password of the user with mixed salt
        :param str mixed_salt: The mixed salt of the password
        :param str name: User name
        :param str ocid: User's ocid
        :param str resource_type_schema_version: An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
        :param str salt: The salt of the password
        :param Sequence[str] schemas: REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \\"enterprise\\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
        :param str status: User credential status
        :param Sequence['GetDomainsMyUserDbCredentialsMyUserDbCredentialTagArgs'] tags: A list of tags on this resource.
        :param str tenancy_ocid: Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
        :param Sequence['GetDomainsMyUserDbCredentialsMyUserDbCredentialUserArgs'] users: User linked to db credential
        """
        pulumi.set(__self__, "authorization", authorization)
        pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        pulumi.set(__self__, "db_password", db_password)
        pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "domain_ocid", domain_ocid)
        pulumi.set(__self__, "expired", expired)
        pulumi.set(__self__, "expires_on", expires_on)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        pulumi.set(__self__, "idcs_endpoint", idcs_endpoint)
        pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        pulumi.set(__self__, "last_set_date", last_set_date)
        pulumi.set(__self__, "metas", metas)
        pulumi.set(__self__, "mixed_db_password", mixed_db_password)
        pulumi.set(__self__, "mixed_salt", mixed_salt)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "resource_type_schema_version", resource_type_schema_version)
        pulumi.set(__self__, "salt", salt)
        pulumi.set(__self__, "schemas", schemas)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)
        pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter
    def authorization(self) -> str:
        """
        The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
        """
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="dbPassword")
    def db_password(self) -> str:
        """
        The db password of the user
        """
        return pulumi.get(self, "db_password")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> bool:
        """
        A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
        """
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter
    def expired(self) -> bool:
        """
        Indicates that the db password has expired
        """
        return pulumi.get(self, "expired")

    @property
    @pulumi.getter(name="expiresOn")
    def expires_on(self) -> str:
        """
        User credential expires on
        """
        return pulumi.get(self, "expires_on")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider's entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Sequence['outputs.GetDomainsMyUserDbCredentialsMyUserDbCredentialIdcsCreatedByResult']:
        """
        The User or App who created the Resource
        """
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> str:
        """
        The basic endpoint for the identity domain
        """
        return pulumi.get(self, "idcs_endpoint")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Sequence['outputs.GetDomainsMyUserDbCredentialsMyUserDbCredentialIdcsLastModifiedByResult']:
        """
        The User or App who modified the Resource
        """
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> str:
        """
        The release number when the resource was upgraded.
        """
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Sequence[str]:
        """
        Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
        """
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter(name="lastSetDate")
    def last_set_date(self) -> str:
        """
        A DateTime that specifies the date and time when the current db password was set
        """
        return pulumi.get(self, "last_set_date")

    @property
    @pulumi.getter
    def metas(self) -> Sequence['outputs.GetDomainsMyUserDbCredentialsMyUserDbCredentialMetaResult']:
        """
        A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
        """
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter(name="mixedDbPassword")
    def mixed_db_password(self) -> str:
        """
        The db password of the user with mixed salt
        """
        return pulumi.get(self, "mixed_db_password")

    @property
    @pulumi.getter(name="mixedSalt")
    def mixed_salt(self) -> str:
        """
        The mixed salt of the password
        """
        return pulumi.get(self, "mixed_salt")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        User name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> str:
        """
        An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
        """
        return pulumi.get(self, "resource_type_schema_version")

    @property
    @pulumi.getter
    def salt(self) -> str:
        """
        The salt of the password
        """
        return pulumi.get(self, "salt")

    @property
    @pulumi.getter
    def schemas(self) -> Sequence[str]:
        """
        REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \\"enterprise\\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
        """
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        User credential status
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetDomainsMyUserDbCredentialsMyUserDbCredentialTagResult']:
        """
        A list of tags on this resource.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "tenancy_ocid")

    @property
    @pulumi.getter
    def users(self) -> Sequence['outputs.GetDomainsMyUserDbCredentialsMyUserDbCredentialUserResult']:
        """
        User linked to db credential
        """
        return pulumi.get(self, "users")


@pulumi.output_type
class GetDomainsMyUserDbCredentialsMyUserDbCredentialIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: User display name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyUserDbCredentialsMyUserDbCredentialIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: User display name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyUserDbCredentialsMyUserDbCredentialMetaResult(dict):
    def __init__(__self__, *,
                 created: str,
                 last_modified: str,
                 location: str,
                 resource_type: str,
                 version: str):
        """
        :param str created: The DateTime the Resource was added to the Service Provider
        :param str last_modified: The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        :param str location: The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        :param str resource_type: Name of the resource type of the resource--for example, Users or Groups
        :param str version: The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "last_modified", last_modified)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        The DateTime the Resource was added to the Service Provider
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> str:
        """
        The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Name of the resource type of the resource--for example, Users or Groups
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsMyUserDbCredentialsMyUserDbCredentialTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Key or name of the tag.
        :param str value: User's id
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key or name of the tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyUserDbCredentialsMyUserDbCredentialUserResult(dict):
    def __init__(__self__, *,
                 display: str,
                 name: str,
                 ocid: str,
                 ref: str,
                 value: str):
        """
        :param str display: User display name
        :param str name: User name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        User name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsOauth2clientCredentialIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: User display name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsOauth2clientCredentialIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: User display name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsOauth2clientCredentialMetaResult(dict):
    def __init__(__self__, *,
                 created: str,
                 last_modified: str,
                 location: str,
                 resource_type: str,
                 version: str):
        """
        :param str created: The DateTime the Resource was added to the Service Provider
        :param str last_modified: The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        :param str location: The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        :param str resource_type: Name of the resource type of the resource--for example, Users or Groups
        :param str version: The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "last_modified", last_modified)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        The DateTime the Resource was added to the Service Provider
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> str:
        """
        The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Name of the resource type of the resource--for example, Users or Groups
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsOauth2clientCredentialScopeResult(dict):
    def __init__(__self__, *,
                 audience: str,
                 scope: str):
        """
        :param str audience: Audience
        :param str scope: Scope
        """
        pulumi.set(__self__, "audience", audience)
        pulumi.set(__self__, "scope", scope)

    @property
    @pulumi.getter
    def audience(self) -> str:
        """
        Audience
        """
        return pulumi.get(self, "audience")

    @property
    @pulumi.getter
    def scope(self) -> str:
        """
        Scope
        """
        return pulumi.get(self, "scope")


@pulumi.output_type
class GetDomainsOauth2clientCredentialTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Key or name of the tag.
        :param str value: User's id
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key or name of the tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsOauth2clientCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult(dict):
    def __init__(__self__, *,
                 allow_self_change: bool):
        """
        :param bool allow_self_change: If true, allows requesting user to update themselves. If false, requesting user can't update themself (default).
        """
        pulumi.set(__self__, "allow_self_change", allow_self_change)

    @property
    @pulumi.getter(name="allowSelfChange")
    def allow_self_change(self) -> bool:
        """
        If true, allows requesting user to update themselves. If false, requesting user can't update themself (default).
        """
        return pulumi.get(self, "allow_self_change")


@pulumi.output_type
class GetDomainsOauth2clientCredentialUserResult(dict):
    def __init__(__self__, *,
                 display: str,
                 name: str,
                 ocid: str,
                 ref: str,
                 value: str):
        """
        :param str display: User display name
        :param str name: User name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        User name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsOauth2clientCredentialsOauth2clientCredentialResult(dict):
    def __init__(__self__, *,
                 attribute_sets: Sequence[str],
                 attributes: str,
                 authorization: str,
                 compartment_ocid: str,
                 delete_in_progress: bool,
                 description: str,
                 domain_ocid: str,
                 expires_on: str,
                 id: str,
                 idcs_created_bies: Sequence['outputs.GetDomainsOauth2clientCredentialsOauth2clientCredentialIdcsCreatedByResult'],
                 idcs_endpoint: str,
                 idcs_last_modified_bies: Sequence['outputs.GetDomainsOauth2clientCredentialsOauth2clientCredentialIdcsLastModifiedByResult'],
                 idcs_last_upgraded_in_release: str,
                 idcs_prevented_operations: Sequence[str],
                 is_reset_secret: bool,
                 metas: Sequence['outputs.GetDomainsOauth2clientCredentialsOauth2clientCredentialMetaResult'],
                 name: str,
                 ocid: str,
                 resource_type_schema_version: str,
                 schemas: Sequence[str],
                 scopes: Sequence['outputs.GetDomainsOauth2clientCredentialsOauth2clientCredentialScopeResult'],
                 status: str,
                 tags: Sequence['outputs.GetDomainsOauth2clientCredentialsOauth2clientCredentialTagResult'],
                 tenancy_ocid: str,
                 urnietfparamsscimschemasoracleidcsextensionself_change_users: Sequence['outputs.GetDomainsOauth2clientCredentialsOauth2clientCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult'],
                 users: Sequence['outputs.GetDomainsOauth2clientCredentialsOauth2clientCredentialUserResult']):
        """
        :param Sequence[str] attribute_sets: A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
        :param str attributes: A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
        :param str authorization: The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
        :param str compartment_ocid: Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
        :param bool delete_in_progress: A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
        :param str description: Description
        :param str domain_ocid: Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
        :param str expires_on: User credential expires on
        :param str id: Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider's entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
        :param Sequence['GetDomainsOauth2clientCredentialsOauth2clientCredentialIdcsCreatedByArgs'] idcs_created_bies: The User or App who created the Resource
        :param str idcs_endpoint: The basic endpoint for the identity domain
        :param Sequence['GetDomainsOauth2clientCredentialsOauth2clientCredentialIdcsLastModifiedByArgs'] idcs_last_modified_bies: The User or App who modified the Resource
        :param str idcs_last_upgraded_in_release: The release number when the resource was upgraded.
        :param Sequence[str] idcs_prevented_operations: Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
        :param bool is_reset_secret: Specifies if secret need to be reset
        :param Sequence['GetDomainsOauth2clientCredentialsOauth2clientCredentialMetaArgs'] metas: A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
        :param str name: User name
        :param str ocid: User's ocid
        :param str resource_type_schema_version: An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
        :param Sequence[str] schemas: REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \\"enterprise\\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
        :param Sequence['GetDomainsOauth2clientCredentialsOauth2clientCredentialScopeArgs'] scopes: Scopes
        :param str status: User credential status
        :param Sequence['GetDomainsOauth2clientCredentialsOauth2clientCredentialTagArgs'] tags: A list of tags on this resource.
        :param str tenancy_ocid: Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
        :param Sequence['GetDomainsOauth2clientCredentialsOauth2clientCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUserArgs'] urnietfparamsscimschemasoracleidcsextensionself_change_users: Controls whether a user can update themselves or not via User related APIs
        :param Sequence['GetDomainsOauth2clientCredentialsOauth2clientCredentialUserArgs'] users: User linked to oauth2 client credential
        """
        pulumi.set(__self__, "attribute_sets", attribute_sets)
        pulumi.set(__self__, "attributes", attributes)
        pulumi.set(__self__, "authorization", authorization)
        pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "domain_ocid", domain_ocid)
        pulumi.set(__self__, "expires_on", expires_on)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        pulumi.set(__self__, "idcs_endpoint", idcs_endpoint)
        pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        pulumi.set(__self__, "is_reset_secret", is_reset_secret)
        pulumi.set(__self__, "metas", metas)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "resource_type_schema_version", resource_type_schema_version)
        pulumi.set(__self__, "schemas", schemas)
        pulumi.set(__self__, "scopes", scopes)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)
        pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionself_change_users", urnietfparamsscimschemasoracleidcsextensionself_change_users)
        pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="attributeSets")
    def attribute_sets(self) -> Sequence[str]:
        """
        A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
        """
        return pulumi.get(self, "attribute_sets")

    @property
    @pulumi.getter
    def attributes(self) -> str:
        """
        A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
        """
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter
    def authorization(self) -> str:
        """
        The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
        """
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> bool:
        """
        A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
        """
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter(name="expiresOn")
    def expires_on(self) -> str:
        """
        User credential expires on
        """
        return pulumi.get(self, "expires_on")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider's entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Sequence['outputs.GetDomainsOauth2clientCredentialsOauth2clientCredentialIdcsCreatedByResult']:
        """
        The User or App who created the Resource
        """
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> str:
        """
        The basic endpoint for the identity domain
        """
        return pulumi.get(self, "idcs_endpoint")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Sequence['outputs.GetDomainsOauth2clientCredentialsOauth2clientCredentialIdcsLastModifiedByResult']:
        """
        The User or App who modified the Resource
        """
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> str:
        """
        The release number when the resource was upgraded.
        """
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Sequence[str]:
        """
        Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
        """
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter(name="isResetSecret")
    def is_reset_secret(self) -> bool:
        """
        Specifies if secret need to be reset
        """
        return pulumi.get(self, "is_reset_secret")

    @property
    @pulumi.getter
    def metas(self) -> Sequence['outputs.GetDomainsOauth2clientCredentialsOauth2clientCredentialMetaResult']:
        """
        A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
        """
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        User name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> str:
        """
        An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
        """
        return pulumi.get(self, "resource_type_schema_version")

    @property
    @pulumi.getter
    def schemas(self) -> Sequence[str]:
        """
        REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \\"enterprise\\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
        """
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter
    def scopes(self) -> Sequence['outputs.GetDomainsOauth2clientCredentialsOauth2clientCredentialScopeResult']:
        """
        Scopes
        """
        return pulumi.get(self, "scopes")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        User credential status
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetDomainsOauth2clientCredentialsOauth2clientCredentialTagResult']:
        """
        A list of tags on this resource.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "tenancy_ocid")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionselfChangeUsers")
    def urnietfparamsscimschemasoracleidcsextensionself_change_users(self) -> Sequence['outputs.GetDomainsOauth2clientCredentialsOauth2clientCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult']:
        """
        Controls whether a user can update themselves or not via User related APIs
        """
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionself_change_users")

    @property
    @pulumi.getter
    def users(self) -> Sequence['outputs.GetDomainsOauth2clientCredentialsOauth2clientCredentialUserResult']:
        """
        User linked to oauth2 client credential
        """
        return pulumi.get(self, "users")


@pulumi.output_type
class GetDomainsOauth2clientCredentialsOauth2clientCredentialIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: User display name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsOauth2clientCredentialsOauth2clientCredentialIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: User display name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsOauth2clientCredentialsOauth2clientCredentialMetaResult(dict):
    def __init__(__self__, *,
                 created: str,
                 last_modified: str,
                 location: str,
                 resource_type: str,
                 version: str):
        """
        :param str created: The DateTime the Resource was added to the Service Provider
        :param str last_modified: The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        :param str location: The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        :param str resource_type: Name of the resource type of the resource--for example, Users or Groups
        :param str version: The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "last_modified", last_modified)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        The DateTime the Resource was added to the Service Provider
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> str:
        """
        The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Name of the resource type of the resource--for example, Users or Groups
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsOauth2clientCredentialsOauth2clientCredentialScopeResult(dict):
    def __init__(__self__, *,
                 audience: str,
                 scope: str):
        """
        :param str audience: Audience
        :param str scope: Scope
        """
        pulumi.set(__self__, "audience", audience)
        pulumi.set(__self__, "scope", scope)

    @property
    @pulumi.getter
    def audience(self) -> str:
        """
        Audience
        """
        return pulumi.get(self, "audience")

    @property
    @pulumi.getter
    def scope(self) -> str:
        """
        Scope
        """
        return pulumi.get(self, "scope")


@pulumi.output_type
class GetDomainsOauth2clientCredentialsOauth2clientCredentialTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Key or name of the tag.
        :param str value: User's id
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key or name of the tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsOauth2clientCredentialsOauth2clientCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult(dict):
    def __init__(__self__, *,
                 allow_self_change: bool):
        """
        :param bool allow_self_change: If true, allows requesting user to update themselves. If false, requesting user can't update themself (default).
        """
        pulumi.set(__self__, "allow_self_change", allow_self_change)

    @property
    @pulumi.getter(name="allowSelfChange")
    def allow_self_change(self) -> bool:
        """
        If true, allows requesting user to update themselves. If false, requesting user can't update themself (default).
        """
        return pulumi.get(self, "allow_self_change")


@pulumi.output_type
class GetDomainsOauth2clientCredentialsOauth2clientCredentialUserResult(dict):
    def __init__(__self__, *,
                 display: str,
                 name: str,
                 ocid: str,
                 ref: str,
                 value: str):
        """
        :param str display: User display name
        :param str name: User name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        User name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsPasswordPoliciesPasswordPolicyResult(dict):
    def __init__(__self__, *,
                 allowed_chars: str,
                 attribute_sets: Sequence[str],
                 attributes: str,
                 authorization: str,
                 compartment_ocid: str,
                 configured_password_policy_rules: Sequence['outputs.GetDomainsPasswordPoliciesPasswordPolicyConfiguredPasswordPolicyRuleResult'],
                 delete_in_progress: bool,
                 description: str,
                 dictionary_delimiter: str,
                 dictionary_location: str,
                 dictionary_word_disallowed: bool,
                 disallowed_chars: str,
                 disallowed_substrings: Sequence[str],
                 domain_ocid: str,
                 external_id: str,
                 first_name_disallowed: bool,
                 force_password_reset: bool,
                 groups: Sequence['outputs.GetDomainsPasswordPoliciesPasswordPolicyGroupResult'],
                 id: str,
                 idcs_created_bies: Sequence['outputs.GetDomainsPasswordPoliciesPasswordPolicyIdcsCreatedByResult'],
                 idcs_endpoint: str,
                 idcs_last_modified_bies: Sequence['outputs.GetDomainsPasswordPoliciesPasswordPolicyIdcsLastModifiedByResult'],
                 idcs_last_upgraded_in_release: str,
                 idcs_prevented_operations: Sequence[str],
                 last_name_disallowed: bool,
                 lockout_duration: int,
                 max_incorrect_attempts: int,
                 max_length: int,
                 max_repeated_chars: int,
                 max_special_chars: int,
                 metas: Sequence['outputs.GetDomainsPasswordPoliciesPasswordPolicyMetaResult'],
                 min_alpha_numerals: int,
                 min_alphas: int,
                 min_length: int,
                 min_lower_case: int,
                 min_numerals: int,
                 min_password_age: int,
                 min_special_chars: int,
                 min_unique_chars: int,
                 min_upper_case: int,
                 name: str,
                 num_passwords_in_history: int,
                 ocid: str,
                 password_expire_warning: int,
                 password_expires_after: int,
                 password_strength: str,
                 priority: int,
                 required_chars: str,
                 resource_type_schema_version: str,
                 schemas: Sequence[str],
                 starts_with_alphabet: bool,
                 tags: Sequence['outputs.GetDomainsPasswordPoliciesPasswordPolicyTagResult'],
                 tenancy_ocid: str,
                 user_name_disallowed: bool):
        """
        :param str allowed_chars: A String value whose contents indicate a set of characters that can appear, in any sequence, in a password value
        :param Sequence[str] attribute_sets: A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
        :param str attributes: A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
        :param str authorization: The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
        :param str compartment_ocid: Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
        :param Sequence['GetDomainsPasswordPoliciesPasswordPolicyConfiguredPasswordPolicyRuleArgs'] configured_password_policy_rules: List of password policy rules that have values set. This map of stringKey:stringValue pairs can be used to aid users while setting/resetting password
        :param bool delete_in_progress: A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
        :param str description: A String that describes the password policy
        :param str dictionary_delimiter: A delimiter used to separate characters in the dictionary file
        :param str dictionary_location: A Reference value that contains the URI of a dictionary of words not allowed to appear within a password value
        :param bool dictionary_word_disallowed: Indicates whether the password can match a dictionary word
        :param str disallowed_chars: A String value whose contents indicate a set of characters that cannot appear, in any sequence, in a password value
        :param Sequence[str] disallowed_substrings: A String value whose contents indicate a set of substrings that cannot appear, in any sequence, in a password value
        :param str domain_ocid: Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
        :param str external_id: An identifier for the Resource as defined by the Service Consumer. The externalId may simplify identification of the Resource between Service Consumer and Service Provider by allowing the Consumer to refer to the Resource with its own identifier, obviating the need to store a local mapping between the local identifier of the Resource and the identifier used by the Service Provider. Each Resource MAY include a non-empty externalId value. The value of the externalId attribute is always issued by the Service Consumer and can never be specified by the Service Provider. The Service Provider MUST always interpret the externalId as scoped to the Service Consumer's tenant.
        :param bool first_name_disallowed: Indicates a sequence of characters that match the user's first name of given name cannot be the password. Password validation against policy will be ignored if length of first name is less than or equal to 3 characters.
        :param bool force_password_reset: Indicates whether all of the users should be forced to reset their password on the next login (to comply with new password policy changes)
        :param Sequence['GetDomainsPasswordPoliciesPasswordPolicyGroupArgs'] groups: A list of groups that the password policy belongs to.
        :param str id: Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider's entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
        :param Sequence['GetDomainsPasswordPoliciesPasswordPolicyIdcsCreatedByArgs'] idcs_created_bies: The User or App who created the Resource
        :param str idcs_endpoint: The basic endpoint for the identity domain
        :param Sequence['GetDomainsPasswordPoliciesPasswordPolicyIdcsLastModifiedByArgs'] idcs_last_modified_bies: The User or App who modified the Resource
        :param str idcs_last_upgraded_in_release: The release number when the resource was upgraded.
        :param Sequence[str] idcs_prevented_operations: Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
        :param bool last_name_disallowed: Indicates a sequence of characters that match the user's last name of given name cannot be the password. Password validation against policy will be ignored if length of last name is less than or equal to 3 characters.
        :param int lockout_duration: The time period in minutes to lock out a user account when the threshold of invalid login attempts is reached. The available range is from 5 through 1440 minutes (24 hours).
        :param int max_incorrect_attempts: An integer that represents the maximum number of failed logins before an account is locked
        :param int max_length: The maximum password length (in characters). A value of 0 or no value indicates no maximum length restriction.
        :param int max_repeated_chars: The maximum number of repeated characters allowed in a password.  A value of 0 or no value indicates no such restriction.
        :param int max_special_chars: The maximum number of special characters in a password.  A value of 0 or no value indicates no maximum special characters restriction.
        :param Sequence['GetDomainsPasswordPoliciesPasswordPolicyMetaArgs'] metas: A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
        :param int min_alpha_numerals: The minimum number of a combination of alphabetic and numeric characters in a password.  A value of 0 or no value indicates no minimum alphanumeric character restriction.
        :param int min_alphas: The minimum number of alphabetic characters in a password.  A value of 0 or no value indicates no minimum alphas restriction.
        :param int min_length: The minimum password length (in characters). A value of 0 or no value indicates no minimum length restriction.
        :param int min_lower_case: The minimum number of lowercase alphabetic characters in a password.  A value of 0 or no value indicates no minimum lowercase restriction.
        :param int min_numerals: The minimum number of numeric characters in a password.  A value of 0 or no value indicates no minimum numeric character restriction.
        :param int min_password_age: Minimum time after which the user can resubmit the reset password request
        :param int min_special_chars: The minimum number of special characters in a password. A value of 0 or no value indicates no minimum special characters restriction.
        :param int min_unique_chars: The minimum number of unique characters in a password.  A value of 0 or no value indicates no minimum unique characters restriction.
        :param int min_upper_case: The minimum number of uppercase alphabetic characters in a password. A value of 0 or no value indicates no minimum uppercase restriction.
        :param str name: A String that is the name of the policy to display to the user. This is the only mandatory attribute for a password policy.
        :param int num_passwords_in_history: The number of passwords that will be kept in history that may not be used as a password
        :param str ocid: Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        :param int password_expire_warning: An integer indicating the number of days before which the user should be warned about password expiry.
        :param int password_expires_after: The number of days after which the password expires automatically
        :param str password_strength: Indicates whether the password policy is configured as Simple, Standard, or Custom.
        :param int priority: Password policy priority
        :param str required_chars: A String value whose contents indicate a set of characters that must appear, in any sequence, in a password value
        :param str resource_type_schema_version: An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
        :param Sequence[str] schemas: REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \\"enterprise\\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
        :param bool starts_with_alphabet: Indicates that the password must begin with an alphabetic character
        :param Sequence['GetDomainsPasswordPoliciesPasswordPolicyTagArgs'] tags: A list of tags on this resource.
        :param str tenancy_ocid: Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
        :param bool user_name_disallowed: Indicates a sequence of characters that match the username cannot be the password. Password validation against policy will be ignored if length of user name is less than or equal to 3 characters.
        """
        pulumi.set(__self__, "allowed_chars", allowed_chars)
        pulumi.set(__self__, "attribute_sets", attribute_sets)
        pulumi.set(__self__, "attributes", attributes)
        pulumi.set(__self__, "authorization", authorization)
        pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        pulumi.set(__self__, "configured_password_policy_rules", configured_password_policy_rules)
        pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "dictionary_delimiter", dictionary_delimiter)
        pulumi.set(__self__, "dictionary_location", dictionary_location)
        pulumi.set(__self__, "dictionary_word_disallowed", dictionary_word_disallowed)
        pulumi.set(__self__, "disallowed_chars", disallowed_chars)
        pulumi.set(__self__, "disallowed_substrings", disallowed_substrings)
        pulumi.set(__self__, "domain_ocid", domain_ocid)
        pulumi.set(__self__, "external_id", external_id)
        pulumi.set(__self__, "first_name_disallowed", first_name_disallowed)
        pulumi.set(__self__, "force_password_reset", force_password_reset)
        pulumi.set(__self__, "groups", groups)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        pulumi.set(__self__, "idcs_endpoint", idcs_endpoint)
        pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        pulumi.set(__self__, "last_name_disallowed", last_name_disallowed)
        pulumi.set(__self__, "lockout_duration", lockout_duration)
        pulumi.set(__self__, "max_incorrect_attempts", max_incorrect_attempts)
        pulumi.set(__self__, "max_length", max_length)
        pulumi.set(__self__, "max_repeated_chars", max_repeated_chars)
        pulumi.set(__self__, "max_special_chars", max_special_chars)
        pulumi.set(__self__, "metas", metas)
        pulumi.set(__self__, "min_alpha_numerals", min_alpha_numerals)
        pulumi.set(__self__, "min_alphas", min_alphas)
        pulumi.set(__self__, "min_length", min_length)
        pulumi.set(__self__, "min_lower_case", min_lower_case)
        pulumi.set(__self__, "min_numerals", min_numerals)
        pulumi.set(__self__, "min_password_age", min_password_age)
        pulumi.set(__self__, "min_special_chars", min_special_chars)
        pulumi.set(__self__, "min_unique_chars", min_unique_chars)
        pulumi.set(__self__, "min_upper_case", min_upper_case)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "num_passwords_in_history", num_passwords_in_history)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "password_expire_warning", password_expire_warning)
        pulumi.set(__self__, "password_expires_after", password_expires_after)
        pulumi.set(__self__, "password_strength", password_strength)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "required_chars", required_chars)
        pulumi.set(__self__, "resource_type_schema_version", resource_type_schema_version)
        pulumi.set(__self__, "schemas", schemas)
        pulumi.set(__self__, "starts_with_alphabet", starts_with_alphabet)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)
        pulumi.set(__self__, "user_name_disallowed", user_name_disallowed)

    @property
    @pulumi.getter(name="allowedChars")
    def allowed_chars(self) -> str:
        """
        A String value whose contents indicate a set of characters that can appear, in any sequence, in a password value
        """
        return pulumi.get(self, "allowed_chars")

    @property
    @pulumi.getter(name="attributeSets")
    def attribute_sets(self) -> Sequence[str]:
        """
        A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
        """
        return pulumi.get(self, "attribute_sets")

    @property
    @pulumi.getter
    def attributes(self) -> str:
        """
        A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
        """
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter
    def authorization(self) -> str:
        """
        The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
        """
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="configuredPasswordPolicyRules")
    def configured_password_policy_rules(self) -> Sequence['outputs.GetDomainsPasswordPoliciesPasswordPolicyConfiguredPasswordPolicyRuleResult']:
        """
        List of password policy rules that have values set. This map of stringKey:stringValue pairs can be used to aid users while setting/resetting password
        """
        return pulumi.get(self, "configured_password_policy_rules")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> bool:
        """
        A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
        """
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A String that describes the password policy
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dictionaryDelimiter")
    def dictionary_delimiter(self) -> str:
        """
        A delimiter used to separate characters in the dictionary file
        """
        return pulumi.get(self, "dictionary_delimiter")

    @property
    @pulumi.getter(name="dictionaryLocation")
    def dictionary_location(self) -> str:
        """
        A Reference value that contains the URI of a dictionary of words not allowed to appear within a password value
        """
        return pulumi.get(self, "dictionary_location")

    @property
    @pulumi.getter(name="dictionaryWordDisallowed")
    def dictionary_word_disallowed(self) -> bool:
        """
        Indicates whether the password can match a dictionary word
        """
        return pulumi.get(self, "dictionary_word_disallowed")

    @property
    @pulumi.getter(name="disallowedChars")
    def disallowed_chars(self) -> str:
        """
        A String value whose contents indicate a set of characters that cannot appear, in any sequence, in a password value
        """
        return pulumi.get(self, "disallowed_chars")

    @property
    @pulumi.getter(name="disallowedSubstrings")
    def disallowed_substrings(self) -> Sequence[str]:
        """
        A String value whose contents indicate a set of substrings that cannot appear, in any sequence, in a password value
        """
        return pulumi.get(self, "disallowed_substrings")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> str:
        """
        An identifier for the Resource as defined by the Service Consumer. The externalId may simplify identification of the Resource between Service Consumer and Service Provider by allowing the Consumer to refer to the Resource with its own identifier, obviating the need to store a local mapping between the local identifier of the Resource and the identifier used by the Service Provider. Each Resource MAY include a non-empty externalId value. The value of the externalId attribute is always issued by the Service Consumer and can never be specified by the Service Provider. The Service Provider MUST always interpret the externalId as scoped to the Service Consumer's tenant.
        """
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter(name="firstNameDisallowed")
    def first_name_disallowed(self) -> bool:
        """
        Indicates a sequence of characters that match the user's first name of given name cannot be the password. Password validation against policy will be ignored if length of first name is less than or equal to 3 characters.
        """
        return pulumi.get(self, "first_name_disallowed")

    @property
    @pulumi.getter(name="forcePasswordReset")
    def force_password_reset(self) -> bool:
        """
        Indicates whether all of the users should be forced to reset their password on the next login (to comply with new password policy changes)
        """
        return pulumi.get(self, "force_password_reset")

    @property
    @pulumi.getter
    def groups(self) -> Sequence['outputs.GetDomainsPasswordPoliciesPasswordPolicyGroupResult']:
        """
        A list of groups that the password policy belongs to.
        """
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider's entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Sequence['outputs.GetDomainsPasswordPoliciesPasswordPolicyIdcsCreatedByResult']:
        """
        The User or App who created the Resource
        """
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> str:
        """
        The basic endpoint for the identity domain
        """
        return pulumi.get(self, "idcs_endpoint")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Sequence['outputs.GetDomainsPasswordPoliciesPasswordPolicyIdcsLastModifiedByResult']:
        """
        The User or App who modified the Resource
        """
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> str:
        """
        The release number when the resource was upgraded.
        """
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Sequence[str]:
        """
        Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
        """
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter(name="lastNameDisallowed")
    def last_name_disallowed(self) -> bool:
        """
        Indicates a sequence of characters that match the user's last name of given name cannot be the password. Password validation against policy will be ignored if length of last name is less than or equal to 3 characters.
        """
        return pulumi.get(self, "last_name_disallowed")

    @property
    @pulumi.getter(name="lockoutDuration")
    def lockout_duration(self) -> int:
        """
        The time period in minutes to lock out a user account when the threshold of invalid login attempts is reached. The available range is from 5 through 1440 minutes (24 hours).
        """
        return pulumi.get(self, "lockout_duration")

    @property
    @pulumi.getter(name="maxIncorrectAttempts")
    def max_incorrect_attempts(self) -> int:
        """
        An integer that represents the maximum number of failed logins before an account is locked
        """
        return pulumi.get(self, "max_incorrect_attempts")

    @property
    @pulumi.getter(name="maxLength")
    def max_length(self) -> int:
        """
        The maximum password length (in characters). A value of 0 or no value indicates no maximum length restriction.
        """
        return pulumi.get(self, "max_length")

    @property
    @pulumi.getter(name="maxRepeatedChars")
    def max_repeated_chars(self) -> int:
        """
        The maximum number of repeated characters allowed in a password.  A value of 0 or no value indicates no such restriction.
        """
        return pulumi.get(self, "max_repeated_chars")

    @property
    @pulumi.getter(name="maxSpecialChars")
    def max_special_chars(self) -> int:
        """
        The maximum number of special characters in a password.  A value of 0 or no value indicates no maximum special characters restriction.
        """
        return pulumi.get(self, "max_special_chars")

    @property
    @pulumi.getter
    def metas(self) -> Sequence['outputs.GetDomainsPasswordPoliciesPasswordPolicyMetaResult']:
        """
        A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
        """
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter(name="minAlphaNumerals")
    def min_alpha_numerals(self) -> int:
        """
        The minimum number of a combination of alphabetic and numeric characters in a password.  A value of 0 or no value indicates no minimum alphanumeric character restriction.
        """
        return pulumi.get(self, "min_alpha_numerals")

    @property
    @pulumi.getter(name="minAlphas")
    def min_alphas(self) -> int:
        """
        The minimum number of alphabetic characters in a password.  A value of 0 or no value indicates no minimum alphas restriction.
        """
        return pulumi.get(self, "min_alphas")

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> int:
        """
        The minimum password length (in characters). A value of 0 or no value indicates no minimum length restriction.
        """
        return pulumi.get(self, "min_length")

    @property
    @pulumi.getter(name="minLowerCase")
    def min_lower_case(self) -> int:
        """
        The minimum number of lowercase alphabetic characters in a password.  A value of 0 or no value indicates no minimum lowercase restriction.
        """
        return pulumi.get(self, "min_lower_case")

    @property
    @pulumi.getter(name="minNumerals")
    def min_numerals(self) -> int:
        """
        The minimum number of numeric characters in a password.  A value of 0 or no value indicates no minimum numeric character restriction.
        """
        return pulumi.get(self, "min_numerals")

    @property
    @pulumi.getter(name="minPasswordAge")
    def min_password_age(self) -> int:
        """
        Minimum time after which the user can resubmit the reset password request
        """
        return pulumi.get(self, "min_password_age")

    @property
    @pulumi.getter(name="minSpecialChars")
    def min_special_chars(self) -> int:
        """
        The minimum number of special characters in a password. A value of 0 or no value indicates no minimum special characters restriction.
        """
        return pulumi.get(self, "min_special_chars")

    @property
    @pulumi.getter(name="minUniqueChars")
    def min_unique_chars(self) -> int:
        """
        The minimum number of unique characters in a password.  A value of 0 or no value indicates no minimum unique characters restriction.
        """
        return pulumi.get(self, "min_unique_chars")

    @property
    @pulumi.getter(name="minUpperCase")
    def min_upper_case(self) -> int:
        """
        The minimum number of uppercase alphabetic characters in a password. A value of 0 or no value indicates no minimum uppercase restriction.
        """
        return pulumi.get(self, "min_upper_case")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A String that is the name of the policy to display to the user. This is the only mandatory attribute for a password policy.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="numPasswordsInHistory")
    def num_passwords_in_history(self) -> int:
        """
        The number of passwords that will be kept in history that may not be used as a password
        """
        return pulumi.get(self, "num_passwords_in_history")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="passwordExpireWarning")
    def password_expire_warning(self) -> int:
        """
        An integer indicating the number of days before which the user should be warned about password expiry.
        """
        return pulumi.get(self, "password_expire_warning")

    @property
    @pulumi.getter(name="passwordExpiresAfter")
    def password_expires_after(self) -> int:
        """
        The number of days after which the password expires automatically
        """
        return pulumi.get(self, "password_expires_after")

    @property
    @pulumi.getter(name="passwordStrength")
    def password_strength(self) -> str:
        """
        Indicates whether the password policy is configured as Simple, Standard, or Custom.
        """
        return pulumi.get(self, "password_strength")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        Password policy priority
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="requiredChars")
    def required_chars(self) -> str:
        """
        A String value whose contents indicate a set of characters that must appear, in any sequence, in a password value
        """
        return pulumi.get(self, "required_chars")

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> str:
        """
        An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
        """
        return pulumi.get(self, "resource_type_schema_version")

    @property
    @pulumi.getter
    def schemas(self) -> Sequence[str]:
        """
        REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \\"enterprise\\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
        """
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter(name="startsWithAlphabet")
    def starts_with_alphabet(self) -> bool:
        """
        Indicates that the password must begin with an alphabetic character
        """
        return pulumi.get(self, "starts_with_alphabet")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetDomainsPasswordPoliciesPasswordPolicyTagResult']:
        """
        A list of tags on this resource.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "tenancy_ocid")

    @property
    @pulumi.getter(name="userNameDisallowed")
    def user_name_disallowed(self) -> bool:
        """
        Indicates a sequence of characters that match the username cannot be the password. Password validation against policy will be ignored if length of user name is less than or equal to 3 characters.
        """
        return pulumi.get(self, "user_name_disallowed")


@pulumi.output_type
class GetDomainsPasswordPoliciesPasswordPolicyConfiguredPasswordPolicyRuleResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Key or name of the tag.
        :param str value: Value of the tag.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key or name of the tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of the tag.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsPasswordPoliciesPasswordPolicyGroupResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ref: str,
                 value: str):
        """
        :param str display: The displayName of the User or App who modified this Resource
        :param str ref: The URI of the SCIM resource that represents the User or App who modified this Resource
        :param str value: Value of the tag.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        The displayName of the User or App who modified this Resource
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI of the SCIM resource that represents the User or App who modified this Resource
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of the tag.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsPasswordPoliciesPasswordPolicyIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: The displayName of the User or App who modified this Resource
        :param str ocid: Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        :param str ref: The URI of the SCIM resource that represents the User or App who modified this Resource
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: Value of the tag.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        The displayName of the User or App who modified this Resource
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI of the SCIM resource that represents the User or App who modified this Resource
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of the tag.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsPasswordPoliciesPasswordPolicyIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: The displayName of the User or App who modified this Resource
        :param str ocid: Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        :param str ref: The URI of the SCIM resource that represents the User or App who modified this Resource
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: Value of the tag.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        The displayName of the User or App who modified this Resource
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI of the SCIM resource that represents the User or App who modified this Resource
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of the tag.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsPasswordPoliciesPasswordPolicyMetaResult(dict):
    def __init__(__self__, *,
                 created: str,
                 last_modified: str,
                 location: str,
                 resource_type: str,
                 version: str):
        """
        :param str created: The DateTime the Resource was added to the Service Provider
        :param str last_modified: The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        :param str location: The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        :param str resource_type: Name of the resource type of the resource--for example, Users or Groups
        :param str version: The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "last_modified", last_modified)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        The DateTime the Resource was added to the Service Provider
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> str:
        """
        The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Name of the resource type of the resource--for example, Users or Groups
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsPasswordPoliciesPasswordPolicyTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Key or name of the tag.
        :param str value: Value of the tag.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key or name of the tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of the tag.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsPasswordPolicyConfiguredPasswordPolicyRuleResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Key or name of the tag.
        :param str value: Value of the tag.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key or name of the tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of the tag.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsPasswordPolicyGroupResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ref: str,
                 value: str):
        """
        :param str display: The displayName of the User or App who modified this Resource
        :param str ref: The URI of the SCIM resource that represents the User or App who modified this Resource
        :param str value: Value of the tag.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        The displayName of the User or App who modified this Resource
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI of the SCIM resource that represents the User or App who modified this Resource
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of the tag.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsPasswordPolicyIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: The displayName of the User or App who modified this Resource
        :param str ocid: Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        :param str ref: The URI of the SCIM resource that represents the User or App who modified this Resource
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: Value of the tag.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        The displayName of the User or App who modified this Resource
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI of the SCIM resource that represents the User or App who modified this Resource
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of the tag.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsPasswordPolicyIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: The displayName of the User or App who modified this Resource
        :param str ocid: Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        :param str ref: The URI of the SCIM resource that represents the User or App who modified this Resource
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: Value of the tag.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        The displayName of the User or App who modified this Resource
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI of the SCIM resource that represents the User or App who modified this Resource
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of the tag.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsPasswordPolicyMetaResult(dict):
    def __init__(__self__, *,
                 created: str,
                 last_modified: str,
                 location: str,
                 resource_type: str,
                 version: str):
        """
        :param str created: The DateTime the Resource was added to the Service Provider
        :param str last_modified: The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        :param str location: The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        :param str resource_type: Name of the resource type of the resource--for example, Users or Groups
        :param str version: The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "last_modified", last_modified)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        The DateTime the Resource was added to the Service Provider
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> str:
        """
        The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Name of the resource type of the resource--for example, Users or Groups
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsPasswordPolicyTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Key or name of the tag.
        :param str value: Value of the tag.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key or name of the tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of the tag.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsSmtpCredentialIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: User display name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsSmtpCredentialIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: User display name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsSmtpCredentialMetaResult(dict):
    def __init__(__self__, *,
                 created: str,
                 last_modified: str,
                 location: str,
                 resource_type: str,
                 version: str):
        """
        :param str created: The DateTime the Resource was added to the Service Provider
        :param str last_modified: The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        :param str location: The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        :param str resource_type: Name of the resource type of the resource--for example, Users or Groups
        :param str version: The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "last_modified", last_modified)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        The DateTime the Resource was added to the Service Provider
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> str:
        """
        The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Name of the resource type of the resource--for example, Users or Groups
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsSmtpCredentialTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Key or name of the tag.
        :param str value: User's id
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key or name of the tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsSmtpCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult(dict):
    def __init__(__self__, *,
                 allow_self_change: bool):
        """
        :param bool allow_self_change: If true, allows requesting user to update themselves. If false, requesting user can't update themself (default).
        """
        pulumi.set(__self__, "allow_self_change", allow_self_change)

    @property
    @pulumi.getter(name="allowSelfChange")
    def allow_self_change(self) -> bool:
        """
        If true, allows requesting user to update themselves. If false, requesting user can't update themself (default).
        """
        return pulumi.get(self, "allow_self_change")


@pulumi.output_type
class GetDomainsSmtpCredentialUserResult(dict):
    def __init__(__self__, *,
                 display: str,
                 name: str,
                 ocid: str,
                 ref: str,
                 value: str):
        """
        :param str display: User display name
        :param str name: User name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        User name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsSmtpCredentialsSmtpCredentialResult(dict):
    def __init__(__self__, *,
                 attribute_sets: Sequence[str],
                 attributes: str,
                 authorization: str,
                 compartment_ocid: str,
                 delete_in_progress: bool,
                 description: str,
                 domain_ocid: str,
                 expires_on: str,
                 id: str,
                 idcs_created_bies: Sequence['outputs.GetDomainsSmtpCredentialsSmtpCredentialIdcsCreatedByResult'],
                 idcs_endpoint: str,
                 idcs_last_modified_bies: Sequence['outputs.GetDomainsSmtpCredentialsSmtpCredentialIdcsLastModifiedByResult'],
                 idcs_last_upgraded_in_release: str,
                 idcs_prevented_operations: Sequence[str],
                 metas: Sequence['outputs.GetDomainsSmtpCredentialsSmtpCredentialMetaResult'],
                 ocid: str,
                 resource_type_schema_version: str,
                 schemas: Sequence[str],
                 status: str,
                 tags: Sequence['outputs.GetDomainsSmtpCredentialsSmtpCredentialTagResult'],
                 tenancy_ocid: str,
                 urnietfparamsscimschemasoracleidcsextensionself_change_users: Sequence['outputs.GetDomainsSmtpCredentialsSmtpCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult'],
                 user_name: str,
                 users: Sequence['outputs.GetDomainsSmtpCredentialsSmtpCredentialUserResult']):
        """
        :param Sequence[str] attribute_sets: A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
        :param str attributes: A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
        :param str authorization: The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
        :param str compartment_ocid: Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
        :param bool delete_in_progress: A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
        :param str description: Description
        :param str domain_ocid: Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
        :param str expires_on: User credential expires on
        :param str id: Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider's entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
        :param Sequence['GetDomainsSmtpCredentialsSmtpCredentialIdcsCreatedByArgs'] idcs_created_bies: The User or App who created the Resource
        :param str idcs_endpoint: The basic endpoint for the identity domain
        :param Sequence['GetDomainsSmtpCredentialsSmtpCredentialIdcsLastModifiedByArgs'] idcs_last_modified_bies: The User or App who modified the Resource
        :param str idcs_last_upgraded_in_release: The release number when the resource was upgraded.
        :param Sequence[str] idcs_prevented_operations: Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
        :param Sequence['GetDomainsSmtpCredentialsSmtpCredentialMetaArgs'] metas: A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
        :param str ocid: User's ocid
        :param str resource_type_schema_version: An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
        :param Sequence[str] schemas: REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \\"enterprise\\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
        :param str status: User credential status
        :param Sequence['GetDomainsSmtpCredentialsSmtpCredentialTagArgs'] tags: A list of tags on this resource.
        :param str tenancy_ocid: Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
        :param Sequence['GetDomainsSmtpCredentialsSmtpCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUserArgs'] urnietfparamsscimschemasoracleidcsextensionself_change_users: Controls whether a user can update themselves or not via User related APIs
        :param str user_name: User name
        :param Sequence['GetDomainsSmtpCredentialsSmtpCredentialUserArgs'] users: User linked to smtp credential
        """
        pulumi.set(__self__, "attribute_sets", attribute_sets)
        pulumi.set(__self__, "attributes", attributes)
        pulumi.set(__self__, "authorization", authorization)
        pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "domain_ocid", domain_ocid)
        pulumi.set(__self__, "expires_on", expires_on)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        pulumi.set(__self__, "idcs_endpoint", idcs_endpoint)
        pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        pulumi.set(__self__, "metas", metas)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "resource_type_schema_version", resource_type_schema_version)
        pulumi.set(__self__, "schemas", schemas)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)
        pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionself_change_users", urnietfparamsscimschemasoracleidcsextensionself_change_users)
        pulumi.set(__self__, "user_name", user_name)
        pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="attributeSets")
    def attribute_sets(self) -> Sequence[str]:
        """
        A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
        """
        return pulumi.get(self, "attribute_sets")

    @property
    @pulumi.getter
    def attributes(self) -> str:
        """
        A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
        """
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter
    def authorization(self) -> str:
        """
        The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
        """
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> bool:
        """
        A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
        """
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter(name="expiresOn")
    def expires_on(self) -> str:
        """
        User credential expires on
        """
        return pulumi.get(self, "expires_on")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider's entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Sequence['outputs.GetDomainsSmtpCredentialsSmtpCredentialIdcsCreatedByResult']:
        """
        The User or App who created the Resource
        """
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> str:
        """
        The basic endpoint for the identity domain
        """
        return pulumi.get(self, "idcs_endpoint")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Sequence['outputs.GetDomainsSmtpCredentialsSmtpCredentialIdcsLastModifiedByResult']:
        """
        The User or App who modified the Resource
        """
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> str:
        """
        The release number when the resource was upgraded.
        """
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Sequence[str]:
        """
        Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
        """
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter
    def metas(self) -> Sequence['outputs.GetDomainsSmtpCredentialsSmtpCredentialMetaResult']:
        """
        A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
        """
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> str:
        """
        An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
        """
        return pulumi.get(self, "resource_type_schema_version")

    @property
    @pulumi.getter
    def schemas(self) -> Sequence[str]:
        """
        REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \\"enterprise\\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
        """
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        User credential status
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetDomainsSmtpCredentialsSmtpCredentialTagResult']:
        """
        A list of tags on this resource.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "tenancy_ocid")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionselfChangeUsers")
    def urnietfparamsscimschemasoracleidcsextensionself_change_users(self) -> Sequence['outputs.GetDomainsSmtpCredentialsSmtpCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult']:
        """
        Controls whether a user can update themselves or not via User related APIs
        """
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionself_change_users")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> str:
        """
        User name
        """
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter
    def users(self) -> Sequence['outputs.GetDomainsSmtpCredentialsSmtpCredentialUserResult']:
        """
        User linked to smtp credential
        """
        return pulumi.get(self, "users")


@pulumi.output_type
class GetDomainsSmtpCredentialsSmtpCredentialIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: User display name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsSmtpCredentialsSmtpCredentialIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: User display name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsSmtpCredentialsSmtpCredentialMetaResult(dict):
    def __init__(__self__, *,
                 created: str,
                 last_modified: str,
                 location: str,
                 resource_type: str,
                 version: str):
        """
        :param str created: The DateTime the Resource was added to the Service Provider
        :param str last_modified: The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        :param str location: The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        :param str resource_type: Name of the resource type of the resource--for example, Users or Groups
        :param str version: The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "last_modified", last_modified)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        The DateTime the Resource was added to the Service Provider
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> str:
        """
        The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Name of the resource type of the resource--for example, Users or Groups
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsSmtpCredentialsSmtpCredentialTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Key or name of the tag.
        :param str value: User's id
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key or name of the tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsSmtpCredentialsSmtpCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult(dict):
    def __init__(__self__, *,
                 allow_self_change: bool):
        """
        :param bool allow_self_change: If true, allows requesting user to update themselves. If false, requesting user can't update themself (default).
        """
        pulumi.set(__self__, "allow_self_change", allow_self_change)

    @property
    @pulumi.getter(name="allowSelfChange")
    def allow_self_change(self) -> bool:
        """
        If true, allows requesting user to update themselves. If false, requesting user can't update themself (default).
        """
        return pulumi.get(self, "allow_self_change")


@pulumi.output_type
class GetDomainsSmtpCredentialsSmtpCredentialUserResult(dict):
    def __init__(__self__, *,
                 display: str,
                 name: str,
                 ocid: str,
                 ref: str,
                 value: str):
        """
        :param str display: User display name
        :param str name: User name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        User name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserAddressResult(dict):
    def __init__(__self__, *,
                 country: str,
                 formatted: str,
                 locality: str,
                 postal_code: str,
                 primary: bool,
                 region: str,
                 street_address: str,
                 type: str):
        """
        :param str country: The country name component.
        :param str formatted: Full name
        :param str locality: The city or locality component.
        :param str postal_code: The zipcode or postal code component.
        :param bool primary: A Boolean value indicating the 'primary' or preferred attribute value for this attribute. The primary attribute value 'true' MUST appear no more than once.
        :param str region: The state or region component.
        :param str street_address: The full street address component, which may include house number, street name, PO BOX, and multi-line extended street address information. This attribute MAY contain newlines.
        :param str type: A label indicating the attribute's function.
        """
        pulumi.set(__self__, "country", country)
        pulumi.set(__self__, "formatted", formatted)
        pulumi.set(__self__, "locality", locality)
        pulumi.set(__self__, "postal_code", postal_code)
        pulumi.set(__self__, "primary", primary)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "street_address", street_address)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def country(self) -> str:
        """
        The country name component.
        """
        return pulumi.get(self, "country")

    @property
    @pulumi.getter
    def formatted(self) -> str:
        """
        Full name
        """
        return pulumi.get(self, "formatted")

    @property
    @pulumi.getter
    def locality(self) -> str:
        """
        The city or locality component.
        """
        return pulumi.get(self, "locality")

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> str:
        """
        The zipcode or postal code component.
        """
        return pulumi.get(self, "postal_code")

    @property
    @pulumi.getter
    def primary(self) -> bool:
        """
        A Boolean value indicating the 'primary' or preferred attribute value for this attribute. The primary attribute value 'true' MUST appear no more than once.
        """
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        The state or region component.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="streetAddress")
    def street_address(self) -> str:
        """
        The full street address component, which may include house number, street name, PO BOX, and multi-line extended street address information. This attribute MAY contain newlines.
        """
        return pulumi.get(self, "street_address")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        A label indicating the attribute's function.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDomainsUserDbCredentialIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: User display name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserDbCredentialIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: User display name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserDbCredentialMetaResult(dict):
    def __init__(__self__, *,
                 created: str,
                 last_modified: str,
                 location: str,
                 resource_type: str,
                 version: str):
        """
        :param str created: The DateTime the Resource was added to the Service Provider
        :param str last_modified: The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        :param str location: The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        :param str resource_type: Name of the resource type of the resource--for example, Users or Groups
        :param str version: The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "last_modified", last_modified)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        The DateTime the Resource was added to the Service Provider
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> str:
        """
        The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Name of the resource type of the resource--for example, Users or Groups
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsUserDbCredentialTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Key or name of the tag.
        :param str value: User's id
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key or name of the tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserDbCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult(dict):
    def __init__(__self__, *,
                 allow_self_change: bool):
        """
        :param bool allow_self_change: If true, allows requesting user to update themselves. If false, requesting user can't update themself (default).
        """
        pulumi.set(__self__, "allow_self_change", allow_self_change)

    @property
    @pulumi.getter(name="allowSelfChange")
    def allow_self_change(self) -> bool:
        """
        If true, allows requesting user to update themselves. If false, requesting user can't update themself (default).
        """
        return pulumi.get(self, "allow_self_change")


@pulumi.output_type
class GetDomainsUserDbCredentialUserResult(dict):
    def __init__(__self__, *,
                 display: str,
                 name: str,
                 ocid: str,
                 ref: str,
                 value: str):
        """
        :param str display: User display name
        :param str name: User name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        User name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserDbCredentialsUserDbCredentialResult(dict):
    def __init__(__self__, *,
                 attribute_sets: Sequence[str],
                 attributes: str,
                 authorization: str,
                 compartment_ocid: str,
                 db_password: str,
                 delete_in_progress: bool,
                 description: str,
                 domain_ocid: str,
                 expired: bool,
                 expires_on: str,
                 id: str,
                 idcs_created_bies: Sequence['outputs.GetDomainsUserDbCredentialsUserDbCredentialIdcsCreatedByResult'],
                 idcs_endpoint: str,
                 idcs_last_modified_bies: Sequence['outputs.GetDomainsUserDbCredentialsUserDbCredentialIdcsLastModifiedByResult'],
                 idcs_last_upgraded_in_release: str,
                 idcs_prevented_operations: Sequence[str],
                 last_set_date: str,
                 metas: Sequence['outputs.GetDomainsUserDbCredentialsUserDbCredentialMetaResult'],
                 mixed_db_password: str,
                 mixed_salt: str,
                 name: str,
                 ocid: str,
                 resource_type_schema_version: str,
                 salt: str,
                 schemas: Sequence[str],
                 status: str,
                 tags: Sequence['outputs.GetDomainsUserDbCredentialsUserDbCredentialTagResult'],
                 tenancy_ocid: str,
                 urnietfparamsscimschemasoracleidcsextensionself_change_users: Sequence['outputs.GetDomainsUserDbCredentialsUserDbCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult'],
                 users: Sequence['outputs.GetDomainsUserDbCredentialsUserDbCredentialUserResult']):
        """
        :param Sequence[str] attribute_sets: A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
        :param str attributes: A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
        :param str authorization: The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
        :param str compartment_ocid: Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
        :param str db_password: The db password of the user
        :param bool delete_in_progress: A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
        :param str description: Description
        :param str domain_ocid: Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
        :param bool expired: Indicates that the db password has expired
        :param str expires_on: User credential expires on
        :param str id: Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider's entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
        :param Sequence['GetDomainsUserDbCredentialsUserDbCredentialIdcsCreatedByArgs'] idcs_created_bies: The User or App who created the Resource
        :param str idcs_endpoint: The basic endpoint for the identity domain
        :param Sequence['GetDomainsUserDbCredentialsUserDbCredentialIdcsLastModifiedByArgs'] idcs_last_modified_bies: The User or App who modified the Resource
        :param str idcs_last_upgraded_in_release: The release number when the resource was upgraded.
        :param Sequence[str] idcs_prevented_operations: Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
        :param str last_set_date: A DateTime that specifies the date and time when the current db password was set
        :param Sequence['GetDomainsUserDbCredentialsUserDbCredentialMetaArgs'] metas: A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
        :param str mixed_db_password: The db password of the user with mixed salt
        :param str mixed_salt: The mixed salt of the password
        :param str name: User name
        :param str ocid: User's ocid
        :param str resource_type_schema_version: An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
        :param str salt: The salt of the password
        :param Sequence[str] schemas: REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \\"enterprise\\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
        :param str status: User credential status
        :param Sequence['GetDomainsUserDbCredentialsUserDbCredentialTagArgs'] tags: A list of tags on this resource.
        :param str tenancy_ocid: Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
        :param Sequence['GetDomainsUserDbCredentialsUserDbCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUserArgs'] urnietfparamsscimschemasoracleidcsextensionself_change_users: Controls whether a user can update themselves or not via User related APIs
        :param Sequence['GetDomainsUserDbCredentialsUserDbCredentialUserArgs'] users: User linked to db credential
        """
        pulumi.set(__self__, "attribute_sets", attribute_sets)
        pulumi.set(__self__, "attributes", attributes)
        pulumi.set(__self__, "authorization", authorization)
        pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        pulumi.set(__self__, "db_password", db_password)
        pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "domain_ocid", domain_ocid)
        pulumi.set(__self__, "expired", expired)
        pulumi.set(__self__, "expires_on", expires_on)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        pulumi.set(__self__, "idcs_endpoint", idcs_endpoint)
        pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        pulumi.set(__self__, "last_set_date", last_set_date)
        pulumi.set(__self__, "metas", metas)
        pulumi.set(__self__, "mixed_db_password", mixed_db_password)
        pulumi.set(__self__, "mixed_salt", mixed_salt)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "resource_type_schema_version", resource_type_schema_version)
        pulumi.set(__self__, "salt", salt)
        pulumi.set(__self__, "schemas", schemas)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)
        pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionself_change_users", urnietfparamsscimschemasoracleidcsextensionself_change_users)
        pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="attributeSets")
    def attribute_sets(self) -> Sequence[str]:
        """
        A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
        """
        return pulumi.get(self, "attribute_sets")

    @property
    @pulumi.getter
    def attributes(self) -> str:
        """
        A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
        """
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter
    def authorization(self) -> str:
        """
        The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
        """
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="dbPassword")
    def db_password(self) -> str:
        """
        The db password of the user
        """
        return pulumi.get(self, "db_password")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> bool:
        """
        A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
        """
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter
    def expired(self) -> bool:
        """
        Indicates that the db password has expired
        """
        return pulumi.get(self, "expired")

    @property
    @pulumi.getter(name="expiresOn")
    def expires_on(self) -> str:
        """
        User credential expires on
        """
        return pulumi.get(self, "expires_on")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider's entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Sequence['outputs.GetDomainsUserDbCredentialsUserDbCredentialIdcsCreatedByResult']:
        """
        The User or App who created the Resource
        """
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> str:
        """
        The basic endpoint for the identity domain
        """
        return pulumi.get(self, "idcs_endpoint")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Sequence['outputs.GetDomainsUserDbCredentialsUserDbCredentialIdcsLastModifiedByResult']:
        """
        The User or App who modified the Resource
        """
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> str:
        """
        The release number when the resource was upgraded.
        """
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Sequence[str]:
        """
        Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
        """
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter(name="lastSetDate")
    def last_set_date(self) -> str:
        """
        A DateTime that specifies the date and time when the current db password was set
        """
        return pulumi.get(self, "last_set_date")

    @property
    @pulumi.getter
    def metas(self) -> Sequence['outputs.GetDomainsUserDbCredentialsUserDbCredentialMetaResult']:
        """
        A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
        """
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter(name="mixedDbPassword")
    def mixed_db_password(self) -> str:
        """
        The db password of the user with mixed salt
        """
        return pulumi.get(self, "mixed_db_password")

    @property
    @pulumi.getter(name="mixedSalt")
    def mixed_salt(self) -> str:
        """
        The mixed salt of the password
        """
        return pulumi.get(self, "mixed_salt")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        User name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> str:
        """
        An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
        """
        return pulumi.get(self, "resource_type_schema_version")

    @property
    @pulumi.getter
    def salt(self) -> str:
        """
        The salt of the password
        """
        return pulumi.get(self, "salt")

    @property
    @pulumi.getter
    def schemas(self) -> Sequence[str]:
        """
        REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \\"enterprise\\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
        """
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        User credential status
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetDomainsUserDbCredentialsUserDbCredentialTagResult']:
        """
        A list of tags on this resource.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "tenancy_ocid")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionselfChangeUsers")
    def urnietfparamsscimschemasoracleidcsextensionself_change_users(self) -> Sequence['outputs.GetDomainsUserDbCredentialsUserDbCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult']:
        """
        Controls whether a user can update themselves or not via User related APIs
        """
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionself_change_users")

    @property
    @pulumi.getter
    def users(self) -> Sequence['outputs.GetDomainsUserDbCredentialsUserDbCredentialUserResult']:
        """
        User linked to db credential
        """
        return pulumi.get(self, "users")


@pulumi.output_type
class GetDomainsUserDbCredentialsUserDbCredentialIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: User display name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserDbCredentialsUserDbCredentialIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: User display name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str type: The type of resource, User or App, that modified this Resource
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource, User or App, that modified this Resource
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserDbCredentialsUserDbCredentialMetaResult(dict):
    def __init__(__self__, *,
                 created: str,
                 last_modified: str,
                 location: str,
                 resource_type: str,
                 version: str):
        """
        :param str created: The DateTime the Resource was added to the Service Provider
        :param str last_modified: The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        :param str location: The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        :param str resource_type: Name of the resource type of the resource--for example, Users or Groups
        :param str version: The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "last_modified", last_modified)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        The DateTime the Resource was added to the Service Provider
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> str:
        """
        The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Name of the resource type of the resource--for example, Users or Groups
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsUserDbCredentialsUserDbCredentialTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Key or name of the tag.
        :param str value: User's id
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key or name of the tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserDbCredentialsUserDbCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult(dict):
    def __init__(__self__, *,
                 allow_self_change: bool):
        """
        :param bool allow_self_change: If true, allows requesting user to update themselves. If false, requesting user can't update themself (default).
        """
        pulumi.set(__self__, "allow_self_change", allow_self_change)

    @property
    @pulumi.getter(name="allowSelfChange")
    def allow_self_change(self) -> bool:
        """
        If true, allows requesting user to update themselves. If false, requesting user can't update themself (default).
        """
        return pulumi.get(self, "allow_self_change")


@pulumi.output_type
class GetDomainsUserDbCredentialsUserDbCredentialUserResult(dict):
    def __init__(__self__, *,
                 display: str,
                 name: str,
                 ocid: str,
                 ref: str,
                 value: str):
        """
        :param str display: User display name
        :param str name: User name
        :param str ocid: User's ocid
        :param str ref: The URI that corresponds to the user linked to this credential
        :param str value: User's id
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        User display name
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        User name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        User's ocid
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        The URI that corresponds to the user linked to this credential
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        User's id
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserEmailResult(dict):
    def __init__(__self__, *,
                 pending_verification_data: str,
                 primary: bool,
                 secondary: bool,
                 type: str,
                 value: str,
                 verified: bool):
        """
        :param str pending_verification_data: Pending e-mail address verification
        :param bool primary: A Boolean value indicating the 'primary' or preferred attribute value for this attribute. The primary attribute value 'true' MUST appear no more than once.
        :param bool secondary: A Boolean value that indicates whether the email address is the secondary email address. The secondary attribute value 'true' MUST appear no more than once.
        :param str type: A label indicating the attribute's function.
        :param str value: The value of a X509 certificate.
        :param bool verified: A Boolean value that indicates if the phone number is verified.
        """
        pulumi.set(__self__, "pending_verification_data", pending_verification_data)
        pulumi.set(__self__, "primary", primary)
        pulumi.set(__self__, "secondary", secondary)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        pulumi.set(__self__, "verified", verified)

    @property
    @pulumi.getter(name="pendingVerificationData")
    def pending_verification_data(self) -> str:
        """
        Pending e-mail address verification
        """
        return pulumi.get(self, "pending_verification_data")

    @property
    @pulumi.getter
    def primary(self) -> bool:
        """
        A Boolean value indicating the 'primary' or preferred attribute value for this attribute. The primary attribute value 'true' MUST appear no more than once.
        """
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def secondary(self) -> bool:
        """
        A Boolean value that indicates whether the email address is the secondary email address. The secondary attribute value 'true' MUST appear no more than once.
        """
        return pulumi.get(self, "secondary")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        A label indicating the attribute's function.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def verified(self) -> bool:
        """
        A Boolean value that indicates if the phone number is verified.
        """
        return pulumi.get(self, "verified")


@pulumi.output_type
class GetDomainsUserEntitlementResult(dict):
    def __init__(__self__, *,
                 display: str,
                 primary: bool,
                 type: str,
                 value: str):
        """
        :param str display: A human readable name, primarily used for display purposes.
        :param bool primary: A Boolean value indicating the 'primary' or preferred attribute value for this attribute. The primary attribute value 'true' MUST appear no more than once.
        :param str type: A label indicating the attribute's function.
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "primary", primary)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        A human readable name, primarily used for display purposes.
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def primary(self) -> bool:
        """
        A Boolean value indicating the 'primary' or preferred attribute value for this attribute. The primary attribute value 'true' MUST appear no more than once.
        """
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        A label indicating the attribute's function.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserGroupResult(dict):
    def __init__(__self__, *,
                 date_added: str,
                 display: str,
                 external_id: str,
                 membership_ocid: str,
                 non_unique_display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str date_added: Date when the member is Added to the group
        :param str display: A human readable name, primarily used for display purposes.
        :param str external_id: An identifier for the Resource as defined by the Service Consumer. READ-ONLY.
        :param str membership_ocid: Membership Ocid
        :param str non_unique_display: A human readable name for Group as defined by the Service Consumer. READ-ONLY.
        :param str ocid: Ocid of the User's Support Account.
        :param str ref: User Token URI
        :param str type: A label indicating the attribute's function.
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "date_added", date_added)
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "external_id", external_id)
        pulumi.set(__self__, "membership_ocid", membership_ocid)
        pulumi.set(__self__, "non_unique_display", non_unique_display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="dateAdded")
    def date_added(self) -> str:
        """
        Date when the member is Added to the group
        """
        return pulumi.get(self, "date_added")

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        A human readable name, primarily used for display purposes.
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> str:
        """
        An identifier for the Resource as defined by the Service Consumer. READ-ONLY.
        """
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter(name="membershipOcid")
    def membership_ocid(self) -> str:
        """
        Membership Ocid
        """
        return pulumi.get(self, "membership_ocid")

    @property
    @pulumi.getter(name="nonUniqueDisplay")
    def non_unique_display(self) -> str:
        """
        A human readable name for Group as defined by the Service Consumer. READ-ONLY.
        """
        return pulumi.get(self, "non_unique_display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Ocid of the User's Support Account.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        User Token URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        A label indicating the attribute's function.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: A human readable name, primarily used for display purposes.
        :param str ocid: Ocid of the User's Support Account.
        :param str ref: User Token URI
        :param str type: A label indicating the attribute's function.
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        A human readable name, primarily used for display purposes.
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Ocid of the User's Support Account.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        User Token URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        A label indicating the attribute's function.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: A human readable name, primarily used for display purposes.
        :param str ocid: Ocid of the User's Support Account.
        :param str ref: User Token URI
        :param str type: A label indicating the attribute's function.
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        A human readable name, primarily used for display purposes.
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Ocid of the User's Support Account.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        User Token URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        A label indicating the attribute's function.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserImResult(dict):
    def __init__(__self__, *,
                 display: str,
                 primary: bool,
                 type: str,
                 value: str):
        """
        :param str display: A human readable name, primarily used for display purposes.
        :param bool primary: A Boolean value indicating the 'primary' or preferred attribute value for this attribute. The primary attribute value 'true' MUST appear no more than once.
        :param str type: A label indicating the attribute's function.
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "primary", primary)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        A human readable name, primarily used for display purposes.
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def primary(self) -> bool:
        """
        A Boolean value indicating the 'primary' or preferred attribute value for this attribute. The primary attribute value 'true' MUST appear no more than once.
        """
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        A label indicating the attribute's function.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserMetaResult(dict):
    def __init__(__self__, *,
                 created: str,
                 last_modified: str,
                 location: str,
                 resource_type: str,
                 version: str):
        """
        :param str created: The DateTime the Resource was added to the Service Provider
        :param str last_modified: The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        :param str location: The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        :param str resource_type: Name of the resource type of the resource--for example, Users or Groups
        :param str version: The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "last_modified", last_modified)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        The DateTime the Resource was added to the Service Provider
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> str:
        """
        The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Name of the resource type of the resource--for example, Users or Groups
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsUserNameResult(dict):
    def __init__(__self__, *,
                 family_name: str,
                 formatted: str,
                 given_name: str,
                 honorific_prefix: str,
                 honorific_suffix: str,
                 middle_name: str):
        """
        :param str family_name: Last name
        :param str formatted: Full name
        :param str given_name: First name
        :param str honorific_prefix: Prefix
        :param str honorific_suffix: Suffix
        :param str middle_name: Middle name
        """
        pulumi.set(__self__, "family_name", family_name)
        pulumi.set(__self__, "formatted", formatted)
        pulumi.set(__self__, "given_name", given_name)
        pulumi.set(__self__, "honorific_prefix", honorific_prefix)
        pulumi.set(__self__, "honorific_suffix", honorific_suffix)
        pulumi.set(__self__, "middle_name", middle_name)

    @property
    @pulumi.getter(name="familyName")
    def family_name(self) -> str:
        """
        Last name
        """
        return pulumi.get(self, "family_name")

    @property
    @pulumi.getter
    def formatted(self) -> str:
        """
        Full name
        """
        return pulumi.get(self, "formatted")

    @property
    @pulumi.getter(name="givenName")
    def given_name(self) -> str:
        """
        First name
        """
        return pulumi.get(self, "given_name")

    @property
    @pulumi.getter(name="honorificPrefix")
    def honorific_prefix(self) -> str:
        """
        Prefix
        """
        return pulumi.get(self, "honorific_prefix")

    @property
    @pulumi.getter(name="honorificSuffix")
    def honorific_suffix(self) -> str:
        """
        Suffix
        """
        return pulumi.get(self, "honorific_suffix")

    @property
    @pulumi.getter(name="middleName")
    def middle_name(self) -> str:
        """
        Middle name
        """
        return pulumi.get(self, "middle_name")


@pulumi.output_type
class GetDomainsUserPhoneNumberResult(dict):
    def __init__(__self__, *,
                 display: str,
                 primary: bool,
                 type: str,
                 value: str,
                 verified: bool):
        """
        :param str display: A human readable name, primarily used for display purposes.
        :param bool primary: A Boolean value indicating the 'primary' or preferred attribute value for this attribute. The primary attribute value 'true' MUST appear no more than once.
        :param str type: A label indicating the attribute's function.
        :param str value: The value of a X509 certificate.
        :param bool verified: A Boolean value that indicates if the phone number is verified.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "primary", primary)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        pulumi.set(__self__, "verified", verified)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        A human readable name, primarily used for display purposes.
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def primary(self) -> bool:
        """
        A Boolean value indicating the 'primary' or preferred attribute value for this attribute. The primary attribute value 'true' MUST appear no more than once.
        """
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        A label indicating the attribute's function.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def verified(self) -> bool:
        """
        A Boolean value that indicates if the phone number is verified.
        """
        return pulumi.get(self, "verified")


@pulumi.output_type
class GetDomainsUserPhotoResult(dict):
    def __init__(__self__, *,
                 display: str,
                 primary: bool,
                 type: str,
                 value: str):
        """
        :param str display: A human readable name, primarily used for display purposes.
        :param bool primary: A Boolean value indicating the 'primary' or preferred attribute value for this attribute. The primary attribute value 'true' MUST appear no more than once.
        :param str type: A label indicating the attribute's function.
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "primary", primary)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        A human readable name, primarily used for display purposes.
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def primary(self) -> bool:
        """
        A Boolean value indicating the 'primary' or preferred attribute value for this attribute. The primary attribute value 'true' MUST appear no more than once.
        """
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        A label indicating the attribute's function.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserRoleResult(dict):
    def __init__(__self__, *,
                 display: str,
                 primary: bool,
                 type: str,
                 value: str):
        """
        :param str display: A human readable name, primarily used for display purposes.
        :param bool primary: A Boolean value indicating the 'primary' or preferred attribute value for this attribute. The primary attribute value 'true' MUST appear no more than once.
        :param str type: A label indicating the attribute's function.
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "primary", primary)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        A human readable name, primarily used for display purposes.
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def primary(self) -> bool:
        """
        A Boolean value indicating the 'primary' or preferred attribute value for this attribute. The primary attribute value 'true' MUST appear no more than once.
        """
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        A label indicating the attribute's function.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The value of of the User's api key.
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The value of of the User's api key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasextensionenterprise20userResult(dict):
    def __init__(__self__, *,
                 cost_center: str,
                 department: str,
                 division: str,
                 employee_number: str,
                 managers: Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasextensionenterprise20userManagerResult'],
                 organization: str):
        """
        :param str cost_center: Identifies the name of a cost center.
        :param str department: Identifies the name of a department.
        :param str division: Identifies the name of a division.
        :param str employee_number: Numeric or alphanumeric identifier assigned to  a person, typically based on order of hire or association with an organization.
        :param Sequence['GetDomainsUserUrnietfparamsscimschemasextensionenterprise20userManagerArgs'] managers: The User's manager. A complex type that optionally allows Service Providers to represent organizational hierarchy by referencing the 'id' attribute of another User.
        :param str organization: Identifies the name of an organization.
        """
        pulumi.set(__self__, "cost_center", cost_center)
        pulumi.set(__self__, "department", department)
        pulumi.set(__self__, "division", division)
        pulumi.set(__self__, "employee_number", employee_number)
        pulumi.set(__self__, "managers", managers)
        pulumi.set(__self__, "organization", organization)

    @property
    @pulumi.getter(name="costCenter")
    def cost_center(self) -> str:
        """
        Identifies the name of a cost center.
        """
        return pulumi.get(self, "cost_center")

    @property
    @pulumi.getter
    def department(self) -> str:
        """
        Identifies the name of a department.
        """
        return pulumi.get(self, "department")

    @property
    @pulumi.getter
    def division(self) -> str:
        """
        Identifies the name of a division.
        """
        return pulumi.get(self, "division")

    @property
    @pulumi.getter(name="employeeNumber")
    def employee_number(self) -> str:
        """
        Numeric or alphanumeric identifier assigned to  a person, typically based on order of hire or association with an organization.
        """
        return pulumi.get(self, "employee_number")

    @property
    @pulumi.getter
    def managers(self) -> Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasextensionenterprise20userManagerResult']:
        """
        The User's manager. A complex type that optionally allows Service Providers to represent organizational hierarchy by referencing the 'id' attribute of another User.
        """
        return pulumi.get(self, "managers")

    @property
    @pulumi.getter
    def organization(self) -> str:
        """
        Identifies the name of an organization.
        """
        return pulumi.get(self, "organization")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasextensionenterprise20userManagerResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 ref: str,
                 value: str):
        """
        :param str display_name: The displayName of the User's manager. OPTIONAL and READ-ONLY.
        :param str ref: User Token URI
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The displayName of the User's manager. OPTIONAL and READ-ONLY.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        User Token URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionOciTagResult(dict):
    def __init__(__self__, *,
                 defined_tags: Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTagResult'],
                 freeform_tags: Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTagResult'],
                 tag_slug: str):
        """
        :param Sequence['GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTagArgs'] defined_tags: Oracle Cloud Infrastructure Defined Tags
        :param Sequence['GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTagArgs'] freeform_tags: Oracle Cloud Infrastructure Freeform Tags
        :param str tag_slug: Oracle Cloud Infrastructure Tag slug
        """
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "tag_slug", tag_slug)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTagResult']:
        """
        Oracle Cloud Infrastructure Defined Tags
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTagResult']:
        """
        Oracle Cloud Infrastructure Freeform Tags
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="tagSlug")
    def tag_slug(self) -> str:
        """
        Oracle Cloud Infrastructure Tag slug
        """
        return pulumi.get(self, "tag_slug")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 namespace: str,
                 value: str):
        """
        :param str key: The value of of the User's api key.
        :param str namespace: Oracle Cloud Infrastructure Tag namespace
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The value of of the User's api key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        Oracle Cloud Infrastructure Tag namespace
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The value of of the User's api key.
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The value of of the User's api key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionadaptiveUserResult(dict):
    def __init__(__self__, *,
                 risk_level: str,
                 risk_scores: Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionadaptiveUserRiskScoreResult']):
        """
        :param str risk_level: Risk Level
        :param Sequence['GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionadaptiveUserRiskScoreArgs'] risk_scores: The risk score pertaining to the user.
        """
        pulumi.set(__self__, "risk_level", risk_level)
        pulumi.set(__self__, "risk_scores", risk_scores)

    @property
    @pulumi.getter(name="riskLevel")
    def risk_level(self) -> str:
        """
        Risk Level
        """
        return pulumi.get(self, "risk_level")

    @property
    @pulumi.getter(name="riskScores")
    def risk_scores(self) -> Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionadaptiveUserRiskScoreResult']:
        """
        The risk score pertaining to the user.
        """
        return pulumi.get(self, "risk_scores")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionadaptiveUserRiskScoreResult(dict):
    def __init__(__self__, *,
                 last_update_timestamp: str,
                 ref: str,
                 risk_level: str,
                 score: int,
                 source: str,
                 status: str,
                 value: str):
        """
        :param str last_update_timestamp: Last update timestamp for the risk score
        :param str ref: User Token URI
        :param str risk_level: Risk Level
        :param int score: Risk Score value
        :param str source: Risk Provider Profile Source
        :param str status: A supplemental status indicating the reason why a user is disabled
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "last_update_timestamp", last_update_timestamp)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "risk_level", risk_level)
        pulumi.set(__self__, "score", score)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="lastUpdateTimestamp")
    def last_update_timestamp(self) -> str:
        """
        Last update timestamp for the risk score
        """
        return pulumi.get(self, "last_update_timestamp")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        User Token URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="riskLevel")
    def risk_level(self) -> str:
        """
        Risk Level
        """
        return pulumi.get(self, "risk_level")

    @property
    @pulumi.getter
    def score(self) -> int:
        """
        Risk Score value
        """
        return pulumi.get(self, "score")

    @property
    @pulumi.getter
    def source(self) -> str:
        """
        Risk Provider Profile Source
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        A supplemental status indicating the reason why a user is disabled
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensioncapabilitiesUserResult(dict):
    def __init__(__self__, *,
                 can_use_api_keys: bool,
                 can_use_auth_tokens: bool,
                 can_use_console_password: bool,
                 can_use_customer_secret_keys: bool,
                 can_use_db_credentials: bool,
                 can_use_oauth2client_credentials: bool,
                 can_use_smtp_credentials: bool):
        """
        :param bool can_use_api_keys: Indicates weather a user can use api keys
        :param bool can_use_auth_tokens: Indicates weather a user can use auth tokens
        :param bool can_use_console_password: Indicates weather a user can use console password
        :param bool can_use_customer_secret_keys: Indicates weather a user can use customer secret keys
        :param bool can_use_db_credentials: Indicates weather a user can use db credentials
        :param bool can_use_oauth2client_credentials: Indicates weather a user can use oauth2 client credentials
        :param bool can_use_smtp_credentials: Indicates weather a user can use smtp credentials
        """
        pulumi.set(__self__, "can_use_api_keys", can_use_api_keys)
        pulumi.set(__self__, "can_use_auth_tokens", can_use_auth_tokens)
        pulumi.set(__self__, "can_use_console_password", can_use_console_password)
        pulumi.set(__self__, "can_use_customer_secret_keys", can_use_customer_secret_keys)
        pulumi.set(__self__, "can_use_db_credentials", can_use_db_credentials)
        pulumi.set(__self__, "can_use_oauth2client_credentials", can_use_oauth2client_credentials)
        pulumi.set(__self__, "can_use_smtp_credentials", can_use_smtp_credentials)

    @property
    @pulumi.getter(name="canUseApiKeys")
    def can_use_api_keys(self) -> bool:
        """
        Indicates weather a user can use api keys
        """
        return pulumi.get(self, "can_use_api_keys")

    @property
    @pulumi.getter(name="canUseAuthTokens")
    def can_use_auth_tokens(self) -> bool:
        """
        Indicates weather a user can use auth tokens
        """
        return pulumi.get(self, "can_use_auth_tokens")

    @property
    @pulumi.getter(name="canUseConsolePassword")
    def can_use_console_password(self) -> bool:
        """
        Indicates weather a user can use console password
        """
        return pulumi.get(self, "can_use_console_password")

    @property
    @pulumi.getter(name="canUseCustomerSecretKeys")
    def can_use_customer_secret_keys(self) -> bool:
        """
        Indicates weather a user can use customer secret keys
        """
        return pulumi.get(self, "can_use_customer_secret_keys")

    @property
    @pulumi.getter(name="canUseDbCredentials")
    def can_use_db_credentials(self) -> bool:
        """
        Indicates weather a user can use db credentials
        """
        return pulumi.get(self, "can_use_db_credentials")

    @property
    @pulumi.getter(name="canUseOauth2clientCredentials")
    def can_use_oauth2client_credentials(self) -> bool:
        """
        Indicates weather a user can use oauth2 client credentials
        """
        return pulumi.get(self, "can_use_oauth2client_credentials")

    @property
    @pulumi.getter(name="canUseSmtpCredentials")
    def can_use_smtp_credentials(self) -> bool:
        """
        Indicates weather a user can use smtp credentials
        """
        return pulumi.get(self, "can_use_smtp_credentials")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensiondbCredentialsUserResult(dict):
    def __init__(__self__, *,
                 db_login_attempts: int,
                 db_user_name: str):
        """
        :param int db_login_attempts: The number of failed login attempts. The value is reset to 0 after a successful login.
        :param str db_user_name: The Database User Name
        """
        pulumi.set(__self__, "db_login_attempts", db_login_attempts)
        pulumi.set(__self__, "db_user_name", db_user_name)

    @property
    @pulumi.getter(name="dbLoginAttempts")
    def db_login_attempts(self) -> int:
        """
        The number of failed login attempts. The value is reset to 0 after a successful login.
        """
        return pulumi.get(self, "db_login_attempts")

    @property
    @pulumi.getter(name="dbUserName")
    def db_user_name(self) -> str:
        """
        The Database User Name
        """
        return pulumi.get(self, "db_user_name")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensiondbUserUserResult(dict):
    def __init__(__self__, *,
                 db_global_roles: Sequence[str],
                 domain_level_schema: str,
                 instance_level_schema: str,
                 is_db_user: bool,
                 password_verifiers: Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensiondbUserUserPasswordVerifierResult']):
        """
        :param Sequence[str] db_global_roles: DB global roles to which the user is granted access.
        :param str domain_level_schema: DB domain level schema to which the user is granted access.
        :param str instance_level_schema: DB instance level schema to which the user is granted access.
        :param bool is_db_user: If true, indicates this is a database user.
        :param Sequence['GetDomainsUserUrnietfparamsscimschemasoracleidcsextensiondbUserUserPasswordVerifierArgs'] password_verifiers: Password Verifiers for DB User.
        """
        pulumi.set(__self__, "db_global_roles", db_global_roles)
        pulumi.set(__self__, "domain_level_schema", domain_level_schema)
        pulumi.set(__self__, "instance_level_schema", instance_level_schema)
        pulumi.set(__self__, "is_db_user", is_db_user)
        pulumi.set(__self__, "password_verifiers", password_verifiers)

    @property
    @pulumi.getter(name="dbGlobalRoles")
    def db_global_roles(self) -> Sequence[str]:
        """
        DB global roles to which the user is granted access.
        """
        return pulumi.get(self, "db_global_roles")

    @property
    @pulumi.getter(name="domainLevelSchema")
    def domain_level_schema(self) -> str:
        """
        DB domain level schema to which the user is granted access.
        """
        return pulumi.get(self, "domain_level_schema")

    @property
    @pulumi.getter(name="instanceLevelSchema")
    def instance_level_schema(self) -> str:
        """
        DB instance level schema to which the user is granted access.
        """
        return pulumi.get(self, "instance_level_schema")

    @property
    @pulumi.getter(name="isDbUser")
    def is_db_user(self) -> bool:
        """
        If true, indicates this is a database user.
        """
        return pulumi.get(self, "is_db_user")

    @property
    @pulumi.getter(name="passwordVerifiers")
    def password_verifiers(self) -> Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensiondbUserUserPasswordVerifierResult']:
        """
        Password Verifiers for DB User.
        """
        return pulumi.get(self, "password_verifiers")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensiondbUserUserPasswordVerifierResult(dict):
    def __init__(__self__, *,
                 type: str,
                 value: str):
        """
        :param str type: A label indicating the attribute's function.
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        A label indicating the attribute's function.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionkerberosUserUserResult(dict):
    def __init__(__self__, *,
                 realm_users: Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionkerberosUserUserRealmUserResult']):
        """
        :param Sequence['GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionkerberosUserUserRealmUserArgs'] realm_users: A list of kerberos realm users for an Oracle Cloud Infrastructure IAM User
        """
        pulumi.set(__self__, "realm_users", realm_users)

    @property
    @pulumi.getter(name="realmUsers")
    def realm_users(self) -> Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionkerberosUserUserRealmUserResult']:
        """
        A list of kerberos realm users for an Oracle Cloud Infrastructure IAM User
        """
        return pulumi.get(self, "realm_users")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionkerberosUserUserRealmUserResult(dict):
    def __init__(__self__, *,
                 principal_name: str,
                 realm_name: str,
                 ref: str,
                 value: str):
        """
        :param str principal_name: Principal Name of the KerberosRealmUser associated with the Oracle Cloud Infrastructure IAM User.
        :param str realm_name: Realm Name for the KerberosRealmUser associated with the Oracle Cloud Infrastructure IAM User.
        :param str ref: User Token URI
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "principal_name", principal_name)
        pulumi.set(__self__, "realm_name", realm_name)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="principalName")
    def principal_name(self) -> str:
        """
        Principal Name of the KerberosRealmUser associated with the Oracle Cloud Infrastructure IAM User.
        """
        return pulumi.get(self, "principal_name")

    @property
    @pulumi.getter(name="realmName")
    def realm_name(self) -> str:
        """
        Realm Name for the KerberosRealmUser associated with the Oracle Cloud Infrastructure IAM User.
        """
        return pulumi.get(self, "realm_name")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        User Token URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserResult(dict):
    def __init__(__self__, *,
                 bypass_codes: Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserBypassCodeResult'],
                 devices: Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserDeviceResult'],
                 login_attempts: int,
                 mfa_enabled_on: str,
                 mfa_ignored_apps: Sequence[str],
                 mfa_status: str,
                 preferred_authentication_factor: str,
                 preferred_authentication_method: str,
                 preferred_devices: Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserPreferredDeviceResult'],
                 preferred_third_party_vendor: str,
                 trusted_user_agents: Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserTrustedUserAgentResult']):
        """
        :param Sequence['GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserBypassCodeArgs'] bypass_codes: A list of bypass codes belongs to user
        :param Sequence['GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserDeviceArgs'] devices: A list of devices enrolled by the user.
        :param int login_attempts: The number of failed login attempts. The value is reset to 0 after a successful login.
        :param str mfa_enabled_on: This represents the date when the user enrolled for multi factor authentication. This will be set to null, when the user resets his factors.
        :param Sequence[str] mfa_ignored_apps: User MFA Ignored Apps Identifiers
        :param str mfa_status: User Opted for MFA
        :param str preferred_authentication_factor: Preferred Authentication Factor Type
        :param str preferred_authentication_method: Preferred Authentication method
        :param Sequence['GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserPreferredDeviceArgs'] preferred_devices: User preferred device
        :param str preferred_third_party_vendor: Preferred Third party vendor name
        :param Sequence['GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserTrustedUserAgentArgs'] trusted_user_agents: A list of trusted User Agents owned by this user. Multi-Factored Authentication uses Trusted User Agents to authenticate users.  A User Agent is software application that a user uses to issue requests. For example, a User Agent could be a particular browser (possibly one of several executing on a desktop or laptop) or a particular mobile application (again, oneof several executing on a particular mobile device). A User Agent is trusted once the Multi-Factor Authentication has verified it in some way.
        """
        pulumi.set(__self__, "bypass_codes", bypass_codes)
        pulumi.set(__self__, "devices", devices)
        pulumi.set(__self__, "login_attempts", login_attempts)
        pulumi.set(__self__, "mfa_enabled_on", mfa_enabled_on)
        pulumi.set(__self__, "mfa_ignored_apps", mfa_ignored_apps)
        pulumi.set(__self__, "mfa_status", mfa_status)
        pulumi.set(__self__, "preferred_authentication_factor", preferred_authentication_factor)
        pulumi.set(__self__, "preferred_authentication_method", preferred_authentication_method)
        pulumi.set(__self__, "preferred_devices", preferred_devices)
        pulumi.set(__self__, "preferred_third_party_vendor", preferred_third_party_vendor)
        pulumi.set(__self__, "trusted_user_agents", trusted_user_agents)

    @property
    @pulumi.getter(name="bypassCodes")
    def bypass_codes(self) -> Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserBypassCodeResult']:
        """
        A list of bypass codes belongs to user
        """
        return pulumi.get(self, "bypass_codes")

    @property
    @pulumi.getter
    def devices(self) -> Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserDeviceResult']:
        """
        A list of devices enrolled by the user.
        """
        return pulumi.get(self, "devices")

    @property
    @pulumi.getter(name="loginAttempts")
    def login_attempts(self) -> int:
        """
        The number of failed login attempts. The value is reset to 0 after a successful login.
        """
        return pulumi.get(self, "login_attempts")

    @property
    @pulumi.getter(name="mfaEnabledOn")
    def mfa_enabled_on(self) -> str:
        """
        This represents the date when the user enrolled for multi factor authentication. This will be set to null, when the user resets his factors.
        """
        return pulumi.get(self, "mfa_enabled_on")

    @property
    @pulumi.getter(name="mfaIgnoredApps")
    def mfa_ignored_apps(self) -> Sequence[str]:
        """
        User MFA Ignored Apps Identifiers
        """
        return pulumi.get(self, "mfa_ignored_apps")

    @property
    @pulumi.getter(name="mfaStatus")
    def mfa_status(self) -> str:
        """
        User Opted for MFA
        """
        return pulumi.get(self, "mfa_status")

    @property
    @pulumi.getter(name="preferredAuthenticationFactor")
    def preferred_authentication_factor(self) -> str:
        """
        Preferred Authentication Factor Type
        """
        return pulumi.get(self, "preferred_authentication_factor")

    @property
    @pulumi.getter(name="preferredAuthenticationMethod")
    def preferred_authentication_method(self) -> str:
        """
        Preferred Authentication method
        """
        return pulumi.get(self, "preferred_authentication_method")

    @property
    @pulumi.getter(name="preferredDevices")
    def preferred_devices(self) -> Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserPreferredDeviceResult']:
        """
        User preferred device
        """
        return pulumi.get(self, "preferred_devices")

    @property
    @pulumi.getter(name="preferredThirdPartyVendor")
    def preferred_third_party_vendor(self) -> str:
        """
        Preferred Third party vendor name
        """
        return pulumi.get(self, "preferred_third_party_vendor")

    @property
    @pulumi.getter(name="trustedUserAgents")
    def trusted_user_agents(self) -> Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserTrustedUserAgentResult']:
        """
        A list of trusted User Agents owned by this user. Multi-Factored Authentication uses Trusted User Agents to authenticate users.  A User Agent is software application that a user uses to issue requests. For example, a User Agent could be a particular browser (possibly one of several executing on a desktop or laptop) or a particular mobile application (again, oneof several executing on a particular mobile device). A User Agent is trusted once the Multi-Factor Authentication has verified it in some way.
        """
        return pulumi.get(self, "trusted_user_agents")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserBypassCodeResult(dict):
    def __init__(__self__, *,
                 ref: str,
                 value: str):
        """
        :param str ref: User Token URI
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        User Token URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserDeviceResult(dict):
    def __init__(__self__, *,
                 authentication_method: str,
                 display: str,
                 factor_status: str,
                 factor_type: str,
                 last_sync_time: str,
                 ref: str,
                 status: str,
                 third_party_vendor_name: str,
                 value: str):
        """
        :param str authentication_method: Authentication method.
        :param str display: A human readable name, primarily used for display purposes.
        :param str factor_status: Device authentication factor status.
        :param str factor_type: Authentication Factor Type
        :param str last_sync_time: Last Sync time for device.
        :param str ref: User Token URI
        :param str status: A supplemental status indicating the reason why a user is disabled
        :param str third_party_vendor_name: Third party factor vendor name.
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "authentication_method", authentication_method)
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "factor_status", factor_status)
        pulumi.set(__self__, "factor_type", factor_type)
        pulumi.set(__self__, "last_sync_time", last_sync_time)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "third_party_vendor_name", third_party_vendor_name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="authenticationMethod")
    def authentication_method(self) -> str:
        """
        Authentication method.
        """
        return pulumi.get(self, "authentication_method")

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        A human readable name, primarily used for display purposes.
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter(name="factorStatus")
    def factor_status(self) -> str:
        """
        Device authentication factor status.
        """
        return pulumi.get(self, "factor_status")

    @property
    @pulumi.getter(name="factorType")
    def factor_type(self) -> str:
        """
        Authentication Factor Type
        """
        return pulumi.get(self, "factor_type")

    @property
    @pulumi.getter(name="lastSyncTime")
    def last_sync_time(self) -> str:
        """
        Last Sync time for device.
        """
        return pulumi.get(self, "last_sync_time")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        User Token URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        A supplemental status indicating the reason why a user is disabled
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="thirdPartyVendorName")
    def third_party_vendor_name(self) -> str:
        """
        Third party factor vendor name.
        """
        return pulumi.get(self, "third_party_vendor_name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserPreferredDeviceResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ref: str,
                 value: str):
        """
        :param str display: A human readable name, primarily used for display purposes.
        :param str ref: User Token URI
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        A human readable name, primarily used for display purposes.
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        User Token URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserTrustedUserAgentResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ref: str,
                 value: str):
        """
        :param str display: A human readable name, primarily used for display purposes.
        :param str ref: User Token URI
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        A human readable name, primarily used for display purposes.
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        User Token URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserResult(dict):
    def __init__(__self__, *,
                 applicable_password_policies: Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserApplicablePasswordPolicyResult'],
                 cant_change: bool,
                 cant_expire: bool,
                 expired: bool,
                 last_failed_validation_date: str,
                 last_successful_set_date: str,
                 last_successful_validation_date: str,
                 must_change: bool):
        """
        :param Sequence['GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserApplicablePasswordPolicyArgs'] applicable_password_policies: Applicable Password Policy
        :param bool cant_change: Indicates that the current password MAY NOT be changed and all other password expiry settings SHALL be ignored
        :param bool cant_expire: Indicates that the password expiry policy will not be applied for the current Resource
        :param bool expired: Indicates whether user password is expired. If this value is false, password expiry will still be evaluated during user login.
        :param str last_failed_validation_date: A DateTime that specifies the date and time when last failed password validation was set
        :param str last_successful_set_date: A DateTime that specifies the date and time when the current password was set
        :param str last_successful_validation_date: A DateTime that specifies the date and time when last successful password validation was set
        :param bool must_change: Indicates that the subject password value MUST change on next login. If not changed, typically the account is locked. The value may be set indirectly when the subject's current password expires or directly set by an administrator.
        """
        pulumi.set(__self__, "applicable_password_policies", applicable_password_policies)
        pulumi.set(__self__, "cant_change", cant_change)
        pulumi.set(__self__, "cant_expire", cant_expire)
        pulumi.set(__self__, "expired", expired)
        pulumi.set(__self__, "last_failed_validation_date", last_failed_validation_date)
        pulumi.set(__self__, "last_successful_set_date", last_successful_set_date)
        pulumi.set(__self__, "last_successful_validation_date", last_successful_validation_date)
        pulumi.set(__self__, "must_change", must_change)

    @property
    @pulumi.getter(name="applicablePasswordPolicies")
    def applicable_password_policies(self) -> Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserApplicablePasswordPolicyResult']:
        """
        Applicable Password Policy
        """
        return pulumi.get(self, "applicable_password_policies")

    @property
    @pulumi.getter(name="cantChange")
    def cant_change(self) -> bool:
        """
        Indicates that the current password MAY NOT be changed and all other password expiry settings SHALL be ignored
        """
        return pulumi.get(self, "cant_change")

    @property
    @pulumi.getter(name="cantExpire")
    def cant_expire(self) -> bool:
        """
        Indicates that the password expiry policy will not be applied for the current Resource
        """
        return pulumi.get(self, "cant_expire")

    @property
    @pulumi.getter
    def expired(self) -> bool:
        """
        Indicates whether user password is expired. If this value is false, password expiry will still be evaluated during user login.
        """
        return pulumi.get(self, "expired")

    @property
    @pulumi.getter(name="lastFailedValidationDate")
    def last_failed_validation_date(self) -> str:
        """
        A DateTime that specifies the date and time when last failed password validation was set
        """
        return pulumi.get(self, "last_failed_validation_date")

    @property
    @pulumi.getter(name="lastSuccessfulSetDate")
    def last_successful_set_date(self) -> str:
        """
        A DateTime that specifies the date and time when the current password was set
        """
        return pulumi.get(self, "last_successful_set_date")

    @property
    @pulumi.getter(name="lastSuccessfulValidationDate")
    def last_successful_validation_date(self) -> str:
        """
        A DateTime that specifies the date and time when last successful password validation was set
        """
        return pulumi.get(self, "last_successful_validation_date")

    @property
    @pulumi.getter(name="mustChange")
    def must_change(self) -> bool:
        """
        Indicates that the subject password value MUST change on next login. If not changed, typically the account is locked. The value may be set indirectly when the subject's current password expires or directly set by an administrator.
        """
        return pulumi.get(self, "must_change")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserApplicablePasswordPolicyResult(dict):
    def __init__(__self__, *,
                 display: str,
                 priority: int,
                 ref: str,
                 value: str):
        """
        :param str display: A human readable name, primarily used for display purposes.
        :param int priority: PasswordPolicy priority
        :param str ref: User Token URI
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        A human readable name, primarily used for display purposes.
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        PasswordPolicy priority
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        User Token URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordlessUserResult(dict):
    def __init__(__self__, *,
                 factor_identifiers: Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordlessUserFactorIdentifierResult'],
                 factor_method: str,
                 factor_type: str):
        """
        :param Sequence['GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordlessUserFactorIdentifierArgs'] factor_identifiers: Factor Identifier ID
        :param str factor_method: Authentication Factor Method
        :param str factor_type: Authentication Factor Type
        """
        pulumi.set(__self__, "factor_identifiers", factor_identifiers)
        pulumi.set(__self__, "factor_method", factor_method)
        pulumi.set(__self__, "factor_type", factor_type)

    @property
    @pulumi.getter(name="factorIdentifiers")
    def factor_identifiers(self) -> Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordlessUserFactorIdentifierResult']:
        """
        Factor Identifier ID
        """
        return pulumi.get(self, "factor_identifiers")

    @property
    @pulumi.getter(name="factorMethod")
    def factor_method(self) -> str:
        """
        Authentication Factor Method
        """
        return pulumi.get(self, "factor_method")

    @property
    @pulumi.getter(name="factorType")
    def factor_type(self) -> str:
        """
        Authentication Factor Type
        """
        return pulumi.get(self, "factor_type")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordlessUserFactorIdentifierResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ref: str,
                 value: str):
        """
        :param str display: A human readable name, primarily used for display purposes.
        :param str ref: User Token URI
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        A human readable name, primarily used for display purposes.
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        User Token URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionposixUserResult(dict):
    def __init__(__self__, *,
                 gecos: str,
                 gid_number: int,
                 home_directory: str,
                 login_shell: str,
                 uid_number: int):
        """
        :param str gecos: General information about the POSIX account such as their real name and phone number
        :param int gid_number: Primary Group identifier of the POSIX user
        :param str home_directory: The absolute path to the home directory of the POSIX account
        :param str login_shell: The path to the login shell of the POSIX account
        :param int uid_number: Integer uniquely identifying a user in a POSIX administrative domain
        """
        pulumi.set(__self__, "gecos", gecos)
        pulumi.set(__self__, "gid_number", gid_number)
        pulumi.set(__self__, "home_directory", home_directory)
        pulumi.set(__self__, "login_shell", login_shell)
        pulumi.set(__self__, "uid_number", uid_number)

    @property
    @pulumi.getter
    def gecos(self) -> str:
        """
        General information about the POSIX account such as their real name and phone number
        """
        return pulumi.get(self, "gecos")

    @property
    @pulumi.getter(name="gidNumber")
    def gid_number(self) -> int:
        """
        Primary Group identifier of the POSIX user
        """
        return pulumi.get(self, "gid_number")

    @property
    @pulumi.getter(name="homeDirectory")
    def home_directory(self) -> str:
        """
        The absolute path to the home directory of the POSIX account
        """
        return pulumi.get(self, "home_directory")

    @property
    @pulumi.getter(name="loginShell")
    def login_shell(self) -> str:
        """
        The path to the login shell of the POSIX account
        """
        return pulumi.get(self, "login_shell")

    @property
    @pulumi.getter(name="uidNumber")
    def uid_number(self) -> int:
        """
        Integer uniquely identifying a user in a POSIX administrative domain
        """
        return pulumi.get(self, "uid_number")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUserResult(dict):
    def __init__(__self__, *,
                 sec_questions: Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUserSecQuestionResult']):
        """
        :param Sequence['GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUserSecQuestionArgs'] sec_questions: Security question and answers provided by end-user for Account recovery and/or MFA. While setting up security questions, end-user can also provide hint along with answer.
        """
        pulumi.set(__self__, "sec_questions", sec_questions)

    @property
    @pulumi.getter(name="secQuestions")
    def sec_questions(self) -> Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUserSecQuestionResult']:
        """
        Security question and answers provided by end-user for Account recovery and/or MFA. While setting up security questions, end-user can also provide hint along with answer.
        """
        return pulumi.get(self, "sec_questions")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUserSecQuestionResult(dict):
    def __init__(__self__, *,
                 answer: str,
                 hint_text: str,
                 ref: str,
                 value: str):
        """
        :param str answer: Answer provided by an user for a security question.
        :param str hint_text: Hint for an answer given by user while setting up Security Question.
        :param str ref: User Token URI
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "answer", answer)
        pulumi.set(__self__, "hint_text", hint_text)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def answer(self) -> str:
        """
        Answer provided by an user for a security question.
        """
        return pulumi.get(self, "answer")

    @property
    @pulumi.getter(name="hintText")
    def hint_text(self) -> str:
        """
        Hint for an answer given by user while setting up Security Question.
        """
        return pulumi.get(self, "hint_text")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        User Token URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult(dict):
    def __init__(__self__, *,
                 allow_self_change: bool):
        """
        :param bool allow_self_change: If true, allows requesting user to update themselves. If false, requesting user can't update themself (default).
        """
        pulumi.set(__self__, "allow_self_change", allow_self_change)

    @property
    @pulumi.getter(name="allowSelfChange")
    def allow_self_change(self) -> bool:
        """
        If true, allows requesting user to update themselves. If false, requesting user can't update themself (default).
        """
        return pulumi.get(self, "allow_self_change")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionselfRegistrationUserResult(dict):
    def __init__(__self__, *,
                 consent_granted: bool,
                 self_registration_profiles: Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionselfRegistrationUserSelfRegistrationProfileResult'],
                 user_token: str):
        """
        :param bool consent_granted: A boolean value that indicates whether the consent is granted.
        :param Sequence['GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionselfRegistrationUserSelfRegistrationProfileArgs'] self_registration_profiles: Self registration profile used when user is self registered.
        :param str user_token: User token returned if userFlowControlledByExternalClient is true
        """
        pulumi.set(__self__, "consent_granted", consent_granted)
        pulumi.set(__self__, "self_registration_profiles", self_registration_profiles)
        pulumi.set(__self__, "user_token", user_token)

    @property
    @pulumi.getter(name="consentGranted")
    def consent_granted(self) -> bool:
        """
        A boolean value that indicates whether the consent is granted.
        """
        return pulumi.get(self, "consent_granted")

    @property
    @pulumi.getter(name="selfRegistrationProfiles")
    def self_registration_profiles(self) -> Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionselfRegistrationUserSelfRegistrationProfileResult']:
        """
        Self registration profile used when user is self registered.
        """
        return pulumi.get(self, "self_registration_profiles")

    @property
    @pulumi.getter(name="userToken")
    def user_token(self) -> str:
        """
        User token returned if userFlowControlledByExternalClient is true
        """
        return pulumi.get(self, "user_token")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionselfRegistrationUserSelfRegistrationProfileResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ref: str,
                 value: str):
        """
        :param str display: A human readable name, primarily used for display purposes.
        :param str ref: User Token URI
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        A human readable name, primarily used for display purposes.
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        User Token URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionsffUserResult(dict):
    def __init__(__self__, *,
                 sff_auth_keys: str):
        """
        :param str sff_auth_keys: SFF auth keys clob
        """
        pulumi.set(__self__, "sff_auth_keys", sff_auth_keys)

    @property
    @pulumi.getter(name="sffAuthKeys")
    def sff_auth_keys(self) -> str:
        """
        SFF auth keys clob
        """
        return pulumi.get(self, "sff_auth_keys")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionsocialAccountUserResult(dict):
    def __init__(__self__, *,
                 social_accounts: Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionsocialAccountUserSocialAccountResult']):
        """
        :param Sequence['GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionsocialAccountUserSocialAccountArgs'] social_accounts: Description:
        """
        pulumi.set(__self__, "social_accounts", social_accounts)

    @property
    @pulumi.getter(name="socialAccounts")
    def social_accounts(self) -> Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionsocialAccountUserSocialAccountResult']:
        """
        Description:
        """
        return pulumi.get(self, "social_accounts")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionsocialAccountUserSocialAccountResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ref: str,
                 value: str):
        """
        :param str display: A human readable name, primarily used for display purposes.
        :param str ref: User Token URI
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        A human readable name, primarily used for display purposes.
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        User Token URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensiontermsOfUseUserResult(dict):
    def __init__(__self__, *,
                 terms_of_use_consents: Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensiontermsOfUseUserTermsOfUseConsentResult']):
        """
        :param Sequence['GetDomainsUserUrnietfparamsscimschemasoracleidcsextensiontermsOfUseUserTermsOfUseConsentArgs'] terms_of_use_consents: Description:
        """
        pulumi.set(__self__, "terms_of_use_consents", terms_of_use_consents)

    @property
    @pulumi.getter(name="termsOfUseConsents")
    def terms_of_use_consents(self) -> Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensiontermsOfUseUserTermsOfUseConsentResult']:
        """
        Description:
        """
        return pulumi.get(self, "terms_of_use_consents")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensiontermsOfUseUserTermsOfUseConsentResult(dict):
    def __init__(__self__, *,
                 ref: str,
                 value: str):
        """
        :param str ref: User Token URI
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        User Token URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserResult(dict):
    def __init__(__self__, *,
                 api_keys: Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserApiKeyResult'],
                 auth_tokens: Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserAuthTokenResult'],
                 customer_secret_keys: Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserCustomerSecretKeyResult'],
                 db_credentials: Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserDbCredentialResult'],
                 o_auth2client_credentials: Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserOAuth2clientCredentialResult'],
                 smtp_credentials: Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserSmtpCredentialResult']):
        """
        :param Sequence['GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserApiKeyArgs'] api_keys: A list of api keys corresponding to user.
        :param Sequence['GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserAuthTokenArgs'] auth_tokens: A list of auth tokens corresponding to user.
        :param Sequence['GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserCustomerSecretKeyArgs'] customer_secret_keys: A list of customer secret keys corresponding to user.
        :param Sequence['GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserDbCredentialArgs'] db_credentials: A list of db credentials corresponding to user.
        :param Sequence['GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserOAuth2clientCredentialArgs'] o_auth2client_credentials: A list of oauth2 client credentials corresponding to user.
        :param Sequence['GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserSmtpCredentialArgs'] smtp_credentials: A list of smtp credentials corresponding to user.
        """
        pulumi.set(__self__, "api_keys", api_keys)
        pulumi.set(__self__, "auth_tokens", auth_tokens)
        pulumi.set(__self__, "customer_secret_keys", customer_secret_keys)
        pulumi.set(__self__, "db_credentials", db_credentials)
        pulumi.set(__self__, "o_auth2client_credentials", o_auth2client_credentials)
        pulumi.set(__self__, "smtp_credentials", smtp_credentials)

    @property
    @pulumi.getter(name="apiKeys")
    def api_keys(self) -> Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserApiKeyResult']:
        """
        A list of api keys corresponding to user.
        """
        return pulumi.get(self, "api_keys")

    @property
    @pulumi.getter(name="authTokens")
    def auth_tokens(self) -> Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserAuthTokenResult']:
        """
        A list of auth tokens corresponding to user.
        """
        return pulumi.get(self, "auth_tokens")

    @property
    @pulumi.getter(name="customerSecretKeys")
    def customer_secret_keys(self) -> Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserCustomerSecretKeyResult']:
        """
        A list of customer secret keys corresponding to user.
        """
        return pulumi.get(self, "customer_secret_keys")

    @property
    @pulumi.getter(name="dbCredentials")
    def db_credentials(self) -> Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserDbCredentialResult']:
        """
        A list of db credentials corresponding to user.
        """
        return pulumi.get(self, "db_credentials")

    @property
    @pulumi.getter(name="oAuth2clientCredentials")
    def o_auth2client_credentials(self) -> Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserOAuth2clientCredentialResult']:
        """
        A list of oauth2 client credentials corresponding to user.
        """
        return pulumi.get(self, "o_auth2client_credentials")

    @property
    @pulumi.getter(name="smtpCredentials")
    def smtp_credentials(self) -> Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserSmtpCredentialResult']:
        """
        A list of smtp credentials corresponding to user.
        """
        return pulumi.get(self, "smtp_credentials")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserApiKeyResult(dict):
    def __init__(__self__, *,
                 key: str,
                 ocid: str,
                 ref: str,
                 value: str):
        """
        :param str key: The value of of the User's api key.
        :param str ocid: Ocid of the User's Support Account.
        :param str ref: User Token URI
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The value of of the User's api key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Ocid of the User's Support Account.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        User Token URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserAuthTokenResult(dict):
    def __init__(__self__, *,
                 ocid: str,
                 ref: str,
                 value: str):
        """
        :param str ocid: Ocid of the User's Support Account.
        :param str ref: User Token URI
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Ocid of the User's Support Account.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        User Token URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserCustomerSecretKeyResult(dict):
    def __init__(__self__, *,
                 ocid: str,
                 ref: str,
                 value: str):
        """
        :param str ocid: Ocid of the User's Support Account.
        :param str ref: User Token URI
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Ocid of the User's Support Account.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        User Token URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserDbCredentialResult(dict):
    def __init__(__self__, *,
                 ocid: str,
                 ref: str,
                 value: str):
        """
        :param str ocid: Ocid of the User's Support Account.
        :param str ref: User Token URI
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Ocid of the User's Support Account.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        User Token URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserOAuth2clientCredentialResult(dict):
    def __init__(__self__, *,
                 ocid: str,
                 ref: str,
                 value: str):
        """
        :param str ocid: Ocid of the User's Support Account.
        :param str ref: User Token URI
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Ocid of the User's Support Account.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        User Token URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserSmtpCredentialResult(dict):
    def __init__(__self__, *,
                 ocid: str,
                 ref: str,
                 value: str):
        """
        :param str ocid: Ocid of the User's Support Account.
        :param str ref: User Token URI
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Ocid of the User's Support Account.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        User Token URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserResult(dict):
    def __init__(__self__, *,
                 last_failed_login_date: str,
                 last_successful_login_date: str,
                 lockeds: Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLockedResult'],
                 login_attempts: int,
                 max_concurrent_sessions: int,
                 previous_successful_login_date: str,
                 recovery_attempts: int,
                 recovery_enroll_attempts: int,
                 recovery_lockeds: Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserRecoveryLockedResult']):
        """
        :param str last_failed_login_date: The last failed login date
        :param str last_successful_login_date: The last successful login date
        :param Sequence['GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLockedArgs'] lockeds: A complex attribute that indicates an account is locked (blocking new sessions)
        :param int login_attempts: The number of failed login attempts. The value is reset to 0 after a successful login.
        :param int max_concurrent_sessions: Maximum number of concurrent sessions for a User
        :param str previous_successful_login_date: The previous successful login date
        :param int recovery_attempts: The number of failed recovery attempts. The value is reset to 0 after a successful login.
        :param int recovery_enroll_attempts: The number of failed account recovery enrollment attempts.
        :param Sequence['GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserRecoveryLockedArgs'] recovery_lockeds: A complex attribute that indicates an password recovery is locked (blocking new sessions)
        """
        pulumi.set(__self__, "last_failed_login_date", last_failed_login_date)
        pulumi.set(__self__, "last_successful_login_date", last_successful_login_date)
        pulumi.set(__self__, "lockeds", lockeds)
        pulumi.set(__self__, "login_attempts", login_attempts)
        pulumi.set(__self__, "max_concurrent_sessions", max_concurrent_sessions)
        pulumi.set(__self__, "previous_successful_login_date", previous_successful_login_date)
        pulumi.set(__self__, "recovery_attempts", recovery_attempts)
        pulumi.set(__self__, "recovery_enroll_attempts", recovery_enroll_attempts)
        pulumi.set(__self__, "recovery_lockeds", recovery_lockeds)

    @property
    @pulumi.getter(name="lastFailedLoginDate")
    def last_failed_login_date(self) -> str:
        """
        The last failed login date
        """
        return pulumi.get(self, "last_failed_login_date")

    @property
    @pulumi.getter(name="lastSuccessfulLoginDate")
    def last_successful_login_date(self) -> str:
        """
        The last successful login date
        """
        return pulumi.get(self, "last_successful_login_date")

    @property
    @pulumi.getter
    def lockeds(self) -> Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLockedResult']:
        """
        A complex attribute that indicates an account is locked (blocking new sessions)
        """
        return pulumi.get(self, "lockeds")

    @property
    @pulumi.getter(name="loginAttempts")
    def login_attempts(self) -> int:
        """
        The number of failed login attempts. The value is reset to 0 after a successful login.
        """
        return pulumi.get(self, "login_attempts")

    @property
    @pulumi.getter(name="maxConcurrentSessions")
    def max_concurrent_sessions(self) -> int:
        """
        Maximum number of concurrent sessions for a User
        """
        return pulumi.get(self, "max_concurrent_sessions")

    @property
    @pulumi.getter(name="previousSuccessfulLoginDate")
    def previous_successful_login_date(self) -> str:
        """
        The previous successful login date
        """
        return pulumi.get(self, "previous_successful_login_date")

    @property
    @pulumi.getter(name="recoveryAttempts")
    def recovery_attempts(self) -> int:
        """
        The number of failed recovery attempts. The value is reset to 0 after a successful login.
        """
        return pulumi.get(self, "recovery_attempts")

    @property
    @pulumi.getter(name="recoveryEnrollAttempts")
    def recovery_enroll_attempts(self) -> int:
        """
        The number of failed account recovery enrollment attempts.
        """
        return pulumi.get(self, "recovery_enroll_attempts")

    @property
    @pulumi.getter(name="recoveryLockeds")
    def recovery_lockeds(self) -> Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserRecoveryLockedResult']:
        """
        A complex attribute that indicates an password recovery is locked (blocking new sessions)
        """
        return pulumi.get(self, "recovery_lockeds")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLockedResult(dict):
    def __init__(__self__, *,
                 expired: bool,
                 lock_date: str,
                 on: bool,
                 reason: int):
        """
        :param bool expired: Indicates whether user password is expired. If this value is false, password expiry will still be evaluated during user login.
        :param str lock_date: The date and time that the current resource was locked
        :param bool on: Indicates that the rev is locked
        :param int reason: Indicates the reason for locking. Valid values are: 0 - failed password login attempts, 1 - admin lock, 2 - failed reset password attempts, 3 - failed MFA login attempts, 4 - failed MFA login attempts for federated user, 5 - failed Database login attempts
        """
        pulumi.set(__self__, "expired", expired)
        pulumi.set(__self__, "lock_date", lock_date)
        pulumi.set(__self__, "on", on)
        pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def expired(self) -> bool:
        """
        Indicates whether user password is expired. If this value is false, password expiry will still be evaluated during user login.
        """
        return pulumi.get(self, "expired")

    @property
    @pulumi.getter(name="lockDate")
    def lock_date(self) -> str:
        """
        The date and time that the current resource was locked
        """
        return pulumi.get(self, "lock_date")

    @property
    @pulumi.getter
    def on(self) -> bool:
        """
        Indicates that the rev is locked
        """
        return pulumi.get(self, "on")

    @property
    @pulumi.getter
    def reason(self) -> int:
        """
        Indicates the reason for locking. Valid values are: 0 - failed password login attempts, 1 - admin lock, 2 - failed reset password attempts, 3 - failed MFA login attempts, 4 - failed MFA login attempts for federated user, 5 - failed Database login attempts
        """
        return pulumi.get(self, "reason")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserRecoveryLockedResult(dict):
    def __init__(__self__, *,
                 lock_date: str,
                 on: bool):
        """
        :param str lock_date: The date and time that the current resource was locked
        :param bool on: Indicates that the rev is locked
        """
        pulumi.set(__self__, "lock_date", lock_date)
        pulumi.set(__self__, "on", on)

    @property
    @pulumi.getter(name="lockDate")
    def lock_date(self) -> str:
        """
        The date and time that the current resource was locked
        """
        return pulumi.get(self, "lock_date")

    @property
    @pulumi.getter
    def on(self) -> bool:
        """
        Indicates that the rev is locked
        """
        return pulumi.get(self, "on")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserResult(dict):
    def __init__(__self__, *,
                 account_recovery_required: bool,
                 accounts: Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAccountResult'],
                 app_roles: Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAppRoleResult'],
                 applicable_authentication_target_apps: Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserApplicableAuthenticationTargetAppResult'],
                 bypass_notification: bool,
                 creation_mechanism: str,
                 delegated_authentication_target_apps: Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserDelegatedAuthenticationTargetAppResult'],
                 do_not_show_getting_started: bool,
                 grants: Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserGrantResult'],
                 idcs_app_roles_limited_to_groups: Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserIdcsAppRolesLimitedToGroupResult'],
                 is_account_recovery_enrolled: bool,
                 is_authentication_delegated: bool,
                 is_federated_user: bool,
                 is_group_membership_normalized: bool,
                 is_group_membership_synced_to_users_groups: bool,
                 notification_email_template_id: str,
                 status: str,
                 support_accounts: Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserSupportAccountResult'],
                 synced_from_apps: Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserSyncedFromAppResult'],
                 user_flow_controlled_by_external_client: bool,
                 user_provider: str,
                 user_tokens: Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserUserTokenResult']):
        """
        :param bool account_recovery_required: Boolean value to prompt user to setup account recovery during login.
        :param Sequence['GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAccountArgs'] accounts: Accounts assigned to this User. Each value of this attribute refers to an app-specific identity that is owned by this User. Therefore, this attribute is a convenience that allows one to see on each User the Apps to which that User has access.
        :param Sequence['GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAppRoleArgs'] app_roles: A list of all AppRoles to which this User belongs directly, indirectly or implicitly. The User could belong directly because the User is a member of the AppRole, could belong indirectly because the User is a member of a Group that is a member of the AppRole, or could belong implicitly because the AppRole is public.
        :param Sequence['GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserApplicableAuthenticationTargetAppArgs'] applicable_authentication_target_apps: The app against which the user will authenticate. The value is not persisted but rather calculated. If the user's delegatedAuthenticationTargetApp is set, that value is returned. Otherwise, the app returned by evaluating the user's applicable Delegated Authentication Policy is returned.
        :param bool bypass_notification: A Boolean value indicating whether or not to send email notification after creating the user. This attribute is not used in update/replace operations.
        :param str creation_mechanism: User creation mechanism
        :param Sequence['GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserDelegatedAuthenticationTargetAppArgs'] delegated_authentication_target_apps: If set, indicates the user's preferred authentication target app. If not set and the user's \\"syncedFromApp\\" is set and is enabled for delegated authentication, it is used. Otherwise, the user authenticates locally to Oracle Cloud Infrastructure IAM.
        :param bool do_not_show_getting_started: A Boolean value indicating whether or not to hide the getting started page
        :param Sequence['GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserGrantArgs'] grants: Grants to this User. Each value of this attribute refers to a Grant to this User of some App (and optionally of some entitlement). Therefore, this attribute is a convenience that allows one to see on each User all of the Grants to that User.
        :param Sequence['GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserIdcsAppRolesLimitedToGroupArgs'] idcs_app_roles_limited_to_groups: Description:
        :param bool is_account_recovery_enrolled: A Boolean value indicating whether or not a user is enrolled for account recovery
        :param bool is_authentication_delegated: A Boolean value indicating whether or not authentication request by this user should be delegated to a remote app. This value should be true only when the User was originally synced from an app which is enabled for delegated authentication
        :param bool is_federated_user: A Boolean value indicating whether or not the user is federated.
        :param bool is_group_membership_normalized: A Boolean value indicating whether or not group membership is normalized for this user.
        :param bool is_group_membership_synced_to_users_groups: A Boolean value Indicates whether this User's group membership has been sync'ed from Group.members to UsersGroups.
        :param str notification_email_template_id: Specifies the EmailTemplate to be used when sending notification to the user this request is for. If specified, it overrides the default EmailTemplate for this event.
        :param str status: A supplemental status indicating the reason why a user is disabled
        :param Sequence['GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserSupportAccountArgs'] support_accounts: A list of Support Accounts corresponding to user.
        :param Sequence['GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserSyncedFromAppArgs'] synced_from_apps: Managed App or an Identity Source from where the user is synced. If enabled, this Managed App or Identity Source can be used for performing delegated authentication.
        :param bool user_flow_controlled_by_external_client: A Boolean value indicating whether to bypass notification and return user token to be used by an external client to control the user flow.
        :param str user_provider: User Support Account Provider
        :param Sequence['GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserUserTokenArgs'] user_tokens: User token returned if userFlowControlledByExternalClient is true
        """
        pulumi.set(__self__, "account_recovery_required", account_recovery_required)
        pulumi.set(__self__, "accounts", accounts)
        pulumi.set(__self__, "app_roles", app_roles)
        pulumi.set(__self__, "applicable_authentication_target_apps", applicable_authentication_target_apps)
        pulumi.set(__self__, "bypass_notification", bypass_notification)
        pulumi.set(__self__, "creation_mechanism", creation_mechanism)
        pulumi.set(__self__, "delegated_authentication_target_apps", delegated_authentication_target_apps)
        pulumi.set(__self__, "do_not_show_getting_started", do_not_show_getting_started)
        pulumi.set(__self__, "grants", grants)
        pulumi.set(__self__, "idcs_app_roles_limited_to_groups", idcs_app_roles_limited_to_groups)
        pulumi.set(__self__, "is_account_recovery_enrolled", is_account_recovery_enrolled)
        pulumi.set(__self__, "is_authentication_delegated", is_authentication_delegated)
        pulumi.set(__self__, "is_federated_user", is_federated_user)
        pulumi.set(__self__, "is_group_membership_normalized", is_group_membership_normalized)
        pulumi.set(__self__, "is_group_membership_synced_to_users_groups", is_group_membership_synced_to_users_groups)
        pulumi.set(__self__, "notification_email_template_id", notification_email_template_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "support_accounts", support_accounts)
        pulumi.set(__self__, "synced_from_apps", synced_from_apps)
        pulumi.set(__self__, "user_flow_controlled_by_external_client", user_flow_controlled_by_external_client)
        pulumi.set(__self__, "user_provider", user_provider)
        pulumi.set(__self__, "user_tokens", user_tokens)

    @property
    @pulumi.getter(name="accountRecoveryRequired")
    def account_recovery_required(self) -> bool:
        """
        Boolean value to prompt user to setup account recovery during login.
        """
        return pulumi.get(self, "account_recovery_required")

    @property
    @pulumi.getter
    def accounts(self) -> Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAccountResult']:
        """
        Accounts assigned to this User. Each value of this attribute refers to an app-specific identity that is owned by this User. Therefore, this attribute is a convenience that allows one to see on each User the Apps to which that User has access.
        """
        return pulumi.get(self, "accounts")

    @property
    @pulumi.getter(name="appRoles")
    def app_roles(self) -> Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAppRoleResult']:
        """
        A list of all AppRoles to which this User belongs directly, indirectly or implicitly. The User could belong directly because the User is a member of the AppRole, could belong indirectly because the User is a member of a Group that is a member of the AppRole, or could belong implicitly because the AppRole is public.
        """
        return pulumi.get(self, "app_roles")

    @property
    @pulumi.getter(name="applicableAuthenticationTargetApps")
    def applicable_authentication_target_apps(self) -> Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserApplicableAuthenticationTargetAppResult']:
        """
        The app against which the user will authenticate. The value is not persisted but rather calculated. If the user's delegatedAuthenticationTargetApp is set, that value is returned. Otherwise, the app returned by evaluating the user's applicable Delegated Authentication Policy is returned.
        """
        return pulumi.get(self, "applicable_authentication_target_apps")

    @property
    @pulumi.getter(name="bypassNotification")
    def bypass_notification(self) -> bool:
        """
        A Boolean value indicating whether or not to send email notification after creating the user. This attribute is not used in update/replace operations.
        """
        return pulumi.get(self, "bypass_notification")

    @property
    @pulumi.getter(name="creationMechanism")
    def creation_mechanism(self) -> str:
        """
        User creation mechanism
        """
        return pulumi.get(self, "creation_mechanism")

    @property
    @pulumi.getter(name="delegatedAuthenticationTargetApps")
    def delegated_authentication_target_apps(self) -> Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserDelegatedAuthenticationTargetAppResult']:
        """
        If set, indicates the user's preferred authentication target app. If not set and the user's \\"syncedFromApp\\" is set and is enabled for delegated authentication, it is used. Otherwise, the user authenticates locally to Oracle Cloud Infrastructure IAM.
        """
        return pulumi.get(self, "delegated_authentication_target_apps")

    @property
    @pulumi.getter(name="doNotShowGettingStarted")
    def do_not_show_getting_started(self) -> bool:
        """
        A Boolean value indicating whether or not to hide the getting started page
        """
        return pulumi.get(self, "do_not_show_getting_started")

    @property
    @pulumi.getter
    def grants(self) -> Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserGrantResult']:
        """
        Grants to this User. Each value of this attribute refers to a Grant to this User of some App (and optionally of some entitlement). Therefore, this attribute is a convenience that allows one to see on each User all of the Grants to that User.
        """
        return pulumi.get(self, "grants")

    @property
    @pulumi.getter(name="idcsAppRolesLimitedToGroups")
    def idcs_app_roles_limited_to_groups(self) -> Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserIdcsAppRolesLimitedToGroupResult']:
        """
        Description:
        """
        return pulumi.get(self, "idcs_app_roles_limited_to_groups")

    @property
    @pulumi.getter(name="isAccountRecoveryEnrolled")
    def is_account_recovery_enrolled(self) -> bool:
        """
        A Boolean value indicating whether or not a user is enrolled for account recovery
        """
        return pulumi.get(self, "is_account_recovery_enrolled")

    @property
    @pulumi.getter(name="isAuthenticationDelegated")
    def is_authentication_delegated(self) -> bool:
        """
        A Boolean value indicating whether or not authentication request by this user should be delegated to a remote app. This value should be true only when the User was originally synced from an app which is enabled for delegated authentication
        """
        return pulumi.get(self, "is_authentication_delegated")

    @property
    @pulumi.getter(name="isFederatedUser")
    def is_federated_user(self) -> bool:
        """
        A Boolean value indicating whether or not the user is federated.
        """
        return pulumi.get(self, "is_federated_user")

    @property
    @pulumi.getter(name="isGroupMembershipNormalized")
    def is_group_membership_normalized(self) -> bool:
        """
        A Boolean value indicating whether or not group membership is normalized for this user.
        """
        return pulumi.get(self, "is_group_membership_normalized")

    @property
    @pulumi.getter(name="isGroupMembershipSyncedToUsersGroups")
    def is_group_membership_synced_to_users_groups(self) -> bool:
        """
        A Boolean value Indicates whether this User's group membership has been sync'ed from Group.members to UsersGroups.
        """
        return pulumi.get(self, "is_group_membership_synced_to_users_groups")

    @property
    @pulumi.getter(name="notificationEmailTemplateId")
    def notification_email_template_id(self) -> str:
        """
        Specifies the EmailTemplate to be used when sending notification to the user this request is for. If specified, it overrides the default EmailTemplate for this event.
        """
        return pulumi.get(self, "notification_email_template_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        A supplemental status indicating the reason why a user is disabled
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="supportAccounts")
    def support_accounts(self) -> Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserSupportAccountResult']:
        """
        A list of Support Accounts corresponding to user.
        """
        return pulumi.get(self, "support_accounts")

    @property
    @pulumi.getter(name="syncedFromApps")
    def synced_from_apps(self) -> Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserSyncedFromAppResult']:
        """
        Managed App or an Identity Source from where the user is synced. If enabled, this Managed App or Identity Source can be used for performing delegated authentication.
        """
        return pulumi.get(self, "synced_from_apps")

    @property
    @pulumi.getter(name="userFlowControlledByExternalClient")
    def user_flow_controlled_by_external_client(self) -> bool:
        """
        A Boolean value indicating whether to bypass notification and return user token to be used by an external client to control the user flow.
        """
        return pulumi.get(self, "user_flow_controlled_by_external_client")

    @property
    @pulumi.getter(name="userProvider")
    def user_provider(self) -> str:
        """
        User Support Account Provider
        """
        return pulumi.get(self, "user_provider")

    @property
    @pulumi.getter(name="userTokens")
    def user_tokens(self) -> Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserUserTokenResult']:
        """
        User token returned if userFlowControlledByExternalClient is true
        """
        return pulumi.get(self, "user_tokens")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAccountResult(dict):
    def __init__(__self__, *,
                 active: bool,
                 app_id: str,
                 name: str,
                 ref: str,
                 value: str):
        """
        :param bool active: Status of the account
        :param str app_id: The ID of the App in this Grant.
        :param str name: Name of the account assigned to the User.
        :param str ref: User Token URI
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def active(self) -> bool:
        """
        Status of the account
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> str:
        """
        The ID of the App in this Grant.
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the account assigned to the User.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        User Token URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAppRoleResult(dict):
    def __init__(__self__, *,
                 admin_role: bool,
                 app_id: str,
                 app_name: str,
                 display: str,
                 legacy_group_name: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param bool admin_role: If true, then the role provides administrative access privileges. READ-ONLY.
        :param str app_id: The ID of the App in this Grant.
        :param str app_name: The name (Client ID) of the App that defines this AppRole.
        :param str display: A human readable name, primarily used for display purposes.
        :param str legacy_group_name: The name (if any) under which this AppRole should appear in this User's group-memberships for reasons of backward compatibility. Oracle Cloud Infrastructure IAM distinguishes between Groups and AppRoles, but some services still expect AppRoles appear as if they were service-instance-specific Groups.
        :param str ref: User Token URI
        :param str type: A label indicating the attribute's function.
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "admin_role", admin_role)
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "app_name", app_name)
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "legacy_group_name", legacy_group_name)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="adminRole")
    def admin_role(self) -> bool:
        """
        If true, then the role provides administrative access privileges. READ-ONLY.
        """
        return pulumi.get(self, "admin_role")

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> str:
        """
        The ID of the App in this Grant.
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="appName")
    def app_name(self) -> str:
        """
        The name (Client ID) of the App that defines this AppRole.
        """
        return pulumi.get(self, "app_name")

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        A human readable name, primarily used for display purposes.
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter(name="legacyGroupName")
    def legacy_group_name(self) -> str:
        """
        The name (if any) under which this AppRole should appear in this User's group-memberships for reasons of backward compatibility. Oracle Cloud Infrastructure IAM distinguishes between Groups and AppRoles, but some services still expect AppRoles appear as if they were service-instance-specific Groups.
        """
        return pulumi.get(self, "legacy_group_name")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        User Token URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        A label indicating the attribute's function.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserApplicableAuthenticationTargetAppResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ref: str,
                 target_request_timeout: int,
                 type: str,
                 value: str):
        """
        :param str display: A human readable name, primarily used for display purposes.
        :param str ref: User Token URI
        :param int target_request_timeout: Timeout interval for Synchronization TargetAction in milliseconds
        :param str type: A label indicating the attribute's function.
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "target_request_timeout", target_request_timeout)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        A human readable name, primarily used for display purposes.
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        User Token URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="targetRequestTimeout")
    def target_request_timeout(self) -> int:
        """
        Timeout interval for Synchronization TargetAction in milliseconds
        """
        return pulumi.get(self, "target_request_timeout")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        A label indicating the attribute's function.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserDelegatedAuthenticationTargetAppResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: A human readable name, primarily used for display purposes.
        :param str ref: User Token URI
        :param str type: A label indicating the attribute's function.
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        A human readable name, primarily used for display purposes.
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        User Token URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        A label indicating the attribute's function.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserGrantResult(dict):
    def __init__(__self__, *,
                 app_id: str,
                 grant_mechanism: str,
                 grantor_id: str,
                 ref: str,
                 value: str):
        """
        :param str app_id: The ID of the App in this Grant.
        :param str grant_mechanism: Each value of grantMechanism indicates how (or by what component) some App (or App-Entitlement) was granted.\\nA customer or the UI should use only grantMechanism values that start with 'ADMINISTRATOR':\\n - 'ADMINISTRATOR_TO_USER' is for a direct grant to a specific User.\\n - 'ADMINISTRATOR_TO_GROUP' is for a grant to a specific Group, which results in indirect grants to Users who are members of that Group.\\n - 'ADMINISTRATOR_TO_APP' is for a grant to a specific App.  The grantee (client) App gains access to the granted (server) App.
        :param str grantor_id: Grantor identifier
        :param str ref: User Token URI
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "grant_mechanism", grant_mechanism)
        pulumi.set(__self__, "grantor_id", grantor_id)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> str:
        """
        The ID of the App in this Grant.
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="grantMechanism")
    def grant_mechanism(self) -> str:
        """
        Each value of grantMechanism indicates how (or by what component) some App (or App-Entitlement) was granted.\\nA customer or the UI should use only grantMechanism values that start with 'ADMINISTRATOR':\\n - 'ADMINISTRATOR_TO_USER' is for a direct grant to a specific User.\\n - 'ADMINISTRATOR_TO_GROUP' is for a grant to a specific Group, which results in indirect grants to Users who are members of that Group.\\n - 'ADMINISTRATOR_TO_APP' is for a grant to a specific App.  The grantee (client) App gains access to the granted (server) App.
        """
        return pulumi.get(self, "grant_mechanism")

    @property
    @pulumi.getter(name="grantorId")
    def grantor_id(self) -> str:
        """
        Grantor identifier
        """
        return pulumi.get(self, "grantor_id")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        User Token URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserIdcsAppRolesLimitedToGroupResult(dict):
    def __init__(__self__, *,
                 display: str,
                 idcs_app_role_id: str,
                 ocid: str,
                 ref: str,
                 value: str):
        """
        :param str display: A human readable name, primarily used for display purposes.
        :param str idcs_app_role_id: The id of the Oracle Cloud Infrastructure IAM AppRole grant limited to one or more Groups.
        :param str ocid: Ocid of the User's Support Account.
        :param str ref: User Token URI
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "idcs_app_role_id", idcs_app_role_id)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        A human readable name, primarily used for display purposes.
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter(name="idcsAppRoleId")
    def idcs_app_role_id(self) -> str:
        """
        The id of the Oracle Cloud Infrastructure IAM AppRole grant limited to one or more Groups.
        """
        return pulumi.get(self, "idcs_app_role_id")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Ocid of the User's Support Account.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        User Token URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserSupportAccountResult(dict):
    def __init__(__self__, *,
                 ocid: str,
                 ref: str,
                 user_id: str,
                 user_provider: str,
                 value: str):
        """
        :param str ocid: Ocid of the User's Support Account.
        :param str ref: User Token URI
        :param str user_id: ID of the resource
        :param str user_provider: User Support Account Provider
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "user_id", user_id)
        pulumi.set(__self__, "user_provider", user_provider)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Ocid of the User's Support Account.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        User Token URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> str:
        """
        ID of the resource
        """
        return pulumi.get(self, "user_id")

    @property
    @pulumi.getter(name="userProvider")
    def user_provider(self) -> str:
        """
        User Support Account Provider
        """
        return pulumi.get(self, "user_provider")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserSyncedFromAppResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: A human readable name, primarily used for display purposes.
        :param str ref: User Token URI
        :param str type: A label indicating the attribute's function.
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        A human readable name, primarily used for display purposes.
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        User Token URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        A label indicating the attribute's function.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserUserTokenResult(dict):
    def __init__(__self__, *,
                 ref: str,
                 value: str):
        """
        :param str ref: User Token URI
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        User Token URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserX509certificateResult(dict):
    def __init__(__self__, *,
                 display: str,
                 primary: bool,
                 type: str,
                 value: str):
        """
        :param str display: A human readable name, primarily used for display purposes.
        :param bool primary: A Boolean value indicating the 'primary' or preferred attribute value for this attribute. The primary attribute value 'true' MUST appear no more than once.
        :param str type: A label indicating the attribute's function.
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "primary", primary)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        A human readable name, primarily used for display purposes.
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def primary(self) -> bool:
        """
        A Boolean value indicating the 'primary' or preferred attribute value for this attribute. The primary attribute value 'true' MUST appear no more than once.
        """
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        A label indicating the attribute's function.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserResult(dict):
    def __init__(__self__, *,
                 active: bool,
                 addresses: Sequence['outputs.GetDomainsUsersUserAddressResult'],
                 attribute_sets: Sequence[str],
                 attributes: str,
                 authorization: str,
                 compartment_ocid: str,
                 delete_in_progress: bool,
                 description: str,
                 display_name: str,
                 domain_ocid: str,
                 emails: Sequence['outputs.GetDomainsUsersUserEmailResult'],
                 entitlements: Sequence['outputs.GetDomainsUsersUserEntitlementResult'],
                 external_id: str,
                 groups: Sequence['outputs.GetDomainsUsersUserGroupResult'],
                 id: str,
                 idcs_created_bies: Sequence['outputs.GetDomainsUsersUserIdcsCreatedByResult'],
                 idcs_endpoint: str,
                 idcs_last_modified_bies: Sequence['outputs.GetDomainsUsersUserIdcsLastModifiedByResult'],
                 idcs_last_upgraded_in_release: str,
                 idcs_prevented_operations: Sequence[str],
                 ims: Sequence['outputs.GetDomainsUsersUserImResult'],
                 locale: str,
                 metas: Sequence['outputs.GetDomainsUsersUserMetaResult'],
                 names: Sequence['outputs.GetDomainsUsersUserNameResult'],
                 nick_name: str,
                 ocid: str,
                 password: str,
                 phone_numbers: Sequence['outputs.GetDomainsUsersUserPhoneNumberResult'],
                 photos: Sequence['outputs.GetDomainsUsersUserPhotoResult'],
                 preferred_language: str,
                 profile_url: str,
                 resource_type_schema_version: str,
                 roles: Sequence['outputs.GetDomainsUsersUserRoleResult'],
                 schemas: Sequence[str],
                 tags: Sequence['outputs.GetDomainsUsersUserTagResult'],
                 tenancy_ocid: str,
                 timezone: str,
                 title: str,
                 urnietfparamsscimschemasextensionenterprise20users: Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasextensionenterprise20userResult'],
                 urnietfparamsscimschemasoracleidcsextension_oci_tags: Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionOciTagResult'],
                 urnietfparamsscimschemasoracleidcsextensionadaptive_users: Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionadaptiveUserResult'],
                 urnietfparamsscimschemasoracleidcsextensioncapabilities_users: Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensioncapabilitiesUserResult'],
                 urnietfparamsscimschemasoracleidcsextensiondb_credentials_users: Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensiondbCredentialsUserResult'],
                 urnietfparamsscimschemasoracleidcsextensiondb_user_users: Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensiondbUserUserResult'],
                 urnietfparamsscimschemasoracleidcsextensionkerberos_user_users: Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionkerberosUserUserResult'],
                 urnietfparamsscimschemasoracleidcsextensionmfa_users: Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserResult'],
                 urnietfparamsscimschemasoracleidcsextensionpassword_state_users: Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserResult'],
                 urnietfparamsscimschemasoracleidcsextensionpasswordless_users: Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionpasswordlessUserResult'],
                 urnietfparamsscimschemasoracleidcsextensionposix_users: Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionposixUserResult'],
                 urnietfparamsscimschemasoracleidcsextensionsecurity_questions_users: Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUserResult'],
                 urnietfparamsscimschemasoracleidcsextensionself_change_users: Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult'],
                 urnietfparamsscimschemasoracleidcsextensionself_registration_users: Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionselfRegistrationUserResult'],
                 urnietfparamsscimschemasoracleidcsextensionsff_users: Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionsffUserResult'],
                 urnietfparamsscimschemasoracleidcsextensionsocial_account_users: Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionsocialAccountUserResult'],
                 urnietfparamsscimschemasoracleidcsextensionterms_of_use_users: Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensiontermsOfUseUserResult'],
                 urnietfparamsscimschemasoracleidcsextensionuser_credentials_users: Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserResult'],
                 urnietfparamsscimschemasoracleidcsextensionuser_state_users: Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserResult'],
                 urnietfparamsscimschemasoracleidcsextensionuser_users: Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserResult'],
                 user_name: str,
                 user_type: str,
                 x509certificates: Sequence['outputs.GetDomainsUsersUserX509certificateResult']):
        """
        :param bool active: Status of the account
        :param Sequence['GetDomainsUsersUserAddressArgs'] addresses: A physical mailing address for this User, as described in (address Element). Canonical Type Values of work, home, and other. The value attribute is a complex type with the following sub-attributes.
        :param Sequence[str] attribute_sets: A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
        :param str attributes: A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
        :param str authorization: The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
        :param str compartment_ocid: Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
        :param bool delete_in_progress: A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
        :param str description: Description of the user
        :param str display_name: The displayName of the User's manager. OPTIONAL and READ-ONLY.
        :param str domain_ocid: Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
        :param Sequence['GetDomainsUsersUserEmailArgs'] emails: A complex attribute representing emails
        :param Sequence['GetDomainsUsersUserEntitlementArgs'] entitlements: A list of entitlements for the User that represent a thing the User has.
        :param str external_id: An identifier for the Resource as defined by the Service Consumer. READ-ONLY.
        :param Sequence['GetDomainsUsersUserGroupArgs'] groups: A list of groups that the user belongs to, either thorough direct membership, nested groups, or dynamically calculated
        :param str id: Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider's entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
        :param Sequence['GetDomainsUsersUserIdcsCreatedByArgs'] idcs_created_bies: The User or App who created the Resource
        :param str idcs_endpoint: The basic endpoint for the identity domain
        :param Sequence['GetDomainsUsersUserIdcsLastModifiedByArgs'] idcs_last_modified_bies: The User or App who modified the Resource
        :param str idcs_last_upgraded_in_release: The release number when the resource was upgraded.
        :param Sequence[str] idcs_prevented_operations: Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
        :param Sequence['GetDomainsUsersUserImArgs'] ims: User's instant messaging addresses
        :param str locale: Used to indicate the User's default location for purposes of localizing items such as currency, date and time format, numerical representations, and so on.
        :param Sequence['GetDomainsUsersUserMetaArgs'] metas: A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
        :param Sequence['GetDomainsUsersUserNameArgs'] names: Name of the account assigned to the User.
        :param str nick_name: Nick name
        :param str ocid: Ocid of the User's Support Account.
        :param str password: Password attribute. Max length for password is controlled via Password Policy.
        :param Sequence['GetDomainsUsersUserPhoneNumberArgs'] phone_numbers: Phone numbers
        :param Sequence['GetDomainsUsersUserPhotoArgs'] photos: URLs of photos for the User
        :param str preferred_language: User's preferred written or spoken language used for localized user interfaces
        :param str profile_url: A fully-qualified URL to a page representing the User's online profile
        :param str resource_type_schema_version: An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
        :param Sequence['GetDomainsUsersUserRoleArgs'] roles: A list of roles for the User that collectively represent who the User is; e.g., 'Student', 'Faculty'.
        :param Sequence[str] schemas: REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \\"enterprise\\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
        :param Sequence['GetDomainsUsersUserTagArgs'] tags: A list of tags on this resource.
        :param str tenancy_ocid: Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
        :param str timezone: User's timezone
        :param str title: Title
        :param Sequence['GetDomainsUsersUserUrnietfparamsscimschemasextensionenterprise20userArgs'] urnietfparamsscimschemasextensionenterprise20users: Enterprise User
        :param Sequence['GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionOciTagArgs'] urnietfparamsscimschemasoracleidcsextension_oci_tags: Oracle Cloud Infrastructure Tags.
        :param Sequence['GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionadaptiveUserArgs'] urnietfparamsscimschemasoracleidcsextensionadaptive_users: This extension defines attributes to manage user's risk score.
        :param Sequence['GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensioncapabilitiesUserArgs'] urnietfparamsscimschemasoracleidcsextensioncapabilities_users: User's Capabilities
        :param Sequence['GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensiondbCredentialsUserArgs'] urnietfparamsscimschemasoracleidcsextensiondb_credentials_users: Db Credentials User extension
        :param Sequence['GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensiondbUserUserArgs'] urnietfparamsscimschemasoracleidcsextensiondb_user_users: DB User extension
        :param Sequence['GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionkerberosUserUserArgs'] urnietfparamsscimschemasoracleidcsextensionkerberos_user_users: Kerberos User extension
        :param Sequence['GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserArgs'] urnietfparamsscimschemasoracleidcsextensionmfa_users: This extension defines attributes used to manage Multi-Factor Authentication within a service provider. The extension is typically applied to a User resource, but MAY be applied to other resources that use MFA.
        :param Sequence['GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserArgs'] urnietfparamsscimschemasoracleidcsextensionpassword_state_users: This extension defines attributes used to manage account passwords within a Service Provider. The extension is typically applied to a User resource, but MAY be applied to other resources that use passwords.
        :param Sequence['GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionpasswordlessUserArgs'] urnietfparamsscimschemasoracleidcsextensionpasswordless_users: This extension defines attributes used to manage Passwordless-Factor Authentication within a service provider. The extension is typically applied to a User resource, but MAY be applied to other resources that use MFA.
        :param Sequence['GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionposixUserArgs'] urnietfparamsscimschemasoracleidcsextensionposix_users: POSIX User extension
        :param Sequence['GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUserArgs'] urnietfparamsscimschemasoracleidcsextensionsecurity_questions_users: This extension defines attributes used to store Security Questions of User.
        :param Sequence['GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionselfChangeUserArgs'] urnietfparamsscimschemasoracleidcsextensionself_change_users: Controls whether a user can update themselves or not via User related APIs
        :param Sequence['GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionselfRegistrationUserArgs'] urnietfparamsscimschemasoracleidcsextensionself_registration_users: This extension defines attributes used to manage self registration profile linked to the user.
        :param Sequence['GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionsffUserArgs'] urnietfparamsscimschemasoracleidcsextensionsff_users: SFF Auth Keys User extension
        :param Sequence['GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionsocialAccountUserArgs'] urnietfparamsscimschemasoracleidcsextensionsocial_account_users: Social User extension
        :param Sequence['GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensiontermsOfUseUserArgs'] urnietfparamsscimschemasoracleidcsextensionterms_of_use_users: Terms Of Use extension
        :param Sequence['GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserArgs'] urnietfparamsscimschemasoracleidcsextensionuser_credentials_users: User's credentials
        :param Sequence['GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserArgs'] urnietfparamsscimschemasoracleidcsextensionuser_state_users: This extension defines attributes used to manage account passwords within a service provider. The extension is typically applied to a User resource, but MAY be applied to other resources that use passwords.
        :param Sequence['GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserArgs'] urnietfparamsscimschemasoracleidcsextensionuser_users: Oracle Cloud Infrastructure IAM User
        :param str user_name: User name
        :param str user_type: Used to identify the organization-to-user relationship
        :param Sequence['GetDomainsUsersUserX509certificateArgs'] x509certificates: A list of certificates issued to the User.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "addresses", addresses)
        pulumi.set(__self__, "attribute_sets", attribute_sets)
        pulumi.set(__self__, "attributes", attributes)
        pulumi.set(__self__, "authorization", authorization)
        pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "domain_ocid", domain_ocid)
        pulumi.set(__self__, "emails", emails)
        pulumi.set(__self__, "entitlements", entitlements)
        pulumi.set(__self__, "external_id", external_id)
        pulumi.set(__self__, "groups", groups)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        pulumi.set(__self__, "idcs_endpoint", idcs_endpoint)
        pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        pulumi.set(__self__, "ims", ims)
        pulumi.set(__self__, "locale", locale)
        pulumi.set(__self__, "metas", metas)
        pulumi.set(__self__, "names", names)
        pulumi.set(__self__, "nick_name", nick_name)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "phone_numbers", phone_numbers)
        pulumi.set(__self__, "photos", photos)
        pulumi.set(__self__, "preferred_language", preferred_language)
        pulumi.set(__self__, "profile_url", profile_url)
        pulumi.set(__self__, "resource_type_schema_version", resource_type_schema_version)
        pulumi.set(__self__, "roles", roles)
        pulumi.set(__self__, "schemas", schemas)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)
        pulumi.set(__self__, "timezone", timezone)
        pulumi.set(__self__, "title", title)
        pulumi.set(__self__, "urnietfparamsscimschemasextensionenterprise20users", urnietfparamsscimschemasextensionenterprise20users)
        pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextension_oci_tags", urnietfparamsscimschemasoracleidcsextension_oci_tags)
        pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionadaptive_users", urnietfparamsscimschemasoracleidcsextensionadaptive_users)
        pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensioncapabilities_users", urnietfparamsscimschemasoracleidcsextensioncapabilities_users)
        pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensiondb_credentials_users", urnietfparamsscimschemasoracleidcsextensiondb_credentials_users)
        pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensiondb_user_users", urnietfparamsscimschemasoracleidcsextensiondb_user_users)
        pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionkerberos_user_users", urnietfparamsscimschemasoracleidcsextensionkerberos_user_users)
        pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionmfa_users", urnietfparamsscimschemasoracleidcsextensionmfa_users)
        pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionpassword_state_users", urnietfparamsscimschemasoracleidcsextensionpassword_state_users)
        pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionpasswordless_users", urnietfparamsscimschemasoracleidcsextensionpasswordless_users)
        pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionposix_users", urnietfparamsscimschemasoracleidcsextensionposix_users)
        pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionsecurity_questions_users", urnietfparamsscimschemasoracleidcsextensionsecurity_questions_users)
        pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionself_change_users", urnietfparamsscimschemasoracleidcsextensionself_change_users)
        pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionself_registration_users", urnietfparamsscimschemasoracleidcsextensionself_registration_users)
        pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionsff_users", urnietfparamsscimschemasoracleidcsextensionsff_users)
        pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionsocial_account_users", urnietfparamsscimschemasoracleidcsextensionsocial_account_users)
        pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionterms_of_use_users", urnietfparamsscimschemasoracleidcsextensionterms_of_use_users)
        pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionuser_credentials_users", urnietfparamsscimschemasoracleidcsextensionuser_credentials_users)
        pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionuser_state_users", urnietfparamsscimschemasoracleidcsextensionuser_state_users)
        pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionuser_users", urnietfparamsscimschemasoracleidcsextensionuser_users)
        pulumi.set(__self__, "user_name", user_name)
        pulumi.set(__self__, "user_type", user_type)
        pulumi.set(__self__, "x509certificates", x509certificates)

    @property
    @pulumi.getter
    def active(self) -> bool:
        """
        Status of the account
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter
    def addresses(self) -> Sequence['outputs.GetDomainsUsersUserAddressResult']:
        """
        A physical mailing address for this User, as described in (address Element). Canonical Type Values of work, home, and other. The value attribute is a complex type with the following sub-attributes.
        """
        return pulumi.get(self, "addresses")

    @property
    @pulumi.getter(name="attributeSets")
    def attribute_sets(self) -> Sequence[str]:
        """
        A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
        """
        return pulumi.get(self, "attribute_sets")

    @property
    @pulumi.getter
    def attributes(self) -> str:
        """
        A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
        """
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter
    def authorization(self) -> str:
        """
        The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
        """
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> bool:
        """
        A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
        """
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description of the user
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The displayName of the User's manager. OPTIONAL and READ-ONLY.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter
    def emails(self) -> Sequence['outputs.GetDomainsUsersUserEmailResult']:
        """
        A complex attribute representing emails
        """
        return pulumi.get(self, "emails")

    @property
    @pulumi.getter
    def entitlements(self) -> Sequence['outputs.GetDomainsUsersUserEntitlementResult']:
        """
        A list of entitlements for the User that represent a thing the User has.
        """
        return pulumi.get(self, "entitlements")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> str:
        """
        An identifier for the Resource as defined by the Service Consumer. READ-ONLY.
        """
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter
    def groups(self) -> Sequence['outputs.GetDomainsUsersUserGroupResult']:
        """
        A list of groups that the user belongs to, either thorough direct membership, nested groups, or dynamically calculated
        """
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider's entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Sequence['outputs.GetDomainsUsersUserIdcsCreatedByResult']:
        """
        The User or App who created the Resource
        """
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> str:
        """
        The basic endpoint for the identity domain
        """
        return pulumi.get(self, "idcs_endpoint")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Sequence['outputs.GetDomainsUsersUserIdcsLastModifiedByResult']:
        """
        The User or App who modified the Resource
        """
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> str:
        """
        The release number when the resource was upgraded.
        """
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Sequence[str]:
        """
        Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
        """
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter
    def ims(self) -> Sequence['outputs.GetDomainsUsersUserImResult']:
        """
        User's instant messaging addresses
        """
        return pulumi.get(self, "ims")

    @property
    @pulumi.getter
    def locale(self) -> str:
        """
        Used to indicate the User's default location for purposes of localizing items such as currency, date and time format, numerical representations, and so on.
        """
        return pulumi.get(self, "locale")

    @property
    @pulumi.getter
    def metas(self) -> Sequence['outputs.GetDomainsUsersUserMetaResult']:
        """
        A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
        """
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter
    def names(self) -> Sequence['outputs.GetDomainsUsersUserNameResult']:
        """
        Name of the account assigned to the User.
        """
        return pulumi.get(self, "names")

    @property
    @pulumi.getter(name="nickName")
    def nick_name(self) -> str:
        """
        Nick name
        """
        return pulumi.get(self, "nick_name")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Ocid of the User's Support Account.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        Password attribute. Max length for password is controlled via Password Policy.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="phoneNumbers")
    def phone_numbers(self) -> Sequence['outputs.GetDomainsUsersUserPhoneNumberResult']:
        """
        Phone numbers
        """
        return pulumi.get(self, "phone_numbers")

    @property
    @pulumi.getter
    def photos(self) -> Sequence['outputs.GetDomainsUsersUserPhotoResult']:
        """
        URLs of photos for the User
        """
        return pulumi.get(self, "photos")

    @property
    @pulumi.getter(name="preferredLanguage")
    def preferred_language(self) -> str:
        """
        User's preferred written or spoken language used for localized user interfaces
        """
        return pulumi.get(self, "preferred_language")

    @property
    @pulumi.getter(name="profileUrl")
    def profile_url(self) -> str:
        """
        A fully-qualified URL to a page representing the User's online profile
        """
        return pulumi.get(self, "profile_url")

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> str:
        """
        An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
        """
        return pulumi.get(self, "resource_type_schema_version")

    @property
    @pulumi.getter
    def roles(self) -> Sequence['outputs.GetDomainsUsersUserRoleResult']:
        """
        A list of roles for the User that collectively represent who the User is; e.g., 'Student', 'Faculty'.
        """
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter
    def schemas(self) -> Sequence[str]:
        """
        REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \\"enterprise\\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
        """
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetDomainsUsersUserTagResult']:
        """
        A list of tags on this resource.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> str:
        """
        Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
        """
        return pulumi.get(self, "tenancy_ocid")

    @property
    @pulumi.getter
    def timezone(self) -> str:
        """
        User's timezone
        """
        return pulumi.get(self, "timezone")

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def urnietfparamsscimschemasextensionenterprise20users(self) -> Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasextensionenterprise20userResult']:
        """
        Enterprise User
        """
        return pulumi.get(self, "urnietfparamsscimschemasextensionenterprise20users")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionOciTags")
    def urnietfparamsscimschemasoracleidcsextension_oci_tags(self) -> Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionOciTagResult']:
        """
        Oracle Cloud Infrastructure Tags.
        """
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextension_oci_tags")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionadaptiveUsers")
    def urnietfparamsscimschemasoracleidcsextensionadaptive_users(self) -> Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionadaptiveUserResult']:
        """
        This extension defines attributes to manage user's risk score.
        """
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionadaptive_users")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensioncapabilitiesUsers")
    def urnietfparamsscimschemasoracleidcsextensioncapabilities_users(self) -> Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensioncapabilitiesUserResult']:
        """
        User's Capabilities
        """
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensioncapabilities_users")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensiondbCredentialsUsers")
    def urnietfparamsscimschemasoracleidcsextensiondb_credentials_users(self) -> Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensiondbCredentialsUserResult']:
        """
        Db Credentials User extension
        """
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensiondb_credentials_users")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensiondbUserUsers")
    def urnietfparamsscimschemasoracleidcsextensiondb_user_users(self) -> Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensiondbUserUserResult']:
        """
        DB User extension
        """
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensiondb_user_users")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionkerberosUserUsers")
    def urnietfparamsscimschemasoracleidcsextensionkerberos_user_users(self) -> Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionkerberosUserUserResult']:
        """
        Kerberos User extension
        """
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionkerberos_user_users")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionmfaUsers")
    def urnietfparamsscimschemasoracleidcsextensionmfa_users(self) -> Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserResult']:
        """
        This extension defines attributes used to manage Multi-Factor Authentication within a service provider. The extension is typically applied to a User resource, but MAY be applied to other resources that use MFA.
        """
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionmfa_users")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionpasswordStateUsers")
    def urnietfparamsscimschemasoracleidcsextensionpassword_state_users(self) -> Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserResult']:
        """
        This extension defines attributes used to manage account passwords within a Service Provider. The extension is typically applied to a User resource, but MAY be applied to other resources that use passwords.
        """
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionpassword_state_users")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionpasswordlessUsers")
    def urnietfparamsscimschemasoracleidcsextensionpasswordless_users(self) -> Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionpasswordlessUserResult']:
        """
        This extension defines attributes used to manage Passwordless-Factor Authentication within a service provider. The extension is typically applied to a User resource, but MAY be applied to other resources that use MFA.
        """
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionpasswordless_users")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionposixUsers")
    def urnietfparamsscimschemasoracleidcsextensionposix_users(self) -> Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionposixUserResult']:
        """
        POSIX User extension
        """
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionposix_users")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUsers")
    def urnietfparamsscimschemasoracleidcsextensionsecurity_questions_users(self) -> Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUserResult']:
        """
        This extension defines attributes used to store Security Questions of User.
        """
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionsecurity_questions_users")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionselfChangeUsers")
    def urnietfparamsscimschemasoracleidcsextensionself_change_users(self) -> Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult']:
        """
        Controls whether a user can update themselves or not via User related APIs
        """
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionself_change_users")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionselfRegistrationUsers")
    def urnietfparamsscimschemasoracleidcsextensionself_registration_users(self) -> Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionselfRegistrationUserResult']:
        """
        This extension defines attributes used to manage self registration profile linked to the user.
        """
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionself_registration_users")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionsffUsers")
    def urnietfparamsscimschemasoracleidcsextensionsff_users(self) -> Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionsffUserResult']:
        """
        SFF Auth Keys User extension
        """
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionsff_users")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionsocialAccountUsers")
    def urnietfparamsscimschemasoracleidcsextensionsocial_account_users(self) -> Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionsocialAccountUserResult']:
        """
        Social User extension
        """
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionsocial_account_users")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensiontermsOfUseUsers")
    def urnietfparamsscimschemasoracleidcsextensionterms_of_use_users(self) -> Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensiontermsOfUseUserResult']:
        """
        Terms Of Use extension
        """
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionterms_of_use_users")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionuserCredentialsUsers")
    def urnietfparamsscimschemasoracleidcsextensionuser_credentials_users(self) -> Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserResult']:
        """
        User's credentials
        """
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionuser_credentials_users")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionuserStateUsers")
    def urnietfparamsscimschemasoracleidcsextensionuser_state_users(self) -> Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserResult']:
        """
        This extension defines attributes used to manage account passwords within a service provider. The extension is typically applied to a User resource, but MAY be applied to other resources that use passwords.
        """
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionuser_state_users")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionuserUsers")
    def urnietfparamsscimschemasoracleidcsextensionuser_users(self) -> Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserResult']:
        """
        Oracle Cloud Infrastructure IAM User
        """
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionuser_users")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> str:
        """
        User name
        """
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter(name="userType")
    def user_type(self) -> str:
        """
        Used to identify the organization-to-user relationship
        """
        return pulumi.get(self, "user_type")

    @property
    @pulumi.getter
    def x509certificates(self) -> Sequence['outputs.GetDomainsUsersUserX509certificateResult']:
        """
        A list of certificates issued to the User.
        """
        return pulumi.get(self, "x509certificates")


@pulumi.output_type
class GetDomainsUsersUserAddressResult(dict):
    def __init__(__self__, *,
                 country: str,
                 formatted: str,
                 locality: str,
                 postal_code: str,
                 primary: bool,
                 region: str,
                 street_address: str,
                 type: str):
        """
        :param str country: The country name component.
        :param str formatted: Full name
        :param str locality: The city or locality component.
        :param str postal_code: The zipcode or postal code component.
        :param bool primary: A Boolean value indicating the 'primary' or preferred attribute value for this attribute. The primary attribute value 'true' MUST appear no more than once.
        :param str region: The state or region component.
        :param str street_address: The full street address component, which may include house number, street name, PO BOX, and multi-line extended street address information. This attribute MAY contain newlines.
        :param str type: A label indicating the attribute's function.
        """
        pulumi.set(__self__, "country", country)
        pulumi.set(__self__, "formatted", formatted)
        pulumi.set(__self__, "locality", locality)
        pulumi.set(__self__, "postal_code", postal_code)
        pulumi.set(__self__, "primary", primary)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "street_address", street_address)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def country(self) -> str:
        """
        The country name component.
        """
        return pulumi.get(self, "country")

    @property
    @pulumi.getter
    def formatted(self) -> str:
        """
        Full name
        """
        return pulumi.get(self, "formatted")

    @property
    @pulumi.getter
    def locality(self) -> str:
        """
        The city or locality component.
        """
        return pulumi.get(self, "locality")

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> str:
        """
        The zipcode or postal code component.
        """
        return pulumi.get(self, "postal_code")

    @property
    @pulumi.getter
    def primary(self) -> bool:
        """
        A Boolean value indicating the 'primary' or preferred attribute value for this attribute. The primary attribute value 'true' MUST appear no more than once.
        """
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        The state or region component.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="streetAddress")
    def street_address(self) -> str:
        """
        The full street address component, which may include house number, street name, PO BOX, and multi-line extended street address information. This attribute MAY contain newlines.
        """
        return pulumi.get(self, "street_address")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        A label indicating the attribute's function.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDomainsUsersUserEmailResult(dict):
    def __init__(__self__, *,
                 pending_verification_data: str,
                 primary: bool,
                 secondary: bool,
                 type: str,
                 value: str,
                 verified: bool):
        """
        :param str pending_verification_data: Pending e-mail address verification
        :param bool primary: A Boolean value indicating the 'primary' or preferred attribute value for this attribute. The primary attribute value 'true' MUST appear no more than once.
        :param bool secondary: A Boolean value that indicates whether the email address is the secondary email address. The secondary attribute value 'true' MUST appear no more than once.
        :param str type: A label indicating the attribute's function.
        :param str value: The value of a X509 certificate.
        :param bool verified: A Boolean value that indicates if the phone number is verified.
        """
        pulumi.set(__self__, "pending_verification_data", pending_verification_data)
        pulumi.set(__self__, "primary", primary)
        pulumi.set(__self__, "secondary", secondary)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        pulumi.set(__self__, "verified", verified)

    @property
    @pulumi.getter(name="pendingVerificationData")
    def pending_verification_data(self) -> str:
        """
        Pending e-mail address verification
        """
        return pulumi.get(self, "pending_verification_data")

    @property
    @pulumi.getter
    def primary(self) -> bool:
        """
        A Boolean value indicating the 'primary' or preferred attribute value for this attribute. The primary attribute value 'true' MUST appear no more than once.
        """
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def secondary(self) -> bool:
        """
        A Boolean value that indicates whether the email address is the secondary email address. The secondary attribute value 'true' MUST appear no more than once.
        """
        return pulumi.get(self, "secondary")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        A label indicating the attribute's function.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def verified(self) -> bool:
        """
        A Boolean value that indicates if the phone number is verified.
        """
        return pulumi.get(self, "verified")


@pulumi.output_type
class GetDomainsUsersUserEntitlementResult(dict):
    def __init__(__self__, *,
                 display: str,
                 primary: bool,
                 type: str,
                 value: str):
        """
        :param str display: A human readable name, primarily used for display purposes.
        :param bool primary: A Boolean value indicating the 'primary' or preferred attribute value for this attribute. The primary attribute value 'true' MUST appear no more than once.
        :param str type: A label indicating the attribute's function.
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "primary", primary)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        A human readable name, primarily used for display purposes.
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def primary(self) -> bool:
        """
        A Boolean value indicating the 'primary' or preferred attribute value for this attribute. The primary attribute value 'true' MUST appear no more than once.
        """
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        A label indicating the attribute's function.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserGroupResult(dict):
    def __init__(__self__, *,
                 date_added: str,
                 display: str,
                 external_id: str,
                 membership_ocid: str,
                 non_unique_display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str date_added: Date when the member is Added to the group
        :param str display: A human readable name, primarily used for display purposes.
        :param str external_id: An identifier for the Resource as defined by the Service Consumer. READ-ONLY.
        :param str membership_ocid: Membership Ocid
        :param str non_unique_display: A human readable name for Group as defined by the Service Consumer. READ-ONLY.
        :param str ocid: Ocid of the User's Support Account.
        :param str ref: User Token URI
        :param str type: A label indicating the attribute's function.
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "date_added", date_added)
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "external_id", external_id)
        pulumi.set(__self__, "membership_ocid", membership_ocid)
        pulumi.set(__self__, "non_unique_display", non_unique_display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="dateAdded")
    def date_added(self) -> str:
        """
        Date when the member is Added to the group
        """
        return pulumi.get(self, "date_added")

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        A human readable name, primarily used for display purposes.
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> str:
        """
        An identifier for the Resource as defined by the Service Consumer. READ-ONLY.
        """
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter(name="membershipOcid")
    def membership_ocid(self) -> str:
        """
        Membership Ocid
        """
        return pulumi.get(self, "membership_ocid")

    @property
    @pulumi.getter(name="nonUniqueDisplay")
    def non_unique_display(self) -> str:
        """
        A human readable name for Group as defined by the Service Consumer. READ-ONLY.
        """
        return pulumi.get(self, "non_unique_display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Ocid of the User's Support Account.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        User Token URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        A label indicating the attribute's function.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: A human readable name, primarily used for display purposes.
        :param str ocid: Ocid of the User's Support Account.
        :param str ref: User Token URI
        :param str type: A label indicating the attribute's function.
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        A human readable name, primarily used for display purposes.
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Ocid of the User's Support Account.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        User Token URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        A label indicating the attribute's function.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ocid: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: A human readable name, primarily used for display purposes.
        :param str ocid: Ocid of the User's Support Account.
        :param str ref: User Token URI
        :param str type: A label indicating the attribute's function.
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        A human readable name, primarily used for display purposes.
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Ocid of the User's Support Account.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        User Token URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        A label indicating the attribute's function.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserImResult(dict):
    def __init__(__self__, *,
                 display: str,
                 primary: bool,
                 type: str,
                 value: str):
        """
        :param str display: A human readable name, primarily used for display purposes.
        :param bool primary: A Boolean value indicating the 'primary' or preferred attribute value for this attribute. The primary attribute value 'true' MUST appear no more than once.
        :param str type: A label indicating the attribute's function.
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "primary", primary)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        A human readable name, primarily used for display purposes.
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def primary(self) -> bool:
        """
        A Boolean value indicating the 'primary' or preferred attribute value for this attribute. The primary attribute value 'true' MUST appear no more than once.
        """
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        A label indicating the attribute's function.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserMetaResult(dict):
    def __init__(__self__, *,
                 created: str,
                 last_modified: str,
                 location: str,
                 resource_type: str,
                 version: str):
        """
        :param str created: The DateTime the Resource was added to the Service Provider
        :param str last_modified: The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        :param str location: The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        :param str resource_type: Name of the resource type of the resource--for example, Users or Groups
        :param str version: The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "last_modified", last_modified)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        The DateTime the Resource was added to the Service Provider
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> str:
        """
        The most recent DateTime that the details of this Resource were updated at the Service Provider. If this Resource has never been modified since its initial creation, the value MUST be the same as the value of created. The attribute MUST be a DateTime.
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The URI of the Resource being returned. This value MUST be the same as the Location HTTP response header.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Name of the resource type of the resource--for example, Users or Groups
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the Resource being returned. This value must be the same as the ETag HTTP response header.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsUsersUserNameResult(dict):
    def __init__(__self__, *,
                 family_name: str,
                 formatted: str,
                 given_name: str,
                 honorific_prefix: str,
                 honorific_suffix: str,
                 middle_name: str):
        """
        :param str family_name: Last name
        :param str formatted: Full name
        :param str given_name: First name
        :param str honorific_prefix: Prefix
        :param str honorific_suffix: Suffix
        :param str middle_name: Middle name
        """
        pulumi.set(__self__, "family_name", family_name)
        pulumi.set(__self__, "formatted", formatted)
        pulumi.set(__self__, "given_name", given_name)
        pulumi.set(__self__, "honorific_prefix", honorific_prefix)
        pulumi.set(__self__, "honorific_suffix", honorific_suffix)
        pulumi.set(__self__, "middle_name", middle_name)

    @property
    @pulumi.getter(name="familyName")
    def family_name(self) -> str:
        """
        Last name
        """
        return pulumi.get(self, "family_name")

    @property
    @pulumi.getter
    def formatted(self) -> str:
        """
        Full name
        """
        return pulumi.get(self, "formatted")

    @property
    @pulumi.getter(name="givenName")
    def given_name(self) -> str:
        """
        First name
        """
        return pulumi.get(self, "given_name")

    @property
    @pulumi.getter(name="honorificPrefix")
    def honorific_prefix(self) -> str:
        """
        Prefix
        """
        return pulumi.get(self, "honorific_prefix")

    @property
    @pulumi.getter(name="honorificSuffix")
    def honorific_suffix(self) -> str:
        """
        Suffix
        """
        return pulumi.get(self, "honorific_suffix")

    @property
    @pulumi.getter(name="middleName")
    def middle_name(self) -> str:
        """
        Middle name
        """
        return pulumi.get(self, "middle_name")


@pulumi.output_type
class GetDomainsUsersUserPhoneNumberResult(dict):
    def __init__(__self__, *,
                 display: str,
                 primary: bool,
                 type: str,
                 value: str,
                 verified: bool):
        """
        :param str display: A human readable name, primarily used for display purposes.
        :param bool primary: A Boolean value indicating the 'primary' or preferred attribute value for this attribute. The primary attribute value 'true' MUST appear no more than once.
        :param str type: A label indicating the attribute's function.
        :param str value: The value of a X509 certificate.
        :param bool verified: A Boolean value that indicates if the phone number is verified.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "primary", primary)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        pulumi.set(__self__, "verified", verified)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        A human readable name, primarily used for display purposes.
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def primary(self) -> bool:
        """
        A Boolean value indicating the 'primary' or preferred attribute value for this attribute. The primary attribute value 'true' MUST appear no more than once.
        """
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        A label indicating the attribute's function.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def verified(self) -> bool:
        """
        A Boolean value that indicates if the phone number is verified.
        """
        return pulumi.get(self, "verified")


@pulumi.output_type
class GetDomainsUsersUserPhotoResult(dict):
    def __init__(__self__, *,
                 display: str,
                 primary: bool,
                 type: str,
                 value: str):
        """
        :param str display: A human readable name, primarily used for display purposes.
        :param bool primary: A Boolean value indicating the 'primary' or preferred attribute value for this attribute. The primary attribute value 'true' MUST appear no more than once.
        :param str type: A label indicating the attribute's function.
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "primary", primary)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        A human readable name, primarily used for display purposes.
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def primary(self) -> bool:
        """
        A Boolean value indicating the 'primary' or preferred attribute value for this attribute. The primary attribute value 'true' MUST appear no more than once.
        """
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        A label indicating the attribute's function.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserRoleResult(dict):
    def __init__(__self__, *,
                 display: str,
                 primary: bool,
                 type: str,
                 value: str):
        """
        :param str display: A human readable name, primarily used for display purposes.
        :param bool primary: A Boolean value indicating the 'primary' or preferred attribute value for this attribute. The primary attribute value 'true' MUST appear no more than once.
        :param str type: A label indicating the attribute's function.
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "primary", primary)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        A human readable name, primarily used for display purposes.
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def primary(self) -> bool:
        """
        A Boolean value indicating the 'primary' or preferred attribute value for this attribute. The primary attribute value 'true' MUST appear no more than once.
        """
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        A label indicating the attribute's function.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The value of of the User's api key.
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The value of of the User's api key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasextensionenterprise20userResult(dict):
    def __init__(__self__, *,
                 cost_center: str,
                 department: str,
                 division: str,
                 employee_number: str,
                 managers: Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasextensionenterprise20userManagerResult'],
                 organization: str):
        """
        :param str cost_center: Identifies the name of a cost center.
        :param str department: Identifies the name of a department.
        :param str division: Identifies the name of a division.
        :param str employee_number: Numeric or alphanumeric identifier assigned to  a person, typically based on order of hire or association with an organization.
        :param Sequence['GetDomainsUsersUserUrnietfparamsscimschemasextensionenterprise20userManagerArgs'] managers: The User's manager. A complex type that optionally allows Service Providers to represent organizational hierarchy by referencing the 'id' attribute of another User.
        :param str organization: Identifies the name of an organization.
        """
        pulumi.set(__self__, "cost_center", cost_center)
        pulumi.set(__self__, "department", department)
        pulumi.set(__self__, "division", division)
        pulumi.set(__self__, "employee_number", employee_number)
        pulumi.set(__self__, "managers", managers)
        pulumi.set(__self__, "organization", organization)

    @property
    @pulumi.getter(name="costCenter")
    def cost_center(self) -> str:
        """
        Identifies the name of a cost center.
        """
        return pulumi.get(self, "cost_center")

    @property
    @pulumi.getter
    def department(self) -> str:
        """
        Identifies the name of a department.
        """
        return pulumi.get(self, "department")

    @property
    @pulumi.getter
    def division(self) -> str:
        """
        Identifies the name of a division.
        """
        return pulumi.get(self, "division")

    @property
    @pulumi.getter(name="employeeNumber")
    def employee_number(self) -> str:
        """
        Numeric or alphanumeric identifier assigned to  a person, typically based on order of hire or association with an organization.
        """
        return pulumi.get(self, "employee_number")

    @property
    @pulumi.getter
    def managers(self) -> Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasextensionenterprise20userManagerResult']:
        """
        The User's manager. A complex type that optionally allows Service Providers to represent organizational hierarchy by referencing the 'id' attribute of another User.
        """
        return pulumi.get(self, "managers")

    @property
    @pulumi.getter
    def organization(self) -> str:
        """
        Identifies the name of an organization.
        """
        return pulumi.get(self, "organization")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasextensionenterprise20userManagerResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 ref: str,
                 value: str):
        """
        :param str display_name: The displayName of the User's manager. OPTIONAL and READ-ONLY.
        :param str ref: User Token URI
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The displayName of the User's manager. OPTIONAL and READ-ONLY.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        User Token URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionOciTagResult(dict):
    def __init__(__self__, *,
                 defined_tags: Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTagResult'],
                 freeform_tags: Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTagResult'],
                 tag_slug: str):
        """
        :param Sequence['GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTagArgs'] defined_tags: Oracle Cloud Infrastructure Defined Tags
        :param Sequence['GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTagArgs'] freeform_tags: Oracle Cloud Infrastructure Freeform Tags
        :param str tag_slug: Oracle Cloud Infrastructure Tag slug
        """
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "tag_slug", tag_slug)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTagResult']:
        """
        Oracle Cloud Infrastructure Defined Tags
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTagResult']:
        """
        Oracle Cloud Infrastructure Freeform Tags
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="tagSlug")
    def tag_slug(self) -> str:
        """
        Oracle Cloud Infrastructure Tag slug
        """
        return pulumi.get(self, "tag_slug")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 namespace: str,
                 value: str):
        """
        :param str key: The value of of the User's api key.
        :param str namespace: Oracle Cloud Infrastructure Tag namespace
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The value of of the User's api key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        Oracle Cloud Infrastructure Tag namespace
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The value of of the User's api key.
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The value of of the User's api key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionadaptiveUserResult(dict):
    def __init__(__self__, *,
                 risk_level: str,
                 risk_scores: Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionadaptiveUserRiskScoreResult']):
        """
        :param str risk_level: Risk Level
        :param Sequence['GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionadaptiveUserRiskScoreArgs'] risk_scores: The risk score pertaining to the user.
        """
        pulumi.set(__self__, "risk_level", risk_level)
        pulumi.set(__self__, "risk_scores", risk_scores)

    @property
    @pulumi.getter(name="riskLevel")
    def risk_level(self) -> str:
        """
        Risk Level
        """
        return pulumi.get(self, "risk_level")

    @property
    @pulumi.getter(name="riskScores")
    def risk_scores(self) -> Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionadaptiveUserRiskScoreResult']:
        """
        The risk score pertaining to the user.
        """
        return pulumi.get(self, "risk_scores")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionadaptiveUserRiskScoreResult(dict):
    def __init__(__self__, *,
                 last_update_timestamp: str,
                 ref: str,
                 risk_level: str,
                 score: int,
                 source: str,
                 status: str,
                 value: str):
        """
        :param str last_update_timestamp: Last update timestamp for the risk score
        :param str ref: User Token URI
        :param str risk_level: Risk Level
        :param int score: Risk Score value
        :param str source: Risk Provider Profile Source
        :param str status: A supplemental status indicating the reason why a user is disabled
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "last_update_timestamp", last_update_timestamp)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "risk_level", risk_level)
        pulumi.set(__self__, "score", score)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="lastUpdateTimestamp")
    def last_update_timestamp(self) -> str:
        """
        Last update timestamp for the risk score
        """
        return pulumi.get(self, "last_update_timestamp")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        User Token URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="riskLevel")
    def risk_level(self) -> str:
        """
        Risk Level
        """
        return pulumi.get(self, "risk_level")

    @property
    @pulumi.getter
    def score(self) -> int:
        """
        Risk Score value
        """
        return pulumi.get(self, "score")

    @property
    @pulumi.getter
    def source(self) -> str:
        """
        Risk Provider Profile Source
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        A supplemental status indicating the reason why a user is disabled
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensioncapabilitiesUserResult(dict):
    def __init__(__self__, *,
                 can_use_api_keys: bool,
                 can_use_auth_tokens: bool,
                 can_use_console_password: bool,
                 can_use_customer_secret_keys: bool,
                 can_use_db_credentials: bool,
                 can_use_oauth2client_credentials: bool,
                 can_use_smtp_credentials: bool):
        """
        :param bool can_use_api_keys: Indicates weather a user can use api keys
        :param bool can_use_auth_tokens: Indicates weather a user can use auth tokens
        :param bool can_use_console_password: Indicates weather a user can use console password
        :param bool can_use_customer_secret_keys: Indicates weather a user can use customer secret keys
        :param bool can_use_db_credentials: Indicates weather a user can use db credentials
        :param bool can_use_oauth2client_credentials: Indicates weather a user can use oauth2 client credentials
        :param bool can_use_smtp_credentials: Indicates weather a user can use smtp credentials
        """
        pulumi.set(__self__, "can_use_api_keys", can_use_api_keys)
        pulumi.set(__self__, "can_use_auth_tokens", can_use_auth_tokens)
        pulumi.set(__self__, "can_use_console_password", can_use_console_password)
        pulumi.set(__self__, "can_use_customer_secret_keys", can_use_customer_secret_keys)
        pulumi.set(__self__, "can_use_db_credentials", can_use_db_credentials)
        pulumi.set(__self__, "can_use_oauth2client_credentials", can_use_oauth2client_credentials)
        pulumi.set(__self__, "can_use_smtp_credentials", can_use_smtp_credentials)

    @property
    @pulumi.getter(name="canUseApiKeys")
    def can_use_api_keys(self) -> bool:
        """
        Indicates weather a user can use api keys
        """
        return pulumi.get(self, "can_use_api_keys")

    @property
    @pulumi.getter(name="canUseAuthTokens")
    def can_use_auth_tokens(self) -> bool:
        """
        Indicates weather a user can use auth tokens
        """
        return pulumi.get(self, "can_use_auth_tokens")

    @property
    @pulumi.getter(name="canUseConsolePassword")
    def can_use_console_password(self) -> bool:
        """
        Indicates weather a user can use console password
        """
        return pulumi.get(self, "can_use_console_password")

    @property
    @pulumi.getter(name="canUseCustomerSecretKeys")
    def can_use_customer_secret_keys(self) -> bool:
        """
        Indicates weather a user can use customer secret keys
        """
        return pulumi.get(self, "can_use_customer_secret_keys")

    @property
    @pulumi.getter(name="canUseDbCredentials")
    def can_use_db_credentials(self) -> bool:
        """
        Indicates weather a user can use db credentials
        """
        return pulumi.get(self, "can_use_db_credentials")

    @property
    @pulumi.getter(name="canUseOauth2clientCredentials")
    def can_use_oauth2client_credentials(self) -> bool:
        """
        Indicates weather a user can use oauth2 client credentials
        """
        return pulumi.get(self, "can_use_oauth2client_credentials")

    @property
    @pulumi.getter(name="canUseSmtpCredentials")
    def can_use_smtp_credentials(self) -> bool:
        """
        Indicates weather a user can use smtp credentials
        """
        return pulumi.get(self, "can_use_smtp_credentials")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensiondbCredentialsUserResult(dict):
    def __init__(__self__, *,
                 db_login_attempts: int,
                 db_user_name: str):
        """
        :param int db_login_attempts: The number of failed login attempts. The value is reset to 0 after a successful login.
        :param str db_user_name: The Database User Name
        """
        pulumi.set(__self__, "db_login_attempts", db_login_attempts)
        pulumi.set(__self__, "db_user_name", db_user_name)

    @property
    @pulumi.getter(name="dbLoginAttempts")
    def db_login_attempts(self) -> int:
        """
        The number of failed login attempts. The value is reset to 0 after a successful login.
        """
        return pulumi.get(self, "db_login_attempts")

    @property
    @pulumi.getter(name="dbUserName")
    def db_user_name(self) -> str:
        """
        The Database User Name
        """
        return pulumi.get(self, "db_user_name")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensiondbUserUserResult(dict):
    def __init__(__self__, *,
                 db_global_roles: Sequence[str],
                 domain_level_schema: str,
                 instance_level_schema: str,
                 is_db_user: bool,
                 password_verifiers: Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensiondbUserUserPasswordVerifierResult']):
        """
        :param Sequence[str] db_global_roles: DB global roles to which the user is granted access.
        :param str domain_level_schema: DB domain level schema to which the user is granted access.
        :param str instance_level_schema: DB instance level schema to which the user is granted access.
        :param bool is_db_user: If true, indicates this is a database user.
        :param Sequence['GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensiondbUserUserPasswordVerifierArgs'] password_verifiers: Password Verifiers for DB User.
        """
        pulumi.set(__self__, "db_global_roles", db_global_roles)
        pulumi.set(__self__, "domain_level_schema", domain_level_schema)
        pulumi.set(__self__, "instance_level_schema", instance_level_schema)
        pulumi.set(__self__, "is_db_user", is_db_user)
        pulumi.set(__self__, "password_verifiers", password_verifiers)

    @property
    @pulumi.getter(name="dbGlobalRoles")
    def db_global_roles(self) -> Sequence[str]:
        """
        DB global roles to which the user is granted access.
        """
        return pulumi.get(self, "db_global_roles")

    @property
    @pulumi.getter(name="domainLevelSchema")
    def domain_level_schema(self) -> str:
        """
        DB domain level schema to which the user is granted access.
        """
        return pulumi.get(self, "domain_level_schema")

    @property
    @pulumi.getter(name="instanceLevelSchema")
    def instance_level_schema(self) -> str:
        """
        DB instance level schema to which the user is granted access.
        """
        return pulumi.get(self, "instance_level_schema")

    @property
    @pulumi.getter(name="isDbUser")
    def is_db_user(self) -> bool:
        """
        If true, indicates this is a database user.
        """
        return pulumi.get(self, "is_db_user")

    @property
    @pulumi.getter(name="passwordVerifiers")
    def password_verifiers(self) -> Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensiondbUserUserPasswordVerifierResult']:
        """
        Password Verifiers for DB User.
        """
        return pulumi.get(self, "password_verifiers")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensiondbUserUserPasswordVerifierResult(dict):
    def __init__(__self__, *,
                 type: str,
                 value: str):
        """
        :param str type: A label indicating the attribute's function.
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        A label indicating the attribute's function.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionkerberosUserUserResult(dict):
    def __init__(__self__, *,
                 realm_users: Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionkerberosUserUserRealmUserResult']):
        """
        :param Sequence['GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionkerberosUserUserRealmUserArgs'] realm_users: A list of kerberos realm users for an Oracle Cloud Infrastructure IAM User
        """
        pulumi.set(__self__, "realm_users", realm_users)

    @property
    @pulumi.getter(name="realmUsers")
    def realm_users(self) -> Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionkerberosUserUserRealmUserResult']:
        """
        A list of kerberos realm users for an Oracle Cloud Infrastructure IAM User
        """
        return pulumi.get(self, "realm_users")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionkerberosUserUserRealmUserResult(dict):
    def __init__(__self__, *,
                 principal_name: str,
                 realm_name: str,
                 ref: str,
                 value: str):
        """
        :param str principal_name: Principal Name of the KerberosRealmUser associated with the Oracle Cloud Infrastructure IAM User.
        :param str realm_name: Realm Name for the KerberosRealmUser associated with the Oracle Cloud Infrastructure IAM User.
        :param str ref: User Token URI
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "principal_name", principal_name)
        pulumi.set(__self__, "realm_name", realm_name)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="principalName")
    def principal_name(self) -> str:
        """
        Principal Name of the KerberosRealmUser associated with the Oracle Cloud Infrastructure IAM User.
        """
        return pulumi.get(self, "principal_name")

    @property
    @pulumi.getter(name="realmName")
    def realm_name(self) -> str:
        """
        Realm Name for the KerberosRealmUser associated with the Oracle Cloud Infrastructure IAM User.
        """
        return pulumi.get(self, "realm_name")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        User Token URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserResult(dict):
    def __init__(__self__, *,
                 bypass_codes: Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserBypassCodeResult'],
                 devices: Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserDeviceResult'],
                 login_attempts: int,
                 mfa_enabled_on: str,
                 mfa_ignored_apps: Sequence[str],
                 mfa_status: str,
                 preferred_authentication_factor: str,
                 preferred_authentication_method: str,
                 preferred_devices: Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserPreferredDeviceResult'],
                 preferred_third_party_vendor: str,
                 trusted_user_agents: Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserTrustedUserAgentResult']):
        """
        :param Sequence['GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserBypassCodeArgs'] bypass_codes: A list of bypass codes belongs to user
        :param Sequence['GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserDeviceArgs'] devices: A list of devices enrolled by the user.
        :param int login_attempts: The number of failed login attempts. The value is reset to 0 after a successful login.
        :param str mfa_enabled_on: This represents the date when the user enrolled for multi factor authentication. This will be set to null, when the user resets his factors.
        :param Sequence[str] mfa_ignored_apps: User MFA Ignored Apps Identifiers
        :param str mfa_status: User Opted for MFA
        :param str preferred_authentication_factor: Preferred Authentication Factor Type
        :param str preferred_authentication_method: Preferred Authentication method
        :param Sequence['GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserPreferredDeviceArgs'] preferred_devices: User preferred device
        :param str preferred_third_party_vendor: Preferred Third party vendor name
        :param Sequence['GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserTrustedUserAgentArgs'] trusted_user_agents: A list of trusted User Agents owned by this user. Multi-Factored Authentication uses Trusted User Agents to authenticate users.  A User Agent is software application that a user uses to issue requests. For example, a User Agent could be a particular browser (possibly one of several executing on a desktop or laptop) or a particular mobile application (again, oneof several executing on a particular mobile device). A User Agent is trusted once the Multi-Factor Authentication has verified it in some way.
        """
        pulumi.set(__self__, "bypass_codes", bypass_codes)
        pulumi.set(__self__, "devices", devices)
        pulumi.set(__self__, "login_attempts", login_attempts)
        pulumi.set(__self__, "mfa_enabled_on", mfa_enabled_on)
        pulumi.set(__self__, "mfa_ignored_apps", mfa_ignored_apps)
        pulumi.set(__self__, "mfa_status", mfa_status)
        pulumi.set(__self__, "preferred_authentication_factor", preferred_authentication_factor)
        pulumi.set(__self__, "preferred_authentication_method", preferred_authentication_method)
        pulumi.set(__self__, "preferred_devices", preferred_devices)
        pulumi.set(__self__, "preferred_third_party_vendor", preferred_third_party_vendor)
        pulumi.set(__self__, "trusted_user_agents", trusted_user_agents)

    @property
    @pulumi.getter(name="bypassCodes")
    def bypass_codes(self) -> Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserBypassCodeResult']:
        """
        A list of bypass codes belongs to user
        """
        return pulumi.get(self, "bypass_codes")

    @property
    @pulumi.getter
    def devices(self) -> Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserDeviceResult']:
        """
        A list of devices enrolled by the user.
        """
        return pulumi.get(self, "devices")

    @property
    @pulumi.getter(name="loginAttempts")
    def login_attempts(self) -> int:
        """
        The number of failed login attempts. The value is reset to 0 after a successful login.
        """
        return pulumi.get(self, "login_attempts")

    @property
    @pulumi.getter(name="mfaEnabledOn")
    def mfa_enabled_on(self) -> str:
        """
        This represents the date when the user enrolled for multi factor authentication. This will be set to null, when the user resets his factors.
        """
        return pulumi.get(self, "mfa_enabled_on")

    @property
    @pulumi.getter(name="mfaIgnoredApps")
    def mfa_ignored_apps(self) -> Sequence[str]:
        """
        User MFA Ignored Apps Identifiers
        """
        return pulumi.get(self, "mfa_ignored_apps")

    @property
    @pulumi.getter(name="mfaStatus")
    def mfa_status(self) -> str:
        """
        User Opted for MFA
        """
        return pulumi.get(self, "mfa_status")

    @property
    @pulumi.getter(name="preferredAuthenticationFactor")
    def preferred_authentication_factor(self) -> str:
        """
        Preferred Authentication Factor Type
        """
        return pulumi.get(self, "preferred_authentication_factor")

    @property
    @pulumi.getter(name="preferredAuthenticationMethod")
    def preferred_authentication_method(self) -> str:
        """
        Preferred Authentication method
        """
        return pulumi.get(self, "preferred_authentication_method")

    @property
    @pulumi.getter(name="preferredDevices")
    def preferred_devices(self) -> Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserPreferredDeviceResult']:
        """
        User preferred device
        """
        return pulumi.get(self, "preferred_devices")

    @property
    @pulumi.getter(name="preferredThirdPartyVendor")
    def preferred_third_party_vendor(self) -> str:
        """
        Preferred Third party vendor name
        """
        return pulumi.get(self, "preferred_third_party_vendor")

    @property
    @pulumi.getter(name="trustedUserAgents")
    def trusted_user_agents(self) -> Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserTrustedUserAgentResult']:
        """
        A list of trusted User Agents owned by this user. Multi-Factored Authentication uses Trusted User Agents to authenticate users.  A User Agent is software application that a user uses to issue requests. For example, a User Agent could be a particular browser (possibly one of several executing on a desktop or laptop) or a particular mobile application (again, oneof several executing on a particular mobile device). A User Agent is trusted once the Multi-Factor Authentication has verified it in some way.
        """
        return pulumi.get(self, "trusted_user_agents")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserBypassCodeResult(dict):
    def __init__(__self__, *,
                 ref: str,
                 value: str):
        """
        :param str ref: User Token URI
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        User Token URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserDeviceResult(dict):
    def __init__(__self__, *,
                 authentication_method: str,
                 display: str,
                 factor_status: str,
                 factor_type: str,
                 last_sync_time: str,
                 ref: str,
                 status: str,
                 third_party_vendor_name: str,
                 value: str):
        """
        :param str authentication_method: Authentication method.
        :param str display: A human readable name, primarily used for display purposes.
        :param str factor_status: Device authentication factor status.
        :param str factor_type: Authentication Factor Type
        :param str last_sync_time: Last Sync time for device.
        :param str ref: User Token URI
        :param str status: A supplemental status indicating the reason why a user is disabled
        :param str third_party_vendor_name: Third party factor vendor name.
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "authentication_method", authentication_method)
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "factor_status", factor_status)
        pulumi.set(__self__, "factor_type", factor_type)
        pulumi.set(__self__, "last_sync_time", last_sync_time)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "third_party_vendor_name", third_party_vendor_name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="authenticationMethod")
    def authentication_method(self) -> str:
        """
        Authentication method.
        """
        return pulumi.get(self, "authentication_method")

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        A human readable name, primarily used for display purposes.
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter(name="factorStatus")
    def factor_status(self) -> str:
        """
        Device authentication factor status.
        """
        return pulumi.get(self, "factor_status")

    @property
    @pulumi.getter(name="factorType")
    def factor_type(self) -> str:
        """
        Authentication Factor Type
        """
        return pulumi.get(self, "factor_type")

    @property
    @pulumi.getter(name="lastSyncTime")
    def last_sync_time(self) -> str:
        """
        Last Sync time for device.
        """
        return pulumi.get(self, "last_sync_time")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        User Token URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        A supplemental status indicating the reason why a user is disabled
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="thirdPartyVendorName")
    def third_party_vendor_name(self) -> str:
        """
        Third party factor vendor name.
        """
        return pulumi.get(self, "third_party_vendor_name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserPreferredDeviceResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ref: str,
                 value: str):
        """
        :param str display: A human readable name, primarily used for display purposes.
        :param str ref: User Token URI
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        A human readable name, primarily used for display purposes.
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        User Token URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserTrustedUserAgentResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ref: str,
                 value: str):
        """
        :param str display: A human readable name, primarily used for display purposes.
        :param str ref: User Token URI
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        A human readable name, primarily used for display purposes.
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        User Token URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserResult(dict):
    def __init__(__self__, *,
                 applicable_password_policies: Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserApplicablePasswordPolicyResult'],
                 cant_change: bool,
                 cant_expire: bool,
                 expired: bool,
                 last_failed_validation_date: str,
                 last_successful_set_date: str,
                 last_successful_validation_date: str,
                 must_change: bool):
        """
        :param Sequence['GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserApplicablePasswordPolicyArgs'] applicable_password_policies: Applicable Password Policy
        :param bool cant_change: Indicates that the current password MAY NOT be changed and all other password expiry settings SHALL be ignored
        :param bool cant_expire: Indicates that the password expiry policy will not be applied for the current Resource
        :param bool expired: Indicates whether user password is expired. If this value is false, password expiry will still be evaluated during user login.
        :param str last_failed_validation_date: A DateTime that specifies the date and time when last failed password validation was set
        :param str last_successful_set_date: A DateTime that specifies the date and time when the current password was set
        :param str last_successful_validation_date: A DateTime that specifies the date and time when last successful password validation was set
        :param bool must_change: Indicates that the subject password value MUST change on next login. If not changed, typically the account is locked. The value may be set indirectly when the subject's current password expires or directly set by an administrator.
        """
        pulumi.set(__self__, "applicable_password_policies", applicable_password_policies)
        pulumi.set(__self__, "cant_change", cant_change)
        pulumi.set(__self__, "cant_expire", cant_expire)
        pulumi.set(__self__, "expired", expired)
        pulumi.set(__self__, "last_failed_validation_date", last_failed_validation_date)
        pulumi.set(__self__, "last_successful_set_date", last_successful_set_date)
        pulumi.set(__self__, "last_successful_validation_date", last_successful_validation_date)
        pulumi.set(__self__, "must_change", must_change)

    @property
    @pulumi.getter(name="applicablePasswordPolicies")
    def applicable_password_policies(self) -> Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserApplicablePasswordPolicyResult']:
        """
        Applicable Password Policy
        """
        return pulumi.get(self, "applicable_password_policies")

    @property
    @pulumi.getter(name="cantChange")
    def cant_change(self) -> bool:
        """
        Indicates that the current password MAY NOT be changed and all other password expiry settings SHALL be ignored
        """
        return pulumi.get(self, "cant_change")

    @property
    @pulumi.getter(name="cantExpire")
    def cant_expire(self) -> bool:
        """
        Indicates that the password expiry policy will not be applied for the current Resource
        """
        return pulumi.get(self, "cant_expire")

    @property
    @pulumi.getter
    def expired(self) -> bool:
        """
        Indicates whether user password is expired. If this value is false, password expiry will still be evaluated during user login.
        """
        return pulumi.get(self, "expired")

    @property
    @pulumi.getter(name="lastFailedValidationDate")
    def last_failed_validation_date(self) -> str:
        """
        A DateTime that specifies the date and time when last failed password validation was set
        """
        return pulumi.get(self, "last_failed_validation_date")

    @property
    @pulumi.getter(name="lastSuccessfulSetDate")
    def last_successful_set_date(self) -> str:
        """
        A DateTime that specifies the date and time when the current password was set
        """
        return pulumi.get(self, "last_successful_set_date")

    @property
    @pulumi.getter(name="lastSuccessfulValidationDate")
    def last_successful_validation_date(self) -> str:
        """
        A DateTime that specifies the date and time when last successful password validation was set
        """
        return pulumi.get(self, "last_successful_validation_date")

    @property
    @pulumi.getter(name="mustChange")
    def must_change(self) -> bool:
        """
        Indicates that the subject password value MUST change on next login. If not changed, typically the account is locked. The value may be set indirectly when the subject's current password expires or directly set by an administrator.
        """
        return pulumi.get(self, "must_change")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserApplicablePasswordPolicyResult(dict):
    def __init__(__self__, *,
                 display: str,
                 priority: int,
                 ref: str,
                 value: str):
        """
        :param str display: A human readable name, primarily used for display purposes.
        :param int priority: PasswordPolicy priority
        :param str ref: User Token URI
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        A human readable name, primarily used for display purposes.
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        PasswordPolicy priority
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        User Token URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionpasswordlessUserResult(dict):
    def __init__(__self__, *,
                 factor_identifiers: Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionpasswordlessUserFactorIdentifierResult'],
                 factor_method: str,
                 factor_type: str):
        """
        :param Sequence['GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionpasswordlessUserFactorIdentifierArgs'] factor_identifiers: Factor Identifier ID
        :param str factor_method: Authentication Factor Method
        :param str factor_type: Authentication Factor Type
        """
        pulumi.set(__self__, "factor_identifiers", factor_identifiers)
        pulumi.set(__self__, "factor_method", factor_method)
        pulumi.set(__self__, "factor_type", factor_type)

    @property
    @pulumi.getter(name="factorIdentifiers")
    def factor_identifiers(self) -> Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionpasswordlessUserFactorIdentifierResult']:
        """
        Factor Identifier ID
        """
        return pulumi.get(self, "factor_identifiers")

    @property
    @pulumi.getter(name="factorMethod")
    def factor_method(self) -> str:
        """
        Authentication Factor Method
        """
        return pulumi.get(self, "factor_method")

    @property
    @pulumi.getter(name="factorType")
    def factor_type(self) -> str:
        """
        Authentication Factor Type
        """
        return pulumi.get(self, "factor_type")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionpasswordlessUserFactorIdentifierResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ref: str,
                 value: str):
        """
        :param str display: A human readable name, primarily used for display purposes.
        :param str ref: User Token URI
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        A human readable name, primarily used for display purposes.
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        User Token URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionposixUserResult(dict):
    def __init__(__self__, *,
                 gecos: str,
                 gid_number: int,
                 home_directory: str,
                 login_shell: str,
                 uid_number: int):
        """
        :param str gecos: General information about the POSIX account such as their real name and phone number
        :param int gid_number: Primary Group identifier of the POSIX user
        :param str home_directory: The absolute path to the home directory of the POSIX account
        :param str login_shell: The path to the login shell of the POSIX account
        :param int uid_number: Integer uniquely identifying a user in a POSIX administrative domain
        """
        pulumi.set(__self__, "gecos", gecos)
        pulumi.set(__self__, "gid_number", gid_number)
        pulumi.set(__self__, "home_directory", home_directory)
        pulumi.set(__self__, "login_shell", login_shell)
        pulumi.set(__self__, "uid_number", uid_number)

    @property
    @pulumi.getter
    def gecos(self) -> str:
        """
        General information about the POSIX account such as their real name and phone number
        """
        return pulumi.get(self, "gecos")

    @property
    @pulumi.getter(name="gidNumber")
    def gid_number(self) -> int:
        """
        Primary Group identifier of the POSIX user
        """
        return pulumi.get(self, "gid_number")

    @property
    @pulumi.getter(name="homeDirectory")
    def home_directory(self) -> str:
        """
        The absolute path to the home directory of the POSIX account
        """
        return pulumi.get(self, "home_directory")

    @property
    @pulumi.getter(name="loginShell")
    def login_shell(self) -> str:
        """
        The path to the login shell of the POSIX account
        """
        return pulumi.get(self, "login_shell")

    @property
    @pulumi.getter(name="uidNumber")
    def uid_number(self) -> int:
        """
        Integer uniquely identifying a user in a POSIX administrative domain
        """
        return pulumi.get(self, "uid_number")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUserResult(dict):
    def __init__(__self__, *,
                 sec_questions: Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUserSecQuestionResult']):
        """
        :param Sequence['GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUserSecQuestionArgs'] sec_questions: Security question and answers provided by end-user for Account recovery and/or MFA. While setting up security questions, end-user can also provide hint along with answer.
        """
        pulumi.set(__self__, "sec_questions", sec_questions)

    @property
    @pulumi.getter(name="secQuestions")
    def sec_questions(self) -> Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUserSecQuestionResult']:
        """
        Security question and answers provided by end-user for Account recovery and/or MFA. While setting up security questions, end-user can also provide hint along with answer.
        """
        return pulumi.get(self, "sec_questions")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUserSecQuestionResult(dict):
    def __init__(__self__, *,
                 answer: str,
                 hint_text: str,
                 ref: str,
                 value: str):
        """
        :param str answer: Answer provided by an user for a security question.
        :param str hint_text: Hint for an answer given by user while setting up Security Question.
        :param str ref: User Token URI
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "answer", answer)
        pulumi.set(__self__, "hint_text", hint_text)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def answer(self) -> str:
        """
        Answer provided by an user for a security question.
        """
        return pulumi.get(self, "answer")

    @property
    @pulumi.getter(name="hintText")
    def hint_text(self) -> str:
        """
        Hint for an answer given by user while setting up Security Question.
        """
        return pulumi.get(self, "hint_text")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        User Token URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult(dict):
    def __init__(__self__, *,
                 allow_self_change: bool):
        """
        :param bool allow_self_change: If true, allows requesting user to update themselves. If false, requesting user can't update themself (default).
        """
        pulumi.set(__self__, "allow_self_change", allow_self_change)

    @property
    @pulumi.getter(name="allowSelfChange")
    def allow_self_change(self) -> bool:
        """
        If true, allows requesting user to update themselves. If false, requesting user can't update themself (default).
        """
        return pulumi.get(self, "allow_self_change")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionselfRegistrationUserResult(dict):
    def __init__(__self__, *,
                 consent_granted: bool,
                 self_registration_profiles: Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionselfRegistrationUserSelfRegistrationProfileResult'],
                 user_token: str):
        """
        :param bool consent_granted: A boolean value that indicates whether the consent is granted.
        :param Sequence['GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionselfRegistrationUserSelfRegistrationProfileArgs'] self_registration_profiles: Self registration profile used when user is self registered.
        :param str user_token: User token returned if userFlowControlledByExternalClient is true
        """
        pulumi.set(__self__, "consent_granted", consent_granted)
        pulumi.set(__self__, "self_registration_profiles", self_registration_profiles)
        pulumi.set(__self__, "user_token", user_token)

    @property
    @pulumi.getter(name="consentGranted")
    def consent_granted(self) -> bool:
        """
        A boolean value that indicates whether the consent is granted.
        """
        return pulumi.get(self, "consent_granted")

    @property
    @pulumi.getter(name="selfRegistrationProfiles")
    def self_registration_profiles(self) -> Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionselfRegistrationUserSelfRegistrationProfileResult']:
        """
        Self registration profile used when user is self registered.
        """
        return pulumi.get(self, "self_registration_profiles")

    @property
    @pulumi.getter(name="userToken")
    def user_token(self) -> str:
        """
        User token returned if userFlowControlledByExternalClient is true
        """
        return pulumi.get(self, "user_token")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionselfRegistrationUserSelfRegistrationProfileResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ref: str,
                 value: str):
        """
        :param str display: A human readable name, primarily used for display purposes.
        :param str ref: User Token URI
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        A human readable name, primarily used for display purposes.
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        User Token URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionsffUserResult(dict):
    def __init__(__self__, *,
                 sff_auth_keys: str):
        """
        :param str sff_auth_keys: SFF auth keys clob
        """
        pulumi.set(__self__, "sff_auth_keys", sff_auth_keys)

    @property
    @pulumi.getter(name="sffAuthKeys")
    def sff_auth_keys(self) -> str:
        """
        SFF auth keys clob
        """
        return pulumi.get(self, "sff_auth_keys")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionsocialAccountUserResult(dict):
    def __init__(__self__, *,
                 social_accounts: Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionsocialAccountUserSocialAccountResult']):
        """
        :param Sequence['GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionsocialAccountUserSocialAccountArgs'] social_accounts: Description:
        """
        pulumi.set(__self__, "social_accounts", social_accounts)

    @property
    @pulumi.getter(name="socialAccounts")
    def social_accounts(self) -> Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionsocialAccountUserSocialAccountResult']:
        """
        Description:
        """
        return pulumi.get(self, "social_accounts")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionsocialAccountUserSocialAccountResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ref: str,
                 value: str):
        """
        :param str display: A human readable name, primarily used for display purposes.
        :param str ref: User Token URI
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        A human readable name, primarily used for display purposes.
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        User Token URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensiontermsOfUseUserResult(dict):
    def __init__(__self__, *,
                 terms_of_use_consents: Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensiontermsOfUseUserTermsOfUseConsentResult']):
        """
        :param Sequence['GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensiontermsOfUseUserTermsOfUseConsentArgs'] terms_of_use_consents: Description:
        """
        pulumi.set(__self__, "terms_of_use_consents", terms_of_use_consents)

    @property
    @pulumi.getter(name="termsOfUseConsents")
    def terms_of_use_consents(self) -> Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensiontermsOfUseUserTermsOfUseConsentResult']:
        """
        Description:
        """
        return pulumi.get(self, "terms_of_use_consents")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensiontermsOfUseUserTermsOfUseConsentResult(dict):
    def __init__(__self__, *,
                 ref: str,
                 value: str):
        """
        :param str ref: User Token URI
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        User Token URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserResult(dict):
    def __init__(__self__, *,
                 api_keys: Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserApiKeyResult'],
                 auth_tokens: Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserAuthTokenResult'],
                 customer_secret_keys: Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserCustomerSecretKeyResult'],
                 db_credentials: Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserDbCredentialResult'],
                 o_auth2client_credentials: Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserOAuth2clientCredentialResult'],
                 smtp_credentials: Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserSmtpCredentialResult']):
        """
        :param Sequence['GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserApiKeyArgs'] api_keys: A list of api keys corresponding to user.
        :param Sequence['GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserAuthTokenArgs'] auth_tokens: A list of auth tokens corresponding to user.
        :param Sequence['GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserCustomerSecretKeyArgs'] customer_secret_keys: A list of customer secret keys corresponding to user.
        :param Sequence['GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserDbCredentialArgs'] db_credentials: A list of db credentials corresponding to user.
        :param Sequence['GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserOAuth2clientCredentialArgs'] o_auth2client_credentials: A list of oauth2 client credentials corresponding to user.
        :param Sequence['GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserSmtpCredentialArgs'] smtp_credentials: A list of smtp credentials corresponding to user.
        """
        pulumi.set(__self__, "api_keys", api_keys)
        pulumi.set(__self__, "auth_tokens", auth_tokens)
        pulumi.set(__self__, "customer_secret_keys", customer_secret_keys)
        pulumi.set(__self__, "db_credentials", db_credentials)
        pulumi.set(__self__, "o_auth2client_credentials", o_auth2client_credentials)
        pulumi.set(__self__, "smtp_credentials", smtp_credentials)

    @property
    @pulumi.getter(name="apiKeys")
    def api_keys(self) -> Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserApiKeyResult']:
        """
        A list of api keys corresponding to user.
        """
        return pulumi.get(self, "api_keys")

    @property
    @pulumi.getter(name="authTokens")
    def auth_tokens(self) -> Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserAuthTokenResult']:
        """
        A list of auth tokens corresponding to user.
        """
        return pulumi.get(self, "auth_tokens")

    @property
    @pulumi.getter(name="customerSecretKeys")
    def customer_secret_keys(self) -> Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserCustomerSecretKeyResult']:
        """
        A list of customer secret keys corresponding to user.
        """
        return pulumi.get(self, "customer_secret_keys")

    @property
    @pulumi.getter(name="dbCredentials")
    def db_credentials(self) -> Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserDbCredentialResult']:
        """
        A list of db credentials corresponding to user.
        """
        return pulumi.get(self, "db_credentials")

    @property
    @pulumi.getter(name="oAuth2clientCredentials")
    def o_auth2client_credentials(self) -> Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserOAuth2clientCredentialResult']:
        """
        A list of oauth2 client credentials corresponding to user.
        """
        return pulumi.get(self, "o_auth2client_credentials")

    @property
    @pulumi.getter(name="smtpCredentials")
    def smtp_credentials(self) -> Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserSmtpCredentialResult']:
        """
        A list of smtp credentials corresponding to user.
        """
        return pulumi.get(self, "smtp_credentials")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserApiKeyResult(dict):
    def __init__(__self__, *,
                 key: str,
                 ocid: str,
                 ref: str,
                 value: str):
        """
        :param str key: The value of of the User's api key.
        :param str ocid: Ocid of the User's Support Account.
        :param str ref: User Token URI
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The value of of the User's api key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Ocid of the User's Support Account.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        User Token URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserAuthTokenResult(dict):
    def __init__(__self__, *,
                 ocid: str,
                 ref: str,
                 value: str):
        """
        :param str ocid: Ocid of the User's Support Account.
        :param str ref: User Token URI
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Ocid of the User's Support Account.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        User Token URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserCustomerSecretKeyResult(dict):
    def __init__(__self__, *,
                 ocid: str,
                 ref: str,
                 value: str):
        """
        :param str ocid: Ocid of the User's Support Account.
        :param str ref: User Token URI
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Ocid of the User's Support Account.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        User Token URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserDbCredentialResult(dict):
    def __init__(__self__, *,
                 ocid: str,
                 ref: str,
                 value: str):
        """
        :param str ocid: Ocid of the User's Support Account.
        :param str ref: User Token URI
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Ocid of the User's Support Account.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        User Token URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserOAuth2clientCredentialResult(dict):
    def __init__(__self__, *,
                 ocid: str,
                 ref: str,
                 value: str):
        """
        :param str ocid: Ocid of the User's Support Account.
        :param str ref: User Token URI
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Ocid of the User's Support Account.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        User Token URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserSmtpCredentialResult(dict):
    def __init__(__self__, *,
                 ocid: str,
                 ref: str,
                 value: str):
        """
        :param str ocid: Ocid of the User's Support Account.
        :param str ref: User Token URI
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Ocid of the User's Support Account.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        User Token URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserResult(dict):
    def __init__(__self__, *,
                 last_failed_login_date: str,
                 last_successful_login_date: str,
                 lockeds: Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLockedResult'],
                 login_attempts: int,
                 max_concurrent_sessions: int,
                 previous_successful_login_date: str,
                 recovery_attempts: int,
                 recovery_enroll_attempts: int,
                 recovery_lockeds: Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserRecoveryLockedResult']):
        """
        :param str last_failed_login_date: The last failed login date
        :param str last_successful_login_date: The last successful login date
        :param Sequence['GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLockedArgs'] lockeds: A complex attribute that indicates an account is locked (blocking new sessions)
        :param int login_attempts: The number of failed login attempts. The value is reset to 0 after a successful login.
        :param int max_concurrent_sessions: Maximum number of concurrent sessions for a User
        :param str previous_successful_login_date: The previous successful login date
        :param int recovery_attempts: The number of failed recovery attempts. The value is reset to 0 after a successful login.
        :param int recovery_enroll_attempts: The number of failed account recovery enrollment attempts.
        :param Sequence['GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserRecoveryLockedArgs'] recovery_lockeds: A complex attribute that indicates an password recovery is locked (blocking new sessions)
        """
        pulumi.set(__self__, "last_failed_login_date", last_failed_login_date)
        pulumi.set(__self__, "last_successful_login_date", last_successful_login_date)
        pulumi.set(__self__, "lockeds", lockeds)
        pulumi.set(__self__, "login_attempts", login_attempts)
        pulumi.set(__self__, "max_concurrent_sessions", max_concurrent_sessions)
        pulumi.set(__self__, "previous_successful_login_date", previous_successful_login_date)
        pulumi.set(__self__, "recovery_attempts", recovery_attempts)
        pulumi.set(__self__, "recovery_enroll_attempts", recovery_enroll_attempts)
        pulumi.set(__self__, "recovery_lockeds", recovery_lockeds)

    @property
    @pulumi.getter(name="lastFailedLoginDate")
    def last_failed_login_date(self) -> str:
        """
        The last failed login date
        """
        return pulumi.get(self, "last_failed_login_date")

    @property
    @pulumi.getter(name="lastSuccessfulLoginDate")
    def last_successful_login_date(self) -> str:
        """
        The last successful login date
        """
        return pulumi.get(self, "last_successful_login_date")

    @property
    @pulumi.getter
    def lockeds(self) -> Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLockedResult']:
        """
        A complex attribute that indicates an account is locked (blocking new sessions)
        """
        return pulumi.get(self, "lockeds")

    @property
    @pulumi.getter(name="loginAttempts")
    def login_attempts(self) -> int:
        """
        The number of failed login attempts. The value is reset to 0 after a successful login.
        """
        return pulumi.get(self, "login_attempts")

    @property
    @pulumi.getter(name="maxConcurrentSessions")
    def max_concurrent_sessions(self) -> int:
        """
        Maximum number of concurrent sessions for a User
        """
        return pulumi.get(self, "max_concurrent_sessions")

    @property
    @pulumi.getter(name="previousSuccessfulLoginDate")
    def previous_successful_login_date(self) -> str:
        """
        The previous successful login date
        """
        return pulumi.get(self, "previous_successful_login_date")

    @property
    @pulumi.getter(name="recoveryAttempts")
    def recovery_attempts(self) -> int:
        """
        The number of failed recovery attempts. The value is reset to 0 after a successful login.
        """
        return pulumi.get(self, "recovery_attempts")

    @property
    @pulumi.getter(name="recoveryEnrollAttempts")
    def recovery_enroll_attempts(self) -> int:
        """
        The number of failed account recovery enrollment attempts.
        """
        return pulumi.get(self, "recovery_enroll_attempts")

    @property
    @pulumi.getter(name="recoveryLockeds")
    def recovery_lockeds(self) -> Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserRecoveryLockedResult']:
        """
        A complex attribute that indicates an password recovery is locked (blocking new sessions)
        """
        return pulumi.get(self, "recovery_lockeds")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLockedResult(dict):
    def __init__(__self__, *,
                 expired: bool,
                 lock_date: str,
                 on: bool,
                 reason: int):
        """
        :param bool expired: Indicates whether user password is expired. If this value is false, password expiry will still be evaluated during user login.
        :param str lock_date: The date and time that the current resource was locked
        :param bool on: Indicates that the rev is locked
        :param int reason: Indicates the reason for locking. Valid values are: 0 - failed password login attempts, 1 - admin lock, 2 - failed reset password attempts, 3 - failed MFA login attempts, 4 - failed MFA login attempts for federated user, 5 - failed Database login attempts
        """
        pulumi.set(__self__, "expired", expired)
        pulumi.set(__self__, "lock_date", lock_date)
        pulumi.set(__self__, "on", on)
        pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def expired(self) -> bool:
        """
        Indicates whether user password is expired. If this value is false, password expiry will still be evaluated during user login.
        """
        return pulumi.get(self, "expired")

    @property
    @pulumi.getter(name="lockDate")
    def lock_date(self) -> str:
        """
        The date and time that the current resource was locked
        """
        return pulumi.get(self, "lock_date")

    @property
    @pulumi.getter
    def on(self) -> bool:
        """
        Indicates that the rev is locked
        """
        return pulumi.get(self, "on")

    @property
    @pulumi.getter
    def reason(self) -> int:
        """
        Indicates the reason for locking. Valid values are: 0 - failed password login attempts, 1 - admin lock, 2 - failed reset password attempts, 3 - failed MFA login attempts, 4 - failed MFA login attempts for federated user, 5 - failed Database login attempts
        """
        return pulumi.get(self, "reason")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserRecoveryLockedResult(dict):
    def __init__(__self__, *,
                 lock_date: str,
                 on: bool):
        """
        :param str lock_date: The date and time that the current resource was locked
        :param bool on: Indicates that the rev is locked
        """
        pulumi.set(__self__, "lock_date", lock_date)
        pulumi.set(__self__, "on", on)

    @property
    @pulumi.getter(name="lockDate")
    def lock_date(self) -> str:
        """
        The date and time that the current resource was locked
        """
        return pulumi.get(self, "lock_date")

    @property
    @pulumi.getter
    def on(self) -> bool:
        """
        Indicates that the rev is locked
        """
        return pulumi.get(self, "on")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserResult(dict):
    def __init__(__self__, *,
                 account_recovery_required: bool,
                 accounts: Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserAccountResult'],
                 app_roles: Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserAppRoleResult'],
                 applicable_authentication_target_apps: Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserApplicableAuthenticationTargetAppResult'],
                 bypass_notification: bool,
                 creation_mechanism: str,
                 delegated_authentication_target_apps: Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserDelegatedAuthenticationTargetAppResult'],
                 do_not_show_getting_started: bool,
                 grants: Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserGrantResult'],
                 idcs_app_roles_limited_to_groups: Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserIdcsAppRolesLimitedToGroupResult'],
                 is_account_recovery_enrolled: bool,
                 is_authentication_delegated: bool,
                 is_federated_user: bool,
                 is_group_membership_normalized: bool,
                 is_group_membership_synced_to_users_groups: bool,
                 notification_email_template_id: str,
                 status: str,
                 support_accounts: Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserSupportAccountResult'],
                 synced_from_apps: Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserSyncedFromAppResult'],
                 user_flow_controlled_by_external_client: bool,
                 user_provider: str,
                 user_tokens: Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserUserTokenResult']):
        """
        :param bool account_recovery_required: Boolean value to prompt user to setup account recovery during login.
        :param Sequence['GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserAccountArgs'] accounts: Accounts assigned to this User. Each value of this attribute refers to an app-specific identity that is owned by this User. Therefore, this attribute is a convenience that allows one to see on each User the Apps to which that User has access.
        :param Sequence['GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserAppRoleArgs'] app_roles: A list of all AppRoles to which this User belongs directly, indirectly or implicitly. The User could belong directly because the User is a member of the AppRole, could belong indirectly because the User is a member of a Group that is a member of the AppRole, or could belong implicitly because the AppRole is public.
        :param Sequence['GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserApplicableAuthenticationTargetAppArgs'] applicable_authentication_target_apps: The app against which the user will authenticate. The value is not persisted but rather calculated. If the user's delegatedAuthenticationTargetApp is set, that value is returned. Otherwise, the app returned by evaluating the user's applicable Delegated Authentication Policy is returned.
        :param bool bypass_notification: A Boolean value indicating whether or not to send email notification after creating the user. This attribute is not used in update/replace operations.
        :param str creation_mechanism: User creation mechanism
        :param Sequence['GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserDelegatedAuthenticationTargetAppArgs'] delegated_authentication_target_apps: If set, indicates the user's preferred authentication target app. If not set and the user's \\"syncedFromApp\\" is set and is enabled for delegated authentication, it is used. Otherwise, the user authenticates locally to Oracle Cloud Infrastructure IAM.
        :param bool do_not_show_getting_started: A Boolean value indicating whether or not to hide the getting started page
        :param Sequence['GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserGrantArgs'] grants: Grants to this User. Each value of this attribute refers to a Grant to this User of some App (and optionally of some entitlement). Therefore, this attribute is a convenience that allows one to see on each User all of the Grants to that User.
        :param Sequence['GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserIdcsAppRolesLimitedToGroupArgs'] idcs_app_roles_limited_to_groups: Description:
        :param bool is_account_recovery_enrolled: A Boolean value indicating whether or not a user is enrolled for account recovery
        :param bool is_authentication_delegated: A Boolean value indicating whether or not authentication request by this user should be delegated to a remote app. This value should be true only when the User was originally synced from an app which is enabled for delegated authentication
        :param bool is_federated_user: A Boolean value indicating whether or not the user is federated.
        :param bool is_group_membership_normalized: A Boolean value indicating whether or not group membership is normalized for this user.
        :param bool is_group_membership_synced_to_users_groups: A Boolean value Indicates whether this User's group membership has been sync'ed from Group.members to UsersGroups.
        :param str notification_email_template_id: Specifies the EmailTemplate to be used when sending notification to the user this request is for. If specified, it overrides the default EmailTemplate for this event.
        :param str status: A supplemental status indicating the reason why a user is disabled
        :param Sequence['GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserSupportAccountArgs'] support_accounts: A list of Support Accounts corresponding to user.
        :param Sequence['GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserSyncedFromAppArgs'] synced_from_apps: Managed App or an Identity Source from where the user is synced. If enabled, this Managed App or Identity Source can be used for performing delegated authentication.
        :param bool user_flow_controlled_by_external_client: A Boolean value indicating whether to bypass notification and return user token to be used by an external client to control the user flow.
        :param str user_provider: User Support Account Provider
        :param Sequence['GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserUserTokenArgs'] user_tokens: User token returned if userFlowControlledByExternalClient is true
        """
        pulumi.set(__self__, "account_recovery_required", account_recovery_required)
        pulumi.set(__self__, "accounts", accounts)
        pulumi.set(__self__, "app_roles", app_roles)
        pulumi.set(__self__, "applicable_authentication_target_apps", applicable_authentication_target_apps)
        pulumi.set(__self__, "bypass_notification", bypass_notification)
        pulumi.set(__self__, "creation_mechanism", creation_mechanism)
        pulumi.set(__self__, "delegated_authentication_target_apps", delegated_authentication_target_apps)
        pulumi.set(__self__, "do_not_show_getting_started", do_not_show_getting_started)
        pulumi.set(__self__, "grants", grants)
        pulumi.set(__self__, "idcs_app_roles_limited_to_groups", idcs_app_roles_limited_to_groups)
        pulumi.set(__self__, "is_account_recovery_enrolled", is_account_recovery_enrolled)
        pulumi.set(__self__, "is_authentication_delegated", is_authentication_delegated)
        pulumi.set(__self__, "is_federated_user", is_federated_user)
        pulumi.set(__self__, "is_group_membership_normalized", is_group_membership_normalized)
        pulumi.set(__self__, "is_group_membership_synced_to_users_groups", is_group_membership_synced_to_users_groups)
        pulumi.set(__self__, "notification_email_template_id", notification_email_template_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "support_accounts", support_accounts)
        pulumi.set(__self__, "synced_from_apps", synced_from_apps)
        pulumi.set(__self__, "user_flow_controlled_by_external_client", user_flow_controlled_by_external_client)
        pulumi.set(__self__, "user_provider", user_provider)
        pulumi.set(__self__, "user_tokens", user_tokens)

    @property
    @pulumi.getter(name="accountRecoveryRequired")
    def account_recovery_required(self) -> bool:
        """
        Boolean value to prompt user to setup account recovery during login.
        """
        return pulumi.get(self, "account_recovery_required")

    @property
    @pulumi.getter
    def accounts(self) -> Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserAccountResult']:
        """
        Accounts assigned to this User. Each value of this attribute refers to an app-specific identity that is owned by this User. Therefore, this attribute is a convenience that allows one to see on each User the Apps to which that User has access.
        """
        return pulumi.get(self, "accounts")

    @property
    @pulumi.getter(name="appRoles")
    def app_roles(self) -> Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserAppRoleResult']:
        """
        A list of all AppRoles to which this User belongs directly, indirectly or implicitly. The User could belong directly because the User is a member of the AppRole, could belong indirectly because the User is a member of a Group that is a member of the AppRole, or could belong implicitly because the AppRole is public.
        """
        return pulumi.get(self, "app_roles")

    @property
    @pulumi.getter(name="applicableAuthenticationTargetApps")
    def applicable_authentication_target_apps(self) -> Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserApplicableAuthenticationTargetAppResult']:
        """
        The app against which the user will authenticate. The value is not persisted but rather calculated. If the user's delegatedAuthenticationTargetApp is set, that value is returned. Otherwise, the app returned by evaluating the user's applicable Delegated Authentication Policy is returned.
        """
        return pulumi.get(self, "applicable_authentication_target_apps")

    @property
    @pulumi.getter(name="bypassNotification")
    def bypass_notification(self) -> bool:
        """
        A Boolean value indicating whether or not to send email notification after creating the user. This attribute is not used in update/replace operations.
        """
        return pulumi.get(self, "bypass_notification")

    @property
    @pulumi.getter(name="creationMechanism")
    def creation_mechanism(self) -> str:
        """
        User creation mechanism
        """
        return pulumi.get(self, "creation_mechanism")

    @property
    @pulumi.getter(name="delegatedAuthenticationTargetApps")
    def delegated_authentication_target_apps(self) -> Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserDelegatedAuthenticationTargetAppResult']:
        """
        If set, indicates the user's preferred authentication target app. If not set and the user's \\"syncedFromApp\\" is set and is enabled for delegated authentication, it is used. Otherwise, the user authenticates locally to Oracle Cloud Infrastructure IAM.
        """
        return pulumi.get(self, "delegated_authentication_target_apps")

    @property
    @pulumi.getter(name="doNotShowGettingStarted")
    def do_not_show_getting_started(self) -> bool:
        """
        A Boolean value indicating whether or not to hide the getting started page
        """
        return pulumi.get(self, "do_not_show_getting_started")

    @property
    @pulumi.getter
    def grants(self) -> Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserGrantResult']:
        """
        Grants to this User. Each value of this attribute refers to a Grant to this User of some App (and optionally of some entitlement). Therefore, this attribute is a convenience that allows one to see on each User all of the Grants to that User.
        """
        return pulumi.get(self, "grants")

    @property
    @pulumi.getter(name="idcsAppRolesLimitedToGroups")
    def idcs_app_roles_limited_to_groups(self) -> Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserIdcsAppRolesLimitedToGroupResult']:
        """
        Description:
        """
        return pulumi.get(self, "idcs_app_roles_limited_to_groups")

    @property
    @pulumi.getter(name="isAccountRecoveryEnrolled")
    def is_account_recovery_enrolled(self) -> bool:
        """
        A Boolean value indicating whether or not a user is enrolled for account recovery
        """
        return pulumi.get(self, "is_account_recovery_enrolled")

    @property
    @pulumi.getter(name="isAuthenticationDelegated")
    def is_authentication_delegated(self) -> bool:
        """
        A Boolean value indicating whether or not authentication request by this user should be delegated to a remote app. This value should be true only when the User was originally synced from an app which is enabled for delegated authentication
        """
        return pulumi.get(self, "is_authentication_delegated")

    @property
    @pulumi.getter(name="isFederatedUser")
    def is_federated_user(self) -> bool:
        """
        A Boolean value indicating whether or not the user is federated.
        """
        return pulumi.get(self, "is_federated_user")

    @property
    @pulumi.getter(name="isGroupMembershipNormalized")
    def is_group_membership_normalized(self) -> bool:
        """
        A Boolean value indicating whether or not group membership is normalized for this user.
        """
        return pulumi.get(self, "is_group_membership_normalized")

    @property
    @pulumi.getter(name="isGroupMembershipSyncedToUsersGroups")
    def is_group_membership_synced_to_users_groups(self) -> bool:
        """
        A Boolean value Indicates whether this User's group membership has been sync'ed from Group.members to UsersGroups.
        """
        return pulumi.get(self, "is_group_membership_synced_to_users_groups")

    @property
    @pulumi.getter(name="notificationEmailTemplateId")
    def notification_email_template_id(self) -> str:
        """
        Specifies the EmailTemplate to be used when sending notification to the user this request is for. If specified, it overrides the default EmailTemplate for this event.
        """
        return pulumi.get(self, "notification_email_template_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        A supplemental status indicating the reason why a user is disabled
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="supportAccounts")
    def support_accounts(self) -> Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserSupportAccountResult']:
        """
        A list of Support Accounts corresponding to user.
        """
        return pulumi.get(self, "support_accounts")

    @property
    @pulumi.getter(name="syncedFromApps")
    def synced_from_apps(self) -> Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserSyncedFromAppResult']:
        """
        Managed App or an Identity Source from where the user is synced. If enabled, this Managed App or Identity Source can be used for performing delegated authentication.
        """
        return pulumi.get(self, "synced_from_apps")

    @property
    @pulumi.getter(name="userFlowControlledByExternalClient")
    def user_flow_controlled_by_external_client(self) -> bool:
        """
        A Boolean value indicating whether to bypass notification and return user token to be used by an external client to control the user flow.
        """
        return pulumi.get(self, "user_flow_controlled_by_external_client")

    @property
    @pulumi.getter(name="userProvider")
    def user_provider(self) -> str:
        """
        User Support Account Provider
        """
        return pulumi.get(self, "user_provider")

    @property
    @pulumi.getter(name="userTokens")
    def user_tokens(self) -> Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserUserTokenResult']:
        """
        User token returned if userFlowControlledByExternalClient is true
        """
        return pulumi.get(self, "user_tokens")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserAccountResult(dict):
    def __init__(__self__, *,
                 active: bool,
                 app_id: str,
                 name: str,
                 ref: str,
                 value: str):
        """
        :param bool active: Status of the account
        :param str app_id: The ID of the App in this Grant.
        :param str name: Name of the account assigned to the User.
        :param str ref: User Token URI
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def active(self) -> bool:
        """
        Status of the account
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> str:
        """
        The ID of the App in this Grant.
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the account assigned to the User.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        User Token URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserAppRoleResult(dict):
    def __init__(__self__, *,
                 admin_role: bool,
                 app_id: str,
                 app_name: str,
                 display: str,
                 legacy_group_name: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param bool admin_role: If true, then the role provides administrative access privileges. READ-ONLY.
        :param str app_id: The ID of the App in this Grant.
        :param str app_name: The name (Client ID) of the App that defines this AppRole.
        :param str display: A human readable name, primarily used for display purposes.
        :param str legacy_group_name: The name (if any) under which this AppRole should appear in this User's group-memberships for reasons of backward compatibility. Oracle Cloud Infrastructure IAM distinguishes between Groups and AppRoles, but some services still expect AppRoles appear as if they were service-instance-specific Groups.
        :param str ref: User Token URI
        :param str type: A label indicating the attribute's function.
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "admin_role", admin_role)
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "app_name", app_name)
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "legacy_group_name", legacy_group_name)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="adminRole")
    def admin_role(self) -> bool:
        """
        If true, then the role provides administrative access privileges. READ-ONLY.
        """
        return pulumi.get(self, "admin_role")

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> str:
        """
        The ID of the App in this Grant.
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="appName")
    def app_name(self) -> str:
        """
        The name (Client ID) of the App that defines this AppRole.
        """
        return pulumi.get(self, "app_name")

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        A human readable name, primarily used for display purposes.
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter(name="legacyGroupName")
    def legacy_group_name(self) -> str:
        """
        The name (if any) under which this AppRole should appear in this User's group-memberships for reasons of backward compatibility. Oracle Cloud Infrastructure IAM distinguishes between Groups and AppRoles, but some services still expect AppRoles appear as if they were service-instance-specific Groups.
        """
        return pulumi.get(self, "legacy_group_name")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        User Token URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        A label indicating the attribute's function.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserApplicableAuthenticationTargetAppResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ref: str,
                 target_request_timeout: int,
                 type: str,
                 value: str):
        """
        :param str display: A human readable name, primarily used for display purposes.
        :param str ref: User Token URI
        :param int target_request_timeout: Timeout interval for Synchronization TargetAction in milliseconds
        :param str type: A label indicating the attribute's function.
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "target_request_timeout", target_request_timeout)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        A human readable name, primarily used for display purposes.
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        User Token URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="targetRequestTimeout")
    def target_request_timeout(self) -> int:
        """
        Timeout interval for Synchronization TargetAction in milliseconds
        """
        return pulumi.get(self, "target_request_timeout")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        A label indicating the attribute's function.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserDelegatedAuthenticationTargetAppResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: A human readable name, primarily used for display purposes.
        :param str ref: User Token URI
        :param str type: A label indicating the attribute's function.
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        A human readable name, primarily used for display purposes.
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        User Token URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        A label indicating the attribute's function.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserGrantResult(dict):
    def __init__(__self__, *,
                 app_id: str,
                 grant_mechanism: str,
                 grantor_id: str,
                 ref: str,
                 value: str):
        """
        :param str app_id: The ID of the App in this Grant.
        :param str grant_mechanism: Each value of grantMechanism indicates how (or by what component) some App (or App-Entitlement) was granted.\\nA customer or the UI should use only grantMechanism values that start with 'ADMINISTRATOR':\\n - 'ADMINISTRATOR_TO_USER' is for a direct grant to a specific User.\\n - 'ADMINISTRATOR_TO_GROUP' is for a grant to a specific Group, which results in indirect grants to Users who are members of that Group.\\n - 'ADMINISTRATOR_TO_APP' is for a grant to a specific App.  The grantee (client) App gains access to the granted (server) App.
        :param str grantor_id: Grantor identifier
        :param str ref: User Token URI
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "grant_mechanism", grant_mechanism)
        pulumi.set(__self__, "grantor_id", grantor_id)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> str:
        """
        The ID of the App in this Grant.
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="grantMechanism")
    def grant_mechanism(self) -> str:
        """
        Each value of grantMechanism indicates how (or by what component) some App (or App-Entitlement) was granted.\\nA customer or the UI should use only grantMechanism values that start with 'ADMINISTRATOR':\\n - 'ADMINISTRATOR_TO_USER' is for a direct grant to a specific User.\\n - 'ADMINISTRATOR_TO_GROUP' is for a grant to a specific Group, which results in indirect grants to Users who are members of that Group.\\n - 'ADMINISTRATOR_TO_APP' is for a grant to a specific App.  The grantee (client) App gains access to the granted (server) App.
        """
        return pulumi.get(self, "grant_mechanism")

    @property
    @pulumi.getter(name="grantorId")
    def grantor_id(self) -> str:
        """
        Grantor identifier
        """
        return pulumi.get(self, "grantor_id")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        User Token URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserIdcsAppRolesLimitedToGroupResult(dict):
    def __init__(__self__, *,
                 display: str,
                 idcs_app_role_id: str,
                 ocid: str,
                 ref: str,
                 value: str):
        """
        :param str display: A human readable name, primarily used for display purposes.
        :param str idcs_app_role_id: The id of the Oracle Cloud Infrastructure IAM AppRole grant limited to one or more Groups.
        :param str ocid: Ocid of the User's Support Account.
        :param str ref: User Token URI
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "idcs_app_role_id", idcs_app_role_id)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        A human readable name, primarily used for display purposes.
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter(name="idcsAppRoleId")
    def idcs_app_role_id(self) -> str:
        """
        The id of the Oracle Cloud Infrastructure IAM AppRole grant limited to one or more Groups.
        """
        return pulumi.get(self, "idcs_app_role_id")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Ocid of the User's Support Account.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        User Token URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserSupportAccountResult(dict):
    def __init__(__self__, *,
                 ocid: str,
                 ref: str,
                 user_id: str,
                 user_provider: str,
                 value: str):
        """
        :param str ocid: Ocid of the User's Support Account.
        :param str ref: User Token URI
        :param str user_id: User Support User Id
        :param str user_provider: User Support Account Provider
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "user_id", user_id)
        pulumi.set(__self__, "user_provider", user_provider)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Ocid of the User's Support Account.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        User Token URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> str:
        """
        User Support User Id
        """
        return pulumi.get(self, "user_id")

    @property
    @pulumi.getter(name="userProvider")
    def user_provider(self) -> str:
        """
        User Support Account Provider
        """
        return pulumi.get(self, "user_provider")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserSyncedFromAppResult(dict):
    def __init__(__self__, *,
                 display: str,
                 ref: str,
                 type: str,
                 value: str):
        """
        :param str display: A human readable name, primarily used for display purposes.
        :param str ref: User Token URI
        :param str type: A label indicating the attribute's function.
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        A human readable name, primarily used for display purposes.
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        User Token URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        A label indicating the attribute's function.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserUserTokenResult(dict):
    def __init__(__self__, *,
                 ref: str,
                 value: str):
        """
        :param str ref: User Token URI
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        User Token URI
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserX509certificateResult(dict):
    def __init__(__self__, *,
                 display: str,
                 primary: bool,
                 type: str,
                 value: str):
        """
        :param str display: A human readable name, primarily used for display purposes.
        :param bool primary: A Boolean value indicating the 'primary' or preferred attribute value for this attribute. The primary attribute value 'true' MUST appear no more than once.
        :param str type: A label indicating the attribute's function.
        :param str value: The value of a X509 certificate.
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "primary", primary)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        A human readable name, primarily used for display purposes.
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def primary(self) -> bool:
        """
        A Boolean value indicating the 'primary' or preferred attribute value for this attribute. The primary attribute value 'true' MUST appear no more than once.
        """
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        A label indicating the attribute's function.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of a X509 certificate.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDynamicGroupsDynamicGroupResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 defined_tags: Mapping[str, Any],
                 description: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 inactive_state: str,
                 matching_rule: str,
                 name: str,
                 state: str,
                 time_created: str):
        """
        :param str compartment_id: The OCID of the compartment (remember that the tenancy is simply the root compartment).
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param str description: The description you assign to the group. Does not have to be unique, and it's changeable.
        :param Mapping[str, Any] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param str id: The OCID of the group.
        :param str inactive_state: The detailed status of INACTIVE lifecycleState.
        :param str matching_rule: A rule string that defines which instance certificates will be matched. For syntax, see [Managing Dynamic Groups](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingdynamicgroups.htm).
        :param str name: A filter to only return resources that match the given name exactly.
        :param str state: A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
        :param str time_created: Date and time the group was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "inactive_state", inactive_state)
        pulumi.set(__self__, "matching_rule", matching_rule)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The OCID of the compartment (remember that the tenancy is simply the root compartment).
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description you assign to the group. Does not have to be unique, and it's changeable.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The OCID of the group.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inactiveState")
    def inactive_state(self) -> str:
        """
        The detailed status of INACTIVE lifecycleState.
        """
        return pulumi.get(self, "inactive_state")

    @property
    @pulumi.getter(name="matchingRule")
    def matching_rule(self) -> str:
        """
        A rule string that defines which instance certificates will be matched. For syntax, see [Managing Dynamic Groups](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingdynamicgroups.htm).
        """
        return pulumi.get(self, "matching_rule")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to only return resources that match the given name exactly.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        Date and time the group was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetDynamicGroupsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: A filter to only return resources that match the given name exactly.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to only return resources that match the given name exactly.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetFaultDomainsFaultDomainResult(dict):
    def __init__(__self__, *,
                 availability_domain: str,
                 compartment_id: str,
                 id: str,
                 name: str):
        """
        :param str availability_domain: The name of the availibilityDomain.
        :param str compartment_id: The OCID of the compartment (remember that the tenancy is simply the root compartment).
        :param str id: The OCID of the Fault Domain.
        :param str name: The name of the Fault Domain.
        """
        pulumi.set(__self__, "availability_domain", availability_domain)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> str:
        """
        The name of the availibilityDomain.
        """
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The OCID of the compartment (remember that the tenancy is simply the root compartment).
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The OCID of the Fault Domain.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Fault Domain.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFaultDomainsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: The name of the Fault Domain.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Fault Domain.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetGroupsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: A filter to only return resources that match the given name exactly.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to only return resources that match the given name exactly.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetGroupsGroupResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 defined_tags: Mapping[str, Any],
                 description: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 inactive_state: str,
                 name: str,
                 state: str,
                 time_created: str):
        """
        :param str compartment_id: The OCID of the compartment (remember that the tenancy is simply the root compartment).
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param str description: The description you assign to the group. Does not have to be unique, and it's changeable.
        :param Mapping[str, Any] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param str id: The OCID of the group.
        :param str inactive_state: The detailed status of INACTIVE lifecycleState.
        :param str name: A filter to only return resources that match the given name exactly.
        :param str state: A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
        :param str time_created: Date and time the group was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "inactive_state", inactive_state)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The OCID of the compartment (remember that the tenancy is simply the root compartment).
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description you assign to the group. Does not have to be unique, and it's changeable.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The OCID of the group.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inactiveState")
    def inactive_state(self) -> str:
        """
        The detailed status of INACTIVE lifecycleState.
        """
        return pulumi.get(self, "inactive_state")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to only return resources that match the given name exactly.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        Date and time the group was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetIamWorkRequestErrorsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetIamWorkRequestErrorsIamWorkRequestErrorResult(dict):
    def __init__(__self__, *,
                 code: str,
                 message: str,
                 timestamp: str):
        """
        :param str code: A machine-usable code for the error that occured.
        :param str message: A human-readable error string.
        :param str timestamp: The date and time the error occurred.
        """
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "timestamp", timestamp)

    @property
    @pulumi.getter
    def code(self) -> str:
        """
        A machine-usable code for the error that occured.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        A human-readable error string.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def timestamp(self) -> str:
        """
        The date and time the error occurred.
        """
        return pulumi.get(self, "timestamp")


@pulumi.output_type
class GetIamWorkRequestLogsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetIamWorkRequestLogsIamWorkRequestLogResult(dict):
    def __init__(__self__, *,
                 message: str,
                 timestamp: str):
        """
        :param str message: A human-readable error string.
        :param str timestamp: Date and time the log was written, in the format defined by RFC3339. Example: `2016-08-25T21:10:29.600Z`
        """
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "timestamp", timestamp)

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        A human-readable error string.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def timestamp(self) -> str:
        """
        Date and time the log was written, in the format defined by RFC3339. Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "timestamp")


@pulumi.output_type
class GetIamWorkRequestResourceResult(dict):
    def __init__(__self__, *,
                 action_type: str,
                 entity_type: str,
                 entity_uri: str,
                 identifier: str):
        """
        :param str action_type: The way in which this resource is affected by the work tracked in the work request. A resource being created, updated, or deleted will remain in the IN_PROGRESS state until work is complete for that resource at which point it will transition to CREATED, UPDATED, or DELETED, respectively.
        :param str entity_type: The resource type the work request is affects.
        :param str entity_uri: The URI path that the user can do a GET on to access the resource metadata.
        :param str identifier: An OCID of the resource that the work request affects.
        """
        pulumi.set(__self__, "action_type", action_type)
        pulumi.set(__self__, "entity_type", entity_type)
        pulumi.set(__self__, "entity_uri", entity_uri)
        pulumi.set(__self__, "identifier", identifier)

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> str:
        """
        The way in which this resource is affected by the work tracked in the work request. A resource being created, updated, or deleted will remain in the IN_PROGRESS state until work is complete for that resource at which point it will transition to CREATED, UPDATED, or DELETED, respectively.
        """
        return pulumi.get(self, "action_type")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        The resource type the work request is affects.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="entityUri")
    def entity_uri(self) -> str:
        """
        The URI path that the user can do a GET on to access the resource metadata.
        """
        return pulumi.get(self, "entity_uri")

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        An OCID of the resource that the work request affects.
        """
        return pulumi.get(self, "identifier")


@pulumi.output_type
class GetIamWorkRequestsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetIamWorkRequestsIamWorkRequestResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 id: str,
                 operation_type: str,
                 percent_complete: float,
                 resources: Sequence['outputs.GetIamWorkRequestsIamWorkRequestResourceResult'],
                 status: str,
                 time_accepted: str,
                 time_finished: str,
                 time_started: str):
        """
        :param str compartment_id: The OCID of the compartment (remember that the tenancy is simply the root compartment).
        :param str id: The OCID of the work request.
        :param str operation_type: The asynchronous operation tracked by this IAM work request.
        :param float percent_complete: How much progress the operation has made.
        :param Sequence['GetIamWorkRequestsIamWorkRequestResourceArgs'] resources: The resources this work request affects.
        :param str status: Status of the work request
        :param str time_accepted: Date and time the work was accepted, in the format defined by RFC3339. Example: `2016-08-25T21:10:29.600Z`
        :param str time_finished: Date and time the work completed, in the format defined by RFC3339. Example: `2016-08-25T21:10:29.600Z`
        :param str time_started: Date and time the work started, in the format defined by RFC3339. Example: `2016-08-25T21:10:29.600Z`
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "operation_type", operation_type)
        pulumi.set(__self__, "percent_complete", percent_complete)
        pulumi.set(__self__, "resources", resources)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "time_accepted", time_accepted)
        pulumi.set(__self__, "time_finished", time_finished)
        pulumi.set(__self__, "time_started", time_started)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The OCID of the compartment (remember that the tenancy is simply the root compartment).
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The OCID of the work request.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="operationType")
    def operation_type(self) -> str:
        """
        The asynchronous operation tracked by this IAM work request.
        """
        return pulumi.get(self, "operation_type")

    @property
    @pulumi.getter(name="percentComplete")
    def percent_complete(self) -> float:
        """
        How much progress the operation has made.
        """
        return pulumi.get(self, "percent_complete")

    @property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetIamWorkRequestsIamWorkRequestResourceResult']:
        """
        The resources this work request affects.
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of the work request
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="timeAccepted")
    def time_accepted(self) -> str:
        """
        Date and time the work was accepted, in the format defined by RFC3339. Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_accepted")

    @property
    @pulumi.getter(name="timeFinished")
    def time_finished(self) -> str:
        """
        Date and time the work completed, in the format defined by RFC3339. Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_finished")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> str:
        """
        Date and time the work started, in the format defined by RFC3339. Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_started")


@pulumi.output_type
class GetIamWorkRequestsIamWorkRequestResourceResult(dict):
    def __init__(__self__, *,
                 action_type: str,
                 entity_type: str,
                 entity_uri: str,
                 identifier: str):
        """
        :param str action_type: The way in which this resource is affected by the work tracked in the work request. A resource being created, updated, or deleted will remain in the IN_PROGRESS state until work is complete for that resource at which point it will transition to CREATED, UPDATED, or DELETED, respectively.
        :param str entity_type: The resource type the work request is affects.
        :param str entity_uri: The URI path that the user can do a GET on to access the resource metadata.
        :param str identifier: An OCID of the resource that the work request affects.
        """
        pulumi.set(__self__, "action_type", action_type)
        pulumi.set(__self__, "entity_type", entity_type)
        pulumi.set(__self__, "entity_uri", entity_uri)
        pulumi.set(__self__, "identifier", identifier)

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> str:
        """
        The way in which this resource is affected by the work tracked in the work request. A resource being created, updated, or deleted will remain in the IN_PROGRESS state until work is complete for that resource at which point it will transition to CREATED, UPDATED, or DELETED, respectively.
        """
        return pulumi.get(self, "action_type")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        The resource type the work request is affects.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="entityUri")
    def entity_uri(self) -> str:
        """
        The URI path that the user can do a GET on to access the resource metadata.
        """
        return pulumi.get(self, "entity_uri")

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        An OCID of the resource that the work request affects.
        """
        return pulumi.get(self, "identifier")


@pulumi.output_type
class GetIdentityProviderGroupsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: A filter to only return resources that match the given name exactly.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to only return resources that match the given name exactly.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetIdentityProviderGroupsIdentityProviderGroupResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 external_identifier: str,
                 id: str,
                 identity_provider_id: str,
                 name: str,
                 time_created: str,
                 time_modified: str):
        """
        :param str display_name: Display name of the group
        :param str external_identifier: Identifier of the group in the identity provider
        :param str id: The OCID of the `IdentityProviderGroup`.
        :param str identity_provider_id: The OCID of the identity provider.
        :param str name: A filter to only return resources that match the given name exactly.
        :param str time_created: Date and time the `IdentityProviderGroup` was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        :param str time_modified: Date and time the `IdentityProviderGroup` was last modified, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "external_identifier", external_identifier)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "identity_provider_id", identity_provider_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_modified", time_modified)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Display name of the group
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="externalIdentifier")
    def external_identifier(self) -> str:
        """
        Identifier of the group in the identity provider
        """
        return pulumi.get(self, "external_identifier")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The OCID of the `IdentityProviderGroup`.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="identityProviderId")
    def identity_provider_id(self) -> str:
        """
        The OCID of the identity provider.
        """
        return pulumi.get(self, "identity_provider_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to only return resources that match the given name exactly.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        Date and time the `IdentityProviderGroup` was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeModified")
    def time_modified(self) -> str:
        """
        Date and time the `IdentityProviderGroup` was last modified, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_modified")


@pulumi.output_type
class GetIdentityProvidersFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: A filter to only return resources that match the given name exactly.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to only return resources that match the given name exactly.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetIdentityProvidersIdentityProviderResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 defined_tags: Mapping[str, Any],
                 description: str,
                 freeform_attributes: Mapping[str, Any],
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 inactive_state: str,
                 metadata: str,
                 metadata_url: str,
                 name: str,
                 product_type: str,
                 protocol: str,
                 redirect_url: str,
                 signing_certificate: str,
                 state: str,
                 time_created: str):
        """
        :param str compartment_id: The OCID of the compartment (remember that the tenancy is simply the root compartment).
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param str description: The description you assign to the `IdentityProvider` during creation. Does not have to be unique, and it's changeable.
        :param Mapping[str, Any] freeform_attributes: Extra name value pairs associated with this identity provider. Example: `{"clientId": "app_sf3kdjf3"}`
        :param Mapping[str, Any] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param str id: The OCID of the `IdentityProvider`.
        :param str inactive_state: The detailed status of INACTIVE lifecycleState.
        :param str metadata: The XML that contains the information required for federating Identity with SAML2 Identity Provider.
        :param str metadata_url: The URL for retrieving the identity provider's metadata, which contains information required for federating.
        :param str name: A filter to only return resources that match the given name exactly.
        :param str product_type: The identity provider service or product. Supported identity providers are Oracle Identity Cloud Service (IDCS) and Microsoft Active Directory Federation Services (ADFS).
        :param str protocol: The protocol used for federation.
        :param str redirect_url: The URL to redirect federated users to for authentication with the identity provider.
        :param str signing_certificate: The identity provider's signing certificate used by the IAM Service to validate the SAML2 token.
        :param str state: A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
        :param str time_created: Date and time the `IdentityProvider` was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "freeform_attributes", freeform_attributes)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "inactive_state", inactive_state)
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "metadata_url", metadata_url)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "product_type", product_type)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "redirect_url", redirect_url)
        pulumi.set(__self__, "signing_certificate", signing_certificate)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The OCID of the compartment (remember that the tenancy is simply the root compartment).
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description you assign to the `IdentityProvider` during creation. Does not have to be unique, and it's changeable.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="freeformAttributes")
    def freeform_attributes(self) -> Mapping[str, Any]:
        """
        Extra name value pairs associated with this identity provider. Example: `{"clientId": "app_sf3kdjf3"}`
        """
        return pulumi.get(self, "freeform_attributes")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The OCID of the `IdentityProvider`.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inactiveState")
    def inactive_state(self) -> str:
        """
        The detailed status of INACTIVE lifecycleState.
        """
        return pulumi.get(self, "inactive_state")

    @property
    @pulumi.getter
    def metadata(self) -> str:
        """
        The XML that contains the information required for federating Identity with SAML2 Identity Provider.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="metadataUrl")
    def metadata_url(self) -> str:
        """
        The URL for retrieving the identity provider's metadata, which contains information required for federating.
        """
        return pulumi.get(self, "metadata_url")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to only return resources that match the given name exactly.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="productType")
    def product_type(self) -> str:
        """
        The identity provider service or product. Supported identity providers are Oracle Identity Cloud Service (IDCS) and Microsoft Active Directory Federation Services (ADFS).
        """
        return pulumi.get(self, "product_type")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        The protocol used for federation.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> str:
        """
        The URL to redirect federated users to for authentication with the identity provider.
        """
        return pulumi.get(self, "redirect_url")

    @property
    @pulumi.getter(name="signingCertificate")
    def signing_certificate(self) -> str:
        """
        The identity provider's signing certificate used by the IAM Service to validate the SAML2 token.
        """
        return pulumi.get(self, "signing_certificate")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        Date and time the `IdentityProvider` was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetIdpGroupMappingsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetIdpGroupMappingsIdpGroupMappingResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 group_id: str,
                 id: str,
                 identity_provider_id: str,
                 idp_group_name: str,
                 inactive_state: str,
                 state: str,
                 time_created: str):
        """
        :param str compartment_id: The OCID of the tenancy containing the `IdentityProvider`.
        :param str group_id: The OCID of the IAM Service group that is mapped to the IdP group.
        :param str id: The OCID of the `IdpGroupMapping`.
        :param str identity_provider_id: The OCID of the identity provider.
        :param str idp_group_name: The name of the IdP group that is mapped to the IAM Service group.
        :param str inactive_state: The detailed status of INACTIVE lifecycleState.
        :param str state: The mapping's current state.
        :param str time_created: Date and time the mapping was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "identity_provider_id", identity_provider_id)
        pulumi.set(__self__, "idp_group_name", idp_group_name)
        pulumi.set(__self__, "inactive_state", inactive_state)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The OCID of the tenancy containing the `IdentityProvider`.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> str:
        """
        The OCID of the IAM Service group that is mapped to the IdP group.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The OCID of the `IdpGroupMapping`.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="identityProviderId")
    def identity_provider_id(self) -> str:
        """
        The OCID of the identity provider.
        """
        return pulumi.get(self, "identity_provider_id")

    @property
    @pulumi.getter(name="idpGroupName")
    def idp_group_name(self) -> str:
        """
        The name of the IdP group that is mapped to the IAM Service group.
        """
        return pulumi.get(self, "idp_group_name")

    @property
    @pulumi.getter(name="inactiveState")
    def inactive_state(self) -> str:
        """
        The detailed status of INACTIVE lifecycleState.
        """
        return pulumi.get(self, "inactive_state")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The mapping's current state.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        Date and time the mapping was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetNetworkSourceVirtualSourceListResult(dict):
    def __init__(__self__, *,
                 ip_ranges: Sequence[str],
                 vcn_id: str):
        pulumi.set(__self__, "ip_ranges", ip_ranges)
        pulumi.set(__self__, "vcn_id", vcn_id)

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Sequence[str]:
        return pulumi.get(self, "ip_ranges")

    @property
    @pulumi.getter(name="vcnId")
    def vcn_id(self) -> str:
        return pulumi.get(self, "vcn_id")


@pulumi.output_type
class GetNetworkSourcesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: A filter to only return resources that match the given name exactly.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to only return resources that match the given name exactly.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetNetworkSourcesNetworkSourceResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 defined_tags: Mapping[str, Any],
                 description: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 inactive_state: str,
                 name: str,
                 public_source_lists: Sequence[str],
                 services: Sequence[str],
                 state: str,
                 time_created: str,
                 virtual_source_lists: Sequence['outputs.GetNetworkSourcesNetworkSourceVirtualSourceListResult']):
        """
        :param str compartment_id: The OCID of the compartment (remember that the tenancy is simply the root compartment).
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param str description: The description you assign to the network source. Does not have to be unique, and it's changeable.
        :param Mapping[str, Any] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param str id: The OCID of the network source.
        :param str inactive_state: The detailed status of INACTIVE lifecycleState.
        :param str name: A filter to only return resources that match the given name exactly.
        :param Sequence[str] public_source_lists: A list of allowed public IP addresses and CIDR ranges.
        :param Sequence[str] services: A list of services allowed to make on-behalf-of requests. These requests can have different source IPs than those specified in the network source. Currently, only `all` and `none` are supported. The default is `all`.
        :param str state: A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
        :param str time_created: Date and time the group was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        :param Sequence['GetNetworkSourcesNetworkSourceVirtualSourceListArgs'] virtual_source_lists: A list of allowed VCN OCID and IP range pairs. Example:`"vcnId": "ocid1.vcn.oc1.iad.aaaaaaaaexampleuniqueID", "ipRanges": [ "129.213.39.0/24" ]`
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "inactive_state", inactive_state)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "public_source_lists", public_source_lists)
        pulumi.set(__self__, "services", services)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "virtual_source_lists", virtual_source_lists)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The OCID of the compartment (remember that the tenancy is simply the root compartment).
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description you assign to the network source. Does not have to be unique, and it's changeable.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The OCID of the network source.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inactiveState")
    def inactive_state(self) -> str:
        """
        The detailed status of INACTIVE lifecycleState.
        """
        return pulumi.get(self, "inactive_state")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to only return resources that match the given name exactly.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="publicSourceLists")
    def public_source_lists(self) -> Sequence[str]:
        """
        A list of allowed public IP addresses and CIDR ranges.
        """
        return pulumi.get(self, "public_source_lists")

    @property
    @pulumi.getter
    def services(self) -> Sequence[str]:
        """
        A list of services allowed to make on-behalf-of requests. These requests can have different source IPs than those specified in the network source. Currently, only `all` and `none` are supported. The default is `all`.
        """
        return pulumi.get(self, "services")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        Date and time the group was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="virtualSourceLists")
    def virtual_source_lists(self) -> Sequence['outputs.GetNetworkSourcesNetworkSourceVirtualSourceListResult']:
        """
        A list of allowed VCN OCID and IP range pairs. Example:`"vcnId": "ocid1.vcn.oc1.iad.aaaaaaaaexampleuniqueID", "ipRanges": [ "129.213.39.0/24" ]`
        """
        return pulumi.get(self, "virtual_source_lists")


@pulumi.output_type
class GetNetworkSourcesNetworkSourceVirtualSourceListResult(dict):
    def __init__(__self__, *,
                 ip_ranges: Sequence[str],
                 vcn_id: str):
        pulumi.set(__self__, "ip_ranges", ip_ranges)
        pulumi.set(__self__, "vcn_id", vcn_id)

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Sequence[str]:
        return pulumi.get(self, "ip_ranges")

    @property
    @pulumi.getter(name="vcnId")
    def vcn_id(self) -> str:
        return pulumi.get(self, "vcn_id")


@pulumi.output_type
class GetPoliciesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: A filter to only return resources that match the given name exactly.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to only return resources that match the given name exactly.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetPoliciesPolicyResult(dict):
    def __init__(__self__, *,
                 e_tag: str,
                 compartment_id: str,
                 defined_tags: Mapping[str, Any],
                 description: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 inactive_state: str,
                 last_update_e_tag: str,
                 name: str,
                 policy_hash: str,
                 state: str,
                 statements: Sequence[str],
                 time_created: str,
                 version_date: str):
        """
        :param str compartment_id: The OCID of the compartment (remember that the tenancy is simply the root compartment).
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param str description: The description you assign to the policy. Does not have to be unique, and it's changeable.
        :param Mapping[str, Any] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param str id: The OCID of the policy.
        :param str inactive_state: The detailed status of INACTIVE lifecycleState.
        :param str name: A filter to only return resources that match the given name exactly.
        :param str state: A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
        :param Sequence[str] statements: An array of one or more policy statements written in the policy language.
        :param str time_created: Date and time the policy was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        :param str version_date: The version of the policy. If null or set to an empty string, when a request comes in for authorization, the policy will be evaluated according to the current behavior of the services at that moment. If set to a particular date (YYYY-MM-DD), the policy will be evaluated according to the behavior of the services on that date.
        """
        pulumi.set(__self__, "e_tag", e_tag)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "inactive_state", inactive_state)
        pulumi.set(__self__, "last_update_e_tag", last_update_e_tag)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "policy_hash", policy_hash)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "statements", statements)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "version_date", version_date)

    @property
    @pulumi.getter(name="ETag")
    def e_tag(self) -> str:
        return pulumi.get(self, "e_tag")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The OCID of the compartment (remember that the tenancy is simply the root compartment).
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description you assign to the policy. Does not have to be unique, and it's changeable.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The OCID of the policy.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inactiveState")
    def inactive_state(self) -> str:
        """
        The detailed status of INACTIVE lifecycleState.
        """
        return pulumi.get(self, "inactive_state")

    @property
    @pulumi.getter(name="lastUpdateETag")
    def last_update_e_tag(self) -> str:
        return pulumi.get(self, "last_update_e_tag")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to only return resources that match the given name exactly.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="policyHash")
    def policy_hash(self) -> str:
        return pulumi.get(self, "policy_hash")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def statements(self) -> Sequence[str]:
        """
        An array of one or more policy statements written in the policy language.
        """
        return pulumi.get(self, "statements")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        Date and time the policy was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="versionDate")
    def version_date(self) -> str:
        """
        The version of the policy. If null or set to an empty string, when a request comes in for authorization, the policy will be evaluated according to the current behavior of the services at that moment. If set to a particular date (YYYY-MM-DD), the policy will be evaluated according to the behavior of the services on that date.
        """
        return pulumi.get(self, "version_date")


@pulumi.output_type
class GetRegionSubscriptionsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetRegionSubscriptionsRegionSubscriptionResult(dict):
    def __init__(__self__, *,
                 is_home_region: bool,
                 region_key: str,
                 region_name: str,
                 state: str,
                 tenancy_id: str):
        """
        :param bool is_home_region: Indicates if the region is the home region or not.
        :param str region_key: The region's key. See [Regions and Availability Domains](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/regions.htm) for the full list of supported 3-letter region codes.  Example: `PHX`
        :param str region_name: The region's name. See [Regions and Availability Domains](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/regions.htm) for the full list of supported region names.  Example: `us-phoenix-1`
        :param str tenancy_id: The OCID of the tenancy.
        """
        pulumi.set(__self__, "is_home_region", is_home_region)
        pulumi.set(__self__, "region_key", region_key)
        pulumi.set(__self__, "region_name", region_name)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "tenancy_id", tenancy_id)

    @property
    @pulumi.getter(name="isHomeRegion")
    def is_home_region(self) -> bool:
        """
        Indicates if the region is the home region or not.
        """
        return pulumi.get(self, "is_home_region")

    @property
    @pulumi.getter(name="regionKey")
    def region_key(self) -> str:
        """
        The region's key. See [Regions and Availability Domains](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/regions.htm) for the full list of supported 3-letter region codes.  Example: `PHX`
        """
        return pulumi.get(self, "region_key")

    @property
    @pulumi.getter(name="regionName")
    def region_name(self) -> str:
        """
        The region's name. See [Regions and Availability Domains](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/regions.htm) for the full list of supported region names.  Example: `us-phoenix-1`
        """
        return pulumi.get(self, "region_name")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="tenancyId")
    def tenancy_id(self) -> str:
        """
        The OCID of the tenancy.
        """
        return pulumi.get(self, "tenancy_id")


@pulumi.output_type
class GetRegionsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: The name of the region. See [Regions and Availability Domains](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/regions.htm) for the full list of supported region names.  Example: `us-phoenix-1`
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the region. See [Regions and Availability Domains](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/regions.htm) for the full list of supported region names.  Example: `us-phoenix-1`
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetRegionsRegionResult(dict):
    def __init__(__self__, *,
                 key: str,
                 name: str):
        """
        :param str key: The key of the region. See [Regions and Availability Domains](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/regions.htm) for the full list of supported 3-letter region codes.  Example: `PHX`
        :param str name: The name of the region. See [Regions and Availability Domains](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/regions.htm) for the full list of supported region names.  Example: `us-phoenix-1`
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of the region. See [Regions and Availability Domains](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/regions.htm) for the full list of supported 3-letter region codes.  Example: `PHX`
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the region. See [Regions and Availability Domains](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/regions.htm) for the full list of supported region names.  Example: `us-phoenix-1`
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSmtpCredentialsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSmtpCredentialsSmtpCredentialResult(dict):
    def __init__(__self__, *,
                 description: str,
                 id: str,
                 inactive_state: str,
                 password: str,
                 state: str,
                 time_created: str,
                 time_expires: str,
                 user_id: str,
                 username: str):
        """
        :param str description: The description you assign to the SMTP credential. Does not have to be unique, and it's changeable.
        :param str id: The OCID of the SMTP credential.
        :param str inactive_state: The detailed status of INACTIVE lifecycleState.
        :param str state: The credential's current state.
        :param str time_created: Date and time the `SmtpCredential` object was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        :param str time_expires: Date and time when this credential will expire, in the format defined by RFC3339. Null if it never expires.  Example: `2016-08-25T21:10:29.600Z`
        :param str user_id: The OCID of the user.
        :param str username: The SMTP user name.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "inactive_state", inactive_state)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_expires", time_expires)
        pulumi.set(__self__, "user_id", user_id)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description you assign to the SMTP credential. Does not have to be unique, and it's changeable.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The OCID of the SMTP credential.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inactiveState")
    def inactive_state(self) -> str:
        """
        The detailed status of INACTIVE lifecycleState.
        """
        return pulumi.get(self, "inactive_state")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The credential's current state.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        Date and time the `SmtpCredential` object was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeExpires")
    def time_expires(self) -> str:
        """
        Date and time when this credential will expire, in the format defined by RFC3339. Null if it never expires.  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_expires")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> str:
        """
        The OCID of the user.
        """
        return pulumi.get(self, "user_id")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        The SMTP user name.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class GetSwiftPasswordsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSwiftPasswordsPasswordResult(dict):
    def __init__(__self__, *,
                 description: str,
                 expires_on: str,
                 id: str,
                 inactive_state: str,
                 password: str,
                 state: str,
                 time_created: str,
                 user_id: str):
        """
        :param str description: The description you assign to the Swift password. Does not have to be unique, and it's changeable.
        :param str expires_on: Date and time when this password will expire, in the format defined by RFC3339. Null if it never expires.  Example: `2016-08-25T21:10:29.600Z`
        :param str id: The OCID of the Swift password.
        :param str inactive_state: The detailed status of INACTIVE lifecycleState.
        :param str password: The Swift password. The value is available only in the response for `CreateSwiftPassword`, and not for `ListSwiftPasswords` or `UpdateSwiftPassword`.
        :param str state: The password's current state.
        :param str time_created: Date and time the `SwiftPassword` object was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        :param str user_id: The OCID of the user.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "expires_on", expires_on)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "inactive_state", inactive_state)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description you assign to the Swift password. Does not have to be unique, and it's changeable.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="expiresOn")
    def expires_on(self) -> str:
        """
        Date and time when this password will expire, in the format defined by RFC3339. Null if it never expires.  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "expires_on")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The OCID of the Swift password.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inactiveState")
    def inactive_state(self) -> str:
        """
        The detailed status of INACTIVE lifecycleState.
        """
        return pulumi.get(self, "inactive_state")

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        The Swift password. The value is available only in the response for `CreateSwiftPassword`, and not for `ListSwiftPasswords` or `UpdateSwiftPassword`.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The password's current state.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        Date and time the `SwiftPassword` object was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> str:
        """
        The OCID of the user.
        """
        return pulumi.get(self, "user_id")


@pulumi.output_type
class GetTagDefaultsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetTagDefaultsTagDefaultResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 id: str,
                 is_required: bool,
                 state: str,
                 tag_definition_id: str,
                 tag_definition_name: str,
                 tag_namespace_id: str,
                 time_created: str,
                 value: str):
        """
        :param str compartment_id: The OCID of the compartment (remember that the tenancy is simply the root compartment).
        :param str id: A filter to only return resources that match the specified OCID exactly.
        :param bool is_required: If you specify that a value is required, a value is set during resource creation (either by the user creating the resource or another tag defualt). If no value is set, resource creation is blocked.
               * If the `isRequired` flag is set to "true", the value is set during resource creation.
               * If the `isRequired` flag is set to "false", the value you enter is set during resource creation.
        :param str state: A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
        :param str tag_definition_id: The OCID of the tag definition.
        :param str tag_definition_name: The name used in the tag definition. This field is informational in the context of the tag default.
        :param str tag_namespace_id: The OCID of the tag namespace that contains the tag definition.
        :param str time_created: Date and time the `TagDefault` object was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        :param str value: The default value for the tag definition. This will be applied to all new resources created in the compartment.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_required", is_required)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "tag_definition_id", tag_definition_id)
        pulumi.set(__self__, "tag_definition_name", tag_definition_name)
        pulumi.set(__self__, "tag_namespace_id", tag_namespace_id)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The OCID of the compartment (remember that the tenancy is simply the root compartment).
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        A filter to only return resources that match the specified OCID exactly.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> bool:
        """
        If you specify that a value is required, a value is set during resource creation (either by the user creating the resource or another tag defualt). If no value is set, resource creation is blocked.
        * If the `isRequired` flag is set to "true", the value is set during resource creation.
        * If the `isRequired` flag is set to "false", the value you enter is set during resource creation.
        """
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="tagDefinitionId")
    def tag_definition_id(self) -> str:
        """
        The OCID of the tag definition.
        """
        return pulumi.get(self, "tag_definition_id")

    @property
    @pulumi.getter(name="tagDefinitionName")
    def tag_definition_name(self) -> str:
        """
        The name used in the tag definition. This field is informational in the context of the tag default.
        """
        return pulumi.get(self, "tag_definition_name")

    @property
    @pulumi.getter(name="tagNamespaceId")
    def tag_namespace_id(self) -> str:
        """
        The OCID of the tag namespace that contains the tag definition.
        """
        return pulumi.get(self, "tag_namespace_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        Date and time the `TagDefault` object was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The default value for the tag definition. This will be applied to all new resources created in the compartment.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTagNamespacesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: The name of the tag namespace. It must be unique across all tag namespaces in the tenancy and cannot be changed.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the tag namespace. It must be unique across all tag namespaces in the tenancy and cannot be changed.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetTagNamespacesTagNamespaceResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 defined_tags: Mapping[str, Any],
                 description: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 is_retired: bool,
                 name: str,
                 state: str,
                 time_created: str):
        """
        :param str compartment_id: The OCID of the compartment (remember that the tenancy is simply the root compartment).
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param str description: The description you assign to the tag namespace.
        :param Mapping[str, Any] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param str id: The OCID of the tag namespace.
        :param bool is_retired: Whether the tag namespace is retired. For more information, see [Retiring Key Definitions and Namespace Definitions](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/taggingoverview.htm#Retiring).
        :param str name: The name of the tag namespace. It must be unique across all tag namespaces in the tenancy and cannot be changed.
        :param str state: A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
        :param str time_created: Date and time the tag namespace was created, in the format defined by RFC3339. Example: `2016-08-25T21:10:29.600Z`
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_retired", is_retired)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The OCID of the compartment (remember that the tenancy is simply the root compartment).
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description you assign to the tag namespace.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The OCID of the tag namespace.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isRetired")
    def is_retired(self) -> bool:
        """
        Whether the tag namespace is retired. For more information, see [Retiring Key Definitions and Namespace Definitions](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/taggingoverview.htm#Retiring).
        """
        return pulumi.get(self, "is_retired")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the tag namespace. It must be unique across all tag namespaces in the tenancy and cannot be changed.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        Date and time the tag namespace was created, in the format defined by RFC3339. Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetTagStandardTagNamespaceTemplateTagDefinitionTemplateResult(dict):
    def __init__(__self__, *,
                 description: str,
                 enum_mutability: str,
                 is_cost_tracking: bool,
                 possible_values: Sequence[str],
                 tag_definition_name: str,
                 type: str):
        """
        :param str description: The default description of the tag namespace that users can use to create the tag definition
        :param str enum_mutability: The mutability of the possible values list for enum tags. This will default to IMMUTABLE for string value tags
        :param bool is_cost_tracking: Is the tag a cost tracking tag. Default will be false as cost tracking tags have been deprecated
        :param Sequence[str] possible_values: List of possible values. An optional parameter that will be present if the type of definition is enum.
        :param str tag_definition_name: The name of this standard tag definition
        :param str type: The type of tag definition. Enum or string.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enum_mutability", enum_mutability)
        pulumi.set(__self__, "is_cost_tracking", is_cost_tracking)
        pulumi.set(__self__, "possible_values", possible_values)
        pulumi.set(__self__, "tag_definition_name", tag_definition_name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The default description of the tag namespace that users can use to create the tag definition
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="enumMutability")
    def enum_mutability(self) -> str:
        """
        The mutability of the possible values list for enum tags. This will default to IMMUTABLE for string value tags
        """
        return pulumi.get(self, "enum_mutability")

    @property
    @pulumi.getter(name="isCostTracking")
    def is_cost_tracking(self) -> bool:
        """
        Is the tag a cost tracking tag. Default will be false as cost tracking tags have been deprecated
        """
        return pulumi.get(self, "is_cost_tracking")

    @property
    @pulumi.getter(name="possibleValues")
    def possible_values(self) -> Sequence[str]:
        """
        List of possible values. An optional parameter that will be present if the type of definition is enum.
        """
        return pulumi.get(self, "possible_values")

    @property
    @pulumi.getter(name="tagDefinitionName")
    def tag_definition_name(self) -> str:
        """
        The name of this standard tag definition
        """
        return pulumi.get(self, "tag_definition_name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of tag definition. Enum or string.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetTagStandardTagNamespaceTemplatesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetTagStandardTagNamespaceTemplatesStandardTagNamespaceTemplateResult(dict):
    def __init__(__self__, *,
                 description: str,
                 standard_tag_namespace_name: str,
                 status: str):
        """
        :param str description: The default description of the tag namespace that users can use to create the tag namespace
        :param str standard_tag_namespace_name: The reserved name of this standard tag namespace
        :param str status: The status of the standard tag namespace
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "standard_tag_namespace_name", standard_tag_namespace_name)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The default description of the tag namespace that users can use to create the tag namespace
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="standardTagNamespaceName")
    def standard_tag_namespace_name(self) -> str:
        """
        The reserved name of this standard tag namespace
        """
        return pulumi.get(self, "standard_tag_namespace_name")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of the standard tag namespace
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetTagValidatorResult(dict):
    def __init__(__self__, *,
                 validator_type: str,
                 values: Sequence[str]):
        """
        :param str validator_type: Specifies the type of validation: a static value (no validation) or a list.
        :param Sequence[str] values: The list of allowed values for a definedTag value.
        """
        pulumi.set(__self__, "validator_type", validator_type)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="validatorType")
    def validator_type(self) -> str:
        """
        Specifies the type of validation: a static value (no validation) or a list.
        """
        return pulumi.get(self, "validator_type")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        The list of allowed values for a definedTag value.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetTagsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: The name assigned to the tag during creation. This is the tag key definition. The name must be unique within the tag namespace and cannot be changed.
        :param Sequence[str] values: The list of allowed values for a definedTag value.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name assigned to the tag during creation. This is the tag key definition. The name must be unique within the tag namespace and cannot be changed.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        The list of allowed values for a definedTag value.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetTagsTagResult(dict):
    def __init__(__self__, *,
                 defined_tags: Mapping[str, Any],
                 description: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 is_cost_tracking: bool,
                 is_retired: bool,
                 name: str,
                 state: str,
                 tag_namespace_id: str,
                 time_created: str,
                 validators: Sequence['outputs.GetTagsTagValidatorResult']):
        """
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
        :param str description: The description you assign to the tag.
        :param Mapping[str, Any] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        :param str id: The OCID of the tag definition.
        :param bool is_cost_tracking: Indicates whether the tag is enabled for cost tracking.
        :param bool is_retired: Indicates whether the tag is retired. See [Retiring Key Definitions and Namespace Definitions](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/taggingoverview.htm#Retiring).
        :param str name: The name assigned to the tag during creation. This is the tag key definition. The name must be unique within the tag namespace and cannot be changed.
        :param str state: A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
        :param str tag_namespace_id: The OCID of the tag namespace.
        :param str time_created: Date and time the tag was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        :param Sequence['GetTagsTagValidatorArgs'] validators: Validates a definedTag value. Each validator performs validation steps in addition to the standard validation for definedTag values. For more information, see [Limits on Tags](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/taggingoverview.htm#Limits).
        """
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_cost_tracking", is_cost_tracking)
        pulumi.set(__self__, "is_retired", is_retired)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "tag_namespace_id", tag_namespace_id)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "validators", validators)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description you assign to the tag.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The OCID of the tag definition.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isCostTracking")
    def is_cost_tracking(self) -> bool:
        """
        Indicates whether the tag is enabled for cost tracking.
        """
        return pulumi.get(self, "is_cost_tracking")

    @property
    @pulumi.getter(name="isRetired")
    def is_retired(self) -> bool:
        """
        Indicates whether the tag is retired. See [Retiring Key Definitions and Namespace Definitions](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/taggingoverview.htm#Retiring).
        """
        return pulumi.get(self, "is_retired")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name assigned to the tag during creation. This is the tag key definition. The name must be unique within the tag namespace and cannot be changed.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="tagNamespaceId")
    def tag_namespace_id(self) -> str:
        """
        The OCID of the tag namespace.
        """
        return pulumi.get(self, "tag_namespace_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        Date and time the tag was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter
    def validators(self) -> Sequence['outputs.GetTagsTagValidatorResult']:
        """
        Validates a definedTag value. Each validator performs validation steps in addition to the standard validation for definedTag values. For more information, see [Limits on Tags](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/taggingoverview.htm#Limits).
        """
        return pulumi.get(self, "validators")


@pulumi.output_type
class GetTagsTagValidatorResult(dict):
    def __init__(__self__, *,
                 validator_type: str,
                 values: Sequence[str]):
        """
        :param str validator_type: Specifies the type of validation: a static value (no validation) or a list.
        :param Sequence[str] values: The list of allowed values for a definedTag value.
        """
        pulumi.set(__self__, "validator_type", validator_type)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="validatorType")
    def validator_type(self) -> str:
        """
        Specifies the type of validation: a static value (no validation) or a list.
        """
        return pulumi.get(self, "validator_type")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        The list of allowed values for a definedTag value.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetUserCapabilityResult(dict):
    def __init__(__self__, *,
                 can_use_api_keys: bool,
                 can_use_auth_tokens: bool,
                 can_use_console_password: bool,
                 can_use_customer_secret_keys: bool,
                 can_use_db_credentials: bool,
                 can_use_oauth2client_credentials: bool,
                 can_use_smtp_credentials: bool):
        """
        :param bool can_use_api_keys: Indicates if the user can use API keys.
        :param bool can_use_auth_tokens: Indicates if the user can use SWIFT passwords / auth tokens.
        :param bool can_use_console_password: Indicates if the user can log in to the console.
        :param bool can_use_customer_secret_keys: Indicates if the user can use SigV4 symmetric keys.
        :param bool can_use_db_credentials: Indicates if the user can use DB passwords.
        :param bool can_use_oauth2client_credentials: Indicates if the user can use OAuth2 credentials and tokens.
        :param bool can_use_smtp_credentials: Indicates if the user can use SMTP passwords.
        """
        pulumi.set(__self__, "can_use_api_keys", can_use_api_keys)
        pulumi.set(__self__, "can_use_auth_tokens", can_use_auth_tokens)
        pulumi.set(__self__, "can_use_console_password", can_use_console_password)
        pulumi.set(__self__, "can_use_customer_secret_keys", can_use_customer_secret_keys)
        pulumi.set(__self__, "can_use_db_credentials", can_use_db_credentials)
        pulumi.set(__self__, "can_use_oauth2client_credentials", can_use_oauth2client_credentials)
        pulumi.set(__self__, "can_use_smtp_credentials", can_use_smtp_credentials)

    @property
    @pulumi.getter(name="canUseApiKeys")
    def can_use_api_keys(self) -> bool:
        """
        Indicates if the user can use API keys.
        """
        return pulumi.get(self, "can_use_api_keys")

    @property
    @pulumi.getter(name="canUseAuthTokens")
    def can_use_auth_tokens(self) -> bool:
        """
        Indicates if the user can use SWIFT passwords / auth tokens.
        """
        return pulumi.get(self, "can_use_auth_tokens")

    @property
    @pulumi.getter(name="canUseConsolePassword")
    def can_use_console_password(self) -> bool:
        """
        Indicates if the user can log in to the console.
        """
        return pulumi.get(self, "can_use_console_password")

    @property
    @pulumi.getter(name="canUseCustomerSecretKeys")
    def can_use_customer_secret_keys(self) -> bool:
        """
        Indicates if the user can use SigV4 symmetric keys.
        """
        return pulumi.get(self, "can_use_customer_secret_keys")

    @property
    @pulumi.getter(name="canUseDbCredentials")
    def can_use_db_credentials(self) -> bool:
        """
        Indicates if the user can use DB passwords.
        """
        return pulumi.get(self, "can_use_db_credentials")

    @property
    @pulumi.getter(name="canUseOauth2clientCredentials")
    def can_use_oauth2client_credentials(self) -> bool:
        """
        Indicates if the user can use OAuth2 credentials and tokens.
        """
        return pulumi.get(self, "can_use_oauth2client_credentials")

    @property
    @pulumi.getter(name="canUseSmtpCredentials")
    def can_use_smtp_credentials(self) -> bool:
        """
        Indicates if the user can use SMTP passwords.
        """
        return pulumi.get(self, "can_use_smtp_credentials")


@pulumi.output_type
class GetUserGroupMembershipsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetUserGroupMembershipsMembershipResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 group_id: str,
                 id: str,
                 inactive_state: str,
                 state: str,
                 time_created: str,
                 user_id: str):
        """
        :param str compartment_id: The OCID of the compartment (remember that the tenancy is simply the root compartment).
        :param str group_id: The OCID of the group.
        :param str id: The OCID of the membership.
        :param str inactive_state: The detailed status of INACTIVE lifecycleState.
        :param str state: The membership's current state.
        :param str time_created: Date and time the membership was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        :param str user_id: The OCID of the user.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "inactive_state", inactive_state)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The OCID of the compartment (remember that the tenancy is simply the root compartment).
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> str:
        """
        The OCID of the group.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The OCID of the membership.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inactiveState")
    def inactive_state(self) -> str:
        """
        The detailed status of INACTIVE lifecycleState.
        """
        return pulumi.get(self, "inactive_state")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The membership's current state.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        Date and time the membership was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> str:
        """
        The OCID of the user.
        """
        return pulumi.get(self, "user_id")


@pulumi.output_type
class GetUsersFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: A filter to only return resources that match the given name exactly.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to only return resources that match the given name exactly.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetUsersUserResult(dict):
    def __init__(__self__, *,
                 capabilities: Sequence['outputs.GetUsersUserCapabilityResult'],
                 compartment_id: str,
                 db_user_name: str,
                 defined_tags: Mapping[str, Any],
                 description: str,
                 email: str,
                 email_verified: bool,
                 external_identifier: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 identity_provider_id: str,
                 inactive_state: str,
                 last_successful_login_time: str,
                 name: str,
                 previous_successful_login_time: str,
                 state: str,
                 time_created: str):
        """
        :param Sequence['GetUsersUserCapabilityArgs'] capabilities: Properties indicating how the user is allowed to authenticate.
        :param str compartment_id: The OCID of the compartment (remember that the tenancy is simply the root compartment).
        :param str db_user_name: DB username of the DB credential. Has to be unique across the tenancy.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param str description: The description you assign to the user. Does not have to be unique, and it's changeable.
        :param str email: The email address you assign to the user. The email address must be unique across all users in the tenancy.
        :param bool email_verified: Whether the email address has been validated.
        :param str external_identifier: The id of a user in the identity provider.
        :param Mapping[str, Any] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        :param str id: The OCID of the user.
        :param str identity_provider_id: The id of the identity provider.
        :param str inactive_state: Returned only if the user's `lifecycleState` is INACTIVE. A 16-bit value showing the reason why the user is inactive:
               * bit 0: SUSPENDED (reserved for future use)
               * bit 1: DISABLED (reserved for future use)
               * bit 2: BLOCKED (the user has exceeded the maximum number of failed login attempts for the Console)
        :param str last_successful_login_time: The date and time of when the user most recently logged in the format defined by RFC3339 (ex. `2016-08-25T21:10:29.600Z`). If there is no login history, this field is null.
        :param str name: A filter to only return resources that match the given name exactly.
        :param str previous_successful_login_time: The date and time of when the user most recently logged in the format defined by RFC3339 (ex. `2016-08-25T21:10:29.600Z`). If there is no login history, this field is null.
        :param str state: A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
        :param str time_created: Date and time the user was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        """
        pulumi.set(__self__, "capabilities", capabilities)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "db_user_name", db_user_name)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "email_verified", email_verified)
        pulumi.set(__self__, "external_identifier", external_identifier)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "identity_provider_id", identity_provider_id)
        pulumi.set(__self__, "inactive_state", inactive_state)
        pulumi.set(__self__, "last_successful_login_time", last_successful_login_time)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "previous_successful_login_time", previous_successful_login_time)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter
    def capabilities(self) -> Sequence['outputs.GetUsersUserCapabilityResult']:
        """
        Properties indicating how the user is allowed to authenticate.
        """
        return pulumi.get(self, "capabilities")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The OCID of the compartment (remember that the tenancy is simply the root compartment).
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="dbUserName")
    def db_user_name(self) -> str:
        """
        DB username of the DB credential. Has to be unique across the tenancy.
        """
        return pulumi.get(self, "db_user_name")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description you assign to the user. Does not have to be unique, and it's changeable.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def email(self) -> str:
        """
        The email address you assign to the user. The email address must be unique across all users in the tenancy.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="emailVerified")
    def email_verified(self) -> bool:
        """
        Whether the email address has been validated.
        """
        return pulumi.get(self, "email_verified")

    @property
    @pulumi.getter(name="externalIdentifier")
    def external_identifier(self) -> str:
        """
        The id of a user in the identity provider.
        """
        return pulumi.get(self, "external_identifier")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The OCID of the user.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="identityProviderId")
    def identity_provider_id(self) -> str:
        """
        The id of the identity provider.
        """
        return pulumi.get(self, "identity_provider_id")

    @property
    @pulumi.getter(name="inactiveState")
    def inactive_state(self) -> str:
        """
        Returned only if the user's `lifecycleState` is INACTIVE. A 16-bit value showing the reason why the user is inactive:
        * bit 0: SUSPENDED (reserved for future use)
        * bit 1: DISABLED (reserved for future use)
        * bit 2: BLOCKED (the user has exceeded the maximum number of failed login attempts for the Console)
        """
        return pulumi.get(self, "inactive_state")

    @property
    @pulumi.getter(name="lastSuccessfulLoginTime")
    def last_successful_login_time(self) -> str:
        """
        The date and time of when the user most recently logged in the format defined by RFC3339 (ex. `2016-08-25T21:10:29.600Z`). If there is no login history, this field is null.
        """
        return pulumi.get(self, "last_successful_login_time")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to only return resources that match the given name exactly.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="previousSuccessfulLoginTime")
    def previous_successful_login_time(self) -> str:
        """
        The date and time of when the user most recently logged in the format defined by RFC3339 (ex. `2016-08-25T21:10:29.600Z`). If there is no login history, this field is null.
        """
        return pulumi.get(self, "previous_successful_login_time")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        Date and time the user was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetUsersUserCapabilityResult(dict):
    def __init__(__self__, *,
                 can_use_api_keys: bool,
                 can_use_auth_tokens: bool,
                 can_use_console_password: bool,
                 can_use_customer_secret_keys: bool,
                 can_use_db_credentials: bool,
                 can_use_oauth2client_credentials: bool,
                 can_use_smtp_credentials: bool):
        """
        :param bool can_use_api_keys: Indicates if the user can use API keys.
        :param bool can_use_auth_tokens: Indicates if the user can use SWIFT passwords / auth tokens.
        :param bool can_use_console_password: Indicates if the user can log in to the console.
        :param bool can_use_customer_secret_keys: Indicates if the user can use SigV4 symmetric keys.
        :param bool can_use_db_credentials: Indicates if the user can use DB passwords.
        :param bool can_use_oauth2client_credentials: Indicates if the user can use OAuth2 credentials and tokens.
        :param bool can_use_smtp_credentials: Indicates if the user can use SMTP passwords.
        """
        pulumi.set(__self__, "can_use_api_keys", can_use_api_keys)
        pulumi.set(__self__, "can_use_auth_tokens", can_use_auth_tokens)
        pulumi.set(__self__, "can_use_console_password", can_use_console_password)
        pulumi.set(__self__, "can_use_customer_secret_keys", can_use_customer_secret_keys)
        pulumi.set(__self__, "can_use_db_credentials", can_use_db_credentials)
        pulumi.set(__self__, "can_use_oauth2client_credentials", can_use_oauth2client_credentials)
        pulumi.set(__self__, "can_use_smtp_credentials", can_use_smtp_credentials)

    @property
    @pulumi.getter(name="canUseApiKeys")
    def can_use_api_keys(self) -> bool:
        """
        Indicates if the user can use API keys.
        """
        return pulumi.get(self, "can_use_api_keys")

    @property
    @pulumi.getter(name="canUseAuthTokens")
    def can_use_auth_tokens(self) -> bool:
        """
        Indicates if the user can use SWIFT passwords / auth tokens.
        """
        return pulumi.get(self, "can_use_auth_tokens")

    @property
    @pulumi.getter(name="canUseConsolePassword")
    def can_use_console_password(self) -> bool:
        """
        Indicates if the user can log in to the console.
        """
        return pulumi.get(self, "can_use_console_password")

    @property
    @pulumi.getter(name="canUseCustomerSecretKeys")
    def can_use_customer_secret_keys(self) -> bool:
        """
        Indicates if the user can use SigV4 symmetric keys.
        """
        return pulumi.get(self, "can_use_customer_secret_keys")

    @property
    @pulumi.getter(name="canUseDbCredentials")
    def can_use_db_credentials(self) -> bool:
        """
        Indicates if the user can use DB passwords.
        """
        return pulumi.get(self, "can_use_db_credentials")

    @property
    @pulumi.getter(name="canUseOauth2clientCredentials")
    def can_use_oauth2client_credentials(self) -> bool:
        """
        Indicates if the user can use OAuth2 credentials and tokens.
        """
        return pulumi.get(self, "can_use_oauth2client_credentials")

    @property
    @pulumi.getter(name="canUseSmtpCredentials")
    def can_use_smtp_credentials(self) -> bool:
        """
        Indicates if the user can use SMTP passwords.
        """
        return pulumi.get(self, "can_use_smtp_credentials")


