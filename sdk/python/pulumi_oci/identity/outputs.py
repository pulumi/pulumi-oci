# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'AuthenticationPolicyNetworkPolicy',
    'AuthenticationPolicyPasswordPolicy',
    'DomainReplicaRegion',
    'DomainsAccountRecoverySettingIdcsCreatedBy',
    'DomainsAccountRecoverySettingIdcsLastModifiedBy',
    'DomainsAccountRecoverySettingMeta',
    'DomainsAccountRecoverySettingTag',
    'DomainsApiKeyIdcsCreatedBy',
    'DomainsApiKeyIdcsLastModifiedBy',
    'DomainsApiKeyMeta',
    'DomainsApiKeyTag',
    'DomainsApiKeyUrnietfparamsscimschemasoracleidcsextensionselfChangeUser',
    'DomainsApiKeyUser',
    'DomainsAppAccount',
    'DomainsAppAdminRole',
    'DomainsAppAliasApp',
    'DomainsAppAllowedScope',
    'DomainsAppAllowedTag',
    'DomainsAppAppSignonPolicy',
    'DomainsAppAppsNetworkPerimeter',
    'DomainsAppAsOpcService',
    'DomainsAppAttrRenderingMetadata',
    'DomainsAppBasedOnTemplate',
    'DomainsAppCertificate',
    'DomainsAppCloudControlProperty',
    'DomainsAppEditableAttribute',
    'DomainsAppGrant',
    'DomainsAppGrantedAppRole',
    'DomainsAppIdcsCreatedBy',
    'DomainsAppIdcsLastModifiedBy',
    'DomainsAppIdentityProvider',
    'DomainsAppIdpPolicy',
    'DomainsAppMeta',
    'DomainsAppProtectableSecondaryAudience',
    'DomainsAppRadiusPolicy',
    'DomainsAppRoleApp',
    'DomainsAppRoleIdcsCreatedBy',
    'DomainsAppRoleIdcsLastModifiedBy',
    'DomainsAppRoleMember',
    'DomainsAppRoleMeta',
    'DomainsAppRoleTag',
    'DomainsAppSamlServiceProvider',
    'DomainsAppScope',
    'DomainsAppServiceParam',
    'DomainsAppSignonPolicy',
    'DomainsAppTag',
    'DomainsAppTermsOfUse',
    'DomainsAppTrustPolicy',
    'DomainsAppUrnietfparamsscimschemasoracleidcsextensionOciTags',
    'DomainsAppUrnietfparamsscimschemasoracleidcsextensionOciTagsDefinedTag',
    'DomainsAppUrnietfparamsscimschemasoracleidcsextensionOciTagsFreeformTag',
    'DomainsAppUrnietfparamsscimschemasoracleidcsextensiondbcsApp',
    'DomainsAppUrnietfparamsscimschemasoracleidcsextensiondbcsAppDomainApp',
    'DomainsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppApp',
    'DomainsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppAppAllowAuthzPolicy',
    'DomainsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppAppAppResource',
    'DomainsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppAppDenyAuthzPolicy',
    'DomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppApp',
    'DomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppAppFormFillUrlMatch',
    'DomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppTemplateAppTemplate',
    'DomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppTemplateAppTemplateFormFillUrlMatch',
    'DomainsAppUrnietfparamsscimschemasoracleidcsextensionkerberosRealmApp',
    'DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappApp',
    'DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppBundleConfigurationProperty',
    'DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppBundlePoolConfiguration',
    'DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppConnectorBundle',
    'DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppFlatFileBundleConfigurationProperty',
    'DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppFlatFileConnectorBundle',
    'DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppIdentityBridge',
    'DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppObjectClass',
    'DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppThreeLeggedOauthCredential',
    'DomainsAppUrnietfparamsscimschemasoracleidcsextensionmulticloudServiceAppApp',
    'DomainsAppUrnietfparamsscimschemasoracleidcsextensionopcServiceApp',
    'DomainsAppUrnietfparamsscimschemasoracleidcsextensionradiusAppApp',
    'DomainsAppUrnietfparamsscimschemasoracleidcsextensionradiusAppAppGroupMembershipToReturn',
    'DomainsAppUrnietfparamsscimschemasoracleidcsextensionrequestableApp',
    'DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderApp',
    'DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppGroupAssertionAttribute',
    'DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppOutboundAssertionAttribute',
    'DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppUserAssertionAttribute',
    'DomainsAppUrnietfparamsscimschemasoracleidcsextensionwebTierPolicyApp',
    'DomainsAppUserRole',
    'DomainsAuthTokenIdcsCreatedBy',
    'DomainsAuthTokenIdcsLastModifiedBy',
    'DomainsAuthTokenMeta',
    'DomainsAuthTokenTag',
    'DomainsAuthTokenUrnietfparamsscimschemasoracleidcsextensionselfChangeUser',
    'DomainsAuthTokenUser',
    'DomainsAuthenticationFactorSettingBypassCodeSettings',
    'DomainsAuthenticationFactorSettingClientAppSettings',
    'DomainsAuthenticationFactorSettingCompliancePolicy',
    'DomainsAuthenticationFactorSettingEmailSettings',
    'DomainsAuthenticationFactorSettingEndpointRestrictions',
    'DomainsAuthenticationFactorSettingIdcsCreatedBy',
    'DomainsAuthenticationFactorSettingIdcsLastModifiedBy',
    'DomainsAuthenticationFactorSettingIdentityStoreSettings',
    'DomainsAuthenticationFactorSettingMeta',
    'DomainsAuthenticationFactorSettingNotificationSettings',
    'DomainsAuthenticationFactorSettingTag',
    'DomainsAuthenticationFactorSettingThirdPartyFactor',
    'DomainsAuthenticationFactorSettingTotpSettings',
    'DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionfidoAuthenticationFactorSettings',
    'DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettings',
    'DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettingsDuoSecuritySettings',
    'DomainsCustomerSecretKeyIdcsCreatedBy',
    'DomainsCustomerSecretKeyIdcsLastModifiedBy',
    'DomainsCustomerSecretKeyMeta',
    'DomainsCustomerSecretKeyTag',
    'DomainsCustomerSecretKeyUrnietfparamsscimschemasoracleidcsextensionselfChangeUser',
    'DomainsCustomerSecretKeyUser',
    'DomainsDynamicResourceGroupDynamicGroupAppRole',
    'DomainsDynamicResourceGroupGrant',
    'DomainsDynamicResourceGroupIdcsCreatedBy',
    'DomainsDynamicResourceGroupIdcsLastModifiedBy',
    'DomainsDynamicResourceGroupMeta',
    'DomainsDynamicResourceGroupTag',
    'DomainsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTags',
    'DomainsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagsDefinedTag',
    'DomainsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagsFreeformTag',
    'DomainsGrantApp',
    'DomainsGrantAppEntitlementCollection',
    'DomainsGrantEntitlement',
    'DomainsGrantGrantee',
    'DomainsGrantGrantor',
    'DomainsGrantIdcsCreatedBy',
    'DomainsGrantIdcsLastModifiedBy',
    'DomainsGrantMeta',
    'DomainsGrantTag',
    'DomainsGroupIdcsCreatedBy',
    'DomainsGroupIdcsLastModifiedBy',
    'DomainsGroupMember',
    'DomainsGroupMeta',
    'DomainsGroupTag',
    'DomainsGroupUrnietfparamsscimschemasoracleidcsextensionOciTags',
    'DomainsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagsDefinedTag',
    'DomainsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagsFreeformTag',
    'DomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroup',
    'DomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupDomainLevelSchemaName',
    'DomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupInstanceLevelSchemaName',
    'DomainsGroupUrnietfparamsscimschemasoracleidcsextensiondynamicGroup',
    'DomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroup',
    'DomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupAppRole',
    'DomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupGrant',
    'DomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupOwner',
    'DomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupPasswordPolicy',
    'DomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupSyncedFromApp',
    'DomainsGroupUrnietfparamsscimschemasoracleidcsextensionposixGroup',
    'DomainsGroupUrnietfparamsscimschemasoracleidcsextensionrequestableGroup',
    'DomainsIdentityProviderCorrelationPolicy',
    'DomainsIdentityProviderIdcsCreatedBy',
    'DomainsIdentityProviderIdcsLastModifiedBy',
    'DomainsIdentityProviderJitUserProvAssignedGroup',
    'DomainsIdentityProviderJitUserProvAttributes',
    'DomainsIdentityProviderJitUserProvGroupMapping',
    'DomainsIdentityProviderMeta',
    'DomainsIdentityProviderTag',
    'DomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider',
    'DomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionx509identityProvider',
    'DomainsIdentitySettingIdcsCreatedBy',
    'DomainsIdentitySettingIdcsLastModifiedBy',
    'DomainsIdentitySettingMeta',
    'DomainsIdentitySettingMyProfile',
    'DomainsIdentitySettingPosixGid',
    'DomainsIdentitySettingPosixUid',
    'DomainsIdentitySettingTag',
    'DomainsIdentitySettingToken',
    'DomainsKmsiSettingIdcsCreatedBy',
    'DomainsKmsiSettingIdcsLastModifiedBy',
    'DomainsKmsiSettingMeta',
    'DomainsKmsiSettingTag',
    'DomainsMyApiKeyIdcsCreatedBy',
    'DomainsMyApiKeyIdcsLastModifiedBy',
    'DomainsMyApiKeyMeta',
    'DomainsMyApiKeyTag',
    'DomainsMyApiKeyUser',
    'DomainsMyAuthTokenIdcsCreatedBy',
    'DomainsMyAuthTokenIdcsLastModifiedBy',
    'DomainsMyAuthTokenMeta',
    'DomainsMyAuthTokenTag',
    'DomainsMyAuthTokenUser',
    'DomainsMyCustomerSecretKeyIdcsCreatedBy',
    'DomainsMyCustomerSecretKeyIdcsLastModifiedBy',
    'DomainsMyCustomerSecretKeyMeta',
    'DomainsMyCustomerSecretKeyTag',
    'DomainsMyCustomerSecretKeyUser',
    'DomainsMyOauth2clientCredentialIdcsCreatedBy',
    'DomainsMyOauth2clientCredentialIdcsLastModifiedBy',
    'DomainsMyOauth2clientCredentialMeta',
    'DomainsMyOauth2clientCredentialScope',
    'DomainsMyOauth2clientCredentialTag',
    'DomainsMyOauth2clientCredentialUser',
    'DomainsMyRequestIdcsCreatedBy',
    'DomainsMyRequestIdcsLastModifiedBy',
    'DomainsMyRequestMeta',
    'DomainsMyRequestRequesting',
    'DomainsMyRequestRequestor',
    'DomainsMyRequestTag',
    'DomainsMySmtpCredentialIdcsCreatedBy',
    'DomainsMySmtpCredentialIdcsLastModifiedBy',
    'DomainsMySmtpCredentialMeta',
    'DomainsMySmtpCredentialTag',
    'DomainsMySmtpCredentialUser',
    'DomainsMySupportAccountIdcsCreatedBy',
    'DomainsMySupportAccountIdcsLastModifiedBy',
    'DomainsMySupportAccountMeta',
    'DomainsMySupportAccountTag',
    'DomainsMySupportAccountUser',
    'DomainsMyUserDbCredentialIdcsCreatedBy',
    'DomainsMyUserDbCredentialIdcsLastModifiedBy',
    'DomainsMyUserDbCredentialMeta',
    'DomainsMyUserDbCredentialTag',
    'DomainsMyUserDbCredentialUser',
    'DomainsOauth2clientCredentialIdcsCreatedBy',
    'DomainsOauth2clientCredentialIdcsLastModifiedBy',
    'DomainsOauth2clientCredentialMeta',
    'DomainsOauth2clientCredentialScope',
    'DomainsOauth2clientCredentialTag',
    'DomainsOauth2clientCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUser',
    'DomainsOauth2clientCredentialUser',
    'DomainsPasswordPolicyConfiguredPasswordPolicyRule',
    'DomainsPasswordPolicyGroup',
    'DomainsPasswordPolicyIdcsCreatedBy',
    'DomainsPasswordPolicyIdcsLastModifiedBy',
    'DomainsPasswordPolicyMeta',
    'DomainsPasswordPolicyTag',
    'DomainsSecurityQuestionIdcsCreatedBy',
    'DomainsSecurityQuestionIdcsLastModifiedBy',
    'DomainsSecurityQuestionMeta',
    'DomainsSecurityQuestionQuestionText',
    'DomainsSecurityQuestionSettingIdcsCreatedBy',
    'DomainsSecurityQuestionSettingIdcsLastModifiedBy',
    'DomainsSecurityQuestionSettingMeta',
    'DomainsSecurityQuestionSettingTag',
    'DomainsSecurityQuestionTag',
    'DomainsSmtpCredentialIdcsCreatedBy',
    'DomainsSmtpCredentialIdcsLastModifiedBy',
    'DomainsSmtpCredentialMeta',
    'DomainsSmtpCredentialTag',
    'DomainsSmtpCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUser',
    'DomainsSmtpCredentialUser',
    'DomainsUserAddress',
    'DomainsUserDbCredentialIdcsCreatedBy',
    'DomainsUserDbCredentialIdcsLastModifiedBy',
    'DomainsUserDbCredentialMeta',
    'DomainsUserDbCredentialTag',
    'DomainsUserDbCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUser',
    'DomainsUserDbCredentialUser',
    'DomainsUserEmail',
    'DomainsUserEntitlement',
    'DomainsUserGroup',
    'DomainsUserIdcsCreatedBy',
    'DomainsUserIdcsLastModifiedBy',
    'DomainsUserIm',
    'DomainsUserMeta',
    'DomainsUserName',
    'DomainsUserPhoneNumber',
    'DomainsUserPhoto',
    'DomainsUserRole',
    'DomainsUserTag',
    'DomainsUserUrnietfparamsscimschemasextensionenterprise20user',
    'DomainsUserUrnietfparamsscimschemasextensionenterprise20userManager',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionOciTags',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionOciTagsDefinedTag',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionOciTagsFreeformTag',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionadaptiveUser',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionadaptiveUserRiskScore',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensioncapabilitiesUser',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensiondbCredentialsUser',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensiondbUserUser',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensiondbUserUserPasswordVerifier',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionkerberosUserUser',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionkerberosUserUserRealmUser',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUser',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserBypassCode',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserDevice',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserPreferredDevice',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserTrustedUserAgent',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUser',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserApplicablePasswordPolicy',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordlessUser',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordlessUserFactorIdentifier',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionposixUser',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUser',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUserSecQuestion',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionselfChangeUser',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionselfRegistrationUser',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionselfRegistrationUserSelfRegistrationProfile',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionsffUser',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionsocialAccountUser',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionsocialAccountUserSocialAccount',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensiontermsOfUseUser',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensiontermsOfUseUserTermsOfUseConsent',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUser',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserApiKey',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserAuthToken',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserCustomerSecretKey',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserDbCredential',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserOAuth2clientCredential',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserSmtpCredential',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUser',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLocked',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserRecoveryLocked',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUser',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAccount',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAppRole',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserApplicableAuthenticationTargetApp',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserDelegatedAuthenticationTargetApp',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserGrant',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserIdcsAppRolesLimitedToGroup',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserSupportAccount',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserSyncedFromApp',
    'DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserUserToken',
    'DomainsUserX509certificate',
    'NetworkSourceVirtualSourceList',
    'TagValidator',
    'UserCapability',
    'GetAllowedDomainLicenseTypesAllowedDomainLicenseTypeResult',
    'GetAllowedDomainLicenseTypesFilterResult',
    'GetApiKeysApiKeyResult',
    'GetApiKeysFilterResult',
    'GetAuthTokensFilterResult',
    'GetAuthTokensTokenResult',
    'GetAuthenticationPolicyNetworkPolicyResult',
    'GetAuthenticationPolicyPasswordPolicyResult',
    'GetAvailabilityDomainsAvailabilityDomainResult',
    'GetAvailabilityDomainsFilterResult',
    'GetCompartmentsCompartmentResult',
    'GetCompartmentsFilterResult',
    'GetCostTrackingTagsFilterResult',
    'GetCostTrackingTagsTagResult',
    'GetCostTrackingTagsTagValidatorResult',
    'GetCustomerSecretKeysCustomerSecretKeyResult',
    'GetCustomerSecretKeysFilterResult',
    'GetDbCredentialsDbCredentialResult',
    'GetDbCredentialsFilterResult',
    'GetDomainReplicaRegionResult',
    'GetDomainsAccountMgmtInfoAppResult',
    'GetDomainsAccountMgmtInfoIdcsCreatedByResult',
    'GetDomainsAccountMgmtInfoIdcsLastModifiedByResult',
    'GetDomainsAccountMgmtInfoMatchingOwnerResult',
    'GetDomainsAccountMgmtInfoMetaResult',
    'GetDomainsAccountMgmtInfoObjectClassResult',
    'GetDomainsAccountMgmtInfoOwnerResult',
    'GetDomainsAccountMgmtInfoResourceTypeResult',
    'GetDomainsAccountMgmtInfoTagResult',
    'GetDomainsAccountMgmtInfoUserWalletArtifactResult',
    'GetDomainsAccountMgmtInfosAccountMgmtInfoResult',
    'GetDomainsAccountMgmtInfosAccountMgmtInfoAppResult',
    'GetDomainsAccountMgmtInfosAccountMgmtInfoIdcsCreatedByResult',
    'GetDomainsAccountMgmtInfosAccountMgmtInfoIdcsLastModifiedByResult',
    'GetDomainsAccountMgmtInfosAccountMgmtInfoMatchingOwnerResult',
    'GetDomainsAccountMgmtInfosAccountMgmtInfoMetaResult',
    'GetDomainsAccountMgmtInfosAccountMgmtInfoObjectClassResult',
    'GetDomainsAccountMgmtInfosAccountMgmtInfoOwnerResult',
    'GetDomainsAccountMgmtInfosAccountMgmtInfoResourceTypeResult',
    'GetDomainsAccountMgmtInfosAccountMgmtInfoTagResult',
    'GetDomainsAccountMgmtInfosAccountMgmtInfoUserWalletArtifactResult',
    'GetDomainsAccountRecoverySettingIdcsCreatedByResult',
    'GetDomainsAccountRecoverySettingIdcsLastModifiedByResult',
    'GetDomainsAccountRecoverySettingMetaResult',
    'GetDomainsAccountRecoverySettingTagResult',
    'GetDomainsAccountRecoverySettingsAccountRecoverySettingResult',
    'GetDomainsAccountRecoverySettingsAccountRecoverySettingIdcsCreatedByResult',
    'GetDomainsAccountRecoverySettingsAccountRecoverySettingIdcsLastModifiedByResult',
    'GetDomainsAccountRecoverySettingsAccountRecoverySettingMetaResult',
    'GetDomainsAccountRecoverySettingsAccountRecoverySettingTagResult',
    'GetDomainsApiKeyIdcsCreatedByResult',
    'GetDomainsApiKeyIdcsLastModifiedByResult',
    'GetDomainsApiKeyMetaResult',
    'GetDomainsApiKeyTagResult',
    'GetDomainsApiKeyUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult',
    'GetDomainsApiKeyUserResult',
    'GetDomainsApiKeysApiKeyResult',
    'GetDomainsApiKeysApiKeyIdcsCreatedByResult',
    'GetDomainsApiKeysApiKeyIdcsLastModifiedByResult',
    'GetDomainsApiKeysApiKeyMetaResult',
    'GetDomainsApiKeysApiKeyTagResult',
    'GetDomainsApiKeysApiKeyUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult',
    'GetDomainsApiKeysApiKeyUserResult',
    'GetDomainsAppAccountResult',
    'GetDomainsAppAdminRoleResult',
    'GetDomainsAppAliasAppResult',
    'GetDomainsAppAllowedScopeResult',
    'GetDomainsAppAllowedTagResult',
    'GetDomainsAppAppSignonPolicyResult',
    'GetDomainsAppAppsNetworkPerimeterResult',
    'GetDomainsAppAsOpcServiceResult',
    'GetDomainsAppAttrRenderingMetadataResult',
    'GetDomainsAppBasedOnTemplateResult',
    'GetDomainsAppCertificateResult',
    'GetDomainsAppCloudControlPropertyResult',
    'GetDomainsAppEditableAttributeResult',
    'GetDomainsAppGrantResult',
    'GetDomainsAppGrantedAppRoleResult',
    'GetDomainsAppIdcsCreatedByResult',
    'GetDomainsAppIdcsLastModifiedByResult',
    'GetDomainsAppIdentityProviderResult',
    'GetDomainsAppIdpPolicyResult',
    'GetDomainsAppMetaResult',
    'GetDomainsAppProtectableSecondaryAudienceResult',
    'GetDomainsAppRadiusPolicyResult',
    'GetDomainsAppRoleAppResult',
    'GetDomainsAppRoleIdcsCreatedByResult',
    'GetDomainsAppRoleIdcsLastModifiedByResult',
    'GetDomainsAppRoleMemberResult',
    'GetDomainsAppRoleMetaResult',
    'GetDomainsAppRoleTagResult',
    'GetDomainsAppRolesAppRoleResult',
    'GetDomainsAppRolesAppRoleAppResult',
    'GetDomainsAppRolesAppRoleIdcsCreatedByResult',
    'GetDomainsAppRolesAppRoleIdcsLastModifiedByResult',
    'GetDomainsAppRolesAppRoleMemberResult',
    'GetDomainsAppRolesAppRoleMetaResult',
    'GetDomainsAppRolesAppRoleTagResult',
    'GetDomainsAppSamlServiceProviderResult',
    'GetDomainsAppScopeResult',
    'GetDomainsAppServiceParamResult',
    'GetDomainsAppSignonPolicyResult',
    'GetDomainsAppTagResult',
    'GetDomainsAppTermsOfUseResult',
    'GetDomainsAppTrustPolicyResult',
    'GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionOciTagResult',
    'GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTagResult',
    'GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTagResult',
    'GetDomainsAppUrnietfparamsscimschemasoracleidcsextensiondbcsAppResult',
    'GetDomainsAppUrnietfparamsscimschemasoracleidcsextensiondbcsAppDomainAppResult',
    'GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppAppResult',
    'GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppAppAllowAuthzPolicyResult',
    'GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppAppAppResourceResult',
    'GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppAppDenyAuthzPolicyResult',
    'GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppAppResult',
    'GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppAppFormFillUrlMatchResult',
    'GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppTemplateAppTemplateResult',
    'GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppTemplateAppTemplateFormFillUrlMatchResult',
    'GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionkerberosRealmAppResult',
    'GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppResult',
    'GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppBundleConfigurationPropertyResult',
    'GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppBundlePoolConfigurationResult',
    'GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppConnectorBundleResult',
    'GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppFlatFileBundleConfigurationPropertyResult',
    'GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppFlatFileConnectorBundleResult',
    'GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppIdentityBridgeResult',
    'GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppObjectClassResult',
    'GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppThreeLeggedOauthCredentialResult',
    'GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionmulticloudServiceAppAppResult',
    'GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionopcServiceAppResult',
    'GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionradiusAppAppResult',
    'GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionradiusAppAppGroupMembershipToReturnResult',
    'GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionrequestableAppResult',
    'GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppResult',
    'GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppGroupAssertionAttributeResult',
    'GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppOutboundAssertionAttributeResult',
    'GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppUserAssertionAttributeResult',
    'GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionwebTierPolicyAppResult',
    'GetDomainsAppUserRoleResult',
    'GetDomainsAppsAppResult',
    'GetDomainsAppsAppAccountResult',
    'GetDomainsAppsAppAdminRoleResult',
    'GetDomainsAppsAppAliasAppResult',
    'GetDomainsAppsAppAllowedScopeResult',
    'GetDomainsAppsAppAllowedTagResult',
    'GetDomainsAppsAppAppSignonPolicyResult',
    'GetDomainsAppsAppAppsNetworkPerimeterResult',
    'GetDomainsAppsAppAsOpcServiceResult',
    'GetDomainsAppsAppAttrRenderingMetadataResult',
    'GetDomainsAppsAppBasedOnTemplateResult',
    'GetDomainsAppsAppCertificateResult',
    'GetDomainsAppsAppCloudControlPropertyResult',
    'GetDomainsAppsAppEditableAttributeResult',
    'GetDomainsAppsAppGrantResult',
    'GetDomainsAppsAppGrantedAppRoleResult',
    'GetDomainsAppsAppIdcsCreatedByResult',
    'GetDomainsAppsAppIdcsLastModifiedByResult',
    'GetDomainsAppsAppIdentityProviderResult',
    'GetDomainsAppsAppIdpPolicyResult',
    'GetDomainsAppsAppMetaResult',
    'GetDomainsAppsAppProtectableSecondaryAudienceResult',
    'GetDomainsAppsAppRadiusPolicyResult',
    'GetDomainsAppsAppSamlServiceProviderResult',
    'GetDomainsAppsAppScopeResult',
    'GetDomainsAppsAppServiceParamResult',
    'GetDomainsAppsAppSignonPolicyResult',
    'GetDomainsAppsAppTagResult',
    'GetDomainsAppsAppTermsOfUseResult',
    'GetDomainsAppsAppTrustPolicyResult',
    'GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionOciTagResult',
    'GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTagResult',
    'GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTagResult',
    'GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensiondbcsAppResult',
    'GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensiondbcsAppDomainAppResult',
    'GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppAppResult',
    'GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppAppAllowAuthzPolicyResult',
    'GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppAppAppResourceResult',
    'GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppAppDenyAuthzPolicyResult',
    'GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppAppResult',
    'GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppAppFormFillUrlMatchResult',
    'GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppTemplateAppTemplateResult',
    'GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppTemplateAppTemplateFormFillUrlMatchResult',
    'GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionkerberosRealmAppResult',
    'GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppResult',
    'GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppBundleConfigurationPropertyResult',
    'GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppBundlePoolConfigurationResult',
    'GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppConnectorBundleResult',
    'GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppFlatFileBundleConfigurationPropertyResult',
    'GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppFlatFileConnectorBundleResult',
    'GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppIdentityBridgeResult',
    'GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppObjectClassResult',
    'GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppThreeLeggedOauthCredentialResult',
    'GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionmulticloudServiceAppAppResult',
    'GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionopcServiceAppResult',
    'GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionradiusAppAppResult',
    'GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionradiusAppAppGroupMembershipToReturnResult',
    'GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionrequestableAppResult',
    'GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppResult',
    'GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppGroupAssertionAttributeResult',
    'GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppOutboundAssertionAttributeResult',
    'GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppUserAssertionAttributeResult',
    'GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionwebTierPolicyAppResult',
    'GetDomainsAppsAppUserRoleResult',
    'GetDomainsAuthTokenIdcsCreatedByResult',
    'GetDomainsAuthTokenIdcsLastModifiedByResult',
    'GetDomainsAuthTokenMetaResult',
    'GetDomainsAuthTokenTagResult',
    'GetDomainsAuthTokenUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult',
    'GetDomainsAuthTokenUserResult',
    'GetDomainsAuthTokensAuthTokenResult',
    'GetDomainsAuthTokensAuthTokenIdcsCreatedByResult',
    'GetDomainsAuthTokensAuthTokenIdcsLastModifiedByResult',
    'GetDomainsAuthTokensAuthTokenMetaResult',
    'GetDomainsAuthTokensAuthTokenTagResult',
    'GetDomainsAuthTokensAuthTokenUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult',
    'GetDomainsAuthTokensAuthTokenUserResult',
    'GetDomainsAuthenticationFactorSettingBypassCodeSettingResult',
    'GetDomainsAuthenticationFactorSettingClientAppSettingResult',
    'GetDomainsAuthenticationFactorSettingCompliancePolicyResult',
    'GetDomainsAuthenticationFactorSettingEmailSettingResult',
    'GetDomainsAuthenticationFactorSettingEndpointRestrictionResult',
    'GetDomainsAuthenticationFactorSettingIdcsCreatedByResult',
    'GetDomainsAuthenticationFactorSettingIdcsLastModifiedByResult',
    'GetDomainsAuthenticationFactorSettingIdentityStoreSettingResult',
    'GetDomainsAuthenticationFactorSettingMetaResult',
    'GetDomainsAuthenticationFactorSettingNotificationSettingResult',
    'GetDomainsAuthenticationFactorSettingTagResult',
    'GetDomainsAuthenticationFactorSettingThirdPartyFactorResult',
    'GetDomainsAuthenticationFactorSettingTotpSettingResult',
    'GetDomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionfidoAuthenticationFactorSettingResult',
    'GetDomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettingResult',
    'GetDomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettingDuoSecuritySettingResult',
    'GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingResult',
    'GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingBypassCodeSettingResult',
    'GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingClientAppSettingResult',
    'GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingCompliancePolicyResult',
    'GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingEmailSettingResult',
    'GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingEndpointRestrictionResult',
    'GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingIdcsCreatedByResult',
    'GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingIdcsLastModifiedByResult',
    'GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingIdentityStoreSettingResult',
    'GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingMetaResult',
    'GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingNotificationSettingResult',
    'GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingTagResult',
    'GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingThirdPartyFactorResult',
    'GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingTotpSettingResult',
    'GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionfidoAuthenticationFactorSettingResult',
    'GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettingResult',
    'GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettingDuoSecuritySettingResult',
    'GetDomainsCustomerSecretKeyIdcsCreatedByResult',
    'GetDomainsCustomerSecretKeyIdcsLastModifiedByResult',
    'GetDomainsCustomerSecretKeyMetaResult',
    'GetDomainsCustomerSecretKeyTagResult',
    'GetDomainsCustomerSecretKeyUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult',
    'GetDomainsCustomerSecretKeyUserResult',
    'GetDomainsCustomerSecretKeysCustomerSecretKeyResult',
    'GetDomainsCustomerSecretKeysCustomerSecretKeyIdcsCreatedByResult',
    'GetDomainsCustomerSecretKeysCustomerSecretKeyIdcsLastModifiedByResult',
    'GetDomainsCustomerSecretKeysCustomerSecretKeyMetaResult',
    'GetDomainsCustomerSecretKeysCustomerSecretKeyTagResult',
    'GetDomainsCustomerSecretKeysCustomerSecretKeyUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult',
    'GetDomainsCustomerSecretKeysCustomerSecretKeyUserResult',
    'GetDomainsDomainResult',
    'GetDomainsDomainReplicaRegionResult',
    'GetDomainsDynamicResourceGroupDynamicGroupAppRoleResult',
    'GetDomainsDynamicResourceGroupGrantResult',
    'GetDomainsDynamicResourceGroupIdcsCreatedByResult',
    'GetDomainsDynamicResourceGroupIdcsLastModifiedByResult',
    'GetDomainsDynamicResourceGroupMetaResult',
    'GetDomainsDynamicResourceGroupTagResult',
    'GetDomainsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagResult',
    'GetDomainsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTagResult',
    'GetDomainsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTagResult',
    'GetDomainsDynamicResourceGroupsDynamicResourceGroupResult',
    'GetDomainsDynamicResourceGroupsDynamicResourceGroupDynamicGroupAppRoleResult',
    'GetDomainsDynamicResourceGroupsDynamicResourceGroupGrantResult',
    'GetDomainsDynamicResourceGroupsDynamicResourceGroupIdcsCreatedByResult',
    'GetDomainsDynamicResourceGroupsDynamicResourceGroupIdcsLastModifiedByResult',
    'GetDomainsDynamicResourceGroupsDynamicResourceGroupMetaResult',
    'GetDomainsDynamicResourceGroupsDynamicResourceGroupTagResult',
    'GetDomainsDynamicResourceGroupsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagResult',
    'GetDomainsDynamicResourceGroupsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTagResult',
    'GetDomainsDynamicResourceGroupsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTagResult',
    'GetDomainsFilterResult',
    'GetDomainsGrantAppResult',
    'GetDomainsGrantAppEntitlementCollectionResult',
    'GetDomainsGrantEntitlementResult',
    'GetDomainsGrantGranteeResult',
    'GetDomainsGrantGrantorResult',
    'GetDomainsGrantIdcsCreatedByResult',
    'GetDomainsGrantIdcsLastModifiedByResult',
    'GetDomainsGrantMetaResult',
    'GetDomainsGrantTagResult',
    'GetDomainsGrantsGrantResult',
    'GetDomainsGrantsGrantAppResult',
    'GetDomainsGrantsGrantAppEntitlementCollectionResult',
    'GetDomainsGrantsGrantEntitlementResult',
    'GetDomainsGrantsGrantGranteeResult',
    'GetDomainsGrantsGrantGrantorResult',
    'GetDomainsGrantsGrantIdcsCreatedByResult',
    'GetDomainsGrantsGrantIdcsLastModifiedByResult',
    'GetDomainsGrantsGrantMetaResult',
    'GetDomainsGrantsGrantTagResult',
    'GetDomainsGroupIdcsCreatedByResult',
    'GetDomainsGroupIdcsLastModifiedByResult',
    'GetDomainsGroupMemberResult',
    'GetDomainsGroupMetaResult',
    'GetDomainsGroupTagResult',
    'GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagResult',
    'GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTagResult',
    'GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTagResult',
    'GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupResult',
    'GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupDomainLevelSchemaNameResult',
    'GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupInstanceLevelSchemaNameResult',
    'GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiondynamicGroupResult',
    'GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupResult',
    'GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupAppRoleResult',
    'GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupGrantResult',
    'GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupOwnerResult',
    'GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupPasswordPolicyResult',
    'GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupSyncedFromAppResult',
    'GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensionposixGroupResult',
    'GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensionrequestableGroupResult',
    'GetDomainsGroupsGroupResult',
    'GetDomainsGroupsGroupIdcsCreatedByResult',
    'GetDomainsGroupsGroupIdcsLastModifiedByResult',
    'GetDomainsGroupsGroupMemberResult',
    'GetDomainsGroupsGroupMetaResult',
    'GetDomainsGroupsGroupTagResult',
    'GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagResult',
    'GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTagResult',
    'GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTagResult',
    'GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupResult',
    'GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupDomainLevelSchemaNameResult',
    'GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupInstanceLevelSchemaNameResult',
    'GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiondynamicGroupResult',
    'GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupResult',
    'GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupAppRoleResult',
    'GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupGrantResult',
    'GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupOwnerResult',
    'GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupPasswordPolicyResult',
    'GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupSyncedFromAppResult',
    'GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensionposixGroupResult',
    'GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensionrequestableGroupResult',
    'GetDomainsIdentityProviderCorrelationPolicyResult',
    'GetDomainsIdentityProviderIdcsCreatedByResult',
    'GetDomainsIdentityProviderIdcsLastModifiedByResult',
    'GetDomainsIdentityProviderJitUserProvAssignedGroupResult',
    'GetDomainsIdentityProviderJitUserProvAttributeResult',
    'GetDomainsIdentityProviderJitUserProvGroupMappingResult',
    'GetDomainsIdentityProviderMetaResult',
    'GetDomainsIdentityProviderTagResult',
    'GetDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProviderResult',
    'GetDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionx509identityProviderResult',
    'GetDomainsIdentityProvidersIdentityProviderResult',
    'GetDomainsIdentityProvidersIdentityProviderCorrelationPolicyResult',
    'GetDomainsIdentityProvidersIdentityProviderIdcsCreatedByResult',
    'GetDomainsIdentityProvidersIdentityProviderIdcsLastModifiedByResult',
    'GetDomainsIdentityProvidersIdentityProviderJitUserProvAssignedGroupResult',
    'GetDomainsIdentityProvidersIdentityProviderJitUserProvAttributeResult',
    'GetDomainsIdentityProvidersIdentityProviderJitUserProvGroupMappingResult',
    'GetDomainsIdentityProvidersIdentityProviderMetaResult',
    'GetDomainsIdentityProvidersIdentityProviderTagResult',
    'GetDomainsIdentityProvidersIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProviderResult',
    'GetDomainsIdentityProvidersIdentityProviderUrnietfparamsscimschemasoracleidcsextensionx509identityProviderResult',
    'GetDomainsIdentitySettingIdcsCreatedByResult',
    'GetDomainsIdentitySettingIdcsLastModifiedByResult',
    'GetDomainsIdentitySettingMetaResult',
    'GetDomainsIdentitySettingMyProfileResult',
    'GetDomainsIdentitySettingPosixGidResult',
    'GetDomainsIdentitySettingPosixUidResult',
    'GetDomainsIdentitySettingTagResult',
    'GetDomainsIdentitySettingTokenResult',
    'GetDomainsIdentitySettingsIdentitySettingResult',
    'GetDomainsIdentitySettingsIdentitySettingIdcsCreatedByResult',
    'GetDomainsIdentitySettingsIdentitySettingIdcsLastModifiedByResult',
    'GetDomainsIdentitySettingsIdentitySettingMetaResult',
    'GetDomainsIdentitySettingsIdentitySettingMyProfileResult',
    'GetDomainsIdentitySettingsIdentitySettingPosixGidResult',
    'GetDomainsIdentitySettingsIdentitySettingPosixUidResult',
    'GetDomainsIdentitySettingsIdentitySettingTagResult',
    'GetDomainsIdentitySettingsIdentitySettingTokenResult',
    'GetDomainsKmsiSettingIdcsCreatedByResult',
    'GetDomainsKmsiSettingIdcsLastModifiedByResult',
    'GetDomainsKmsiSettingMetaResult',
    'GetDomainsKmsiSettingTagResult',
    'GetDomainsKmsiSettingsKmsiSettingResult',
    'GetDomainsKmsiSettingsKmsiSettingIdcsCreatedByResult',
    'GetDomainsKmsiSettingsKmsiSettingIdcsLastModifiedByResult',
    'GetDomainsKmsiSettingsKmsiSettingMetaResult',
    'GetDomainsKmsiSettingsKmsiSettingTagResult',
    'GetDomainsMyApiKeyIdcsCreatedByResult',
    'GetDomainsMyApiKeyIdcsLastModifiedByResult',
    'GetDomainsMyApiKeyMetaResult',
    'GetDomainsMyApiKeyTagResult',
    'GetDomainsMyApiKeyUserResult',
    'GetDomainsMyApiKeysMyApiKeyResult',
    'GetDomainsMyApiKeysMyApiKeyIdcsCreatedByResult',
    'GetDomainsMyApiKeysMyApiKeyIdcsLastModifiedByResult',
    'GetDomainsMyApiKeysMyApiKeyMetaResult',
    'GetDomainsMyApiKeysMyApiKeyTagResult',
    'GetDomainsMyApiKeysMyApiKeyUserResult',
    'GetDomainsMyAppsMyAppResult',
    'GetDomainsMyAppsMyAppAppResult',
    'GetDomainsMyAppsMyAppIdcsCreatedByResult',
    'GetDomainsMyAppsMyAppIdcsLastModifiedByResult',
    'GetDomainsMyAppsMyAppMetaResult',
    'GetDomainsMyAppsMyAppOwnerResult',
    'GetDomainsMyAppsMyAppTagResult',
    'GetDomainsMyAppsMyAppUserWalletArtifactResult',
    'GetDomainsMyAuthTokenIdcsCreatedByResult',
    'GetDomainsMyAuthTokenIdcsLastModifiedByResult',
    'GetDomainsMyAuthTokenMetaResult',
    'GetDomainsMyAuthTokenTagResult',
    'GetDomainsMyAuthTokenUserResult',
    'GetDomainsMyAuthTokensMyAuthTokenResult',
    'GetDomainsMyAuthTokensMyAuthTokenIdcsCreatedByResult',
    'GetDomainsMyAuthTokensMyAuthTokenIdcsLastModifiedByResult',
    'GetDomainsMyAuthTokensMyAuthTokenMetaResult',
    'GetDomainsMyAuthTokensMyAuthTokenTagResult',
    'GetDomainsMyAuthTokensMyAuthTokenUserResult',
    'GetDomainsMyCustomerSecretKeyIdcsCreatedByResult',
    'GetDomainsMyCustomerSecretKeyIdcsLastModifiedByResult',
    'GetDomainsMyCustomerSecretKeyMetaResult',
    'GetDomainsMyCustomerSecretKeyTagResult',
    'GetDomainsMyCustomerSecretKeyUserResult',
    'GetDomainsMyCustomerSecretKeysMyCustomerSecretKeyResult',
    'GetDomainsMyCustomerSecretKeysMyCustomerSecretKeyIdcsCreatedByResult',
    'GetDomainsMyCustomerSecretKeysMyCustomerSecretKeyIdcsLastModifiedByResult',
    'GetDomainsMyCustomerSecretKeysMyCustomerSecretKeyMetaResult',
    'GetDomainsMyCustomerSecretKeysMyCustomerSecretKeyTagResult',
    'GetDomainsMyCustomerSecretKeysMyCustomerSecretKeyUserResult',
    'GetDomainsMyDeviceAdditionalAttributeResult',
    'GetDomainsMyDeviceAuthenticationFactorResult',
    'GetDomainsMyDeviceIdcsCreatedByResult',
    'GetDomainsMyDeviceIdcsLastModifiedByResult',
    'GetDomainsMyDeviceMetaResult',
    'GetDomainsMyDeviceNonComplianceResult',
    'GetDomainsMyDevicePushNotificationTargetResult',
    'GetDomainsMyDeviceTagResult',
    'GetDomainsMyDeviceThirdPartyFactorResult',
    'GetDomainsMyDeviceUserResult',
    'GetDomainsMyDevicesMyDeviceResult',
    'GetDomainsMyDevicesMyDeviceAdditionalAttributeResult',
    'GetDomainsMyDevicesMyDeviceAuthenticationFactorResult',
    'GetDomainsMyDevicesMyDeviceIdcsCreatedByResult',
    'GetDomainsMyDevicesMyDeviceIdcsLastModifiedByResult',
    'GetDomainsMyDevicesMyDeviceMetaResult',
    'GetDomainsMyDevicesMyDeviceNonComplianceResult',
    'GetDomainsMyDevicesMyDevicePushNotificationTargetResult',
    'GetDomainsMyDevicesMyDeviceTagResult',
    'GetDomainsMyDevicesMyDeviceThirdPartyFactorResult',
    'GetDomainsMyDevicesMyDeviceUserResult',
    'GetDomainsMyGroupsMyGroupResult',
    'GetDomainsMyGroupsMyGroupIdcsCreatedByResult',
    'GetDomainsMyGroupsMyGroupIdcsLastModifiedByResult',
    'GetDomainsMyGroupsMyGroupMemberResult',
    'GetDomainsMyGroupsMyGroupMetaResult',
    'GetDomainsMyGroupsMyGroupTagResult',
    'GetDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupResult',
    'GetDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupAppRoleResult',
    'GetDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupGrantResult',
    'GetDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupOwnerResult',
    'GetDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupPasswordPolicyResult',
    'GetDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupSyncedFromAppResult',
    'GetDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensionposixGroupResult',
    'GetDomainsMyOauth2clientCredentialIdcsCreatedByResult',
    'GetDomainsMyOauth2clientCredentialIdcsLastModifiedByResult',
    'GetDomainsMyOauth2clientCredentialMetaResult',
    'GetDomainsMyOauth2clientCredentialScopeResult',
    'GetDomainsMyOauth2clientCredentialTagResult',
    'GetDomainsMyOauth2clientCredentialUserResult',
    'GetDomainsMyOauth2clientCredentialsMyOauth2clientCredentialResult',
    'GetDomainsMyOauth2clientCredentialsMyOauth2clientCredentialIdcsCreatedByResult',
    'GetDomainsMyOauth2clientCredentialsMyOauth2clientCredentialIdcsLastModifiedByResult',
    'GetDomainsMyOauth2clientCredentialsMyOauth2clientCredentialMetaResult',
    'GetDomainsMyOauth2clientCredentialsMyOauth2clientCredentialScopeResult',
    'GetDomainsMyOauth2clientCredentialsMyOauth2clientCredentialTagResult',
    'GetDomainsMyOauth2clientCredentialsMyOauth2clientCredentialUserResult',
    'GetDomainsMyRequestableGroupsMyRequestableGroupResult',
    'GetDomainsMyRequestableGroupsMyRequestableGroupIdcsCreatedByResult',
    'GetDomainsMyRequestableGroupsMyRequestableGroupIdcsLastModifiedByResult',
    'GetDomainsMyRequestableGroupsMyRequestableGroupMemberResult',
    'GetDomainsMyRequestableGroupsMyRequestableGroupMetaResult',
    'GetDomainsMyRequestableGroupsMyRequestableGroupTagResult',
    'GetDomainsMyRequestableGroupsMyRequestableGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupResult',
    'GetDomainsMyRequestableGroupsMyRequestableGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupAppRoleResult',
    'GetDomainsMyRequestableGroupsMyRequestableGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupGrantResult',
    'GetDomainsMyRequestableGroupsMyRequestableGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupOwnerResult',
    'GetDomainsMyRequestableGroupsMyRequestableGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupPasswordPolicyResult',
    'GetDomainsMyRequestableGroupsMyRequestableGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupSyncedFromAppResult',
    'GetDomainsMyRequestableGroupsMyRequestableGroupUrnietfparamsscimschemasoracleidcsextensionrequestableGroupResult',
    'GetDomainsMyRequestsMyRequestResult',
    'GetDomainsMyRequestsMyRequestIdcsCreatedByResult',
    'GetDomainsMyRequestsMyRequestIdcsLastModifiedByResult',
    'GetDomainsMyRequestsMyRequestMetaResult',
    'GetDomainsMyRequestsMyRequestRequestingResult',
    'GetDomainsMyRequestsMyRequestRequestorResult',
    'GetDomainsMyRequestsMyRequestTagResult',
    'GetDomainsMySmtpCredentialIdcsCreatedByResult',
    'GetDomainsMySmtpCredentialIdcsLastModifiedByResult',
    'GetDomainsMySmtpCredentialMetaResult',
    'GetDomainsMySmtpCredentialTagResult',
    'GetDomainsMySmtpCredentialUserResult',
    'GetDomainsMySmtpCredentialsMySmtpCredentialResult',
    'GetDomainsMySmtpCredentialsMySmtpCredentialIdcsCreatedByResult',
    'GetDomainsMySmtpCredentialsMySmtpCredentialIdcsLastModifiedByResult',
    'GetDomainsMySmtpCredentialsMySmtpCredentialMetaResult',
    'GetDomainsMySmtpCredentialsMySmtpCredentialTagResult',
    'GetDomainsMySmtpCredentialsMySmtpCredentialUserResult',
    'GetDomainsMySupportAccountIdcsCreatedByResult',
    'GetDomainsMySupportAccountIdcsLastModifiedByResult',
    'GetDomainsMySupportAccountMetaResult',
    'GetDomainsMySupportAccountTagResult',
    'GetDomainsMySupportAccountUserResult',
    'GetDomainsMySupportAccountsMySupportAccountResult',
    'GetDomainsMySupportAccountsMySupportAccountIdcsCreatedByResult',
    'GetDomainsMySupportAccountsMySupportAccountIdcsLastModifiedByResult',
    'GetDomainsMySupportAccountsMySupportAccountMetaResult',
    'GetDomainsMySupportAccountsMySupportAccountTagResult',
    'GetDomainsMySupportAccountsMySupportAccountUserResult',
    'GetDomainsMyTrustedUserAgentIdcsCreatedByResult',
    'GetDomainsMyTrustedUserAgentIdcsLastModifiedByResult',
    'GetDomainsMyTrustedUserAgentMetaResult',
    'GetDomainsMyTrustedUserAgentTagResult',
    'GetDomainsMyTrustedUserAgentTrustedFactorResult',
    'GetDomainsMyTrustedUserAgentUserResult',
    'GetDomainsMyTrustedUserAgentsMyTrustedUserAgentResult',
    'GetDomainsMyTrustedUserAgentsMyTrustedUserAgentIdcsCreatedByResult',
    'GetDomainsMyTrustedUserAgentsMyTrustedUserAgentIdcsLastModifiedByResult',
    'GetDomainsMyTrustedUserAgentsMyTrustedUserAgentMetaResult',
    'GetDomainsMyTrustedUserAgentsMyTrustedUserAgentTagResult',
    'GetDomainsMyTrustedUserAgentsMyTrustedUserAgentTrustedFactorResult',
    'GetDomainsMyTrustedUserAgentsMyTrustedUserAgentUserResult',
    'GetDomainsMyUserDbCredentialIdcsCreatedByResult',
    'GetDomainsMyUserDbCredentialIdcsLastModifiedByResult',
    'GetDomainsMyUserDbCredentialMetaResult',
    'GetDomainsMyUserDbCredentialTagResult',
    'GetDomainsMyUserDbCredentialUserResult',
    'GetDomainsMyUserDbCredentialsMyUserDbCredentialResult',
    'GetDomainsMyUserDbCredentialsMyUserDbCredentialIdcsCreatedByResult',
    'GetDomainsMyUserDbCredentialsMyUserDbCredentialIdcsLastModifiedByResult',
    'GetDomainsMyUserDbCredentialsMyUserDbCredentialMetaResult',
    'GetDomainsMyUserDbCredentialsMyUserDbCredentialTagResult',
    'GetDomainsMyUserDbCredentialsMyUserDbCredentialUserResult',
    'GetDomainsOauth2clientCredentialIdcsCreatedByResult',
    'GetDomainsOauth2clientCredentialIdcsLastModifiedByResult',
    'GetDomainsOauth2clientCredentialMetaResult',
    'GetDomainsOauth2clientCredentialScopeResult',
    'GetDomainsOauth2clientCredentialTagResult',
    'GetDomainsOauth2clientCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult',
    'GetDomainsOauth2clientCredentialUserResult',
    'GetDomainsOauth2clientCredentialsOauth2clientCredentialResult',
    'GetDomainsOauth2clientCredentialsOauth2clientCredentialIdcsCreatedByResult',
    'GetDomainsOauth2clientCredentialsOauth2clientCredentialIdcsLastModifiedByResult',
    'GetDomainsOauth2clientCredentialsOauth2clientCredentialMetaResult',
    'GetDomainsOauth2clientCredentialsOauth2clientCredentialScopeResult',
    'GetDomainsOauth2clientCredentialsOauth2clientCredentialTagResult',
    'GetDomainsOauth2clientCredentialsOauth2clientCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult',
    'GetDomainsOauth2clientCredentialsOauth2clientCredentialUserResult',
    'GetDomainsPasswordPoliciesPasswordPolicyResult',
    'GetDomainsPasswordPoliciesPasswordPolicyConfiguredPasswordPolicyRuleResult',
    'GetDomainsPasswordPoliciesPasswordPolicyGroupResult',
    'GetDomainsPasswordPoliciesPasswordPolicyIdcsCreatedByResult',
    'GetDomainsPasswordPoliciesPasswordPolicyIdcsLastModifiedByResult',
    'GetDomainsPasswordPoliciesPasswordPolicyMetaResult',
    'GetDomainsPasswordPoliciesPasswordPolicyTagResult',
    'GetDomainsPasswordPolicyConfiguredPasswordPolicyRuleResult',
    'GetDomainsPasswordPolicyGroupResult',
    'GetDomainsPasswordPolicyIdcsCreatedByResult',
    'GetDomainsPasswordPolicyIdcsLastModifiedByResult',
    'GetDomainsPasswordPolicyMetaResult',
    'GetDomainsPasswordPolicyTagResult',
    'GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeResult',
    'GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeIdcsCreatedByResult',
    'GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeIdcsLastModifiedByResult',
    'GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeMetaResult',
    'GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeTagResult',
    'GetDomainsSecurityQuestionIdcsCreatedByResult',
    'GetDomainsSecurityQuestionIdcsLastModifiedByResult',
    'GetDomainsSecurityQuestionMetaResult',
    'GetDomainsSecurityQuestionQuestionTextResult',
    'GetDomainsSecurityQuestionSettingIdcsCreatedByResult',
    'GetDomainsSecurityQuestionSettingIdcsLastModifiedByResult',
    'GetDomainsSecurityQuestionSettingMetaResult',
    'GetDomainsSecurityQuestionSettingTagResult',
    'GetDomainsSecurityQuestionSettingsSecurityQuestionSettingResult',
    'GetDomainsSecurityQuestionSettingsSecurityQuestionSettingIdcsCreatedByResult',
    'GetDomainsSecurityQuestionSettingsSecurityQuestionSettingIdcsLastModifiedByResult',
    'GetDomainsSecurityQuestionSettingsSecurityQuestionSettingMetaResult',
    'GetDomainsSecurityQuestionSettingsSecurityQuestionSettingTagResult',
    'GetDomainsSecurityQuestionTagResult',
    'GetDomainsSecurityQuestionsSecurityQuestionResult',
    'GetDomainsSecurityQuestionsSecurityQuestionIdcsCreatedByResult',
    'GetDomainsSecurityQuestionsSecurityQuestionIdcsLastModifiedByResult',
    'GetDomainsSecurityQuestionsSecurityQuestionMetaResult',
    'GetDomainsSecurityQuestionsSecurityQuestionQuestionTextResult',
    'GetDomainsSecurityQuestionsSecurityQuestionTagResult',
    'GetDomainsSmtpCredentialIdcsCreatedByResult',
    'GetDomainsSmtpCredentialIdcsLastModifiedByResult',
    'GetDomainsSmtpCredentialMetaResult',
    'GetDomainsSmtpCredentialTagResult',
    'GetDomainsSmtpCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult',
    'GetDomainsSmtpCredentialUserResult',
    'GetDomainsSmtpCredentialsSmtpCredentialResult',
    'GetDomainsSmtpCredentialsSmtpCredentialIdcsCreatedByResult',
    'GetDomainsSmtpCredentialsSmtpCredentialIdcsLastModifiedByResult',
    'GetDomainsSmtpCredentialsSmtpCredentialMetaResult',
    'GetDomainsSmtpCredentialsSmtpCredentialTagResult',
    'GetDomainsSmtpCredentialsSmtpCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult',
    'GetDomainsSmtpCredentialsSmtpCredentialUserResult',
    'GetDomainsUserAddressResult',
    'GetDomainsUserAttributesSettingAttributeSettingResult',
    'GetDomainsUserAttributesSettingIdcsCreatedByResult',
    'GetDomainsUserAttributesSettingIdcsLastModifiedByResult',
    'GetDomainsUserAttributesSettingMetaResult',
    'GetDomainsUserAttributesSettingTagResult',
    'GetDomainsUserAttributesSettingsUserAttributesSettingResult',
    'GetDomainsUserAttributesSettingsUserAttributesSettingAttributeSettingResult',
    'GetDomainsUserAttributesSettingsUserAttributesSettingIdcsCreatedByResult',
    'GetDomainsUserAttributesSettingsUserAttributesSettingIdcsLastModifiedByResult',
    'GetDomainsUserAttributesSettingsUserAttributesSettingMetaResult',
    'GetDomainsUserAttributesSettingsUserAttributesSettingTagResult',
    'GetDomainsUserDbCredentialIdcsCreatedByResult',
    'GetDomainsUserDbCredentialIdcsLastModifiedByResult',
    'GetDomainsUserDbCredentialMetaResult',
    'GetDomainsUserDbCredentialTagResult',
    'GetDomainsUserDbCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult',
    'GetDomainsUserDbCredentialUserResult',
    'GetDomainsUserDbCredentialsUserDbCredentialResult',
    'GetDomainsUserDbCredentialsUserDbCredentialIdcsCreatedByResult',
    'GetDomainsUserDbCredentialsUserDbCredentialIdcsLastModifiedByResult',
    'GetDomainsUserDbCredentialsUserDbCredentialMetaResult',
    'GetDomainsUserDbCredentialsUserDbCredentialTagResult',
    'GetDomainsUserDbCredentialsUserDbCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult',
    'GetDomainsUserDbCredentialsUserDbCredentialUserResult',
    'GetDomainsUserEmailResult',
    'GetDomainsUserEntitlementResult',
    'GetDomainsUserGroupResult',
    'GetDomainsUserIdcsCreatedByResult',
    'GetDomainsUserIdcsLastModifiedByResult',
    'GetDomainsUserImResult',
    'GetDomainsUserMetaResult',
    'GetDomainsUserNameResult',
    'GetDomainsUserPhoneNumberResult',
    'GetDomainsUserPhotoResult',
    'GetDomainsUserRoleResult',
    'GetDomainsUserTagResult',
    'GetDomainsUserUrnietfparamsscimschemasextensionenterprise20userResult',
    'GetDomainsUserUrnietfparamsscimschemasextensionenterprise20userManagerResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionOciTagResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTagResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTagResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionadaptiveUserResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionadaptiveUserRiskScoreResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensioncapabilitiesUserResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensiondbCredentialsUserResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensiondbUserUserResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensiondbUserUserPasswordVerifierResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionkerberosUserUserResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionkerberosUserUserRealmUserResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserBypassCodeResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserDeviceResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserPreferredDeviceResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserTrustedUserAgentResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserApplicablePasswordPolicyResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordlessUserResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordlessUserFactorIdentifierResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionposixUserResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUserResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUserSecQuestionResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionselfRegistrationUserResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionselfRegistrationUserSelfRegistrationProfileResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionsffUserResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionsocialAccountUserResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionsocialAccountUserSocialAccountResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensiontermsOfUseUserResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensiontermsOfUseUserTermsOfUseConsentResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserApiKeyResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserAuthTokenResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserCustomerSecretKeyResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserDbCredentialResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserOAuth2clientCredentialResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserSmtpCredentialResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLockedResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserRecoveryLockedResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAccountResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAppRoleResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserApplicableAuthenticationTargetAppResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserDelegatedAuthenticationTargetAppResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserGrantResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserIdcsAppRolesLimitedToGroupResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserSupportAccountResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserSyncedFromAppResult',
    'GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserUserTokenResult',
    'GetDomainsUserX509certificateResult',
    'GetDomainsUsersUserResult',
    'GetDomainsUsersUserAddressResult',
    'GetDomainsUsersUserEmailResult',
    'GetDomainsUsersUserEntitlementResult',
    'GetDomainsUsersUserGroupResult',
    'GetDomainsUsersUserIdcsCreatedByResult',
    'GetDomainsUsersUserIdcsLastModifiedByResult',
    'GetDomainsUsersUserImResult',
    'GetDomainsUsersUserMetaResult',
    'GetDomainsUsersUserNameResult',
    'GetDomainsUsersUserPhoneNumberResult',
    'GetDomainsUsersUserPhotoResult',
    'GetDomainsUsersUserRoleResult',
    'GetDomainsUsersUserTagResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasextensionenterprise20userResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasextensionenterprise20userManagerResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionOciTagResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTagResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTagResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionadaptiveUserResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionadaptiveUserRiskScoreResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensioncapabilitiesUserResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensiondbCredentialsUserResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensiondbUserUserResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensiondbUserUserPasswordVerifierResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionkerberosUserUserResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionkerberosUserUserRealmUserResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserBypassCodeResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserDeviceResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserPreferredDeviceResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserTrustedUserAgentResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserApplicablePasswordPolicyResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionpasswordlessUserResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionpasswordlessUserFactorIdentifierResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionposixUserResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUserResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUserSecQuestionResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionselfRegistrationUserResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionselfRegistrationUserSelfRegistrationProfileResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionsffUserResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionsocialAccountUserResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionsocialAccountUserSocialAccountResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensiontermsOfUseUserResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensiontermsOfUseUserTermsOfUseConsentResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserApiKeyResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserAuthTokenResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserCustomerSecretKeyResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserDbCredentialResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserOAuth2clientCredentialResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserSmtpCredentialResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLockedResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserRecoveryLockedResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserAccountResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserAppRoleResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserApplicableAuthenticationTargetAppResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserDelegatedAuthenticationTargetAppResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserGrantResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserIdcsAppRolesLimitedToGroupResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserSupportAccountResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserSyncedFromAppResult',
    'GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserUserTokenResult',
    'GetDomainsUsersUserX509certificateResult',
    'GetDynamicGroupsDynamicGroupResult',
    'GetDynamicGroupsFilterResult',
    'GetFaultDomainsFaultDomainResult',
    'GetFaultDomainsFilterResult',
    'GetGroupsFilterResult',
    'GetGroupsGroupResult',
    'GetIamWorkRequestErrorsFilterResult',
    'GetIamWorkRequestErrorsIamWorkRequestErrorResult',
    'GetIamWorkRequestLogsFilterResult',
    'GetIamWorkRequestLogsIamWorkRequestLogResult',
    'GetIamWorkRequestResourceResult',
    'GetIamWorkRequestsFilterResult',
    'GetIamWorkRequestsIamWorkRequestResult',
    'GetIamWorkRequestsIamWorkRequestResourceResult',
    'GetIdentityProviderGroupsFilterResult',
    'GetIdentityProviderGroupsIdentityProviderGroupResult',
    'GetIdentityProvidersFilterResult',
    'GetIdentityProvidersIdentityProviderResult',
    'GetIdpGroupMappingsFilterResult',
    'GetIdpGroupMappingsIdpGroupMappingResult',
    'GetNetworkSourceVirtualSourceListResult',
    'GetNetworkSourcesFilterResult',
    'GetNetworkSourcesNetworkSourceResult',
    'GetNetworkSourcesNetworkSourceVirtualSourceListResult',
    'GetPoliciesFilterResult',
    'GetPoliciesPolicyResult',
    'GetRegionSubscriptionsFilterResult',
    'GetRegionSubscriptionsRegionSubscriptionResult',
    'GetRegionsFilterResult',
    'GetRegionsRegionResult',
    'GetSmtpCredentialsFilterResult',
    'GetSmtpCredentialsSmtpCredentialResult',
    'GetTagDefaultsFilterResult',
    'GetTagDefaultsTagDefaultResult',
    'GetTagNamespacesFilterResult',
    'GetTagNamespacesTagNamespaceResult',
    'GetTagStandardTagNamespaceTemplateTagDefinitionTemplateResult',
    'GetTagStandardTagNamespaceTemplatesFilterResult',
    'GetTagStandardTagNamespaceTemplatesStandardTagNamespaceTemplateResult',
    'GetTagValidatorResult',
    'GetTagsFilterResult',
    'GetTagsTagResult',
    'GetTagsTagValidatorResult',
    'GetUserCapabilityResult',
    'GetUserGroupMembershipsFilterResult',
    'GetUserGroupMembershipsMembershipResult',
    'GetUsersFilterResult',
    'GetUsersUserResult',
    'GetUsersUserCapabilityResult',
]

@pulumi.output_type
class AuthenticationPolicyNetworkPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkSourceIds":
            suggest = "network_source_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AuthenticationPolicyNetworkPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AuthenticationPolicyNetworkPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AuthenticationPolicyNetworkPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 network_source_ids: Optional[Sequence[str]] = None):
        if network_source_ids is not None:
            pulumi.set(__self__, "network_source_ids", network_source_ids)

    @property
    @pulumi.getter(name="networkSourceIds")
    def network_source_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "network_source_ids")


@pulumi.output_type
class AuthenticationPolicyPasswordPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isLowercaseCharactersRequired":
            suggest = "is_lowercase_characters_required"
        elif key == "isNumericCharactersRequired":
            suggest = "is_numeric_characters_required"
        elif key == "isSpecialCharactersRequired":
            suggest = "is_special_characters_required"
        elif key == "isUppercaseCharactersRequired":
            suggest = "is_uppercase_characters_required"
        elif key == "isUsernameContainmentAllowed":
            suggest = "is_username_containment_allowed"
        elif key == "minimumPasswordLength":
            suggest = "minimum_password_length"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AuthenticationPolicyPasswordPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AuthenticationPolicyPasswordPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AuthenticationPolicyPasswordPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_lowercase_characters_required: Optional[bool] = None,
                 is_numeric_characters_required: Optional[bool] = None,
                 is_special_characters_required: Optional[bool] = None,
                 is_uppercase_characters_required: Optional[bool] = None,
                 is_username_containment_allowed: Optional[bool] = None,
                 minimum_password_length: Optional[int] = None):
        if is_lowercase_characters_required is not None:
            pulumi.set(__self__, "is_lowercase_characters_required", is_lowercase_characters_required)
        if is_numeric_characters_required is not None:
            pulumi.set(__self__, "is_numeric_characters_required", is_numeric_characters_required)
        if is_special_characters_required is not None:
            pulumi.set(__self__, "is_special_characters_required", is_special_characters_required)
        if is_uppercase_characters_required is not None:
            pulumi.set(__self__, "is_uppercase_characters_required", is_uppercase_characters_required)
        if is_username_containment_allowed is not None:
            pulumi.set(__self__, "is_username_containment_allowed", is_username_containment_allowed)
        if minimum_password_length is not None:
            pulumi.set(__self__, "minimum_password_length", minimum_password_length)

    @property
    @pulumi.getter(name="isLowercaseCharactersRequired")
    def is_lowercase_characters_required(self) -> Optional[bool]:
        return pulumi.get(self, "is_lowercase_characters_required")

    @property
    @pulumi.getter(name="isNumericCharactersRequired")
    def is_numeric_characters_required(self) -> Optional[bool]:
        return pulumi.get(self, "is_numeric_characters_required")

    @property
    @pulumi.getter(name="isSpecialCharactersRequired")
    def is_special_characters_required(self) -> Optional[bool]:
        return pulumi.get(self, "is_special_characters_required")

    @property
    @pulumi.getter(name="isUppercaseCharactersRequired")
    def is_uppercase_characters_required(self) -> Optional[bool]:
        return pulumi.get(self, "is_uppercase_characters_required")

    @property
    @pulumi.getter(name="isUsernameContainmentAllowed")
    def is_username_containment_allowed(self) -> Optional[bool]:
        return pulumi.get(self, "is_username_containment_allowed")

    @property
    @pulumi.getter(name="minimumPasswordLength")
    def minimum_password_length(self) -> Optional[int]:
        return pulumi.get(self, "minimum_password_length")


@pulumi.output_type
class DomainReplicaRegion(dict):
    def __init__(__self__, *,
                 region: Optional[str] = None,
                 state: Optional[str] = None,
                 url: Optional[str] = None):
        if region is not None:
            pulumi.set(__self__, "region", region)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")


@pulumi.output_type
class DomainsAccountRecoverySettingIdcsCreatedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsAccountRecoverySettingIdcsLastModifiedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsAccountRecoverySettingMeta(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastModified":
            suggest = "last_modified"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsAccountRecoverySettingMeta. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsAccountRecoverySettingMeta.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsAccountRecoverySettingMeta.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class DomainsAccountRecoverySettingTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsApiKeyIdcsCreatedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsApiKeyIdcsLastModifiedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsApiKeyMeta(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastModified":
            suggest = "last_modified"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsApiKeyMeta. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsApiKeyMeta.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsApiKeyMeta.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class DomainsApiKeyTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsApiKeyUrnietfparamsscimschemasoracleidcsextensionselfChangeUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowSelfChange":
            suggest = "allow_self_change"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsApiKeyUrnietfparamsscimschemasoracleidcsextensionselfChangeUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsApiKeyUrnietfparamsscimschemasoracleidcsextensionselfChangeUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsApiKeyUrnietfparamsscimschemasoracleidcsextensionselfChangeUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_self_change: Optional[bool] = None):
        if allow_self_change is not None:
            pulumi.set(__self__, "allow_self_change", allow_self_change)

    @property
    @pulumi.getter(name="allowSelfChange")
    def allow_self_change(self) -> Optional[bool]:
        return pulumi.get(self, "allow_self_change")


@pulumi.output_type
class DomainsApiKeyUser(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsAppAccount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ownerId":
            suggest = "owner_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsAppAccount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsAppAccount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsAppAccount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 active: Optional[bool] = None,
                 name: Optional[str] = None,
                 owner_id: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if active is not None:
            pulumi.set(__self__, "active", active)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def active(self) -> Optional[bool]:
        return pulumi.get(self, "active")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[str]:
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsAppAdminRole(dict):
    def __init__(__self__, *,
                 value: str,
                 description: Optional[str] = None,
                 display: Optional[str] = None,
                 ref: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsAppAliasApp(dict):
    def __init__(__self__, *,
                 value: str,
                 description: Optional[str] = None,
                 display: Optional[str] = None,
                 ref: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsAppAllowedScope(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "idOfDefiningApp":
            suggest = "id_of_defining_app"
        elif key == "readOnly":
            suggest = "read_only"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsAppAllowedScope. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsAppAllowedScope.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsAppAllowedScope.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 fqs: str,
                 id_of_defining_app: Optional[str] = None,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "fqs", fqs)
        if id_of_defining_app is not None:
            pulumi.set(__self__, "id_of_defining_app", id_of_defining_app)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter
    def fqs(self) -> str:
        return pulumi.get(self, "fqs")

    @property
    @pulumi.getter(name="idOfDefiningApp")
    def id_of_defining_app(self) -> Optional[str]:
        return pulumi.get(self, "id_of_defining_app")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")


@pulumi.output_type
class DomainsAppAllowedTag(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "readOnly":
            suggest = "read_only"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsAppAllowedTag. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsAppAllowedTag.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsAppAllowedTag.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 value: str,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")


@pulumi.output_type
class DomainsAppAppSignonPolicy(dict):
    def __init__(__self__, *,
                 value: str,
                 ref: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsAppAppsNetworkPerimeter(dict):
    def __init__(__self__, *,
                 value: str,
                 ref: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsAppAsOpcService(dict):
    def __init__(__self__, *,
                 value: str,
                 ref: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsAppAttrRenderingMetadata(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxLength":
            suggest = "max_length"
        elif key == "maxSize":
            suggest = "max_size"
        elif key == "minLength":
            suggest = "min_length"
        elif key == "minSize":
            suggest = "min_size"
        elif key == "readOnly":
            suggest = "read_only"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsAppAttrRenderingMetadata. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsAppAttrRenderingMetadata.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsAppAttrRenderingMetadata.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 datatype: Optional[str] = None,
                 helptext: Optional[str] = None,
                 label: Optional[str] = None,
                 max_length: Optional[int] = None,
                 max_size: Optional[int] = None,
                 min_length: Optional[int] = None,
                 min_size: Optional[int] = None,
                 order: Optional[int] = None,
                 read_only: Optional[bool] = None,
                 regexp: Optional[str] = None,
                 required: Optional[bool] = None,
                 section: Optional[str] = None,
                 visible: Optional[bool] = None,
                 widget: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        if datatype is not None:
            pulumi.set(__self__, "datatype", datatype)
        if helptext is not None:
            pulumi.set(__self__, "helptext", helptext)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if max_length is not None:
            pulumi.set(__self__, "max_length", max_length)
        if max_size is not None:
            pulumi.set(__self__, "max_size", max_size)
        if min_length is not None:
            pulumi.set(__self__, "min_length", min_length)
        if min_size is not None:
            pulumi.set(__self__, "min_size", min_size)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if regexp is not None:
            pulumi.set(__self__, "regexp", regexp)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if section is not None:
            pulumi.set(__self__, "section", section)
        if visible is not None:
            pulumi.set(__self__, "visible", visible)
        if widget is not None:
            pulumi.set(__self__, "widget", widget)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def datatype(self) -> Optional[str]:
        return pulumi.get(self, "datatype")

    @property
    @pulumi.getter
    def helptext(self) -> Optional[str]:
        return pulumi.get(self, "helptext")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="maxLength")
    def max_length(self) -> Optional[int]:
        return pulumi.get(self, "max_length")

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[int]:
        return pulumi.get(self, "max_size")

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[int]:
        return pulumi.get(self, "min_length")

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> Optional[int]:
        return pulumi.get(self, "min_size")

    @property
    @pulumi.getter
    def order(self) -> Optional[int]:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter
    def regexp(self) -> Optional[str]:
        return pulumi.get(self, "regexp")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def section(self) -> Optional[str]:
        return pulumi.get(self, "section")

    @property
    @pulumi.getter
    def visible(self) -> Optional[bool]:
        return pulumi.get(self, "visible")

    @property
    @pulumi.getter
    def widget(self) -> Optional[str]:
        return pulumi.get(self, "widget")


@pulumi.output_type
class DomainsAppBasedOnTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastModified":
            suggest = "last_modified"
        elif key == "wellKnownId":
            suggest = "well_known_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsAppBasedOnTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsAppBasedOnTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsAppBasedOnTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 value: str,
                 last_modified: Optional[str] = None,
                 ref: Optional[str] = None,
                 well_known_id: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if well_known_id is not None:
            pulumi.set(__self__, "well_known_id", well_known_id)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="wellKnownId")
    def well_known_id(self) -> Optional[str]:
        return pulumi.get(self, "well_known_id")


@pulumi.output_type
class DomainsAppCertificate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certAlias":
            suggest = "cert_alias"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsAppCertificate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsAppCertificate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsAppCertificate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cert_alias: str,
                 kid: Optional[str] = None,
                 sha1thumbprint: Optional[str] = None,
                 x509base64certificate: Optional[str] = None,
                 x5t: Optional[str] = None):
        pulumi.set(__self__, "cert_alias", cert_alias)
        if kid is not None:
            pulumi.set(__self__, "kid", kid)
        if sha1thumbprint is not None:
            pulumi.set(__self__, "sha1thumbprint", sha1thumbprint)
        if x509base64certificate is not None:
            pulumi.set(__self__, "x509base64certificate", x509base64certificate)
        if x5t is not None:
            pulumi.set(__self__, "x5t", x5t)

    @property
    @pulumi.getter(name="certAlias")
    def cert_alias(self) -> str:
        return pulumi.get(self, "cert_alias")

    @property
    @pulumi.getter
    def kid(self) -> Optional[str]:
        return pulumi.get(self, "kid")

    @property
    @pulumi.getter
    def sha1thumbprint(self) -> Optional[str]:
        return pulumi.get(self, "sha1thumbprint")

    @property
    @pulumi.getter
    def x509base64certificate(self) -> Optional[str]:
        return pulumi.get(self, "x509base64certificate")

    @property
    @pulumi.getter
    def x5t(self) -> Optional[str]:
        return pulumi.get(self, "x5t")


@pulumi.output_type
class DomainsAppCloudControlProperty(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class DomainsAppEditableAttribute(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class DomainsAppGrant(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "grantMechanism":
            suggest = "grant_mechanism"
        elif key == "granteeId":
            suggest = "grantee_id"
        elif key == "granteeType":
            suggest = "grantee_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsAppGrant. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsAppGrant.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsAppGrant.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 grant_mechanism: Optional[str] = None,
                 grantee_id: Optional[str] = None,
                 grantee_type: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if grant_mechanism is not None:
            pulumi.set(__self__, "grant_mechanism", grant_mechanism)
        if grantee_id is not None:
            pulumi.set(__self__, "grantee_id", grantee_id)
        if grantee_type is not None:
            pulumi.set(__self__, "grantee_type", grantee_type)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="grantMechanism")
    def grant_mechanism(self) -> Optional[str]:
        return pulumi.get(self, "grant_mechanism")

    @property
    @pulumi.getter(name="granteeId")
    def grantee_id(self) -> Optional[str]:
        return pulumi.get(self, "grantee_id")

    @property
    @pulumi.getter(name="granteeType")
    def grantee_type(self) -> Optional[str]:
        return pulumi.get(self, "grantee_type")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsAppGrantedAppRole(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adminRole":
            suggest = "admin_role"
        elif key == "appId":
            suggest = "app_id"
        elif key == "appName":
            suggest = "app_name"
        elif key == "legacyGroupName":
            suggest = "legacy_group_name"
        elif key == "readOnly":
            suggest = "read_only"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsAppGrantedAppRole. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsAppGrantedAppRole.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsAppGrantedAppRole.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 value: str,
                 admin_role: Optional[bool] = None,
                 app_id: Optional[str] = None,
                 app_name: Optional[str] = None,
                 display: Optional[str] = None,
                 legacy_group_name: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if admin_role is not None:
            pulumi.set(__self__, "admin_role", admin_role)
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if app_name is not None:
            pulumi.set(__self__, "app_name", app_name)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if legacy_group_name is not None:
            pulumi.set(__self__, "legacy_group_name", legacy_group_name)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="adminRole")
    def admin_role(self) -> Optional[bool]:
        return pulumi.get(self, "admin_role")

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[str]:
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="appName")
    def app_name(self) -> Optional[str]:
        return pulumi.get(self, "app_name")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter(name="legacyGroupName")
    def legacy_group_name(self) -> Optional[str]:
        return pulumi.get(self, "legacy_group_name")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsAppIdcsCreatedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsAppIdcsLastModifiedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsAppIdentityProvider(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ref: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsAppIdpPolicy(dict):
    def __init__(__self__, *,
                 value: str,
                 ref: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsAppMeta(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastModified":
            suggest = "last_modified"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsAppMeta. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsAppMeta.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsAppMeta.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class DomainsAppProtectableSecondaryAudience(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "readOnly":
            suggest = "read_only"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsAppProtectableSecondaryAudience. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsAppProtectableSecondaryAudience.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsAppProtectableSecondaryAudience.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 value: str,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "value", value)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")


@pulumi.output_type
class DomainsAppRadiusPolicy(dict):
    def __init__(__self__, *,
                 value: str,
                 ref: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsAppRoleApp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceInstanceIdentifier":
            suggest = "service_instance_identifier"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsAppRoleApp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsAppRoleApp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsAppRoleApp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 name: Optional[str] = None,
                 ref: Optional[str] = None,
                 service_instance_identifier: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if service_instance_identifier is not None:
            pulumi.set(__self__, "service_instance_identifier", service_instance_identifier)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="serviceInstanceIdentifier")
    def service_instance_identifier(self) -> Optional[str]:
        return pulumi.get(self, "service_instance_identifier")


@pulumi.output_type
class DomainsAppRoleIdcsCreatedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsAppRoleIdcsLastModifiedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsAppRoleMember(dict):
    def __init__(__self__, *,
                 type: str,
                 value: str,
                 display: Optional[str] = None,
                 ref: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsAppRoleMeta(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastModified":
            suggest = "last_modified"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsAppRoleMeta. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsAppRoleMeta.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsAppRoleMeta.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class DomainsAppRoleTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsAppSamlServiceProvider(dict):
    def __init__(__self__, *,
                 value: str,
                 ref: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsAppScope(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "readOnly":
            suggest = "read_only"
        elif key == "requiresConsent":
            suggest = "requires_consent"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsAppScope. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsAppScope.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsAppScope.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 value: str,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 fqs: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 requires_consent: Optional[bool] = None):
        pulumi.set(__self__, "value", value)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if fqs is not None:
            pulumi.set(__self__, "fqs", fqs)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if requires_consent is not None:
            pulumi.set(__self__, "requires_consent", requires_consent)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def fqs(self) -> Optional[str]:
        return pulumi.get(self, "fqs")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="requiresConsent")
    def requires_consent(self) -> Optional[bool]:
        return pulumi.get(self, "requires_consent")


@pulumi.output_type
class DomainsAppServiceParam(dict):
    def __init__(__self__, *,
                 name: str,
                 value: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsAppSignonPolicy(dict):
    def __init__(__self__, *,
                 value: str,
                 ref: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsAppTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsAppTermsOfUse(dict):
    def __init__(__self__, *,
                 value: str,
                 name: Optional[str] = None,
                 ref: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsAppTrustPolicy(dict):
    def __init__(__self__, *,
                 value: str,
                 ref: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsAppUrnietfparamsscimschemasoracleidcsextensionOciTags(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "definedTags":
            suggest = "defined_tags"
        elif key == "freeformTags":
            suggest = "freeform_tags"
        elif key == "tagSlug":
            suggest = "tag_slug"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsAppUrnietfparamsscimschemasoracleidcsextensionOciTags. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsAppUrnietfparamsscimschemasoracleidcsextensionOciTags.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsAppUrnietfparamsscimschemasoracleidcsextensionOciTags.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 defined_tags: Optional[Sequence['outputs.DomainsAppUrnietfparamsscimschemasoracleidcsextensionOciTagsDefinedTag']] = None,
                 freeform_tags: Optional[Sequence['outputs.DomainsAppUrnietfparamsscimschemasoracleidcsextensionOciTagsFreeformTag']] = None,
                 tag_slug: Optional[str] = None):
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if tag_slug is not None:
            pulumi.set(__self__, "tag_slug", tag_slug)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Sequence['outputs.DomainsAppUrnietfparamsscimschemasoracleidcsextensionOciTagsDefinedTag']]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Sequence['outputs.DomainsAppUrnietfparamsscimschemasoracleidcsextensionOciTagsFreeformTag']]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="tagSlug")
    def tag_slug(self) -> Optional[str]:
        return pulumi.get(self, "tag_slug")


@pulumi.output_type
class DomainsAppUrnietfparamsscimschemasoracleidcsextensionOciTagsDefinedTag(dict):
    def __init__(__self__, *,
                 key: str,
                 namespace: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsAppUrnietfparamsscimschemasoracleidcsextensionOciTagsFreeformTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsAppUrnietfparamsscimschemasoracleidcsextensiondbcsApp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "domainApp":
            suggest = "domain_app"
        elif key == "domainName":
            suggest = "domain_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsAppUrnietfparamsscimschemasoracleidcsextensiondbcsApp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsAppUrnietfparamsscimschemasoracleidcsextensiondbcsApp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsAppUrnietfparamsscimschemasoracleidcsextensiondbcsApp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 domain_app: Optional['outputs.DomainsAppUrnietfparamsscimschemasoracleidcsextensiondbcsAppDomainApp'] = None,
                 domain_name: Optional[str] = None):
        if domain_app is not None:
            pulumi.set(__self__, "domain_app", domain_app)
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)

    @property
    @pulumi.getter(name="domainApp")
    def domain_app(self) -> Optional['outputs.DomainsAppUrnietfparamsscimschemasoracleidcsextensiondbcsAppDomainApp']:
        return pulumi.get(self, "domain_app")

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[str]:
        return pulumi.get(self, "domain_name")


@pulumi.output_type
class DomainsAppUrnietfparamsscimschemasoracleidcsextensiondbcsAppDomainApp(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ref: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppApp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowAuthzDecisionTtl":
            suggest = "allow_authz_decision_ttl"
        elif key == "allowAuthzPolicy":
            suggest = "allow_authz_policy"
        elif key == "appResources":
            suggest = "app_resources"
        elif key == "denyAuthzDecisionTtl":
            suggest = "deny_authz_decision_ttl"
        elif key == "denyAuthzPolicy":
            suggest = "deny_authz_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppApp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppApp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppApp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_authz_decision_ttl: Optional[int] = None,
                 allow_authz_policy: Optional['outputs.DomainsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppAppAllowAuthzPolicy'] = None,
                 app_resources: Optional[Sequence['outputs.DomainsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppAppAppResource']] = None,
                 deny_authz_decision_ttl: Optional[int] = None,
                 deny_authz_policy: Optional['outputs.DomainsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppAppDenyAuthzPolicy'] = None):
        if allow_authz_decision_ttl is not None:
            pulumi.set(__self__, "allow_authz_decision_ttl", allow_authz_decision_ttl)
        if allow_authz_policy is not None:
            pulumi.set(__self__, "allow_authz_policy", allow_authz_policy)
        if app_resources is not None:
            pulumi.set(__self__, "app_resources", app_resources)
        if deny_authz_decision_ttl is not None:
            pulumi.set(__self__, "deny_authz_decision_ttl", deny_authz_decision_ttl)
        if deny_authz_policy is not None:
            pulumi.set(__self__, "deny_authz_policy", deny_authz_policy)

    @property
    @pulumi.getter(name="allowAuthzDecisionTtl")
    def allow_authz_decision_ttl(self) -> Optional[int]:
        return pulumi.get(self, "allow_authz_decision_ttl")

    @property
    @pulumi.getter(name="allowAuthzPolicy")
    def allow_authz_policy(self) -> Optional['outputs.DomainsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppAppAllowAuthzPolicy']:
        return pulumi.get(self, "allow_authz_policy")

    @property
    @pulumi.getter(name="appResources")
    def app_resources(self) -> Optional[Sequence['outputs.DomainsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppAppAppResource']]:
        return pulumi.get(self, "app_resources")

    @property
    @pulumi.getter(name="denyAuthzDecisionTtl")
    def deny_authz_decision_ttl(self) -> Optional[int]:
        return pulumi.get(self, "deny_authz_decision_ttl")

    @property
    @pulumi.getter(name="denyAuthzPolicy")
    def deny_authz_policy(self) -> Optional['outputs.DomainsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppAppDenyAuthzPolicy']:
        return pulumi.get(self, "deny_authz_policy")


@pulumi.output_type
class DomainsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppAppAllowAuthzPolicy(dict):
    def __init__(__self__, *,
                 value: str,
                 ref: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppAppAppResource(dict):
    def __init__(__self__, *,
                 value: str,
                 ref: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppAppDenyAuthzPolicy(dict):
    def __init__(__self__, *,
                 value: str,
                 ref: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppApp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "formCredMethod":
            suggest = "form_cred_method"
        elif key == "formCredentialSharingGroupId":
            suggest = "form_credential_sharing_group_id"
        elif key == "formFillUrlMatches":
            suggest = "form_fill_url_matches"
        elif key == "formType":
            suggest = "form_type"
        elif key == "revealPasswordOnForm":
            suggest = "reveal_password_on_form"
        elif key == "syncFromTemplate":
            suggest = "sync_from_template"
        elif key == "userNameFormExpression":
            suggest = "user_name_form_expression"
        elif key == "userNameFormTemplate":
            suggest = "user_name_form_template"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppApp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppApp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppApp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 configuration: Optional[str] = None,
                 form_cred_method: Optional[str] = None,
                 form_credential_sharing_group_id: Optional[str] = None,
                 form_fill_url_matches: Optional[Sequence['outputs.DomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppAppFormFillUrlMatch']] = None,
                 form_type: Optional[str] = None,
                 reveal_password_on_form: Optional[bool] = None,
                 sync_from_template: Optional[bool] = None,
                 user_name_form_expression: Optional[str] = None,
                 user_name_form_template: Optional[str] = None):
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)
        if form_cred_method is not None:
            pulumi.set(__self__, "form_cred_method", form_cred_method)
        if form_credential_sharing_group_id is not None:
            pulumi.set(__self__, "form_credential_sharing_group_id", form_credential_sharing_group_id)
        if form_fill_url_matches is not None:
            pulumi.set(__self__, "form_fill_url_matches", form_fill_url_matches)
        if form_type is not None:
            pulumi.set(__self__, "form_type", form_type)
        if reveal_password_on_form is not None:
            pulumi.set(__self__, "reveal_password_on_form", reveal_password_on_form)
        if sync_from_template is not None:
            pulumi.set(__self__, "sync_from_template", sync_from_template)
        if user_name_form_expression is not None:
            pulumi.set(__self__, "user_name_form_expression", user_name_form_expression)
        if user_name_form_template is not None:
            pulumi.set(__self__, "user_name_form_template", user_name_form_template)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[str]:
        return pulumi.get(self, "configuration")

    @property
    @pulumi.getter(name="formCredMethod")
    def form_cred_method(self) -> Optional[str]:
        return pulumi.get(self, "form_cred_method")

    @property
    @pulumi.getter(name="formCredentialSharingGroupId")
    def form_credential_sharing_group_id(self) -> Optional[str]:
        return pulumi.get(self, "form_credential_sharing_group_id")

    @property
    @pulumi.getter(name="formFillUrlMatches")
    def form_fill_url_matches(self) -> Optional[Sequence['outputs.DomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppAppFormFillUrlMatch']]:
        return pulumi.get(self, "form_fill_url_matches")

    @property
    @pulumi.getter(name="formType")
    def form_type(self) -> Optional[str]:
        return pulumi.get(self, "form_type")

    @property
    @pulumi.getter(name="revealPasswordOnForm")
    def reveal_password_on_form(self) -> Optional[bool]:
        return pulumi.get(self, "reveal_password_on_form")

    @property
    @pulumi.getter(name="syncFromTemplate")
    def sync_from_template(self) -> Optional[bool]:
        return pulumi.get(self, "sync_from_template")

    @property
    @pulumi.getter(name="userNameFormExpression")
    def user_name_form_expression(self) -> Optional[str]:
        return pulumi.get(self, "user_name_form_expression")

    @property
    @pulumi.getter(name="userNameFormTemplate")
    def user_name_form_template(self) -> Optional[str]:
        return pulumi.get(self, "user_name_form_template")


@pulumi.output_type
class DomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppAppFormFillUrlMatch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "formUrl":
            suggest = "form_url"
        elif key == "formUrlMatchType":
            suggest = "form_url_match_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppAppFormFillUrlMatch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppAppFormFillUrlMatch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppAppFormFillUrlMatch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 form_url: str,
                 form_url_match_type: Optional[str] = None):
        pulumi.set(__self__, "form_url", form_url)
        if form_url_match_type is not None:
            pulumi.set(__self__, "form_url_match_type", form_url_match_type)

    @property
    @pulumi.getter(name="formUrl")
    def form_url(self) -> str:
        return pulumi.get(self, "form_url")

    @property
    @pulumi.getter(name="formUrlMatchType")
    def form_url_match_type(self) -> Optional[str]:
        return pulumi.get(self, "form_url_match_type")


@pulumi.output_type
class DomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppTemplateAppTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "formCredMethod":
            suggest = "form_cred_method"
        elif key == "formCredentialSharingGroupId":
            suggest = "form_credential_sharing_group_id"
        elif key == "formFillUrlMatches":
            suggest = "form_fill_url_matches"
        elif key == "formType":
            suggest = "form_type"
        elif key == "revealPasswordOnForm":
            suggest = "reveal_password_on_form"
        elif key == "syncFromTemplate":
            suggest = "sync_from_template"
        elif key == "userNameFormExpression":
            suggest = "user_name_form_expression"
        elif key == "userNameFormTemplate":
            suggest = "user_name_form_template"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppTemplateAppTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppTemplateAppTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppTemplateAppTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 configuration: Optional[str] = None,
                 form_cred_method: Optional[str] = None,
                 form_credential_sharing_group_id: Optional[str] = None,
                 form_fill_url_matches: Optional[Sequence['outputs.DomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppTemplateAppTemplateFormFillUrlMatch']] = None,
                 form_type: Optional[str] = None,
                 reveal_password_on_form: Optional[bool] = None,
                 sync_from_template: Optional[bool] = None,
                 user_name_form_expression: Optional[str] = None,
                 user_name_form_template: Optional[str] = None):
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)
        if form_cred_method is not None:
            pulumi.set(__self__, "form_cred_method", form_cred_method)
        if form_credential_sharing_group_id is not None:
            pulumi.set(__self__, "form_credential_sharing_group_id", form_credential_sharing_group_id)
        if form_fill_url_matches is not None:
            pulumi.set(__self__, "form_fill_url_matches", form_fill_url_matches)
        if form_type is not None:
            pulumi.set(__self__, "form_type", form_type)
        if reveal_password_on_form is not None:
            pulumi.set(__self__, "reveal_password_on_form", reveal_password_on_form)
        if sync_from_template is not None:
            pulumi.set(__self__, "sync_from_template", sync_from_template)
        if user_name_form_expression is not None:
            pulumi.set(__self__, "user_name_form_expression", user_name_form_expression)
        if user_name_form_template is not None:
            pulumi.set(__self__, "user_name_form_template", user_name_form_template)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[str]:
        return pulumi.get(self, "configuration")

    @property
    @pulumi.getter(name="formCredMethod")
    def form_cred_method(self) -> Optional[str]:
        return pulumi.get(self, "form_cred_method")

    @property
    @pulumi.getter(name="formCredentialSharingGroupId")
    def form_credential_sharing_group_id(self) -> Optional[str]:
        return pulumi.get(self, "form_credential_sharing_group_id")

    @property
    @pulumi.getter(name="formFillUrlMatches")
    def form_fill_url_matches(self) -> Optional[Sequence['outputs.DomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppTemplateAppTemplateFormFillUrlMatch']]:
        return pulumi.get(self, "form_fill_url_matches")

    @property
    @pulumi.getter(name="formType")
    def form_type(self) -> Optional[str]:
        return pulumi.get(self, "form_type")

    @property
    @pulumi.getter(name="revealPasswordOnForm")
    def reveal_password_on_form(self) -> Optional[bool]:
        return pulumi.get(self, "reveal_password_on_form")

    @property
    @pulumi.getter(name="syncFromTemplate")
    def sync_from_template(self) -> Optional[bool]:
        return pulumi.get(self, "sync_from_template")

    @property
    @pulumi.getter(name="userNameFormExpression")
    def user_name_form_expression(self) -> Optional[str]:
        return pulumi.get(self, "user_name_form_expression")

    @property
    @pulumi.getter(name="userNameFormTemplate")
    def user_name_form_template(self) -> Optional[str]:
        return pulumi.get(self, "user_name_form_template")


@pulumi.output_type
class DomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppTemplateAppTemplateFormFillUrlMatch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "formUrl":
            suggest = "form_url"
        elif key == "formUrlMatchType":
            suggest = "form_url_match_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppTemplateAppTemplateFormFillUrlMatch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppTemplateAppTemplateFormFillUrlMatch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppTemplateAppTemplateFormFillUrlMatch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 form_url: str,
                 form_url_match_type: Optional[str] = None):
        pulumi.set(__self__, "form_url", form_url)
        if form_url_match_type is not None:
            pulumi.set(__self__, "form_url_match_type", form_url_match_type)

    @property
    @pulumi.getter(name="formUrl")
    def form_url(self) -> str:
        return pulumi.get(self, "form_url")

    @property
    @pulumi.getter(name="formUrlMatchType")
    def form_url_match_type(self) -> Optional[str]:
        return pulumi.get(self, "form_url_match_type")


@pulumi.output_type
class DomainsAppUrnietfparamsscimschemasoracleidcsextensionkerberosRealmApp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultEncryptionSaltType":
            suggest = "default_encryption_salt_type"
        elif key == "masterKey":
            suggest = "master_key"
        elif key == "maxRenewableAge":
            suggest = "max_renewable_age"
        elif key == "maxTicketLife":
            suggest = "max_ticket_life"
        elif key == "realmName":
            suggest = "realm_name"
        elif key == "supportedEncryptionSaltTypes":
            suggest = "supported_encryption_salt_types"
        elif key == "ticketFlags":
            suggest = "ticket_flags"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsAppUrnietfparamsscimschemasoracleidcsextensionkerberosRealmApp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsAppUrnietfparamsscimschemasoracleidcsextensionkerberosRealmApp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsAppUrnietfparamsscimschemasoracleidcsextensionkerberosRealmApp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_encryption_salt_type: Optional[str] = None,
                 master_key: Optional[str] = None,
                 max_renewable_age: Optional[int] = None,
                 max_ticket_life: Optional[int] = None,
                 realm_name: Optional[str] = None,
                 supported_encryption_salt_types: Optional[Sequence[str]] = None,
                 ticket_flags: Optional[int] = None):
        if default_encryption_salt_type is not None:
            pulumi.set(__self__, "default_encryption_salt_type", default_encryption_salt_type)
        if master_key is not None:
            pulumi.set(__self__, "master_key", master_key)
        if max_renewable_age is not None:
            pulumi.set(__self__, "max_renewable_age", max_renewable_age)
        if max_ticket_life is not None:
            pulumi.set(__self__, "max_ticket_life", max_ticket_life)
        if realm_name is not None:
            pulumi.set(__self__, "realm_name", realm_name)
        if supported_encryption_salt_types is not None:
            pulumi.set(__self__, "supported_encryption_salt_types", supported_encryption_salt_types)
        if ticket_flags is not None:
            pulumi.set(__self__, "ticket_flags", ticket_flags)

    @property
    @pulumi.getter(name="defaultEncryptionSaltType")
    def default_encryption_salt_type(self) -> Optional[str]:
        return pulumi.get(self, "default_encryption_salt_type")

    @property
    @pulumi.getter(name="masterKey")
    def master_key(self) -> Optional[str]:
        return pulumi.get(self, "master_key")

    @property
    @pulumi.getter(name="maxRenewableAge")
    def max_renewable_age(self) -> Optional[int]:
        return pulumi.get(self, "max_renewable_age")

    @property
    @pulumi.getter(name="maxTicketLife")
    def max_ticket_life(self) -> Optional[int]:
        return pulumi.get(self, "max_ticket_life")

    @property
    @pulumi.getter(name="realmName")
    def realm_name(self) -> Optional[str]:
        return pulumi.get(self, "realm_name")

    @property
    @pulumi.getter(name="supportedEncryptionSaltTypes")
    def supported_encryption_salt_types(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "supported_encryption_salt_types")

    @property
    @pulumi.getter(name="ticketFlags")
    def ticket_flags(self) -> Optional[int]:
        return pulumi.get(self, "ticket_flags")


@pulumi.output_type
class DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappApp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountFormVisible":
            suggest = "account_form_visible"
        elif key == "adminConsentGranted":
            suggest = "admin_consent_granted"
        elif key == "bundleConfigurationProperties":
            suggest = "bundle_configuration_properties"
        elif key == "bundlePoolConfiguration":
            suggest = "bundle_pool_configuration"
        elif key == "canBeAuthoritative":
            suggest = "can_be_authoritative"
        elif key == "connectorBundles":
            suggest = "connector_bundles"
        elif key == "enableAuthSyncNewUserNotification":
            suggest = "enable_auth_sync_new_user_notification"
        elif key == "enableSync":
            suggest = "enable_sync"
        elif key == "enableSyncSummaryReportNotification":
            suggest = "enable_sync_summary_report_notification"
        elif key == "flatFileBundleConfigurationProperties":
            suggest = "flat_file_bundle_configuration_properties"
        elif key == "flatFileConnectorBundle":
            suggest = "flat_file_connector_bundle"
        elif key == "identityBridges":
            suggest = "identity_bridges"
        elif key == "isAuthoritative":
            suggest = "is_authoritative"
        elif key == "isDirectory":
            suggest = "is_directory"
        elif key == "isOnPremiseApp":
            suggest = "is_on_premise_app"
        elif key == "isSchemaCustomizationSupported":
            suggest = "is_schema_customization_supported"
        elif key == "isSchemaDiscoverySupported":
            suggest = "is_schema_discovery_supported"
        elif key == "isThreeLeggedOauthEnabled":
            suggest = "is_three_legged_oauth_enabled"
        elif key == "isTwoLeggedOauthEnabled":
            suggest = "is_two_legged_oauth_enabled"
        elif key == "objectClasses":
            suggest = "object_classes"
        elif key == "syncConfigLastModified":
            suggest = "sync_config_last_modified"
        elif key == "threeLeggedOauthCredential":
            suggest = "three_legged_oauth_credential"
        elif key == "threeLeggedOauthProviderName":
            suggest = "three_legged_oauth_provider_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappApp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappApp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappApp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_form_visible: Optional[bool] = None,
                 admin_consent_granted: Optional[bool] = None,
                 bundle_configuration_properties: Optional[Sequence['outputs.DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppBundleConfigurationProperty']] = None,
                 bundle_pool_configuration: Optional['outputs.DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppBundlePoolConfiguration'] = None,
                 can_be_authoritative: Optional[bool] = None,
                 connected: Optional[bool] = None,
                 connector_bundles: Optional[Sequence['outputs.DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppConnectorBundle']] = None,
                 enable_auth_sync_new_user_notification: Optional[bool] = None,
                 enable_sync: Optional[bool] = None,
                 enable_sync_summary_report_notification: Optional[bool] = None,
                 flat_file_bundle_configuration_properties: Optional[Sequence['outputs.DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppFlatFileBundleConfigurationProperty']] = None,
                 flat_file_connector_bundle: Optional['outputs.DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppFlatFileConnectorBundle'] = None,
                 identity_bridges: Optional[Sequence['outputs.DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppIdentityBridge']] = None,
                 is_authoritative: Optional[bool] = None,
                 is_directory: Optional[bool] = None,
                 is_on_premise_app: Optional[bool] = None,
                 is_schema_customization_supported: Optional[bool] = None,
                 is_schema_discovery_supported: Optional[bool] = None,
                 is_three_legged_oauth_enabled: Optional[bool] = None,
                 is_two_legged_oauth_enabled: Optional[bool] = None,
                 object_classes: Optional[Sequence['outputs.DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppObjectClass']] = None,
                 sync_config_last_modified: Optional[str] = None,
                 three_legged_oauth_credential: Optional['outputs.DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppThreeLeggedOauthCredential'] = None,
                 three_legged_oauth_provider_name: Optional[str] = None):
        if account_form_visible is not None:
            pulumi.set(__self__, "account_form_visible", account_form_visible)
        if admin_consent_granted is not None:
            pulumi.set(__self__, "admin_consent_granted", admin_consent_granted)
        if bundle_configuration_properties is not None:
            pulumi.set(__self__, "bundle_configuration_properties", bundle_configuration_properties)
        if bundle_pool_configuration is not None:
            pulumi.set(__self__, "bundle_pool_configuration", bundle_pool_configuration)
        if can_be_authoritative is not None:
            pulumi.set(__self__, "can_be_authoritative", can_be_authoritative)
        if connected is not None:
            pulumi.set(__self__, "connected", connected)
        if connector_bundles is not None:
            pulumi.set(__self__, "connector_bundles", connector_bundles)
        if enable_auth_sync_new_user_notification is not None:
            pulumi.set(__self__, "enable_auth_sync_new_user_notification", enable_auth_sync_new_user_notification)
        if enable_sync is not None:
            pulumi.set(__self__, "enable_sync", enable_sync)
        if enable_sync_summary_report_notification is not None:
            pulumi.set(__self__, "enable_sync_summary_report_notification", enable_sync_summary_report_notification)
        if flat_file_bundle_configuration_properties is not None:
            pulumi.set(__self__, "flat_file_bundle_configuration_properties", flat_file_bundle_configuration_properties)
        if flat_file_connector_bundle is not None:
            pulumi.set(__self__, "flat_file_connector_bundle", flat_file_connector_bundle)
        if identity_bridges is not None:
            pulumi.set(__self__, "identity_bridges", identity_bridges)
        if is_authoritative is not None:
            pulumi.set(__self__, "is_authoritative", is_authoritative)
        if is_directory is not None:
            pulumi.set(__self__, "is_directory", is_directory)
        if is_on_premise_app is not None:
            pulumi.set(__self__, "is_on_premise_app", is_on_premise_app)
        if is_schema_customization_supported is not None:
            pulumi.set(__self__, "is_schema_customization_supported", is_schema_customization_supported)
        if is_schema_discovery_supported is not None:
            pulumi.set(__self__, "is_schema_discovery_supported", is_schema_discovery_supported)
        if is_three_legged_oauth_enabled is not None:
            pulumi.set(__self__, "is_three_legged_oauth_enabled", is_three_legged_oauth_enabled)
        if is_two_legged_oauth_enabled is not None:
            pulumi.set(__self__, "is_two_legged_oauth_enabled", is_two_legged_oauth_enabled)
        if object_classes is not None:
            pulumi.set(__self__, "object_classes", object_classes)
        if sync_config_last_modified is not None:
            pulumi.set(__self__, "sync_config_last_modified", sync_config_last_modified)
        if three_legged_oauth_credential is not None:
            pulumi.set(__self__, "three_legged_oauth_credential", three_legged_oauth_credential)
        if three_legged_oauth_provider_name is not None:
            pulumi.set(__self__, "three_legged_oauth_provider_name", three_legged_oauth_provider_name)

    @property
    @pulumi.getter(name="accountFormVisible")
    def account_form_visible(self) -> Optional[bool]:
        return pulumi.get(self, "account_form_visible")

    @property
    @pulumi.getter(name="adminConsentGranted")
    def admin_consent_granted(self) -> Optional[bool]:
        return pulumi.get(self, "admin_consent_granted")

    @property
    @pulumi.getter(name="bundleConfigurationProperties")
    def bundle_configuration_properties(self) -> Optional[Sequence['outputs.DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppBundleConfigurationProperty']]:
        return pulumi.get(self, "bundle_configuration_properties")

    @property
    @pulumi.getter(name="bundlePoolConfiguration")
    def bundle_pool_configuration(self) -> Optional['outputs.DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppBundlePoolConfiguration']:
        return pulumi.get(self, "bundle_pool_configuration")

    @property
    @pulumi.getter(name="canBeAuthoritative")
    def can_be_authoritative(self) -> Optional[bool]:
        return pulumi.get(self, "can_be_authoritative")

    @property
    @pulumi.getter
    def connected(self) -> Optional[bool]:
        return pulumi.get(self, "connected")

    @property
    @pulumi.getter(name="connectorBundles")
    def connector_bundles(self) -> Optional[Sequence['outputs.DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppConnectorBundle']]:
        return pulumi.get(self, "connector_bundles")

    @property
    @pulumi.getter(name="enableAuthSyncNewUserNotification")
    def enable_auth_sync_new_user_notification(self) -> Optional[bool]:
        return pulumi.get(self, "enable_auth_sync_new_user_notification")

    @property
    @pulumi.getter(name="enableSync")
    def enable_sync(self) -> Optional[bool]:
        return pulumi.get(self, "enable_sync")

    @property
    @pulumi.getter(name="enableSyncSummaryReportNotification")
    def enable_sync_summary_report_notification(self) -> Optional[bool]:
        return pulumi.get(self, "enable_sync_summary_report_notification")

    @property
    @pulumi.getter(name="flatFileBundleConfigurationProperties")
    def flat_file_bundle_configuration_properties(self) -> Optional[Sequence['outputs.DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppFlatFileBundleConfigurationProperty']]:
        return pulumi.get(self, "flat_file_bundle_configuration_properties")

    @property
    @pulumi.getter(name="flatFileConnectorBundle")
    def flat_file_connector_bundle(self) -> Optional['outputs.DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppFlatFileConnectorBundle']:
        return pulumi.get(self, "flat_file_connector_bundle")

    @property
    @pulumi.getter(name="identityBridges")
    def identity_bridges(self) -> Optional[Sequence['outputs.DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppIdentityBridge']]:
        return pulumi.get(self, "identity_bridges")

    @property
    @pulumi.getter(name="isAuthoritative")
    def is_authoritative(self) -> Optional[bool]:
        return pulumi.get(self, "is_authoritative")

    @property
    @pulumi.getter(name="isDirectory")
    def is_directory(self) -> Optional[bool]:
        return pulumi.get(self, "is_directory")

    @property
    @pulumi.getter(name="isOnPremiseApp")
    def is_on_premise_app(self) -> Optional[bool]:
        return pulumi.get(self, "is_on_premise_app")

    @property
    @pulumi.getter(name="isSchemaCustomizationSupported")
    def is_schema_customization_supported(self) -> Optional[bool]:
        return pulumi.get(self, "is_schema_customization_supported")

    @property
    @pulumi.getter(name="isSchemaDiscoverySupported")
    def is_schema_discovery_supported(self) -> Optional[bool]:
        return pulumi.get(self, "is_schema_discovery_supported")

    @property
    @pulumi.getter(name="isThreeLeggedOauthEnabled")
    def is_three_legged_oauth_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_three_legged_oauth_enabled")

    @property
    @pulumi.getter(name="isTwoLeggedOauthEnabled")
    def is_two_legged_oauth_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_two_legged_oauth_enabled")

    @property
    @pulumi.getter(name="objectClasses")
    def object_classes(self) -> Optional[Sequence['outputs.DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppObjectClass']]:
        return pulumi.get(self, "object_classes")

    @property
    @pulumi.getter(name="syncConfigLastModified")
    def sync_config_last_modified(self) -> Optional[str]:
        return pulumi.get(self, "sync_config_last_modified")

    @property
    @pulumi.getter(name="threeLeggedOauthCredential")
    def three_legged_oauth_credential(self) -> Optional['outputs.DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppThreeLeggedOauthCredential']:
        return pulumi.get(self, "three_legged_oauth_credential")

    @property
    @pulumi.getter(name="threeLeggedOauthProviderName")
    def three_legged_oauth_provider_name(self) -> Optional[str]:
        return pulumi.get(self, "three_legged_oauth_provider_name")


@pulumi.output_type
class DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppBundleConfigurationProperty(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "icfType":
            suggest = "icf_type"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "helpMessage":
            suggest = "help_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppBundleConfigurationProperty. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppBundleConfigurationProperty.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppBundleConfigurationProperty.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 icf_type: str,
                 name: str,
                 required: bool,
                 confidential: Optional[bool] = None,
                 display_name: Optional[str] = None,
                 help_message: Optional[str] = None,
                 order: Optional[int] = None,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "icf_type", icf_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "required", required)
        if confidential is not None:
            pulumi.set(__self__, "confidential", confidential)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if help_message is not None:
            pulumi.set(__self__, "help_message", help_message)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="icfType")
    def icf_type(self) -> str:
        return pulumi.get(self, "icf_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def required(self) -> bool:
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def confidential(self) -> Optional[bool]:
        return pulumi.get(self, "confidential")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="helpMessage")
    def help_message(self) -> Optional[str]:
        return pulumi.get(self, "help_message")

    @property
    @pulumi.getter
    def order(self) -> Optional[int]:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppBundlePoolConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxIdle":
            suggest = "max_idle"
        elif key == "maxObjects":
            suggest = "max_objects"
        elif key == "maxWait":
            suggest = "max_wait"
        elif key == "minEvictableIdleTimeMillis":
            suggest = "min_evictable_idle_time_millis"
        elif key == "minIdle":
            suggest = "min_idle"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppBundlePoolConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppBundlePoolConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppBundlePoolConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_idle: Optional[int] = None,
                 max_objects: Optional[int] = None,
                 max_wait: Optional[int] = None,
                 min_evictable_idle_time_millis: Optional[int] = None,
                 min_idle: Optional[int] = None):
        if max_idle is not None:
            pulumi.set(__self__, "max_idle", max_idle)
        if max_objects is not None:
            pulumi.set(__self__, "max_objects", max_objects)
        if max_wait is not None:
            pulumi.set(__self__, "max_wait", max_wait)
        if min_evictable_idle_time_millis is not None:
            pulumi.set(__self__, "min_evictable_idle_time_millis", min_evictable_idle_time_millis)
        if min_idle is not None:
            pulumi.set(__self__, "min_idle", min_idle)

    @property
    @pulumi.getter(name="maxIdle")
    def max_idle(self) -> Optional[int]:
        return pulumi.get(self, "max_idle")

    @property
    @pulumi.getter(name="maxObjects")
    def max_objects(self) -> Optional[int]:
        return pulumi.get(self, "max_objects")

    @property
    @pulumi.getter(name="maxWait")
    def max_wait(self) -> Optional[int]:
        return pulumi.get(self, "max_wait")

    @property
    @pulumi.getter(name="minEvictableIdleTimeMillis")
    def min_evictable_idle_time_millis(self) -> Optional[int]:
        return pulumi.get(self, "min_evictable_idle_time_millis")

    @property
    @pulumi.getter(name="minIdle")
    def min_idle(self) -> Optional[int]:
        return pulumi.get(self, "min_idle")


@pulumi.output_type
class DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppConnectorBundle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "wellKnownId":
            suggest = "well_known_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppConnectorBundle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppConnectorBundle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppConnectorBundle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 value: str,
                 display: Optional[str] = None,
                 ref: Optional[str] = None,
                 well_known_id: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if well_known_id is not None:
            pulumi.set(__self__, "well_known_id", well_known_id)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="wellKnownId")
    def well_known_id(self) -> Optional[str]:
        return pulumi.get(self, "well_known_id")


@pulumi.output_type
class DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppFlatFileBundleConfigurationProperty(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "icfType":
            suggest = "icf_type"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "helpMessage":
            suggest = "help_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppFlatFileBundleConfigurationProperty. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppFlatFileBundleConfigurationProperty.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppFlatFileBundleConfigurationProperty.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 icf_type: str,
                 name: str,
                 required: bool,
                 confidential: Optional[bool] = None,
                 display_name: Optional[str] = None,
                 help_message: Optional[str] = None,
                 order: Optional[int] = None,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "icf_type", icf_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "required", required)
        if confidential is not None:
            pulumi.set(__self__, "confidential", confidential)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if help_message is not None:
            pulumi.set(__self__, "help_message", help_message)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="icfType")
    def icf_type(self) -> str:
        return pulumi.get(self, "icf_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def required(self) -> bool:
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def confidential(self) -> Optional[bool]:
        return pulumi.get(self, "confidential")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="helpMessage")
    def help_message(self) -> Optional[str]:
        return pulumi.get(self, "help_message")

    @property
    @pulumi.getter
    def order(self) -> Optional[int]:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppFlatFileConnectorBundle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "wellKnownId":
            suggest = "well_known_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppFlatFileConnectorBundle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppFlatFileConnectorBundle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppFlatFileConnectorBundle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ref: Optional[str] = None,
                 well_known_id: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if well_known_id is not None:
            pulumi.set(__self__, "well_known_id", well_known_id)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="wellKnownId")
    def well_known_id(self) -> Optional[str]:
        return pulumi.get(self, "well_known_id")


@pulumi.output_type
class DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppIdentityBridge(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppObjectClass(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isAccountObjectClass":
            suggest = "is_account_object_class"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppObjectClass. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppObjectClass.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppObjectClass.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 value: str,
                 display: Optional[str] = None,
                 is_account_object_class: Optional[bool] = None,
                 ref: Optional[str] = None,
                 resource_type: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if is_account_object_class is not None:
            pulumi.set(__self__, "is_account_object_class", is_account_object_class)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter(name="isAccountObjectClass")
    def is_account_object_class(self) -> Optional[bool]:
        return pulumi.get(self, "is_account_object_class")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")


@pulumi.output_type
class DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppThreeLeggedOauthCredential(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "accessTokenExpiry":
            suggest = "access_token_expiry"
        elif key == "refreshToken":
            suggest = "refresh_token"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppThreeLeggedOauthCredential. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppThreeLeggedOauthCredential.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppThreeLeggedOauthCredential.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: Optional[str] = None,
                 access_token_expiry: Optional[str] = None,
                 refresh_token: Optional[str] = None):
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if access_token_expiry is not None:
            pulumi.set(__self__, "access_token_expiry", access_token_expiry)
        if refresh_token is not None:
            pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[str]:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="accessTokenExpiry")
    def access_token_expiry(self) -> Optional[str]:
        return pulumi.get(self, "access_token_expiry")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> Optional[str]:
        return pulumi.get(self, "refresh_token")


@pulumi.output_type
class DomainsAppUrnietfparamsscimschemasoracleidcsextensionmulticloudServiceAppApp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "multicloudServiceType":
            suggest = "multicloud_service_type"
        elif key == "multicloudPlatformUrl":
            suggest = "multicloud_platform_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsAppUrnietfparamsscimschemasoracleidcsextensionmulticloudServiceAppApp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsAppUrnietfparamsscimschemasoracleidcsextensionmulticloudServiceAppApp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsAppUrnietfparamsscimschemasoracleidcsextensionmulticloudServiceAppApp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 multicloud_service_type: str,
                 multicloud_platform_url: Optional[str] = None):
        pulumi.set(__self__, "multicloud_service_type", multicloud_service_type)
        if multicloud_platform_url is not None:
            pulumi.set(__self__, "multicloud_platform_url", multicloud_platform_url)

    @property
    @pulumi.getter(name="multicloudServiceType")
    def multicloud_service_type(self) -> str:
        return pulumi.get(self, "multicloud_service_type")

    @property
    @pulumi.getter(name="multicloudPlatformUrl")
    def multicloud_platform_url(self) -> Optional[str]:
        return pulumi.get(self, "multicloud_platform_url")


@pulumi.output_type
class DomainsAppUrnietfparamsscimschemasoracleidcsextensionopcServiceApp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "currentFederationMode":
            suggest = "current_federation_mode"
        elif key == "currentSynchronizationMode":
            suggest = "current_synchronization_mode"
        elif key == "enablingNextFedSyncModes":
            suggest = "enabling_next_fed_sync_modes"
        elif key == "nextFederationMode":
            suggest = "next_federation_mode"
        elif key == "nextSynchronizationMode":
            suggest = "next_synchronization_mode"
        elif key == "serviceInstanceIdentifier":
            suggest = "service_instance_identifier"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsAppUrnietfparamsscimschemasoracleidcsextensionopcServiceApp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsAppUrnietfparamsscimschemasoracleidcsextensionopcServiceApp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsAppUrnietfparamsscimschemasoracleidcsextensionopcServiceApp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 current_federation_mode: Optional[str] = None,
                 current_synchronization_mode: Optional[str] = None,
                 enabling_next_fed_sync_modes: Optional[bool] = None,
                 next_federation_mode: Optional[str] = None,
                 next_synchronization_mode: Optional[str] = None,
                 region: Optional[str] = None,
                 service_instance_identifier: Optional[str] = None):
        if current_federation_mode is not None:
            pulumi.set(__self__, "current_federation_mode", current_federation_mode)
        if current_synchronization_mode is not None:
            pulumi.set(__self__, "current_synchronization_mode", current_synchronization_mode)
        if enabling_next_fed_sync_modes is not None:
            pulumi.set(__self__, "enabling_next_fed_sync_modes", enabling_next_fed_sync_modes)
        if next_federation_mode is not None:
            pulumi.set(__self__, "next_federation_mode", next_federation_mode)
        if next_synchronization_mode is not None:
            pulumi.set(__self__, "next_synchronization_mode", next_synchronization_mode)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_instance_identifier is not None:
            pulumi.set(__self__, "service_instance_identifier", service_instance_identifier)

    @property
    @pulumi.getter(name="currentFederationMode")
    def current_federation_mode(self) -> Optional[str]:
        return pulumi.get(self, "current_federation_mode")

    @property
    @pulumi.getter(name="currentSynchronizationMode")
    def current_synchronization_mode(self) -> Optional[str]:
        return pulumi.get(self, "current_synchronization_mode")

    @property
    @pulumi.getter(name="enablingNextFedSyncModes")
    def enabling_next_fed_sync_modes(self) -> Optional[bool]:
        return pulumi.get(self, "enabling_next_fed_sync_modes")

    @property
    @pulumi.getter(name="nextFederationMode")
    def next_federation_mode(self) -> Optional[str]:
        return pulumi.get(self, "next_federation_mode")

    @property
    @pulumi.getter(name="nextSynchronizationMode")
    def next_synchronization_mode(self) -> Optional[str]:
        return pulumi.get(self, "next_synchronization_mode")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="serviceInstanceIdentifier")
    def service_instance_identifier(self) -> Optional[str]:
        return pulumi.get(self, "service_instance_identifier")


@pulumi.output_type
class DomainsAppUrnietfparamsscimschemasoracleidcsextensionradiusAppApp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientIp":
            suggest = "client_ip"
        elif key == "includeGroupInResponse":
            suggest = "include_group_in_response"
        elif key == "secretKey":
            suggest = "secret_key"
        elif key == "captureClientIp":
            suggest = "capture_client_ip"
        elif key == "countryCodeResponseAttributeId":
            suggest = "country_code_response_attribute_id"
        elif key == "endUserIpAttribute":
            suggest = "end_user_ip_attribute"
        elif key == "groupMembershipRadiusAttribute":
            suggest = "group_membership_radius_attribute"
        elif key == "groupMembershipToReturns":
            suggest = "group_membership_to_returns"
        elif key == "groupNameFormat":
            suggest = "group_name_format"
        elif key == "passwordAndOtpTogether":
            suggest = "password_and_otp_together"
        elif key == "radiusVendorSpecificId":
            suggest = "radius_vendor_specific_id"
        elif key == "responseFormat":
            suggest = "response_format"
        elif key == "responseFormatDelimiter":
            suggest = "response_format_delimiter"
        elif key == "typeOfRadiusApp":
            suggest = "type_of_radius_app"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsAppUrnietfparamsscimschemasoracleidcsextensionradiusAppApp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsAppUrnietfparamsscimschemasoracleidcsextensionradiusAppApp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsAppUrnietfparamsscimschemasoracleidcsextensionradiusAppApp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_ip: str,
                 include_group_in_response: bool,
                 port: str,
                 secret_key: str,
                 capture_client_ip: Optional[bool] = None,
                 country_code_response_attribute_id: Optional[str] = None,
                 end_user_ip_attribute: Optional[str] = None,
                 group_membership_radius_attribute: Optional[str] = None,
                 group_membership_to_returns: Optional[Sequence['outputs.DomainsAppUrnietfparamsscimschemasoracleidcsextensionradiusAppAppGroupMembershipToReturn']] = None,
                 group_name_format: Optional[str] = None,
                 password_and_otp_together: Optional[bool] = None,
                 radius_vendor_specific_id: Optional[str] = None,
                 response_format: Optional[str] = None,
                 response_format_delimiter: Optional[str] = None,
                 type_of_radius_app: Optional[str] = None):
        pulumi.set(__self__, "client_ip", client_ip)
        pulumi.set(__self__, "include_group_in_response", include_group_in_response)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "secret_key", secret_key)
        if capture_client_ip is not None:
            pulumi.set(__self__, "capture_client_ip", capture_client_ip)
        if country_code_response_attribute_id is not None:
            pulumi.set(__self__, "country_code_response_attribute_id", country_code_response_attribute_id)
        if end_user_ip_attribute is not None:
            pulumi.set(__self__, "end_user_ip_attribute", end_user_ip_attribute)
        if group_membership_radius_attribute is not None:
            pulumi.set(__self__, "group_membership_radius_attribute", group_membership_radius_attribute)
        if group_membership_to_returns is not None:
            pulumi.set(__self__, "group_membership_to_returns", group_membership_to_returns)
        if group_name_format is not None:
            pulumi.set(__self__, "group_name_format", group_name_format)
        if password_and_otp_together is not None:
            pulumi.set(__self__, "password_and_otp_together", password_and_otp_together)
        if radius_vendor_specific_id is not None:
            pulumi.set(__self__, "radius_vendor_specific_id", radius_vendor_specific_id)
        if response_format is not None:
            pulumi.set(__self__, "response_format", response_format)
        if response_format_delimiter is not None:
            pulumi.set(__self__, "response_format_delimiter", response_format_delimiter)
        if type_of_radius_app is not None:
            pulumi.set(__self__, "type_of_radius_app", type_of_radius_app)

    @property
    @pulumi.getter(name="clientIp")
    def client_ip(self) -> str:
        return pulumi.get(self, "client_ip")

    @property
    @pulumi.getter(name="includeGroupInResponse")
    def include_group_in_response(self) -> bool:
        return pulumi.get(self, "include_group_in_response")

    @property
    @pulumi.getter
    def port(self) -> str:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> str:
        return pulumi.get(self, "secret_key")

    @property
    @pulumi.getter(name="captureClientIp")
    def capture_client_ip(self) -> Optional[bool]:
        return pulumi.get(self, "capture_client_ip")

    @property
    @pulumi.getter(name="countryCodeResponseAttributeId")
    def country_code_response_attribute_id(self) -> Optional[str]:
        return pulumi.get(self, "country_code_response_attribute_id")

    @property
    @pulumi.getter(name="endUserIpAttribute")
    def end_user_ip_attribute(self) -> Optional[str]:
        return pulumi.get(self, "end_user_ip_attribute")

    @property
    @pulumi.getter(name="groupMembershipRadiusAttribute")
    def group_membership_radius_attribute(self) -> Optional[str]:
        return pulumi.get(self, "group_membership_radius_attribute")

    @property
    @pulumi.getter(name="groupMembershipToReturns")
    def group_membership_to_returns(self) -> Optional[Sequence['outputs.DomainsAppUrnietfparamsscimschemasoracleidcsextensionradiusAppAppGroupMembershipToReturn']]:
        return pulumi.get(self, "group_membership_to_returns")

    @property
    @pulumi.getter(name="groupNameFormat")
    def group_name_format(self) -> Optional[str]:
        return pulumi.get(self, "group_name_format")

    @property
    @pulumi.getter(name="passwordAndOtpTogether")
    def password_and_otp_together(self) -> Optional[bool]:
        return pulumi.get(self, "password_and_otp_together")

    @property
    @pulumi.getter(name="radiusVendorSpecificId")
    def radius_vendor_specific_id(self) -> Optional[str]:
        return pulumi.get(self, "radius_vendor_specific_id")

    @property
    @pulumi.getter(name="responseFormat")
    def response_format(self) -> Optional[str]:
        return pulumi.get(self, "response_format")

    @property
    @pulumi.getter(name="responseFormatDelimiter")
    def response_format_delimiter(self) -> Optional[str]:
        return pulumi.get(self, "response_format_delimiter")

    @property
    @pulumi.getter(name="typeOfRadiusApp")
    def type_of_radius_app(self) -> Optional[str]:
        return pulumi.get(self, "type_of_radius_app")


@pulumi.output_type
class DomainsAppUrnietfparamsscimschemasoracleidcsextensionradiusAppAppGroupMembershipToReturn(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ref: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsAppUrnietfparamsscimschemasoracleidcsextensionrequestableApp(dict):
    def __init__(__self__, *,
                 requestable: Optional[bool] = None):
        if requestable is not None:
            pulumi.set(__self__, "requestable", requestable)

    @property
    @pulumi.getter
    def requestable(self) -> Optional[bool]:
        return pulumi.get(self, "requestable")


@pulumi.output_type
class DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderApp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "assertionConsumerUrl":
            suggest = "assertion_consumer_url"
        elif key == "encryptAssertion":
            suggest = "encrypt_assertion"
        elif key == "encryptionAlgorithm":
            suggest = "encryption_algorithm"
        elif key == "encryptionCertificate":
            suggest = "encryption_certificate"
        elif key == "federationProtocol":
            suggest = "federation_protocol"
        elif key == "groupAssertionAttributes":
            suggest = "group_assertion_attributes"
        elif key == "hokAcsUrl":
            suggest = "hok_acs_url"
        elif key == "hokRequired":
            suggest = "hok_required"
        elif key == "includeSigningCertInSignature":
            suggest = "include_signing_cert_in_signature"
        elif key == "keyEncryptionAlgorithm":
            suggest = "key_encryption_algorithm"
        elif key == "lastNotificationSentTime":
            suggest = "last_notification_sent_time"
        elif key == "logoutBinding":
            suggest = "logout_binding"
        elif key == "logoutEnabled":
            suggest = "logout_enabled"
        elif key == "logoutRequestUrl":
            suggest = "logout_request_url"
        elif key == "logoutResponseUrl":
            suggest = "logout_response_url"
        elif key == "nameIdFormat":
            suggest = "name_id_format"
        elif key == "nameIdUserstoreAttribute":
            suggest = "name_id_userstore_attribute"
        elif key == "outboundAssertionAttributes":
            suggest = "outbound_assertion_attributes"
        elif key == "partnerProviderId":
            suggest = "partner_provider_id"
        elif key == "partnerProviderPattern":
            suggest = "partner_provider_pattern"
        elif key == "signResponseOrAssertion":
            suggest = "sign_response_or_assertion"
        elif key == "signatureHashAlgorithm":
            suggest = "signature_hash_algorithm"
        elif key == "signingCertificate":
            suggest = "signing_certificate"
        elif key == "succinctId":
            suggest = "succinct_id"
        elif key == "tenantProviderId":
            suggest = "tenant_provider_id"
        elif key == "userAssertionAttributes":
            suggest = "user_assertion_attributes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderApp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderApp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderApp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 assertion_consumer_url: Optional[str] = None,
                 encrypt_assertion: Optional[bool] = None,
                 encryption_algorithm: Optional[str] = None,
                 encryption_certificate: Optional[str] = None,
                 federation_protocol: Optional[str] = None,
                 group_assertion_attributes: Optional[Sequence['outputs.DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppGroupAssertionAttribute']] = None,
                 hok_acs_url: Optional[str] = None,
                 hok_required: Optional[bool] = None,
                 include_signing_cert_in_signature: Optional[bool] = None,
                 key_encryption_algorithm: Optional[str] = None,
                 last_notification_sent_time: Optional[str] = None,
                 logout_binding: Optional[str] = None,
                 logout_enabled: Optional[bool] = None,
                 logout_request_url: Optional[str] = None,
                 logout_response_url: Optional[str] = None,
                 metadata: Optional[str] = None,
                 name_id_format: Optional[str] = None,
                 name_id_userstore_attribute: Optional[str] = None,
                 outbound_assertion_attributes: Optional[Sequence['outputs.DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppOutboundAssertionAttribute']] = None,
                 partner_provider_id: Optional[str] = None,
                 partner_provider_pattern: Optional[str] = None,
                 sign_response_or_assertion: Optional[str] = None,
                 signature_hash_algorithm: Optional[str] = None,
                 signing_certificate: Optional[str] = None,
                 succinct_id: Optional[str] = None,
                 tenant_provider_id: Optional[str] = None,
                 user_assertion_attributes: Optional[Sequence['outputs.DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppUserAssertionAttribute']] = None):
        if assertion_consumer_url is not None:
            pulumi.set(__self__, "assertion_consumer_url", assertion_consumer_url)
        if encrypt_assertion is not None:
            pulumi.set(__self__, "encrypt_assertion", encrypt_assertion)
        if encryption_algorithm is not None:
            pulumi.set(__self__, "encryption_algorithm", encryption_algorithm)
        if encryption_certificate is not None:
            pulumi.set(__self__, "encryption_certificate", encryption_certificate)
        if federation_protocol is not None:
            pulumi.set(__self__, "federation_protocol", federation_protocol)
        if group_assertion_attributes is not None:
            pulumi.set(__self__, "group_assertion_attributes", group_assertion_attributes)
        if hok_acs_url is not None:
            pulumi.set(__self__, "hok_acs_url", hok_acs_url)
        if hok_required is not None:
            pulumi.set(__self__, "hok_required", hok_required)
        if include_signing_cert_in_signature is not None:
            pulumi.set(__self__, "include_signing_cert_in_signature", include_signing_cert_in_signature)
        if key_encryption_algorithm is not None:
            pulumi.set(__self__, "key_encryption_algorithm", key_encryption_algorithm)
        if last_notification_sent_time is not None:
            pulumi.set(__self__, "last_notification_sent_time", last_notification_sent_time)
        if logout_binding is not None:
            pulumi.set(__self__, "logout_binding", logout_binding)
        if logout_enabled is not None:
            pulumi.set(__self__, "logout_enabled", logout_enabled)
        if logout_request_url is not None:
            pulumi.set(__self__, "logout_request_url", logout_request_url)
        if logout_response_url is not None:
            pulumi.set(__self__, "logout_response_url", logout_response_url)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if name_id_format is not None:
            pulumi.set(__self__, "name_id_format", name_id_format)
        if name_id_userstore_attribute is not None:
            pulumi.set(__self__, "name_id_userstore_attribute", name_id_userstore_attribute)
        if outbound_assertion_attributes is not None:
            pulumi.set(__self__, "outbound_assertion_attributes", outbound_assertion_attributes)
        if partner_provider_id is not None:
            pulumi.set(__self__, "partner_provider_id", partner_provider_id)
        if partner_provider_pattern is not None:
            pulumi.set(__self__, "partner_provider_pattern", partner_provider_pattern)
        if sign_response_or_assertion is not None:
            pulumi.set(__self__, "sign_response_or_assertion", sign_response_or_assertion)
        if signature_hash_algorithm is not None:
            pulumi.set(__self__, "signature_hash_algorithm", signature_hash_algorithm)
        if signing_certificate is not None:
            pulumi.set(__self__, "signing_certificate", signing_certificate)
        if succinct_id is not None:
            pulumi.set(__self__, "succinct_id", succinct_id)
        if tenant_provider_id is not None:
            pulumi.set(__self__, "tenant_provider_id", tenant_provider_id)
        if user_assertion_attributes is not None:
            pulumi.set(__self__, "user_assertion_attributes", user_assertion_attributes)

    @property
    @pulumi.getter(name="assertionConsumerUrl")
    def assertion_consumer_url(self) -> Optional[str]:
        return pulumi.get(self, "assertion_consumer_url")

    @property
    @pulumi.getter(name="encryptAssertion")
    def encrypt_assertion(self) -> Optional[bool]:
        return pulumi.get(self, "encrypt_assertion")

    @property
    @pulumi.getter(name="encryptionAlgorithm")
    def encryption_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "encryption_algorithm")

    @property
    @pulumi.getter(name="encryptionCertificate")
    def encryption_certificate(self) -> Optional[str]:
        return pulumi.get(self, "encryption_certificate")

    @property
    @pulumi.getter(name="federationProtocol")
    def federation_protocol(self) -> Optional[str]:
        return pulumi.get(self, "federation_protocol")

    @property
    @pulumi.getter(name="groupAssertionAttributes")
    def group_assertion_attributes(self) -> Optional[Sequence['outputs.DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppGroupAssertionAttribute']]:
        return pulumi.get(self, "group_assertion_attributes")

    @property
    @pulumi.getter(name="hokAcsUrl")
    def hok_acs_url(self) -> Optional[str]:
        return pulumi.get(self, "hok_acs_url")

    @property
    @pulumi.getter(name="hokRequired")
    def hok_required(self) -> Optional[bool]:
        return pulumi.get(self, "hok_required")

    @property
    @pulumi.getter(name="includeSigningCertInSignature")
    def include_signing_cert_in_signature(self) -> Optional[bool]:
        return pulumi.get(self, "include_signing_cert_in_signature")

    @property
    @pulumi.getter(name="keyEncryptionAlgorithm")
    def key_encryption_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "key_encryption_algorithm")

    @property
    @pulumi.getter(name="lastNotificationSentTime")
    def last_notification_sent_time(self) -> Optional[str]:
        return pulumi.get(self, "last_notification_sent_time")

    @property
    @pulumi.getter(name="logoutBinding")
    def logout_binding(self) -> Optional[str]:
        return pulumi.get(self, "logout_binding")

    @property
    @pulumi.getter(name="logoutEnabled")
    def logout_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "logout_enabled")

    @property
    @pulumi.getter(name="logoutRequestUrl")
    def logout_request_url(self) -> Optional[str]:
        return pulumi.get(self, "logout_request_url")

    @property
    @pulumi.getter(name="logoutResponseUrl")
    def logout_response_url(self) -> Optional[str]:
        return pulumi.get(self, "logout_response_url")

    @property
    @pulumi.getter
    def metadata(self) -> Optional[str]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="nameIdFormat")
    def name_id_format(self) -> Optional[str]:
        return pulumi.get(self, "name_id_format")

    @property
    @pulumi.getter(name="nameIdUserstoreAttribute")
    def name_id_userstore_attribute(self) -> Optional[str]:
        return pulumi.get(self, "name_id_userstore_attribute")

    @property
    @pulumi.getter(name="outboundAssertionAttributes")
    def outbound_assertion_attributes(self) -> Optional[Sequence['outputs.DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppOutboundAssertionAttribute']]:
        return pulumi.get(self, "outbound_assertion_attributes")

    @property
    @pulumi.getter(name="partnerProviderId")
    def partner_provider_id(self) -> Optional[str]:
        return pulumi.get(self, "partner_provider_id")

    @property
    @pulumi.getter(name="partnerProviderPattern")
    def partner_provider_pattern(self) -> Optional[str]:
        return pulumi.get(self, "partner_provider_pattern")

    @property
    @pulumi.getter(name="signResponseOrAssertion")
    def sign_response_or_assertion(self) -> Optional[str]:
        return pulumi.get(self, "sign_response_or_assertion")

    @property
    @pulumi.getter(name="signatureHashAlgorithm")
    def signature_hash_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "signature_hash_algorithm")

    @property
    @pulumi.getter(name="signingCertificate")
    def signing_certificate(self) -> Optional[str]:
        return pulumi.get(self, "signing_certificate")

    @property
    @pulumi.getter(name="succinctId")
    def succinct_id(self) -> Optional[str]:
        return pulumi.get(self, "succinct_id")

    @property
    @pulumi.getter(name="tenantProviderId")
    def tenant_provider_id(self) -> Optional[str]:
        return pulumi.get(self, "tenant_provider_id")

    @property
    @pulumi.getter(name="userAssertionAttributes")
    def user_assertion_attributes(self) -> Optional[Sequence['outputs.DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppUserAssertionAttribute']]:
        return pulumi.get(self, "user_assertion_attributes")


@pulumi.output_type
class DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppGroupAssertionAttribute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupName":
            suggest = "group_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppGroupAssertionAttribute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppGroupAssertionAttribute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppGroupAssertionAttribute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 condition: Optional[str] = None,
                 format: Optional[str] = None,
                 group_name: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[str]:
        return pulumi.get(self, "group_name")


@pulumi.output_type
class DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppOutboundAssertionAttribute(dict):
    def __init__(__self__, *,
                 value: str,
                 direction: Optional[str] = None,
                 ref: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def direction(self) -> Optional[str]:
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppUserAssertionAttribute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userStoreAttributeName":
            suggest = "user_store_attribute_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppUserAssertionAttribute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppUserAssertionAttribute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppUserAssertionAttribute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 user_store_attribute_name: str,
                 format: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "user_store_attribute_name", user_store_attribute_name)
        if format is not None:
            pulumi.set(__self__, "format", format)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="userStoreAttributeName")
    def user_store_attribute_name(self) -> str:
        return pulumi.get(self, "user_store_attribute_name")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")


@pulumi.output_type
class DomainsAppUrnietfparamsscimschemasoracleidcsextensionwebTierPolicyApp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceRef":
            suggest = "resource_ref"
        elif key == "webTierPolicyAzControl":
            suggest = "web_tier_policy_az_control"
        elif key == "webTierPolicyJson":
            suggest = "web_tier_policy_json"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsAppUrnietfparamsscimschemasoracleidcsextensionwebTierPolicyApp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsAppUrnietfparamsscimschemasoracleidcsextensionwebTierPolicyApp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsAppUrnietfparamsscimschemasoracleidcsextensionwebTierPolicyApp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_ref: Optional[bool] = None,
                 web_tier_policy_az_control: Optional[str] = None,
                 web_tier_policy_json: Optional[str] = None):
        if resource_ref is not None:
            pulumi.set(__self__, "resource_ref", resource_ref)
        if web_tier_policy_az_control is not None:
            pulumi.set(__self__, "web_tier_policy_az_control", web_tier_policy_az_control)
        if web_tier_policy_json is not None:
            pulumi.set(__self__, "web_tier_policy_json", web_tier_policy_json)

    @property
    @pulumi.getter(name="resourceRef")
    def resource_ref(self) -> Optional[bool]:
        return pulumi.get(self, "resource_ref")

    @property
    @pulumi.getter(name="webTierPolicyAzControl")
    def web_tier_policy_az_control(self) -> Optional[str]:
        return pulumi.get(self, "web_tier_policy_az_control")

    @property
    @pulumi.getter(name="webTierPolicyJson")
    def web_tier_policy_json(self) -> Optional[str]:
        return pulumi.get(self, "web_tier_policy_json")


@pulumi.output_type
class DomainsAppUserRole(dict):
    def __init__(__self__, *,
                 value: str,
                 description: Optional[str] = None,
                 display: Optional[str] = None,
                 ref: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsAuthTokenIdcsCreatedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsAuthTokenIdcsLastModifiedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsAuthTokenMeta(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastModified":
            suggest = "last_modified"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsAuthTokenMeta. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsAuthTokenMeta.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsAuthTokenMeta.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class DomainsAuthTokenTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsAuthTokenUrnietfparamsscimschemasoracleidcsextensionselfChangeUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowSelfChange":
            suggest = "allow_self_change"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsAuthTokenUrnietfparamsscimschemasoracleidcsextensionselfChangeUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsAuthTokenUrnietfparamsscimschemasoracleidcsextensionselfChangeUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsAuthTokenUrnietfparamsscimschemasoracleidcsextensionselfChangeUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_self_change: Optional[bool] = None):
        if allow_self_change is not None:
            pulumi.set(__self__, "allow_self_change", allow_self_change)

    @property
    @pulumi.getter(name="allowSelfChange")
    def allow_self_change(self) -> Optional[bool]:
        return pulumi.get(self, "allow_self_change")


@pulumi.output_type
class DomainsAuthTokenUser(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsAuthenticationFactorSettingBypassCodeSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "helpDeskCodeExpiryInMins":
            suggest = "help_desk_code_expiry_in_mins"
        elif key == "helpDeskGenerationEnabled":
            suggest = "help_desk_generation_enabled"
        elif key == "helpDeskMaxUsage":
            suggest = "help_desk_max_usage"
        elif key == "maxActive":
            suggest = "max_active"
        elif key == "selfServiceGenerationEnabled":
            suggest = "self_service_generation_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsAuthenticationFactorSettingBypassCodeSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsAuthenticationFactorSettingBypassCodeSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsAuthenticationFactorSettingBypassCodeSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 help_desk_code_expiry_in_mins: int,
                 help_desk_generation_enabled: bool,
                 help_desk_max_usage: int,
                 length: int,
                 max_active: int,
                 self_service_generation_enabled: bool):
        pulumi.set(__self__, "help_desk_code_expiry_in_mins", help_desk_code_expiry_in_mins)
        pulumi.set(__self__, "help_desk_generation_enabled", help_desk_generation_enabled)
        pulumi.set(__self__, "help_desk_max_usage", help_desk_max_usage)
        pulumi.set(__self__, "length", length)
        pulumi.set(__self__, "max_active", max_active)
        pulumi.set(__self__, "self_service_generation_enabled", self_service_generation_enabled)

    @property
    @pulumi.getter(name="helpDeskCodeExpiryInMins")
    def help_desk_code_expiry_in_mins(self) -> int:
        return pulumi.get(self, "help_desk_code_expiry_in_mins")

    @property
    @pulumi.getter(name="helpDeskGenerationEnabled")
    def help_desk_generation_enabled(self) -> bool:
        return pulumi.get(self, "help_desk_generation_enabled")

    @property
    @pulumi.getter(name="helpDeskMaxUsage")
    def help_desk_max_usage(self) -> int:
        return pulumi.get(self, "help_desk_max_usage")

    @property
    @pulumi.getter
    def length(self) -> int:
        return pulumi.get(self, "length")

    @property
    @pulumi.getter(name="maxActive")
    def max_active(self) -> int:
        return pulumi.get(self, "max_active")

    @property
    @pulumi.getter(name="selfServiceGenerationEnabled")
    def self_service_generation_enabled(self) -> bool:
        return pulumi.get(self, "self_service_generation_enabled")


@pulumi.output_type
class DomainsAuthenticationFactorSettingClientAppSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deviceProtectionPolicy":
            suggest = "device_protection_policy"
        elif key == "initialLockoutPeriodInSecs":
            suggest = "initial_lockout_period_in_secs"
        elif key == "keyPairLength":
            suggest = "key_pair_length"
        elif key == "lockoutEscalationPattern":
            suggest = "lockout_escalation_pattern"
        elif key == "maxFailuresBeforeLockout":
            suggest = "max_failures_before_lockout"
        elif key == "maxFailuresBeforeWarning":
            suggest = "max_failures_before_warning"
        elif key == "maxLockoutIntervalInSecs":
            suggest = "max_lockout_interval_in_secs"
        elif key == "minPinLength":
            suggest = "min_pin_length"
        elif key == "policyUpdateFreqInDays":
            suggest = "policy_update_freq_in_days"
        elif key == "requestSigningAlgo":
            suggest = "request_signing_algo"
        elif key == "sharedSecretEncoding":
            suggest = "shared_secret_encoding"
        elif key == "unlockAppForEachRequestEnabled":
            suggest = "unlock_app_for_each_request_enabled"
        elif key == "unlockAppIntervalInSecs":
            suggest = "unlock_app_interval_in_secs"
        elif key == "unlockOnAppForegroundEnabled":
            suggest = "unlock_on_app_foreground_enabled"
        elif key == "unlockOnAppStartEnabled":
            suggest = "unlock_on_app_start_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsAuthenticationFactorSettingClientAppSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsAuthenticationFactorSettingClientAppSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsAuthenticationFactorSettingClientAppSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 device_protection_policy: str,
                 initial_lockout_period_in_secs: int,
                 key_pair_length: int,
                 lockout_escalation_pattern: str,
                 max_failures_before_lockout: int,
                 max_failures_before_warning: int,
                 max_lockout_interval_in_secs: int,
                 min_pin_length: int,
                 policy_update_freq_in_days: int,
                 request_signing_algo: str,
                 shared_secret_encoding: str,
                 unlock_app_for_each_request_enabled: bool,
                 unlock_app_interval_in_secs: int,
                 unlock_on_app_foreground_enabled: bool,
                 unlock_on_app_start_enabled: bool):
        pulumi.set(__self__, "device_protection_policy", device_protection_policy)
        pulumi.set(__self__, "initial_lockout_period_in_secs", initial_lockout_period_in_secs)
        pulumi.set(__self__, "key_pair_length", key_pair_length)
        pulumi.set(__self__, "lockout_escalation_pattern", lockout_escalation_pattern)
        pulumi.set(__self__, "max_failures_before_lockout", max_failures_before_lockout)
        pulumi.set(__self__, "max_failures_before_warning", max_failures_before_warning)
        pulumi.set(__self__, "max_lockout_interval_in_secs", max_lockout_interval_in_secs)
        pulumi.set(__self__, "min_pin_length", min_pin_length)
        pulumi.set(__self__, "policy_update_freq_in_days", policy_update_freq_in_days)
        pulumi.set(__self__, "request_signing_algo", request_signing_algo)
        pulumi.set(__self__, "shared_secret_encoding", shared_secret_encoding)
        pulumi.set(__self__, "unlock_app_for_each_request_enabled", unlock_app_for_each_request_enabled)
        pulumi.set(__self__, "unlock_app_interval_in_secs", unlock_app_interval_in_secs)
        pulumi.set(__self__, "unlock_on_app_foreground_enabled", unlock_on_app_foreground_enabled)
        pulumi.set(__self__, "unlock_on_app_start_enabled", unlock_on_app_start_enabled)

    @property
    @pulumi.getter(name="deviceProtectionPolicy")
    def device_protection_policy(self) -> str:
        return pulumi.get(self, "device_protection_policy")

    @property
    @pulumi.getter(name="initialLockoutPeriodInSecs")
    def initial_lockout_period_in_secs(self) -> int:
        return pulumi.get(self, "initial_lockout_period_in_secs")

    @property
    @pulumi.getter(name="keyPairLength")
    def key_pair_length(self) -> int:
        return pulumi.get(self, "key_pair_length")

    @property
    @pulumi.getter(name="lockoutEscalationPattern")
    def lockout_escalation_pattern(self) -> str:
        return pulumi.get(self, "lockout_escalation_pattern")

    @property
    @pulumi.getter(name="maxFailuresBeforeLockout")
    def max_failures_before_lockout(self) -> int:
        return pulumi.get(self, "max_failures_before_lockout")

    @property
    @pulumi.getter(name="maxFailuresBeforeWarning")
    def max_failures_before_warning(self) -> int:
        return pulumi.get(self, "max_failures_before_warning")

    @property
    @pulumi.getter(name="maxLockoutIntervalInSecs")
    def max_lockout_interval_in_secs(self) -> int:
        return pulumi.get(self, "max_lockout_interval_in_secs")

    @property
    @pulumi.getter(name="minPinLength")
    def min_pin_length(self) -> int:
        return pulumi.get(self, "min_pin_length")

    @property
    @pulumi.getter(name="policyUpdateFreqInDays")
    def policy_update_freq_in_days(self) -> int:
        return pulumi.get(self, "policy_update_freq_in_days")

    @property
    @pulumi.getter(name="requestSigningAlgo")
    def request_signing_algo(self) -> str:
        return pulumi.get(self, "request_signing_algo")

    @property
    @pulumi.getter(name="sharedSecretEncoding")
    def shared_secret_encoding(self) -> str:
        return pulumi.get(self, "shared_secret_encoding")

    @property
    @pulumi.getter(name="unlockAppForEachRequestEnabled")
    def unlock_app_for_each_request_enabled(self) -> bool:
        return pulumi.get(self, "unlock_app_for_each_request_enabled")

    @property
    @pulumi.getter(name="unlockAppIntervalInSecs")
    def unlock_app_interval_in_secs(self) -> int:
        return pulumi.get(self, "unlock_app_interval_in_secs")

    @property
    @pulumi.getter(name="unlockOnAppForegroundEnabled")
    def unlock_on_app_foreground_enabled(self) -> bool:
        return pulumi.get(self, "unlock_on_app_foreground_enabled")

    @property
    @pulumi.getter(name="unlockOnAppStartEnabled")
    def unlock_on_app_start_enabled(self) -> bool:
        return pulumi.get(self, "unlock_on_app_start_enabled")


@pulumi.output_type
class DomainsAuthenticationFactorSettingCompliancePolicy(dict):
    def __init__(__self__, *,
                 action: str,
                 name: str,
                 value: str):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsAuthenticationFactorSettingEmailSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "emailLinkEnabled":
            suggest = "email_link_enabled"
        elif key == "emailLinkCustomUrl":
            suggest = "email_link_custom_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsAuthenticationFactorSettingEmailSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsAuthenticationFactorSettingEmailSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsAuthenticationFactorSettingEmailSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 email_link_enabled: bool,
                 email_link_custom_url: Optional[str] = None):
        pulumi.set(__self__, "email_link_enabled", email_link_enabled)
        if email_link_custom_url is not None:
            pulumi.set(__self__, "email_link_custom_url", email_link_custom_url)

    @property
    @pulumi.getter(name="emailLinkEnabled")
    def email_link_enabled(self) -> bool:
        return pulumi.get(self, "email_link_enabled")

    @property
    @pulumi.getter(name="emailLinkCustomUrl")
    def email_link_custom_url(self) -> Optional[str]:
        return pulumi.get(self, "email_link_custom_url")


@pulumi.output_type
class DomainsAuthenticationFactorSettingEndpointRestrictions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxEndpointTrustDurationInDays":
            suggest = "max_endpoint_trust_duration_in_days"
        elif key == "maxEnrolledDevices":
            suggest = "max_enrolled_devices"
        elif key == "maxIncorrectAttempts":
            suggest = "max_incorrect_attempts"
        elif key == "maxTrustedEndpoints":
            suggest = "max_trusted_endpoints"
        elif key == "trustedEndpointsEnabled":
            suggest = "trusted_endpoints_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsAuthenticationFactorSettingEndpointRestrictions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsAuthenticationFactorSettingEndpointRestrictions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsAuthenticationFactorSettingEndpointRestrictions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_endpoint_trust_duration_in_days: int,
                 max_enrolled_devices: int,
                 max_incorrect_attempts: int,
                 max_trusted_endpoints: int,
                 trusted_endpoints_enabled: bool):
        pulumi.set(__self__, "max_endpoint_trust_duration_in_days", max_endpoint_trust_duration_in_days)
        pulumi.set(__self__, "max_enrolled_devices", max_enrolled_devices)
        pulumi.set(__self__, "max_incorrect_attempts", max_incorrect_attempts)
        pulumi.set(__self__, "max_trusted_endpoints", max_trusted_endpoints)
        pulumi.set(__self__, "trusted_endpoints_enabled", trusted_endpoints_enabled)

    @property
    @pulumi.getter(name="maxEndpointTrustDurationInDays")
    def max_endpoint_trust_duration_in_days(self) -> int:
        return pulumi.get(self, "max_endpoint_trust_duration_in_days")

    @property
    @pulumi.getter(name="maxEnrolledDevices")
    def max_enrolled_devices(self) -> int:
        return pulumi.get(self, "max_enrolled_devices")

    @property
    @pulumi.getter(name="maxIncorrectAttempts")
    def max_incorrect_attempts(self) -> int:
        return pulumi.get(self, "max_incorrect_attempts")

    @property
    @pulumi.getter(name="maxTrustedEndpoints")
    def max_trusted_endpoints(self) -> int:
        return pulumi.get(self, "max_trusted_endpoints")

    @property
    @pulumi.getter(name="trustedEndpointsEnabled")
    def trusted_endpoints_enabled(self) -> bool:
        return pulumi.get(self, "trusted_endpoints_enabled")


@pulumi.output_type
class DomainsAuthenticationFactorSettingIdcsCreatedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsAuthenticationFactorSettingIdcsLastModifiedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsAuthenticationFactorSettingIdentityStoreSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mobileNumberEnabled":
            suggest = "mobile_number_enabled"
        elif key == "mobileNumberUpdateEnabled":
            suggest = "mobile_number_update_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsAuthenticationFactorSettingIdentityStoreSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsAuthenticationFactorSettingIdentityStoreSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsAuthenticationFactorSettingIdentityStoreSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mobile_number_enabled: Optional[bool] = None,
                 mobile_number_update_enabled: Optional[bool] = None):
        if mobile_number_enabled is not None:
            pulumi.set(__self__, "mobile_number_enabled", mobile_number_enabled)
        if mobile_number_update_enabled is not None:
            pulumi.set(__self__, "mobile_number_update_enabled", mobile_number_update_enabled)

    @property
    @pulumi.getter(name="mobileNumberEnabled")
    def mobile_number_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "mobile_number_enabled")

    @property
    @pulumi.getter(name="mobileNumberUpdateEnabled")
    def mobile_number_update_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "mobile_number_update_enabled")


@pulumi.output_type
class DomainsAuthenticationFactorSettingMeta(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastModified":
            suggest = "last_modified"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsAuthenticationFactorSettingMeta. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsAuthenticationFactorSettingMeta.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsAuthenticationFactorSettingMeta.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class DomainsAuthenticationFactorSettingNotificationSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pullEnabled":
            suggest = "pull_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsAuthenticationFactorSettingNotificationSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsAuthenticationFactorSettingNotificationSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsAuthenticationFactorSettingNotificationSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 pull_enabled: bool):
        pulumi.set(__self__, "pull_enabled", pull_enabled)

    @property
    @pulumi.getter(name="pullEnabled")
    def pull_enabled(self) -> bool:
        return pulumi.get(self, "pull_enabled")


@pulumi.output_type
class DomainsAuthenticationFactorSettingTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsAuthenticationFactorSettingThirdPartyFactor(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "duoSecurity":
            suggest = "duo_security"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsAuthenticationFactorSettingThirdPartyFactor. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsAuthenticationFactorSettingThirdPartyFactor.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsAuthenticationFactorSettingThirdPartyFactor.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duo_security: bool):
        pulumi.set(__self__, "duo_security", duo_security)

    @property
    @pulumi.getter(name="duoSecurity")
    def duo_security(self) -> bool:
        return pulumi.get(self, "duo_security")


@pulumi.output_type
class DomainsAuthenticationFactorSettingTotpSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "emailOtpValidityDurationInMins":
            suggest = "email_otp_validity_duration_in_mins"
        elif key == "emailPasscodeLength":
            suggest = "email_passcode_length"
        elif key == "hashingAlgorithm":
            suggest = "hashing_algorithm"
        elif key == "jwtValidityDurationInSecs":
            suggest = "jwt_validity_duration_in_secs"
        elif key == "keyRefreshIntervalInDays":
            suggest = "key_refresh_interval_in_days"
        elif key == "passcodeLength":
            suggest = "passcode_length"
        elif key == "smsOtpValidityDurationInMins":
            suggest = "sms_otp_validity_duration_in_mins"
        elif key == "smsPasscodeLength":
            suggest = "sms_passcode_length"
        elif key == "timeStepInSecs":
            suggest = "time_step_in_secs"
        elif key == "timeStepTolerance":
            suggest = "time_step_tolerance"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsAuthenticationFactorSettingTotpSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsAuthenticationFactorSettingTotpSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsAuthenticationFactorSettingTotpSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 email_otp_validity_duration_in_mins: int,
                 email_passcode_length: int,
                 hashing_algorithm: str,
                 jwt_validity_duration_in_secs: int,
                 key_refresh_interval_in_days: int,
                 passcode_length: int,
                 sms_otp_validity_duration_in_mins: int,
                 sms_passcode_length: int,
                 time_step_in_secs: int,
                 time_step_tolerance: int):
        pulumi.set(__self__, "email_otp_validity_duration_in_mins", email_otp_validity_duration_in_mins)
        pulumi.set(__self__, "email_passcode_length", email_passcode_length)
        pulumi.set(__self__, "hashing_algorithm", hashing_algorithm)
        pulumi.set(__self__, "jwt_validity_duration_in_secs", jwt_validity_duration_in_secs)
        pulumi.set(__self__, "key_refresh_interval_in_days", key_refresh_interval_in_days)
        pulumi.set(__self__, "passcode_length", passcode_length)
        pulumi.set(__self__, "sms_otp_validity_duration_in_mins", sms_otp_validity_duration_in_mins)
        pulumi.set(__self__, "sms_passcode_length", sms_passcode_length)
        pulumi.set(__self__, "time_step_in_secs", time_step_in_secs)
        pulumi.set(__self__, "time_step_tolerance", time_step_tolerance)

    @property
    @pulumi.getter(name="emailOtpValidityDurationInMins")
    def email_otp_validity_duration_in_mins(self) -> int:
        return pulumi.get(self, "email_otp_validity_duration_in_mins")

    @property
    @pulumi.getter(name="emailPasscodeLength")
    def email_passcode_length(self) -> int:
        return pulumi.get(self, "email_passcode_length")

    @property
    @pulumi.getter(name="hashingAlgorithm")
    def hashing_algorithm(self) -> str:
        return pulumi.get(self, "hashing_algorithm")

    @property
    @pulumi.getter(name="jwtValidityDurationInSecs")
    def jwt_validity_duration_in_secs(self) -> int:
        return pulumi.get(self, "jwt_validity_duration_in_secs")

    @property
    @pulumi.getter(name="keyRefreshIntervalInDays")
    def key_refresh_interval_in_days(self) -> int:
        return pulumi.get(self, "key_refresh_interval_in_days")

    @property
    @pulumi.getter(name="passcodeLength")
    def passcode_length(self) -> int:
        return pulumi.get(self, "passcode_length")

    @property
    @pulumi.getter(name="smsOtpValidityDurationInMins")
    def sms_otp_validity_duration_in_mins(self) -> int:
        return pulumi.get(self, "sms_otp_validity_duration_in_mins")

    @property
    @pulumi.getter(name="smsPasscodeLength")
    def sms_passcode_length(self) -> int:
        return pulumi.get(self, "sms_passcode_length")

    @property
    @pulumi.getter(name="timeStepInSecs")
    def time_step_in_secs(self) -> int:
        return pulumi.get(self, "time_step_in_secs")

    @property
    @pulumi.getter(name="timeStepTolerance")
    def time_step_tolerance(self) -> int:
        return pulumi.get(self, "time_step_tolerance")


@pulumi.output_type
class DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionfidoAuthenticationFactorSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authenticatorSelectionAttachment":
            suggest = "authenticator_selection_attachment"
        elif key == "authenticatorSelectionRequireResidentKey":
            suggest = "authenticator_selection_require_resident_key"
        elif key == "authenticatorSelectionResidentKey":
            suggest = "authenticator_selection_resident_key"
        elif key == "authenticatorSelectionUserVerification":
            suggest = "authenticator_selection_user_verification"
        elif key == "excludeCredentials":
            suggest = "exclude_credentials"
        elif key == "publicKeyTypes":
            suggest = "public_key_types"
        elif key == "domainValidationLevel":
            suggest = "domain_validation_level"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionfidoAuthenticationFactorSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionfidoAuthenticationFactorSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionfidoAuthenticationFactorSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 attestation: str,
                 authenticator_selection_attachment: str,
                 authenticator_selection_require_resident_key: bool,
                 authenticator_selection_resident_key: str,
                 authenticator_selection_user_verification: str,
                 exclude_credentials: bool,
                 public_key_types: Sequence[str],
                 timeout: int,
                 domain_validation_level: Optional[int] = None):
        pulumi.set(__self__, "attestation", attestation)
        pulumi.set(__self__, "authenticator_selection_attachment", authenticator_selection_attachment)
        pulumi.set(__self__, "authenticator_selection_require_resident_key", authenticator_selection_require_resident_key)
        pulumi.set(__self__, "authenticator_selection_resident_key", authenticator_selection_resident_key)
        pulumi.set(__self__, "authenticator_selection_user_verification", authenticator_selection_user_verification)
        pulumi.set(__self__, "exclude_credentials", exclude_credentials)
        pulumi.set(__self__, "public_key_types", public_key_types)
        pulumi.set(__self__, "timeout", timeout)
        if domain_validation_level is not None:
            pulumi.set(__self__, "domain_validation_level", domain_validation_level)

    @property
    @pulumi.getter
    def attestation(self) -> str:
        return pulumi.get(self, "attestation")

    @property
    @pulumi.getter(name="authenticatorSelectionAttachment")
    def authenticator_selection_attachment(self) -> str:
        return pulumi.get(self, "authenticator_selection_attachment")

    @property
    @pulumi.getter(name="authenticatorSelectionRequireResidentKey")
    def authenticator_selection_require_resident_key(self) -> bool:
        return pulumi.get(self, "authenticator_selection_require_resident_key")

    @property
    @pulumi.getter(name="authenticatorSelectionResidentKey")
    def authenticator_selection_resident_key(self) -> str:
        return pulumi.get(self, "authenticator_selection_resident_key")

    @property
    @pulumi.getter(name="authenticatorSelectionUserVerification")
    def authenticator_selection_user_verification(self) -> str:
        return pulumi.get(self, "authenticator_selection_user_verification")

    @property
    @pulumi.getter(name="excludeCredentials")
    def exclude_credentials(self) -> bool:
        return pulumi.get(self, "exclude_credentials")

    @property
    @pulumi.getter(name="publicKeyTypes")
    def public_key_types(self) -> Sequence[str]:
        return pulumi.get(self, "public_key_types")

    @property
    @pulumi.getter
    def timeout(self) -> int:
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter(name="domainValidationLevel")
    def domain_validation_level(self) -> Optional[int]:
        return pulumi.get(self, "domain_validation_level")


@pulumi.output_type
class DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "duoSecuritySettings":
            suggest = "duo_security_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duo_security_settings: Optional['outputs.DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettingsDuoSecuritySettings'] = None):
        if duo_security_settings is not None:
            pulumi.set(__self__, "duo_security_settings", duo_security_settings)

    @property
    @pulumi.getter(name="duoSecuritySettings")
    def duo_security_settings(self) -> Optional['outputs.DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettingsDuoSecuritySettings']:
        return pulumi.get(self, "duo_security_settings")


@pulumi.output_type
class DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettingsDuoSecuritySettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiHostname":
            suggest = "api_hostname"
        elif key == "integrationKey":
            suggest = "integration_key"
        elif key == "secretKey":
            suggest = "secret_key"
        elif key == "userMappingAttribute":
            suggest = "user_mapping_attribute"
        elif key == "attestationKey":
            suggest = "attestation_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettingsDuoSecuritySettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettingsDuoSecuritySettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettingsDuoSecuritySettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_hostname: str,
                 integration_key: str,
                 secret_key: str,
                 user_mapping_attribute: str,
                 attestation_key: Optional[str] = None):
        pulumi.set(__self__, "api_hostname", api_hostname)
        pulumi.set(__self__, "integration_key", integration_key)
        pulumi.set(__self__, "secret_key", secret_key)
        pulumi.set(__self__, "user_mapping_attribute", user_mapping_attribute)
        if attestation_key is not None:
            pulumi.set(__self__, "attestation_key", attestation_key)

    @property
    @pulumi.getter(name="apiHostname")
    def api_hostname(self) -> str:
        return pulumi.get(self, "api_hostname")

    @property
    @pulumi.getter(name="integrationKey")
    def integration_key(self) -> str:
        return pulumi.get(self, "integration_key")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> str:
        return pulumi.get(self, "secret_key")

    @property
    @pulumi.getter(name="userMappingAttribute")
    def user_mapping_attribute(self) -> str:
        return pulumi.get(self, "user_mapping_attribute")

    @property
    @pulumi.getter(name="attestationKey")
    def attestation_key(self) -> Optional[str]:
        return pulumi.get(self, "attestation_key")


@pulumi.output_type
class DomainsCustomerSecretKeyIdcsCreatedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsCustomerSecretKeyIdcsLastModifiedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsCustomerSecretKeyMeta(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastModified":
            suggest = "last_modified"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsCustomerSecretKeyMeta. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsCustomerSecretKeyMeta.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsCustomerSecretKeyMeta.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class DomainsCustomerSecretKeyTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsCustomerSecretKeyUrnietfparamsscimschemasoracleidcsextensionselfChangeUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowSelfChange":
            suggest = "allow_self_change"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsCustomerSecretKeyUrnietfparamsscimschemasoracleidcsextensionselfChangeUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsCustomerSecretKeyUrnietfparamsscimschemasoracleidcsextensionselfChangeUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsCustomerSecretKeyUrnietfparamsscimschemasoracleidcsextensionselfChangeUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_self_change: Optional[bool] = None):
        if allow_self_change is not None:
            pulumi.set(__self__, "allow_self_change", allow_self_change)

    @property
    @pulumi.getter(name="allowSelfChange")
    def allow_self_change(self) -> Optional[bool]:
        return pulumi.get(self, "allow_self_change")


@pulumi.output_type
class DomainsCustomerSecretKeyUser(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsDynamicResourceGroupDynamicGroupAppRole(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adminRole":
            suggest = "admin_role"
        elif key == "appId":
            suggest = "app_id"
        elif key == "appName":
            suggest = "app_name"
        elif key == "legacyGroupName":
            suggest = "legacy_group_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsDynamicResourceGroupDynamicGroupAppRole. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsDynamicResourceGroupDynamicGroupAppRole.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsDynamicResourceGroupDynamicGroupAppRole.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 value: str,
                 admin_role: Optional[bool] = None,
                 app_id: Optional[str] = None,
                 app_name: Optional[str] = None,
                 display: Optional[str] = None,
                 legacy_group_name: Optional[str] = None,
                 ref: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if admin_role is not None:
            pulumi.set(__self__, "admin_role", admin_role)
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if app_name is not None:
            pulumi.set(__self__, "app_name", app_name)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if legacy_group_name is not None:
            pulumi.set(__self__, "legacy_group_name", legacy_group_name)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="adminRole")
    def admin_role(self) -> Optional[bool]:
        return pulumi.get(self, "admin_role")

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[str]:
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="appName")
    def app_name(self) -> Optional[str]:
        return pulumi.get(self, "app_name")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter(name="legacyGroupName")
    def legacy_group_name(self) -> Optional[str]:
        return pulumi.get(self, "legacy_group_name")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsDynamicResourceGroupGrant(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "appId":
            suggest = "app_id"
        elif key == "grantMechanism":
            suggest = "grant_mechanism"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsDynamicResourceGroupGrant. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsDynamicResourceGroupGrant.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsDynamicResourceGroupGrant.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app_id: Optional[str] = None,
                 grant_mechanism: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if grant_mechanism is not None:
            pulumi.set(__self__, "grant_mechanism", grant_mechanism)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[str]:
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="grantMechanism")
    def grant_mechanism(self) -> Optional[str]:
        return pulumi.get(self, "grant_mechanism")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsDynamicResourceGroupIdcsCreatedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsDynamicResourceGroupIdcsLastModifiedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsDynamicResourceGroupMeta(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastModified":
            suggest = "last_modified"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsDynamicResourceGroupMeta. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsDynamicResourceGroupMeta.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsDynamicResourceGroupMeta.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class DomainsDynamicResourceGroupTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTags(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "definedTags":
            suggest = "defined_tags"
        elif key == "freeformTags":
            suggest = "freeform_tags"
        elif key == "tagSlug":
            suggest = "tag_slug"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTags. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTags.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTags.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 defined_tags: Optional[Sequence['outputs.DomainsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagsDefinedTag']] = None,
                 freeform_tags: Optional[Sequence['outputs.DomainsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagsFreeformTag']] = None,
                 tag_slug: Optional[str] = None):
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if tag_slug is not None:
            pulumi.set(__self__, "tag_slug", tag_slug)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Sequence['outputs.DomainsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagsDefinedTag']]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Sequence['outputs.DomainsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagsFreeformTag']]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="tagSlug")
    def tag_slug(self) -> Optional[str]:
        return pulumi.get(self, "tag_slug")


@pulumi.output_type
class DomainsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagsDefinedTag(dict):
    def __init__(__self__, *,
                 key: str,
                 namespace: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagsFreeformTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsGrantApp(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ref: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsGrantAppEntitlementCollection(dict):
    def __init__(__self__, *,
                 value: str,
                 ref: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsGrantEntitlement(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "attributeName":
            suggest = "attribute_name"
        elif key == "attributeValue":
            suggest = "attribute_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsGrantEntitlement. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsGrantEntitlement.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsGrantEntitlement.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 attribute_name: str,
                 attribute_value: str):
        pulumi.set(__self__, "attribute_name", attribute_name)
        pulumi.set(__self__, "attribute_value", attribute_value)

    @property
    @pulumi.getter(name="attributeName")
    def attribute_name(self) -> str:
        return pulumi.get(self, "attribute_name")

    @property
    @pulumi.getter(name="attributeValue")
    def attribute_value(self) -> str:
        return pulumi.get(self, "attribute_value")


@pulumi.output_type
class DomainsGrantGrantee(dict):
    def __init__(__self__, *,
                 type: str,
                 value: str,
                 display: Optional[str] = None,
                 ref: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsGrantGrantor(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsGrantIdcsCreatedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsGrantIdcsLastModifiedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsGrantMeta(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastModified":
            suggest = "last_modified"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsGrantMeta. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsGrantMeta.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsGrantMeta.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class DomainsGrantTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsGroupIdcsCreatedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsGroupIdcsLastModifiedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsGroupMember(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dateAdded":
            suggest = "date_added"
        elif key == "membershipOcid":
            suggest = "membership_ocid"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsGroupMember. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsGroupMember.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsGroupMember.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 value: str,
                 date_added: Optional[str] = None,
                 display: Optional[str] = None,
                 membership_ocid: Optional[str] = None,
                 name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if date_added is not None:
            pulumi.set(__self__, "date_added", date_added)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if membership_ocid is not None:
            pulumi.set(__self__, "membership_ocid", membership_ocid)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="dateAdded")
    def date_added(self) -> Optional[str]:
        return pulumi.get(self, "date_added")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter(name="membershipOcid")
    def membership_ocid(self) -> Optional[str]:
        return pulumi.get(self, "membership_ocid")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsGroupMeta(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastModified":
            suggest = "last_modified"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsGroupMeta. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsGroupMeta.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsGroupMeta.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class DomainsGroupTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsGroupUrnietfparamsscimschemasoracleidcsextensionOciTags(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "definedTags":
            suggest = "defined_tags"
        elif key == "freeformTags":
            suggest = "freeform_tags"
        elif key == "tagSlug":
            suggest = "tag_slug"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsGroupUrnietfparamsscimschemasoracleidcsextensionOciTags. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsGroupUrnietfparamsscimschemasoracleidcsextensionOciTags.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsGroupUrnietfparamsscimschemasoracleidcsextensionOciTags.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 defined_tags: Optional[Sequence['outputs.DomainsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagsDefinedTag']] = None,
                 freeform_tags: Optional[Sequence['outputs.DomainsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagsFreeformTag']] = None,
                 tag_slug: Optional[str] = None):
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if tag_slug is not None:
            pulumi.set(__self__, "tag_slug", tag_slug)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Sequence['outputs.DomainsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagsDefinedTag']]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Sequence['outputs.DomainsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagsFreeformTag']]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="tagSlug")
    def tag_slug(self) -> Optional[str]:
        return pulumi.get(self, "tag_slug")


@pulumi.output_type
class DomainsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagsDefinedTag(dict):
    def __init__(__self__, *,
                 key: str,
                 namespace: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagsFreeformTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "domainLevelSchema":
            suggest = "domain_level_schema"
        elif key == "domainLevelSchemaNames":
            suggest = "domain_level_schema_names"
        elif key == "instanceLevelSchema":
            suggest = "instance_level_schema"
        elif key == "instanceLevelSchemaNames":
            suggest = "instance_level_schema_names"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 domain_level_schema: Optional[str] = None,
                 domain_level_schema_names: Optional[Sequence['outputs.DomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupDomainLevelSchemaName']] = None,
                 instance_level_schema: Optional[str] = None,
                 instance_level_schema_names: Optional[Sequence['outputs.DomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupInstanceLevelSchemaName']] = None):
        if domain_level_schema is not None:
            pulumi.set(__self__, "domain_level_schema", domain_level_schema)
        if domain_level_schema_names is not None:
            pulumi.set(__self__, "domain_level_schema_names", domain_level_schema_names)
        if instance_level_schema is not None:
            pulumi.set(__self__, "instance_level_schema", instance_level_schema)
        if instance_level_schema_names is not None:
            pulumi.set(__self__, "instance_level_schema_names", instance_level_schema_names)

    @property
    @pulumi.getter(name="domainLevelSchema")
    def domain_level_schema(self) -> Optional[str]:
        return pulumi.get(self, "domain_level_schema")

    @property
    @pulumi.getter(name="domainLevelSchemaNames")
    def domain_level_schema_names(self) -> Optional[Sequence['outputs.DomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupDomainLevelSchemaName']]:
        return pulumi.get(self, "domain_level_schema_names")

    @property
    @pulumi.getter(name="instanceLevelSchema")
    def instance_level_schema(self) -> Optional[str]:
        return pulumi.get(self, "instance_level_schema")

    @property
    @pulumi.getter(name="instanceLevelSchemaNames")
    def instance_level_schema_names(self) -> Optional[Sequence['outputs.DomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupInstanceLevelSchemaName']]:
        return pulumi.get(self, "instance_level_schema_names")


@pulumi.output_type
class DomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupDomainLevelSchemaName(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "domainName":
            suggest = "domain_name"
        elif key == "schemaName":
            suggest = "schema_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupDomainLevelSchemaName. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupDomainLevelSchemaName.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupDomainLevelSchemaName.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 domain_name: str,
                 schema_name: str):
        pulumi.set(__self__, "domain_name", domain_name)
        pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> str:
        return pulumi.get(self, "domain_name")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> str:
        return pulumi.get(self, "schema_name")


@pulumi.output_type
class DomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupInstanceLevelSchemaName(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dbInstanceId":
            suggest = "db_instance_id"
        elif key == "schemaName":
            suggest = "schema_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupInstanceLevelSchemaName. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupInstanceLevelSchemaName.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupInstanceLevelSchemaName.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 db_instance_id: str,
                 schema_name: str):
        pulumi.set(__self__, "db_instance_id", db_instance_id)
        pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter(name="dbInstanceId")
    def db_instance_id(self) -> str:
        return pulumi.get(self, "db_instance_id")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> str:
        return pulumi.get(self, "schema_name")


@pulumi.output_type
class DomainsGroupUrnietfparamsscimschemasoracleidcsextensiondynamicGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "membershipRule":
            suggest = "membership_rule"
        elif key == "membershipType":
            suggest = "membership_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsGroupUrnietfparamsscimschemasoracleidcsextensiondynamicGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsGroupUrnietfparamsscimschemasoracleidcsextensiondynamicGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsGroupUrnietfparamsscimschemasoracleidcsextensiondynamicGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 membership_rule: Optional[str] = None,
                 membership_type: Optional[str] = None):
        if membership_rule is not None:
            pulumi.set(__self__, "membership_rule", membership_rule)
        if membership_type is not None:
            pulumi.set(__self__, "membership_type", membership_type)

    @property
    @pulumi.getter(name="membershipRule")
    def membership_rule(self) -> Optional[str]:
        return pulumi.get(self, "membership_rule")

    @property
    @pulumi.getter(name="membershipType")
    def membership_type(self) -> Optional[str]:
        return pulumi.get(self, "membership_type")


@pulumi.output_type
class DomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "appRoles":
            suggest = "app_roles"
        elif key == "creationMechanism":
            suggest = "creation_mechanism"
        elif key == "passwordPolicies":
            suggest = "password_policies"
        elif key == "syncedFromApps":
            suggest = "synced_from_apps"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app_roles: Optional[Sequence['outputs.DomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupAppRole']] = None,
                 creation_mechanism: Optional[str] = None,
                 description: Optional[str] = None,
                 grants: Optional[Sequence['outputs.DomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupGrant']] = None,
                 owners: Optional[Sequence['outputs.DomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupOwner']] = None,
                 password_policies: Optional[Sequence['outputs.DomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupPasswordPolicy']] = None,
                 synced_from_apps: Optional[Sequence['outputs.DomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupSyncedFromApp']] = None):
        if app_roles is not None:
            pulumi.set(__self__, "app_roles", app_roles)
        if creation_mechanism is not None:
            pulumi.set(__self__, "creation_mechanism", creation_mechanism)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if grants is not None:
            pulumi.set(__self__, "grants", grants)
        if owners is not None:
            pulumi.set(__self__, "owners", owners)
        if password_policies is not None:
            pulumi.set(__self__, "password_policies", password_policies)
        if synced_from_apps is not None:
            pulumi.set(__self__, "synced_from_apps", synced_from_apps)

    @property
    @pulumi.getter(name="appRoles")
    def app_roles(self) -> Optional[Sequence['outputs.DomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupAppRole']]:
        return pulumi.get(self, "app_roles")

    @property
    @pulumi.getter(name="creationMechanism")
    def creation_mechanism(self) -> Optional[str]:
        return pulumi.get(self, "creation_mechanism")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def grants(self) -> Optional[Sequence['outputs.DomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupGrant']]:
        return pulumi.get(self, "grants")

    @property
    @pulumi.getter
    def owners(self) -> Optional[Sequence['outputs.DomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupOwner']]:
        return pulumi.get(self, "owners")

    @property
    @pulumi.getter(name="passwordPolicies")
    def password_policies(self) -> Optional[Sequence['outputs.DomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupPasswordPolicy']]:
        return pulumi.get(self, "password_policies")

    @property
    @pulumi.getter(name="syncedFromApps")
    def synced_from_apps(self) -> Optional[Sequence['outputs.DomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupSyncedFromApp']]:
        return pulumi.get(self, "synced_from_apps")


@pulumi.output_type
class DomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupAppRole(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adminRole":
            suggest = "admin_role"
        elif key == "appId":
            suggest = "app_id"
        elif key == "appName":
            suggest = "app_name"
        elif key == "legacyGroupName":
            suggest = "legacy_group_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupAppRole. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupAppRole.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupAppRole.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 value: str,
                 admin_role: Optional[bool] = None,
                 app_id: Optional[str] = None,
                 app_name: Optional[str] = None,
                 display: Optional[str] = None,
                 legacy_group_name: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if admin_role is not None:
            pulumi.set(__self__, "admin_role", admin_role)
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if app_name is not None:
            pulumi.set(__self__, "app_name", app_name)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if legacy_group_name is not None:
            pulumi.set(__self__, "legacy_group_name", legacy_group_name)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="adminRole")
    def admin_role(self) -> Optional[bool]:
        return pulumi.get(self, "admin_role")

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[str]:
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="appName")
    def app_name(self) -> Optional[str]:
        return pulumi.get(self, "app_name")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter(name="legacyGroupName")
    def legacy_group_name(self) -> Optional[str]:
        return pulumi.get(self, "legacy_group_name")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupGrant(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "appId":
            suggest = "app_id"
        elif key == "grantMechanism":
            suggest = "grant_mechanism"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupGrant. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupGrant.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupGrant.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app_id: Optional[str] = None,
                 grant_mechanism: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if grant_mechanism is not None:
            pulumi.set(__self__, "grant_mechanism", grant_mechanism)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[str]:
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="grantMechanism")
    def grant_mechanism(self) -> Optional[str]:
        return pulumi.get(self, "grant_mechanism")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupOwner(dict):
    def __init__(__self__, *,
                 type: str,
                 value: str,
                 display: Optional[str] = None,
                 ref: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupPasswordPolicy(dict):
    def __init__(__self__, *,
                 value: str,
                 name: Optional[str] = None,
                 priority: Optional[int] = None,
                 ref: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupSyncedFromApp(dict):
    def __init__(__self__, *,
                 type: str,
                 value: str,
                 display: Optional[str] = None,
                 ref: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsGroupUrnietfparamsscimschemasoracleidcsextensionposixGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "gidNumber":
            suggest = "gid_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsGroupUrnietfparamsscimschemasoracleidcsextensionposixGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsGroupUrnietfparamsscimschemasoracleidcsextensionposixGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsGroupUrnietfparamsscimschemasoracleidcsextensionposixGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 gid_number: Optional[int] = None):
        if gid_number is not None:
            pulumi.set(__self__, "gid_number", gid_number)

    @property
    @pulumi.getter(name="gidNumber")
    def gid_number(self) -> Optional[int]:
        return pulumi.get(self, "gid_number")


@pulumi.output_type
class DomainsGroupUrnietfparamsscimschemasoracleidcsextensionrequestableGroup(dict):
    def __init__(__self__, *,
                 requestable: Optional[bool] = None):
        if requestable is not None:
            pulumi.set(__self__, "requestable", requestable)

    @property
    @pulumi.getter
    def requestable(self) -> Optional[bool]:
        return pulumi.get(self, "requestable")


@pulumi.output_type
class DomainsIdentityProviderCorrelationPolicy(dict):
    def __init__(__self__, *,
                 type: str,
                 value: str,
                 display: Optional[str] = None,
                 ref: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsIdentityProviderIdcsCreatedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsIdentityProviderIdcsLastModifiedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsIdentityProviderJitUserProvAssignedGroup(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ref: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsIdentityProviderJitUserProvAttributes(dict):
    def __init__(__self__, *,
                 value: str,
                 ref: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsIdentityProviderJitUserProvGroupMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "idpGroup":
            suggest = "idp_group"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsIdentityProviderJitUserProvGroupMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsIdentityProviderJitUserProvGroupMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsIdentityProviderJitUserProvGroupMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 idp_group: str,
                 value: str,
                 ref: Optional[str] = None):
        pulumi.set(__self__, "idp_group", idp_group)
        pulumi.set(__self__, "value", value)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter(name="idpGroup")
    def idp_group(self) -> str:
        return pulumi.get(self, "idp_group")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsIdentityProviderMeta(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastModified":
            suggest = "last_modified"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsIdentityProviderMeta. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsIdentityProviderMeta.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsIdentityProviderMeta.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class DomainsIdentityProviderTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountLinkingEnabled":
            suggest = "account_linking_enabled"
        elif key == "consumerKey":
            suggest = "consumer_key"
        elif key == "consumerSecret":
            suggest = "consumer_secret"
        elif key == "registrationEnabled":
            suggest = "registration_enabled"
        elif key == "serviceProviderName":
            suggest = "service_provider_name"
        elif key == "accessTokenUrl":
            suggest = "access_token_url"
        elif key == "adminScopes":
            suggest = "admin_scopes"
        elif key == "authzUrl":
            suggest = "authz_url"
        elif key == "clientCredentialInPayload":
            suggest = "client_credential_in_payload"
        elif key == "clockSkewInSeconds":
            suggest = "clock_skew_in_seconds"
        elif key == "discoveryUrl":
            suggest = "discovery_url"
        elif key == "idAttribute":
            suggest = "id_attribute"
        elif key == "profileUrl":
            suggest = "profile_url"
        elif key == "redirectUrl":
            suggest = "redirect_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_linking_enabled: bool,
                 consumer_key: str,
                 consumer_secret: str,
                 registration_enabled: bool,
                 service_provider_name: str,
                 access_token_url: Optional[str] = None,
                 admin_scopes: Optional[Sequence[str]] = None,
                 authz_url: Optional[str] = None,
                 client_credential_in_payload: Optional[bool] = None,
                 clock_skew_in_seconds: Optional[int] = None,
                 discovery_url: Optional[str] = None,
                 id_attribute: Optional[str] = None,
                 profile_url: Optional[str] = None,
                 redirect_url: Optional[str] = None,
                 scopes: Optional[Sequence[str]] = None,
                 status: Optional[str] = None):
        pulumi.set(__self__, "account_linking_enabled", account_linking_enabled)
        pulumi.set(__self__, "consumer_key", consumer_key)
        pulumi.set(__self__, "consumer_secret", consumer_secret)
        pulumi.set(__self__, "registration_enabled", registration_enabled)
        pulumi.set(__self__, "service_provider_name", service_provider_name)
        if access_token_url is not None:
            pulumi.set(__self__, "access_token_url", access_token_url)
        if admin_scopes is not None:
            pulumi.set(__self__, "admin_scopes", admin_scopes)
        if authz_url is not None:
            pulumi.set(__self__, "authz_url", authz_url)
        if client_credential_in_payload is not None:
            pulumi.set(__self__, "client_credential_in_payload", client_credential_in_payload)
        if clock_skew_in_seconds is not None:
            pulumi.set(__self__, "clock_skew_in_seconds", clock_skew_in_seconds)
        if discovery_url is not None:
            pulumi.set(__self__, "discovery_url", discovery_url)
        if id_attribute is not None:
            pulumi.set(__self__, "id_attribute", id_attribute)
        if profile_url is not None:
            pulumi.set(__self__, "profile_url", profile_url)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="accountLinkingEnabled")
    def account_linking_enabled(self) -> bool:
        return pulumi.get(self, "account_linking_enabled")

    @property
    @pulumi.getter(name="consumerKey")
    def consumer_key(self) -> str:
        return pulumi.get(self, "consumer_key")

    @property
    @pulumi.getter(name="consumerSecret")
    def consumer_secret(self) -> str:
        return pulumi.get(self, "consumer_secret")

    @property
    @pulumi.getter(name="registrationEnabled")
    def registration_enabled(self) -> bool:
        return pulumi.get(self, "registration_enabled")

    @property
    @pulumi.getter(name="serviceProviderName")
    def service_provider_name(self) -> str:
        return pulumi.get(self, "service_provider_name")

    @property
    @pulumi.getter(name="accessTokenUrl")
    def access_token_url(self) -> Optional[str]:
        return pulumi.get(self, "access_token_url")

    @property
    @pulumi.getter(name="adminScopes")
    def admin_scopes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "admin_scopes")

    @property
    @pulumi.getter(name="authzUrl")
    def authz_url(self) -> Optional[str]:
        return pulumi.get(self, "authz_url")

    @property
    @pulumi.getter(name="clientCredentialInPayload")
    def client_credential_in_payload(self) -> Optional[bool]:
        return pulumi.get(self, "client_credential_in_payload")

    @property
    @pulumi.getter(name="clockSkewInSeconds")
    def clock_skew_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "clock_skew_in_seconds")

    @property
    @pulumi.getter(name="discoveryUrl")
    def discovery_url(self) -> Optional[str]:
        return pulumi.get(self, "discovery_url")

    @property
    @pulumi.getter(name="idAttribute")
    def id_attribute(self) -> Optional[str]:
        return pulumi.get(self, "id_attribute")

    @property
    @pulumi.getter(name="profileUrl")
    def profile_url(self) -> Optional[str]:
        return pulumi.get(self, "profile_url")

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[str]:
        return pulumi.get(self, "redirect_url")

    @property
    @pulumi.getter
    def scopes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "scopes")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class DomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionx509identityProvider(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certMatchAttribute":
            suggest = "cert_match_attribute"
        elif key == "signingCertificateChains":
            suggest = "signing_certificate_chains"
        elif key == "userMatchAttribute":
            suggest = "user_match_attribute"
        elif key == "crlCheckOnOcspFailureEnabled":
            suggest = "crl_check_on_ocsp_failure_enabled"
        elif key == "crlEnabled":
            suggest = "crl_enabled"
        elif key == "crlLocation":
            suggest = "crl_location"
        elif key == "crlReloadDuration":
            suggest = "crl_reload_duration"
        elif key == "ekuValidationEnabled":
            suggest = "eku_validation_enabled"
        elif key == "ekuValues":
            suggest = "eku_values"
        elif key == "ocspAllowUnknownResponseStatus":
            suggest = "ocsp_allow_unknown_response_status"
        elif key == "ocspEnableSignedResponse":
            suggest = "ocsp_enable_signed_response"
        elif key == "ocspEnabled":
            suggest = "ocsp_enabled"
        elif key == "ocspResponderUrl":
            suggest = "ocsp_responder_url"
        elif key == "ocspRevalidateTime":
            suggest = "ocsp_revalidate_time"
        elif key == "ocspServerName":
            suggest = "ocsp_server_name"
        elif key == "ocspTrustCertChains":
            suggest = "ocsp_trust_cert_chains"
        elif key == "otherCertMatchAttribute":
            suggest = "other_cert_match_attribute"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionx509identityProvider. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionx509identityProvider.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionx509identityProvider.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cert_match_attribute: str,
                 signing_certificate_chains: Sequence[str],
                 user_match_attribute: str,
                 crl_check_on_ocsp_failure_enabled: Optional[bool] = None,
                 crl_enabled: Optional[bool] = None,
                 crl_location: Optional[str] = None,
                 crl_reload_duration: Optional[int] = None,
                 eku_validation_enabled: Optional[bool] = None,
                 eku_values: Optional[Sequence[str]] = None,
                 ocsp_allow_unknown_response_status: Optional[bool] = None,
                 ocsp_enable_signed_response: Optional[bool] = None,
                 ocsp_enabled: Optional[bool] = None,
                 ocsp_responder_url: Optional[str] = None,
                 ocsp_revalidate_time: Optional[int] = None,
                 ocsp_server_name: Optional[str] = None,
                 ocsp_trust_cert_chains: Optional[Sequence[str]] = None,
                 other_cert_match_attribute: Optional[str] = None):
        pulumi.set(__self__, "cert_match_attribute", cert_match_attribute)
        pulumi.set(__self__, "signing_certificate_chains", signing_certificate_chains)
        pulumi.set(__self__, "user_match_attribute", user_match_attribute)
        if crl_check_on_ocsp_failure_enabled is not None:
            pulumi.set(__self__, "crl_check_on_ocsp_failure_enabled", crl_check_on_ocsp_failure_enabled)
        if crl_enabled is not None:
            pulumi.set(__self__, "crl_enabled", crl_enabled)
        if crl_location is not None:
            pulumi.set(__self__, "crl_location", crl_location)
        if crl_reload_duration is not None:
            pulumi.set(__self__, "crl_reload_duration", crl_reload_duration)
        if eku_validation_enabled is not None:
            pulumi.set(__self__, "eku_validation_enabled", eku_validation_enabled)
        if eku_values is not None:
            pulumi.set(__self__, "eku_values", eku_values)
        if ocsp_allow_unknown_response_status is not None:
            pulumi.set(__self__, "ocsp_allow_unknown_response_status", ocsp_allow_unknown_response_status)
        if ocsp_enable_signed_response is not None:
            pulumi.set(__self__, "ocsp_enable_signed_response", ocsp_enable_signed_response)
        if ocsp_enabled is not None:
            pulumi.set(__self__, "ocsp_enabled", ocsp_enabled)
        if ocsp_responder_url is not None:
            pulumi.set(__self__, "ocsp_responder_url", ocsp_responder_url)
        if ocsp_revalidate_time is not None:
            pulumi.set(__self__, "ocsp_revalidate_time", ocsp_revalidate_time)
        if ocsp_server_name is not None:
            pulumi.set(__self__, "ocsp_server_name", ocsp_server_name)
        if ocsp_trust_cert_chains is not None:
            pulumi.set(__self__, "ocsp_trust_cert_chains", ocsp_trust_cert_chains)
        if other_cert_match_attribute is not None:
            pulumi.set(__self__, "other_cert_match_attribute", other_cert_match_attribute)

    @property
    @pulumi.getter(name="certMatchAttribute")
    def cert_match_attribute(self) -> str:
        return pulumi.get(self, "cert_match_attribute")

    @property
    @pulumi.getter(name="signingCertificateChains")
    def signing_certificate_chains(self) -> Sequence[str]:
        return pulumi.get(self, "signing_certificate_chains")

    @property
    @pulumi.getter(name="userMatchAttribute")
    def user_match_attribute(self) -> str:
        return pulumi.get(self, "user_match_attribute")

    @property
    @pulumi.getter(name="crlCheckOnOcspFailureEnabled")
    def crl_check_on_ocsp_failure_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "crl_check_on_ocsp_failure_enabled")

    @property
    @pulumi.getter(name="crlEnabled")
    def crl_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "crl_enabled")

    @property
    @pulumi.getter(name="crlLocation")
    def crl_location(self) -> Optional[str]:
        return pulumi.get(self, "crl_location")

    @property
    @pulumi.getter(name="crlReloadDuration")
    def crl_reload_duration(self) -> Optional[int]:
        return pulumi.get(self, "crl_reload_duration")

    @property
    @pulumi.getter(name="ekuValidationEnabled")
    def eku_validation_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "eku_validation_enabled")

    @property
    @pulumi.getter(name="ekuValues")
    def eku_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "eku_values")

    @property
    @pulumi.getter(name="ocspAllowUnknownResponseStatus")
    def ocsp_allow_unknown_response_status(self) -> Optional[bool]:
        return pulumi.get(self, "ocsp_allow_unknown_response_status")

    @property
    @pulumi.getter(name="ocspEnableSignedResponse")
    def ocsp_enable_signed_response(self) -> Optional[bool]:
        return pulumi.get(self, "ocsp_enable_signed_response")

    @property
    @pulumi.getter(name="ocspEnabled")
    def ocsp_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "ocsp_enabled")

    @property
    @pulumi.getter(name="ocspResponderUrl")
    def ocsp_responder_url(self) -> Optional[str]:
        return pulumi.get(self, "ocsp_responder_url")

    @property
    @pulumi.getter(name="ocspRevalidateTime")
    def ocsp_revalidate_time(self) -> Optional[int]:
        return pulumi.get(self, "ocsp_revalidate_time")

    @property
    @pulumi.getter(name="ocspServerName")
    def ocsp_server_name(self) -> Optional[str]:
        return pulumi.get(self, "ocsp_server_name")

    @property
    @pulumi.getter(name="ocspTrustCertChains")
    def ocsp_trust_cert_chains(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ocsp_trust_cert_chains")

    @property
    @pulumi.getter(name="otherCertMatchAttribute")
    def other_cert_match_attribute(self) -> Optional[str]:
        return pulumi.get(self, "other_cert_match_attribute")


@pulumi.output_type
class DomainsIdentitySettingIdcsCreatedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsIdentitySettingIdcsLastModifiedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsIdentitySettingMeta(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastModified":
            suggest = "last_modified"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsIdentitySettingMeta. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsIdentitySettingMeta.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsIdentitySettingMeta.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class DomainsIdentitySettingMyProfile(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowEndUsersToChangeTheirPassword":
            suggest = "allow_end_users_to_change_their_password"
        elif key == "allowEndUsersToLinkTheirSupportAccount":
            suggest = "allow_end_users_to_link_their_support_account"
        elif key == "allowEndUsersToManageTheirCapabilities":
            suggest = "allow_end_users_to_manage_their_capabilities"
        elif key == "allowEndUsersToUpdateTheirSecuritySettings":
            suggest = "allow_end_users_to_update_their_security_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsIdentitySettingMyProfile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsIdentitySettingMyProfile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsIdentitySettingMyProfile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_end_users_to_change_their_password: Optional[bool] = None,
                 allow_end_users_to_link_their_support_account: Optional[bool] = None,
                 allow_end_users_to_manage_their_capabilities: Optional[bool] = None,
                 allow_end_users_to_update_their_security_settings: Optional[bool] = None):
        if allow_end_users_to_change_their_password is not None:
            pulumi.set(__self__, "allow_end_users_to_change_their_password", allow_end_users_to_change_their_password)
        if allow_end_users_to_link_their_support_account is not None:
            pulumi.set(__self__, "allow_end_users_to_link_their_support_account", allow_end_users_to_link_their_support_account)
        if allow_end_users_to_manage_their_capabilities is not None:
            pulumi.set(__self__, "allow_end_users_to_manage_their_capabilities", allow_end_users_to_manage_their_capabilities)
        if allow_end_users_to_update_their_security_settings is not None:
            pulumi.set(__self__, "allow_end_users_to_update_their_security_settings", allow_end_users_to_update_their_security_settings)

    @property
    @pulumi.getter(name="allowEndUsersToChangeTheirPassword")
    def allow_end_users_to_change_their_password(self) -> Optional[bool]:
        return pulumi.get(self, "allow_end_users_to_change_their_password")

    @property
    @pulumi.getter(name="allowEndUsersToLinkTheirSupportAccount")
    def allow_end_users_to_link_their_support_account(self) -> Optional[bool]:
        return pulumi.get(self, "allow_end_users_to_link_their_support_account")

    @property
    @pulumi.getter(name="allowEndUsersToManageTheirCapabilities")
    def allow_end_users_to_manage_their_capabilities(self) -> Optional[bool]:
        return pulumi.get(self, "allow_end_users_to_manage_their_capabilities")

    @property
    @pulumi.getter(name="allowEndUsersToUpdateTheirSecuritySettings")
    def allow_end_users_to_update_their_security_settings(self) -> Optional[bool]:
        return pulumi.get(self, "allow_end_users_to_update_their_security_settings")


@pulumi.output_type
class DomainsIdentitySettingPosixGid(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "manualAssignmentEndsAt":
            suggest = "manual_assignment_ends_at"
        elif key == "manualAssignmentStartsFrom":
            suggest = "manual_assignment_starts_from"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsIdentitySettingPosixGid. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsIdentitySettingPosixGid.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsIdentitySettingPosixGid.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 manual_assignment_ends_at: Optional[int] = None,
                 manual_assignment_starts_from: Optional[int] = None):
        if manual_assignment_ends_at is not None:
            pulumi.set(__self__, "manual_assignment_ends_at", manual_assignment_ends_at)
        if manual_assignment_starts_from is not None:
            pulumi.set(__self__, "manual_assignment_starts_from", manual_assignment_starts_from)

    @property
    @pulumi.getter(name="manualAssignmentEndsAt")
    def manual_assignment_ends_at(self) -> Optional[int]:
        return pulumi.get(self, "manual_assignment_ends_at")

    @property
    @pulumi.getter(name="manualAssignmentStartsFrom")
    def manual_assignment_starts_from(self) -> Optional[int]:
        return pulumi.get(self, "manual_assignment_starts_from")


@pulumi.output_type
class DomainsIdentitySettingPosixUid(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "manualAssignmentEndsAt":
            suggest = "manual_assignment_ends_at"
        elif key == "manualAssignmentStartsFrom":
            suggest = "manual_assignment_starts_from"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsIdentitySettingPosixUid. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsIdentitySettingPosixUid.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsIdentitySettingPosixUid.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 manual_assignment_ends_at: Optional[int] = None,
                 manual_assignment_starts_from: Optional[int] = None):
        if manual_assignment_ends_at is not None:
            pulumi.set(__self__, "manual_assignment_ends_at", manual_assignment_ends_at)
        if manual_assignment_starts_from is not None:
            pulumi.set(__self__, "manual_assignment_starts_from", manual_assignment_starts_from)

    @property
    @pulumi.getter(name="manualAssignmentEndsAt")
    def manual_assignment_ends_at(self) -> Optional[int]:
        return pulumi.get(self, "manual_assignment_ends_at")

    @property
    @pulumi.getter(name="manualAssignmentStartsFrom")
    def manual_assignment_starts_from(self) -> Optional[int]:
        return pulumi.get(self, "manual_assignment_starts_from")


@pulumi.output_type
class DomainsIdentitySettingTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsIdentitySettingToken(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expiresAfter":
            suggest = "expires_after"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsIdentitySettingToken. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsIdentitySettingToken.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsIdentitySettingToken.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 expires_after: Optional[int] = None):
        pulumi.set(__self__, "type", type)
        if expires_after is not None:
            pulumi.set(__self__, "expires_after", expires_after)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="expiresAfter")
    def expires_after(self) -> Optional[int]:
        return pulumi.get(self, "expires_after")


@pulumi.output_type
class DomainsKmsiSettingIdcsCreatedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsKmsiSettingIdcsLastModifiedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsKmsiSettingMeta(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastModified":
            suggest = "last_modified"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsKmsiSettingMeta. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsKmsiSettingMeta.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsKmsiSettingMeta.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class DomainsKmsiSettingTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsMyApiKeyIdcsCreatedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsMyApiKeyIdcsLastModifiedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsMyApiKeyMeta(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastModified":
            suggest = "last_modified"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsMyApiKeyMeta. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsMyApiKeyMeta.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsMyApiKeyMeta.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class DomainsMyApiKeyTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsMyApiKeyUser(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsMyAuthTokenIdcsCreatedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsMyAuthTokenIdcsLastModifiedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsMyAuthTokenMeta(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastModified":
            suggest = "last_modified"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsMyAuthTokenMeta. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsMyAuthTokenMeta.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsMyAuthTokenMeta.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class DomainsMyAuthTokenTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsMyAuthTokenUser(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsMyCustomerSecretKeyIdcsCreatedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsMyCustomerSecretKeyIdcsLastModifiedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsMyCustomerSecretKeyMeta(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastModified":
            suggest = "last_modified"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsMyCustomerSecretKeyMeta. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsMyCustomerSecretKeyMeta.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsMyCustomerSecretKeyMeta.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class DomainsMyCustomerSecretKeyTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsMyCustomerSecretKeyUser(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsMyOauth2clientCredentialIdcsCreatedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsMyOauth2clientCredentialIdcsLastModifiedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsMyOauth2clientCredentialMeta(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastModified":
            suggest = "last_modified"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsMyOauth2clientCredentialMeta. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsMyOauth2clientCredentialMeta.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsMyOauth2clientCredentialMeta.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class DomainsMyOauth2clientCredentialScope(dict):
    def __init__(__self__, *,
                 audience: str,
                 scope: str):
        pulumi.set(__self__, "audience", audience)
        pulumi.set(__self__, "scope", scope)

    @property
    @pulumi.getter
    def audience(self) -> str:
        return pulumi.get(self, "audience")

    @property
    @pulumi.getter
    def scope(self) -> str:
        return pulumi.get(self, "scope")


@pulumi.output_type
class DomainsMyOauth2clientCredentialTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsMyOauth2clientCredentialUser(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsMyRequestIdcsCreatedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsMyRequestIdcsLastModifiedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsMyRequestMeta(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastModified":
            suggest = "last_modified"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsMyRequestMeta. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsMyRequestMeta.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsMyRequestMeta.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class DomainsMyRequestRequesting(dict):
    def __init__(__self__, *,
                 type: str,
                 value: str,
                 display: Optional[str] = None,
                 ref: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsMyRequestRequestor(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ref: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsMyRequestTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsMySmtpCredentialIdcsCreatedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsMySmtpCredentialIdcsLastModifiedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsMySmtpCredentialMeta(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastModified":
            suggest = "last_modified"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsMySmtpCredentialMeta. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsMySmtpCredentialMeta.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsMySmtpCredentialMeta.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class DomainsMySmtpCredentialTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsMySmtpCredentialUser(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsMySupportAccountIdcsCreatedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsMySupportAccountIdcsLastModifiedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsMySupportAccountMeta(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastModified":
            suggest = "last_modified"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsMySupportAccountMeta. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsMySupportAccountMeta.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsMySupportAccountMeta.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class DomainsMySupportAccountTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsMySupportAccountUser(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsMyUserDbCredentialIdcsCreatedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsMyUserDbCredentialIdcsLastModifiedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsMyUserDbCredentialMeta(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastModified":
            suggest = "last_modified"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsMyUserDbCredentialMeta. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsMyUserDbCredentialMeta.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsMyUserDbCredentialMeta.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class DomainsMyUserDbCredentialTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsMyUserDbCredentialUser(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsOauth2clientCredentialIdcsCreatedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsOauth2clientCredentialIdcsLastModifiedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsOauth2clientCredentialMeta(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastModified":
            suggest = "last_modified"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsOauth2clientCredentialMeta. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsOauth2clientCredentialMeta.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsOauth2clientCredentialMeta.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class DomainsOauth2clientCredentialScope(dict):
    def __init__(__self__, *,
                 audience: str,
                 scope: str):
        pulumi.set(__self__, "audience", audience)
        pulumi.set(__self__, "scope", scope)

    @property
    @pulumi.getter
    def audience(self) -> str:
        return pulumi.get(self, "audience")

    @property
    @pulumi.getter
    def scope(self) -> str:
        return pulumi.get(self, "scope")


@pulumi.output_type
class DomainsOauth2clientCredentialTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsOauth2clientCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowSelfChange":
            suggest = "allow_self_change"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsOauth2clientCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsOauth2clientCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsOauth2clientCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_self_change: Optional[bool] = None):
        if allow_self_change is not None:
            pulumi.set(__self__, "allow_self_change", allow_self_change)

    @property
    @pulumi.getter(name="allowSelfChange")
    def allow_self_change(self) -> Optional[bool]:
        return pulumi.get(self, "allow_self_change")


@pulumi.output_type
class DomainsOauth2clientCredentialUser(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsPasswordPolicyConfiguredPasswordPolicyRule(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsPasswordPolicyGroup(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ref: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsPasswordPolicyIdcsCreatedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsPasswordPolicyIdcsLastModifiedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsPasswordPolicyMeta(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastModified":
            suggest = "last_modified"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsPasswordPolicyMeta. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsPasswordPolicyMeta.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsPasswordPolicyMeta.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class DomainsPasswordPolicyTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsSecurityQuestionIdcsCreatedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsSecurityQuestionIdcsLastModifiedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsSecurityQuestionMeta(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastModified":
            suggest = "last_modified"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsSecurityQuestionMeta. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsSecurityQuestionMeta.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsSecurityQuestionMeta.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class DomainsSecurityQuestionQuestionText(dict):
    def __init__(__self__, *,
                 locale: str,
                 value: str,
                 default: Optional[bool] = None):
        pulumi.set(__self__, "locale", locale)
        pulumi.set(__self__, "value", value)
        if default is not None:
            pulumi.set(__self__, "default", default)

    @property
    @pulumi.getter
    def locale(self) -> str:
        return pulumi.get(self, "locale")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def default(self) -> Optional[bool]:
        return pulumi.get(self, "default")


@pulumi.output_type
class DomainsSecurityQuestionSettingIdcsCreatedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsSecurityQuestionSettingIdcsLastModifiedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsSecurityQuestionSettingMeta(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastModified":
            suggest = "last_modified"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsSecurityQuestionSettingMeta. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsSecurityQuestionSettingMeta.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsSecurityQuestionSettingMeta.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class DomainsSecurityQuestionSettingTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsSecurityQuestionTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsSmtpCredentialIdcsCreatedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsSmtpCredentialIdcsLastModifiedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsSmtpCredentialMeta(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastModified":
            suggest = "last_modified"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsSmtpCredentialMeta. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsSmtpCredentialMeta.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsSmtpCredentialMeta.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class DomainsSmtpCredentialTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsSmtpCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowSelfChange":
            suggest = "allow_self_change"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsSmtpCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsSmtpCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsSmtpCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_self_change: Optional[bool] = None):
        if allow_self_change is not None:
            pulumi.set(__self__, "allow_self_change", allow_self_change)

    @property
    @pulumi.getter(name="allowSelfChange")
    def allow_self_change(self) -> Optional[bool]:
        return pulumi.get(self, "allow_self_change")


@pulumi.output_type
class DomainsSmtpCredentialUser(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsUserAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "postalCode":
            suggest = "postal_code"
        elif key == "streetAddress":
            suggest = "street_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 country: Optional[str] = None,
                 formatted: Optional[str] = None,
                 locality: Optional[str] = None,
                 postal_code: Optional[str] = None,
                 primary: Optional[bool] = None,
                 region: Optional[str] = None,
                 street_address: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if formatted is not None:
            pulumi.set(__self__, "formatted", formatted)
        if locality is not None:
            pulumi.set(__self__, "locality", locality)
        if postal_code is not None:
            pulumi.set(__self__, "postal_code", postal_code)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if street_address is not None:
            pulumi.set(__self__, "street_address", street_address)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter
    def formatted(self) -> Optional[str]:
        return pulumi.get(self, "formatted")

    @property
    @pulumi.getter
    def locality(self) -> Optional[str]:
        return pulumi.get(self, "locality")

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> Optional[str]:
        return pulumi.get(self, "postal_code")

    @property
    @pulumi.getter
    def primary(self) -> Optional[bool]:
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="streetAddress")
    def street_address(self) -> Optional[str]:
        return pulumi.get(self, "street_address")


@pulumi.output_type
class DomainsUserDbCredentialIdcsCreatedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsUserDbCredentialIdcsLastModifiedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsUserDbCredentialMeta(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastModified":
            suggest = "last_modified"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserDbCredentialMeta. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserDbCredentialMeta.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserDbCredentialMeta.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class DomainsUserDbCredentialTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsUserDbCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowSelfChange":
            suggest = "allow_self_change"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserDbCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserDbCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserDbCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_self_change: Optional[bool] = None):
        if allow_self_change is not None:
            pulumi.set(__self__, "allow_self_change", allow_self_change)

    @property
    @pulumi.getter(name="allowSelfChange")
    def allow_self_change(self) -> Optional[bool]:
        return pulumi.get(self, "allow_self_change")


@pulumi.output_type
class DomainsUserDbCredentialUser(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsUserEmail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pendingVerificationData":
            suggest = "pending_verification_data"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserEmail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserEmail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserEmail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 value: str,
                 pending_verification_data: Optional[str] = None,
                 primary: Optional[bool] = None,
                 secondary: Optional[bool] = None,
                 verified: Optional[bool] = None):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if pending_verification_data is not None:
            pulumi.set(__self__, "pending_verification_data", pending_verification_data)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if secondary is not None:
            pulumi.set(__self__, "secondary", secondary)
        if verified is not None:
            pulumi.set(__self__, "verified", verified)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="pendingVerificationData")
    def pending_verification_data(self) -> Optional[str]:
        return pulumi.get(self, "pending_verification_data")

    @property
    @pulumi.getter
    def primary(self) -> Optional[bool]:
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def secondary(self) -> Optional[bool]:
        return pulumi.get(self, "secondary")

    @property
    @pulumi.getter
    def verified(self) -> Optional[bool]:
        return pulumi.get(self, "verified")


@pulumi.output_type
class DomainsUserEntitlement(dict):
    def __init__(__self__, *,
                 type: str,
                 value: str,
                 display: Optional[str] = None,
                 primary: Optional[bool] = None):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def primary(self) -> Optional[bool]:
        return pulumi.get(self, "primary")


@pulumi.output_type
class DomainsUserGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dateAdded":
            suggest = "date_added"
        elif key == "externalId":
            suggest = "external_id"
        elif key == "membershipOcid":
            suggest = "membership_ocid"
        elif key == "nonUniqueDisplay":
            suggest = "non_unique_display"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 value: str,
                 date_added: Optional[str] = None,
                 display: Optional[str] = None,
                 external_id: Optional[str] = None,
                 membership_ocid: Optional[str] = None,
                 non_unique_display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if date_added is not None:
            pulumi.set(__self__, "date_added", date_added)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if membership_ocid is not None:
            pulumi.set(__self__, "membership_ocid", membership_ocid)
        if non_unique_display is not None:
            pulumi.set(__self__, "non_unique_display", non_unique_display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="dateAdded")
    def date_added(self) -> Optional[str]:
        return pulumi.get(self, "date_added")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[str]:
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter(name="membershipOcid")
    def membership_ocid(self) -> Optional[str]:
        return pulumi.get(self, "membership_ocid")

    @property
    @pulumi.getter(name="nonUniqueDisplay")
    def non_unique_display(self) -> Optional[str]:
        return pulumi.get(self, "non_unique_display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsUserIdcsCreatedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsUserIdcsLastModifiedBy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsUserIm(dict):
    def __init__(__self__, *,
                 type: str,
                 value: str,
                 display: Optional[str] = None,
                 primary: Optional[bool] = None):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def primary(self) -> Optional[bool]:
        return pulumi.get(self, "primary")


@pulumi.output_type
class DomainsUserMeta(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastModified":
            suggest = "last_modified"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserMeta. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserMeta.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserMeta.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class DomainsUserName(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "familyName":
            suggest = "family_name"
        elif key == "givenName":
            suggest = "given_name"
        elif key == "honorificPrefix":
            suggest = "honorific_prefix"
        elif key == "honorificSuffix":
            suggest = "honorific_suffix"
        elif key == "middleName":
            suggest = "middle_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserName. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserName.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserName.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 family_name: str,
                 formatted: Optional[str] = None,
                 given_name: Optional[str] = None,
                 honorific_prefix: Optional[str] = None,
                 honorific_suffix: Optional[str] = None,
                 middle_name: Optional[str] = None):
        pulumi.set(__self__, "family_name", family_name)
        if formatted is not None:
            pulumi.set(__self__, "formatted", formatted)
        if given_name is not None:
            pulumi.set(__self__, "given_name", given_name)
        if honorific_prefix is not None:
            pulumi.set(__self__, "honorific_prefix", honorific_prefix)
        if honorific_suffix is not None:
            pulumi.set(__self__, "honorific_suffix", honorific_suffix)
        if middle_name is not None:
            pulumi.set(__self__, "middle_name", middle_name)

    @property
    @pulumi.getter(name="familyName")
    def family_name(self) -> str:
        return pulumi.get(self, "family_name")

    @property
    @pulumi.getter
    def formatted(self) -> Optional[str]:
        return pulumi.get(self, "formatted")

    @property
    @pulumi.getter(name="givenName")
    def given_name(self) -> Optional[str]:
        return pulumi.get(self, "given_name")

    @property
    @pulumi.getter(name="honorificPrefix")
    def honorific_prefix(self) -> Optional[str]:
        return pulumi.get(self, "honorific_prefix")

    @property
    @pulumi.getter(name="honorificSuffix")
    def honorific_suffix(self) -> Optional[str]:
        return pulumi.get(self, "honorific_suffix")

    @property
    @pulumi.getter(name="middleName")
    def middle_name(self) -> Optional[str]:
        return pulumi.get(self, "middle_name")


@pulumi.output_type
class DomainsUserPhoneNumber(dict):
    def __init__(__self__, *,
                 type: str,
                 value: str,
                 display: Optional[str] = None,
                 primary: Optional[bool] = None,
                 verified: Optional[bool] = None):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if verified is not None:
            pulumi.set(__self__, "verified", verified)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def primary(self) -> Optional[bool]:
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def verified(self) -> Optional[bool]:
        return pulumi.get(self, "verified")


@pulumi.output_type
class DomainsUserPhoto(dict):
    def __init__(__self__, *,
                 type: str,
                 value: str,
                 display: Optional[str] = None,
                 primary: Optional[bool] = None):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def primary(self) -> Optional[bool]:
        return pulumi.get(self, "primary")


@pulumi.output_type
class DomainsUserRole(dict):
    def __init__(__self__, *,
                 type: str,
                 value: str,
                 display: Optional[str] = None,
                 primary: Optional[bool] = None):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def primary(self) -> Optional[bool]:
        return pulumi.get(self, "primary")


@pulumi.output_type
class DomainsUserTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasextensionenterprise20user(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "costCenter":
            suggest = "cost_center"
        elif key == "employeeNumber":
            suggest = "employee_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserUrnietfparamsscimschemasextensionenterprise20user. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserUrnietfparamsscimschemasextensionenterprise20user.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserUrnietfparamsscimschemasextensionenterprise20user.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cost_center: Optional[str] = None,
                 department: Optional[str] = None,
                 division: Optional[str] = None,
                 employee_number: Optional[str] = None,
                 manager: Optional['outputs.DomainsUserUrnietfparamsscimschemasextensionenterprise20userManager'] = None,
                 organization: Optional[str] = None):
        if cost_center is not None:
            pulumi.set(__self__, "cost_center", cost_center)
        if department is not None:
            pulumi.set(__self__, "department", department)
        if division is not None:
            pulumi.set(__self__, "division", division)
        if employee_number is not None:
            pulumi.set(__self__, "employee_number", employee_number)
        if manager is not None:
            pulumi.set(__self__, "manager", manager)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)

    @property
    @pulumi.getter(name="costCenter")
    def cost_center(self) -> Optional[str]:
        return pulumi.get(self, "cost_center")

    @property
    @pulumi.getter
    def department(self) -> Optional[str]:
        return pulumi.get(self, "department")

    @property
    @pulumi.getter
    def division(self) -> Optional[str]:
        return pulumi.get(self, "division")

    @property
    @pulumi.getter(name="employeeNumber")
    def employee_number(self) -> Optional[str]:
        return pulumi.get(self, "employee_number")

    @property
    @pulumi.getter
    def manager(self) -> Optional['outputs.DomainsUserUrnietfparamsscimschemasextensionenterprise20userManager']:
        return pulumi.get(self, "manager")

    @property
    @pulumi.getter
    def organization(self) -> Optional[str]:
        return pulumi.get(self, "organization")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasextensionenterprise20userManager(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserUrnietfparamsscimschemasextensionenterprise20userManager. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserUrnietfparamsscimschemasextensionenterprise20userManager.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserUrnietfparamsscimschemasextensionenterprise20userManager.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionOciTags(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "definedTags":
            suggest = "defined_tags"
        elif key == "freeformTags":
            suggest = "freeform_tags"
        elif key == "tagSlug":
            suggest = "tag_slug"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserUrnietfparamsscimschemasoracleidcsextensionOciTags. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionOciTags.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionOciTags.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 defined_tags: Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionOciTagsDefinedTag']] = None,
                 freeform_tags: Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionOciTagsFreeformTag']] = None,
                 tag_slug: Optional[str] = None):
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if tag_slug is not None:
            pulumi.set(__self__, "tag_slug", tag_slug)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionOciTagsDefinedTag']]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionOciTagsFreeformTag']]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="tagSlug")
    def tag_slug(self) -> Optional[str]:
        return pulumi.get(self, "tag_slug")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionOciTagsDefinedTag(dict):
    def __init__(__self__, *,
                 key: str,
                 namespace: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionOciTagsFreeformTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionadaptiveUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "riskLevel":
            suggest = "risk_level"
        elif key == "riskScores":
            suggest = "risk_scores"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserUrnietfparamsscimschemasoracleidcsextensionadaptiveUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionadaptiveUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionadaptiveUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 risk_level: Optional[str] = None,
                 risk_scores: Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionadaptiveUserRiskScore']] = None):
        if risk_level is not None:
            pulumi.set(__self__, "risk_level", risk_level)
        if risk_scores is not None:
            pulumi.set(__self__, "risk_scores", risk_scores)

    @property
    @pulumi.getter(name="riskLevel")
    def risk_level(self) -> Optional[str]:
        return pulumi.get(self, "risk_level")

    @property
    @pulumi.getter(name="riskScores")
    def risk_scores(self) -> Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionadaptiveUserRiskScore']]:
        return pulumi.get(self, "risk_scores")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionadaptiveUserRiskScore(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastUpdateTimestamp":
            suggest = "last_update_timestamp"
        elif key == "riskLevel":
            suggest = "risk_level"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserUrnietfparamsscimschemasoracleidcsextensionadaptiveUserRiskScore. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionadaptiveUserRiskScore.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionadaptiveUserRiskScore.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 last_update_timestamp: str,
                 risk_level: str,
                 score: int,
                 value: str,
                 ref: Optional[str] = None,
                 source: Optional[str] = None,
                 status: Optional[str] = None):
        pulumi.set(__self__, "last_update_timestamp", last_update_timestamp)
        pulumi.set(__self__, "risk_level", risk_level)
        pulumi.set(__self__, "score", score)
        pulumi.set(__self__, "value", value)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="lastUpdateTimestamp")
    def last_update_timestamp(self) -> str:
        return pulumi.get(self, "last_update_timestamp")

    @property
    @pulumi.getter(name="riskLevel")
    def risk_level(self) -> str:
        return pulumi.get(self, "risk_level")

    @property
    @pulumi.getter
    def score(self) -> int:
        return pulumi.get(self, "score")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensioncapabilitiesUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "canUseApiKeys":
            suggest = "can_use_api_keys"
        elif key == "canUseAuthTokens":
            suggest = "can_use_auth_tokens"
        elif key == "canUseConsole":
            suggest = "can_use_console"
        elif key == "canUseConsolePassword":
            suggest = "can_use_console_password"
        elif key == "canUseCustomerSecretKeys":
            suggest = "can_use_customer_secret_keys"
        elif key == "canUseDbCredentials":
            suggest = "can_use_db_credentials"
        elif key == "canUseOauth2clientCredentials":
            suggest = "can_use_oauth2client_credentials"
        elif key == "canUseSmtpCredentials":
            suggest = "can_use_smtp_credentials"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserUrnietfparamsscimschemasoracleidcsextensioncapabilitiesUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensioncapabilitiesUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensioncapabilitiesUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 can_use_api_keys: Optional[bool] = None,
                 can_use_auth_tokens: Optional[bool] = None,
                 can_use_console: Optional[bool] = None,
                 can_use_console_password: Optional[bool] = None,
                 can_use_customer_secret_keys: Optional[bool] = None,
                 can_use_db_credentials: Optional[bool] = None,
                 can_use_oauth2client_credentials: Optional[bool] = None,
                 can_use_smtp_credentials: Optional[bool] = None):
        if can_use_api_keys is not None:
            pulumi.set(__self__, "can_use_api_keys", can_use_api_keys)
        if can_use_auth_tokens is not None:
            pulumi.set(__self__, "can_use_auth_tokens", can_use_auth_tokens)
        if can_use_console is not None:
            pulumi.set(__self__, "can_use_console", can_use_console)
        if can_use_console_password is not None:
            pulumi.set(__self__, "can_use_console_password", can_use_console_password)
        if can_use_customer_secret_keys is not None:
            pulumi.set(__self__, "can_use_customer_secret_keys", can_use_customer_secret_keys)
        if can_use_db_credentials is not None:
            pulumi.set(__self__, "can_use_db_credentials", can_use_db_credentials)
        if can_use_oauth2client_credentials is not None:
            pulumi.set(__self__, "can_use_oauth2client_credentials", can_use_oauth2client_credentials)
        if can_use_smtp_credentials is not None:
            pulumi.set(__self__, "can_use_smtp_credentials", can_use_smtp_credentials)

    @property
    @pulumi.getter(name="canUseApiKeys")
    def can_use_api_keys(self) -> Optional[bool]:
        return pulumi.get(self, "can_use_api_keys")

    @property
    @pulumi.getter(name="canUseAuthTokens")
    def can_use_auth_tokens(self) -> Optional[bool]:
        return pulumi.get(self, "can_use_auth_tokens")

    @property
    @pulumi.getter(name="canUseConsole")
    def can_use_console(self) -> Optional[bool]:
        return pulumi.get(self, "can_use_console")

    @property
    @pulumi.getter(name="canUseConsolePassword")
    def can_use_console_password(self) -> Optional[bool]:
        return pulumi.get(self, "can_use_console_password")

    @property
    @pulumi.getter(name="canUseCustomerSecretKeys")
    def can_use_customer_secret_keys(self) -> Optional[bool]:
        return pulumi.get(self, "can_use_customer_secret_keys")

    @property
    @pulumi.getter(name="canUseDbCredentials")
    def can_use_db_credentials(self) -> Optional[bool]:
        return pulumi.get(self, "can_use_db_credentials")

    @property
    @pulumi.getter(name="canUseOauth2clientCredentials")
    def can_use_oauth2client_credentials(self) -> Optional[bool]:
        return pulumi.get(self, "can_use_oauth2client_credentials")

    @property
    @pulumi.getter(name="canUseSmtpCredentials")
    def can_use_smtp_credentials(self) -> Optional[bool]:
        return pulumi.get(self, "can_use_smtp_credentials")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensiondbCredentialsUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dbLoginAttempts":
            suggest = "db_login_attempts"
        elif key == "dbUserName":
            suggest = "db_user_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserUrnietfparamsscimschemasoracleidcsextensiondbCredentialsUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensiondbCredentialsUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensiondbCredentialsUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 db_login_attempts: Optional[int] = None,
                 db_user_name: Optional[str] = None):
        if db_login_attempts is not None:
            pulumi.set(__self__, "db_login_attempts", db_login_attempts)
        if db_user_name is not None:
            pulumi.set(__self__, "db_user_name", db_user_name)

    @property
    @pulumi.getter(name="dbLoginAttempts")
    def db_login_attempts(self) -> Optional[int]:
        return pulumi.get(self, "db_login_attempts")

    @property
    @pulumi.getter(name="dbUserName")
    def db_user_name(self) -> Optional[str]:
        return pulumi.get(self, "db_user_name")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensiondbUserUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dbGlobalRoles":
            suggest = "db_global_roles"
        elif key == "domainLevelSchema":
            suggest = "domain_level_schema"
        elif key == "instanceLevelSchema":
            suggest = "instance_level_schema"
        elif key == "isDbUser":
            suggest = "is_db_user"
        elif key == "passwordVerifiers":
            suggest = "password_verifiers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserUrnietfparamsscimschemasoracleidcsextensiondbUserUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensiondbUserUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensiondbUserUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 db_global_roles: Optional[Sequence[str]] = None,
                 domain_level_schema: Optional[str] = None,
                 instance_level_schema: Optional[str] = None,
                 is_db_user: Optional[bool] = None,
                 password_verifiers: Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensiondbUserUserPasswordVerifier']] = None):
        if db_global_roles is not None:
            pulumi.set(__self__, "db_global_roles", db_global_roles)
        if domain_level_schema is not None:
            pulumi.set(__self__, "domain_level_schema", domain_level_schema)
        if instance_level_schema is not None:
            pulumi.set(__self__, "instance_level_schema", instance_level_schema)
        if is_db_user is not None:
            pulumi.set(__self__, "is_db_user", is_db_user)
        if password_verifiers is not None:
            pulumi.set(__self__, "password_verifiers", password_verifiers)

    @property
    @pulumi.getter(name="dbGlobalRoles")
    def db_global_roles(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "db_global_roles")

    @property
    @pulumi.getter(name="domainLevelSchema")
    def domain_level_schema(self) -> Optional[str]:
        return pulumi.get(self, "domain_level_schema")

    @property
    @pulumi.getter(name="instanceLevelSchema")
    def instance_level_schema(self) -> Optional[str]:
        return pulumi.get(self, "instance_level_schema")

    @property
    @pulumi.getter(name="isDbUser")
    def is_db_user(self) -> Optional[bool]:
        return pulumi.get(self, "is_db_user")

    @property
    @pulumi.getter(name="passwordVerifiers")
    def password_verifiers(self) -> Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensiondbUserUserPasswordVerifier']]:
        return pulumi.get(self, "password_verifiers")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensiondbUserUserPasswordVerifier(dict):
    def __init__(__self__, *,
                 type: str,
                 value: str):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionkerberosUserUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "realmUsers":
            suggest = "realm_users"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserUrnietfparamsscimschemasoracleidcsextensionkerberosUserUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionkerberosUserUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionkerberosUserUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 realm_users: Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionkerberosUserUserRealmUser']] = None):
        if realm_users is not None:
            pulumi.set(__self__, "realm_users", realm_users)

    @property
    @pulumi.getter(name="realmUsers")
    def realm_users(self) -> Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionkerberosUserUserRealmUser']]:
        return pulumi.get(self, "realm_users")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionkerberosUserUserRealmUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "principalName":
            suggest = "principal_name"
        elif key == "realmName":
            suggest = "realm_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserUrnietfparamsscimschemasoracleidcsextensionkerberosUserUserRealmUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionkerberosUserUserRealmUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionkerberosUserUserRealmUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 value: str,
                 principal_name: Optional[str] = None,
                 realm_name: Optional[str] = None,
                 ref: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if principal_name is not None:
            pulumi.set(__self__, "principal_name", principal_name)
        if realm_name is not None:
            pulumi.set(__self__, "realm_name", realm_name)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="principalName")
    def principal_name(self) -> Optional[str]:
        return pulumi.get(self, "principal_name")

    @property
    @pulumi.getter(name="realmName")
    def realm_name(self) -> Optional[str]:
        return pulumi.get(self, "realm_name")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bypassCodes":
            suggest = "bypass_codes"
        elif key == "loginAttempts":
            suggest = "login_attempts"
        elif key == "mfaEnabledOn":
            suggest = "mfa_enabled_on"
        elif key == "mfaIgnoredApps":
            suggest = "mfa_ignored_apps"
        elif key == "mfaStatus":
            suggest = "mfa_status"
        elif key == "preferredAuthenticationFactor":
            suggest = "preferred_authentication_factor"
        elif key == "preferredAuthenticationMethod":
            suggest = "preferred_authentication_method"
        elif key == "preferredDevice":
            suggest = "preferred_device"
        elif key == "preferredThirdPartyVendor":
            suggest = "preferred_third_party_vendor"
        elif key == "trustedUserAgents":
            suggest = "trusted_user_agents"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bypass_codes: Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserBypassCode']] = None,
                 devices: Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserDevice']] = None,
                 login_attempts: Optional[int] = None,
                 mfa_enabled_on: Optional[str] = None,
                 mfa_ignored_apps: Optional[Sequence[str]] = None,
                 mfa_status: Optional[str] = None,
                 preferred_authentication_factor: Optional[str] = None,
                 preferred_authentication_method: Optional[str] = None,
                 preferred_device: Optional['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserPreferredDevice'] = None,
                 preferred_third_party_vendor: Optional[str] = None,
                 trusted_user_agents: Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserTrustedUserAgent']] = None):
        if bypass_codes is not None:
            pulumi.set(__self__, "bypass_codes", bypass_codes)
        if devices is not None:
            pulumi.set(__self__, "devices", devices)
        if login_attempts is not None:
            pulumi.set(__self__, "login_attempts", login_attempts)
        if mfa_enabled_on is not None:
            pulumi.set(__self__, "mfa_enabled_on", mfa_enabled_on)
        if mfa_ignored_apps is not None:
            pulumi.set(__self__, "mfa_ignored_apps", mfa_ignored_apps)
        if mfa_status is not None:
            pulumi.set(__self__, "mfa_status", mfa_status)
        if preferred_authentication_factor is not None:
            pulumi.set(__self__, "preferred_authentication_factor", preferred_authentication_factor)
        if preferred_authentication_method is not None:
            pulumi.set(__self__, "preferred_authentication_method", preferred_authentication_method)
        if preferred_device is not None:
            pulumi.set(__self__, "preferred_device", preferred_device)
        if preferred_third_party_vendor is not None:
            pulumi.set(__self__, "preferred_third_party_vendor", preferred_third_party_vendor)
        if trusted_user_agents is not None:
            pulumi.set(__self__, "trusted_user_agents", trusted_user_agents)

    @property
    @pulumi.getter(name="bypassCodes")
    def bypass_codes(self) -> Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserBypassCode']]:
        return pulumi.get(self, "bypass_codes")

    @property
    @pulumi.getter
    def devices(self) -> Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserDevice']]:
        return pulumi.get(self, "devices")

    @property
    @pulumi.getter(name="loginAttempts")
    def login_attempts(self) -> Optional[int]:
        return pulumi.get(self, "login_attempts")

    @property
    @pulumi.getter(name="mfaEnabledOn")
    def mfa_enabled_on(self) -> Optional[str]:
        return pulumi.get(self, "mfa_enabled_on")

    @property
    @pulumi.getter(name="mfaIgnoredApps")
    def mfa_ignored_apps(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "mfa_ignored_apps")

    @property
    @pulumi.getter(name="mfaStatus")
    def mfa_status(self) -> Optional[str]:
        return pulumi.get(self, "mfa_status")

    @property
    @pulumi.getter(name="preferredAuthenticationFactor")
    def preferred_authentication_factor(self) -> Optional[str]:
        return pulumi.get(self, "preferred_authentication_factor")

    @property
    @pulumi.getter(name="preferredAuthenticationMethod")
    def preferred_authentication_method(self) -> Optional[str]:
        return pulumi.get(self, "preferred_authentication_method")

    @property
    @pulumi.getter(name="preferredDevice")
    def preferred_device(self) -> Optional['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserPreferredDevice']:
        return pulumi.get(self, "preferred_device")

    @property
    @pulumi.getter(name="preferredThirdPartyVendor")
    def preferred_third_party_vendor(self) -> Optional[str]:
        return pulumi.get(self, "preferred_third_party_vendor")

    @property
    @pulumi.getter(name="trustedUserAgents")
    def trusted_user_agents(self) -> Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserTrustedUserAgent']]:
        return pulumi.get(self, "trusted_user_agents")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserBypassCode(dict):
    def __init__(__self__, *,
                 value: str,
                 ref: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserDevice(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authenticationMethod":
            suggest = "authentication_method"
        elif key == "factorStatus":
            suggest = "factor_status"
        elif key == "factorType":
            suggest = "factor_type"
        elif key == "lastSyncTime":
            suggest = "last_sync_time"
        elif key == "thirdPartyVendorName":
            suggest = "third_party_vendor_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserDevice. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserDevice.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserDevice.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 value: str,
                 authentication_method: Optional[str] = None,
                 display: Optional[str] = None,
                 factor_status: Optional[str] = None,
                 factor_type: Optional[str] = None,
                 last_sync_time: Optional[str] = None,
                 ref: Optional[str] = None,
                 status: Optional[str] = None,
                 third_party_vendor_name: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if authentication_method is not None:
            pulumi.set(__self__, "authentication_method", authentication_method)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if factor_status is not None:
            pulumi.set(__self__, "factor_status", factor_status)
        if factor_type is not None:
            pulumi.set(__self__, "factor_type", factor_type)
        if last_sync_time is not None:
            pulumi.set(__self__, "last_sync_time", last_sync_time)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if third_party_vendor_name is not None:
            pulumi.set(__self__, "third_party_vendor_name", third_party_vendor_name)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="authenticationMethod")
    def authentication_method(self) -> Optional[str]:
        return pulumi.get(self, "authentication_method")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter(name="factorStatus")
    def factor_status(self) -> Optional[str]:
        return pulumi.get(self, "factor_status")

    @property
    @pulumi.getter(name="factorType")
    def factor_type(self) -> Optional[str]:
        return pulumi.get(self, "factor_type")

    @property
    @pulumi.getter(name="lastSyncTime")
    def last_sync_time(self) -> Optional[str]:
        return pulumi.get(self, "last_sync_time")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="thirdPartyVendorName")
    def third_party_vendor_name(self) -> Optional[str]:
        return pulumi.get(self, "third_party_vendor_name")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserPreferredDevice(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ref: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserTrustedUserAgent(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ref: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applicablePasswordPolicy":
            suggest = "applicable_password_policy"
        elif key == "cantChange":
            suggest = "cant_change"
        elif key == "cantExpire":
            suggest = "cant_expire"
        elif key == "lastFailedValidationDate":
            suggest = "last_failed_validation_date"
        elif key == "lastSuccessfulSetDate":
            suggest = "last_successful_set_date"
        elif key == "lastSuccessfulValidationDate":
            suggest = "last_successful_validation_date"
        elif key == "mustChange":
            suggest = "must_change"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 applicable_password_policy: Optional['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserApplicablePasswordPolicy'] = None,
                 cant_change: Optional[bool] = None,
                 cant_expire: Optional[bool] = None,
                 expired: Optional[bool] = None,
                 last_failed_validation_date: Optional[str] = None,
                 last_successful_set_date: Optional[str] = None,
                 last_successful_validation_date: Optional[str] = None,
                 must_change: Optional[bool] = None):
        if applicable_password_policy is not None:
            pulumi.set(__self__, "applicable_password_policy", applicable_password_policy)
        if cant_change is not None:
            pulumi.set(__self__, "cant_change", cant_change)
        if cant_expire is not None:
            pulumi.set(__self__, "cant_expire", cant_expire)
        if expired is not None:
            pulumi.set(__self__, "expired", expired)
        if last_failed_validation_date is not None:
            pulumi.set(__self__, "last_failed_validation_date", last_failed_validation_date)
        if last_successful_set_date is not None:
            pulumi.set(__self__, "last_successful_set_date", last_successful_set_date)
        if last_successful_validation_date is not None:
            pulumi.set(__self__, "last_successful_validation_date", last_successful_validation_date)
        if must_change is not None:
            pulumi.set(__self__, "must_change", must_change)

    @property
    @pulumi.getter(name="applicablePasswordPolicy")
    def applicable_password_policy(self) -> Optional['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserApplicablePasswordPolicy']:
        return pulumi.get(self, "applicable_password_policy")

    @property
    @pulumi.getter(name="cantChange")
    def cant_change(self) -> Optional[bool]:
        return pulumi.get(self, "cant_change")

    @property
    @pulumi.getter(name="cantExpire")
    def cant_expire(self) -> Optional[bool]:
        return pulumi.get(self, "cant_expire")

    @property
    @pulumi.getter
    def expired(self) -> Optional[bool]:
        return pulumi.get(self, "expired")

    @property
    @pulumi.getter(name="lastFailedValidationDate")
    def last_failed_validation_date(self) -> Optional[str]:
        return pulumi.get(self, "last_failed_validation_date")

    @property
    @pulumi.getter(name="lastSuccessfulSetDate")
    def last_successful_set_date(self) -> Optional[str]:
        return pulumi.get(self, "last_successful_set_date")

    @property
    @pulumi.getter(name="lastSuccessfulValidationDate")
    def last_successful_validation_date(self) -> Optional[str]:
        return pulumi.get(self, "last_successful_validation_date")

    @property
    @pulumi.getter(name="mustChange")
    def must_change(self) -> Optional[bool]:
        return pulumi.get(self, "must_change")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserApplicablePasswordPolicy(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 priority: Optional[int] = None,
                 ref: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordlessUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "factorIdentifier":
            suggest = "factor_identifier"
        elif key == "factorMethod":
            suggest = "factor_method"
        elif key == "factorType":
            suggest = "factor_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordlessUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordlessUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordlessUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 factor_identifier: Optional['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordlessUserFactorIdentifier'] = None,
                 factor_method: Optional[str] = None,
                 factor_type: Optional[str] = None):
        if factor_identifier is not None:
            pulumi.set(__self__, "factor_identifier", factor_identifier)
        if factor_method is not None:
            pulumi.set(__self__, "factor_method", factor_method)
        if factor_type is not None:
            pulumi.set(__self__, "factor_type", factor_type)

    @property
    @pulumi.getter(name="factorIdentifier")
    def factor_identifier(self) -> Optional['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordlessUserFactorIdentifier']:
        return pulumi.get(self, "factor_identifier")

    @property
    @pulumi.getter(name="factorMethod")
    def factor_method(self) -> Optional[str]:
        return pulumi.get(self, "factor_method")

    @property
    @pulumi.getter(name="factorType")
    def factor_type(self) -> Optional[str]:
        return pulumi.get(self, "factor_type")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordlessUserFactorIdentifier(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ref: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionposixUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "gidNumber":
            suggest = "gid_number"
        elif key == "homeDirectory":
            suggest = "home_directory"
        elif key == "loginShell":
            suggest = "login_shell"
        elif key == "uidNumber":
            suggest = "uid_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserUrnietfparamsscimschemasoracleidcsextensionposixUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionposixUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionposixUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 gecos: Optional[str] = None,
                 gid_number: Optional[int] = None,
                 home_directory: Optional[str] = None,
                 login_shell: Optional[str] = None,
                 uid_number: Optional[int] = None):
        if gecos is not None:
            pulumi.set(__self__, "gecos", gecos)
        if gid_number is not None:
            pulumi.set(__self__, "gid_number", gid_number)
        if home_directory is not None:
            pulumi.set(__self__, "home_directory", home_directory)
        if login_shell is not None:
            pulumi.set(__self__, "login_shell", login_shell)
        if uid_number is not None:
            pulumi.set(__self__, "uid_number", uid_number)

    @property
    @pulumi.getter
    def gecos(self) -> Optional[str]:
        return pulumi.get(self, "gecos")

    @property
    @pulumi.getter(name="gidNumber")
    def gid_number(self) -> Optional[int]:
        return pulumi.get(self, "gid_number")

    @property
    @pulumi.getter(name="homeDirectory")
    def home_directory(self) -> Optional[str]:
        return pulumi.get(self, "home_directory")

    @property
    @pulumi.getter(name="loginShell")
    def login_shell(self) -> Optional[str]:
        return pulumi.get(self, "login_shell")

    @property
    @pulumi.getter(name="uidNumber")
    def uid_number(self) -> Optional[int]:
        return pulumi.get(self, "uid_number")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secQuestions":
            suggest = "sec_questions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserUrnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sec_questions: Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUserSecQuestion']] = None):
        if sec_questions is not None:
            pulumi.set(__self__, "sec_questions", sec_questions)

    @property
    @pulumi.getter(name="secQuestions")
    def sec_questions(self) -> Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUserSecQuestion']]:
        return pulumi.get(self, "sec_questions")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUserSecQuestion(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hintText":
            suggest = "hint_text"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserUrnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUserSecQuestion. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUserSecQuestion.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUserSecQuestion.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 answer: str,
                 value: str,
                 hint_text: Optional[str] = None,
                 ref: Optional[str] = None):
        pulumi.set(__self__, "answer", answer)
        pulumi.set(__self__, "value", value)
        if hint_text is not None:
            pulumi.set(__self__, "hint_text", hint_text)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def answer(self) -> str:
        return pulumi.get(self, "answer")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="hintText")
    def hint_text(self) -> Optional[str]:
        return pulumi.get(self, "hint_text")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionselfChangeUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowSelfChange":
            suggest = "allow_self_change"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserUrnietfparamsscimschemasoracleidcsextensionselfChangeUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionselfChangeUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionselfChangeUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_self_change: Optional[bool] = None):
        if allow_self_change is not None:
            pulumi.set(__self__, "allow_self_change", allow_self_change)

    @property
    @pulumi.getter(name="allowSelfChange")
    def allow_self_change(self) -> Optional[bool]:
        return pulumi.get(self, "allow_self_change")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionselfRegistrationUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "selfRegistrationProfile":
            suggest = "self_registration_profile"
        elif key == "consentGranted":
            suggest = "consent_granted"
        elif key == "userToken":
            suggest = "user_token"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserUrnietfparamsscimschemasoracleidcsextensionselfRegistrationUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionselfRegistrationUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionselfRegistrationUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 self_registration_profile: 'outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionselfRegistrationUserSelfRegistrationProfile',
                 consent_granted: Optional[bool] = None,
                 user_token: Optional[str] = None):
        pulumi.set(__self__, "self_registration_profile", self_registration_profile)
        if consent_granted is not None:
            pulumi.set(__self__, "consent_granted", consent_granted)
        if user_token is not None:
            pulumi.set(__self__, "user_token", user_token)

    @property
    @pulumi.getter(name="selfRegistrationProfile")
    def self_registration_profile(self) -> 'outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionselfRegistrationUserSelfRegistrationProfile':
        return pulumi.get(self, "self_registration_profile")

    @property
    @pulumi.getter(name="consentGranted")
    def consent_granted(self) -> Optional[bool]:
        return pulumi.get(self, "consent_granted")

    @property
    @pulumi.getter(name="userToken")
    def user_token(self) -> Optional[str]:
        return pulumi.get(self, "user_token")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionselfRegistrationUserSelfRegistrationProfile(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ref: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionsffUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sffAuthKeys":
            suggest = "sff_auth_keys"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserUrnietfparamsscimschemasoracleidcsextensionsffUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionsffUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionsffUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sff_auth_keys: Optional[str] = None):
        if sff_auth_keys is not None:
            pulumi.set(__self__, "sff_auth_keys", sff_auth_keys)

    @property
    @pulumi.getter(name="sffAuthKeys")
    def sff_auth_keys(self) -> Optional[str]:
        return pulumi.get(self, "sff_auth_keys")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionsocialAccountUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "socialAccounts":
            suggest = "social_accounts"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserUrnietfparamsscimschemasoracleidcsextensionsocialAccountUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionsocialAccountUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionsocialAccountUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 social_accounts: Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionsocialAccountUserSocialAccount']] = None):
        if social_accounts is not None:
            pulumi.set(__self__, "social_accounts", social_accounts)

    @property
    @pulumi.getter(name="socialAccounts")
    def social_accounts(self) -> Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionsocialAccountUserSocialAccount']]:
        return pulumi.get(self, "social_accounts")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionsocialAccountUserSocialAccount(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 ref: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensiontermsOfUseUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "termsOfUseConsents":
            suggest = "terms_of_use_consents"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserUrnietfparamsscimschemasoracleidcsextensiontermsOfUseUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensiontermsOfUseUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensiontermsOfUseUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 terms_of_use_consents: Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensiontermsOfUseUserTermsOfUseConsent']] = None):
        if terms_of_use_consents is not None:
            pulumi.set(__self__, "terms_of_use_consents", terms_of_use_consents)

    @property
    @pulumi.getter(name="termsOfUseConsents")
    def terms_of_use_consents(self) -> Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensiontermsOfUseUserTermsOfUseConsent']]:
        return pulumi.get(self, "terms_of_use_consents")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensiontermsOfUseUserTermsOfUseConsent(dict):
    def __init__(__self__, *,
                 value: str,
                 ref: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKeys":
            suggest = "api_keys"
        elif key == "authTokens":
            suggest = "auth_tokens"
        elif key == "customerSecretKeys":
            suggest = "customer_secret_keys"
        elif key == "dbCredentials":
            suggest = "db_credentials"
        elif key == "oAuth2clientCredentials":
            suggest = "o_auth2client_credentials"
        elif key == "smtpCredentials":
            suggest = "smtp_credentials"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_keys: Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserApiKey']] = None,
                 auth_tokens: Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserAuthToken']] = None,
                 customer_secret_keys: Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserCustomerSecretKey']] = None,
                 db_credentials: Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserDbCredential']] = None,
                 o_auth2client_credentials: Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserOAuth2clientCredential']] = None,
                 smtp_credentials: Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserSmtpCredential']] = None):
        if api_keys is not None:
            pulumi.set(__self__, "api_keys", api_keys)
        if auth_tokens is not None:
            pulumi.set(__self__, "auth_tokens", auth_tokens)
        if customer_secret_keys is not None:
            pulumi.set(__self__, "customer_secret_keys", customer_secret_keys)
        if db_credentials is not None:
            pulumi.set(__self__, "db_credentials", db_credentials)
        if o_auth2client_credentials is not None:
            pulumi.set(__self__, "o_auth2client_credentials", o_auth2client_credentials)
        if smtp_credentials is not None:
            pulumi.set(__self__, "smtp_credentials", smtp_credentials)

    @property
    @pulumi.getter(name="apiKeys")
    def api_keys(self) -> Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserApiKey']]:
        return pulumi.get(self, "api_keys")

    @property
    @pulumi.getter(name="authTokens")
    def auth_tokens(self) -> Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserAuthToken']]:
        return pulumi.get(self, "auth_tokens")

    @property
    @pulumi.getter(name="customerSecretKeys")
    def customer_secret_keys(self) -> Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserCustomerSecretKey']]:
        return pulumi.get(self, "customer_secret_keys")

    @property
    @pulumi.getter(name="dbCredentials")
    def db_credentials(self) -> Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserDbCredential']]:
        return pulumi.get(self, "db_credentials")

    @property
    @pulumi.getter(name="oAuth2clientCredentials")
    def o_auth2client_credentials(self) -> Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserOAuth2clientCredential']]:
        return pulumi.get(self, "o_auth2client_credentials")

    @property
    @pulumi.getter(name="smtpCredentials")
    def smtp_credentials(self) -> Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserSmtpCredential']]:
        return pulumi.get(self, "smtp_credentials")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserApiKey(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserAuthToken(dict):
    def __init__(__self__, *,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserCustomerSecretKey(dict):
    def __init__(__self__, *,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserDbCredential(dict):
    def __init__(__self__, *,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserOAuth2clientCredential(dict):
    def __init__(__self__, *,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserSmtpCredential(dict):
    def __init__(__self__, *,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastFailedLoginDate":
            suggest = "last_failed_login_date"
        elif key == "lastSuccessfulLoginDate":
            suggest = "last_successful_login_date"
        elif key == "loginAttempts":
            suggest = "login_attempts"
        elif key == "maxConcurrentSessions":
            suggest = "max_concurrent_sessions"
        elif key == "previousSuccessfulLoginDate":
            suggest = "previous_successful_login_date"
        elif key == "recoveryAttempts":
            suggest = "recovery_attempts"
        elif key == "recoveryEnrollAttempts":
            suggest = "recovery_enroll_attempts"
        elif key == "recoveryLocked":
            suggest = "recovery_locked"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 last_failed_login_date: Optional[str] = None,
                 last_successful_login_date: Optional[str] = None,
                 locked: Optional['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLocked'] = None,
                 login_attempts: Optional[int] = None,
                 max_concurrent_sessions: Optional[int] = None,
                 previous_successful_login_date: Optional[str] = None,
                 recovery_attempts: Optional[int] = None,
                 recovery_enroll_attempts: Optional[int] = None,
                 recovery_locked: Optional['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserRecoveryLocked'] = None):
        if last_failed_login_date is not None:
            pulumi.set(__self__, "last_failed_login_date", last_failed_login_date)
        if last_successful_login_date is not None:
            pulumi.set(__self__, "last_successful_login_date", last_successful_login_date)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if login_attempts is not None:
            pulumi.set(__self__, "login_attempts", login_attempts)
        if max_concurrent_sessions is not None:
            pulumi.set(__self__, "max_concurrent_sessions", max_concurrent_sessions)
        if previous_successful_login_date is not None:
            pulumi.set(__self__, "previous_successful_login_date", previous_successful_login_date)
        if recovery_attempts is not None:
            pulumi.set(__self__, "recovery_attempts", recovery_attempts)
        if recovery_enroll_attempts is not None:
            pulumi.set(__self__, "recovery_enroll_attempts", recovery_enroll_attempts)
        if recovery_locked is not None:
            pulumi.set(__self__, "recovery_locked", recovery_locked)

    @property
    @pulumi.getter(name="lastFailedLoginDate")
    def last_failed_login_date(self) -> Optional[str]:
        return pulumi.get(self, "last_failed_login_date")

    @property
    @pulumi.getter(name="lastSuccessfulLoginDate")
    def last_successful_login_date(self) -> Optional[str]:
        return pulumi.get(self, "last_successful_login_date")

    @property
    @pulumi.getter
    def locked(self) -> Optional['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLocked']:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="loginAttempts")
    def login_attempts(self) -> Optional[int]:
        return pulumi.get(self, "login_attempts")

    @property
    @pulumi.getter(name="maxConcurrentSessions")
    def max_concurrent_sessions(self) -> Optional[int]:
        return pulumi.get(self, "max_concurrent_sessions")

    @property
    @pulumi.getter(name="previousSuccessfulLoginDate")
    def previous_successful_login_date(self) -> Optional[str]:
        return pulumi.get(self, "previous_successful_login_date")

    @property
    @pulumi.getter(name="recoveryAttempts")
    def recovery_attempts(self) -> Optional[int]:
        return pulumi.get(self, "recovery_attempts")

    @property
    @pulumi.getter(name="recoveryEnrollAttempts")
    def recovery_enroll_attempts(self) -> Optional[int]:
        return pulumi.get(self, "recovery_enroll_attempts")

    @property
    @pulumi.getter(name="recoveryLocked")
    def recovery_locked(self) -> Optional['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserRecoveryLocked']:
        return pulumi.get(self, "recovery_locked")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLocked(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lockDate":
            suggest = "lock_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLocked. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLocked.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLocked.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expired: Optional[bool] = None,
                 lock_date: Optional[str] = None,
                 on: Optional[bool] = None,
                 reason: Optional[int] = None):
        if expired is not None:
            pulumi.set(__self__, "expired", expired)
        if lock_date is not None:
            pulumi.set(__self__, "lock_date", lock_date)
        if on is not None:
            pulumi.set(__self__, "on", on)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def expired(self) -> Optional[bool]:
        return pulumi.get(self, "expired")

    @property
    @pulumi.getter(name="lockDate")
    def lock_date(self) -> Optional[str]:
        return pulumi.get(self, "lock_date")

    @property
    @pulumi.getter
    def on(self) -> Optional[bool]:
        return pulumi.get(self, "on")

    @property
    @pulumi.getter
    def reason(self) -> Optional[int]:
        return pulumi.get(self, "reason")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserRecoveryLocked(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lockDate":
            suggest = "lock_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserRecoveryLocked. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserRecoveryLocked.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserRecoveryLocked.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 lock_date: Optional[str] = None,
                 on: Optional[bool] = None):
        if lock_date is not None:
            pulumi.set(__self__, "lock_date", lock_date)
        if on is not None:
            pulumi.set(__self__, "on", on)

    @property
    @pulumi.getter(name="lockDate")
    def lock_date(self) -> Optional[str]:
        return pulumi.get(self, "lock_date")

    @property
    @pulumi.getter
    def on(self) -> Optional[bool]:
        return pulumi.get(self, "on")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountRecoveryRequired":
            suggest = "account_recovery_required"
        elif key == "appRoles":
            suggest = "app_roles"
        elif key == "applicableAuthenticationTargetApps":
            suggest = "applicable_authentication_target_apps"
        elif key == "bypassNotification":
            suggest = "bypass_notification"
        elif key == "creationMechanism":
            suggest = "creation_mechanism"
        elif key == "delegatedAuthenticationTargetApp":
            suggest = "delegated_authentication_target_app"
        elif key == "doNotShowGettingStarted":
            suggest = "do_not_show_getting_started"
        elif key == "groupMembershipLastModified":
            suggest = "group_membership_last_modified"
        elif key == "idcsAppRolesLimitedToGroups":
            suggest = "idcs_app_roles_limited_to_groups"
        elif key == "isAccountRecoveryEnrolled":
            suggest = "is_account_recovery_enrolled"
        elif key == "isAuthenticationDelegated":
            suggest = "is_authentication_delegated"
        elif key == "isFederatedUser":
            suggest = "is_federated_user"
        elif key == "isGroupMembershipNormalized":
            suggest = "is_group_membership_normalized"
        elif key == "isGroupMembershipSyncedToUsersGroups":
            suggest = "is_group_membership_synced_to_users_groups"
        elif key == "notificationEmailTemplateId":
            suggest = "notification_email_template_id"
        elif key == "preferredUiLandingPage":
            suggest = "preferred_ui_landing_page"
        elif key == "supportAccounts":
            suggest = "support_accounts"
        elif key == "syncedFromApp":
            suggest = "synced_from_app"
        elif key == "userFlowControlledByExternalClient":
            suggest = "user_flow_controlled_by_external_client"
        elif key == "userProvider":
            suggest = "user_provider"
        elif key == "userTokens":
            suggest = "user_tokens"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_recovery_required: Optional[bool] = None,
                 accounts: Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAccount']] = None,
                 app_roles: Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAppRole']] = None,
                 applicable_authentication_target_apps: Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserApplicableAuthenticationTargetApp']] = None,
                 bypass_notification: Optional[bool] = None,
                 creation_mechanism: Optional[str] = None,
                 delegated_authentication_target_app: Optional['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserDelegatedAuthenticationTargetApp'] = None,
                 do_not_show_getting_started: Optional[bool] = None,
                 grants: Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserGrant']] = None,
                 group_membership_last_modified: Optional[str] = None,
                 idcs_app_roles_limited_to_groups: Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserIdcsAppRolesLimitedToGroup']] = None,
                 is_account_recovery_enrolled: Optional[bool] = None,
                 is_authentication_delegated: Optional[bool] = None,
                 is_federated_user: Optional[bool] = None,
                 is_group_membership_normalized: Optional[bool] = None,
                 is_group_membership_synced_to_users_groups: Optional[bool] = None,
                 notification_email_template_id: Optional[str] = None,
                 preferred_ui_landing_page: Optional[str] = None,
                 status: Optional[str] = None,
                 support_accounts: Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserSupportAccount']] = None,
                 synced_from_app: Optional['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserSyncedFromApp'] = None,
                 user_flow_controlled_by_external_client: Optional[bool] = None,
                 user_provider: Optional[str] = None,
                 user_tokens: Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserUserToken']] = None):
        if account_recovery_required is not None:
            pulumi.set(__self__, "account_recovery_required", account_recovery_required)
        if accounts is not None:
            pulumi.set(__self__, "accounts", accounts)
        if app_roles is not None:
            pulumi.set(__self__, "app_roles", app_roles)
        if applicable_authentication_target_apps is not None:
            pulumi.set(__self__, "applicable_authentication_target_apps", applicable_authentication_target_apps)
        if bypass_notification is not None:
            pulumi.set(__self__, "bypass_notification", bypass_notification)
        if creation_mechanism is not None:
            pulumi.set(__self__, "creation_mechanism", creation_mechanism)
        if delegated_authentication_target_app is not None:
            pulumi.set(__self__, "delegated_authentication_target_app", delegated_authentication_target_app)
        if do_not_show_getting_started is not None:
            pulumi.set(__self__, "do_not_show_getting_started", do_not_show_getting_started)
        if grants is not None:
            pulumi.set(__self__, "grants", grants)
        if group_membership_last_modified is not None:
            pulumi.set(__self__, "group_membership_last_modified", group_membership_last_modified)
        if idcs_app_roles_limited_to_groups is not None:
            pulumi.set(__self__, "idcs_app_roles_limited_to_groups", idcs_app_roles_limited_to_groups)
        if is_account_recovery_enrolled is not None:
            pulumi.set(__self__, "is_account_recovery_enrolled", is_account_recovery_enrolled)
        if is_authentication_delegated is not None:
            pulumi.set(__self__, "is_authentication_delegated", is_authentication_delegated)
        if is_federated_user is not None:
            pulumi.set(__self__, "is_federated_user", is_federated_user)
        if is_group_membership_normalized is not None:
            pulumi.set(__self__, "is_group_membership_normalized", is_group_membership_normalized)
        if is_group_membership_synced_to_users_groups is not None:
            pulumi.set(__self__, "is_group_membership_synced_to_users_groups", is_group_membership_synced_to_users_groups)
        if notification_email_template_id is not None:
            pulumi.set(__self__, "notification_email_template_id", notification_email_template_id)
        if preferred_ui_landing_page is not None:
            pulumi.set(__self__, "preferred_ui_landing_page", preferred_ui_landing_page)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if support_accounts is not None:
            pulumi.set(__self__, "support_accounts", support_accounts)
        if synced_from_app is not None:
            pulumi.set(__self__, "synced_from_app", synced_from_app)
        if user_flow_controlled_by_external_client is not None:
            pulumi.set(__self__, "user_flow_controlled_by_external_client", user_flow_controlled_by_external_client)
        if user_provider is not None:
            pulumi.set(__self__, "user_provider", user_provider)
        if user_tokens is not None:
            pulumi.set(__self__, "user_tokens", user_tokens)

    @property
    @pulumi.getter(name="accountRecoveryRequired")
    def account_recovery_required(self) -> Optional[bool]:
        return pulumi.get(self, "account_recovery_required")

    @property
    @pulumi.getter
    def accounts(self) -> Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAccount']]:
        return pulumi.get(self, "accounts")

    @property
    @pulumi.getter(name="appRoles")
    def app_roles(self) -> Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAppRole']]:
        return pulumi.get(self, "app_roles")

    @property
    @pulumi.getter(name="applicableAuthenticationTargetApps")
    def applicable_authentication_target_apps(self) -> Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserApplicableAuthenticationTargetApp']]:
        return pulumi.get(self, "applicable_authentication_target_apps")

    @property
    @pulumi.getter(name="bypassNotification")
    def bypass_notification(self) -> Optional[bool]:
        return pulumi.get(self, "bypass_notification")

    @property
    @pulumi.getter(name="creationMechanism")
    def creation_mechanism(self) -> Optional[str]:
        return pulumi.get(self, "creation_mechanism")

    @property
    @pulumi.getter(name="delegatedAuthenticationTargetApp")
    def delegated_authentication_target_app(self) -> Optional['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserDelegatedAuthenticationTargetApp']:
        return pulumi.get(self, "delegated_authentication_target_app")

    @property
    @pulumi.getter(name="doNotShowGettingStarted")
    def do_not_show_getting_started(self) -> Optional[bool]:
        return pulumi.get(self, "do_not_show_getting_started")

    @property
    @pulumi.getter
    def grants(self) -> Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserGrant']]:
        return pulumi.get(self, "grants")

    @property
    @pulumi.getter(name="groupMembershipLastModified")
    def group_membership_last_modified(self) -> Optional[str]:
        return pulumi.get(self, "group_membership_last_modified")

    @property
    @pulumi.getter(name="idcsAppRolesLimitedToGroups")
    def idcs_app_roles_limited_to_groups(self) -> Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserIdcsAppRolesLimitedToGroup']]:
        return pulumi.get(self, "idcs_app_roles_limited_to_groups")

    @property
    @pulumi.getter(name="isAccountRecoveryEnrolled")
    def is_account_recovery_enrolled(self) -> Optional[bool]:
        return pulumi.get(self, "is_account_recovery_enrolled")

    @property
    @pulumi.getter(name="isAuthenticationDelegated")
    def is_authentication_delegated(self) -> Optional[bool]:
        return pulumi.get(self, "is_authentication_delegated")

    @property
    @pulumi.getter(name="isFederatedUser")
    def is_federated_user(self) -> Optional[bool]:
        return pulumi.get(self, "is_federated_user")

    @property
    @pulumi.getter(name="isGroupMembershipNormalized")
    def is_group_membership_normalized(self) -> Optional[bool]:
        return pulumi.get(self, "is_group_membership_normalized")

    @property
    @pulumi.getter(name="isGroupMembershipSyncedToUsersGroups")
    def is_group_membership_synced_to_users_groups(self) -> Optional[bool]:
        return pulumi.get(self, "is_group_membership_synced_to_users_groups")

    @property
    @pulumi.getter(name="notificationEmailTemplateId")
    def notification_email_template_id(self) -> Optional[str]:
        return pulumi.get(self, "notification_email_template_id")

    @property
    @pulumi.getter(name="preferredUiLandingPage")
    def preferred_ui_landing_page(self) -> Optional[str]:
        return pulumi.get(self, "preferred_ui_landing_page")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="supportAccounts")
    def support_accounts(self) -> Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserSupportAccount']]:
        return pulumi.get(self, "support_accounts")

    @property
    @pulumi.getter(name="syncedFromApp")
    def synced_from_app(self) -> Optional['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserSyncedFromApp']:
        return pulumi.get(self, "synced_from_app")

    @property
    @pulumi.getter(name="userFlowControlledByExternalClient")
    def user_flow_controlled_by_external_client(self) -> Optional[bool]:
        return pulumi.get(self, "user_flow_controlled_by_external_client")

    @property
    @pulumi.getter(name="userProvider")
    def user_provider(self) -> Optional[str]:
        return pulumi.get(self, "user_provider")

    @property
    @pulumi.getter(name="userTokens")
    def user_tokens(self) -> Optional[Sequence['outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserUserToken']]:
        return pulumi.get(self, "user_tokens")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAccount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "appId":
            suggest = "app_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAccount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAccount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAccount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 active: Optional[bool] = None,
                 app_id: Optional[str] = None,
                 name: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if active is not None:
            pulumi.set(__self__, "active", active)
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def active(self) -> Optional[bool]:
        return pulumi.get(self, "active")

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[str]:
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAppRole(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adminRole":
            suggest = "admin_role"
        elif key == "appId":
            suggest = "app_id"
        elif key == "appName":
            suggest = "app_name"
        elif key == "legacyGroupName":
            suggest = "legacy_group_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAppRole. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAppRole.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAppRole.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 value: str,
                 admin_role: Optional[bool] = None,
                 app_id: Optional[str] = None,
                 app_name: Optional[str] = None,
                 display: Optional[str] = None,
                 legacy_group_name: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if admin_role is not None:
            pulumi.set(__self__, "admin_role", admin_role)
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if app_name is not None:
            pulumi.set(__self__, "app_name", app_name)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if legacy_group_name is not None:
            pulumi.set(__self__, "legacy_group_name", legacy_group_name)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="adminRole")
    def admin_role(self) -> Optional[bool]:
        return pulumi.get(self, "admin_role")

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[str]:
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="appName")
    def app_name(self) -> Optional[str]:
        return pulumi.get(self, "app_name")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter(name="legacyGroupName")
    def legacy_group_name(self) -> Optional[str]:
        return pulumi.get(self, "legacy_group_name")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserApplicableAuthenticationTargetApp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "targetRequestTimeout":
            suggest = "target_request_timeout"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserApplicableAuthenticationTargetApp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserApplicableAuthenticationTargetApp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserApplicableAuthenticationTargetApp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 display: Optional[str] = None,
                 ref: Optional[str] = None,
                 target_request_timeout: Optional[int] = None,
                 value: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if target_request_timeout is not None:
            pulumi.set(__self__, "target_request_timeout", target_request_timeout)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="targetRequestTimeout")
    def target_request_timeout(self) -> Optional[int]:
        return pulumi.get(self, "target_request_timeout")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserDelegatedAuthenticationTargetApp(dict):
    def __init__(__self__, *,
                 type: str,
                 value: str,
                 display: Optional[str] = None,
                 ref: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserGrant(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "appId":
            suggest = "app_id"
        elif key == "grantMechanism":
            suggest = "grant_mechanism"
        elif key == "grantorId":
            suggest = "grantor_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserGrant. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserGrant.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserGrant.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app_id: Optional[str] = None,
                 grant_mechanism: Optional[str] = None,
                 grantor_id: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if grant_mechanism is not None:
            pulumi.set(__self__, "grant_mechanism", grant_mechanism)
        if grantor_id is not None:
            pulumi.set(__self__, "grantor_id", grantor_id)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[str]:
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="grantMechanism")
    def grant_mechanism(self) -> Optional[str]:
        return pulumi.get(self, "grant_mechanism")

    @property
    @pulumi.getter(name="grantorId")
    def grantor_id(self) -> Optional[str]:
        return pulumi.get(self, "grantor_id")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserIdcsAppRolesLimitedToGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "idcsAppRoleId":
            suggest = "idcs_app_role_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserIdcsAppRolesLimitedToGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserIdcsAppRolesLimitedToGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserIdcsAppRolesLimitedToGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 idcs_app_role_id: str,
                 value: str,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None):
        pulumi.set(__self__, "idcs_app_role_id", idcs_app_role_id)
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter(name="idcsAppRoleId")
    def idcs_app_role_id(self) -> str:
        return pulumi.get(self, "idcs_app_role_id")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserSupportAccount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userId":
            suggest = "user_id"
        elif key == "userProvider":
            suggest = "user_provider"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserSupportAccount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserSupportAccount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserSupportAccount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 user_id: Optional[str] = None,
                 user_provider: Optional[str] = None,
                 value: Optional[str] = None):
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)
        if user_provider is not None:
            pulumi.set(__self__, "user_provider", user_provider)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[str]:
        return pulumi.get(self, "user_id")

    @property
    @pulumi.getter(name="userProvider")
    def user_provider(self) -> Optional[str]:
        return pulumi.get(self, "user_provider")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserSyncedFromApp(dict):
    def __init__(__self__, *,
                 type: str,
                 value: str,
                 display: Optional[str] = None,
                 ref: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")


@pulumi.output_type
class DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserUserToken(dict):
    def __init__(__self__, *,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainsUserX509certificate(dict):
    def __init__(__self__, *,
                 value: str,
                 display: Optional[str] = None,
                 primary: Optional[bool] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def primary(self) -> Optional[bool]:
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class NetworkSourceVirtualSourceList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipRanges":
            suggest = "ip_ranges"
        elif key == "vcnId":
            suggest = "vcn_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkSourceVirtualSourceList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkSourceVirtualSourceList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkSourceVirtualSourceList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_ranges: Sequence[str],
                 vcn_id: str):
        pulumi.set(__self__, "ip_ranges", ip_ranges)
        pulumi.set(__self__, "vcn_id", vcn_id)

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Sequence[str]:
        return pulumi.get(self, "ip_ranges")

    @property
    @pulumi.getter(name="vcnId")
    def vcn_id(self) -> str:
        return pulumi.get(self, "vcn_id")


@pulumi.output_type
class TagValidator(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "validatorType":
            suggest = "validator_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TagValidator. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TagValidator.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TagValidator.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 validator_type: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "validator_type", validator_type)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="validatorType")
    def validator_type(self) -> str:
        return pulumi.get(self, "validator_type")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class UserCapability(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "canUseApiKeys":
            suggest = "can_use_api_keys"
        elif key == "canUseAuthTokens":
            suggest = "can_use_auth_tokens"
        elif key == "canUseConsolePassword":
            suggest = "can_use_console_password"
        elif key == "canUseCustomerSecretKeys":
            suggest = "can_use_customer_secret_keys"
        elif key == "canUseDbCredentials":
            suggest = "can_use_db_credentials"
        elif key == "canUseOauth2clientCredentials":
            suggest = "can_use_oauth2client_credentials"
        elif key == "canUseSmtpCredentials":
            suggest = "can_use_smtp_credentials"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserCapability. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserCapability.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserCapability.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 can_use_api_keys: Optional[bool] = None,
                 can_use_auth_tokens: Optional[bool] = None,
                 can_use_console_password: Optional[bool] = None,
                 can_use_customer_secret_keys: Optional[bool] = None,
                 can_use_db_credentials: Optional[bool] = None,
                 can_use_oauth2client_credentials: Optional[bool] = None,
                 can_use_smtp_credentials: Optional[bool] = None):
        if can_use_api_keys is not None:
            pulumi.set(__self__, "can_use_api_keys", can_use_api_keys)
        if can_use_auth_tokens is not None:
            pulumi.set(__self__, "can_use_auth_tokens", can_use_auth_tokens)
        if can_use_console_password is not None:
            pulumi.set(__self__, "can_use_console_password", can_use_console_password)
        if can_use_customer_secret_keys is not None:
            pulumi.set(__self__, "can_use_customer_secret_keys", can_use_customer_secret_keys)
        if can_use_db_credentials is not None:
            pulumi.set(__self__, "can_use_db_credentials", can_use_db_credentials)
        if can_use_oauth2client_credentials is not None:
            pulumi.set(__self__, "can_use_oauth2client_credentials", can_use_oauth2client_credentials)
        if can_use_smtp_credentials is not None:
            pulumi.set(__self__, "can_use_smtp_credentials", can_use_smtp_credentials)

    @property
    @pulumi.getter(name="canUseApiKeys")
    def can_use_api_keys(self) -> Optional[bool]:
        return pulumi.get(self, "can_use_api_keys")

    @property
    @pulumi.getter(name="canUseAuthTokens")
    def can_use_auth_tokens(self) -> Optional[bool]:
        return pulumi.get(self, "can_use_auth_tokens")

    @property
    @pulumi.getter(name="canUseConsolePassword")
    def can_use_console_password(self) -> Optional[bool]:
        return pulumi.get(self, "can_use_console_password")

    @property
    @pulumi.getter(name="canUseCustomerSecretKeys")
    def can_use_customer_secret_keys(self) -> Optional[bool]:
        return pulumi.get(self, "can_use_customer_secret_keys")

    @property
    @pulumi.getter(name="canUseDbCredentials")
    def can_use_db_credentials(self) -> Optional[bool]:
        return pulumi.get(self, "can_use_db_credentials")

    @property
    @pulumi.getter(name="canUseOauth2clientCredentials")
    def can_use_oauth2client_credentials(self) -> Optional[bool]:
        return pulumi.get(self, "can_use_oauth2client_credentials")

    @property
    @pulumi.getter(name="canUseSmtpCredentials")
    def can_use_smtp_credentials(self) -> Optional[bool]:
        return pulumi.get(self, "can_use_smtp_credentials")


@pulumi.output_type
class GetAllowedDomainLicenseTypesAllowedDomainLicenseTypeResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 license_type: Optional[str] = None,
                 name: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if license_type is not None:
            pulumi.set(__self__, "license_type", license_type)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> Optional[str]:
        return pulumi.get(self, "license_type")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetAllowedDomainLicenseTypesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetApiKeysApiKeyResult(dict):
    def __init__(__self__, *,
                 fingerprint: Optional[str] = None,
                 id: Optional[str] = None,
                 inactive_status: Optional[str] = None,
                 key_value: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 user_id: Optional[str] = None):
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if inactive_status is not None:
            pulumi.set(__self__, "inactive_status", inactive_status)
        if key_value is not None:
            pulumi.set(__self__, "key_value", key_value)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[str]:
        return pulumi.get(self, "fingerprint")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inactiveStatus")
    def inactive_status(self) -> Optional[str]:
        return pulumi.get(self, "inactive_status")

    @property
    @pulumi.getter(name="keyValue")
    def key_value(self) -> Optional[str]:
        return pulumi.get(self, "key_value")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[str]:
        return pulumi.get(self, "user_id")


@pulumi.output_type
class GetApiKeysFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetAuthTokensFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetAuthTokensTokenResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 id: Optional[str] = None,
                 inactive_state: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_expires: Optional[str] = None,
                 token: Optional[str] = None,
                 user_id: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if inactive_state is not None:
            pulumi.set(__self__, "inactive_state", inactive_state)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_expires is not None:
            pulumi.set(__self__, "time_expires", time_expires)
        if token is not None:
            pulumi.set(__self__, "token", token)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inactiveState")
    def inactive_state(self) -> Optional[str]:
        return pulumi.get(self, "inactive_state")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeExpires")
    def time_expires(self) -> Optional[str]:
        return pulumi.get(self, "time_expires")

    @property
    @pulumi.getter
    def token(self) -> Optional[str]:
        return pulumi.get(self, "token")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[str]:
        return pulumi.get(self, "user_id")


@pulumi.output_type
class GetAuthenticationPolicyNetworkPolicyResult(dict):
    def __init__(__self__, *,
                 network_source_ids: Optional[Sequence[str]] = None):
        if network_source_ids is not None:
            pulumi.set(__self__, "network_source_ids", network_source_ids)

    @property
    @pulumi.getter(name="networkSourceIds")
    def network_source_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "network_source_ids")


@pulumi.output_type
class GetAuthenticationPolicyPasswordPolicyResult(dict):
    def __init__(__self__, *,
                 is_lowercase_characters_required: Optional[bool] = None,
                 is_numeric_characters_required: Optional[bool] = None,
                 is_special_characters_required: Optional[bool] = None,
                 is_uppercase_characters_required: Optional[bool] = None,
                 is_username_containment_allowed: Optional[bool] = None,
                 minimum_password_length: Optional[int] = None):
        if is_lowercase_characters_required is not None:
            pulumi.set(__self__, "is_lowercase_characters_required", is_lowercase_characters_required)
        if is_numeric_characters_required is not None:
            pulumi.set(__self__, "is_numeric_characters_required", is_numeric_characters_required)
        if is_special_characters_required is not None:
            pulumi.set(__self__, "is_special_characters_required", is_special_characters_required)
        if is_uppercase_characters_required is not None:
            pulumi.set(__self__, "is_uppercase_characters_required", is_uppercase_characters_required)
        if is_username_containment_allowed is not None:
            pulumi.set(__self__, "is_username_containment_allowed", is_username_containment_allowed)
        if minimum_password_length is not None:
            pulumi.set(__self__, "minimum_password_length", minimum_password_length)

    @property
    @pulumi.getter(name="isLowercaseCharactersRequired")
    def is_lowercase_characters_required(self) -> Optional[bool]:
        return pulumi.get(self, "is_lowercase_characters_required")

    @property
    @pulumi.getter(name="isNumericCharactersRequired")
    def is_numeric_characters_required(self) -> Optional[bool]:
        return pulumi.get(self, "is_numeric_characters_required")

    @property
    @pulumi.getter(name="isSpecialCharactersRequired")
    def is_special_characters_required(self) -> Optional[bool]:
        return pulumi.get(self, "is_special_characters_required")

    @property
    @pulumi.getter(name="isUppercaseCharactersRequired")
    def is_uppercase_characters_required(self) -> Optional[bool]:
        return pulumi.get(self, "is_uppercase_characters_required")

    @property
    @pulumi.getter(name="isUsernameContainmentAllowed")
    def is_username_containment_allowed(self) -> Optional[bool]:
        return pulumi.get(self, "is_username_containment_allowed")

    @property
    @pulumi.getter(name="minimumPasswordLength")
    def minimum_password_length(self) -> Optional[int]:
        return pulumi.get(self, "minimum_password_length")


@pulumi.output_type
class GetAvailabilityDomainsAvailabilityDomainResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetAvailabilityDomainsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetCompartmentsCompartmentResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 enable_delete: Optional[bool] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 inactive_state: Optional[str] = None,
                 is_accessible: Optional[bool] = None,
                 name: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enable_delete is not None:
            pulumi.set(__self__, "enable_delete", enable_delete)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if inactive_state is not None:
            pulumi.set(__self__, "inactive_state", inactive_state)
        if is_accessible is not None:
            pulumi.set(__self__, "is_accessible", is_accessible)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="enableDelete")
    def enable_delete(self) -> Optional[bool]:
        return pulumi.get(self, "enable_delete")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inactiveState")
    def inactive_state(self) -> Optional[str]:
        return pulumi.get(self, "inactive_state")

    @property
    @pulumi.getter(name="isAccessible")
    def is_accessible(self) -> Optional[bool]:
        return pulumi.get(self, "is_accessible")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetCompartmentsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetCostTrackingTagsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetCostTrackingTagsTagResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 is_cost_tracking: Optional[bool] = None,
                 is_retired: Optional[bool] = None,
                 name: Optional[str] = None,
                 state: Optional[str] = None,
                 tag_namespace_id: Optional[str] = None,
                 tag_namespace_name: Optional[str] = None,
                 time_created: Optional[str] = None,
                 validators: Optional[Sequence['outputs.GetCostTrackingTagsTagValidatorResult']] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_cost_tracking is not None:
            pulumi.set(__self__, "is_cost_tracking", is_cost_tracking)
        if is_retired is not None:
            pulumi.set(__self__, "is_retired", is_retired)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if tag_namespace_id is not None:
            pulumi.set(__self__, "tag_namespace_id", tag_namespace_id)
        if tag_namespace_name is not None:
            pulumi.set(__self__, "tag_namespace_name", tag_namespace_name)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if validators is not None:
            pulumi.set(__self__, "validators", validators)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isCostTracking")
    def is_cost_tracking(self) -> Optional[bool]:
        return pulumi.get(self, "is_cost_tracking")

    @property
    @pulumi.getter(name="isRetired")
    def is_retired(self) -> Optional[bool]:
        return pulumi.get(self, "is_retired")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="tagNamespaceId")
    def tag_namespace_id(self) -> Optional[str]:
        return pulumi.get(self, "tag_namespace_id")

    @property
    @pulumi.getter(name="tagNamespaceName")
    def tag_namespace_name(self) -> Optional[str]:
        return pulumi.get(self, "tag_namespace_name")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter
    def validators(self) -> Optional[Sequence['outputs.GetCostTrackingTagsTagValidatorResult']]:
        return pulumi.get(self, "validators")


@pulumi.output_type
class GetCostTrackingTagsTagValidatorResult(dict):
    def __init__(__self__, *,
                 validator_type: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if validator_type is not None:
            pulumi.set(__self__, "validator_type", validator_type)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="validatorType")
    def validator_type(self) -> Optional[str]:
        return pulumi.get(self, "validator_type")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetCustomerSecretKeysCustomerSecretKeyResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None,
                 inactive_state: Optional[str] = None,
                 key: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_expires: Optional[str] = None,
                 user_id: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if inactive_state is not None:
            pulumi.set(__self__, "inactive_state", inactive_state)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_expires is not None:
            pulumi.set(__self__, "time_expires", time_expires)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inactiveState")
    def inactive_state(self) -> Optional[str]:
        return pulumi.get(self, "inactive_state")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeExpires")
    def time_expires(self) -> Optional[str]:
        return pulumi.get(self, "time_expires")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[str]:
        return pulumi.get(self, "user_id")


@pulumi.output_type
class GetCustomerSecretKeysFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDbCredentialsDbCredentialResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 password: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_expires: Optional[str] = None,
                 user_id: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_expires is not None:
            pulumi.set(__self__, "time_expires", time_expires)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeExpires")
    def time_expires(self) -> Optional[str]:
        return pulumi.get(self, "time_expires")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[str]:
        return pulumi.get(self, "user_id")


@pulumi.output_type
class GetDbCredentialsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDomainReplicaRegionResult(dict):
    def __init__(__self__, *,
                 region: Optional[str] = None,
                 state: Optional[str] = None,
                 url: Optional[str] = None):
        if region is not None:
            pulumi.set(__self__, "region", region)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")


@pulumi.output_type
class GetDomainsAccountMgmtInfoAppResult(dict):
    def __init__(__self__, *,
                 active: Optional[bool] = None,
                 app_icon: Optional[str] = None,
                 app_thumbnail: Optional[str] = None,
                 audience: Optional[str] = None,
                 description: Optional[str] = None,
                 display: Optional[str] = None,
                 is_alias_app: Optional[bool] = None,
                 is_authoritative: Optional[bool] = None,
                 is_login_target: Optional[bool] = None,
                 is_managed_app: Optional[bool] = None,
                 is_oauth_resource: Optional[bool] = None,
                 is_opc_service: Optional[bool] = None,
                 is_unmanaged_app: Optional[bool] = None,
                 login_mechanism: Optional[str] = None,
                 meter_as_opc_service: Optional[bool] = None,
                 ref: Optional[str] = None,
                 service_type_urn: Optional[str] = None,
                 show_in_my_apps: Optional[bool] = None,
                 value: Optional[str] = None):
        if active is not None:
            pulumi.set(__self__, "active", active)
        if app_icon is not None:
            pulumi.set(__self__, "app_icon", app_icon)
        if app_thumbnail is not None:
            pulumi.set(__self__, "app_thumbnail", app_thumbnail)
        if audience is not None:
            pulumi.set(__self__, "audience", audience)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if is_alias_app is not None:
            pulumi.set(__self__, "is_alias_app", is_alias_app)
        if is_authoritative is not None:
            pulumi.set(__self__, "is_authoritative", is_authoritative)
        if is_login_target is not None:
            pulumi.set(__self__, "is_login_target", is_login_target)
        if is_managed_app is not None:
            pulumi.set(__self__, "is_managed_app", is_managed_app)
        if is_oauth_resource is not None:
            pulumi.set(__self__, "is_oauth_resource", is_oauth_resource)
        if is_opc_service is not None:
            pulumi.set(__self__, "is_opc_service", is_opc_service)
        if is_unmanaged_app is not None:
            pulumi.set(__self__, "is_unmanaged_app", is_unmanaged_app)
        if login_mechanism is not None:
            pulumi.set(__self__, "login_mechanism", login_mechanism)
        if meter_as_opc_service is not None:
            pulumi.set(__self__, "meter_as_opc_service", meter_as_opc_service)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if service_type_urn is not None:
            pulumi.set(__self__, "service_type_urn", service_type_urn)
        if show_in_my_apps is not None:
            pulumi.set(__self__, "show_in_my_apps", show_in_my_apps)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def active(self) -> Optional[bool]:
        return pulumi.get(self, "active")

    @property
    @pulumi.getter(name="appIcon")
    def app_icon(self) -> Optional[str]:
        return pulumi.get(self, "app_icon")

    @property
    @pulumi.getter(name="appThumbnail")
    def app_thumbnail(self) -> Optional[str]:
        return pulumi.get(self, "app_thumbnail")

    @property
    @pulumi.getter
    def audience(self) -> Optional[str]:
        return pulumi.get(self, "audience")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter(name="isAliasApp")
    def is_alias_app(self) -> Optional[bool]:
        return pulumi.get(self, "is_alias_app")

    @property
    @pulumi.getter(name="isAuthoritative")
    def is_authoritative(self) -> Optional[bool]:
        return pulumi.get(self, "is_authoritative")

    @property
    @pulumi.getter(name="isLoginTarget")
    def is_login_target(self) -> Optional[bool]:
        return pulumi.get(self, "is_login_target")

    @property
    @pulumi.getter(name="isManagedApp")
    def is_managed_app(self) -> Optional[bool]:
        return pulumi.get(self, "is_managed_app")

    @property
    @pulumi.getter(name="isOauthResource")
    def is_oauth_resource(self) -> Optional[bool]:
        return pulumi.get(self, "is_oauth_resource")

    @property
    @pulumi.getter(name="isOpcService")
    def is_opc_service(self) -> Optional[bool]:
        return pulumi.get(self, "is_opc_service")

    @property
    @pulumi.getter(name="isUnmanagedApp")
    def is_unmanaged_app(self) -> Optional[bool]:
        return pulumi.get(self, "is_unmanaged_app")

    @property
    @pulumi.getter(name="loginMechanism")
    def login_mechanism(self) -> Optional[str]:
        return pulumi.get(self, "login_mechanism")

    @property
    @pulumi.getter(name="meterAsOpcService")
    def meter_as_opc_service(self) -> Optional[bool]:
        return pulumi.get(self, "meter_as_opc_service")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="serviceTypeUrn")
    def service_type_urn(self) -> Optional[str]:
        return pulumi.get(self, "service_type_urn")

    @property
    @pulumi.getter(name="showInMyApps")
    def show_in_my_apps(self) -> Optional[bool]:
        return pulumi.get(self, "show_in_my_apps")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAccountMgmtInfoIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAccountMgmtInfoIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAccountMgmtInfoMatchingOwnerResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 email: Optional[str] = None,
                 ref: Optional[str] = None,
                 user_name: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAccountMgmtInfoMetaResult(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsAccountMgmtInfoObjectClassResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAccountMgmtInfoOwnerResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 email: Optional[str] = None,
                 ref: Optional[str] = None,
                 user_name: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAccountMgmtInfoResourceTypeResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAccountMgmtInfoTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAccountMgmtInfoUserWalletArtifactResult(dict):
    def __init__(__self__, *,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAccountMgmtInfosAccountMgmtInfoResult(dict):
    def __init__(__self__, *,
                 account_mgmt_info_id: Optional[str] = None,
                 account_type: Optional[str] = None,
                 active: Optional[bool] = None,
                 apps: Optional[Sequence['outputs.GetDomainsAccountMgmtInfosAccountMgmtInfoAppResult']] = None,
                 attribute_sets: Optional[Sequence[str]] = None,
                 attributes: Optional[str] = None,
                 authorization: Optional[str] = None,
                 compartment_ocid: Optional[str] = None,
                 composite_key: Optional[str] = None,
                 delete_in_progress: Optional[bool] = None,
                 do_not_back_fill_grants: Optional[bool] = None,
                 do_not_perform_action_on_target: Optional[bool] = None,
                 domain_ocid: Optional[str] = None,
                 favorite: Optional[bool] = None,
                 id: Optional[str] = None,
                 idcs_created_bies: Optional[Sequence['outputs.GetDomainsAccountMgmtInfosAccountMgmtInfoIdcsCreatedByResult']] = None,
                 idcs_endpoint: Optional[str] = None,
                 idcs_last_modified_bies: Optional[Sequence['outputs.GetDomainsAccountMgmtInfosAccountMgmtInfoIdcsLastModifiedByResult']] = None,
                 idcs_last_upgraded_in_release: Optional[str] = None,
                 idcs_prevented_operations: Optional[Sequence[str]] = None,
                 is_account: Optional[bool] = None,
                 last_accessed: Optional[str] = None,
                 matching_owners: Optional[Sequence['outputs.GetDomainsAccountMgmtInfosAccountMgmtInfoMatchingOwnerResult']] = None,
                 metas: Optional[Sequence['outputs.GetDomainsAccountMgmtInfosAccountMgmtInfoMetaResult']] = None,
                 name: Optional[str] = None,
                 object_classes: Optional[Sequence['outputs.GetDomainsAccountMgmtInfosAccountMgmtInfoObjectClassResult']] = None,
                 ocid: Optional[str] = None,
                 operation_context: Optional[str] = None,
                 owners: Optional[Sequence['outputs.GetDomainsAccountMgmtInfosAccountMgmtInfoOwnerResult']] = None,
                 preview_only: Optional[bool] = None,
                 resource_type_schema_version: Optional[str] = None,
                 resource_types: Optional[Sequence['outputs.GetDomainsAccountMgmtInfosAccountMgmtInfoResourceTypeResult']] = None,
                 schemas: Optional[Sequence[str]] = None,
                 sync_response: Optional[str] = None,
                 sync_situation: Optional[str] = None,
                 sync_timestamp: Optional[str] = None,
                 tags: Optional[Sequence['outputs.GetDomainsAccountMgmtInfosAccountMgmtInfoTagResult']] = None,
                 tenancy_ocid: Optional[str] = None,
                 uid: Optional[str] = None,
                 user_wallet_artifacts: Optional[Sequence['outputs.GetDomainsAccountMgmtInfosAccountMgmtInfoUserWalletArtifactResult']] = None):
        if account_mgmt_info_id is not None:
            pulumi.set(__self__, "account_mgmt_info_id", account_mgmt_info_id)
        if account_type is not None:
            pulumi.set(__self__, "account_type", account_type)
        if active is not None:
            pulumi.set(__self__, "active", active)
        if apps is not None:
            pulumi.set(__self__, "apps", apps)
        if attribute_sets is not None:
            pulumi.set(__self__, "attribute_sets", attribute_sets)
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)
        if authorization is not None:
            pulumi.set(__self__, "authorization", authorization)
        if compartment_ocid is not None:
            pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        if composite_key is not None:
            pulumi.set(__self__, "composite_key", composite_key)
        if delete_in_progress is not None:
            pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        if do_not_back_fill_grants is not None:
            pulumi.set(__self__, "do_not_back_fill_grants", do_not_back_fill_grants)
        if do_not_perform_action_on_target is not None:
            pulumi.set(__self__, "do_not_perform_action_on_target", do_not_perform_action_on_target)
        if domain_ocid is not None:
            pulumi.set(__self__, "domain_ocid", domain_ocid)
        if favorite is not None:
            pulumi.set(__self__, "favorite", favorite)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if idcs_created_bies is not None:
            pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        if idcs_endpoint is not None:
            pulumi.set(__self__, "idcs_endpoint", idcs_endpoint)
        if idcs_last_modified_bies is not None:
            pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        if idcs_last_upgraded_in_release is not None:
            pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        if idcs_prevented_operations is not None:
            pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        if is_account is not None:
            pulumi.set(__self__, "is_account", is_account)
        if last_accessed is not None:
            pulumi.set(__self__, "last_accessed", last_accessed)
        if matching_owners is not None:
            pulumi.set(__self__, "matching_owners", matching_owners)
        if metas is not None:
            pulumi.set(__self__, "metas", metas)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if object_classes is not None:
            pulumi.set(__self__, "object_classes", object_classes)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if operation_context is not None:
            pulumi.set(__self__, "operation_context", operation_context)
        if owners is not None:
            pulumi.set(__self__, "owners", owners)
        if preview_only is not None:
            pulumi.set(__self__, "preview_only", preview_only)
        if resource_type_schema_version is not None:
            pulumi.set(__self__, "resource_type_schema_version", resource_type_schema_version)
        if resource_types is not None:
            pulumi.set(__self__, "resource_types", resource_types)
        if schemas is not None:
            pulumi.set(__self__, "schemas", schemas)
        if sync_response is not None:
            pulumi.set(__self__, "sync_response", sync_response)
        if sync_situation is not None:
            pulumi.set(__self__, "sync_situation", sync_situation)
        if sync_timestamp is not None:
            pulumi.set(__self__, "sync_timestamp", sync_timestamp)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tenancy_ocid is not None:
            pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)
        if user_wallet_artifacts is not None:
            pulumi.set(__self__, "user_wallet_artifacts", user_wallet_artifacts)

    @property
    @pulumi.getter(name="accountMgmtInfoId")
    def account_mgmt_info_id(self) -> Optional[str]:
        return pulumi.get(self, "account_mgmt_info_id")

    @property
    @pulumi.getter(name="accountType")
    def account_type(self) -> Optional[str]:
        return pulumi.get(self, "account_type")

    @property
    @pulumi.getter
    def active(self) -> Optional[bool]:
        return pulumi.get(self, "active")

    @property
    @pulumi.getter
    def apps(self) -> Optional[Sequence['outputs.GetDomainsAccountMgmtInfosAccountMgmtInfoAppResult']]:
        return pulumi.get(self, "apps")

    @property
    @pulumi.getter(name="attributeSets")
    def attribute_sets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "attribute_sets")

    @property
    @pulumi.getter
    def attributes(self) -> Optional[str]:
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter
    def authorization(self) -> Optional[str]:
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> Optional[str]:
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="compositeKey")
    def composite_key(self) -> Optional[str]:
        return pulumi.get(self, "composite_key")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> Optional[bool]:
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter(name="doNotBackFillGrants")
    def do_not_back_fill_grants(self) -> Optional[bool]:
        return pulumi.get(self, "do_not_back_fill_grants")

    @property
    @pulumi.getter(name="doNotPerformActionOnTarget")
    def do_not_perform_action_on_target(self) -> Optional[bool]:
        return pulumi.get(self, "do_not_perform_action_on_target")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> Optional[str]:
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter
    def favorite(self) -> Optional[bool]:
        return pulumi.get(self, "favorite")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Optional[Sequence['outputs.GetDomainsAccountMgmtInfosAccountMgmtInfoIdcsCreatedByResult']]:
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "idcs_endpoint")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Optional[Sequence['outputs.GetDomainsAccountMgmtInfosAccountMgmtInfoIdcsLastModifiedByResult']]:
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> Optional[str]:
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter(name="isAccount")
    def is_account(self) -> Optional[bool]:
        return pulumi.get(self, "is_account")

    @property
    @pulumi.getter(name="lastAccessed")
    def last_accessed(self) -> Optional[str]:
        return pulumi.get(self, "last_accessed")

    @property
    @pulumi.getter(name="matchingOwners")
    def matching_owners(self) -> Optional[Sequence['outputs.GetDomainsAccountMgmtInfosAccountMgmtInfoMatchingOwnerResult']]:
        return pulumi.get(self, "matching_owners")

    @property
    @pulumi.getter
    def metas(self) -> Optional[Sequence['outputs.GetDomainsAccountMgmtInfosAccountMgmtInfoMetaResult']]:
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="objectClasses")
    def object_classes(self) -> Optional[Sequence['outputs.GetDomainsAccountMgmtInfosAccountMgmtInfoObjectClassResult']]:
        return pulumi.get(self, "object_classes")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="operationContext")
    def operation_context(self) -> Optional[str]:
        return pulumi.get(self, "operation_context")

    @property
    @pulumi.getter
    def owners(self) -> Optional[Sequence['outputs.GetDomainsAccountMgmtInfosAccountMgmtInfoOwnerResult']]:
        return pulumi.get(self, "owners")

    @property
    @pulumi.getter(name="previewOnly")
    def preview_only(self) -> Optional[bool]:
        return pulumi.get(self, "preview_only")

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> Optional[str]:
        return pulumi.get(self, "resource_type_schema_version")

    @property
    @pulumi.getter(name="resourceTypes")
    def resource_types(self) -> Optional[Sequence['outputs.GetDomainsAccountMgmtInfosAccountMgmtInfoResourceTypeResult']]:
        return pulumi.get(self, "resource_types")

    @property
    @pulumi.getter
    def schemas(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter(name="syncResponse")
    def sync_response(self) -> Optional[str]:
        return pulumi.get(self, "sync_response")

    @property
    @pulumi.getter(name="syncSituation")
    def sync_situation(self) -> Optional[str]:
        return pulumi.get(self, "sync_situation")

    @property
    @pulumi.getter(name="syncTimestamp")
    def sync_timestamp(self) -> Optional[str]:
        return pulumi.get(self, "sync_timestamp")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.GetDomainsAccountMgmtInfosAccountMgmtInfoTagResult']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> Optional[str]:
        return pulumi.get(self, "tenancy_ocid")

    @property
    @pulumi.getter
    def uid(self) -> Optional[str]:
        return pulumi.get(self, "uid")

    @property
    @pulumi.getter(name="userWalletArtifacts")
    def user_wallet_artifacts(self) -> Optional[Sequence['outputs.GetDomainsAccountMgmtInfosAccountMgmtInfoUserWalletArtifactResult']]:
        return pulumi.get(self, "user_wallet_artifacts")


@pulumi.output_type
class GetDomainsAccountMgmtInfosAccountMgmtInfoAppResult(dict):
    def __init__(__self__, *,
                 active: Optional[bool] = None,
                 app_icon: Optional[str] = None,
                 app_thumbnail: Optional[str] = None,
                 audience: Optional[str] = None,
                 description: Optional[str] = None,
                 display: Optional[str] = None,
                 is_alias_app: Optional[bool] = None,
                 is_authoritative: Optional[bool] = None,
                 is_login_target: Optional[bool] = None,
                 is_managed_app: Optional[bool] = None,
                 is_oauth_resource: Optional[bool] = None,
                 is_opc_service: Optional[bool] = None,
                 is_unmanaged_app: Optional[bool] = None,
                 login_mechanism: Optional[str] = None,
                 meter_as_opc_service: Optional[bool] = None,
                 ref: Optional[str] = None,
                 service_type_urn: Optional[str] = None,
                 show_in_my_apps: Optional[bool] = None,
                 value: Optional[str] = None):
        if active is not None:
            pulumi.set(__self__, "active", active)
        if app_icon is not None:
            pulumi.set(__self__, "app_icon", app_icon)
        if app_thumbnail is not None:
            pulumi.set(__self__, "app_thumbnail", app_thumbnail)
        if audience is not None:
            pulumi.set(__self__, "audience", audience)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if is_alias_app is not None:
            pulumi.set(__self__, "is_alias_app", is_alias_app)
        if is_authoritative is not None:
            pulumi.set(__self__, "is_authoritative", is_authoritative)
        if is_login_target is not None:
            pulumi.set(__self__, "is_login_target", is_login_target)
        if is_managed_app is not None:
            pulumi.set(__self__, "is_managed_app", is_managed_app)
        if is_oauth_resource is not None:
            pulumi.set(__self__, "is_oauth_resource", is_oauth_resource)
        if is_opc_service is not None:
            pulumi.set(__self__, "is_opc_service", is_opc_service)
        if is_unmanaged_app is not None:
            pulumi.set(__self__, "is_unmanaged_app", is_unmanaged_app)
        if login_mechanism is not None:
            pulumi.set(__self__, "login_mechanism", login_mechanism)
        if meter_as_opc_service is not None:
            pulumi.set(__self__, "meter_as_opc_service", meter_as_opc_service)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if service_type_urn is not None:
            pulumi.set(__self__, "service_type_urn", service_type_urn)
        if show_in_my_apps is not None:
            pulumi.set(__self__, "show_in_my_apps", show_in_my_apps)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def active(self) -> Optional[bool]:
        return pulumi.get(self, "active")

    @property
    @pulumi.getter(name="appIcon")
    def app_icon(self) -> Optional[str]:
        return pulumi.get(self, "app_icon")

    @property
    @pulumi.getter(name="appThumbnail")
    def app_thumbnail(self) -> Optional[str]:
        return pulumi.get(self, "app_thumbnail")

    @property
    @pulumi.getter
    def audience(self) -> Optional[str]:
        return pulumi.get(self, "audience")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter(name="isAliasApp")
    def is_alias_app(self) -> Optional[bool]:
        return pulumi.get(self, "is_alias_app")

    @property
    @pulumi.getter(name="isAuthoritative")
    def is_authoritative(self) -> Optional[bool]:
        return pulumi.get(self, "is_authoritative")

    @property
    @pulumi.getter(name="isLoginTarget")
    def is_login_target(self) -> Optional[bool]:
        return pulumi.get(self, "is_login_target")

    @property
    @pulumi.getter(name="isManagedApp")
    def is_managed_app(self) -> Optional[bool]:
        return pulumi.get(self, "is_managed_app")

    @property
    @pulumi.getter(name="isOauthResource")
    def is_oauth_resource(self) -> Optional[bool]:
        return pulumi.get(self, "is_oauth_resource")

    @property
    @pulumi.getter(name="isOpcService")
    def is_opc_service(self) -> Optional[bool]:
        return pulumi.get(self, "is_opc_service")

    @property
    @pulumi.getter(name="isUnmanagedApp")
    def is_unmanaged_app(self) -> Optional[bool]:
        return pulumi.get(self, "is_unmanaged_app")

    @property
    @pulumi.getter(name="loginMechanism")
    def login_mechanism(self) -> Optional[str]:
        return pulumi.get(self, "login_mechanism")

    @property
    @pulumi.getter(name="meterAsOpcService")
    def meter_as_opc_service(self) -> Optional[bool]:
        return pulumi.get(self, "meter_as_opc_service")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="serviceTypeUrn")
    def service_type_urn(self) -> Optional[str]:
        return pulumi.get(self, "service_type_urn")

    @property
    @pulumi.getter(name="showInMyApps")
    def show_in_my_apps(self) -> Optional[bool]:
        return pulumi.get(self, "show_in_my_apps")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAccountMgmtInfosAccountMgmtInfoIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAccountMgmtInfosAccountMgmtInfoIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAccountMgmtInfosAccountMgmtInfoMatchingOwnerResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 email: Optional[str] = None,
                 ref: Optional[str] = None,
                 user_name: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAccountMgmtInfosAccountMgmtInfoMetaResult(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsAccountMgmtInfosAccountMgmtInfoObjectClassResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAccountMgmtInfosAccountMgmtInfoOwnerResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 email: Optional[str] = None,
                 ref: Optional[str] = None,
                 user_name: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAccountMgmtInfosAccountMgmtInfoResourceTypeResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAccountMgmtInfosAccountMgmtInfoTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAccountMgmtInfosAccountMgmtInfoUserWalletArtifactResult(dict):
    def __init__(__self__, *,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAccountRecoverySettingIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAccountRecoverySettingIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAccountRecoverySettingMetaResult(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsAccountRecoverySettingTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAccountRecoverySettingsAccountRecoverySettingResult(dict):
    def __init__(__self__, *,
                 account_recovery_setting_id: Optional[str] = None,
                 attribute_sets: Optional[Sequence[str]] = None,
                 attributes: Optional[str] = None,
                 authorization: Optional[str] = None,
                 compartment_ocid: Optional[str] = None,
                 delete_in_progress: Optional[bool] = None,
                 domain_ocid: Optional[str] = None,
                 external_id: Optional[str] = None,
                 factors: Optional[Sequence[str]] = None,
                 id: Optional[str] = None,
                 idcs_created_bies: Optional[Sequence['outputs.GetDomainsAccountRecoverySettingsAccountRecoverySettingIdcsCreatedByResult']] = None,
                 idcs_endpoint: Optional[str] = None,
                 idcs_last_modified_bies: Optional[Sequence['outputs.GetDomainsAccountRecoverySettingsAccountRecoverySettingIdcsLastModifiedByResult']] = None,
                 idcs_last_upgraded_in_release: Optional[str] = None,
                 idcs_prevented_operations: Optional[Sequence[str]] = None,
                 lockout_duration: Optional[int] = None,
                 max_incorrect_attempts: Optional[int] = None,
                 metas: Optional[Sequence['outputs.GetDomainsAccountRecoverySettingsAccountRecoverySettingMetaResult']] = None,
                 ocid: Optional[str] = None,
                 resource_type_schema_version: Optional[str] = None,
                 schemas: Optional[Sequence[str]] = None,
                 tags: Optional[Sequence['outputs.GetDomainsAccountRecoverySettingsAccountRecoverySettingTagResult']] = None,
                 tenancy_ocid: Optional[str] = None):
        if account_recovery_setting_id is not None:
            pulumi.set(__self__, "account_recovery_setting_id", account_recovery_setting_id)
        if attribute_sets is not None:
            pulumi.set(__self__, "attribute_sets", attribute_sets)
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)
        if authorization is not None:
            pulumi.set(__self__, "authorization", authorization)
        if compartment_ocid is not None:
            pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        if delete_in_progress is not None:
            pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        if domain_ocid is not None:
            pulumi.set(__self__, "domain_ocid", domain_ocid)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if factors is not None:
            pulumi.set(__self__, "factors", factors)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if idcs_created_bies is not None:
            pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        if idcs_endpoint is not None:
            pulumi.set(__self__, "idcs_endpoint", idcs_endpoint)
        if idcs_last_modified_bies is not None:
            pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        if idcs_last_upgraded_in_release is not None:
            pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        if idcs_prevented_operations is not None:
            pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        if lockout_duration is not None:
            pulumi.set(__self__, "lockout_duration", lockout_duration)
        if max_incorrect_attempts is not None:
            pulumi.set(__self__, "max_incorrect_attempts", max_incorrect_attempts)
        if metas is not None:
            pulumi.set(__self__, "metas", metas)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if resource_type_schema_version is not None:
            pulumi.set(__self__, "resource_type_schema_version", resource_type_schema_version)
        if schemas is not None:
            pulumi.set(__self__, "schemas", schemas)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tenancy_ocid is not None:
            pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)

    @property
    @pulumi.getter(name="accountRecoverySettingId")
    def account_recovery_setting_id(self) -> Optional[str]:
        return pulumi.get(self, "account_recovery_setting_id")

    @property
    @pulumi.getter(name="attributeSets")
    def attribute_sets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "attribute_sets")

    @property
    @pulumi.getter
    def attributes(self) -> Optional[str]:
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter
    def authorization(self) -> Optional[str]:
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> Optional[str]:
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> Optional[bool]:
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> Optional[str]:
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[str]:
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter
    def factors(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "factors")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Optional[Sequence['outputs.GetDomainsAccountRecoverySettingsAccountRecoverySettingIdcsCreatedByResult']]:
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "idcs_endpoint")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Optional[Sequence['outputs.GetDomainsAccountRecoverySettingsAccountRecoverySettingIdcsLastModifiedByResult']]:
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> Optional[str]:
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter(name="lockoutDuration")
    def lockout_duration(self) -> Optional[int]:
        return pulumi.get(self, "lockout_duration")

    @property
    @pulumi.getter(name="maxIncorrectAttempts")
    def max_incorrect_attempts(self) -> Optional[int]:
        return pulumi.get(self, "max_incorrect_attempts")

    @property
    @pulumi.getter
    def metas(self) -> Optional[Sequence['outputs.GetDomainsAccountRecoverySettingsAccountRecoverySettingMetaResult']]:
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> Optional[str]:
        return pulumi.get(self, "resource_type_schema_version")

    @property
    @pulumi.getter
    def schemas(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.GetDomainsAccountRecoverySettingsAccountRecoverySettingTagResult']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> Optional[str]:
        return pulumi.get(self, "tenancy_ocid")


@pulumi.output_type
class GetDomainsAccountRecoverySettingsAccountRecoverySettingIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAccountRecoverySettingsAccountRecoverySettingIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAccountRecoverySettingsAccountRecoverySettingMetaResult(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsAccountRecoverySettingsAccountRecoverySettingTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsApiKeyIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsApiKeyIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsApiKeyMetaResult(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsApiKeyTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsApiKeyUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult(dict):
    def __init__(__self__, *,
                 allow_self_change: Optional[bool] = None):
        if allow_self_change is not None:
            pulumi.set(__self__, "allow_self_change", allow_self_change)

    @property
    @pulumi.getter(name="allowSelfChange")
    def allow_self_change(self) -> Optional[bool]:
        return pulumi.get(self, "allow_self_change")


@pulumi.output_type
class GetDomainsApiKeyUserResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsApiKeysApiKeyResult(dict):
    def __init__(__self__, *,
                 attribute_sets: Optional[Sequence[str]] = None,
                 attributes: Optional[str] = None,
                 authorization: Optional[str] = None,
                 compartment_ocid: Optional[str] = None,
                 delete_in_progress: Optional[bool] = None,
                 description: Optional[str] = None,
                 domain_ocid: Optional[str] = None,
                 fingerprint: Optional[str] = None,
                 id: Optional[str] = None,
                 idcs_created_bies: Optional[Sequence['outputs.GetDomainsApiKeysApiKeyIdcsCreatedByResult']] = None,
                 idcs_endpoint: Optional[str] = None,
                 idcs_last_modified_bies: Optional[Sequence['outputs.GetDomainsApiKeysApiKeyIdcsLastModifiedByResult']] = None,
                 idcs_last_upgraded_in_release: Optional[str] = None,
                 idcs_prevented_operations: Optional[Sequence[str]] = None,
                 key: Optional[str] = None,
                 metas: Optional[Sequence['outputs.GetDomainsApiKeysApiKeyMetaResult']] = None,
                 ocid: Optional[str] = None,
                 resource_type_schema_version: Optional[str] = None,
                 schemas: Optional[Sequence[str]] = None,
                 tags: Optional[Sequence['outputs.GetDomainsApiKeysApiKeyTagResult']] = None,
                 tenancy_ocid: Optional[str] = None,
                 urnietfparamsscimschemasoracleidcsextensionself_change_users: Optional[Sequence['outputs.GetDomainsApiKeysApiKeyUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult']] = None,
                 users: Optional[Sequence['outputs.GetDomainsApiKeysApiKeyUserResult']] = None):
        if attribute_sets is not None:
            pulumi.set(__self__, "attribute_sets", attribute_sets)
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)
        if authorization is not None:
            pulumi.set(__self__, "authorization", authorization)
        if compartment_ocid is not None:
            pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        if delete_in_progress is not None:
            pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain_ocid is not None:
            pulumi.set(__self__, "domain_ocid", domain_ocid)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if idcs_created_bies is not None:
            pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        if idcs_endpoint is not None:
            pulumi.set(__self__, "idcs_endpoint", idcs_endpoint)
        if idcs_last_modified_bies is not None:
            pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        if idcs_last_upgraded_in_release is not None:
            pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        if idcs_prevented_operations is not None:
            pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if metas is not None:
            pulumi.set(__self__, "metas", metas)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if resource_type_schema_version is not None:
            pulumi.set(__self__, "resource_type_schema_version", resource_type_schema_version)
        if schemas is not None:
            pulumi.set(__self__, "schemas", schemas)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tenancy_ocid is not None:
            pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)
        if urnietfparamsscimschemasoracleidcsextensionself_change_users is not None:
            pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionself_change_users", urnietfparamsscimschemasoracleidcsextensionself_change_users)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="attributeSets")
    def attribute_sets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "attribute_sets")

    @property
    @pulumi.getter
    def attributes(self) -> Optional[str]:
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter
    def authorization(self) -> Optional[str]:
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> Optional[str]:
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> Optional[bool]:
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> Optional[str]:
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[str]:
        return pulumi.get(self, "fingerprint")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Optional[Sequence['outputs.GetDomainsApiKeysApiKeyIdcsCreatedByResult']]:
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "idcs_endpoint")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Optional[Sequence['outputs.GetDomainsApiKeysApiKeyIdcsLastModifiedByResult']]:
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> Optional[str]:
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def metas(self) -> Optional[Sequence['outputs.GetDomainsApiKeysApiKeyMetaResult']]:
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> Optional[str]:
        return pulumi.get(self, "resource_type_schema_version")

    @property
    @pulumi.getter
    def schemas(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.GetDomainsApiKeysApiKeyTagResult']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> Optional[str]:
        return pulumi.get(self, "tenancy_ocid")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionselfChangeUsers")
    def urnietfparamsscimschemasoracleidcsextensionself_change_users(self) -> Optional[Sequence['outputs.GetDomainsApiKeysApiKeyUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult']]:
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionself_change_users")

    @property
    @pulumi.getter
    def users(self) -> Optional[Sequence['outputs.GetDomainsApiKeysApiKeyUserResult']]:
        return pulumi.get(self, "users")


@pulumi.output_type
class GetDomainsApiKeysApiKeyIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsApiKeysApiKeyIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsApiKeysApiKeyMetaResult(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsApiKeysApiKeyTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsApiKeysApiKeyUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult(dict):
    def __init__(__self__, *,
                 allow_self_change: Optional[bool] = None):
        if allow_self_change is not None:
            pulumi.set(__self__, "allow_self_change", allow_self_change)

    @property
    @pulumi.getter(name="allowSelfChange")
    def allow_self_change(self) -> Optional[bool]:
        return pulumi.get(self, "allow_self_change")


@pulumi.output_type
class GetDomainsApiKeysApiKeyUserResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppAccountResult(dict):
    def __init__(__self__, *,
                 active: Optional[bool] = None,
                 name: Optional[str] = None,
                 owner_id: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if active is not None:
            pulumi.set(__self__, "active", active)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def active(self) -> Optional[bool]:
        return pulumi.get(self, "active")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[str]:
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppAdminRoleResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 display: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppAliasAppResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 display: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppAllowedScopeResult(dict):
    def __init__(__self__, *,
                 fqs: Optional[str] = None,
                 id_of_defining_app: Optional[str] = None,
                 read_only: Optional[bool] = None):
        if fqs is not None:
            pulumi.set(__self__, "fqs", fqs)
        if id_of_defining_app is not None:
            pulumi.set(__self__, "id_of_defining_app", id_of_defining_app)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter
    def fqs(self) -> Optional[str]:
        return pulumi.get(self, "fqs")

    @property
    @pulumi.getter(name="idOfDefiningApp")
    def id_of_defining_app(self) -> Optional[str]:
        return pulumi.get(self, "id_of_defining_app")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")


@pulumi.output_type
class GetDomainsAppAllowedTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppAppSignonPolicyResult(dict):
    def __init__(__self__, *,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppAppsNetworkPerimeterResult(dict):
    def __init__(__self__, *,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppAsOpcServiceResult(dict):
    def __init__(__self__, *,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppAttrRenderingMetadataResult(dict):
    def __init__(__self__, *,
                 datatype: Optional[str] = None,
                 helptext: Optional[str] = None,
                 label: Optional[str] = None,
                 max_length: Optional[int] = None,
                 max_size: Optional[int] = None,
                 min_length: Optional[int] = None,
                 min_size: Optional[int] = None,
                 name: Optional[str] = None,
                 order: Optional[int] = None,
                 read_only: Optional[bool] = None,
                 regexp: Optional[str] = None,
                 required: Optional[bool] = None,
                 section: Optional[str] = None,
                 visible: Optional[bool] = None,
                 widget: Optional[str] = None):
        if datatype is not None:
            pulumi.set(__self__, "datatype", datatype)
        if helptext is not None:
            pulumi.set(__self__, "helptext", helptext)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if max_length is not None:
            pulumi.set(__self__, "max_length", max_length)
        if max_size is not None:
            pulumi.set(__self__, "max_size", max_size)
        if min_length is not None:
            pulumi.set(__self__, "min_length", min_length)
        if min_size is not None:
            pulumi.set(__self__, "min_size", min_size)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if regexp is not None:
            pulumi.set(__self__, "regexp", regexp)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if section is not None:
            pulumi.set(__self__, "section", section)
        if visible is not None:
            pulumi.set(__self__, "visible", visible)
        if widget is not None:
            pulumi.set(__self__, "widget", widget)

    @property
    @pulumi.getter
    def datatype(self) -> Optional[str]:
        return pulumi.get(self, "datatype")

    @property
    @pulumi.getter
    def helptext(self) -> Optional[str]:
        return pulumi.get(self, "helptext")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="maxLength")
    def max_length(self) -> Optional[int]:
        return pulumi.get(self, "max_length")

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[int]:
        return pulumi.get(self, "max_size")

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[int]:
        return pulumi.get(self, "min_length")

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> Optional[int]:
        return pulumi.get(self, "min_size")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def order(self) -> Optional[int]:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter
    def regexp(self) -> Optional[str]:
        return pulumi.get(self, "regexp")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def section(self) -> Optional[str]:
        return pulumi.get(self, "section")

    @property
    @pulumi.getter
    def visible(self) -> Optional[bool]:
        return pulumi.get(self, "visible")

    @property
    @pulumi.getter
    def widget(self) -> Optional[str]:
        return pulumi.get(self, "widget")


@pulumi.output_type
class GetDomainsAppBasedOnTemplateResult(dict):
    def __init__(__self__, *,
                 last_modified: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None,
                 well_known_id: Optional[str] = None):
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if well_known_id is not None:
            pulumi.set(__self__, "well_known_id", well_known_id)

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="wellKnownId")
    def well_known_id(self) -> Optional[str]:
        return pulumi.get(self, "well_known_id")


@pulumi.output_type
class GetDomainsAppCertificateResult(dict):
    def __init__(__self__, *,
                 cert_alias: Optional[str] = None,
                 kid: Optional[str] = None,
                 sha1thumbprint: Optional[str] = None,
                 x509base64certificate: Optional[str] = None,
                 x5t: Optional[str] = None):
        if cert_alias is not None:
            pulumi.set(__self__, "cert_alias", cert_alias)
        if kid is not None:
            pulumi.set(__self__, "kid", kid)
        if sha1thumbprint is not None:
            pulumi.set(__self__, "sha1thumbprint", sha1thumbprint)
        if x509base64certificate is not None:
            pulumi.set(__self__, "x509base64certificate", x509base64certificate)
        if x5t is not None:
            pulumi.set(__self__, "x5t", x5t)

    @property
    @pulumi.getter(name="certAlias")
    def cert_alias(self) -> Optional[str]:
        return pulumi.get(self, "cert_alias")

    @property
    @pulumi.getter
    def kid(self) -> Optional[str]:
        return pulumi.get(self, "kid")

    @property
    @pulumi.getter
    def sha1thumbprint(self) -> Optional[str]:
        return pulumi.get(self, "sha1thumbprint")

    @property
    @pulumi.getter
    def x509base64certificate(self) -> Optional[str]:
        return pulumi.get(self, "x509base64certificate")

    @property
    @pulumi.getter
    def x5t(self) -> Optional[str]:
        return pulumi.get(self, "x5t")


@pulumi.output_type
class GetDomainsAppCloudControlPropertyResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetDomainsAppEditableAttributeResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDomainsAppGrantResult(dict):
    def __init__(__self__, *,
                 grant_mechanism: Optional[str] = None,
                 grantee_id: Optional[str] = None,
                 grantee_type: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if grant_mechanism is not None:
            pulumi.set(__self__, "grant_mechanism", grant_mechanism)
        if grantee_id is not None:
            pulumi.set(__self__, "grantee_id", grantee_id)
        if grantee_type is not None:
            pulumi.set(__self__, "grantee_type", grantee_type)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="grantMechanism")
    def grant_mechanism(self) -> Optional[str]:
        return pulumi.get(self, "grant_mechanism")

    @property
    @pulumi.getter(name="granteeId")
    def grantee_id(self) -> Optional[str]:
        return pulumi.get(self, "grantee_id")

    @property
    @pulumi.getter(name="granteeType")
    def grantee_type(self) -> Optional[str]:
        return pulumi.get(self, "grantee_type")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppGrantedAppRoleResult(dict):
    def __init__(__self__, *,
                 admin_role: Optional[bool] = None,
                 app_id: Optional[str] = None,
                 app_name: Optional[str] = None,
                 display: Optional[str] = None,
                 legacy_group_name: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if admin_role is not None:
            pulumi.set(__self__, "admin_role", admin_role)
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if app_name is not None:
            pulumi.set(__self__, "app_name", app_name)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if legacy_group_name is not None:
            pulumi.set(__self__, "legacy_group_name", legacy_group_name)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="adminRole")
    def admin_role(self) -> Optional[bool]:
        return pulumi.get(self, "admin_role")

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[str]:
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="appName")
    def app_name(self) -> Optional[str]:
        return pulumi.get(self, "app_name")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter(name="legacyGroupName")
    def legacy_group_name(self) -> Optional[str]:
        return pulumi.get(self, "legacy_group_name")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppIdentityProviderResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppIdpPolicyResult(dict):
    def __init__(__self__, *,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppMetaResult(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsAppProtectableSecondaryAudienceResult(dict):
    def __init__(__self__, *,
                 read_only: Optional[bool] = None,
                 value: Optional[str] = None):
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppRadiusPolicyResult(dict):
    def __init__(__self__, *,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppRoleAppResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 name: Optional[str] = None,
                 ref: Optional[str] = None,
                 service_instance_identifier: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if service_instance_identifier is not None:
            pulumi.set(__self__, "service_instance_identifier", service_instance_identifier)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="serviceInstanceIdentifier")
    def service_instance_identifier(self) -> Optional[str]:
        return pulumi.get(self, "service_instance_identifier")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppRoleIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppRoleIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppRoleMemberResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppRoleMetaResult(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsAppRoleTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppRolesAppRoleResult(dict):
    def __init__(__self__, *,
                 admin_role: Optional[bool] = None,
                 apps: Optional[Sequence['outputs.GetDomainsAppRolesAppRoleAppResult']] = None,
                 attribute_sets: Optional[Sequence[str]] = None,
                 attributes: Optional[str] = None,
                 authorization: Optional[str] = None,
                 available_to_clients: Optional[bool] = None,
                 available_to_groups: Optional[bool] = None,
                 available_to_users: Optional[bool] = None,
                 compartment_ocid: Optional[str] = None,
                 delete_in_progress: Optional[bool] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 domain_ocid: Optional[str] = None,
                 id: Optional[str] = None,
                 idcs_created_bies: Optional[Sequence['outputs.GetDomainsAppRolesAppRoleIdcsCreatedByResult']] = None,
                 idcs_endpoint: Optional[str] = None,
                 idcs_last_modified_bies: Optional[Sequence['outputs.GetDomainsAppRolesAppRoleIdcsLastModifiedByResult']] = None,
                 idcs_last_upgraded_in_release: Optional[str] = None,
                 idcs_prevented_operations: Optional[Sequence[str]] = None,
                 legacy_group_name: Optional[str] = None,
                 limited_to_one_or_more_groups: Optional[bool] = None,
                 localized_display_name: Optional[str] = None,
                 members: Optional[Sequence['outputs.GetDomainsAppRolesAppRoleMemberResult']] = None,
                 metas: Optional[Sequence['outputs.GetDomainsAppRolesAppRoleMetaResult']] = None,
                 ocid: Optional[str] = None,
                 public: Optional[bool] = None,
                 resource_type_schema_version: Optional[str] = None,
                 schemas: Optional[Sequence[str]] = None,
                 tags: Optional[Sequence['outputs.GetDomainsAppRolesAppRoleTagResult']] = None,
                 tenancy_ocid: Optional[str] = None,
                 unique_name: Optional[str] = None):
        if admin_role is not None:
            pulumi.set(__self__, "admin_role", admin_role)
        if apps is not None:
            pulumi.set(__self__, "apps", apps)
        if attribute_sets is not None:
            pulumi.set(__self__, "attribute_sets", attribute_sets)
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)
        if authorization is not None:
            pulumi.set(__self__, "authorization", authorization)
        if available_to_clients is not None:
            pulumi.set(__self__, "available_to_clients", available_to_clients)
        if available_to_groups is not None:
            pulumi.set(__self__, "available_to_groups", available_to_groups)
        if available_to_users is not None:
            pulumi.set(__self__, "available_to_users", available_to_users)
        if compartment_ocid is not None:
            pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        if delete_in_progress is not None:
            pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if domain_ocid is not None:
            pulumi.set(__self__, "domain_ocid", domain_ocid)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if idcs_created_bies is not None:
            pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        if idcs_endpoint is not None:
            pulumi.set(__self__, "idcs_endpoint", idcs_endpoint)
        if idcs_last_modified_bies is not None:
            pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        if idcs_last_upgraded_in_release is not None:
            pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        if idcs_prevented_operations is not None:
            pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        if legacy_group_name is not None:
            pulumi.set(__self__, "legacy_group_name", legacy_group_name)
        if limited_to_one_or_more_groups is not None:
            pulumi.set(__self__, "limited_to_one_or_more_groups", limited_to_one_or_more_groups)
        if localized_display_name is not None:
            pulumi.set(__self__, "localized_display_name", localized_display_name)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if metas is not None:
            pulumi.set(__self__, "metas", metas)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if public is not None:
            pulumi.set(__self__, "public", public)
        if resource_type_schema_version is not None:
            pulumi.set(__self__, "resource_type_schema_version", resource_type_schema_version)
        if schemas is not None:
            pulumi.set(__self__, "schemas", schemas)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tenancy_ocid is not None:
            pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)
        if unique_name is not None:
            pulumi.set(__self__, "unique_name", unique_name)

    @property
    @pulumi.getter(name="adminRole")
    def admin_role(self) -> Optional[bool]:
        return pulumi.get(self, "admin_role")

    @property
    @pulumi.getter
    def apps(self) -> Optional[Sequence['outputs.GetDomainsAppRolesAppRoleAppResult']]:
        return pulumi.get(self, "apps")

    @property
    @pulumi.getter(name="attributeSets")
    def attribute_sets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "attribute_sets")

    @property
    @pulumi.getter
    def attributes(self) -> Optional[str]:
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter
    def authorization(self) -> Optional[str]:
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="availableToClients")
    def available_to_clients(self) -> Optional[bool]:
        return pulumi.get(self, "available_to_clients")

    @property
    @pulumi.getter(name="availableToGroups")
    def available_to_groups(self) -> Optional[bool]:
        return pulumi.get(self, "available_to_groups")

    @property
    @pulumi.getter(name="availableToUsers")
    def available_to_users(self) -> Optional[bool]:
        return pulumi.get(self, "available_to_users")

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> Optional[str]:
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> Optional[bool]:
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> Optional[str]:
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Optional[Sequence['outputs.GetDomainsAppRolesAppRoleIdcsCreatedByResult']]:
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "idcs_endpoint")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Optional[Sequence['outputs.GetDomainsAppRolesAppRoleIdcsLastModifiedByResult']]:
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> Optional[str]:
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter(name="legacyGroupName")
    def legacy_group_name(self) -> Optional[str]:
        return pulumi.get(self, "legacy_group_name")

    @property
    @pulumi.getter(name="limitedToOneOrMoreGroups")
    def limited_to_one_or_more_groups(self) -> Optional[bool]:
        return pulumi.get(self, "limited_to_one_or_more_groups")

    @property
    @pulumi.getter(name="localizedDisplayName")
    def localized_display_name(self) -> Optional[str]:
        return pulumi.get(self, "localized_display_name")

    @property
    @pulumi.getter
    def members(self) -> Optional[Sequence['outputs.GetDomainsAppRolesAppRoleMemberResult']]:
        return pulumi.get(self, "members")

    @property
    @pulumi.getter
    def metas(self) -> Optional[Sequence['outputs.GetDomainsAppRolesAppRoleMetaResult']]:
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def public(self) -> Optional[bool]:
        return pulumi.get(self, "public")

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> Optional[str]:
        return pulumi.get(self, "resource_type_schema_version")

    @property
    @pulumi.getter
    def schemas(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.GetDomainsAppRolesAppRoleTagResult']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> Optional[str]:
        return pulumi.get(self, "tenancy_ocid")

    @property
    @pulumi.getter(name="uniqueName")
    def unique_name(self) -> Optional[str]:
        return pulumi.get(self, "unique_name")


@pulumi.output_type
class GetDomainsAppRolesAppRoleAppResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 name: Optional[str] = None,
                 ref: Optional[str] = None,
                 service_instance_identifier: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if service_instance_identifier is not None:
            pulumi.set(__self__, "service_instance_identifier", service_instance_identifier)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="serviceInstanceIdentifier")
    def service_instance_identifier(self) -> Optional[str]:
        return pulumi.get(self, "service_instance_identifier")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppRolesAppRoleIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppRolesAppRoleIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppRolesAppRoleMemberResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppRolesAppRoleMetaResult(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsAppRolesAppRoleTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppSamlServiceProviderResult(dict):
    def __init__(__self__, *,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppScopeResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 fqs: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 requires_consent: Optional[bool] = None,
                 value: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if fqs is not None:
            pulumi.set(__self__, "fqs", fqs)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if requires_consent is not None:
            pulumi.set(__self__, "requires_consent", requires_consent)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def fqs(self) -> Optional[str]:
        return pulumi.get(self, "fqs")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="requiresConsent")
    def requires_consent(self) -> Optional[bool]:
        return pulumi.get(self, "requires_consent")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppServiceParamResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppSignonPolicyResult(dict):
    def __init__(__self__, *,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppTermsOfUseResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppTrustPolicyResult(dict):
    def __init__(__self__, *,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionOciTagResult(dict):
    def __init__(__self__, *,
                 defined_tags: Optional[Sequence['outputs.GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTagResult']] = None,
                 freeform_tags: Optional[Sequence['outputs.GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTagResult']] = None,
                 tag_slug: Optional[str] = None):
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if tag_slug is not None:
            pulumi.set(__self__, "tag_slug", tag_slug)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Sequence['outputs.GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTagResult']]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Sequence['outputs.GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTagResult']]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="tagSlug")
    def tag_slug(self) -> Optional[str]:
        return pulumi.get(self, "tag_slug")


@pulumi.output_type
class GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 namespace: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppUrnietfparamsscimschemasoracleidcsextensiondbcsAppResult(dict):
    def __init__(__self__, *,
                 domain_apps: Optional[Sequence['outputs.GetDomainsAppUrnietfparamsscimschemasoracleidcsextensiondbcsAppDomainAppResult']] = None,
                 domain_name: Optional[str] = None):
        if domain_apps is not None:
            pulumi.set(__self__, "domain_apps", domain_apps)
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)

    @property
    @pulumi.getter(name="domainApps")
    def domain_apps(self) -> Optional[Sequence['outputs.GetDomainsAppUrnietfparamsscimschemasoracleidcsextensiondbcsAppDomainAppResult']]:
        return pulumi.get(self, "domain_apps")

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[str]:
        return pulumi.get(self, "domain_name")


@pulumi.output_type
class GetDomainsAppUrnietfparamsscimschemasoracleidcsextensiondbcsAppDomainAppResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppAppResult(dict):
    def __init__(__self__, *,
                 allow_authz_decision_ttl: Optional[int] = None,
                 allow_authz_policies: Optional[Sequence['outputs.GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppAppAllowAuthzPolicyResult']] = None,
                 app_resources: Optional[Sequence['outputs.GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppAppAppResourceResult']] = None,
                 deny_authz_decision_ttl: Optional[int] = None,
                 deny_authz_policies: Optional[Sequence['outputs.GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppAppDenyAuthzPolicyResult']] = None):
        if allow_authz_decision_ttl is not None:
            pulumi.set(__self__, "allow_authz_decision_ttl", allow_authz_decision_ttl)
        if allow_authz_policies is not None:
            pulumi.set(__self__, "allow_authz_policies", allow_authz_policies)
        if app_resources is not None:
            pulumi.set(__self__, "app_resources", app_resources)
        if deny_authz_decision_ttl is not None:
            pulumi.set(__self__, "deny_authz_decision_ttl", deny_authz_decision_ttl)
        if deny_authz_policies is not None:
            pulumi.set(__self__, "deny_authz_policies", deny_authz_policies)

    @property
    @pulumi.getter(name="allowAuthzDecisionTtl")
    def allow_authz_decision_ttl(self) -> Optional[int]:
        return pulumi.get(self, "allow_authz_decision_ttl")

    @property
    @pulumi.getter(name="allowAuthzPolicies")
    def allow_authz_policies(self) -> Optional[Sequence['outputs.GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppAppAllowAuthzPolicyResult']]:
        return pulumi.get(self, "allow_authz_policies")

    @property
    @pulumi.getter(name="appResources")
    def app_resources(self) -> Optional[Sequence['outputs.GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppAppAppResourceResult']]:
        return pulumi.get(self, "app_resources")

    @property
    @pulumi.getter(name="denyAuthzDecisionTtl")
    def deny_authz_decision_ttl(self) -> Optional[int]:
        return pulumi.get(self, "deny_authz_decision_ttl")

    @property
    @pulumi.getter(name="denyAuthzPolicies")
    def deny_authz_policies(self) -> Optional[Sequence['outputs.GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppAppDenyAuthzPolicyResult']]:
        return pulumi.get(self, "deny_authz_policies")


@pulumi.output_type
class GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppAppAllowAuthzPolicyResult(dict):
    def __init__(__self__, *,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppAppAppResourceResult(dict):
    def __init__(__self__, *,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppAppDenyAuthzPolicyResult(dict):
    def __init__(__self__, *,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppAppResult(dict):
    def __init__(__self__, *,
                 configuration: Optional[str] = None,
                 form_cred_method: Optional[str] = None,
                 form_credential_sharing_group_id: Optional[str] = None,
                 form_fill_url_matches: Optional[Sequence['outputs.GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppAppFormFillUrlMatchResult']] = None,
                 form_type: Optional[str] = None,
                 reveal_password_on_form: Optional[bool] = None,
                 sync_from_template: Optional[bool] = None,
                 user_name_form_expression: Optional[str] = None,
                 user_name_form_template: Optional[str] = None):
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)
        if form_cred_method is not None:
            pulumi.set(__self__, "form_cred_method", form_cred_method)
        if form_credential_sharing_group_id is not None:
            pulumi.set(__self__, "form_credential_sharing_group_id", form_credential_sharing_group_id)
        if form_fill_url_matches is not None:
            pulumi.set(__self__, "form_fill_url_matches", form_fill_url_matches)
        if form_type is not None:
            pulumi.set(__self__, "form_type", form_type)
        if reveal_password_on_form is not None:
            pulumi.set(__self__, "reveal_password_on_form", reveal_password_on_form)
        if sync_from_template is not None:
            pulumi.set(__self__, "sync_from_template", sync_from_template)
        if user_name_form_expression is not None:
            pulumi.set(__self__, "user_name_form_expression", user_name_form_expression)
        if user_name_form_template is not None:
            pulumi.set(__self__, "user_name_form_template", user_name_form_template)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[str]:
        return pulumi.get(self, "configuration")

    @property
    @pulumi.getter(name="formCredMethod")
    def form_cred_method(self) -> Optional[str]:
        return pulumi.get(self, "form_cred_method")

    @property
    @pulumi.getter(name="formCredentialSharingGroupId")
    def form_credential_sharing_group_id(self) -> Optional[str]:
        return pulumi.get(self, "form_credential_sharing_group_id")

    @property
    @pulumi.getter(name="formFillUrlMatches")
    def form_fill_url_matches(self) -> Optional[Sequence['outputs.GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppAppFormFillUrlMatchResult']]:
        return pulumi.get(self, "form_fill_url_matches")

    @property
    @pulumi.getter(name="formType")
    def form_type(self) -> Optional[str]:
        return pulumi.get(self, "form_type")

    @property
    @pulumi.getter(name="revealPasswordOnForm")
    def reveal_password_on_form(self) -> Optional[bool]:
        return pulumi.get(self, "reveal_password_on_form")

    @property
    @pulumi.getter(name="syncFromTemplate")
    def sync_from_template(self) -> Optional[bool]:
        return pulumi.get(self, "sync_from_template")

    @property
    @pulumi.getter(name="userNameFormExpression")
    def user_name_form_expression(self) -> Optional[str]:
        return pulumi.get(self, "user_name_form_expression")

    @property
    @pulumi.getter(name="userNameFormTemplate")
    def user_name_form_template(self) -> Optional[str]:
        return pulumi.get(self, "user_name_form_template")


@pulumi.output_type
class GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppAppFormFillUrlMatchResult(dict):
    def __init__(__self__, *,
                 form_url: Optional[str] = None,
                 form_url_match_type: Optional[str] = None):
        if form_url is not None:
            pulumi.set(__self__, "form_url", form_url)
        if form_url_match_type is not None:
            pulumi.set(__self__, "form_url_match_type", form_url_match_type)

    @property
    @pulumi.getter(name="formUrl")
    def form_url(self) -> Optional[str]:
        return pulumi.get(self, "form_url")

    @property
    @pulumi.getter(name="formUrlMatchType")
    def form_url_match_type(self) -> Optional[str]:
        return pulumi.get(self, "form_url_match_type")


@pulumi.output_type
class GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppTemplateAppTemplateResult(dict):
    def __init__(__self__, *,
                 configuration: Optional[str] = None,
                 form_cred_method: Optional[str] = None,
                 form_credential_sharing_group_id: Optional[str] = None,
                 form_fill_url_matches: Optional[Sequence['outputs.GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppTemplateAppTemplateFormFillUrlMatchResult']] = None,
                 form_type: Optional[str] = None,
                 reveal_password_on_form: Optional[bool] = None,
                 sync_from_template: Optional[bool] = None,
                 user_name_form_expression: Optional[str] = None,
                 user_name_form_template: Optional[str] = None):
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)
        if form_cred_method is not None:
            pulumi.set(__self__, "form_cred_method", form_cred_method)
        if form_credential_sharing_group_id is not None:
            pulumi.set(__self__, "form_credential_sharing_group_id", form_credential_sharing_group_id)
        if form_fill_url_matches is not None:
            pulumi.set(__self__, "form_fill_url_matches", form_fill_url_matches)
        if form_type is not None:
            pulumi.set(__self__, "form_type", form_type)
        if reveal_password_on_form is not None:
            pulumi.set(__self__, "reveal_password_on_form", reveal_password_on_form)
        if sync_from_template is not None:
            pulumi.set(__self__, "sync_from_template", sync_from_template)
        if user_name_form_expression is not None:
            pulumi.set(__self__, "user_name_form_expression", user_name_form_expression)
        if user_name_form_template is not None:
            pulumi.set(__self__, "user_name_form_template", user_name_form_template)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[str]:
        return pulumi.get(self, "configuration")

    @property
    @pulumi.getter(name="formCredMethod")
    def form_cred_method(self) -> Optional[str]:
        return pulumi.get(self, "form_cred_method")

    @property
    @pulumi.getter(name="formCredentialSharingGroupId")
    def form_credential_sharing_group_id(self) -> Optional[str]:
        return pulumi.get(self, "form_credential_sharing_group_id")

    @property
    @pulumi.getter(name="formFillUrlMatches")
    def form_fill_url_matches(self) -> Optional[Sequence['outputs.GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppTemplateAppTemplateFormFillUrlMatchResult']]:
        return pulumi.get(self, "form_fill_url_matches")

    @property
    @pulumi.getter(name="formType")
    def form_type(self) -> Optional[str]:
        return pulumi.get(self, "form_type")

    @property
    @pulumi.getter(name="revealPasswordOnForm")
    def reveal_password_on_form(self) -> Optional[bool]:
        return pulumi.get(self, "reveal_password_on_form")

    @property
    @pulumi.getter(name="syncFromTemplate")
    def sync_from_template(self) -> Optional[bool]:
        return pulumi.get(self, "sync_from_template")

    @property
    @pulumi.getter(name="userNameFormExpression")
    def user_name_form_expression(self) -> Optional[str]:
        return pulumi.get(self, "user_name_form_expression")

    @property
    @pulumi.getter(name="userNameFormTemplate")
    def user_name_form_template(self) -> Optional[str]:
        return pulumi.get(self, "user_name_form_template")


@pulumi.output_type
class GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppTemplateAppTemplateFormFillUrlMatchResult(dict):
    def __init__(__self__, *,
                 form_url: Optional[str] = None,
                 form_url_match_type: Optional[str] = None):
        if form_url is not None:
            pulumi.set(__self__, "form_url", form_url)
        if form_url_match_type is not None:
            pulumi.set(__self__, "form_url_match_type", form_url_match_type)

    @property
    @pulumi.getter(name="formUrl")
    def form_url(self) -> Optional[str]:
        return pulumi.get(self, "form_url")

    @property
    @pulumi.getter(name="formUrlMatchType")
    def form_url_match_type(self) -> Optional[str]:
        return pulumi.get(self, "form_url_match_type")


@pulumi.output_type
class GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionkerberosRealmAppResult(dict):
    def __init__(__self__, *,
                 default_encryption_salt_type: Optional[str] = None,
                 master_key: Optional[str] = None,
                 max_renewable_age: Optional[int] = None,
                 max_ticket_life: Optional[int] = None,
                 realm_name: Optional[str] = None,
                 supported_encryption_salt_types: Optional[Sequence[str]] = None,
                 ticket_flags: Optional[int] = None):
        if default_encryption_salt_type is not None:
            pulumi.set(__self__, "default_encryption_salt_type", default_encryption_salt_type)
        if master_key is not None:
            pulumi.set(__self__, "master_key", master_key)
        if max_renewable_age is not None:
            pulumi.set(__self__, "max_renewable_age", max_renewable_age)
        if max_ticket_life is not None:
            pulumi.set(__self__, "max_ticket_life", max_ticket_life)
        if realm_name is not None:
            pulumi.set(__self__, "realm_name", realm_name)
        if supported_encryption_salt_types is not None:
            pulumi.set(__self__, "supported_encryption_salt_types", supported_encryption_salt_types)
        if ticket_flags is not None:
            pulumi.set(__self__, "ticket_flags", ticket_flags)

    @property
    @pulumi.getter(name="defaultEncryptionSaltType")
    def default_encryption_salt_type(self) -> Optional[str]:
        return pulumi.get(self, "default_encryption_salt_type")

    @property
    @pulumi.getter(name="masterKey")
    def master_key(self) -> Optional[str]:
        return pulumi.get(self, "master_key")

    @property
    @pulumi.getter(name="maxRenewableAge")
    def max_renewable_age(self) -> Optional[int]:
        return pulumi.get(self, "max_renewable_age")

    @property
    @pulumi.getter(name="maxTicketLife")
    def max_ticket_life(self) -> Optional[int]:
        return pulumi.get(self, "max_ticket_life")

    @property
    @pulumi.getter(name="realmName")
    def realm_name(self) -> Optional[str]:
        return pulumi.get(self, "realm_name")

    @property
    @pulumi.getter(name="supportedEncryptionSaltTypes")
    def supported_encryption_salt_types(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "supported_encryption_salt_types")

    @property
    @pulumi.getter(name="ticketFlags")
    def ticket_flags(self) -> Optional[int]:
        return pulumi.get(self, "ticket_flags")


@pulumi.output_type
class GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppResult(dict):
    def __init__(__self__, *,
                 account_form_visible: Optional[bool] = None,
                 admin_consent_granted: Optional[bool] = None,
                 bundle_configuration_properties: Optional[Sequence['outputs.GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppBundleConfigurationPropertyResult']] = None,
                 bundle_pool_configurations: Optional[Sequence['outputs.GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppBundlePoolConfigurationResult']] = None,
                 can_be_authoritative: Optional[bool] = None,
                 connected: Optional[bool] = None,
                 connector_bundles: Optional[Sequence['outputs.GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppConnectorBundleResult']] = None,
                 enable_auth_sync_new_user_notification: Optional[bool] = None,
                 enable_sync: Optional[bool] = None,
                 enable_sync_summary_report_notification: Optional[bool] = None,
                 flat_file_bundle_configuration_properties: Optional[Sequence['outputs.GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppFlatFileBundleConfigurationPropertyResult']] = None,
                 flat_file_connector_bundles: Optional[Sequence['outputs.GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppFlatFileConnectorBundleResult']] = None,
                 identity_bridges: Optional[Sequence['outputs.GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppIdentityBridgeResult']] = None,
                 is_authoritative: Optional[bool] = None,
                 is_directory: Optional[bool] = None,
                 is_on_premise_app: Optional[bool] = None,
                 is_schema_customization_supported: Optional[bool] = None,
                 is_schema_discovery_supported: Optional[bool] = None,
                 is_three_legged_oauth_enabled: Optional[bool] = None,
                 is_two_legged_oauth_enabled: Optional[bool] = None,
                 object_classes: Optional[Sequence['outputs.GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppObjectClassResult']] = None,
                 sync_config_last_modified: Optional[str] = None,
                 three_legged_oauth_credentials: Optional[Sequence['outputs.GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppThreeLeggedOauthCredentialResult']] = None,
                 three_legged_oauth_provider_name: Optional[str] = None):
        if account_form_visible is not None:
            pulumi.set(__self__, "account_form_visible", account_form_visible)
        if admin_consent_granted is not None:
            pulumi.set(__self__, "admin_consent_granted", admin_consent_granted)
        if bundle_configuration_properties is not None:
            pulumi.set(__self__, "bundle_configuration_properties", bundle_configuration_properties)
        if bundle_pool_configurations is not None:
            pulumi.set(__self__, "bundle_pool_configurations", bundle_pool_configurations)
        if can_be_authoritative is not None:
            pulumi.set(__self__, "can_be_authoritative", can_be_authoritative)
        if connected is not None:
            pulumi.set(__self__, "connected", connected)
        if connector_bundles is not None:
            pulumi.set(__self__, "connector_bundles", connector_bundles)
        if enable_auth_sync_new_user_notification is not None:
            pulumi.set(__self__, "enable_auth_sync_new_user_notification", enable_auth_sync_new_user_notification)
        if enable_sync is not None:
            pulumi.set(__self__, "enable_sync", enable_sync)
        if enable_sync_summary_report_notification is not None:
            pulumi.set(__self__, "enable_sync_summary_report_notification", enable_sync_summary_report_notification)
        if flat_file_bundle_configuration_properties is not None:
            pulumi.set(__self__, "flat_file_bundle_configuration_properties", flat_file_bundle_configuration_properties)
        if flat_file_connector_bundles is not None:
            pulumi.set(__self__, "flat_file_connector_bundles", flat_file_connector_bundles)
        if identity_bridges is not None:
            pulumi.set(__self__, "identity_bridges", identity_bridges)
        if is_authoritative is not None:
            pulumi.set(__self__, "is_authoritative", is_authoritative)
        if is_directory is not None:
            pulumi.set(__self__, "is_directory", is_directory)
        if is_on_premise_app is not None:
            pulumi.set(__self__, "is_on_premise_app", is_on_premise_app)
        if is_schema_customization_supported is not None:
            pulumi.set(__self__, "is_schema_customization_supported", is_schema_customization_supported)
        if is_schema_discovery_supported is not None:
            pulumi.set(__self__, "is_schema_discovery_supported", is_schema_discovery_supported)
        if is_three_legged_oauth_enabled is not None:
            pulumi.set(__self__, "is_three_legged_oauth_enabled", is_three_legged_oauth_enabled)
        if is_two_legged_oauth_enabled is not None:
            pulumi.set(__self__, "is_two_legged_oauth_enabled", is_two_legged_oauth_enabled)
        if object_classes is not None:
            pulumi.set(__self__, "object_classes", object_classes)
        if sync_config_last_modified is not None:
            pulumi.set(__self__, "sync_config_last_modified", sync_config_last_modified)
        if three_legged_oauth_credentials is not None:
            pulumi.set(__self__, "three_legged_oauth_credentials", three_legged_oauth_credentials)
        if three_legged_oauth_provider_name is not None:
            pulumi.set(__self__, "three_legged_oauth_provider_name", three_legged_oauth_provider_name)

    @property
    @pulumi.getter(name="accountFormVisible")
    def account_form_visible(self) -> Optional[bool]:
        return pulumi.get(self, "account_form_visible")

    @property
    @pulumi.getter(name="adminConsentGranted")
    def admin_consent_granted(self) -> Optional[bool]:
        return pulumi.get(self, "admin_consent_granted")

    @property
    @pulumi.getter(name="bundleConfigurationProperties")
    def bundle_configuration_properties(self) -> Optional[Sequence['outputs.GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppBundleConfigurationPropertyResult']]:
        return pulumi.get(self, "bundle_configuration_properties")

    @property
    @pulumi.getter(name="bundlePoolConfigurations")
    def bundle_pool_configurations(self) -> Optional[Sequence['outputs.GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppBundlePoolConfigurationResult']]:
        return pulumi.get(self, "bundle_pool_configurations")

    @property
    @pulumi.getter(name="canBeAuthoritative")
    def can_be_authoritative(self) -> Optional[bool]:
        return pulumi.get(self, "can_be_authoritative")

    @property
    @pulumi.getter
    def connected(self) -> Optional[bool]:
        return pulumi.get(self, "connected")

    @property
    @pulumi.getter(name="connectorBundles")
    def connector_bundles(self) -> Optional[Sequence['outputs.GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppConnectorBundleResult']]:
        return pulumi.get(self, "connector_bundles")

    @property
    @pulumi.getter(name="enableAuthSyncNewUserNotification")
    def enable_auth_sync_new_user_notification(self) -> Optional[bool]:
        return pulumi.get(self, "enable_auth_sync_new_user_notification")

    @property
    @pulumi.getter(name="enableSync")
    def enable_sync(self) -> Optional[bool]:
        return pulumi.get(self, "enable_sync")

    @property
    @pulumi.getter(name="enableSyncSummaryReportNotification")
    def enable_sync_summary_report_notification(self) -> Optional[bool]:
        return pulumi.get(self, "enable_sync_summary_report_notification")

    @property
    @pulumi.getter(name="flatFileBundleConfigurationProperties")
    def flat_file_bundle_configuration_properties(self) -> Optional[Sequence['outputs.GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppFlatFileBundleConfigurationPropertyResult']]:
        return pulumi.get(self, "flat_file_bundle_configuration_properties")

    @property
    @pulumi.getter(name="flatFileConnectorBundles")
    def flat_file_connector_bundles(self) -> Optional[Sequence['outputs.GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppFlatFileConnectorBundleResult']]:
        return pulumi.get(self, "flat_file_connector_bundles")

    @property
    @pulumi.getter(name="identityBridges")
    def identity_bridges(self) -> Optional[Sequence['outputs.GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppIdentityBridgeResult']]:
        return pulumi.get(self, "identity_bridges")

    @property
    @pulumi.getter(name="isAuthoritative")
    def is_authoritative(self) -> Optional[bool]:
        return pulumi.get(self, "is_authoritative")

    @property
    @pulumi.getter(name="isDirectory")
    def is_directory(self) -> Optional[bool]:
        return pulumi.get(self, "is_directory")

    @property
    @pulumi.getter(name="isOnPremiseApp")
    def is_on_premise_app(self) -> Optional[bool]:
        return pulumi.get(self, "is_on_premise_app")

    @property
    @pulumi.getter(name="isSchemaCustomizationSupported")
    def is_schema_customization_supported(self) -> Optional[bool]:
        return pulumi.get(self, "is_schema_customization_supported")

    @property
    @pulumi.getter(name="isSchemaDiscoverySupported")
    def is_schema_discovery_supported(self) -> Optional[bool]:
        return pulumi.get(self, "is_schema_discovery_supported")

    @property
    @pulumi.getter(name="isThreeLeggedOauthEnabled")
    def is_three_legged_oauth_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_three_legged_oauth_enabled")

    @property
    @pulumi.getter(name="isTwoLeggedOauthEnabled")
    def is_two_legged_oauth_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_two_legged_oauth_enabled")

    @property
    @pulumi.getter(name="objectClasses")
    def object_classes(self) -> Optional[Sequence['outputs.GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppObjectClassResult']]:
        return pulumi.get(self, "object_classes")

    @property
    @pulumi.getter(name="syncConfigLastModified")
    def sync_config_last_modified(self) -> Optional[str]:
        return pulumi.get(self, "sync_config_last_modified")

    @property
    @pulumi.getter(name="threeLeggedOauthCredentials")
    def three_legged_oauth_credentials(self) -> Optional[Sequence['outputs.GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppThreeLeggedOauthCredentialResult']]:
        return pulumi.get(self, "three_legged_oauth_credentials")

    @property
    @pulumi.getter(name="threeLeggedOauthProviderName")
    def three_legged_oauth_provider_name(self) -> Optional[str]:
        return pulumi.get(self, "three_legged_oauth_provider_name")


@pulumi.output_type
class GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppBundleConfigurationPropertyResult(dict):
    def __init__(__self__, *,
                 confidential: Optional[bool] = None,
                 display_name: Optional[str] = None,
                 help_message: Optional[str] = None,
                 icf_type: Optional[str] = None,
                 name: Optional[str] = None,
                 order: Optional[int] = None,
                 required: Optional[bool] = None,
                 values: Optional[Sequence[str]] = None):
        if confidential is not None:
            pulumi.set(__self__, "confidential", confidential)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if help_message is not None:
            pulumi.set(__self__, "help_message", help_message)
        if icf_type is not None:
            pulumi.set(__self__, "icf_type", icf_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def confidential(self) -> Optional[bool]:
        return pulumi.get(self, "confidential")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="helpMessage")
    def help_message(self) -> Optional[str]:
        return pulumi.get(self, "help_message")

    @property
    @pulumi.getter(name="icfType")
    def icf_type(self) -> Optional[str]:
        return pulumi.get(self, "icf_type")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def order(self) -> Optional[int]:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppBundlePoolConfigurationResult(dict):
    def __init__(__self__, *,
                 max_idle: Optional[int] = None,
                 max_objects: Optional[int] = None,
                 max_wait: Optional[int] = None,
                 min_evictable_idle_time_millis: Optional[int] = None,
                 min_idle: Optional[int] = None):
        if max_idle is not None:
            pulumi.set(__self__, "max_idle", max_idle)
        if max_objects is not None:
            pulumi.set(__self__, "max_objects", max_objects)
        if max_wait is not None:
            pulumi.set(__self__, "max_wait", max_wait)
        if min_evictable_idle_time_millis is not None:
            pulumi.set(__self__, "min_evictable_idle_time_millis", min_evictable_idle_time_millis)
        if min_idle is not None:
            pulumi.set(__self__, "min_idle", min_idle)

    @property
    @pulumi.getter(name="maxIdle")
    def max_idle(self) -> Optional[int]:
        return pulumi.get(self, "max_idle")

    @property
    @pulumi.getter(name="maxObjects")
    def max_objects(self) -> Optional[int]:
        return pulumi.get(self, "max_objects")

    @property
    @pulumi.getter(name="maxWait")
    def max_wait(self) -> Optional[int]:
        return pulumi.get(self, "max_wait")

    @property
    @pulumi.getter(name="minEvictableIdleTimeMillis")
    def min_evictable_idle_time_millis(self) -> Optional[int]:
        return pulumi.get(self, "min_evictable_idle_time_millis")

    @property
    @pulumi.getter(name="minIdle")
    def min_idle(self) -> Optional[int]:
        return pulumi.get(self, "min_idle")


@pulumi.output_type
class GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppConnectorBundleResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None,
                 well_known_id: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if well_known_id is not None:
            pulumi.set(__self__, "well_known_id", well_known_id)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="wellKnownId")
    def well_known_id(self) -> Optional[str]:
        return pulumi.get(self, "well_known_id")


@pulumi.output_type
class GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppFlatFileBundleConfigurationPropertyResult(dict):
    def __init__(__self__, *,
                 confidential: Optional[bool] = None,
                 display_name: Optional[str] = None,
                 help_message: Optional[str] = None,
                 icf_type: Optional[str] = None,
                 name: Optional[str] = None,
                 order: Optional[int] = None,
                 required: Optional[bool] = None,
                 values: Optional[Sequence[str]] = None):
        if confidential is not None:
            pulumi.set(__self__, "confidential", confidential)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if help_message is not None:
            pulumi.set(__self__, "help_message", help_message)
        if icf_type is not None:
            pulumi.set(__self__, "icf_type", icf_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def confidential(self) -> Optional[bool]:
        return pulumi.get(self, "confidential")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="helpMessage")
    def help_message(self) -> Optional[str]:
        return pulumi.get(self, "help_message")

    @property
    @pulumi.getter(name="icfType")
    def icf_type(self) -> Optional[str]:
        return pulumi.get(self, "icf_type")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def order(self) -> Optional[int]:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppFlatFileConnectorBundleResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None,
                 well_known_id: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if well_known_id is not None:
            pulumi.set(__self__, "well_known_id", well_known_id)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="wellKnownId")
    def well_known_id(self) -> Optional[str]:
        return pulumi.get(self, "well_known_id")


@pulumi.output_type
class GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppIdentityBridgeResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppObjectClassResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 is_account_object_class: Optional[bool] = None,
                 ref: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if is_account_object_class is not None:
            pulumi.set(__self__, "is_account_object_class", is_account_object_class)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter(name="isAccountObjectClass")
    def is_account_object_class(self) -> Optional[bool]:
        return pulumi.get(self, "is_account_object_class")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppThreeLeggedOauthCredentialResult(dict):
    def __init__(__self__, *,
                 access_token: Optional[str] = None,
                 access_token_expiry: Optional[str] = None,
                 refresh_token: Optional[str] = None):
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if access_token_expiry is not None:
            pulumi.set(__self__, "access_token_expiry", access_token_expiry)
        if refresh_token is not None:
            pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[str]:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="accessTokenExpiry")
    def access_token_expiry(self) -> Optional[str]:
        return pulumi.get(self, "access_token_expiry")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> Optional[str]:
        return pulumi.get(self, "refresh_token")


@pulumi.output_type
class GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionmulticloudServiceAppAppResult(dict):
    def __init__(__self__, *,
                 multicloud_platform_url: Optional[str] = None,
                 multicloud_service_type: Optional[str] = None):
        if multicloud_platform_url is not None:
            pulumi.set(__self__, "multicloud_platform_url", multicloud_platform_url)
        if multicloud_service_type is not None:
            pulumi.set(__self__, "multicloud_service_type", multicloud_service_type)

    @property
    @pulumi.getter(name="multicloudPlatformUrl")
    def multicloud_platform_url(self) -> Optional[str]:
        return pulumi.get(self, "multicloud_platform_url")

    @property
    @pulumi.getter(name="multicloudServiceType")
    def multicloud_service_type(self) -> Optional[str]:
        return pulumi.get(self, "multicloud_service_type")


@pulumi.output_type
class GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionopcServiceAppResult(dict):
    def __init__(__self__, *,
                 current_federation_mode: Optional[str] = None,
                 current_synchronization_mode: Optional[str] = None,
                 enabling_next_fed_sync_modes: Optional[bool] = None,
                 next_federation_mode: Optional[str] = None,
                 next_synchronization_mode: Optional[str] = None,
                 region: Optional[str] = None,
                 service_instance_identifier: Optional[str] = None):
        if current_federation_mode is not None:
            pulumi.set(__self__, "current_federation_mode", current_federation_mode)
        if current_synchronization_mode is not None:
            pulumi.set(__self__, "current_synchronization_mode", current_synchronization_mode)
        if enabling_next_fed_sync_modes is not None:
            pulumi.set(__self__, "enabling_next_fed_sync_modes", enabling_next_fed_sync_modes)
        if next_federation_mode is not None:
            pulumi.set(__self__, "next_federation_mode", next_federation_mode)
        if next_synchronization_mode is not None:
            pulumi.set(__self__, "next_synchronization_mode", next_synchronization_mode)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_instance_identifier is not None:
            pulumi.set(__self__, "service_instance_identifier", service_instance_identifier)

    @property
    @pulumi.getter(name="currentFederationMode")
    def current_federation_mode(self) -> Optional[str]:
        return pulumi.get(self, "current_federation_mode")

    @property
    @pulumi.getter(name="currentSynchronizationMode")
    def current_synchronization_mode(self) -> Optional[str]:
        return pulumi.get(self, "current_synchronization_mode")

    @property
    @pulumi.getter(name="enablingNextFedSyncModes")
    def enabling_next_fed_sync_modes(self) -> Optional[bool]:
        return pulumi.get(self, "enabling_next_fed_sync_modes")

    @property
    @pulumi.getter(name="nextFederationMode")
    def next_federation_mode(self) -> Optional[str]:
        return pulumi.get(self, "next_federation_mode")

    @property
    @pulumi.getter(name="nextSynchronizationMode")
    def next_synchronization_mode(self) -> Optional[str]:
        return pulumi.get(self, "next_synchronization_mode")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="serviceInstanceIdentifier")
    def service_instance_identifier(self) -> Optional[str]:
        return pulumi.get(self, "service_instance_identifier")


@pulumi.output_type
class GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionradiusAppAppResult(dict):
    def __init__(__self__, *,
                 capture_client_ip: Optional[bool] = None,
                 client_ip: Optional[str] = None,
                 country_code_response_attribute_id: Optional[str] = None,
                 end_user_ip_attribute: Optional[str] = None,
                 group_membership_radius_attribute: Optional[str] = None,
                 group_membership_to_returns: Optional[Sequence['outputs.GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionradiusAppAppGroupMembershipToReturnResult']] = None,
                 group_name_format: Optional[str] = None,
                 include_group_in_response: Optional[bool] = None,
                 password_and_otp_together: Optional[bool] = None,
                 port: Optional[str] = None,
                 radius_vendor_specific_id: Optional[str] = None,
                 response_format: Optional[str] = None,
                 response_format_delimiter: Optional[str] = None,
                 secret_key: Optional[str] = None,
                 type_of_radius_app: Optional[str] = None):
        if capture_client_ip is not None:
            pulumi.set(__self__, "capture_client_ip", capture_client_ip)
        if client_ip is not None:
            pulumi.set(__self__, "client_ip", client_ip)
        if country_code_response_attribute_id is not None:
            pulumi.set(__self__, "country_code_response_attribute_id", country_code_response_attribute_id)
        if end_user_ip_attribute is not None:
            pulumi.set(__self__, "end_user_ip_attribute", end_user_ip_attribute)
        if group_membership_radius_attribute is not None:
            pulumi.set(__self__, "group_membership_radius_attribute", group_membership_radius_attribute)
        if group_membership_to_returns is not None:
            pulumi.set(__self__, "group_membership_to_returns", group_membership_to_returns)
        if group_name_format is not None:
            pulumi.set(__self__, "group_name_format", group_name_format)
        if include_group_in_response is not None:
            pulumi.set(__self__, "include_group_in_response", include_group_in_response)
        if password_and_otp_together is not None:
            pulumi.set(__self__, "password_and_otp_together", password_and_otp_together)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if radius_vendor_specific_id is not None:
            pulumi.set(__self__, "radius_vendor_specific_id", radius_vendor_specific_id)
        if response_format is not None:
            pulumi.set(__self__, "response_format", response_format)
        if response_format_delimiter is not None:
            pulumi.set(__self__, "response_format_delimiter", response_format_delimiter)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)
        if type_of_radius_app is not None:
            pulumi.set(__self__, "type_of_radius_app", type_of_radius_app)

    @property
    @pulumi.getter(name="captureClientIp")
    def capture_client_ip(self) -> Optional[bool]:
        return pulumi.get(self, "capture_client_ip")

    @property
    @pulumi.getter(name="clientIp")
    def client_ip(self) -> Optional[str]:
        return pulumi.get(self, "client_ip")

    @property
    @pulumi.getter(name="countryCodeResponseAttributeId")
    def country_code_response_attribute_id(self) -> Optional[str]:
        return pulumi.get(self, "country_code_response_attribute_id")

    @property
    @pulumi.getter(name="endUserIpAttribute")
    def end_user_ip_attribute(self) -> Optional[str]:
        return pulumi.get(self, "end_user_ip_attribute")

    @property
    @pulumi.getter(name="groupMembershipRadiusAttribute")
    def group_membership_radius_attribute(self) -> Optional[str]:
        return pulumi.get(self, "group_membership_radius_attribute")

    @property
    @pulumi.getter(name="groupMembershipToReturns")
    def group_membership_to_returns(self) -> Optional[Sequence['outputs.GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionradiusAppAppGroupMembershipToReturnResult']]:
        return pulumi.get(self, "group_membership_to_returns")

    @property
    @pulumi.getter(name="groupNameFormat")
    def group_name_format(self) -> Optional[str]:
        return pulumi.get(self, "group_name_format")

    @property
    @pulumi.getter(name="includeGroupInResponse")
    def include_group_in_response(self) -> Optional[bool]:
        return pulumi.get(self, "include_group_in_response")

    @property
    @pulumi.getter(name="passwordAndOtpTogether")
    def password_and_otp_together(self) -> Optional[bool]:
        return pulumi.get(self, "password_and_otp_together")

    @property
    @pulumi.getter
    def port(self) -> Optional[str]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="radiusVendorSpecificId")
    def radius_vendor_specific_id(self) -> Optional[str]:
        return pulumi.get(self, "radius_vendor_specific_id")

    @property
    @pulumi.getter(name="responseFormat")
    def response_format(self) -> Optional[str]:
        return pulumi.get(self, "response_format")

    @property
    @pulumi.getter(name="responseFormatDelimiter")
    def response_format_delimiter(self) -> Optional[str]:
        return pulumi.get(self, "response_format_delimiter")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[str]:
        return pulumi.get(self, "secret_key")

    @property
    @pulumi.getter(name="typeOfRadiusApp")
    def type_of_radius_app(self) -> Optional[str]:
        return pulumi.get(self, "type_of_radius_app")


@pulumi.output_type
class GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionradiusAppAppGroupMembershipToReturnResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionrequestableAppResult(dict):
    def __init__(__self__, *,
                 requestable: Optional[bool] = None):
        if requestable is not None:
            pulumi.set(__self__, "requestable", requestable)

    @property
    @pulumi.getter
    def requestable(self) -> Optional[bool]:
        return pulumi.get(self, "requestable")


@pulumi.output_type
class GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppResult(dict):
    def __init__(__self__, *,
                 assertion_consumer_url: Optional[str] = None,
                 encrypt_assertion: Optional[bool] = None,
                 encryption_algorithm: Optional[str] = None,
                 encryption_certificate: Optional[str] = None,
                 federation_protocol: Optional[str] = None,
                 group_assertion_attributes: Optional[Sequence['outputs.GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppGroupAssertionAttributeResult']] = None,
                 hok_acs_url: Optional[str] = None,
                 hok_required: Optional[bool] = None,
                 include_signing_cert_in_signature: Optional[bool] = None,
                 key_encryption_algorithm: Optional[str] = None,
                 last_notification_sent_time: Optional[str] = None,
                 logout_binding: Optional[str] = None,
                 logout_enabled: Optional[bool] = None,
                 logout_request_url: Optional[str] = None,
                 logout_response_url: Optional[str] = None,
                 metadata: Optional[str] = None,
                 name_id_format: Optional[str] = None,
                 name_id_userstore_attribute: Optional[str] = None,
                 outbound_assertion_attributes: Optional[Sequence['outputs.GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppOutboundAssertionAttributeResult']] = None,
                 partner_provider_id: Optional[str] = None,
                 partner_provider_pattern: Optional[str] = None,
                 sign_response_or_assertion: Optional[str] = None,
                 signature_hash_algorithm: Optional[str] = None,
                 signing_certificate: Optional[str] = None,
                 succinct_id: Optional[str] = None,
                 tenant_provider_id: Optional[str] = None,
                 user_assertion_attributes: Optional[Sequence['outputs.GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppUserAssertionAttributeResult']] = None):
        if assertion_consumer_url is not None:
            pulumi.set(__self__, "assertion_consumer_url", assertion_consumer_url)
        if encrypt_assertion is not None:
            pulumi.set(__self__, "encrypt_assertion", encrypt_assertion)
        if encryption_algorithm is not None:
            pulumi.set(__self__, "encryption_algorithm", encryption_algorithm)
        if encryption_certificate is not None:
            pulumi.set(__self__, "encryption_certificate", encryption_certificate)
        if federation_protocol is not None:
            pulumi.set(__self__, "federation_protocol", federation_protocol)
        if group_assertion_attributes is not None:
            pulumi.set(__self__, "group_assertion_attributes", group_assertion_attributes)
        if hok_acs_url is not None:
            pulumi.set(__self__, "hok_acs_url", hok_acs_url)
        if hok_required is not None:
            pulumi.set(__self__, "hok_required", hok_required)
        if include_signing_cert_in_signature is not None:
            pulumi.set(__self__, "include_signing_cert_in_signature", include_signing_cert_in_signature)
        if key_encryption_algorithm is not None:
            pulumi.set(__self__, "key_encryption_algorithm", key_encryption_algorithm)
        if last_notification_sent_time is not None:
            pulumi.set(__self__, "last_notification_sent_time", last_notification_sent_time)
        if logout_binding is not None:
            pulumi.set(__self__, "logout_binding", logout_binding)
        if logout_enabled is not None:
            pulumi.set(__self__, "logout_enabled", logout_enabled)
        if logout_request_url is not None:
            pulumi.set(__self__, "logout_request_url", logout_request_url)
        if logout_response_url is not None:
            pulumi.set(__self__, "logout_response_url", logout_response_url)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if name_id_format is not None:
            pulumi.set(__self__, "name_id_format", name_id_format)
        if name_id_userstore_attribute is not None:
            pulumi.set(__self__, "name_id_userstore_attribute", name_id_userstore_attribute)
        if outbound_assertion_attributes is not None:
            pulumi.set(__self__, "outbound_assertion_attributes", outbound_assertion_attributes)
        if partner_provider_id is not None:
            pulumi.set(__self__, "partner_provider_id", partner_provider_id)
        if partner_provider_pattern is not None:
            pulumi.set(__self__, "partner_provider_pattern", partner_provider_pattern)
        if sign_response_or_assertion is not None:
            pulumi.set(__self__, "sign_response_or_assertion", sign_response_or_assertion)
        if signature_hash_algorithm is not None:
            pulumi.set(__self__, "signature_hash_algorithm", signature_hash_algorithm)
        if signing_certificate is not None:
            pulumi.set(__self__, "signing_certificate", signing_certificate)
        if succinct_id is not None:
            pulumi.set(__self__, "succinct_id", succinct_id)
        if tenant_provider_id is not None:
            pulumi.set(__self__, "tenant_provider_id", tenant_provider_id)
        if user_assertion_attributes is not None:
            pulumi.set(__self__, "user_assertion_attributes", user_assertion_attributes)

    @property
    @pulumi.getter(name="assertionConsumerUrl")
    def assertion_consumer_url(self) -> Optional[str]:
        return pulumi.get(self, "assertion_consumer_url")

    @property
    @pulumi.getter(name="encryptAssertion")
    def encrypt_assertion(self) -> Optional[bool]:
        return pulumi.get(self, "encrypt_assertion")

    @property
    @pulumi.getter(name="encryptionAlgorithm")
    def encryption_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "encryption_algorithm")

    @property
    @pulumi.getter(name="encryptionCertificate")
    def encryption_certificate(self) -> Optional[str]:
        return pulumi.get(self, "encryption_certificate")

    @property
    @pulumi.getter(name="federationProtocol")
    def federation_protocol(self) -> Optional[str]:
        return pulumi.get(self, "federation_protocol")

    @property
    @pulumi.getter(name="groupAssertionAttributes")
    def group_assertion_attributes(self) -> Optional[Sequence['outputs.GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppGroupAssertionAttributeResult']]:
        return pulumi.get(self, "group_assertion_attributes")

    @property
    @pulumi.getter(name="hokAcsUrl")
    def hok_acs_url(self) -> Optional[str]:
        return pulumi.get(self, "hok_acs_url")

    @property
    @pulumi.getter(name="hokRequired")
    def hok_required(self) -> Optional[bool]:
        return pulumi.get(self, "hok_required")

    @property
    @pulumi.getter(name="includeSigningCertInSignature")
    def include_signing_cert_in_signature(self) -> Optional[bool]:
        return pulumi.get(self, "include_signing_cert_in_signature")

    @property
    @pulumi.getter(name="keyEncryptionAlgorithm")
    def key_encryption_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "key_encryption_algorithm")

    @property
    @pulumi.getter(name="lastNotificationSentTime")
    def last_notification_sent_time(self) -> Optional[str]:
        return pulumi.get(self, "last_notification_sent_time")

    @property
    @pulumi.getter(name="logoutBinding")
    def logout_binding(self) -> Optional[str]:
        return pulumi.get(self, "logout_binding")

    @property
    @pulumi.getter(name="logoutEnabled")
    def logout_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "logout_enabled")

    @property
    @pulumi.getter(name="logoutRequestUrl")
    def logout_request_url(self) -> Optional[str]:
        return pulumi.get(self, "logout_request_url")

    @property
    @pulumi.getter(name="logoutResponseUrl")
    def logout_response_url(self) -> Optional[str]:
        return pulumi.get(self, "logout_response_url")

    @property
    @pulumi.getter
    def metadata(self) -> Optional[str]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="nameIdFormat")
    def name_id_format(self) -> Optional[str]:
        return pulumi.get(self, "name_id_format")

    @property
    @pulumi.getter(name="nameIdUserstoreAttribute")
    def name_id_userstore_attribute(self) -> Optional[str]:
        return pulumi.get(self, "name_id_userstore_attribute")

    @property
    @pulumi.getter(name="outboundAssertionAttributes")
    def outbound_assertion_attributes(self) -> Optional[Sequence['outputs.GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppOutboundAssertionAttributeResult']]:
        return pulumi.get(self, "outbound_assertion_attributes")

    @property
    @pulumi.getter(name="partnerProviderId")
    def partner_provider_id(self) -> Optional[str]:
        return pulumi.get(self, "partner_provider_id")

    @property
    @pulumi.getter(name="partnerProviderPattern")
    def partner_provider_pattern(self) -> Optional[str]:
        return pulumi.get(self, "partner_provider_pattern")

    @property
    @pulumi.getter(name="signResponseOrAssertion")
    def sign_response_or_assertion(self) -> Optional[str]:
        return pulumi.get(self, "sign_response_or_assertion")

    @property
    @pulumi.getter(name="signatureHashAlgorithm")
    def signature_hash_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "signature_hash_algorithm")

    @property
    @pulumi.getter(name="signingCertificate")
    def signing_certificate(self) -> Optional[str]:
        return pulumi.get(self, "signing_certificate")

    @property
    @pulumi.getter(name="succinctId")
    def succinct_id(self) -> Optional[str]:
        return pulumi.get(self, "succinct_id")

    @property
    @pulumi.getter(name="tenantProviderId")
    def tenant_provider_id(self) -> Optional[str]:
        return pulumi.get(self, "tenant_provider_id")

    @property
    @pulumi.getter(name="userAssertionAttributes")
    def user_assertion_attributes(self) -> Optional[Sequence['outputs.GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppUserAssertionAttributeResult']]:
        return pulumi.get(self, "user_assertion_attributes")


@pulumi.output_type
class GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppGroupAssertionAttributeResult(dict):
    def __init__(__self__, *,
                 condition: Optional[str] = None,
                 format: Optional[str] = None,
                 group_name: Optional[str] = None,
                 name: Optional[str] = None):
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[str]:
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppOutboundAssertionAttributeResult(dict):
    def __init__(__self__, *,
                 direction: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def direction(self) -> Optional[str]:
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppUserAssertionAttributeResult(dict):
    def __init__(__self__, *,
                 format: Optional[str] = None,
                 name: Optional[str] = None,
                 user_store_attribute_name: Optional[str] = None):
        if format is not None:
            pulumi.set(__self__, "format", format)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if user_store_attribute_name is not None:
            pulumi.set(__self__, "user_store_attribute_name", user_store_attribute_name)

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="userStoreAttributeName")
    def user_store_attribute_name(self) -> Optional[str]:
        return pulumi.get(self, "user_store_attribute_name")


@pulumi.output_type
class GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionwebTierPolicyAppResult(dict):
    def __init__(__self__, *,
                 resource_ref: Optional[bool] = None,
                 web_tier_policy_az_control: Optional[str] = None,
                 web_tier_policy_json: Optional[str] = None):
        if resource_ref is not None:
            pulumi.set(__self__, "resource_ref", resource_ref)
        if web_tier_policy_az_control is not None:
            pulumi.set(__self__, "web_tier_policy_az_control", web_tier_policy_az_control)
        if web_tier_policy_json is not None:
            pulumi.set(__self__, "web_tier_policy_json", web_tier_policy_json)

    @property
    @pulumi.getter(name="resourceRef")
    def resource_ref(self) -> Optional[bool]:
        return pulumi.get(self, "resource_ref")

    @property
    @pulumi.getter(name="webTierPolicyAzControl")
    def web_tier_policy_az_control(self) -> Optional[str]:
        return pulumi.get(self, "web_tier_policy_az_control")

    @property
    @pulumi.getter(name="webTierPolicyJson")
    def web_tier_policy_json(self) -> Optional[str]:
        return pulumi.get(self, "web_tier_policy_json")


@pulumi.output_type
class GetDomainsAppUserRoleResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 display: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppsAppResult(dict):
    def __init__(__self__, *,
                 access_token_expiry: Optional[int] = None,
                 accounts: Optional[Sequence['outputs.GetDomainsAppsAppAccountResult']] = None,
                 active: Optional[bool] = None,
                 admin_roles: Optional[Sequence['outputs.GetDomainsAppsAppAdminRoleResult']] = None,
                 alias_apps: Optional[Sequence['outputs.GetDomainsAppsAppAliasAppResult']] = None,
                 all_url_schemes_allowed: Optional[bool] = None,
                 allow_access_control: Optional[bool] = None,
                 allow_offline: Optional[bool] = None,
                 allowed_grants: Optional[Sequence[str]] = None,
                 allowed_operations: Optional[Sequence[str]] = None,
                 allowed_scopes: Optional[Sequence['outputs.GetDomainsAppsAppAllowedScopeResult']] = None,
                 allowed_tags: Optional[Sequence['outputs.GetDomainsAppsAppAllowedTagResult']] = None,
                 app_icon: Optional[str] = None,
                 app_signon_policies: Optional[Sequence['outputs.GetDomainsAppsAppAppSignonPolicyResult']] = None,
                 app_thumbnail: Optional[str] = None,
                 apps_network_perimeters: Optional[Sequence['outputs.GetDomainsAppsAppAppsNetworkPerimeterResult']] = None,
                 as_opc_services: Optional[Sequence['outputs.GetDomainsAppsAppAsOpcServiceResult']] = None,
                 attr_rendering_metadatas: Optional[Sequence['outputs.GetDomainsAppsAppAttrRenderingMetadataResult']] = None,
                 attribute_sets: Optional[Sequence[str]] = None,
                 attributes: Optional[str] = None,
                 audience: Optional[str] = None,
                 authorization: Optional[str] = None,
                 based_on_templates: Optional[Sequence['outputs.GetDomainsAppsAppBasedOnTemplateResult']] = None,
                 bypass_consent: Optional[bool] = None,
                 callback_service_url: Optional[str] = None,
                 certificates: Optional[Sequence['outputs.GetDomainsAppsAppCertificateResult']] = None,
                 client_ip_checking: Optional[str] = None,
                 client_secret: Optional[str] = None,
                 client_type: Optional[str] = None,
                 cloud_control_properties: Optional[Sequence['outputs.GetDomainsAppsAppCloudControlPropertyResult']] = None,
                 compartment_ocid: Optional[str] = None,
                 contact_email_address: Optional[str] = None,
                 delegated_service_names: Optional[Sequence[str]] = None,
                 delete_in_progress: Optional[bool] = None,
                 description: Optional[str] = None,
                 disable_kmsi_token_authentication: Optional[bool] = None,
                 display_name: Optional[str] = None,
                 domain_ocid: Optional[str] = None,
                 editable_attributes: Optional[Sequence['outputs.GetDomainsAppsAppEditableAttributeResult']] = None,
                 error_page_url: Optional[str] = None,
                 granted_app_roles: Optional[Sequence['outputs.GetDomainsAppsAppGrantedAppRoleResult']] = None,
                 grants: Optional[Sequence['outputs.GetDomainsAppsAppGrantResult']] = None,
                 hashed_client_secret: Optional[str] = None,
                 home_page_url: Optional[str] = None,
                 icon: Optional[str] = None,
                 id: Optional[str] = None,
                 id_token_enc_algo: Optional[str] = None,
                 idcs_created_bies: Optional[Sequence['outputs.GetDomainsAppsAppIdcsCreatedByResult']] = None,
                 idcs_endpoint: Optional[str] = None,
                 idcs_last_modified_bies: Optional[Sequence['outputs.GetDomainsAppsAppIdcsLastModifiedByResult']] = None,
                 idcs_last_upgraded_in_release: Optional[str] = None,
                 idcs_prevented_operations: Optional[Sequence[str]] = None,
                 identity_providers: Optional[Sequence['outputs.GetDomainsAppsAppIdentityProviderResult']] = None,
                 idp_policies: Optional[Sequence['outputs.GetDomainsAppsAppIdpPolicyResult']] = None,
                 infrastructure: Optional[bool] = None,
                 is_alias_app: Optional[bool] = None,
                 is_database_service: Optional[bool] = None,
                 is_enterprise_app: Optional[bool] = None,
                 is_form_fill: Optional[bool] = None,
                 is_kerberos_realm: Optional[bool] = None,
                 is_login_target: Optional[bool] = None,
                 is_managed_app: Optional[bool] = None,
                 is_mobile_target: Optional[bool] = None,
                 is_multicloud_service_app: Optional[bool] = None,
                 is_oauth_client: Optional[bool] = None,
                 is_oauth_resource: Optional[bool] = None,
                 is_obligation_capable: Optional[bool] = None,
                 is_opc_service: Optional[bool] = None,
                 is_radius_app: Optional[bool] = None,
                 is_saml_service_provider: Optional[bool] = None,
                 is_unmanaged_app: Optional[bool] = None,
                 is_web_tier_policy: Optional[bool] = None,
                 landing_page_url: Optional[str] = None,
                 linking_callback_url: Optional[str] = None,
                 login_mechanism: Optional[str] = None,
                 login_page_url: Optional[str] = None,
                 logout_page_url: Optional[str] = None,
                 logout_uri: Optional[str] = None,
                 metas: Optional[Sequence['outputs.GetDomainsAppsAppMetaResult']] = None,
                 meter_as_opc_service: Optional[bool] = None,
                 migrated: Optional[bool] = None,
                 name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 post_logout_redirect_uris: Optional[Sequence[str]] = None,
                 privacy_policy_url: Optional[str] = None,
                 product_logo_url: Optional[str] = None,
                 product_name: Optional[str] = None,
                 protectable_secondary_audiences: Optional[Sequence['outputs.GetDomainsAppsAppProtectableSecondaryAudienceResult']] = None,
                 radius_policies: Optional[Sequence['outputs.GetDomainsAppsAppRadiusPolicyResult']] = None,
                 ready_to_upgrade: Optional[bool] = None,
                 redirect_uris: Optional[Sequence[str]] = None,
                 refresh_token_expiry: Optional[int] = None,
                 resource_type_schema_version: Optional[str] = None,
                 saml_service_providers: Optional[Sequence['outputs.GetDomainsAppsAppSamlServiceProviderResult']] = None,
                 schemas: Optional[Sequence[str]] = None,
                 scopes: Optional[Sequence['outputs.GetDomainsAppsAppScopeResult']] = None,
                 secondary_audiences: Optional[Sequence[str]] = None,
                 service_params: Optional[Sequence['outputs.GetDomainsAppsAppServiceParamResult']] = None,
                 service_type_urn: Optional[str] = None,
                 service_type_version: Optional[str] = None,
                 show_in_my_apps: Optional[bool] = None,
                 signon_policies: Optional[Sequence['outputs.GetDomainsAppsAppSignonPolicyResult']] = None,
                 tags: Optional[Sequence['outputs.GetDomainsAppsAppTagResult']] = None,
                 tenancy_ocid: Optional[str] = None,
                 terms_of_service_url: Optional[str] = None,
                 terms_of_uses: Optional[Sequence['outputs.GetDomainsAppsAppTermsOfUseResult']] = None,
                 trust_policies: Optional[Sequence['outputs.GetDomainsAppsAppTrustPolicyResult']] = None,
                 trust_scope: Optional[str] = None,
                 urnietfparamsscimschemasoracleidcsextension_oci_tags: Optional[Sequence['outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionOciTagResult']] = None,
                 urnietfparamsscimschemasoracleidcsextensiondbcs_apps: Optional[Sequence['outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensiondbcsAppResult']] = None,
                 urnietfparamsscimschemasoracleidcsextensionenterprise_app_apps: Optional[Sequence['outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppAppResult']] = None,
                 urnietfparamsscimschemasoracleidcsextensionform_fill_app_apps: Optional[Sequence['outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppAppResult']] = None,
                 urnietfparamsscimschemasoracleidcsextensionform_fill_app_template_app_templates: Optional[Sequence['outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppTemplateAppTemplateResult']] = None,
                 urnietfparamsscimschemasoracleidcsextensionkerberos_realm_apps: Optional[Sequence['outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionkerberosRealmAppResult']] = None,
                 urnietfparamsscimschemasoracleidcsextensionmanagedapp_apps: Optional[Sequence['outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppResult']] = None,
                 urnietfparamsscimschemasoracleidcsextensionmulticloud_service_app_apps: Optional[Sequence['outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionmulticloudServiceAppAppResult']] = None,
                 urnietfparamsscimschemasoracleidcsextensionopc_service_apps: Optional[Sequence['outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionopcServiceAppResult']] = None,
                 urnietfparamsscimschemasoracleidcsextensionradius_app_apps: Optional[Sequence['outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionradiusAppAppResult']] = None,
                 urnietfparamsscimschemasoracleidcsextensionrequestable_apps: Optional[Sequence['outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionrequestableAppResult']] = None,
                 urnietfparamsscimschemasoracleidcsextensionsaml_service_provider_apps: Optional[Sequence['outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppResult']] = None,
                 urnietfparamsscimschemasoracleidcsextensionweb_tier_policy_apps: Optional[Sequence['outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionwebTierPolicyAppResult']] = None,
                 user_roles: Optional[Sequence['outputs.GetDomainsAppsAppUserRoleResult']] = None):
        if access_token_expiry is not None:
            pulumi.set(__self__, "access_token_expiry", access_token_expiry)
        if accounts is not None:
            pulumi.set(__self__, "accounts", accounts)
        if active is not None:
            pulumi.set(__self__, "active", active)
        if admin_roles is not None:
            pulumi.set(__self__, "admin_roles", admin_roles)
        if alias_apps is not None:
            pulumi.set(__self__, "alias_apps", alias_apps)
        if all_url_schemes_allowed is not None:
            pulumi.set(__self__, "all_url_schemes_allowed", all_url_schemes_allowed)
        if allow_access_control is not None:
            pulumi.set(__self__, "allow_access_control", allow_access_control)
        if allow_offline is not None:
            pulumi.set(__self__, "allow_offline", allow_offline)
        if allowed_grants is not None:
            pulumi.set(__self__, "allowed_grants", allowed_grants)
        if allowed_operations is not None:
            pulumi.set(__self__, "allowed_operations", allowed_operations)
        if allowed_scopes is not None:
            pulumi.set(__self__, "allowed_scopes", allowed_scopes)
        if allowed_tags is not None:
            pulumi.set(__self__, "allowed_tags", allowed_tags)
        if app_icon is not None:
            pulumi.set(__self__, "app_icon", app_icon)
        if app_signon_policies is not None:
            pulumi.set(__self__, "app_signon_policies", app_signon_policies)
        if app_thumbnail is not None:
            pulumi.set(__self__, "app_thumbnail", app_thumbnail)
        if apps_network_perimeters is not None:
            pulumi.set(__self__, "apps_network_perimeters", apps_network_perimeters)
        if as_opc_services is not None:
            pulumi.set(__self__, "as_opc_services", as_opc_services)
        if attr_rendering_metadatas is not None:
            pulumi.set(__self__, "attr_rendering_metadatas", attr_rendering_metadatas)
        if attribute_sets is not None:
            pulumi.set(__self__, "attribute_sets", attribute_sets)
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)
        if audience is not None:
            pulumi.set(__self__, "audience", audience)
        if authorization is not None:
            pulumi.set(__self__, "authorization", authorization)
        if based_on_templates is not None:
            pulumi.set(__self__, "based_on_templates", based_on_templates)
        if bypass_consent is not None:
            pulumi.set(__self__, "bypass_consent", bypass_consent)
        if callback_service_url is not None:
            pulumi.set(__self__, "callback_service_url", callback_service_url)
        if certificates is not None:
            pulumi.set(__self__, "certificates", certificates)
        if client_ip_checking is not None:
            pulumi.set(__self__, "client_ip_checking", client_ip_checking)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if client_type is not None:
            pulumi.set(__self__, "client_type", client_type)
        if cloud_control_properties is not None:
            pulumi.set(__self__, "cloud_control_properties", cloud_control_properties)
        if compartment_ocid is not None:
            pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        if contact_email_address is not None:
            pulumi.set(__self__, "contact_email_address", contact_email_address)
        if delegated_service_names is not None:
            pulumi.set(__self__, "delegated_service_names", delegated_service_names)
        if delete_in_progress is not None:
            pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if disable_kmsi_token_authentication is not None:
            pulumi.set(__self__, "disable_kmsi_token_authentication", disable_kmsi_token_authentication)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if domain_ocid is not None:
            pulumi.set(__self__, "domain_ocid", domain_ocid)
        if editable_attributes is not None:
            pulumi.set(__self__, "editable_attributes", editable_attributes)
        if error_page_url is not None:
            pulumi.set(__self__, "error_page_url", error_page_url)
        if granted_app_roles is not None:
            pulumi.set(__self__, "granted_app_roles", granted_app_roles)
        if grants is not None:
            pulumi.set(__self__, "grants", grants)
        if hashed_client_secret is not None:
            pulumi.set(__self__, "hashed_client_secret", hashed_client_secret)
        if home_page_url is not None:
            pulumi.set(__self__, "home_page_url", home_page_url)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if id_token_enc_algo is not None:
            pulumi.set(__self__, "id_token_enc_algo", id_token_enc_algo)
        if idcs_created_bies is not None:
            pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        if idcs_endpoint is not None:
            pulumi.set(__self__, "idcs_endpoint", idcs_endpoint)
        if idcs_last_modified_bies is not None:
            pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        if idcs_last_upgraded_in_release is not None:
            pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        if idcs_prevented_operations is not None:
            pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        if identity_providers is not None:
            pulumi.set(__self__, "identity_providers", identity_providers)
        if idp_policies is not None:
            pulumi.set(__self__, "idp_policies", idp_policies)
        if infrastructure is not None:
            pulumi.set(__self__, "infrastructure", infrastructure)
        if is_alias_app is not None:
            pulumi.set(__self__, "is_alias_app", is_alias_app)
        if is_database_service is not None:
            pulumi.set(__self__, "is_database_service", is_database_service)
        if is_enterprise_app is not None:
            pulumi.set(__self__, "is_enterprise_app", is_enterprise_app)
        if is_form_fill is not None:
            pulumi.set(__self__, "is_form_fill", is_form_fill)
        if is_kerberos_realm is not None:
            pulumi.set(__self__, "is_kerberos_realm", is_kerberos_realm)
        if is_login_target is not None:
            pulumi.set(__self__, "is_login_target", is_login_target)
        if is_managed_app is not None:
            pulumi.set(__self__, "is_managed_app", is_managed_app)
        if is_mobile_target is not None:
            pulumi.set(__self__, "is_mobile_target", is_mobile_target)
        if is_multicloud_service_app is not None:
            pulumi.set(__self__, "is_multicloud_service_app", is_multicloud_service_app)
        if is_oauth_client is not None:
            pulumi.set(__self__, "is_oauth_client", is_oauth_client)
        if is_oauth_resource is not None:
            pulumi.set(__self__, "is_oauth_resource", is_oauth_resource)
        if is_obligation_capable is not None:
            pulumi.set(__self__, "is_obligation_capable", is_obligation_capable)
        if is_opc_service is not None:
            pulumi.set(__self__, "is_opc_service", is_opc_service)
        if is_radius_app is not None:
            pulumi.set(__self__, "is_radius_app", is_radius_app)
        if is_saml_service_provider is not None:
            pulumi.set(__self__, "is_saml_service_provider", is_saml_service_provider)
        if is_unmanaged_app is not None:
            pulumi.set(__self__, "is_unmanaged_app", is_unmanaged_app)
        if is_web_tier_policy is not None:
            pulumi.set(__self__, "is_web_tier_policy", is_web_tier_policy)
        if landing_page_url is not None:
            pulumi.set(__self__, "landing_page_url", landing_page_url)
        if linking_callback_url is not None:
            pulumi.set(__self__, "linking_callback_url", linking_callback_url)
        if login_mechanism is not None:
            pulumi.set(__self__, "login_mechanism", login_mechanism)
        if login_page_url is not None:
            pulumi.set(__self__, "login_page_url", login_page_url)
        if logout_page_url is not None:
            pulumi.set(__self__, "logout_page_url", logout_page_url)
        if logout_uri is not None:
            pulumi.set(__self__, "logout_uri", logout_uri)
        if metas is not None:
            pulumi.set(__self__, "metas", metas)
        if meter_as_opc_service is not None:
            pulumi.set(__self__, "meter_as_opc_service", meter_as_opc_service)
        if migrated is not None:
            pulumi.set(__self__, "migrated", migrated)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if post_logout_redirect_uris is not None:
            pulumi.set(__self__, "post_logout_redirect_uris", post_logout_redirect_uris)
        if privacy_policy_url is not None:
            pulumi.set(__self__, "privacy_policy_url", privacy_policy_url)
        if product_logo_url is not None:
            pulumi.set(__self__, "product_logo_url", product_logo_url)
        if product_name is not None:
            pulumi.set(__self__, "product_name", product_name)
        if protectable_secondary_audiences is not None:
            pulumi.set(__self__, "protectable_secondary_audiences", protectable_secondary_audiences)
        if radius_policies is not None:
            pulumi.set(__self__, "radius_policies", radius_policies)
        if ready_to_upgrade is not None:
            pulumi.set(__self__, "ready_to_upgrade", ready_to_upgrade)
        if redirect_uris is not None:
            pulumi.set(__self__, "redirect_uris", redirect_uris)
        if refresh_token_expiry is not None:
            pulumi.set(__self__, "refresh_token_expiry", refresh_token_expiry)
        if resource_type_schema_version is not None:
            pulumi.set(__self__, "resource_type_schema_version", resource_type_schema_version)
        if saml_service_providers is not None:
            pulumi.set(__self__, "saml_service_providers", saml_service_providers)
        if schemas is not None:
            pulumi.set(__self__, "schemas", schemas)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)
        if secondary_audiences is not None:
            pulumi.set(__self__, "secondary_audiences", secondary_audiences)
        if service_params is not None:
            pulumi.set(__self__, "service_params", service_params)
        if service_type_urn is not None:
            pulumi.set(__self__, "service_type_urn", service_type_urn)
        if service_type_version is not None:
            pulumi.set(__self__, "service_type_version", service_type_version)
        if show_in_my_apps is not None:
            pulumi.set(__self__, "show_in_my_apps", show_in_my_apps)
        if signon_policies is not None:
            pulumi.set(__self__, "signon_policies", signon_policies)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tenancy_ocid is not None:
            pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)
        if terms_of_service_url is not None:
            pulumi.set(__self__, "terms_of_service_url", terms_of_service_url)
        if terms_of_uses is not None:
            pulumi.set(__self__, "terms_of_uses", terms_of_uses)
        if trust_policies is not None:
            pulumi.set(__self__, "trust_policies", trust_policies)
        if trust_scope is not None:
            pulumi.set(__self__, "trust_scope", trust_scope)
        if urnietfparamsscimschemasoracleidcsextension_oci_tags is not None:
            pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextension_oci_tags", urnietfparamsscimschemasoracleidcsextension_oci_tags)
        if urnietfparamsscimschemasoracleidcsextensiondbcs_apps is not None:
            pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensiondbcs_apps", urnietfparamsscimschemasoracleidcsextensiondbcs_apps)
        if urnietfparamsscimschemasoracleidcsextensionenterprise_app_apps is not None:
            pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionenterprise_app_apps", urnietfparamsscimschemasoracleidcsextensionenterprise_app_apps)
        if urnietfparamsscimschemasoracleidcsextensionform_fill_app_apps is not None:
            pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionform_fill_app_apps", urnietfparamsscimschemasoracleidcsextensionform_fill_app_apps)
        if urnietfparamsscimschemasoracleidcsextensionform_fill_app_template_app_templates is not None:
            pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionform_fill_app_template_app_templates", urnietfparamsscimschemasoracleidcsextensionform_fill_app_template_app_templates)
        if urnietfparamsscimschemasoracleidcsextensionkerberos_realm_apps is not None:
            pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionkerberos_realm_apps", urnietfparamsscimschemasoracleidcsextensionkerberos_realm_apps)
        if urnietfparamsscimschemasoracleidcsextensionmanagedapp_apps is not None:
            pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionmanagedapp_apps", urnietfparamsscimschemasoracleidcsextensionmanagedapp_apps)
        if urnietfparamsscimschemasoracleidcsextensionmulticloud_service_app_apps is not None:
            pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionmulticloud_service_app_apps", urnietfparamsscimschemasoracleidcsextensionmulticloud_service_app_apps)
        if urnietfparamsscimschemasoracleidcsextensionopc_service_apps is not None:
            pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionopc_service_apps", urnietfparamsscimschemasoracleidcsextensionopc_service_apps)
        if urnietfparamsscimschemasoracleidcsextensionradius_app_apps is not None:
            pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionradius_app_apps", urnietfparamsscimschemasoracleidcsextensionradius_app_apps)
        if urnietfparamsscimschemasoracleidcsextensionrequestable_apps is not None:
            pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionrequestable_apps", urnietfparamsscimschemasoracleidcsextensionrequestable_apps)
        if urnietfparamsscimschemasoracleidcsextensionsaml_service_provider_apps is not None:
            pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionsaml_service_provider_apps", urnietfparamsscimschemasoracleidcsextensionsaml_service_provider_apps)
        if urnietfparamsscimschemasoracleidcsextensionweb_tier_policy_apps is not None:
            pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionweb_tier_policy_apps", urnietfparamsscimschemasoracleidcsextensionweb_tier_policy_apps)
        if user_roles is not None:
            pulumi.set(__self__, "user_roles", user_roles)

    @property
    @pulumi.getter(name="accessTokenExpiry")
    def access_token_expiry(self) -> Optional[int]:
        return pulumi.get(self, "access_token_expiry")

    @property
    @pulumi.getter
    def accounts(self) -> Optional[Sequence['outputs.GetDomainsAppsAppAccountResult']]:
        return pulumi.get(self, "accounts")

    @property
    @pulumi.getter
    def active(self) -> Optional[bool]:
        return pulumi.get(self, "active")

    @property
    @pulumi.getter(name="adminRoles")
    def admin_roles(self) -> Optional[Sequence['outputs.GetDomainsAppsAppAdminRoleResult']]:
        return pulumi.get(self, "admin_roles")

    @property
    @pulumi.getter(name="aliasApps")
    def alias_apps(self) -> Optional[Sequence['outputs.GetDomainsAppsAppAliasAppResult']]:
        return pulumi.get(self, "alias_apps")

    @property
    @pulumi.getter(name="allUrlSchemesAllowed")
    def all_url_schemes_allowed(self) -> Optional[bool]:
        return pulumi.get(self, "all_url_schemes_allowed")

    @property
    @pulumi.getter(name="allowAccessControl")
    def allow_access_control(self) -> Optional[bool]:
        return pulumi.get(self, "allow_access_control")

    @property
    @pulumi.getter(name="allowOffline")
    def allow_offline(self) -> Optional[bool]:
        return pulumi.get(self, "allow_offline")

    @property
    @pulumi.getter(name="allowedGrants")
    def allowed_grants(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowed_grants")

    @property
    @pulumi.getter(name="allowedOperations")
    def allowed_operations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowed_operations")

    @property
    @pulumi.getter(name="allowedScopes")
    def allowed_scopes(self) -> Optional[Sequence['outputs.GetDomainsAppsAppAllowedScopeResult']]:
        return pulumi.get(self, "allowed_scopes")

    @property
    @pulumi.getter(name="allowedTags")
    def allowed_tags(self) -> Optional[Sequence['outputs.GetDomainsAppsAppAllowedTagResult']]:
        return pulumi.get(self, "allowed_tags")

    @property
    @pulumi.getter(name="appIcon")
    def app_icon(self) -> Optional[str]:
        return pulumi.get(self, "app_icon")

    @property
    @pulumi.getter(name="appSignonPolicies")
    def app_signon_policies(self) -> Optional[Sequence['outputs.GetDomainsAppsAppAppSignonPolicyResult']]:
        return pulumi.get(self, "app_signon_policies")

    @property
    @pulumi.getter(name="appThumbnail")
    def app_thumbnail(self) -> Optional[str]:
        return pulumi.get(self, "app_thumbnail")

    @property
    @pulumi.getter(name="appsNetworkPerimeters")
    def apps_network_perimeters(self) -> Optional[Sequence['outputs.GetDomainsAppsAppAppsNetworkPerimeterResult']]:
        return pulumi.get(self, "apps_network_perimeters")

    @property
    @pulumi.getter(name="asOpcServices")
    def as_opc_services(self) -> Optional[Sequence['outputs.GetDomainsAppsAppAsOpcServiceResult']]:
        return pulumi.get(self, "as_opc_services")

    @property
    @pulumi.getter(name="attrRenderingMetadatas")
    def attr_rendering_metadatas(self) -> Optional[Sequence['outputs.GetDomainsAppsAppAttrRenderingMetadataResult']]:
        return pulumi.get(self, "attr_rendering_metadatas")

    @property
    @pulumi.getter(name="attributeSets")
    def attribute_sets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "attribute_sets")

    @property
    @pulumi.getter
    def attributes(self) -> Optional[str]:
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter
    def audience(self) -> Optional[str]:
        return pulumi.get(self, "audience")

    @property
    @pulumi.getter
    def authorization(self) -> Optional[str]:
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="basedOnTemplates")
    def based_on_templates(self) -> Optional[Sequence['outputs.GetDomainsAppsAppBasedOnTemplateResult']]:
        return pulumi.get(self, "based_on_templates")

    @property
    @pulumi.getter(name="bypassConsent")
    def bypass_consent(self) -> Optional[bool]:
        return pulumi.get(self, "bypass_consent")

    @property
    @pulumi.getter(name="callbackServiceUrl")
    def callback_service_url(self) -> Optional[str]:
        return pulumi.get(self, "callback_service_url")

    @property
    @pulumi.getter
    def certificates(self) -> Optional[Sequence['outputs.GetDomainsAppsAppCertificateResult']]:
        return pulumi.get(self, "certificates")

    @property
    @pulumi.getter(name="clientIpChecking")
    def client_ip_checking(self) -> Optional[str]:
        return pulumi.get(self, "client_ip_checking")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[str]:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="clientType")
    def client_type(self) -> Optional[str]:
        return pulumi.get(self, "client_type")

    @property
    @pulumi.getter(name="cloudControlProperties")
    def cloud_control_properties(self) -> Optional[Sequence['outputs.GetDomainsAppsAppCloudControlPropertyResult']]:
        return pulumi.get(self, "cloud_control_properties")

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> Optional[str]:
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="contactEmailAddress")
    def contact_email_address(self) -> Optional[str]:
        return pulumi.get(self, "contact_email_address")

    @property
    @pulumi.getter(name="delegatedServiceNames")
    def delegated_service_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "delegated_service_names")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> Optional[bool]:
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="disableKmsiTokenAuthentication")
    def disable_kmsi_token_authentication(self) -> Optional[bool]:
        return pulumi.get(self, "disable_kmsi_token_authentication")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> Optional[str]:
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter(name="editableAttributes")
    def editable_attributes(self) -> Optional[Sequence['outputs.GetDomainsAppsAppEditableAttributeResult']]:
        return pulumi.get(self, "editable_attributes")

    @property
    @pulumi.getter(name="errorPageUrl")
    def error_page_url(self) -> Optional[str]:
        return pulumi.get(self, "error_page_url")

    @property
    @pulumi.getter(name="grantedAppRoles")
    def granted_app_roles(self) -> Optional[Sequence['outputs.GetDomainsAppsAppGrantedAppRoleResult']]:
        return pulumi.get(self, "granted_app_roles")

    @property
    @pulumi.getter
    def grants(self) -> Optional[Sequence['outputs.GetDomainsAppsAppGrantResult']]:
        return pulumi.get(self, "grants")

    @property
    @pulumi.getter(name="hashedClientSecret")
    def hashed_client_secret(self) -> Optional[str]:
        return pulumi.get(self, "hashed_client_secret")

    @property
    @pulumi.getter(name="homePageUrl")
    def home_page_url(self) -> Optional[str]:
        return pulumi.get(self, "home_page_url")

    @property
    @pulumi.getter
    def icon(self) -> Optional[str]:
        return pulumi.get(self, "icon")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idTokenEncAlgo")
    def id_token_enc_algo(self) -> Optional[str]:
        return pulumi.get(self, "id_token_enc_algo")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Optional[Sequence['outputs.GetDomainsAppsAppIdcsCreatedByResult']]:
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "idcs_endpoint")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Optional[Sequence['outputs.GetDomainsAppsAppIdcsLastModifiedByResult']]:
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> Optional[str]:
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter(name="identityProviders")
    def identity_providers(self) -> Optional[Sequence['outputs.GetDomainsAppsAppIdentityProviderResult']]:
        return pulumi.get(self, "identity_providers")

    @property
    @pulumi.getter(name="idpPolicies")
    def idp_policies(self) -> Optional[Sequence['outputs.GetDomainsAppsAppIdpPolicyResult']]:
        return pulumi.get(self, "idp_policies")

    @property
    @pulumi.getter
    def infrastructure(self) -> Optional[bool]:
        return pulumi.get(self, "infrastructure")

    @property
    @pulumi.getter(name="isAliasApp")
    def is_alias_app(self) -> Optional[bool]:
        return pulumi.get(self, "is_alias_app")

    @property
    @pulumi.getter(name="isDatabaseService")
    def is_database_service(self) -> Optional[bool]:
        return pulumi.get(self, "is_database_service")

    @property
    @pulumi.getter(name="isEnterpriseApp")
    def is_enterprise_app(self) -> Optional[bool]:
        return pulumi.get(self, "is_enterprise_app")

    @property
    @pulumi.getter(name="isFormFill")
    def is_form_fill(self) -> Optional[bool]:
        return pulumi.get(self, "is_form_fill")

    @property
    @pulumi.getter(name="isKerberosRealm")
    def is_kerberos_realm(self) -> Optional[bool]:
        return pulumi.get(self, "is_kerberos_realm")

    @property
    @pulumi.getter(name="isLoginTarget")
    def is_login_target(self) -> Optional[bool]:
        return pulumi.get(self, "is_login_target")

    @property
    @pulumi.getter(name="isManagedApp")
    def is_managed_app(self) -> Optional[bool]:
        return pulumi.get(self, "is_managed_app")

    @property
    @pulumi.getter(name="isMobileTarget")
    def is_mobile_target(self) -> Optional[bool]:
        return pulumi.get(self, "is_mobile_target")

    @property
    @pulumi.getter(name="isMulticloudServiceApp")
    def is_multicloud_service_app(self) -> Optional[bool]:
        return pulumi.get(self, "is_multicloud_service_app")

    @property
    @pulumi.getter(name="isOauthClient")
    def is_oauth_client(self) -> Optional[bool]:
        return pulumi.get(self, "is_oauth_client")

    @property
    @pulumi.getter(name="isOauthResource")
    def is_oauth_resource(self) -> Optional[bool]:
        return pulumi.get(self, "is_oauth_resource")

    @property
    @pulumi.getter(name="isObligationCapable")
    def is_obligation_capable(self) -> Optional[bool]:
        return pulumi.get(self, "is_obligation_capable")

    @property
    @pulumi.getter(name="isOpcService")
    def is_opc_service(self) -> Optional[bool]:
        return pulumi.get(self, "is_opc_service")

    @property
    @pulumi.getter(name="isRadiusApp")
    def is_radius_app(self) -> Optional[bool]:
        return pulumi.get(self, "is_radius_app")

    @property
    @pulumi.getter(name="isSamlServiceProvider")
    def is_saml_service_provider(self) -> Optional[bool]:
        return pulumi.get(self, "is_saml_service_provider")

    @property
    @pulumi.getter(name="isUnmanagedApp")
    def is_unmanaged_app(self) -> Optional[bool]:
        return pulumi.get(self, "is_unmanaged_app")

    @property
    @pulumi.getter(name="isWebTierPolicy")
    def is_web_tier_policy(self) -> Optional[bool]:
        return pulumi.get(self, "is_web_tier_policy")

    @property
    @pulumi.getter(name="landingPageUrl")
    def landing_page_url(self) -> Optional[str]:
        return pulumi.get(self, "landing_page_url")

    @property
    @pulumi.getter(name="linkingCallbackUrl")
    def linking_callback_url(self) -> Optional[str]:
        return pulumi.get(self, "linking_callback_url")

    @property
    @pulumi.getter(name="loginMechanism")
    def login_mechanism(self) -> Optional[str]:
        return pulumi.get(self, "login_mechanism")

    @property
    @pulumi.getter(name="loginPageUrl")
    def login_page_url(self) -> Optional[str]:
        return pulumi.get(self, "login_page_url")

    @property
    @pulumi.getter(name="logoutPageUrl")
    def logout_page_url(self) -> Optional[str]:
        return pulumi.get(self, "logout_page_url")

    @property
    @pulumi.getter(name="logoutUri")
    def logout_uri(self) -> Optional[str]:
        return pulumi.get(self, "logout_uri")

    @property
    @pulumi.getter
    def metas(self) -> Optional[Sequence['outputs.GetDomainsAppsAppMetaResult']]:
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter(name="meterAsOpcService")
    def meter_as_opc_service(self) -> Optional[bool]:
        return pulumi.get(self, "meter_as_opc_service")

    @property
    @pulumi.getter
    def migrated(self) -> Optional[bool]:
        return pulumi.get(self, "migrated")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="postLogoutRedirectUris")
    def post_logout_redirect_uris(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "post_logout_redirect_uris")

    @property
    @pulumi.getter(name="privacyPolicyUrl")
    def privacy_policy_url(self) -> Optional[str]:
        return pulumi.get(self, "privacy_policy_url")

    @property
    @pulumi.getter(name="productLogoUrl")
    def product_logo_url(self) -> Optional[str]:
        return pulumi.get(self, "product_logo_url")

    @property
    @pulumi.getter(name="productName")
    def product_name(self) -> Optional[str]:
        return pulumi.get(self, "product_name")

    @property
    @pulumi.getter(name="protectableSecondaryAudiences")
    def protectable_secondary_audiences(self) -> Optional[Sequence['outputs.GetDomainsAppsAppProtectableSecondaryAudienceResult']]:
        return pulumi.get(self, "protectable_secondary_audiences")

    @property
    @pulumi.getter(name="radiusPolicies")
    def radius_policies(self) -> Optional[Sequence['outputs.GetDomainsAppsAppRadiusPolicyResult']]:
        return pulumi.get(self, "radius_policies")

    @property
    @pulumi.getter(name="readyToUpgrade")
    def ready_to_upgrade(self) -> Optional[bool]:
        return pulumi.get(self, "ready_to_upgrade")

    @property
    @pulumi.getter(name="redirectUris")
    def redirect_uris(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "redirect_uris")

    @property
    @pulumi.getter(name="refreshTokenExpiry")
    def refresh_token_expiry(self) -> Optional[int]:
        return pulumi.get(self, "refresh_token_expiry")

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> Optional[str]:
        return pulumi.get(self, "resource_type_schema_version")

    @property
    @pulumi.getter(name="samlServiceProviders")
    def saml_service_providers(self) -> Optional[Sequence['outputs.GetDomainsAppsAppSamlServiceProviderResult']]:
        return pulumi.get(self, "saml_service_providers")

    @property
    @pulumi.getter
    def schemas(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter
    def scopes(self) -> Optional[Sequence['outputs.GetDomainsAppsAppScopeResult']]:
        return pulumi.get(self, "scopes")

    @property
    @pulumi.getter(name="secondaryAudiences")
    def secondary_audiences(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "secondary_audiences")

    @property
    @pulumi.getter(name="serviceParams")
    def service_params(self) -> Optional[Sequence['outputs.GetDomainsAppsAppServiceParamResult']]:
        return pulumi.get(self, "service_params")

    @property
    @pulumi.getter(name="serviceTypeUrn")
    def service_type_urn(self) -> Optional[str]:
        return pulumi.get(self, "service_type_urn")

    @property
    @pulumi.getter(name="serviceTypeVersion")
    def service_type_version(self) -> Optional[str]:
        return pulumi.get(self, "service_type_version")

    @property
    @pulumi.getter(name="showInMyApps")
    def show_in_my_apps(self) -> Optional[bool]:
        return pulumi.get(self, "show_in_my_apps")

    @property
    @pulumi.getter(name="signonPolicies")
    def signon_policies(self) -> Optional[Sequence['outputs.GetDomainsAppsAppSignonPolicyResult']]:
        return pulumi.get(self, "signon_policies")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.GetDomainsAppsAppTagResult']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> Optional[str]:
        return pulumi.get(self, "tenancy_ocid")

    @property
    @pulumi.getter(name="termsOfServiceUrl")
    def terms_of_service_url(self) -> Optional[str]:
        return pulumi.get(self, "terms_of_service_url")

    @property
    @pulumi.getter(name="termsOfUses")
    def terms_of_uses(self) -> Optional[Sequence['outputs.GetDomainsAppsAppTermsOfUseResult']]:
        return pulumi.get(self, "terms_of_uses")

    @property
    @pulumi.getter(name="trustPolicies")
    def trust_policies(self) -> Optional[Sequence['outputs.GetDomainsAppsAppTrustPolicyResult']]:
        return pulumi.get(self, "trust_policies")

    @property
    @pulumi.getter(name="trustScope")
    def trust_scope(self) -> Optional[str]:
        return pulumi.get(self, "trust_scope")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionOciTags")
    def urnietfparamsscimschemasoracleidcsextension_oci_tags(self) -> Optional[Sequence['outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionOciTagResult']]:
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextension_oci_tags")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensiondbcsApps")
    def urnietfparamsscimschemasoracleidcsextensiondbcs_apps(self) -> Optional[Sequence['outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensiondbcsAppResult']]:
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensiondbcs_apps")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionenterpriseAppApps")
    def urnietfparamsscimschemasoracleidcsextensionenterprise_app_apps(self) -> Optional[Sequence['outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppAppResult']]:
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionenterprise_app_apps")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionformFillAppApps")
    def urnietfparamsscimschemasoracleidcsextensionform_fill_app_apps(self) -> Optional[Sequence['outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppAppResult']]:
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionform_fill_app_apps")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionformFillAppTemplateAppTemplates")
    def urnietfparamsscimschemasoracleidcsextensionform_fill_app_template_app_templates(self) -> Optional[Sequence['outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppTemplateAppTemplateResult']]:
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionform_fill_app_template_app_templates")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionkerberosRealmApps")
    def urnietfparamsscimschemasoracleidcsextensionkerberos_realm_apps(self) -> Optional[Sequence['outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionkerberosRealmAppResult']]:
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionkerberos_realm_apps")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionmanagedappApps")
    def urnietfparamsscimschemasoracleidcsextensionmanagedapp_apps(self) -> Optional[Sequence['outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppResult']]:
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionmanagedapp_apps")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionmulticloudServiceAppApps")
    def urnietfparamsscimschemasoracleidcsextensionmulticloud_service_app_apps(self) -> Optional[Sequence['outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionmulticloudServiceAppAppResult']]:
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionmulticloud_service_app_apps")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionopcServiceApps")
    def urnietfparamsscimschemasoracleidcsextensionopc_service_apps(self) -> Optional[Sequence['outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionopcServiceAppResult']]:
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionopc_service_apps")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionradiusAppApps")
    def urnietfparamsscimschemasoracleidcsextensionradius_app_apps(self) -> Optional[Sequence['outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionradiusAppAppResult']]:
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionradius_app_apps")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionrequestableApps")
    def urnietfparamsscimschemasoracleidcsextensionrequestable_apps(self) -> Optional[Sequence['outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionrequestableAppResult']]:
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionrequestable_apps")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionsamlServiceProviderApps")
    def urnietfparamsscimschemasoracleidcsextensionsaml_service_provider_apps(self) -> Optional[Sequence['outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppResult']]:
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionsaml_service_provider_apps")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionwebTierPolicyApps")
    def urnietfparamsscimschemasoracleidcsextensionweb_tier_policy_apps(self) -> Optional[Sequence['outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionwebTierPolicyAppResult']]:
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionweb_tier_policy_apps")

    @property
    @pulumi.getter(name="userRoles")
    def user_roles(self) -> Optional[Sequence['outputs.GetDomainsAppsAppUserRoleResult']]:
        return pulumi.get(self, "user_roles")


@pulumi.output_type
class GetDomainsAppsAppAccountResult(dict):
    def __init__(__self__, *,
                 active: Optional[bool] = None,
                 name: Optional[str] = None,
                 owner_id: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if active is not None:
            pulumi.set(__self__, "active", active)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def active(self) -> Optional[bool]:
        return pulumi.get(self, "active")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[str]:
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppsAppAdminRoleResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 display: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppsAppAliasAppResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 display: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppsAppAllowedScopeResult(dict):
    def __init__(__self__, *,
                 fqs: Optional[str] = None,
                 id_of_defining_app: Optional[str] = None,
                 read_only: Optional[bool] = None):
        if fqs is not None:
            pulumi.set(__self__, "fqs", fqs)
        if id_of_defining_app is not None:
            pulumi.set(__self__, "id_of_defining_app", id_of_defining_app)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter
    def fqs(self) -> Optional[str]:
        return pulumi.get(self, "fqs")

    @property
    @pulumi.getter(name="idOfDefiningApp")
    def id_of_defining_app(self) -> Optional[str]:
        return pulumi.get(self, "id_of_defining_app")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")


@pulumi.output_type
class GetDomainsAppsAppAllowedTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppsAppAppSignonPolicyResult(dict):
    def __init__(__self__, *,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppsAppAppsNetworkPerimeterResult(dict):
    def __init__(__self__, *,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppsAppAsOpcServiceResult(dict):
    def __init__(__self__, *,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppsAppAttrRenderingMetadataResult(dict):
    def __init__(__self__, *,
                 datatype: Optional[str] = None,
                 helptext: Optional[str] = None,
                 label: Optional[str] = None,
                 max_length: Optional[int] = None,
                 max_size: Optional[int] = None,
                 min_length: Optional[int] = None,
                 min_size: Optional[int] = None,
                 name: Optional[str] = None,
                 order: Optional[int] = None,
                 read_only: Optional[bool] = None,
                 regexp: Optional[str] = None,
                 required: Optional[bool] = None,
                 section: Optional[str] = None,
                 visible: Optional[bool] = None,
                 widget: Optional[str] = None):
        if datatype is not None:
            pulumi.set(__self__, "datatype", datatype)
        if helptext is not None:
            pulumi.set(__self__, "helptext", helptext)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if max_length is not None:
            pulumi.set(__self__, "max_length", max_length)
        if max_size is not None:
            pulumi.set(__self__, "max_size", max_size)
        if min_length is not None:
            pulumi.set(__self__, "min_length", min_length)
        if min_size is not None:
            pulumi.set(__self__, "min_size", min_size)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if regexp is not None:
            pulumi.set(__self__, "regexp", regexp)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if section is not None:
            pulumi.set(__self__, "section", section)
        if visible is not None:
            pulumi.set(__self__, "visible", visible)
        if widget is not None:
            pulumi.set(__self__, "widget", widget)

    @property
    @pulumi.getter
    def datatype(self) -> Optional[str]:
        return pulumi.get(self, "datatype")

    @property
    @pulumi.getter
    def helptext(self) -> Optional[str]:
        return pulumi.get(self, "helptext")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="maxLength")
    def max_length(self) -> Optional[int]:
        return pulumi.get(self, "max_length")

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[int]:
        return pulumi.get(self, "max_size")

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[int]:
        return pulumi.get(self, "min_length")

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> Optional[int]:
        return pulumi.get(self, "min_size")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def order(self) -> Optional[int]:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter
    def regexp(self) -> Optional[str]:
        return pulumi.get(self, "regexp")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def section(self) -> Optional[str]:
        return pulumi.get(self, "section")

    @property
    @pulumi.getter
    def visible(self) -> Optional[bool]:
        return pulumi.get(self, "visible")

    @property
    @pulumi.getter
    def widget(self) -> Optional[str]:
        return pulumi.get(self, "widget")


@pulumi.output_type
class GetDomainsAppsAppBasedOnTemplateResult(dict):
    def __init__(__self__, *,
                 last_modified: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None,
                 well_known_id: Optional[str] = None):
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if well_known_id is not None:
            pulumi.set(__self__, "well_known_id", well_known_id)

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="wellKnownId")
    def well_known_id(self) -> Optional[str]:
        return pulumi.get(self, "well_known_id")


@pulumi.output_type
class GetDomainsAppsAppCertificateResult(dict):
    def __init__(__self__, *,
                 cert_alias: Optional[str] = None,
                 kid: Optional[str] = None,
                 sha1thumbprint: Optional[str] = None,
                 x509base64certificate: Optional[str] = None,
                 x5t: Optional[str] = None):
        if cert_alias is not None:
            pulumi.set(__self__, "cert_alias", cert_alias)
        if kid is not None:
            pulumi.set(__self__, "kid", kid)
        if sha1thumbprint is not None:
            pulumi.set(__self__, "sha1thumbprint", sha1thumbprint)
        if x509base64certificate is not None:
            pulumi.set(__self__, "x509base64certificate", x509base64certificate)
        if x5t is not None:
            pulumi.set(__self__, "x5t", x5t)

    @property
    @pulumi.getter(name="certAlias")
    def cert_alias(self) -> Optional[str]:
        return pulumi.get(self, "cert_alias")

    @property
    @pulumi.getter
    def kid(self) -> Optional[str]:
        return pulumi.get(self, "kid")

    @property
    @pulumi.getter
    def sha1thumbprint(self) -> Optional[str]:
        return pulumi.get(self, "sha1thumbprint")

    @property
    @pulumi.getter
    def x509base64certificate(self) -> Optional[str]:
        return pulumi.get(self, "x509base64certificate")

    @property
    @pulumi.getter
    def x5t(self) -> Optional[str]:
        return pulumi.get(self, "x5t")


@pulumi.output_type
class GetDomainsAppsAppCloudControlPropertyResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetDomainsAppsAppEditableAttributeResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDomainsAppsAppGrantResult(dict):
    def __init__(__self__, *,
                 grant_mechanism: Optional[str] = None,
                 grantee_id: Optional[str] = None,
                 grantee_type: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if grant_mechanism is not None:
            pulumi.set(__self__, "grant_mechanism", grant_mechanism)
        if grantee_id is not None:
            pulumi.set(__self__, "grantee_id", grantee_id)
        if grantee_type is not None:
            pulumi.set(__self__, "grantee_type", grantee_type)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="grantMechanism")
    def grant_mechanism(self) -> Optional[str]:
        return pulumi.get(self, "grant_mechanism")

    @property
    @pulumi.getter(name="granteeId")
    def grantee_id(self) -> Optional[str]:
        return pulumi.get(self, "grantee_id")

    @property
    @pulumi.getter(name="granteeType")
    def grantee_type(self) -> Optional[str]:
        return pulumi.get(self, "grantee_type")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppsAppGrantedAppRoleResult(dict):
    def __init__(__self__, *,
                 admin_role: Optional[bool] = None,
                 app_id: Optional[str] = None,
                 app_name: Optional[str] = None,
                 display: Optional[str] = None,
                 legacy_group_name: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if admin_role is not None:
            pulumi.set(__self__, "admin_role", admin_role)
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if app_name is not None:
            pulumi.set(__self__, "app_name", app_name)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if legacy_group_name is not None:
            pulumi.set(__self__, "legacy_group_name", legacy_group_name)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="adminRole")
    def admin_role(self) -> Optional[bool]:
        return pulumi.get(self, "admin_role")

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[str]:
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="appName")
    def app_name(self) -> Optional[str]:
        return pulumi.get(self, "app_name")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter(name="legacyGroupName")
    def legacy_group_name(self) -> Optional[str]:
        return pulumi.get(self, "legacy_group_name")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppsAppIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppsAppIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppsAppIdentityProviderResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppsAppIdpPolicyResult(dict):
    def __init__(__self__, *,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppsAppMetaResult(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsAppsAppProtectableSecondaryAudienceResult(dict):
    def __init__(__self__, *,
                 read_only: Optional[bool] = None,
                 value: Optional[str] = None):
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppsAppRadiusPolicyResult(dict):
    def __init__(__self__, *,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppsAppSamlServiceProviderResult(dict):
    def __init__(__self__, *,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppsAppScopeResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 fqs: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 requires_consent: Optional[bool] = None,
                 value: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if fqs is not None:
            pulumi.set(__self__, "fqs", fqs)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if requires_consent is not None:
            pulumi.set(__self__, "requires_consent", requires_consent)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def fqs(self) -> Optional[str]:
        return pulumi.get(self, "fqs")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="requiresConsent")
    def requires_consent(self) -> Optional[bool]:
        return pulumi.get(self, "requires_consent")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppsAppServiceParamResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppsAppSignonPolicyResult(dict):
    def __init__(__self__, *,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppsAppTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppsAppTermsOfUseResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppsAppTrustPolicyResult(dict):
    def __init__(__self__, *,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionOciTagResult(dict):
    def __init__(__self__, *,
                 defined_tags: Optional[Sequence['outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTagResult']] = None,
                 freeform_tags: Optional[Sequence['outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTagResult']] = None,
                 tag_slug: Optional[str] = None):
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if tag_slug is not None:
            pulumi.set(__self__, "tag_slug", tag_slug)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Sequence['outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTagResult']]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Sequence['outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTagResult']]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="tagSlug")
    def tag_slug(self) -> Optional[str]:
        return pulumi.get(self, "tag_slug")


@pulumi.output_type
class GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 namespace: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensiondbcsAppResult(dict):
    def __init__(__self__, *,
                 domain_apps: Optional[Sequence['outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensiondbcsAppDomainAppResult']] = None,
                 domain_name: Optional[str] = None):
        if domain_apps is not None:
            pulumi.set(__self__, "domain_apps", domain_apps)
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)

    @property
    @pulumi.getter(name="domainApps")
    def domain_apps(self) -> Optional[Sequence['outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensiondbcsAppDomainAppResult']]:
        return pulumi.get(self, "domain_apps")

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[str]:
        return pulumi.get(self, "domain_name")


@pulumi.output_type
class GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensiondbcsAppDomainAppResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppAppResult(dict):
    def __init__(__self__, *,
                 allow_authz_decision_ttl: Optional[int] = None,
                 allow_authz_policies: Optional[Sequence['outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppAppAllowAuthzPolicyResult']] = None,
                 app_resources: Optional[Sequence['outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppAppAppResourceResult']] = None,
                 deny_authz_decision_ttl: Optional[int] = None,
                 deny_authz_policies: Optional[Sequence['outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppAppDenyAuthzPolicyResult']] = None):
        if allow_authz_decision_ttl is not None:
            pulumi.set(__self__, "allow_authz_decision_ttl", allow_authz_decision_ttl)
        if allow_authz_policies is not None:
            pulumi.set(__self__, "allow_authz_policies", allow_authz_policies)
        if app_resources is not None:
            pulumi.set(__self__, "app_resources", app_resources)
        if deny_authz_decision_ttl is not None:
            pulumi.set(__self__, "deny_authz_decision_ttl", deny_authz_decision_ttl)
        if deny_authz_policies is not None:
            pulumi.set(__self__, "deny_authz_policies", deny_authz_policies)

    @property
    @pulumi.getter(name="allowAuthzDecisionTtl")
    def allow_authz_decision_ttl(self) -> Optional[int]:
        return pulumi.get(self, "allow_authz_decision_ttl")

    @property
    @pulumi.getter(name="allowAuthzPolicies")
    def allow_authz_policies(self) -> Optional[Sequence['outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppAppAllowAuthzPolicyResult']]:
        return pulumi.get(self, "allow_authz_policies")

    @property
    @pulumi.getter(name="appResources")
    def app_resources(self) -> Optional[Sequence['outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppAppAppResourceResult']]:
        return pulumi.get(self, "app_resources")

    @property
    @pulumi.getter(name="denyAuthzDecisionTtl")
    def deny_authz_decision_ttl(self) -> Optional[int]:
        return pulumi.get(self, "deny_authz_decision_ttl")

    @property
    @pulumi.getter(name="denyAuthzPolicies")
    def deny_authz_policies(self) -> Optional[Sequence['outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppAppDenyAuthzPolicyResult']]:
        return pulumi.get(self, "deny_authz_policies")


@pulumi.output_type
class GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppAppAllowAuthzPolicyResult(dict):
    def __init__(__self__, *,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppAppAppResourceResult(dict):
    def __init__(__self__, *,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppAppDenyAuthzPolicyResult(dict):
    def __init__(__self__, *,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppAppResult(dict):
    def __init__(__self__, *,
                 configuration: Optional[str] = None,
                 form_cred_method: Optional[str] = None,
                 form_credential_sharing_group_id: Optional[str] = None,
                 form_fill_url_matches: Optional[Sequence['outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppAppFormFillUrlMatchResult']] = None,
                 form_type: Optional[str] = None,
                 reveal_password_on_form: Optional[bool] = None,
                 sync_from_template: Optional[bool] = None,
                 user_name_form_expression: Optional[str] = None,
                 user_name_form_template: Optional[str] = None):
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)
        if form_cred_method is not None:
            pulumi.set(__self__, "form_cred_method", form_cred_method)
        if form_credential_sharing_group_id is not None:
            pulumi.set(__self__, "form_credential_sharing_group_id", form_credential_sharing_group_id)
        if form_fill_url_matches is not None:
            pulumi.set(__self__, "form_fill_url_matches", form_fill_url_matches)
        if form_type is not None:
            pulumi.set(__self__, "form_type", form_type)
        if reveal_password_on_form is not None:
            pulumi.set(__self__, "reveal_password_on_form", reveal_password_on_form)
        if sync_from_template is not None:
            pulumi.set(__self__, "sync_from_template", sync_from_template)
        if user_name_form_expression is not None:
            pulumi.set(__self__, "user_name_form_expression", user_name_form_expression)
        if user_name_form_template is not None:
            pulumi.set(__self__, "user_name_form_template", user_name_form_template)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[str]:
        return pulumi.get(self, "configuration")

    @property
    @pulumi.getter(name="formCredMethod")
    def form_cred_method(self) -> Optional[str]:
        return pulumi.get(self, "form_cred_method")

    @property
    @pulumi.getter(name="formCredentialSharingGroupId")
    def form_credential_sharing_group_id(self) -> Optional[str]:
        return pulumi.get(self, "form_credential_sharing_group_id")

    @property
    @pulumi.getter(name="formFillUrlMatches")
    def form_fill_url_matches(self) -> Optional[Sequence['outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppAppFormFillUrlMatchResult']]:
        return pulumi.get(self, "form_fill_url_matches")

    @property
    @pulumi.getter(name="formType")
    def form_type(self) -> Optional[str]:
        return pulumi.get(self, "form_type")

    @property
    @pulumi.getter(name="revealPasswordOnForm")
    def reveal_password_on_form(self) -> Optional[bool]:
        return pulumi.get(self, "reveal_password_on_form")

    @property
    @pulumi.getter(name="syncFromTemplate")
    def sync_from_template(self) -> Optional[bool]:
        return pulumi.get(self, "sync_from_template")

    @property
    @pulumi.getter(name="userNameFormExpression")
    def user_name_form_expression(self) -> Optional[str]:
        return pulumi.get(self, "user_name_form_expression")

    @property
    @pulumi.getter(name="userNameFormTemplate")
    def user_name_form_template(self) -> Optional[str]:
        return pulumi.get(self, "user_name_form_template")


@pulumi.output_type
class GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppAppFormFillUrlMatchResult(dict):
    def __init__(__self__, *,
                 form_url: Optional[str] = None,
                 form_url_match_type: Optional[str] = None):
        if form_url is not None:
            pulumi.set(__self__, "form_url", form_url)
        if form_url_match_type is not None:
            pulumi.set(__self__, "form_url_match_type", form_url_match_type)

    @property
    @pulumi.getter(name="formUrl")
    def form_url(self) -> Optional[str]:
        return pulumi.get(self, "form_url")

    @property
    @pulumi.getter(name="formUrlMatchType")
    def form_url_match_type(self) -> Optional[str]:
        return pulumi.get(self, "form_url_match_type")


@pulumi.output_type
class GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppTemplateAppTemplateResult(dict):
    def __init__(__self__, *,
                 configuration: Optional[str] = None,
                 form_cred_method: Optional[str] = None,
                 form_credential_sharing_group_id: Optional[str] = None,
                 form_fill_url_matches: Optional[Sequence['outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppTemplateAppTemplateFormFillUrlMatchResult']] = None,
                 form_type: Optional[str] = None,
                 reveal_password_on_form: Optional[bool] = None,
                 sync_from_template: Optional[bool] = None,
                 user_name_form_expression: Optional[str] = None,
                 user_name_form_template: Optional[str] = None):
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)
        if form_cred_method is not None:
            pulumi.set(__self__, "form_cred_method", form_cred_method)
        if form_credential_sharing_group_id is not None:
            pulumi.set(__self__, "form_credential_sharing_group_id", form_credential_sharing_group_id)
        if form_fill_url_matches is not None:
            pulumi.set(__self__, "form_fill_url_matches", form_fill_url_matches)
        if form_type is not None:
            pulumi.set(__self__, "form_type", form_type)
        if reveal_password_on_form is not None:
            pulumi.set(__self__, "reveal_password_on_form", reveal_password_on_form)
        if sync_from_template is not None:
            pulumi.set(__self__, "sync_from_template", sync_from_template)
        if user_name_form_expression is not None:
            pulumi.set(__self__, "user_name_form_expression", user_name_form_expression)
        if user_name_form_template is not None:
            pulumi.set(__self__, "user_name_form_template", user_name_form_template)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[str]:
        return pulumi.get(self, "configuration")

    @property
    @pulumi.getter(name="formCredMethod")
    def form_cred_method(self) -> Optional[str]:
        return pulumi.get(self, "form_cred_method")

    @property
    @pulumi.getter(name="formCredentialSharingGroupId")
    def form_credential_sharing_group_id(self) -> Optional[str]:
        return pulumi.get(self, "form_credential_sharing_group_id")

    @property
    @pulumi.getter(name="formFillUrlMatches")
    def form_fill_url_matches(self) -> Optional[Sequence['outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppTemplateAppTemplateFormFillUrlMatchResult']]:
        return pulumi.get(self, "form_fill_url_matches")

    @property
    @pulumi.getter(name="formType")
    def form_type(self) -> Optional[str]:
        return pulumi.get(self, "form_type")

    @property
    @pulumi.getter(name="revealPasswordOnForm")
    def reveal_password_on_form(self) -> Optional[bool]:
        return pulumi.get(self, "reveal_password_on_form")

    @property
    @pulumi.getter(name="syncFromTemplate")
    def sync_from_template(self) -> Optional[bool]:
        return pulumi.get(self, "sync_from_template")

    @property
    @pulumi.getter(name="userNameFormExpression")
    def user_name_form_expression(self) -> Optional[str]:
        return pulumi.get(self, "user_name_form_expression")

    @property
    @pulumi.getter(name="userNameFormTemplate")
    def user_name_form_template(self) -> Optional[str]:
        return pulumi.get(self, "user_name_form_template")


@pulumi.output_type
class GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppTemplateAppTemplateFormFillUrlMatchResult(dict):
    def __init__(__self__, *,
                 form_url: Optional[str] = None,
                 form_url_match_type: Optional[str] = None):
        if form_url is not None:
            pulumi.set(__self__, "form_url", form_url)
        if form_url_match_type is not None:
            pulumi.set(__self__, "form_url_match_type", form_url_match_type)

    @property
    @pulumi.getter(name="formUrl")
    def form_url(self) -> Optional[str]:
        return pulumi.get(self, "form_url")

    @property
    @pulumi.getter(name="formUrlMatchType")
    def form_url_match_type(self) -> Optional[str]:
        return pulumi.get(self, "form_url_match_type")


@pulumi.output_type
class GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionkerberosRealmAppResult(dict):
    def __init__(__self__, *,
                 default_encryption_salt_type: Optional[str] = None,
                 master_key: Optional[str] = None,
                 max_renewable_age: Optional[int] = None,
                 max_ticket_life: Optional[int] = None,
                 realm_name: Optional[str] = None,
                 supported_encryption_salt_types: Optional[Sequence[str]] = None,
                 ticket_flags: Optional[int] = None):
        if default_encryption_salt_type is not None:
            pulumi.set(__self__, "default_encryption_salt_type", default_encryption_salt_type)
        if master_key is not None:
            pulumi.set(__self__, "master_key", master_key)
        if max_renewable_age is not None:
            pulumi.set(__self__, "max_renewable_age", max_renewable_age)
        if max_ticket_life is not None:
            pulumi.set(__self__, "max_ticket_life", max_ticket_life)
        if realm_name is not None:
            pulumi.set(__self__, "realm_name", realm_name)
        if supported_encryption_salt_types is not None:
            pulumi.set(__self__, "supported_encryption_salt_types", supported_encryption_salt_types)
        if ticket_flags is not None:
            pulumi.set(__self__, "ticket_flags", ticket_flags)

    @property
    @pulumi.getter(name="defaultEncryptionSaltType")
    def default_encryption_salt_type(self) -> Optional[str]:
        return pulumi.get(self, "default_encryption_salt_type")

    @property
    @pulumi.getter(name="masterKey")
    def master_key(self) -> Optional[str]:
        return pulumi.get(self, "master_key")

    @property
    @pulumi.getter(name="maxRenewableAge")
    def max_renewable_age(self) -> Optional[int]:
        return pulumi.get(self, "max_renewable_age")

    @property
    @pulumi.getter(name="maxTicketLife")
    def max_ticket_life(self) -> Optional[int]:
        return pulumi.get(self, "max_ticket_life")

    @property
    @pulumi.getter(name="realmName")
    def realm_name(self) -> Optional[str]:
        return pulumi.get(self, "realm_name")

    @property
    @pulumi.getter(name="supportedEncryptionSaltTypes")
    def supported_encryption_salt_types(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "supported_encryption_salt_types")

    @property
    @pulumi.getter(name="ticketFlags")
    def ticket_flags(self) -> Optional[int]:
        return pulumi.get(self, "ticket_flags")


@pulumi.output_type
class GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppResult(dict):
    def __init__(__self__, *,
                 account_form_visible: Optional[bool] = None,
                 admin_consent_granted: Optional[bool] = None,
                 bundle_configuration_properties: Optional[Sequence['outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppBundleConfigurationPropertyResult']] = None,
                 bundle_pool_configurations: Optional[Sequence['outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppBundlePoolConfigurationResult']] = None,
                 can_be_authoritative: Optional[bool] = None,
                 connected: Optional[bool] = None,
                 connector_bundles: Optional[Sequence['outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppConnectorBundleResult']] = None,
                 enable_auth_sync_new_user_notification: Optional[bool] = None,
                 enable_sync: Optional[bool] = None,
                 enable_sync_summary_report_notification: Optional[bool] = None,
                 flat_file_bundle_configuration_properties: Optional[Sequence['outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppFlatFileBundleConfigurationPropertyResult']] = None,
                 flat_file_connector_bundles: Optional[Sequence['outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppFlatFileConnectorBundleResult']] = None,
                 identity_bridges: Optional[Sequence['outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppIdentityBridgeResult']] = None,
                 is_authoritative: Optional[bool] = None,
                 is_directory: Optional[bool] = None,
                 is_on_premise_app: Optional[bool] = None,
                 is_schema_customization_supported: Optional[bool] = None,
                 is_schema_discovery_supported: Optional[bool] = None,
                 is_three_legged_oauth_enabled: Optional[bool] = None,
                 is_two_legged_oauth_enabled: Optional[bool] = None,
                 object_classes: Optional[Sequence['outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppObjectClassResult']] = None,
                 sync_config_last_modified: Optional[str] = None,
                 three_legged_oauth_credentials: Optional[Sequence['outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppThreeLeggedOauthCredentialResult']] = None,
                 three_legged_oauth_provider_name: Optional[str] = None):
        if account_form_visible is not None:
            pulumi.set(__self__, "account_form_visible", account_form_visible)
        if admin_consent_granted is not None:
            pulumi.set(__self__, "admin_consent_granted", admin_consent_granted)
        if bundle_configuration_properties is not None:
            pulumi.set(__self__, "bundle_configuration_properties", bundle_configuration_properties)
        if bundle_pool_configurations is not None:
            pulumi.set(__self__, "bundle_pool_configurations", bundle_pool_configurations)
        if can_be_authoritative is not None:
            pulumi.set(__self__, "can_be_authoritative", can_be_authoritative)
        if connected is not None:
            pulumi.set(__self__, "connected", connected)
        if connector_bundles is not None:
            pulumi.set(__self__, "connector_bundles", connector_bundles)
        if enable_auth_sync_new_user_notification is not None:
            pulumi.set(__self__, "enable_auth_sync_new_user_notification", enable_auth_sync_new_user_notification)
        if enable_sync is not None:
            pulumi.set(__self__, "enable_sync", enable_sync)
        if enable_sync_summary_report_notification is not None:
            pulumi.set(__self__, "enable_sync_summary_report_notification", enable_sync_summary_report_notification)
        if flat_file_bundle_configuration_properties is not None:
            pulumi.set(__self__, "flat_file_bundle_configuration_properties", flat_file_bundle_configuration_properties)
        if flat_file_connector_bundles is not None:
            pulumi.set(__self__, "flat_file_connector_bundles", flat_file_connector_bundles)
        if identity_bridges is not None:
            pulumi.set(__self__, "identity_bridges", identity_bridges)
        if is_authoritative is not None:
            pulumi.set(__self__, "is_authoritative", is_authoritative)
        if is_directory is not None:
            pulumi.set(__self__, "is_directory", is_directory)
        if is_on_premise_app is not None:
            pulumi.set(__self__, "is_on_premise_app", is_on_premise_app)
        if is_schema_customization_supported is not None:
            pulumi.set(__self__, "is_schema_customization_supported", is_schema_customization_supported)
        if is_schema_discovery_supported is not None:
            pulumi.set(__self__, "is_schema_discovery_supported", is_schema_discovery_supported)
        if is_three_legged_oauth_enabled is not None:
            pulumi.set(__self__, "is_three_legged_oauth_enabled", is_three_legged_oauth_enabled)
        if is_two_legged_oauth_enabled is not None:
            pulumi.set(__self__, "is_two_legged_oauth_enabled", is_two_legged_oauth_enabled)
        if object_classes is not None:
            pulumi.set(__self__, "object_classes", object_classes)
        if sync_config_last_modified is not None:
            pulumi.set(__self__, "sync_config_last_modified", sync_config_last_modified)
        if three_legged_oauth_credentials is not None:
            pulumi.set(__self__, "three_legged_oauth_credentials", three_legged_oauth_credentials)
        if three_legged_oauth_provider_name is not None:
            pulumi.set(__self__, "three_legged_oauth_provider_name", three_legged_oauth_provider_name)

    @property
    @pulumi.getter(name="accountFormVisible")
    def account_form_visible(self) -> Optional[bool]:
        return pulumi.get(self, "account_form_visible")

    @property
    @pulumi.getter(name="adminConsentGranted")
    def admin_consent_granted(self) -> Optional[bool]:
        return pulumi.get(self, "admin_consent_granted")

    @property
    @pulumi.getter(name="bundleConfigurationProperties")
    def bundle_configuration_properties(self) -> Optional[Sequence['outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppBundleConfigurationPropertyResult']]:
        return pulumi.get(self, "bundle_configuration_properties")

    @property
    @pulumi.getter(name="bundlePoolConfigurations")
    def bundle_pool_configurations(self) -> Optional[Sequence['outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppBundlePoolConfigurationResult']]:
        return pulumi.get(self, "bundle_pool_configurations")

    @property
    @pulumi.getter(name="canBeAuthoritative")
    def can_be_authoritative(self) -> Optional[bool]:
        return pulumi.get(self, "can_be_authoritative")

    @property
    @pulumi.getter
    def connected(self) -> Optional[bool]:
        return pulumi.get(self, "connected")

    @property
    @pulumi.getter(name="connectorBundles")
    def connector_bundles(self) -> Optional[Sequence['outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppConnectorBundleResult']]:
        return pulumi.get(self, "connector_bundles")

    @property
    @pulumi.getter(name="enableAuthSyncNewUserNotification")
    def enable_auth_sync_new_user_notification(self) -> Optional[bool]:
        return pulumi.get(self, "enable_auth_sync_new_user_notification")

    @property
    @pulumi.getter(name="enableSync")
    def enable_sync(self) -> Optional[bool]:
        return pulumi.get(self, "enable_sync")

    @property
    @pulumi.getter(name="enableSyncSummaryReportNotification")
    def enable_sync_summary_report_notification(self) -> Optional[bool]:
        return pulumi.get(self, "enable_sync_summary_report_notification")

    @property
    @pulumi.getter(name="flatFileBundleConfigurationProperties")
    def flat_file_bundle_configuration_properties(self) -> Optional[Sequence['outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppFlatFileBundleConfigurationPropertyResult']]:
        return pulumi.get(self, "flat_file_bundle_configuration_properties")

    @property
    @pulumi.getter(name="flatFileConnectorBundles")
    def flat_file_connector_bundles(self) -> Optional[Sequence['outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppFlatFileConnectorBundleResult']]:
        return pulumi.get(self, "flat_file_connector_bundles")

    @property
    @pulumi.getter(name="identityBridges")
    def identity_bridges(self) -> Optional[Sequence['outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppIdentityBridgeResult']]:
        return pulumi.get(self, "identity_bridges")

    @property
    @pulumi.getter(name="isAuthoritative")
    def is_authoritative(self) -> Optional[bool]:
        return pulumi.get(self, "is_authoritative")

    @property
    @pulumi.getter(name="isDirectory")
    def is_directory(self) -> Optional[bool]:
        return pulumi.get(self, "is_directory")

    @property
    @pulumi.getter(name="isOnPremiseApp")
    def is_on_premise_app(self) -> Optional[bool]:
        return pulumi.get(self, "is_on_premise_app")

    @property
    @pulumi.getter(name="isSchemaCustomizationSupported")
    def is_schema_customization_supported(self) -> Optional[bool]:
        return pulumi.get(self, "is_schema_customization_supported")

    @property
    @pulumi.getter(name="isSchemaDiscoverySupported")
    def is_schema_discovery_supported(self) -> Optional[bool]:
        return pulumi.get(self, "is_schema_discovery_supported")

    @property
    @pulumi.getter(name="isThreeLeggedOauthEnabled")
    def is_three_legged_oauth_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_three_legged_oauth_enabled")

    @property
    @pulumi.getter(name="isTwoLeggedOauthEnabled")
    def is_two_legged_oauth_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_two_legged_oauth_enabled")

    @property
    @pulumi.getter(name="objectClasses")
    def object_classes(self) -> Optional[Sequence['outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppObjectClassResult']]:
        return pulumi.get(self, "object_classes")

    @property
    @pulumi.getter(name="syncConfigLastModified")
    def sync_config_last_modified(self) -> Optional[str]:
        return pulumi.get(self, "sync_config_last_modified")

    @property
    @pulumi.getter(name="threeLeggedOauthCredentials")
    def three_legged_oauth_credentials(self) -> Optional[Sequence['outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppThreeLeggedOauthCredentialResult']]:
        return pulumi.get(self, "three_legged_oauth_credentials")

    @property
    @pulumi.getter(name="threeLeggedOauthProviderName")
    def three_legged_oauth_provider_name(self) -> Optional[str]:
        return pulumi.get(self, "three_legged_oauth_provider_name")


@pulumi.output_type
class GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppBundleConfigurationPropertyResult(dict):
    def __init__(__self__, *,
                 confidential: Optional[bool] = None,
                 display_name: Optional[str] = None,
                 help_message: Optional[str] = None,
                 icf_type: Optional[str] = None,
                 name: Optional[str] = None,
                 order: Optional[int] = None,
                 required: Optional[bool] = None,
                 values: Optional[Sequence[str]] = None):
        if confidential is not None:
            pulumi.set(__self__, "confidential", confidential)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if help_message is not None:
            pulumi.set(__self__, "help_message", help_message)
        if icf_type is not None:
            pulumi.set(__self__, "icf_type", icf_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def confidential(self) -> Optional[bool]:
        return pulumi.get(self, "confidential")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="helpMessage")
    def help_message(self) -> Optional[str]:
        return pulumi.get(self, "help_message")

    @property
    @pulumi.getter(name="icfType")
    def icf_type(self) -> Optional[str]:
        return pulumi.get(self, "icf_type")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def order(self) -> Optional[int]:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppBundlePoolConfigurationResult(dict):
    def __init__(__self__, *,
                 max_idle: Optional[int] = None,
                 max_objects: Optional[int] = None,
                 max_wait: Optional[int] = None,
                 min_evictable_idle_time_millis: Optional[int] = None,
                 min_idle: Optional[int] = None):
        if max_idle is not None:
            pulumi.set(__self__, "max_idle", max_idle)
        if max_objects is not None:
            pulumi.set(__self__, "max_objects", max_objects)
        if max_wait is not None:
            pulumi.set(__self__, "max_wait", max_wait)
        if min_evictable_idle_time_millis is not None:
            pulumi.set(__self__, "min_evictable_idle_time_millis", min_evictable_idle_time_millis)
        if min_idle is not None:
            pulumi.set(__self__, "min_idle", min_idle)

    @property
    @pulumi.getter(name="maxIdle")
    def max_idle(self) -> Optional[int]:
        return pulumi.get(self, "max_idle")

    @property
    @pulumi.getter(name="maxObjects")
    def max_objects(self) -> Optional[int]:
        return pulumi.get(self, "max_objects")

    @property
    @pulumi.getter(name="maxWait")
    def max_wait(self) -> Optional[int]:
        return pulumi.get(self, "max_wait")

    @property
    @pulumi.getter(name="minEvictableIdleTimeMillis")
    def min_evictable_idle_time_millis(self) -> Optional[int]:
        return pulumi.get(self, "min_evictable_idle_time_millis")

    @property
    @pulumi.getter(name="minIdle")
    def min_idle(self) -> Optional[int]:
        return pulumi.get(self, "min_idle")


@pulumi.output_type
class GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppConnectorBundleResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None,
                 well_known_id: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if well_known_id is not None:
            pulumi.set(__self__, "well_known_id", well_known_id)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="wellKnownId")
    def well_known_id(self) -> Optional[str]:
        return pulumi.get(self, "well_known_id")


@pulumi.output_type
class GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppFlatFileBundleConfigurationPropertyResult(dict):
    def __init__(__self__, *,
                 confidential: Optional[bool] = None,
                 display_name: Optional[str] = None,
                 help_message: Optional[str] = None,
                 icf_type: Optional[str] = None,
                 name: Optional[str] = None,
                 order: Optional[int] = None,
                 required: Optional[bool] = None,
                 values: Optional[Sequence[str]] = None):
        if confidential is not None:
            pulumi.set(__self__, "confidential", confidential)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if help_message is not None:
            pulumi.set(__self__, "help_message", help_message)
        if icf_type is not None:
            pulumi.set(__self__, "icf_type", icf_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def confidential(self) -> Optional[bool]:
        return pulumi.get(self, "confidential")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="helpMessage")
    def help_message(self) -> Optional[str]:
        return pulumi.get(self, "help_message")

    @property
    @pulumi.getter(name="icfType")
    def icf_type(self) -> Optional[str]:
        return pulumi.get(self, "icf_type")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def order(self) -> Optional[int]:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppFlatFileConnectorBundleResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None,
                 well_known_id: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if well_known_id is not None:
            pulumi.set(__self__, "well_known_id", well_known_id)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="wellKnownId")
    def well_known_id(self) -> Optional[str]:
        return pulumi.get(self, "well_known_id")


@pulumi.output_type
class GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppIdentityBridgeResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppObjectClassResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 is_account_object_class: Optional[bool] = None,
                 ref: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if is_account_object_class is not None:
            pulumi.set(__self__, "is_account_object_class", is_account_object_class)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter(name="isAccountObjectClass")
    def is_account_object_class(self) -> Optional[bool]:
        return pulumi.get(self, "is_account_object_class")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppThreeLeggedOauthCredentialResult(dict):
    def __init__(__self__, *,
                 access_token: Optional[str] = None,
                 access_token_expiry: Optional[str] = None,
                 refresh_token: Optional[str] = None):
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if access_token_expiry is not None:
            pulumi.set(__self__, "access_token_expiry", access_token_expiry)
        if refresh_token is not None:
            pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[str]:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="accessTokenExpiry")
    def access_token_expiry(self) -> Optional[str]:
        return pulumi.get(self, "access_token_expiry")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> Optional[str]:
        return pulumi.get(self, "refresh_token")


@pulumi.output_type
class GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionmulticloudServiceAppAppResult(dict):
    def __init__(__self__, *,
                 multicloud_platform_url: Optional[str] = None,
                 multicloud_service_type: Optional[str] = None):
        if multicloud_platform_url is not None:
            pulumi.set(__self__, "multicloud_platform_url", multicloud_platform_url)
        if multicloud_service_type is not None:
            pulumi.set(__self__, "multicloud_service_type", multicloud_service_type)

    @property
    @pulumi.getter(name="multicloudPlatformUrl")
    def multicloud_platform_url(self) -> Optional[str]:
        return pulumi.get(self, "multicloud_platform_url")

    @property
    @pulumi.getter(name="multicloudServiceType")
    def multicloud_service_type(self) -> Optional[str]:
        return pulumi.get(self, "multicloud_service_type")


@pulumi.output_type
class GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionopcServiceAppResult(dict):
    def __init__(__self__, *,
                 current_federation_mode: Optional[str] = None,
                 current_synchronization_mode: Optional[str] = None,
                 enabling_next_fed_sync_modes: Optional[bool] = None,
                 next_federation_mode: Optional[str] = None,
                 next_synchronization_mode: Optional[str] = None,
                 region: Optional[str] = None,
                 service_instance_identifier: Optional[str] = None):
        if current_federation_mode is not None:
            pulumi.set(__self__, "current_federation_mode", current_federation_mode)
        if current_synchronization_mode is not None:
            pulumi.set(__self__, "current_synchronization_mode", current_synchronization_mode)
        if enabling_next_fed_sync_modes is not None:
            pulumi.set(__self__, "enabling_next_fed_sync_modes", enabling_next_fed_sync_modes)
        if next_federation_mode is not None:
            pulumi.set(__self__, "next_federation_mode", next_federation_mode)
        if next_synchronization_mode is not None:
            pulumi.set(__self__, "next_synchronization_mode", next_synchronization_mode)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_instance_identifier is not None:
            pulumi.set(__self__, "service_instance_identifier", service_instance_identifier)

    @property
    @pulumi.getter(name="currentFederationMode")
    def current_federation_mode(self) -> Optional[str]:
        return pulumi.get(self, "current_federation_mode")

    @property
    @pulumi.getter(name="currentSynchronizationMode")
    def current_synchronization_mode(self) -> Optional[str]:
        return pulumi.get(self, "current_synchronization_mode")

    @property
    @pulumi.getter(name="enablingNextFedSyncModes")
    def enabling_next_fed_sync_modes(self) -> Optional[bool]:
        return pulumi.get(self, "enabling_next_fed_sync_modes")

    @property
    @pulumi.getter(name="nextFederationMode")
    def next_federation_mode(self) -> Optional[str]:
        return pulumi.get(self, "next_federation_mode")

    @property
    @pulumi.getter(name="nextSynchronizationMode")
    def next_synchronization_mode(self) -> Optional[str]:
        return pulumi.get(self, "next_synchronization_mode")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="serviceInstanceIdentifier")
    def service_instance_identifier(self) -> Optional[str]:
        return pulumi.get(self, "service_instance_identifier")


@pulumi.output_type
class GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionradiusAppAppResult(dict):
    def __init__(__self__, *,
                 capture_client_ip: Optional[bool] = None,
                 client_ip: Optional[str] = None,
                 country_code_response_attribute_id: Optional[str] = None,
                 end_user_ip_attribute: Optional[str] = None,
                 group_membership_radius_attribute: Optional[str] = None,
                 group_membership_to_returns: Optional[Sequence['outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionradiusAppAppGroupMembershipToReturnResult']] = None,
                 group_name_format: Optional[str] = None,
                 include_group_in_response: Optional[bool] = None,
                 password_and_otp_together: Optional[bool] = None,
                 port: Optional[str] = None,
                 radius_vendor_specific_id: Optional[str] = None,
                 response_format: Optional[str] = None,
                 response_format_delimiter: Optional[str] = None,
                 secret_key: Optional[str] = None,
                 type_of_radius_app: Optional[str] = None):
        if capture_client_ip is not None:
            pulumi.set(__self__, "capture_client_ip", capture_client_ip)
        if client_ip is not None:
            pulumi.set(__self__, "client_ip", client_ip)
        if country_code_response_attribute_id is not None:
            pulumi.set(__self__, "country_code_response_attribute_id", country_code_response_attribute_id)
        if end_user_ip_attribute is not None:
            pulumi.set(__self__, "end_user_ip_attribute", end_user_ip_attribute)
        if group_membership_radius_attribute is not None:
            pulumi.set(__self__, "group_membership_radius_attribute", group_membership_radius_attribute)
        if group_membership_to_returns is not None:
            pulumi.set(__self__, "group_membership_to_returns", group_membership_to_returns)
        if group_name_format is not None:
            pulumi.set(__self__, "group_name_format", group_name_format)
        if include_group_in_response is not None:
            pulumi.set(__self__, "include_group_in_response", include_group_in_response)
        if password_and_otp_together is not None:
            pulumi.set(__self__, "password_and_otp_together", password_and_otp_together)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if radius_vendor_specific_id is not None:
            pulumi.set(__self__, "radius_vendor_specific_id", radius_vendor_specific_id)
        if response_format is not None:
            pulumi.set(__self__, "response_format", response_format)
        if response_format_delimiter is not None:
            pulumi.set(__self__, "response_format_delimiter", response_format_delimiter)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)
        if type_of_radius_app is not None:
            pulumi.set(__self__, "type_of_radius_app", type_of_radius_app)

    @property
    @pulumi.getter(name="captureClientIp")
    def capture_client_ip(self) -> Optional[bool]:
        return pulumi.get(self, "capture_client_ip")

    @property
    @pulumi.getter(name="clientIp")
    def client_ip(self) -> Optional[str]:
        return pulumi.get(self, "client_ip")

    @property
    @pulumi.getter(name="countryCodeResponseAttributeId")
    def country_code_response_attribute_id(self) -> Optional[str]:
        return pulumi.get(self, "country_code_response_attribute_id")

    @property
    @pulumi.getter(name="endUserIpAttribute")
    def end_user_ip_attribute(self) -> Optional[str]:
        return pulumi.get(self, "end_user_ip_attribute")

    @property
    @pulumi.getter(name="groupMembershipRadiusAttribute")
    def group_membership_radius_attribute(self) -> Optional[str]:
        return pulumi.get(self, "group_membership_radius_attribute")

    @property
    @pulumi.getter(name="groupMembershipToReturns")
    def group_membership_to_returns(self) -> Optional[Sequence['outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionradiusAppAppGroupMembershipToReturnResult']]:
        return pulumi.get(self, "group_membership_to_returns")

    @property
    @pulumi.getter(name="groupNameFormat")
    def group_name_format(self) -> Optional[str]:
        return pulumi.get(self, "group_name_format")

    @property
    @pulumi.getter(name="includeGroupInResponse")
    def include_group_in_response(self) -> Optional[bool]:
        return pulumi.get(self, "include_group_in_response")

    @property
    @pulumi.getter(name="passwordAndOtpTogether")
    def password_and_otp_together(self) -> Optional[bool]:
        return pulumi.get(self, "password_and_otp_together")

    @property
    @pulumi.getter
    def port(self) -> Optional[str]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="radiusVendorSpecificId")
    def radius_vendor_specific_id(self) -> Optional[str]:
        return pulumi.get(self, "radius_vendor_specific_id")

    @property
    @pulumi.getter(name="responseFormat")
    def response_format(self) -> Optional[str]:
        return pulumi.get(self, "response_format")

    @property
    @pulumi.getter(name="responseFormatDelimiter")
    def response_format_delimiter(self) -> Optional[str]:
        return pulumi.get(self, "response_format_delimiter")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[str]:
        return pulumi.get(self, "secret_key")

    @property
    @pulumi.getter(name="typeOfRadiusApp")
    def type_of_radius_app(self) -> Optional[str]:
        return pulumi.get(self, "type_of_radius_app")


@pulumi.output_type
class GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionradiusAppAppGroupMembershipToReturnResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionrequestableAppResult(dict):
    def __init__(__self__, *,
                 requestable: Optional[bool] = None):
        if requestable is not None:
            pulumi.set(__self__, "requestable", requestable)

    @property
    @pulumi.getter
    def requestable(self) -> Optional[bool]:
        return pulumi.get(self, "requestable")


@pulumi.output_type
class GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppResult(dict):
    def __init__(__self__, *,
                 assertion_consumer_url: Optional[str] = None,
                 encrypt_assertion: Optional[bool] = None,
                 encryption_algorithm: Optional[str] = None,
                 encryption_certificate: Optional[str] = None,
                 federation_protocol: Optional[str] = None,
                 group_assertion_attributes: Optional[Sequence['outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppGroupAssertionAttributeResult']] = None,
                 hok_acs_url: Optional[str] = None,
                 hok_required: Optional[bool] = None,
                 include_signing_cert_in_signature: Optional[bool] = None,
                 key_encryption_algorithm: Optional[str] = None,
                 last_notification_sent_time: Optional[str] = None,
                 logout_binding: Optional[str] = None,
                 logout_enabled: Optional[bool] = None,
                 logout_request_url: Optional[str] = None,
                 logout_response_url: Optional[str] = None,
                 metadata: Optional[str] = None,
                 name_id_format: Optional[str] = None,
                 name_id_userstore_attribute: Optional[str] = None,
                 outbound_assertion_attributes: Optional[Sequence['outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppOutboundAssertionAttributeResult']] = None,
                 partner_provider_id: Optional[str] = None,
                 partner_provider_pattern: Optional[str] = None,
                 sign_response_or_assertion: Optional[str] = None,
                 signature_hash_algorithm: Optional[str] = None,
                 signing_certificate: Optional[str] = None,
                 succinct_id: Optional[str] = None,
                 tenant_provider_id: Optional[str] = None,
                 user_assertion_attributes: Optional[Sequence['outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppUserAssertionAttributeResult']] = None):
        if assertion_consumer_url is not None:
            pulumi.set(__self__, "assertion_consumer_url", assertion_consumer_url)
        if encrypt_assertion is not None:
            pulumi.set(__self__, "encrypt_assertion", encrypt_assertion)
        if encryption_algorithm is not None:
            pulumi.set(__self__, "encryption_algorithm", encryption_algorithm)
        if encryption_certificate is not None:
            pulumi.set(__self__, "encryption_certificate", encryption_certificate)
        if federation_protocol is not None:
            pulumi.set(__self__, "federation_protocol", federation_protocol)
        if group_assertion_attributes is not None:
            pulumi.set(__self__, "group_assertion_attributes", group_assertion_attributes)
        if hok_acs_url is not None:
            pulumi.set(__self__, "hok_acs_url", hok_acs_url)
        if hok_required is not None:
            pulumi.set(__self__, "hok_required", hok_required)
        if include_signing_cert_in_signature is not None:
            pulumi.set(__self__, "include_signing_cert_in_signature", include_signing_cert_in_signature)
        if key_encryption_algorithm is not None:
            pulumi.set(__self__, "key_encryption_algorithm", key_encryption_algorithm)
        if last_notification_sent_time is not None:
            pulumi.set(__self__, "last_notification_sent_time", last_notification_sent_time)
        if logout_binding is not None:
            pulumi.set(__self__, "logout_binding", logout_binding)
        if logout_enabled is not None:
            pulumi.set(__self__, "logout_enabled", logout_enabled)
        if logout_request_url is not None:
            pulumi.set(__self__, "logout_request_url", logout_request_url)
        if logout_response_url is not None:
            pulumi.set(__self__, "logout_response_url", logout_response_url)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if name_id_format is not None:
            pulumi.set(__self__, "name_id_format", name_id_format)
        if name_id_userstore_attribute is not None:
            pulumi.set(__self__, "name_id_userstore_attribute", name_id_userstore_attribute)
        if outbound_assertion_attributes is not None:
            pulumi.set(__self__, "outbound_assertion_attributes", outbound_assertion_attributes)
        if partner_provider_id is not None:
            pulumi.set(__self__, "partner_provider_id", partner_provider_id)
        if partner_provider_pattern is not None:
            pulumi.set(__self__, "partner_provider_pattern", partner_provider_pattern)
        if sign_response_or_assertion is not None:
            pulumi.set(__self__, "sign_response_or_assertion", sign_response_or_assertion)
        if signature_hash_algorithm is not None:
            pulumi.set(__self__, "signature_hash_algorithm", signature_hash_algorithm)
        if signing_certificate is not None:
            pulumi.set(__self__, "signing_certificate", signing_certificate)
        if succinct_id is not None:
            pulumi.set(__self__, "succinct_id", succinct_id)
        if tenant_provider_id is not None:
            pulumi.set(__self__, "tenant_provider_id", tenant_provider_id)
        if user_assertion_attributes is not None:
            pulumi.set(__self__, "user_assertion_attributes", user_assertion_attributes)

    @property
    @pulumi.getter(name="assertionConsumerUrl")
    def assertion_consumer_url(self) -> Optional[str]:
        return pulumi.get(self, "assertion_consumer_url")

    @property
    @pulumi.getter(name="encryptAssertion")
    def encrypt_assertion(self) -> Optional[bool]:
        return pulumi.get(self, "encrypt_assertion")

    @property
    @pulumi.getter(name="encryptionAlgorithm")
    def encryption_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "encryption_algorithm")

    @property
    @pulumi.getter(name="encryptionCertificate")
    def encryption_certificate(self) -> Optional[str]:
        return pulumi.get(self, "encryption_certificate")

    @property
    @pulumi.getter(name="federationProtocol")
    def federation_protocol(self) -> Optional[str]:
        return pulumi.get(self, "federation_protocol")

    @property
    @pulumi.getter(name="groupAssertionAttributes")
    def group_assertion_attributes(self) -> Optional[Sequence['outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppGroupAssertionAttributeResult']]:
        return pulumi.get(self, "group_assertion_attributes")

    @property
    @pulumi.getter(name="hokAcsUrl")
    def hok_acs_url(self) -> Optional[str]:
        return pulumi.get(self, "hok_acs_url")

    @property
    @pulumi.getter(name="hokRequired")
    def hok_required(self) -> Optional[bool]:
        return pulumi.get(self, "hok_required")

    @property
    @pulumi.getter(name="includeSigningCertInSignature")
    def include_signing_cert_in_signature(self) -> Optional[bool]:
        return pulumi.get(self, "include_signing_cert_in_signature")

    @property
    @pulumi.getter(name="keyEncryptionAlgorithm")
    def key_encryption_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "key_encryption_algorithm")

    @property
    @pulumi.getter(name="lastNotificationSentTime")
    def last_notification_sent_time(self) -> Optional[str]:
        return pulumi.get(self, "last_notification_sent_time")

    @property
    @pulumi.getter(name="logoutBinding")
    def logout_binding(self) -> Optional[str]:
        return pulumi.get(self, "logout_binding")

    @property
    @pulumi.getter(name="logoutEnabled")
    def logout_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "logout_enabled")

    @property
    @pulumi.getter(name="logoutRequestUrl")
    def logout_request_url(self) -> Optional[str]:
        return pulumi.get(self, "logout_request_url")

    @property
    @pulumi.getter(name="logoutResponseUrl")
    def logout_response_url(self) -> Optional[str]:
        return pulumi.get(self, "logout_response_url")

    @property
    @pulumi.getter
    def metadata(self) -> Optional[str]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="nameIdFormat")
    def name_id_format(self) -> Optional[str]:
        return pulumi.get(self, "name_id_format")

    @property
    @pulumi.getter(name="nameIdUserstoreAttribute")
    def name_id_userstore_attribute(self) -> Optional[str]:
        return pulumi.get(self, "name_id_userstore_attribute")

    @property
    @pulumi.getter(name="outboundAssertionAttributes")
    def outbound_assertion_attributes(self) -> Optional[Sequence['outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppOutboundAssertionAttributeResult']]:
        return pulumi.get(self, "outbound_assertion_attributes")

    @property
    @pulumi.getter(name="partnerProviderId")
    def partner_provider_id(self) -> Optional[str]:
        return pulumi.get(self, "partner_provider_id")

    @property
    @pulumi.getter(name="partnerProviderPattern")
    def partner_provider_pattern(self) -> Optional[str]:
        return pulumi.get(self, "partner_provider_pattern")

    @property
    @pulumi.getter(name="signResponseOrAssertion")
    def sign_response_or_assertion(self) -> Optional[str]:
        return pulumi.get(self, "sign_response_or_assertion")

    @property
    @pulumi.getter(name="signatureHashAlgorithm")
    def signature_hash_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "signature_hash_algorithm")

    @property
    @pulumi.getter(name="signingCertificate")
    def signing_certificate(self) -> Optional[str]:
        return pulumi.get(self, "signing_certificate")

    @property
    @pulumi.getter(name="succinctId")
    def succinct_id(self) -> Optional[str]:
        return pulumi.get(self, "succinct_id")

    @property
    @pulumi.getter(name="tenantProviderId")
    def tenant_provider_id(self) -> Optional[str]:
        return pulumi.get(self, "tenant_provider_id")

    @property
    @pulumi.getter(name="userAssertionAttributes")
    def user_assertion_attributes(self) -> Optional[Sequence['outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppUserAssertionAttributeResult']]:
        return pulumi.get(self, "user_assertion_attributes")


@pulumi.output_type
class GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppGroupAssertionAttributeResult(dict):
    def __init__(__self__, *,
                 condition: Optional[str] = None,
                 format: Optional[str] = None,
                 group_name: Optional[str] = None,
                 name: Optional[str] = None):
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[str]:
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppOutboundAssertionAttributeResult(dict):
    def __init__(__self__, *,
                 direction: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def direction(self) -> Optional[str]:
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppUserAssertionAttributeResult(dict):
    def __init__(__self__, *,
                 format: Optional[str] = None,
                 name: Optional[str] = None,
                 user_store_attribute_name: Optional[str] = None):
        if format is not None:
            pulumi.set(__self__, "format", format)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if user_store_attribute_name is not None:
            pulumi.set(__self__, "user_store_attribute_name", user_store_attribute_name)

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="userStoreAttributeName")
    def user_store_attribute_name(self) -> Optional[str]:
        return pulumi.get(self, "user_store_attribute_name")


@pulumi.output_type
class GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionwebTierPolicyAppResult(dict):
    def __init__(__self__, *,
                 resource_ref: Optional[bool] = None,
                 web_tier_policy_az_control: Optional[str] = None,
                 web_tier_policy_json: Optional[str] = None):
        if resource_ref is not None:
            pulumi.set(__self__, "resource_ref", resource_ref)
        if web_tier_policy_az_control is not None:
            pulumi.set(__self__, "web_tier_policy_az_control", web_tier_policy_az_control)
        if web_tier_policy_json is not None:
            pulumi.set(__self__, "web_tier_policy_json", web_tier_policy_json)

    @property
    @pulumi.getter(name="resourceRef")
    def resource_ref(self) -> Optional[bool]:
        return pulumi.get(self, "resource_ref")

    @property
    @pulumi.getter(name="webTierPolicyAzControl")
    def web_tier_policy_az_control(self) -> Optional[str]:
        return pulumi.get(self, "web_tier_policy_az_control")

    @property
    @pulumi.getter(name="webTierPolicyJson")
    def web_tier_policy_json(self) -> Optional[str]:
        return pulumi.get(self, "web_tier_policy_json")


@pulumi.output_type
class GetDomainsAppsAppUserRoleResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 display: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAuthTokenIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAuthTokenIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAuthTokenMetaResult(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsAuthTokenTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAuthTokenUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult(dict):
    def __init__(__self__, *,
                 allow_self_change: Optional[bool] = None):
        if allow_self_change is not None:
            pulumi.set(__self__, "allow_self_change", allow_self_change)

    @property
    @pulumi.getter(name="allowSelfChange")
    def allow_self_change(self) -> Optional[bool]:
        return pulumi.get(self, "allow_self_change")


@pulumi.output_type
class GetDomainsAuthTokenUserResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAuthTokensAuthTokenResult(dict):
    def __init__(__self__, *,
                 attribute_sets: Optional[Sequence[str]] = None,
                 attributes: Optional[str] = None,
                 authorization: Optional[str] = None,
                 compartment_ocid: Optional[str] = None,
                 delete_in_progress: Optional[bool] = None,
                 description: Optional[str] = None,
                 domain_ocid: Optional[str] = None,
                 expires_on: Optional[str] = None,
                 id: Optional[str] = None,
                 idcs_created_bies: Optional[Sequence['outputs.GetDomainsAuthTokensAuthTokenIdcsCreatedByResult']] = None,
                 idcs_endpoint: Optional[str] = None,
                 idcs_last_modified_bies: Optional[Sequence['outputs.GetDomainsAuthTokensAuthTokenIdcsLastModifiedByResult']] = None,
                 idcs_last_upgraded_in_release: Optional[str] = None,
                 idcs_prevented_operations: Optional[Sequence[str]] = None,
                 metas: Optional[Sequence['outputs.GetDomainsAuthTokensAuthTokenMetaResult']] = None,
                 ocid: Optional[str] = None,
                 resource_type_schema_version: Optional[str] = None,
                 schemas: Optional[Sequence[str]] = None,
                 status: Optional[str] = None,
                 tags: Optional[Sequence['outputs.GetDomainsAuthTokensAuthTokenTagResult']] = None,
                 tenancy_ocid: Optional[str] = None,
                 urnietfparamsscimschemasoracleidcsextensionself_change_users: Optional[Sequence['outputs.GetDomainsAuthTokensAuthTokenUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult']] = None,
                 users: Optional[Sequence['outputs.GetDomainsAuthTokensAuthTokenUserResult']] = None):
        if attribute_sets is not None:
            pulumi.set(__self__, "attribute_sets", attribute_sets)
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)
        if authorization is not None:
            pulumi.set(__self__, "authorization", authorization)
        if compartment_ocid is not None:
            pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        if delete_in_progress is not None:
            pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain_ocid is not None:
            pulumi.set(__self__, "domain_ocid", domain_ocid)
        if expires_on is not None:
            pulumi.set(__self__, "expires_on", expires_on)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if idcs_created_bies is not None:
            pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        if idcs_endpoint is not None:
            pulumi.set(__self__, "idcs_endpoint", idcs_endpoint)
        if idcs_last_modified_bies is not None:
            pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        if idcs_last_upgraded_in_release is not None:
            pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        if idcs_prevented_operations is not None:
            pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        if metas is not None:
            pulumi.set(__self__, "metas", metas)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if resource_type_schema_version is not None:
            pulumi.set(__self__, "resource_type_schema_version", resource_type_schema_version)
        if schemas is not None:
            pulumi.set(__self__, "schemas", schemas)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tenancy_ocid is not None:
            pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)
        if urnietfparamsscimschemasoracleidcsextensionself_change_users is not None:
            pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionself_change_users", urnietfparamsscimschemasoracleidcsextensionself_change_users)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="attributeSets")
    def attribute_sets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "attribute_sets")

    @property
    @pulumi.getter
    def attributes(self) -> Optional[str]:
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter
    def authorization(self) -> Optional[str]:
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> Optional[str]:
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> Optional[bool]:
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> Optional[str]:
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter(name="expiresOn")
    def expires_on(self) -> Optional[str]:
        return pulumi.get(self, "expires_on")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Optional[Sequence['outputs.GetDomainsAuthTokensAuthTokenIdcsCreatedByResult']]:
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "idcs_endpoint")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Optional[Sequence['outputs.GetDomainsAuthTokensAuthTokenIdcsLastModifiedByResult']]:
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> Optional[str]:
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter
    def metas(self) -> Optional[Sequence['outputs.GetDomainsAuthTokensAuthTokenMetaResult']]:
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> Optional[str]:
        return pulumi.get(self, "resource_type_schema_version")

    @property
    @pulumi.getter
    def schemas(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.GetDomainsAuthTokensAuthTokenTagResult']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> Optional[str]:
        return pulumi.get(self, "tenancy_ocid")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionselfChangeUsers")
    def urnietfparamsscimschemasoracleidcsextensionself_change_users(self) -> Optional[Sequence['outputs.GetDomainsAuthTokensAuthTokenUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult']]:
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionself_change_users")

    @property
    @pulumi.getter
    def users(self) -> Optional[Sequence['outputs.GetDomainsAuthTokensAuthTokenUserResult']]:
        return pulumi.get(self, "users")


@pulumi.output_type
class GetDomainsAuthTokensAuthTokenIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAuthTokensAuthTokenIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAuthTokensAuthTokenMetaResult(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsAuthTokensAuthTokenTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAuthTokensAuthTokenUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult(dict):
    def __init__(__self__, *,
                 allow_self_change: Optional[bool] = None):
        if allow_self_change is not None:
            pulumi.set(__self__, "allow_self_change", allow_self_change)

    @property
    @pulumi.getter(name="allowSelfChange")
    def allow_self_change(self) -> Optional[bool]:
        return pulumi.get(self, "allow_self_change")


@pulumi.output_type
class GetDomainsAuthTokensAuthTokenUserResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAuthenticationFactorSettingBypassCodeSettingResult(dict):
    def __init__(__self__, *,
                 help_desk_code_expiry_in_mins: Optional[int] = None,
                 help_desk_generation_enabled: Optional[bool] = None,
                 help_desk_max_usage: Optional[int] = None,
                 length: Optional[int] = None,
                 max_active: Optional[int] = None,
                 self_service_generation_enabled: Optional[bool] = None):
        if help_desk_code_expiry_in_mins is not None:
            pulumi.set(__self__, "help_desk_code_expiry_in_mins", help_desk_code_expiry_in_mins)
        if help_desk_generation_enabled is not None:
            pulumi.set(__self__, "help_desk_generation_enabled", help_desk_generation_enabled)
        if help_desk_max_usage is not None:
            pulumi.set(__self__, "help_desk_max_usage", help_desk_max_usage)
        if length is not None:
            pulumi.set(__self__, "length", length)
        if max_active is not None:
            pulumi.set(__self__, "max_active", max_active)
        if self_service_generation_enabled is not None:
            pulumi.set(__self__, "self_service_generation_enabled", self_service_generation_enabled)

    @property
    @pulumi.getter(name="helpDeskCodeExpiryInMins")
    def help_desk_code_expiry_in_mins(self) -> Optional[int]:
        return pulumi.get(self, "help_desk_code_expiry_in_mins")

    @property
    @pulumi.getter(name="helpDeskGenerationEnabled")
    def help_desk_generation_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "help_desk_generation_enabled")

    @property
    @pulumi.getter(name="helpDeskMaxUsage")
    def help_desk_max_usage(self) -> Optional[int]:
        return pulumi.get(self, "help_desk_max_usage")

    @property
    @pulumi.getter
    def length(self) -> Optional[int]:
        return pulumi.get(self, "length")

    @property
    @pulumi.getter(name="maxActive")
    def max_active(self) -> Optional[int]:
        return pulumi.get(self, "max_active")

    @property
    @pulumi.getter(name="selfServiceGenerationEnabled")
    def self_service_generation_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "self_service_generation_enabled")


@pulumi.output_type
class GetDomainsAuthenticationFactorSettingClientAppSettingResult(dict):
    def __init__(__self__, *,
                 device_protection_policy: Optional[str] = None,
                 initial_lockout_period_in_secs: Optional[int] = None,
                 key_pair_length: Optional[int] = None,
                 lockout_escalation_pattern: Optional[str] = None,
                 max_failures_before_lockout: Optional[int] = None,
                 max_failures_before_warning: Optional[int] = None,
                 max_lockout_interval_in_secs: Optional[int] = None,
                 min_pin_length: Optional[int] = None,
                 policy_update_freq_in_days: Optional[int] = None,
                 request_signing_algo: Optional[str] = None,
                 shared_secret_encoding: Optional[str] = None,
                 unlock_app_for_each_request_enabled: Optional[bool] = None,
                 unlock_app_interval_in_secs: Optional[int] = None,
                 unlock_on_app_foreground_enabled: Optional[bool] = None,
                 unlock_on_app_start_enabled: Optional[bool] = None):
        if device_protection_policy is not None:
            pulumi.set(__self__, "device_protection_policy", device_protection_policy)
        if initial_lockout_period_in_secs is not None:
            pulumi.set(__self__, "initial_lockout_period_in_secs", initial_lockout_period_in_secs)
        if key_pair_length is not None:
            pulumi.set(__self__, "key_pair_length", key_pair_length)
        if lockout_escalation_pattern is not None:
            pulumi.set(__self__, "lockout_escalation_pattern", lockout_escalation_pattern)
        if max_failures_before_lockout is not None:
            pulumi.set(__self__, "max_failures_before_lockout", max_failures_before_lockout)
        if max_failures_before_warning is not None:
            pulumi.set(__self__, "max_failures_before_warning", max_failures_before_warning)
        if max_lockout_interval_in_secs is not None:
            pulumi.set(__self__, "max_lockout_interval_in_secs", max_lockout_interval_in_secs)
        if min_pin_length is not None:
            pulumi.set(__self__, "min_pin_length", min_pin_length)
        if policy_update_freq_in_days is not None:
            pulumi.set(__self__, "policy_update_freq_in_days", policy_update_freq_in_days)
        if request_signing_algo is not None:
            pulumi.set(__self__, "request_signing_algo", request_signing_algo)
        if shared_secret_encoding is not None:
            pulumi.set(__self__, "shared_secret_encoding", shared_secret_encoding)
        if unlock_app_for_each_request_enabled is not None:
            pulumi.set(__self__, "unlock_app_for_each_request_enabled", unlock_app_for_each_request_enabled)
        if unlock_app_interval_in_secs is not None:
            pulumi.set(__self__, "unlock_app_interval_in_secs", unlock_app_interval_in_secs)
        if unlock_on_app_foreground_enabled is not None:
            pulumi.set(__self__, "unlock_on_app_foreground_enabled", unlock_on_app_foreground_enabled)
        if unlock_on_app_start_enabled is not None:
            pulumi.set(__self__, "unlock_on_app_start_enabled", unlock_on_app_start_enabled)

    @property
    @pulumi.getter(name="deviceProtectionPolicy")
    def device_protection_policy(self) -> Optional[str]:
        return pulumi.get(self, "device_protection_policy")

    @property
    @pulumi.getter(name="initialLockoutPeriodInSecs")
    def initial_lockout_period_in_secs(self) -> Optional[int]:
        return pulumi.get(self, "initial_lockout_period_in_secs")

    @property
    @pulumi.getter(name="keyPairLength")
    def key_pair_length(self) -> Optional[int]:
        return pulumi.get(self, "key_pair_length")

    @property
    @pulumi.getter(name="lockoutEscalationPattern")
    def lockout_escalation_pattern(self) -> Optional[str]:
        return pulumi.get(self, "lockout_escalation_pattern")

    @property
    @pulumi.getter(name="maxFailuresBeforeLockout")
    def max_failures_before_lockout(self) -> Optional[int]:
        return pulumi.get(self, "max_failures_before_lockout")

    @property
    @pulumi.getter(name="maxFailuresBeforeWarning")
    def max_failures_before_warning(self) -> Optional[int]:
        return pulumi.get(self, "max_failures_before_warning")

    @property
    @pulumi.getter(name="maxLockoutIntervalInSecs")
    def max_lockout_interval_in_secs(self) -> Optional[int]:
        return pulumi.get(self, "max_lockout_interval_in_secs")

    @property
    @pulumi.getter(name="minPinLength")
    def min_pin_length(self) -> Optional[int]:
        return pulumi.get(self, "min_pin_length")

    @property
    @pulumi.getter(name="policyUpdateFreqInDays")
    def policy_update_freq_in_days(self) -> Optional[int]:
        return pulumi.get(self, "policy_update_freq_in_days")

    @property
    @pulumi.getter(name="requestSigningAlgo")
    def request_signing_algo(self) -> Optional[str]:
        return pulumi.get(self, "request_signing_algo")

    @property
    @pulumi.getter(name="sharedSecretEncoding")
    def shared_secret_encoding(self) -> Optional[str]:
        return pulumi.get(self, "shared_secret_encoding")

    @property
    @pulumi.getter(name="unlockAppForEachRequestEnabled")
    def unlock_app_for_each_request_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "unlock_app_for_each_request_enabled")

    @property
    @pulumi.getter(name="unlockAppIntervalInSecs")
    def unlock_app_interval_in_secs(self) -> Optional[int]:
        return pulumi.get(self, "unlock_app_interval_in_secs")

    @property
    @pulumi.getter(name="unlockOnAppForegroundEnabled")
    def unlock_on_app_foreground_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "unlock_on_app_foreground_enabled")

    @property
    @pulumi.getter(name="unlockOnAppStartEnabled")
    def unlock_on_app_start_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "unlock_on_app_start_enabled")


@pulumi.output_type
class GetDomainsAuthenticationFactorSettingCompliancePolicyResult(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAuthenticationFactorSettingEmailSettingResult(dict):
    def __init__(__self__, *,
                 email_link_custom_url: Optional[str] = None,
                 email_link_enabled: Optional[bool] = None):
        if email_link_custom_url is not None:
            pulumi.set(__self__, "email_link_custom_url", email_link_custom_url)
        if email_link_enabled is not None:
            pulumi.set(__self__, "email_link_enabled", email_link_enabled)

    @property
    @pulumi.getter(name="emailLinkCustomUrl")
    def email_link_custom_url(self) -> Optional[str]:
        return pulumi.get(self, "email_link_custom_url")

    @property
    @pulumi.getter(name="emailLinkEnabled")
    def email_link_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "email_link_enabled")


@pulumi.output_type
class GetDomainsAuthenticationFactorSettingEndpointRestrictionResult(dict):
    def __init__(__self__, *,
                 max_endpoint_trust_duration_in_days: Optional[int] = None,
                 max_enrolled_devices: Optional[int] = None,
                 max_incorrect_attempts: Optional[int] = None,
                 max_trusted_endpoints: Optional[int] = None,
                 trusted_endpoints_enabled: Optional[bool] = None):
        if max_endpoint_trust_duration_in_days is not None:
            pulumi.set(__self__, "max_endpoint_trust_duration_in_days", max_endpoint_trust_duration_in_days)
        if max_enrolled_devices is not None:
            pulumi.set(__self__, "max_enrolled_devices", max_enrolled_devices)
        if max_incorrect_attempts is not None:
            pulumi.set(__self__, "max_incorrect_attempts", max_incorrect_attempts)
        if max_trusted_endpoints is not None:
            pulumi.set(__self__, "max_trusted_endpoints", max_trusted_endpoints)
        if trusted_endpoints_enabled is not None:
            pulumi.set(__self__, "trusted_endpoints_enabled", trusted_endpoints_enabled)

    @property
    @pulumi.getter(name="maxEndpointTrustDurationInDays")
    def max_endpoint_trust_duration_in_days(self) -> Optional[int]:
        return pulumi.get(self, "max_endpoint_trust_duration_in_days")

    @property
    @pulumi.getter(name="maxEnrolledDevices")
    def max_enrolled_devices(self) -> Optional[int]:
        return pulumi.get(self, "max_enrolled_devices")

    @property
    @pulumi.getter(name="maxIncorrectAttempts")
    def max_incorrect_attempts(self) -> Optional[int]:
        return pulumi.get(self, "max_incorrect_attempts")

    @property
    @pulumi.getter(name="maxTrustedEndpoints")
    def max_trusted_endpoints(self) -> Optional[int]:
        return pulumi.get(self, "max_trusted_endpoints")

    @property
    @pulumi.getter(name="trustedEndpointsEnabled")
    def trusted_endpoints_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "trusted_endpoints_enabled")


@pulumi.output_type
class GetDomainsAuthenticationFactorSettingIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAuthenticationFactorSettingIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAuthenticationFactorSettingIdentityStoreSettingResult(dict):
    def __init__(__self__, *,
                 mobile_number_enabled: Optional[bool] = None,
                 mobile_number_update_enabled: Optional[bool] = None):
        if mobile_number_enabled is not None:
            pulumi.set(__self__, "mobile_number_enabled", mobile_number_enabled)
        if mobile_number_update_enabled is not None:
            pulumi.set(__self__, "mobile_number_update_enabled", mobile_number_update_enabled)

    @property
    @pulumi.getter(name="mobileNumberEnabled")
    def mobile_number_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "mobile_number_enabled")

    @property
    @pulumi.getter(name="mobileNumberUpdateEnabled")
    def mobile_number_update_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "mobile_number_update_enabled")


@pulumi.output_type
class GetDomainsAuthenticationFactorSettingMetaResult(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsAuthenticationFactorSettingNotificationSettingResult(dict):
    def __init__(__self__, *,
                 pull_enabled: Optional[bool] = None):
        if pull_enabled is not None:
            pulumi.set(__self__, "pull_enabled", pull_enabled)

    @property
    @pulumi.getter(name="pullEnabled")
    def pull_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "pull_enabled")


@pulumi.output_type
class GetDomainsAuthenticationFactorSettingTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAuthenticationFactorSettingThirdPartyFactorResult(dict):
    def __init__(__self__, *,
                 duo_security: Optional[bool] = None):
        if duo_security is not None:
            pulumi.set(__self__, "duo_security", duo_security)

    @property
    @pulumi.getter(name="duoSecurity")
    def duo_security(self) -> Optional[bool]:
        return pulumi.get(self, "duo_security")


@pulumi.output_type
class GetDomainsAuthenticationFactorSettingTotpSettingResult(dict):
    def __init__(__self__, *,
                 email_otp_validity_duration_in_mins: Optional[int] = None,
                 email_passcode_length: Optional[int] = None,
                 hashing_algorithm: Optional[str] = None,
                 jwt_validity_duration_in_secs: Optional[int] = None,
                 key_refresh_interval_in_days: Optional[int] = None,
                 passcode_length: Optional[int] = None,
                 sms_otp_validity_duration_in_mins: Optional[int] = None,
                 sms_passcode_length: Optional[int] = None,
                 time_step_in_secs: Optional[int] = None,
                 time_step_tolerance: Optional[int] = None):
        if email_otp_validity_duration_in_mins is not None:
            pulumi.set(__self__, "email_otp_validity_duration_in_mins", email_otp_validity_duration_in_mins)
        if email_passcode_length is not None:
            pulumi.set(__self__, "email_passcode_length", email_passcode_length)
        if hashing_algorithm is not None:
            pulumi.set(__self__, "hashing_algorithm", hashing_algorithm)
        if jwt_validity_duration_in_secs is not None:
            pulumi.set(__self__, "jwt_validity_duration_in_secs", jwt_validity_duration_in_secs)
        if key_refresh_interval_in_days is not None:
            pulumi.set(__self__, "key_refresh_interval_in_days", key_refresh_interval_in_days)
        if passcode_length is not None:
            pulumi.set(__self__, "passcode_length", passcode_length)
        if sms_otp_validity_duration_in_mins is not None:
            pulumi.set(__self__, "sms_otp_validity_duration_in_mins", sms_otp_validity_duration_in_mins)
        if sms_passcode_length is not None:
            pulumi.set(__self__, "sms_passcode_length", sms_passcode_length)
        if time_step_in_secs is not None:
            pulumi.set(__self__, "time_step_in_secs", time_step_in_secs)
        if time_step_tolerance is not None:
            pulumi.set(__self__, "time_step_tolerance", time_step_tolerance)

    @property
    @pulumi.getter(name="emailOtpValidityDurationInMins")
    def email_otp_validity_duration_in_mins(self) -> Optional[int]:
        return pulumi.get(self, "email_otp_validity_duration_in_mins")

    @property
    @pulumi.getter(name="emailPasscodeLength")
    def email_passcode_length(self) -> Optional[int]:
        return pulumi.get(self, "email_passcode_length")

    @property
    @pulumi.getter(name="hashingAlgorithm")
    def hashing_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "hashing_algorithm")

    @property
    @pulumi.getter(name="jwtValidityDurationInSecs")
    def jwt_validity_duration_in_secs(self) -> Optional[int]:
        return pulumi.get(self, "jwt_validity_duration_in_secs")

    @property
    @pulumi.getter(name="keyRefreshIntervalInDays")
    def key_refresh_interval_in_days(self) -> Optional[int]:
        return pulumi.get(self, "key_refresh_interval_in_days")

    @property
    @pulumi.getter(name="passcodeLength")
    def passcode_length(self) -> Optional[int]:
        return pulumi.get(self, "passcode_length")

    @property
    @pulumi.getter(name="smsOtpValidityDurationInMins")
    def sms_otp_validity_duration_in_mins(self) -> Optional[int]:
        return pulumi.get(self, "sms_otp_validity_duration_in_mins")

    @property
    @pulumi.getter(name="smsPasscodeLength")
    def sms_passcode_length(self) -> Optional[int]:
        return pulumi.get(self, "sms_passcode_length")

    @property
    @pulumi.getter(name="timeStepInSecs")
    def time_step_in_secs(self) -> Optional[int]:
        return pulumi.get(self, "time_step_in_secs")

    @property
    @pulumi.getter(name="timeStepTolerance")
    def time_step_tolerance(self) -> Optional[int]:
        return pulumi.get(self, "time_step_tolerance")


@pulumi.output_type
class GetDomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionfidoAuthenticationFactorSettingResult(dict):
    def __init__(__self__, *,
                 attestation: Optional[str] = None,
                 authenticator_selection_attachment: Optional[str] = None,
                 authenticator_selection_require_resident_key: Optional[bool] = None,
                 authenticator_selection_resident_key: Optional[str] = None,
                 authenticator_selection_user_verification: Optional[str] = None,
                 domain_validation_level: Optional[int] = None,
                 exclude_credentials: Optional[bool] = None,
                 public_key_types: Optional[Sequence[str]] = None,
                 timeout: Optional[int] = None):
        if attestation is not None:
            pulumi.set(__self__, "attestation", attestation)
        if authenticator_selection_attachment is not None:
            pulumi.set(__self__, "authenticator_selection_attachment", authenticator_selection_attachment)
        if authenticator_selection_require_resident_key is not None:
            pulumi.set(__self__, "authenticator_selection_require_resident_key", authenticator_selection_require_resident_key)
        if authenticator_selection_resident_key is not None:
            pulumi.set(__self__, "authenticator_selection_resident_key", authenticator_selection_resident_key)
        if authenticator_selection_user_verification is not None:
            pulumi.set(__self__, "authenticator_selection_user_verification", authenticator_selection_user_verification)
        if domain_validation_level is not None:
            pulumi.set(__self__, "domain_validation_level", domain_validation_level)
        if exclude_credentials is not None:
            pulumi.set(__self__, "exclude_credentials", exclude_credentials)
        if public_key_types is not None:
            pulumi.set(__self__, "public_key_types", public_key_types)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def attestation(self) -> Optional[str]:
        return pulumi.get(self, "attestation")

    @property
    @pulumi.getter(name="authenticatorSelectionAttachment")
    def authenticator_selection_attachment(self) -> Optional[str]:
        return pulumi.get(self, "authenticator_selection_attachment")

    @property
    @pulumi.getter(name="authenticatorSelectionRequireResidentKey")
    def authenticator_selection_require_resident_key(self) -> Optional[bool]:
        return pulumi.get(self, "authenticator_selection_require_resident_key")

    @property
    @pulumi.getter(name="authenticatorSelectionResidentKey")
    def authenticator_selection_resident_key(self) -> Optional[str]:
        return pulumi.get(self, "authenticator_selection_resident_key")

    @property
    @pulumi.getter(name="authenticatorSelectionUserVerification")
    def authenticator_selection_user_verification(self) -> Optional[str]:
        return pulumi.get(self, "authenticator_selection_user_verification")

    @property
    @pulumi.getter(name="domainValidationLevel")
    def domain_validation_level(self) -> Optional[int]:
        return pulumi.get(self, "domain_validation_level")

    @property
    @pulumi.getter(name="excludeCredentials")
    def exclude_credentials(self) -> Optional[bool]:
        return pulumi.get(self, "exclude_credentials")

    @property
    @pulumi.getter(name="publicKeyTypes")
    def public_key_types(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "public_key_types")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[int]:
        return pulumi.get(self, "timeout")


@pulumi.output_type
class GetDomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettingResult(dict):
    def __init__(__self__, *,
                 duo_security_settings: Optional[Sequence['outputs.GetDomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettingDuoSecuritySettingResult']] = None):
        if duo_security_settings is not None:
            pulumi.set(__self__, "duo_security_settings", duo_security_settings)

    @property
    @pulumi.getter(name="duoSecuritySettings")
    def duo_security_settings(self) -> Optional[Sequence['outputs.GetDomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettingDuoSecuritySettingResult']]:
        return pulumi.get(self, "duo_security_settings")


@pulumi.output_type
class GetDomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettingDuoSecuritySettingResult(dict):
    def __init__(__self__, *,
                 api_hostname: Optional[str] = None,
                 attestation_key: Optional[str] = None,
                 integration_key: Optional[str] = None,
                 secret_key: Optional[str] = None,
                 user_mapping_attribute: Optional[str] = None):
        if api_hostname is not None:
            pulumi.set(__self__, "api_hostname", api_hostname)
        if attestation_key is not None:
            pulumi.set(__self__, "attestation_key", attestation_key)
        if integration_key is not None:
            pulumi.set(__self__, "integration_key", integration_key)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)
        if user_mapping_attribute is not None:
            pulumi.set(__self__, "user_mapping_attribute", user_mapping_attribute)

    @property
    @pulumi.getter(name="apiHostname")
    def api_hostname(self) -> Optional[str]:
        return pulumi.get(self, "api_hostname")

    @property
    @pulumi.getter(name="attestationKey")
    def attestation_key(self) -> Optional[str]:
        return pulumi.get(self, "attestation_key")

    @property
    @pulumi.getter(name="integrationKey")
    def integration_key(self) -> Optional[str]:
        return pulumi.get(self, "integration_key")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[str]:
        return pulumi.get(self, "secret_key")

    @property
    @pulumi.getter(name="userMappingAttribute")
    def user_mapping_attribute(self) -> Optional[str]:
        return pulumi.get(self, "user_mapping_attribute")


@pulumi.output_type
class GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingResult(dict):
    def __init__(__self__, *,
                 attribute_sets: Optional[Sequence[str]] = None,
                 attributes: Optional[str] = None,
                 authentication_factor_setting_id: Optional[str] = None,
                 authorization: Optional[str] = None,
                 auto_enroll_email_factor_disabled: Optional[bool] = None,
                 bypass_code_enabled: Optional[bool] = None,
                 bypass_code_settings: Optional[Sequence['outputs.GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingBypassCodeSettingResult']] = None,
                 client_app_settings: Optional[Sequence['outputs.GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingClientAppSettingResult']] = None,
                 compartment_ocid: Optional[str] = None,
                 compliance_policies: Optional[Sequence['outputs.GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingCompliancePolicyResult']] = None,
                 delete_in_progress: Optional[bool] = None,
                 domain_ocid: Optional[str] = None,
                 email_enabled: Optional[bool] = None,
                 email_settings: Optional[Sequence['outputs.GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingEmailSettingResult']] = None,
                 endpoint_restrictions: Optional[Sequence['outputs.GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingEndpointRestrictionResult']] = None,
                 fido_authenticator_enabled: Optional[bool] = None,
                 hide_backup_factor_enabled: Optional[bool] = None,
                 id: Optional[str] = None,
                 idcs_created_bies: Optional[Sequence['outputs.GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingIdcsCreatedByResult']] = None,
                 idcs_endpoint: Optional[str] = None,
                 idcs_last_modified_bies: Optional[Sequence['outputs.GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingIdcsLastModifiedByResult']] = None,
                 idcs_last_upgraded_in_release: Optional[str] = None,
                 idcs_prevented_operations: Optional[Sequence[str]] = None,
                 identity_store_settings: Optional[Sequence['outputs.GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingIdentityStoreSettingResult']] = None,
                 metas: Optional[Sequence['outputs.GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingMetaResult']] = None,
                 mfa_enabled_category: Optional[str] = None,
                 mfa_enrollment_type: Optional[str] = None,
                 notification_settings: Optional[Sequence['outputs.GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingNotificationSettingResult']] = None,
                 ocid: Optional[str] = None,
                 phone_call_enabled: Optional[bool] = None,
                 push_enabled: Optional[bool] = None,
                 resource_type_schema_version: Optional[str] = None,
                 schemas: Optional[Sequence[str]] = None,
                 security_questions_enabled: Optional[bool] = None,
                 sms_enabled: Optional[bool] = None,
                 tags: Optional[Sequence['outputs.GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingTagResult']] = None,
                 tenancy_ocid: Optional[str] = None,
                 third_party_factors: Optional[Sequence['outputs.GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingThirdPartyFactorResult']] = None,
                 totp_enabled: Optional[bool] = None,
                 totp_settings: Optional[Sequence['outputs.GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingTotpSettingResult']] = None,
                 urnietfparamsscimschemasoracleidcsextensionfido_authentication_factor_settings: Optional[Sequence['outputs.GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionfidoAuthenticationFactorSettingResult']] = None,
                 urnietfparamsscimschemasoracleidcsextensionthird_party_authentication_factor_settings: Optional[Sequence['outputs.GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettingResult']] = None,
                 user_enrollment_disabled_factors: Optional[Sequence[str]] = None,
                 yubico_otp_enabled: Optional[bool] = None):
        if attribute_sets is not None:
            pulumi.set(__self__, "attribute_sets", attribute_sets)
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)
        if authentication_factor_setting_id is not None:
            pulumi.set(__self__, "authentication_factor_setting_id", authentication_factor_setting_id)
        if authorization is not None:
            pulumi.set(__self__, "authorization", authorization)
        if auto_enroll_email_factor_disabled is not None:
            pulumi.set(__self__, "auto_enroll_email_factor_disabled", auto_enroll_email_factor_disabled)
        if bypass_code_enabled is not None:
            pulumi.set(__self__, "bypass_code_enabled", bypass_code_enabled)
        if bypass_code_settings is not None:
            pulumi.set(__self__, "bypass_code_settings", bypass_code_settings)
        if client_app_settings is not None:
            pulumi.set(__self__, "client_app_settings", client_app_settings)
        if compartment_ocid is not None:
            pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        if compliance_policies is not None:
            pulumi.set(__self__, "compliance_policies", compliance_policies)
        if delete_in_progress is not None:
            pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        if domain_ocid is not None:
            pulumi.set(__self__, "domain_ocid", domain_ocid)
        if email_enabled is not None:
            pulumi.set(__self__, "email_enabled", email_enabled)
        if email_settings is not None:
            pulumi.set(__self__, "email_settings", email_settings)
        if endpoint_restrictions is not None:
            pulumi.set(__self__, "endpoint_restrictions", endpoint_restrictions)
        if fido_authenticator_enabled is not None:
            pulumi.set(__self__, "fido_authenticator_enabled", fido_authenticator_enabled)
        if hide_backup_factor_enabled is not None:
            pulumi.set(__self__, "hide_backup_factor_enabled", hide_backup_factor_enabled)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if idcs_created_bies is not None:
            pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        if idcs_endpoint is not None:
            pulumi.set(__self__, "idcs_endpoint", idcs_endpoint)
        if idcs_last_modified_bies is not None:
            pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        if idcs_last_upgraded_in_release is not None:
            pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        if idcs_prevented_operations is not None:
            pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        if identity_store_settings is not None:
            pulumi.set(__self__, "identity_store_settings", identity_store_settings)
        if metas is not None:
            pulumi.set(__self__, "metas", metas)
        if mfa_enabled_category is not None:
            pulumi.set(__self__, "mfa_enabled_category", mfa_enabled_category)
        if mfa_enrollment_type is not None:
            pulumi.set(__self__, "mfa_enrollment_type", mfa_enrollment_type)
        if notification_settings is not None:
            pulumi.set(__self__, "notification_settings", notification_settings)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if phone_call_enabled is not None:
            pulumi.set(__self__, "phone_call_enabled", phone_call_enabled)
        if push_enabled is not None:
            pulumi.set(__self__, "push_enabled", push_enabled)
        if resource_type_schema_version is not None:
            pulumi.set(__self__, "resource_type_schema_version", resource_type_schema_version)
        if schemas is not None:
            pulumi.set(__self__, "schemas", schemas)
        if security_questions_enabled is not None:
            pulumi.set(__self__, "security_questions_enabled", security_questions_enabled)
        if sms_enabled is not None:
            pulumi.set(__self__, "sms_enabled", sms_enabled)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tenancy_ocid is not None:
            pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)
        if third_party_factors is not None:
            pulumi.set(__self__, "third_party_factors", third_party_factors)
        if totp_enabled is not None:
            pulumi.set(__self__, "totp_enabled", totp_enabled)
        if totp_settings is not None:
            pulumi.set(__self__, "totp_settings", totp_settings)
        if urnietfparamsscimschemasoracleidcsextensionfido_authentication_factor_settings is not None:
            pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionfido_authentication_factor_settings", urnietfparamsscimschemasoracleidcsextensionfido_authentication_factor_settings)
        if urnietfparamsscimschemasoracleidcsextensionthird_party_authentication_factor_settings is not None:
            pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionthird_party_authentication_factor_settings", urnietfparamsscimschemasoracleidcsextensionthird_party_authentication_factor_settings)
        if user_enrollment_disabled_factors is not None:
            pulumi.set(__self__, "user_enrollment_disabled_factors", user_enrollment_disabled_factors)
        if yubico_otp_enabled is not None:
            pulumi.set(__self__, "yubico_otp_enabled", yubico_otp_enabled)

    @property
    @pulumi.getter(name="attributeSets")
    def attribute_sets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "attribute_sets")

    @property
    @pulumi.getter
    def attributes(self) -> Optional[str]:
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter(name="authenticationFactorSettingId")
    def authentication_factor_setting_id(self) -> Optional[str]:
        return pulumi.get(self, "authentication_factor_setting_id")

    @property
    @pulumi.getter
    def authorization(self) -> Optional[str]:
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="autoEnrollEmailFactorDisabled")
    def auto_enroll_email_factor_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "auto_enroll_email_factor_disabled")

    @property
    @pulumi.getter(name="bypassCodeEnabled")
    def bypass_code_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "bypass_code_enabled")

    @property
    @pulumi.getter(name="bypassCodeSettings")
    def bypass_code_settings(self) -> Optional[Sequence['outputs.GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingBypassCodeSettingResult']]:
        return pulumi.get(self, "bypass_code_settings")

    @property
    @pulumi.getter(name="clientAppSettings")
    def client_app_settings(self) -> Optional[Sequence['outputs.GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingClientAppSettingResult']]:
        return pulumi.get(self, "client_app_settings")

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> Optional[str]:
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="compliancePolicies")
    def compliance_policies(self) -> Optional[Sequence['outputs.GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingCompliancePolicyResult']]:
        return pulumi.get(self, "compliance_policies")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> Optional[bool]:
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> Optional[str]:
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter(name="emailEnabled")
    def email_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "email_enabled")

    @property
    @pulumi.getter(name="emailSettings")
    def email_settings(self) -> Optional[Sequence['outputs.GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingEmailSettingResult']]:
        return pulumi.get(self, "email_settings")

    @property
    @pulumi.getter(name="endpointRestrictions")
    def endpoint_restrictions(self) -> Optional[Sequence['outputs.GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingEndpointRestrictionResult']]:
        return pulumi.get(self, "endpoint_restrictions")

    @property
    @pulumi.getter(name="fidoAuthenticatorEnabled")
    def fido_authenticator_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "fido_authenticator_enabled")

    @property
    @pulumi.getter(name="hideBackupFactorEnabled")
    def hide_backup_factor_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "hide_backup_factor_enabled")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Optional[Sequence['outputs.GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingIdcsCreatedByResult']]:
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "idcs_endpoint")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Optional[Sequence['outputs.GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingIdcsLastModifiedByResult']]:
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> Optional[str]:
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter(name="identityStoreSettings")
    def identity_store_settings(self) -> Optional[Sequence['outputs.GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingIdentityStoreSettingResult']]:
        return pulumi.get(self, "identity_store_settings")

    @property
    @pulumi.getter
    def metas(self) -> Optional[Sequence['outputs.GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingMetaResult']]:
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter(name="mfaEnabledCategory")
    def mfa_enabled_category(self) -> Optional[str]:
        return pulumi.get(self, "mfa_enabled_category")

    @property
    @pulumi.getter(name="mfaEnrollmentType")
    def mfa_enrollment_type(self) -> Optional[str]:
        return pulumi.get(self, "mfa_enrollment_type")

    @property
    @pulumi.getter(name="notificationSettings")
    def notification_settings(self) -> Optional[Sequence['outputs.GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingNotificationSettingResult']]:
        return pulumi.get(self, "notification_settings")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="phoneCallEnabled")
    def phone_call_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "phone_call_enabled")

    @property
    @pulumi.getter(name="pushEnabled")
    def push_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "push_enabled")

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> Optional[str]:
        return pulumi.get(self, "resource_type_schema_version")

    @property
    @pulumi.getter
    def schemas(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter(name="securityQuestionsEnabled")
    def security_questions_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "security_questions_enabled")

    @property
    @pulumi.getter(name="smsEnabled")
    def sms_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "sms_enabled")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingTagResult']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> Optional[str]:
        return pulumi.get(self, "tenancy_ocid")

    @property
    @pulumi.getter(name="thirdPartyFactors")
    def third_party_factors(self) -> Optional[Sequence['outputs.GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingThirdPartyFactorResult']]:
        return pulumi.get(self, "third_party_factors")

    @property
    @pulumi.getter(name="totpEnabled")
    def totp_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "totp_enabled")

    @property
    @pulumi.getter(name="totpSettings")
    def totp_settings(self) -> Optional[Sequence['outputs.GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingTotpSettingResult']]:
        return pulumi.get(self, "totp_settings")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionfidoAuthenticationFactorSettings")
    def urnietfparamsscimschemasoracleidcsextensionfido_authentication_factor_settings(self) -> Optional[Sequence['outputs.GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionfidoAuthenticationFactorSettingResult']]:
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionfido_authentication_factor_settings")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettings")
    def urnietfparamsscimschemasoracleidcsextensionthird_party_authentication_factor_settings(self) -> Optional[Sequence['outputs.GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettingResult']]:
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionthird_party_authentication_factor_settings")

    @property
    @pulumi.getter(name="userEnrollmentDisabledFactors")
    def user_enrollment_disabled_factors(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "user_enrollment_disabled_factors")

    @property
    @pulumi.getter(name="yubicoOtpEnabled")
    def yubico_otp_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "yubico_otp_enabled")


@pulumi.output_type
class GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingBypassCodeSettingResult(dict):
    def __init__(__self__, *,
                 help_desk_code_expiry_in_mins: Optional[int] = None,
                 help_desk_generation_enabled: Optional[bool] = None,
                 help_desk_max_usage: Optional[int] = None,
                 length: Optional[int] = None,
                 max_active: Optional[int] = None,
                 self_service_generation_enabled: Optional[bool] = None):
        if help_desk_code_expiry_in_mins is not None:
            pulumi.set(__self__, "help_desk_code_expiry_in_mins", help_desk_code_expiry_in_mins)
        if help_desk_generation_enabled is not None:
            pulumi.set(__self__, "help_desk_generation_enabled", help_desk_generation_enabled)
        if help_desk_max_usage is not None:
            pulumi.set(__self__, "help_desk_max_usage", help_desk_max_usage)
        if length is not None:
            pulumi.set(__self__, "length", length)
        if max_active is not None:
            pulumi.set(__self__, "max_active", max_active)
        if self_service_generation_enabled is not None:
            pulumi.set(__self__, "self_service_generation_enabled", self_service_generation_enabled)

    @property
    @pulumi.getter(name="helpDeskCodeExpiryInMins")
    def help_desk_code_expiry_in_mins(self) -> Optional[int]:
        return pulumi.get(self, "help_desk_code_expiry_in_mins")

    @property
    @pulumi.getter(name="helpDeskGenerationEnabled")
    def help_desk_generation_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "help_desk_generation_enabled")

    @property
    @pulumi.getter(name="helpDeskMaxUsage")
    def help_desk_max_usage(self) -> Optional[int]:
        return pulumi.get(self, "help_desk_max_usage")

    @property
    @pulumi.getter
    def length(self) -> Optional[int]:
        return pulumi.get(self, "length")

    @property
    @pulumi.getter(name="maxActive")
    def max_active(self) -> Optional[int]:
        return pulumi.get(self, "max_active")

    @property
    @pulumi.getter(name="selfServiceGenerationEnabled")
    def self_service_generation_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "self_service_generation_enabled")


@pulumi.output_type
class GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingClientAppSettingResult(dict):
    def __init__(__self__, *,
                 device_protection_policy: Optional[str] = None,
                 initial_lockout_period_in_secs: Optional[int] = None,
                 key_pair_length: Optional[int] = None,
                 lockout_escalation_pattern: Optional[str] = None,
                 max_failures_before_lockout: Optional[int] = None,
                 max_failures_before_warning: Optional[int] = None,
                 max_lockout_interval_in_secs: Optional[int] = None,
                 min_pin_length: Optional[int] = None,
                 policy_update_freq_in_days: Optional[int] = None,
                 request_signing_algo: Optional[str] = None,
                 shared_secret_encoding: Optional[str] = None,
                 unlock_app_for_each_request_enabled: Optional[bool] = None,
                 unlock_app_interval_in_secs: Optional[int] = None,
                 unlock_on_app_foreground_enabled: Optional[bool] = None,
                 unlock_on_app_start_enabled: Optional[bool] = None):
        if device_protection_policy is not None:
            pulumi.set(__self__, "device_protection_policy", device_protection_policy)
        if initial_lockout_period_in_secs is not None:
            pulumi.set(__self__, "initial_lockout_period_in_secs", initial_lockout_period_in_secs)
        if key_pair_length is not None:
            pulumi.set(__self__, "key_pair_length", key_pair_length)
        if lockout_escalation_pattern is not None:
            pulumi.set(__self__, "lockout_escalation_pattern", lockout_escalation_pattern)
        if max_failures_before_lockout is not None:
            pulumi.set(__self__, "max_failures_before_lockout", max_failures_before_lockout)
        if max_failures_before_warning is not None:
            pulumi.set(__self__, "max_failures_before_warning", max_failures_before_warning)
        if max_lockout_interval_in_secs is not None:
            pulumi.set(__self__, "max_lockout_interval_in_secs", max_lockout_interval_in_secs)
        if min_pin_length is not None:
            pulumi.set(__self__, "min_pin_length", min_pin_length)
        if policy_update_freq_in_days is not None:
            pulumi.set(__self__, "policy_update_freq_in_days", policy_update_freq_in_days)
        if request_signing_algo is not None:
            pulumi.set(__self__, "request_signing_algo", request_signing_algo)
        if shared_secret_encoding is not None:
            pulumi.set(__self__, "shared_secret_encoding", shared_secret_encoding)
        if unlock_app_for_each_request_enabled is not None:
            pulumi.set(__self__, "unlock_app_for_each_request_enabled", unlock_app_for_each_request_enabled)
        if unlock_app_interval_in_secs is not None:
            pulumi.set(__self__, "unlock_app_interval_in_secs", unlock_app_interval_in_secs)
        if unlock_on_app_foreground_enabled is not None:
            pulumi.set(__self__, "unlock_on_app_foreground_enabled", unlock_on_app_foreground_enabled)
        if unlock_on_app_start_enabled is not None:
            pulumi.set(__self__, "unlock_on_app_start_enabled", unlock_on_app_start_enabled)

    @property
    @pulumi.getter(name="deviceProtectionPolicy")
    def device_protection_policy(self) -> Optional[str]:
        return pulumi.get(self, "device_protection_policy")

    @property
    @pulumi.getter(name="initialLockoutPeriodInSecs")
    def initial_lockout_period_in_secs(self) -> Optional[int]:
        return pulumi.get(self, "initial_lockout_period_in_secs")

    @property
    @pulumi.getter(name="keyPairLength")
    def key_pair_length(self) -> Optional[int]:
        return pulumi.get(self, "key_pair_length")

    @property
    @pulumi.getter(name="lockoutEscalationPattern")
    def lockout_escalation_pattern(self) -> Optional[str]:
        return pulumi.get(self, "lockout_escalation_pattern")

    @property
    @pulumi.getter(name="maxFailuresBeforeLockout")
    def max_failures_before_lockout(self) -> Optional[int]:
        return pulumi.get(self, "max_failures_before_lockout")

    @property
    @pulumi.getter(name="maxFailuresBeforeWarning")
    def max_failures_before_warning(self) -> Optional[int]:
        return pulumi.get(self, "max_failures_before_warning")

    @property
    @pulumi.getter(name="maxLockoutIntervalInSecs")
    def max_lockout_interval_in_secs(self) -> Optional[int]:
        return pulumi.get(self, "max_lockout_interval_in_secs")

    @property
    @pulumi.getter(name="minPinLength")
    def min_pin_length(self) -> Optional[int]:
        return pulumi.get(self, "min_pin_length")

    @property
    @pulumi.getter(name="policyUpdateFreqInDays")
    def policy_update_freq_in_days(self) -> Optional[int]:
        return pulumi.get(self, "policy_update_freq_in_days")

    @property
    @pulumi.getter(name="requestSigningAlgo")
    def request_signing_algo(self) -> Optional[str]:
        return pulumi.get(self, "request_signing_algo")

    @property
    @pulumi.getter(name="sharedSecretEncoding")
    def shared_secret_encoding(self) -> Optional[str]:
        return pulumi.get(self, "shared_secret_encoding")

    @property
    @pulumi.getter(name="unlockAppForEachRequestEnabled")
    def unlock_app_for_each_request_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "unlock_app_for_each_request_enabled")

    @property
    @pulumi.getter(name="unlockAppIntervalInSecs")
    def unlock_app_interval_in_secs(self) -> Optional[int]:
        return pulumi.get(self, "unlock_app_interval_in_secs")

    @property
    @pulumi.getter(name="unlockOnAppForegroundEnabled")
    def unlock_on_app_foreground_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "unlock_on_app_foreground_enabled")

    @property
    @pulumi.getter(name="unlockOnAppStartEnabled")
    def unlock_on_app_start_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "unlock_on_app_start_enabled")


@pulumi.output_type
class GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingCompliancePolicyResult(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingEmailSettingResult(dict):
    def __init__(__self__, *,
                 email_link_custom_url: Optional[str] = None,
                 email_link_enabled: Optional[bool] = None):
        if email_link_custom_url is not None:
            pulumi.set(__self__, "email_link_custom_url", email_link_custom_url)
        if email_link_enabled is not None:
            pulumi.set(__self__, "email_link_enabled", email_link_enabled)

    @property
    @pulumi.getter(name="emailLinkCustomUrl")
    def email_link_custom_url(self) -> Optional[str]:
        return pulumi.get(self, "email_link_custom_url")

    @property
    @pulumi.getter(name="emailLinkEnabled")
    def email_link_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "email_link_enabled")


@pulumi.output_type
class GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingEndpointRestrictionResult(dict):
    def __init__(__self__, *,
                 max_endpoint_trust_duration_in_days: Optional[int] = None,
                 max_enrolled_devices: Optional[int] = None,
                 max_incorrect_attempts: Optional[int] = None,
                 max_trusted_endpoints: Optional[int] = None,
                 trusted_endpoints_enabled: Optional[bool] = None):
        if max_endpoint_trust_duration_in_days is not None:
            pulumi.set(__self__, "max_endpoint_trust_duration_in_days", max_endpoint_trust_duration_in_days)
        if max_enrolled_devices is not None:
            pulumi.set(__self__, "max_enrolled_devices", max_enrolled_devices)
        if max_incorrect_attempts is not None:
            pulumi.set(__self__, "max_incorrect_attempts", max_incorrect_attempts)
        if max_trusted_endpoints is not None:
            pulumi.set(__self__, "max_trusted_endpoints", max_trusted_endpoints)
        if trusted_endpoints_enabled is not None:
            pulumi.set(__self__, "trusted_endpoints_enabled", trusted_endpoints_enabled)

    @property
    @pulumi.getter(name="maxEndpointTrustDurationInDays")
    def max_endpoint_trust_duration_in_days(self) -> Optional[int]:
        return pulumi.get(self, "max_endpoint_trust_duration_in_days")

    @property
    @pulumi.getter(name="maxEnrolledDevices")
    def max_enrolled_devices(self) -> Optional[int]:
        return pulumi.get(self, "max_enrolled_devices")

    @property
    @pulumi.getter(name="maxIncorrectAttempts")
    def max_incorrect_attempts(self) -> Optional[int]:
        return pulumi.get(self, "max_incorrect_attempts")

    @property
    @pulumi.getter(name="maxTrustedEndpoints")
    def max_trusted_endpoints(self) -> Optional[int]:
        return pulumi.get(self, "max_trusted_endpoints")

    @property
    @pulumi.getter(name="trustedEndpointsEnabled")
    def trusted_endpoints_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "trusted_endpoints_enabled")


@pulumi.output_type
class GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingIdentityStoreSettingResult(dict):
    def __init__(__self__, *,
                 mobile_number_enabled: Optional[bool] = None,
                 mobile_number_update_enabled: Optional[bool] = None):
        if mobile_number_enabled is not None:
            pulumi.set(__self__, "mobile_number_enabled", mobile_number_enabled)
        if mobile_number_update_enabled is not None:
            pulumi.set(__self__, "mobile_number_update_enabled", mobile_number_update_enabled)

    @property
    @pulumi.getter(name="mobileNumberEnabled")
    def mobile_number_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "mobile_number_enabled")

    @property
    @pulumi.getter(name="mobileNumberUpdateEnabled")
    def mobile_number_update_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "mobile_number_update_enabled")


@pulumi.output_type
class GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingMetaResult(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingNotificationSettingResult(dict):
    def __init__(__self__, *,
                 pull_enabled: Optional[bool] = None):
        if pull_enabled is not None:
            pulumi.set(__self__, "pull_enabled", pull_enabled)

    @property
    @pulumi.getter(name="pullEnabled")
    def pull_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "pull_enabled")


@pulumi.output_type
class GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingThirdPartyFactorResult(dict):
    def __init__(__self__, *,
                 duo_security: Optional[bool] = None):
        if duo_security is not None:
            pulumi.set(__self__, "duo_security", duo_security)

    @property
    @pulumi.getter(name="duoSecurity")
    def duo_security(self) -> Optional[bool]:
        return pulumi.get(self, "duo_security")


@pulumi.output_type
class GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingTotpSettingResult(dict):
    def __init__(__self__, *,
                 email_otp_validity_duration_in_mins: Optional[int] = None,
                 email_passcode_length: Optional[int] = None,
                 hashing_algorithm: Optional[str] = None,
                 jwt_validity_duration_in_secs: Optional[int] = None,
                 key_refresh_interval_in_days: Optional[int] = None,
                 passcode_length: Optional[int] = None,
                 sms_otp_validity_duration_in_mins: Optional[int] = None,
                 sms_passcode_length: Optional[int] = None,
                 time_step_in_secs: Optional[int] = None,
                 time_step_tolerance: Optional[int] = None):
        if email_otp_validity_duration_in_mins is not None:
            pulumi.set(__self__, "email_otp_validity_duration_in_mins", email_otp_validity_duration_in_mins)
        if email_passcode_length is not None:
            pulumi.set(__self__, "email_passcode_length", email_passcode_length)
        if hashing_algorithm is not None:
            pulumi.set(__self__, "hashing_algorithm", hashing_algorithm)
        if jwt_validity_duration_in_secs is not None:
            pulumi.set(__self__, "jwt_validity_duration_in_secs", jwt_validity_duration_in_secs)
        if key_refresh_interval_in_days is not None:
            pulumi.set(__self__, "key_refresh_interval_in_days", key_refresh_interval_in_days)
        if passcode_length is not None:
            pulumi.set(__self__, "passcode_length", passcode_length)
        if sms_otp_validity_duration_in_mins is not None:
            pulumi.set(__self__, "sms_otp_validity_duration_in_mins", sms_otp_validity_duration_in_mins)
        if sms_passcode_length is not None:
            pulumi.set(__self__, "sms_passcode_length", sms_passcode_length)
        if time_step_in_secs is not None:
            pulumi.set(__self__, "time_step_in_secs", time_step_in_secs)
        if time_step_tolerance is not None:
            pulumi.set(__self__, "time_step_tolerance", time_step_tolerance)

    @property
    @pulumi.getter(name="emailOtpValidityDurationInMins")
    def email_otp_validity_duration_in_mins(self) -> Optional[int]:
        return pulumi.get(self, "email_otp_validity_duration_in_mins")

    @property
    @pulumi.getter(name="emailPasscodeLength")
    def email_passcode_length(self) -> Optional[int]:
        return pulumi.get(self, "email_passcode_length")

    @property
    @pulumi.getter(name="hashingAlgorithm")
    def hashing_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "hashing_algorithm")

    @property
    @pulumi.getter(name="jwtValidityDurationInSecs")
    def jwt_validity_duration_in_secs(self) -> Optional[int]:
        return pulumi.get(self, "jwt_validity_duration_in_secs")

    @property
    @pulumi.getter(name="keyRefreshIntervalInDays")
    def key_refresh_interval_in_days(self) -> Optional[int]:
        return pulumi.get(self, "key_refresh_interval_in_days")

    @property
    @pulumi.getter(name="passcodeLength")
    def passcode_length(self) -> Optional[int]:
        return pulumi.get(self, "passcode_length")

    @property
    @pulumi.getter(name="smsOtpValidityDurationInMins")
    def sms_otp_validity_duration_in_mins(self) -> Optional[int]:
        return pulumi.get(self, "sms_otp_validity_duration_in_mins")

    @property
    @pulumi.getter(name="smsPasscodeLength")
    def sms_passcode_length(self) -> Optional[int]:
        return pulumi.get(self, "sms_passcode_length")

    @property
    @pulumi.getter(name="timeStepInSecs")
    def time_step_in_secs(self) -> Optional[int]:
        return pulumi.get(self, "time_step_in_secs")

    @property
    @pulumi.getter(name="timeStepTolerance")
    def time_step_tolerance(self) -> Optional[int]:
        return pulumi.get(self, "time_step_tolerance")


@pulumi.output_type
class GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionfidoAuthenticationFactorSettingResult(dict):
    def __init__(__self__, *,
                 attestation: Optional[str] = None,
                 authenticator_selection_attachment: Optional[str] = None,
                 authenticator_selection_require_resident_key: Optional[bool] = None,
                 authenticator_selection_resident_key: Optional[str] = None,
                 authenticator_selection_user_verification: Optional[str] = None,
                 domain_validation_level: Optional[int] = None,
                 exclude_credentials: Optional[bool] = None,
                 public_key_types: Optional[Sequence[str]] = None,
                 timeout: Optional[int] = None):
        if attestation is not None:
            pulumi.set(__self__, "attestation", attestation)
        if authenticator_selection_attachment is not None:
            pulumi.set(__self__, "authenticator_selection_attachment", authenticator_selection_attachment)
        if authenticator_selection_require_resident_key is not None:
            pulumi.set(__self__, "authenticator_selection_require_resident_key", authenticator_selection_require_resident_key)
        if authenticator_selection_resident_key is not None:
            pulumi.set(__self__, "authenticator_selection_resident_key", authenticator_selection_resident_key)
        if authenticator_selection_user_verification is not None:
            pulumi.set(__self__, "authenticator_selection_user_verification", authenticator_selection_user_verification)
        if domain_validation_level is not None:
            pulumi.set(__self__, "domain_validation_level", domain_validation_level)
        if exclude_credentials is not None:
            pulumi.set(__self__, "exclude_credentials", exclude_credentials)
        if public_key_types is not None:
            pulumi.set(__self__, "public_key_types", public_key_types)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def attestation(self) -> Optional[str]:
        return pulumi.get(self, "attestation")

    @property
    @pulumi.getter(name="authenticatorSelectionAttachment")
    def authenticator_selection_attachment(self) -> Optional[str]:
        return pulumi.get(self, "authenticator_selection_attachment")

    @property
    @pulumi.getter(name="authenticatorSelectionRequireResidentKey")
    def authenticator_selection_require_resident_key(self) -> Optional[bool]:
        return pulumi.get(self, "authenticator_selection_require_resident_key")

    @property
    @pulumi.getter(name="authenticatorSelectionResidentKey")
    def authenticator_selection_resident_key(self) -> Optional[str]:
        return pulumi.get(self, "authenticator_selection_resident_key")

    @property
    @pulumi.getter(name="authenticatorSelectionUserVerification")
    def authenticator_selection_user_verification(self) -> Optional[str]:
        return pulumi.get(self, "authenticator_selection_user_verification")

    @property
    @pulumi.getter(name="domainValidationLevel")
    def domain_validation_level(self) -> Optional[int]:
        return pulumi.get(self, "domain_validation_level")

    @property
    @pulumi.getter(name="excludeCredentials")
    def exclude_credentials(self) -> Optional[bool]:
        return pulumi.get(self, "exclude_credentials")

    @property
    @pulumi.getter(name="publicKeyTypes")
    def public_key_types(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "public_key_types")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[int]:
        return pulumi.get(self, "timeout")


@pulumi.output_type
class GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettingResult(dict):
    def __init__(__self__, *,
                 duo_security_settings: Optional[Sequence['outputs.GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettingDuoSecuritySettingResult']] = None):
        if duo_security_settings is not None:
            pulumi.set(__self__, "duo_security_settings", duo_security_settings)

    @property
    @pulumi.getter(name="duoSecuritySettings")
    def duo_security_settings(self) -> Optional[Sequence['outputs.GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettingDuoSecuritySettingResult']]:
        return pulumi.get(self, "duo_security_settings")


@pulumi.output_type
class GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettingDuoSecuritySettingResult(dict):
    def __init__(__self__, *,
                 api_hostname: Optional[str] = None,
                 attestation_key: Optional[str] = None,
                 integration_key: Optional[str] = None,
                 secret_key: Optional[str] = None,
                 user_mapping_attribute: Optional[str] = None):
        if api_hostname is not None:
            pulumi.set(__self__, "api_hostname", api_hostname)
        if attestation_key is not None:
            pulumi.set(__self__, "attestation_key", attestation_key)
        if integration_key is not None:
            pulumi.set(__self__, "integration_key", integration_key)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)
        if user_mapping_attribute is not None:
            pulumi.set(__self__, "user_mapping_attribute", user_mapping_attribute)

    @property
    @pulumi.getter(name="apiHostname")
    def api_hostname(self) -> Optional[str]:
        return pulumi.get(self, "api_hostname")

    @property
    @pulumi.getter(name="attestationKey")
    def attestation_key(self) -> Optional[str]:
        return pulumi.get(self, "attestation_key")

    @property
    @pulumi.getter(name="integrationKey")
    def integration_key(self) -> Optional[str]:
        return pulumi.get(self, "integration_key")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[str]:
        return pulumi.get(self, "secret_key")

    @property
    @pulumi.getter(name="userMappingAttribute")
    def user_mapping_attribute(self) -> Optional[str]:
        return pulumi.get(self, "user_mapping_attribute")


@pulumi.output_type
class GetDomainsCustomerSecretKeyIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsCustomerSecretKeyIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsCustomerSecretKeyMetaResult(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsCustomerSecretKeyTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsCustomerSecretKeyUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult(dict):
    def __init__(__self__, *,
                 allow_self_change: Optional[bool] = None):
        if allow_self_change is not None:
            pulumi.set(__self__, "allow_self_change", allow_self_change)

    @property
    @pulumi.getter(name="allowSelfChange")
    def allow_self_change(self) -> Optional[bool]:
        return pulumi.get(self, "allow_self_change")


@pulumi.output_type
class GetDomainsCustomerSecretKeyUserResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsCustomerSecretKeysCustomerSecretKeyResult(dict):
    def __init__(__self__, *,
                 access_key: Optional[str] = None,
                 attribute_sets: Optional[Sequence[str]] = None,
                 attributes: Optional[str] = None,
                 authorization: Optional[str] = None,
                 compartment_ocid: Optional[str] = None,
                 delete_in_progress: Optional[bool] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 domain_ocid: Optional[str] = None,
                 expires_on: Optional[str] = None,
                 id: Optional[str] = None,
                 idcs_created_bies: Optional[Sequence['outputs.GetDomainsCustomerSecretKeysCustomerSecretKeyIdcsCreatedByResult']] = None,
                 idcs_endpoint: Optional[str] = None,
                 idcs_last_modified_bies: Optional[Sequence['outputs.GetDomainsCustomerSecretKeysCustomerSecretKeyIdcsLastModifiedByResult']] = None,
                 idcs_last_upgraded_in_release: Optional[str] = None,
                 idcs_prevented_operations: Optional[Sequence[str]] = None,
                 metas: Optional[Sequence['outputs.GetDomainsCustomerSecretKeysCustomerSecretKeyMetaResult']] = None,
                 ocid: Optional[str] = None,
                 resource_type_schema_version: Optional[str] = None,
                 schemas: Optional[Sequence[str]] = None,
                 status: Optional[str] = None,
                 tags: Optional[Sequence['outputs.GetDomainsCustomerSecretKeysCustomerSecretKeyTagResult']] = None,
                 tenancy_ocid: Optional[str] = None,
                 urnietfparamsscimschemasoracleidcsextensionself_change_users: Optional[Sequence['outputs.GetDomainsCustomerSecretKeysCustomerSecretKeyUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult']] = None,
                 users: Optional[Sequence['outputs.GetDomainsCustomerSecretKeysCustomerSecretKeyUserResult']] = None):
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if attribute_sets is not None:
            pulumi.set(__self__, "attribute_sets", attribute_sets)
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)
        if authorization is not None:
            pulumi.set(__self__, "authorization", authorization)
        if compartment_ocid is not None:
            pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        if delete_in_progress is not None:
            pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if domain_ocid is not None:
            pulumi.set(__self__, "domain_ocid", domain_ocid)
        if expires_on is not None:
            pulumi.set(__self__, "expires_on", expires_on)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if idcs_created_bies is not None:
            pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        if idcs_endpoint is not None:
            pulumi.set(__self__, "idcs_endpoint", idcs_endpoint)
        if idcs_last_modified_bies is not None:
            pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        if idcs_last_upgraded_in_release is not None:
            pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        if idcs_prevented_operations is not None:
            pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        if metas is not None:
            pulumi.set(__self__, "metas", metas)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if resource_type_schema_version is not None:
            pulumi.set(__self__, "resource_type_schema_version", resource_type_schema_version)
        if schemas is not None:
            pulumi.set(__self__, "schemas", schemas)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tenancy_ocid is not None:
            pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)
        if urnietfparamsscimschemasoracleidcsextensionself_change_users is not None:
            pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionself_change_users", urnietfparamsscimschemasoracleidcsextensionself_change_users)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[str]:
        return pulumi.get(self, "access_key")

    @property
    @pulumi.getter(name="attributeSets")
    def attribute_sets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "attribute_sets")

    @property
    @pulumi.getter
    def attributes(self) -> Optional[str]:
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter
    def authorization(self) -> Optional[str]:
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> Optional[str]:
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> Optional[bool]:
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> Optional[str]:
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter(name="expiresOn")
    def expires_on(self) -> Optional[str]:
        return pulumi.get(self, "expires_on")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Optional[Sequence['outputs.GetDomainsCustomerSecretKeysCustomerSecretKeyIdcsCreatedByResult']]:
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "idcs_endpoint")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Optional[Sequence['outputs.GetDomainsCustomerSecretKeysCustomerSecretKeyIdcsLastModifiedByResult']]:
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> Optional[str]:
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter
    def metas(self) -> Optional[Sequence['outputs.GetDomainsCustomerSecretKeysCustomerSecretKeyMetaResult']]:
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> Optional[str]:
        return pulumi.get(self, "resource_type_schema_version")

    @property
    @pulumi.getter
    def schemas(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.GetDomainsCustomerSecretKeysCustomerSecretKeyTagResult']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> Optional[str]:
        return pulumi.get(self, "tenancy_ocid")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionselfChangeUsers")
    def urnietfparamsscimschemasoracleidcsextensionself_change_users(self) -> Optional[Sequence['outputs.GetDomainsCustomerSecretKeysCustomerSecretKeyUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult']]:
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionself_change_users")

    @property
    @pulumi.getter
    def users(self) -> Optional[Sequence['outputs.GetDomainsCustomerSecretKeysCustomerSecretKeyUserResult']]:
        return pulumi.get(self, "users")


@pulumi.output_type
class GetDomainsCustomerSecretKeysCustomerSecretKeyIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsCustomerSecretKeysCustomerSecretKeyIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsCustomerSecretKeysCustomerSecretKeyMetaResult(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsCustomerSecretKeysCustomerSecretKeyTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsCustomerSecretKeysCustomerSecretKeyUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult(dict):
    def __init__(__self__, *,
                 allow_self_change: Optional[bool] = None):
        if allow_self_change is not None:
            pulumi.set(__self__, "allow_self_change", allow_self_change)

    @property
    @pulumi.getter(name="allowSelfChange")
    def allow_self_change(self) -> Optional[bool]:
        return pulumi.get(self, "allow_self_change")


@pulumi.output_type
class GetDomainsCustomerSecretKeysCustomerSecretKeyUserResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsDomainResult(dict):
    def __init__(__self__, *,
                 admin_email: Optional[str] = None,
                 admin_first_name: Optional[str] = None,
                 admin_last_name: Optional[str] = None,
                 admin_user_name: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 home_region: Optional[str] = None,
                 home_region_url: Optional[str] = None,
                 id: Optional[str] = None,
                 is_hidden_on_login: Optional[bool] = None,
                 is_notification_bypassed: Optional[bool] = None,
                 is_primary_email_required: Optional[bool] = None,
                 license_type: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 replica_regions: Optional[Sequence['outputs.GetDomainsDomainReplicaRegionResult']] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 type: Optional[str] = None,
                 url: Optional[str] = None):
        if admin_email is not None:
            pulumi.set(__self__, "admin_email", admin_email)
        if admin_first_name is not None:
            pulumi.set(__self__, "admin_first_name", admin_first_name)
        if admin_last_name is not None:
            pulumi.set(__self__, "admin_last_name", admin_last_name)
        if admin_user_name is not None:
            pulumi.set(__self__, "admin_user_name", admin_user_name)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if home_region is not None:
            pulumi.set(__self__, "home_region", home_region)
        if home_region_url is not None:
            pulumi.set(__self__, "home_region_url", home_region_url)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_hidden_on_login is not None:
            pulumi.set(__self__, "is_hidden_on_login", is_hidden_on_login)
        if is_notification_bypassed is not None:
            pulumi.set(__self__, "is_notification_bypassed", is_notification_bypassed)
        if is_primary_email_required is not None:
            pulumi.set(__self__, "is_primary_email_required", is_primary_email_required)
        if license_type is not None:
            pulumi.set(__self__, "license_type", license_type)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if replica_regions is not None:
            pulumi.set(__self__, "replica_regions", replica_regions)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="adminEmail")
    def admin_email(self) -> Optional[str]:
        return pulumi.get(self, "admin_email")

    @property
    @pulumi.getter(name="adminFirstName")
    def admin_first_name(self) -> Optional[str]:
        return pulumi.get(self, "admin_first_name")

    @property
    @pulumi.getter(name="adminLastName")
    def admin_last_name(self) -> Optional[str]:
        return pulumi.get(self, "admin_last_name")

    @property
    @pulumi.getter(name="adminUserName")
    def admin_user_name(self) -> Optional[str]:
        return pulumi.get(self, "admin_user_name")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="homeRegion")
    def home_region(self) -> Optional[str]:
        return pulumi.get(self, "home_region")

    @property
    @pulumi.getter(name="homeRegionUrl")
    def home_region_url(self) -> Optional[str]:
        return pulumi.get(self, "home_region_url")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isHiddenOnLogin")
    def is_hidden_on_login(self) -> Optional[bool]:
        return pulumi.get(self, "is_hidden_on_login")

    @property
    @pulumi.getter(name="isNotificationBypassed")
    def is_notification_bypassed(self) -> Optional[bool]:
        return pulumi.get(self, "is_notification_bypassed")

    @property
    @pulumi.getter(name="isPrimaryEmailRequired")
    def is_primary_email_required(self) -> Optional[bool]:
        return pulumi.get(self, "is_primary_email_required")

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> Optional[str]:
        return pulumi.get(self, "license_type")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="replicaRegions")
    def replica_regions(self) -> Optional[Sequence['outputs.GetDomainsDomainReplicaRegionResult']]:
        return pulumi.get(self, "replica_regions")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")


@pulumi.output_type
class GetDomainsDomainReplicaRegionResult(dict):
    def __init__(__self__, *,
                 region: Optional[str] = None,
                 state: Optional[str] = None,
                 url: Optional[str] = None):
        if region is not None:
            pulumi.set(__self__, "region", region)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")


@pulumi.output_type
class GetDomainsDynamicResourceGroupDynamicGroupAppRoleResult(dict):
    def __init__(__self__, *,
                 admin_role: Optional[bool] = None,
                 app_id: Optional[str] = None,
                 app_name: Optional[str] = None,
                 display: Optional[str] = None,
                 legacy_group_name: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if admin_role is not None:
            pulumi.set(__self__, "admin_role", admin_role)
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if app_name is not None:
            pulumi.set(__self__, "app_name", app_name)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if legacy_group_name is not None:
            pulumi.set(__self__, "legacy_group_name", legacy_group_name)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="adminRole")
    def admin_role(self) -> Optional[bool]:
        return pulumi.get(self, "admin_role")

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[str]:
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="appName")
    def app_name(self) -> Optional[str]:
        return pulumi.get(self, "app_name")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter(name="legacyGroupName")
    def legacy_group_name(self) -> Optional[str]:
        return pulumi.get(self, "legacy_group_name")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsDynamicResourceGroupGrantResult(dict):
    def __init__(__self__, *,
                 app_id: Optional[str] = None,
                 grant_mechanism: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if grant_mechanism is not None:
            pulumi.set(__self__, "grant_mechanism", grant_mechanism)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[str]:
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="grantMechanism")
    def grant_mechanism(self) -> Optional[str]:
        return pulumi.get(self, "grant_mechanism")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsDynamicResourceGroupIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsDynamicResourceGroupIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsDynamicResourceGroupMetaResult(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsDynamicResourceGroupTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagResult(dict):
    def __init__(__self__, *,
                 defined_tags: Optional[Sequence['outputs.GetDomainsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTagResult']] = None,
                 freeform_tags: Optional[Sequence['outputs.GetDomainsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTagResult']] = None,
                 tag_slug: Optional[str] = None):
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if tag_slug is not None:
            pulumi.set(__self__, "tag_slug", tag_slug)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Sequence['outputs.GetDomainsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTagResult']]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Sequence['outputs.GetDomainsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTagResult']]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="tagSlug")
    def tag_slug(self) -> Optional[str]:
        return pulumi.get(self, "tag_slug")


@pulumi.output_type
class GetDomainsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 namespace: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsDynamicResourceGroupsDynamicResourceGroupResult(dict):
    def __init__(__self__, *,
                 attribute_sets: Optional[Sequence[str]] = None,
                 attributes: Optional[str] = None,
                 authorization: Optional[str] = None,
                 compartment_ocid: Optional[str] = None,
                 delete_in_progress: Optional[bool] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 domain_ocid: Optional[str] = None,
                 dynamic_group_app_roles: Optional[Sequence['outputs.GetDomainsDynamicResourceGroupsDynamicResourceGroupDynamicGroupAppRoleResult']] = None,
                 grants: Optional[Sequence['outputs.GetDomainsDynamicResourceGroupsDynamicResourceGroupGrantResult']] = None,
                 id: Optional[str] = None,
                 idcs_created_bies: Optional[Sequence['outputs.GetDomainsDynamicResourceGroupsDynamicResourceGroupIdcsCreatedByResult']] = None,
                 idcs_endpoint: Optional[str] = None,
                 idcs_last_modified_bies: Optional[Sequence['outputs.GetDomainsDynamicResourceGroupsDynamicResourceGroupIdcsLastModifiedByResult']] = None,
                 idcs_last_upgraded_in_release: Optional[str] = None,
                 idcs_prevented_operations: Optional[Sequence[str]] = None,
                 matching_rule: Optional[str] = None,
                 metas: Optional[Sequence['outputs.GetDomainsDynamicResourceGroupsDynamicResourceGroupMetaResult']] = None,
                 ocid: Optional[str] = None,
                 resource_type_schema_version: Optional[str] = None,
                 schemas: Optional[Sequence[str]] = None,
                 tags: Optional[Sequence['outputs.GetDomainsDynamicResourceGroupsDynamicResourceGroupTagResult']] = None,
                 tenancy_ocid: Optional[str] = None,
                 urnietfparamsscimschemasoracleidcsextension_oci_tags: Optional[Sequence['outputs.GetDomainsDynamicResourceGroupsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagResult']] = None):
        if attribute_sets is not None:
            pulumi.set(__self__, "attribute_sets", attribute_sets)
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)
        if authorization is not None:
            pulumi.set(__self__, "authorization", authorization)
        if compartment_ocid is not None:
            pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        if delete_in_progress is not None:
            pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if domain_ocid is not None:
            pulumi.set(__self__, "domain_ocid", domain_ocid)
        if dynamic_group_app_roles is not None:
            pulumi.set(__self__, "dynamic_group_app_roles", dynamic_group_app_roles)
        if grants is not None:
            pulumi.set(__self__, "grants", grants)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if idcs_created_bies is not None:
            pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        if idcs_endpoint is not None:
            pulumi.set(__self__, "idcs_endpoint", idcs_endpoint)
        if idcs_last_modified_bies is not None:
            pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        if idcs_last_upgraded_in_release is not None:
            pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        if idcs_prevented_operations is not None:
            pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        if matching_rule is not None:
            pulumi.set(__self__, "matching_rule", matching_rule)
        if metas is not None:
            pulumi.set(__self__, "metas", metas)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if resource_type_schema_version is not None:
            pulumi.set(__self__, "resource_type_schema_version", resource_type_schema_version)
        if schemas is not None:
            pulumi.set(__self__, "schemas", schemas)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tenancy_ocid is not None:
            pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)
        if urnietfparamsscimschemasoracleidcsextension_oci_tags is not None:
            pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextension_oci_tags", urnietfparamsscimschemasoracleidcsextension_oci_tags)

    @property
    @pulumi.getter(name="attributeSets")
    def attribute_sets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "attribute_sets")

    @property
    @pulumi.getter
    def attributes(self) -> Optional[str]:
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter
    def authorization(self) -> Optional[str]:
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> Optional[str]:
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> Optional[bool]:
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> Optional[str]:
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter(name="dynamicGroupAppRoles")
    def dynamic_group_app_roles(self) -> Optional[Sequence['outputs.GetDomainsDynamicResourceGroupsDynamicResourceGroupDynamicGroupAppRoleResult']]:
        return pulumi.get(self, "dynamic_group_app_roles")

    @property
    @pulumi.getter
    def grants(self) -> Optional[Sequence['outputs.GetDomainsDynamicResourceGroupsDynamicResourceGroupGrantResult']]:
        return pulumi.get(self, "grants")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Optional[Sequence['outputs.GetDomainsDynamicResourceGroupsDynamicResourceGroupIdcsCreatedByResult']]:
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "idcs_endpoint")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Optional[Sequence['outputs.GetDomainsDynamicResourceGroupsDynamicResourceGroupIdcsLastModifiedByResult']]:
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> Optional[str]:
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter(name="matchingRule")
    def matching_rule(self) -> Optional[str]:
        return pulumi.get(self, "matching_rule")

    @property
    @pulumi.getter
    def metas(self) -> Optional[Sequence['outputs.GetDomainsDynamicResourceGroupsDynamicResourceGroupMetaResult']]:
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> Optional[str]:
        return pulumi.get(self, "resource_type_schema_version")

    @property
    @pulumi.getter
    def schemas(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.GetDomainsDynamicResourceGroupsDynamicResourceGroupTagResult']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> Optional[str]:
        return pulumi.get(self, "tenancy_ocid")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionOciTags")
    def urnietfparamsscimschemasoracleidcsextension_oci_tags(self) -> Optional[Sequence['outputs.GetDomainsDynamicResourceGroupsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagResult']]:
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextension_oci_tags")


@pulumi.output_type
class GetDomainsDynamicResourceGroupsDynamicResourceGroupDynamicGroupAppRoleResult(dict):
    def __init__(__self__, *,
                 admin_role: Optional[bool] = None,
                 app_id: Optional[str] = None,
                 app_name: Optional[str] = None,
                 display: Optional[str] = None,
                 legacy_group_name: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if admin_role is not None:
            pulumi.set(__self__, "admin_role", admin_role)
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if app_name is not None:
            pulumi.set(__self__, "app_name", app_name)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if legacy_group_name is not None:
            pulumi.set(__self__, "legacy_group_name", legacy_group_name)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="adminRole")
    def admin_role(self) -> Optional[bool]:
        return pulumi.get(self, "admin_role")

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[str]:
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="appName")
    def app_name(self) -> Optional[str]:
        return pulumi.get(self, "app_name")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter(name="legacyGroupName")
    def legacy_group_name(self) -> Optional[str]:
        return pulumi.get(self, "legacy_group_name")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsDynamicResourceGroupsDynamicResourceGroupGrantResult(dict):
    def __init__(__self__, *,
                 app_id: Optional[str] = None,
                 grant_mechanism: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if grant_mechanism is not None:
            pulumi.set(__self__, "grant_mechanism", grant_mechanism)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[str]:
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="grantMechanism")
    def grant_mechanism(self) -> Optional[str]:
        return pulumi.get(self, "grant_mechanism")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsDynamicResourceGroupsDynamicResourceGroupIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsDynamicResourceGroupsDynamicResourceGroupIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsDynamicResourceGroupsDynamicResourceGroupMetaResult(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsDynamicResourceGroupsDynamicResourceGroupTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsDynamicResourceGroupsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagResult(dict):
    def __init__(__self__, *,
                 defined_tags: Optional[Sequence['outputs.GetDomainsDynamicResourceGroupsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTagResult']] = None,
                 freeform_tags: Optional[Sequence['outputs.GetDomainsDynamicResourceGroupsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTagResult']] = None,
                 tag_slug: Optional[str] = None):
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if tag_slug is not None:
            pulumi.set(__self__, "tag_slug", tag_slug)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Sequence['outputs.GetDomainsDynamicResourceGroupsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTagResult']]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Sequence['outputs.GetDomainsDynamicResourceGroupsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTagResult']]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="tagSlug")
    def tag_slug(self) -> Optional[str]:
        return pulumi.get(self, "tag_slug")


@pulumi.output_type
class GetDomainsDynamicResourceGroupsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 namespace: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsDynamicResourceGroupsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDomainsGrantAppResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsGrantAppEntitlementCollectionResult(dict):
    def __init__(__self__, *,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsGrantEntitlementResult(dict):
    def __init__(__self__, *,
                 attribute_name: Optional[str] = None,
                 attribute_value: Optional[str] = None):
        if attribute_name is not None:
            pulumi.set(__self__, "attribute_name", attribute_name)
        if attribute_value is not None:
            pulumi.set(__self__, "attribute_value", attribute_value)

    @property
    @pulumi.getter(name="attributeName")
    def attribute_name(self) -> Optional[str]:
        return pulumi.get(self, "attribute_name")

    @property
    @pulumi.getter(name="attributeValue")
    def attribute_value(self) -> Optional[str]:
        return pulumi.get(self, "attribute_value")


@pulumi.output_type
class GetDomainsGrantGranteeResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsGrantGrantorResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsGrantIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsGrantIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsGrantMetaResult(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsGrantTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsGrantsGrantResult(dict):
    def __init__(__self__, *,
                 app_entitlement_collections: Optional[Sequence['outputs.GetDomainsGrantsGrantAppEntitlementCollectionResult']] = None,
                 apps: Optional[Sequence['outputs.GetDomainsGrantsGrantAppResult']] = None,
                 attribute_sets: Optional[Sequence[str]] = None,
                 attributes: Optional[str] = None,
                 authorization: Optional[str] = None,
                 compartment_ocid: Optional[str] = None,
                 composite_key: Optional[str] = None,
                 delete_in_progress: Optional[bool] = None,
                 domain_ocid: Optional[str] = None,
                 entitlements: Optional[Sequence['outputs.GetDomainsGrantsGrantEntitlementResult']] = None,
                 grant_mechanism: Optional[str] = None,
                 granted_attribute_values_json: Optional[str] = None,
                 grantees: Optional[Sequence['outputs.GetDomainsGrantsGrantGranteeResult']] = None,
                 grantors: Optional[Sequence['outputs.GetDomainsGrantsGrantGrantorResult']] = None,
                 id: Optional[str] = None,
                 idcs_created_bies: Optional[Sequence['outputs.GetDomainsGrantsGrantIdcsCreatedByResult']] = None,
                 idcs_endpoint: Optional[str] = None,
                 idcs_last_modified_bies: Optional[Sequence['outputs.GetDomainsGrantsGrantIdcsLastModifiedByResult']] = None,
                 idcs_last_upgraded_in_release: Optional[str] = None,
                 idcs_prevented_operations: Optional[Sequence[str]] = None,
                 is_fulfilled: Optional[bool] = None,
                 metas: Optional[Sequence['outputs.GetDomainsGrantsGrantMetaResult']] = None,
                 ocid: Optional[str] = None,
                 resource_type_schema_version: Optional[str] = None,
                 schemas: Optional[Sequence[str]] = None,
                 tags: Optional[Sequence['outputs.GetDomainsGrantsGrantTagResult']] = None,
                 tenancy_ocid: Optional[str] = None):
        if app_entitlement_collections is not None:
            pulumi.set(__self__, "app_entitlement_collections", app_entitlement_collections)
        if apps is not None:
            pulumi.set(__self__, "apps", apps)
        if attribute_sets is not None:
            pulumi.set(__self__, "attribute_sets", attribute_sets)
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)
        if authorization is not None:
            pulumi.set(__self__, "authorization", authorization)
        if compartment_ocid is not None:
            pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        if composite_key is not None:
            pulumi.set(__self__, "composite_key", composite_key)
        if delete_in_progress is not None:
            pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        if domain_ocid is not None:
            pulumi.set(__self__, "domain_ocid", domain_ocid)
        if entitlements is not None:
            pulumi.set(__self__, "entitlements", entitlements)
        if grant_mechanism is not None:
            pulumi.set(__self__, "grant_mechanism", grant_mechanism)
        if granted_attribute_values_json is not None:
            pulumi.set(__self__, "granted_attribute_values_json", granted_attribute_values_json)
        if grantees is not None:
            pulumi.set(__self__, "grantees", grantees)
        if grantors is not None:
            pulumi.set(__self__, "grantors", grantors)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if idcs_created_bies is not None:
            pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        if idcs_endpoint is not None:
            pulumi.set(__self__, "idcs_endpoint", idcs_endpoint)
        if idcs_last_modified_bies is not None:
            pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        if idcs_last_upgraded_in_release is not None:
            pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        if idcs_prevented_operations is not None:
            pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        if is_fulfilled is not None:
            pulumi.set(__self__, "is_fulfilled", is_fulfilled)
        if metas is not None:
            pulumi.set(__self__, "metas", metas)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if resource_type_schema_version is not None:
            pulumi.set(__self__, "resource_type_schema_version", resource_type_schema_version)
        if schemas is not None:
            pulumi.set(__self__, "schemas", schemas)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tenancy_ocid is not None:
            pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)

    @property
    @pulumi.getter(name="appEntitlementCollections")
    def app_entitlement_collections(self) -> Optional[Sequence['outputs.GetDomainsGrantsGrantAppEntitlementCollectionResult']]:
        return pulumi.get(self, "app_entitlement_collections")

    @property
    @pulumi.getter
    def apps(self) -> Optional[Sequence['outputs.GetDomainsGrantsGrantAppResult']]:
        return pulumi.get(self, "apps")

    @property
    @pulumi.getter(name="attributeSets")
    def attribute_sets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "attribute_sets")

    @property
    @pulumi.getter
    def attributes(self) -> Optional[str]:
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter
    def authorization(self) -> Optional[str]:
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> Optional[str]:
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="compositeKey")
    def composite_key(self) -> Optional[str]:
        return pulumi.get(self, "composite_key")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> Optional[bool]:
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> Optional[str]:
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter
    def entitlements(self) -> Optional[Sequence['outputs.GetDomainsGrantsGrantEntitlementResult']]:
        return pulumi.get(self, "entitlements")

    @property
    @pulumi.getter(name="grantMechanism")
    def grant_mechanism(self) -> Optional[str]:
        return pulumi.get(self, "grant_mechanism")

    @property
    @pulumi.getter(name="grantedAttributeValuesJson")
    def granted_attribute_values_json(self) -> Optional[str]:
        return pulumi.get(self, "granted_attribute_values_json")

    @property
    @pulumi.getter
    def grantees(self) -> Optional[Sequence['outputs.GetDomainsGrantsGrantGranteeResult']]:
        return pulumi.get(self, "grantees")

    @property
    @pulumi.getter
    def grantors(self) -> Optional[Sequence['outputs.GetDomainsGrantsGrantGrantorResult']]:
        return pulumi.get(self, "grantors")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Optional[Sequence['outputs.GetDomainsGrantsGrantIdcsCreatedByResult']]:
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "idcs_endpoint")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Optional[Sequence['outputs.GetDomainsGrantsGrantIdcsLastModifiedByResult']]:
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> Optional[str]:
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter(name="isFulfilled")
    def is_fulfilled(self) -> Optional[bool]:
        return pulumi.get(self, "is_fulfilled")

    @property
    @pulumi.getter
    def metas(self) -> Optional[Sequence['outputs.GetDomainsGrantsGrantMetaResult']]:
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> Optional[str]:
        return pulumi.get(self, "resource_type_schema_version")

    @property
    @pulumi.getter
    def schemas(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.GetDomainsGrantsGrantTagResult']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> Optional[str]:
        return pulumi.get(self, "tenancy_ocid")


@pulumi.output_type
class GetDomainsGrantsGrantAppResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsGrantsGrantAppEntitlementCollectionResult(dict):
    def __init__(__self__, *,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsGrantsGrantEntitlementResult(dict):
    def __init__(__self__, *,
                 attribute_name: Optional[str] = None,
                 attribute_value: Optional[str] = None):
        if attribute_name is not None:
            pulumi.set(__self__, "attribute_name", attribute_name)
        if attribute_value is not None:
            pulumi.set(__self__, "attribute_value", attribute_value)

    @property
    @pulumi.getter(name="attributeName")
    def attribute_name(self) -> Optional[str]:
        return pulumi.get(self, "attribute_name")

    @property
    @pulumi.getter(name="attributeValue")
    def attribute_value(self) -> Optional[str]:
        return pulumi.get(self, "attribute_value")


@pulumi.output_type
class GetDomainsGrantsGrantGranteeResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsGrantsGrantGrantorResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsGrantsGrantIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsGrantsGrantIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsGrantsGrantMetaResult(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsGrantsGrantTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsGroupIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsGroupIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsGroupMemberResult(dict):
    def __init__(__self__, *,
                 date_added: Optional[str] = None,
                 display: Optional[str] = None,
                 membership_ocid: Optional[str] = None,
                 name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if date_added is not None:
            pulumi.set(__self__, "date_added", date_added)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if membership_ocid is not None:
            pulumi.set(__self__, "membership_ocid", membership_ocid)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="dateAdded")
    def date_added(self) -> Optional[str]:
        return pulumi.get(self, "date_added")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter(name="membershipOcid")
    def membership_ocid(self) -> Optional[str]:
        return pulumi.get(self, "membership_ocid")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsGroupMetaResult(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsGroupTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagResult(dict):
    def __init__(__self__, *,
                 defined_tags: Optional[Sequence['outputs.GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTagResult']] = None,
                 freeform_tags: Optional[Sequence['outputs.GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTagResult']] = None,
                 tag_slug: Optional[str] = None):
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if tag_slug is not None:
            pulumi.set(__self__, "tag_slug", tag_slug)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Sequence['outputs.GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTagResult']]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Sequence['outputs.GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTagResult']]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="tagSlug")
    def tag_slug(self) -> Optional[str]:
        return pulumi.get(self, "tag_slug")


@pulumi.output_type
class GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 namespace: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupResult(dict):
    def __init__(__self__, *,
                 domain_level_schema: Optional[str] = None,
                 domain_level_schema_names: Optional[Sequence['outputs.GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupDomainLevelSchemaNameResult']] = None,
                 instance_level_schema: Optional[str] = None,
                 instance_level_schema_names: Optional[Sequence['outputs.GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupInstanceLevelSchemaNameResult']] = None):
        if domain_level_schema is not None:
            pulumi.set(__self__, "domain_level_schema", domain_level_schema)
        if domain_level_schema_names is not None:
            pulumi.set(__self__, "domain_level_schema_names", domain_level_schema_names)
        if instance_level_schema is not None:
            pulumi.set(__self__, "instance_level_schema", instance_level_schema)
        if instance_level_schema_names is not None:
            pulumi.set(__self__, "instance_level_schema_names", instance_level_schema_names)

    @property
    @pulumi.getter(name="domainLevelSchema")
    def domain_level_schema(self) -> Optional[str]:
        return pulumi.get(self, "domain_level_schema")

    @property
    @pulumi.getter(name="domainLevelSchemaNames")
    def domain_level_schema_names(self) -> Optional[Sequence['outputs.GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupDomainLevelSchemaNameResult']]:
        return pulumi.get(self, "domain_level_schema_names")

    @property
    @pulumi.getter(name="instanceLevelSchema")
    def instance_level_schema(self) -> Optional[str]:
        return pulumi.get(self, "instance_level_schema")

    @property
    @pulumi.getter(name="instanceLevelSchemaNames")
    def instance_level_schema_names(self) -> Optional[Sequence['outputs.GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupInstanceLevelSchemaNameResult']]:
        return pulumi.get(self, "instance_level_schema_names")


@pulumi.output_type
class GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupDomainLevelSchemaNameResult(dict):
    def __init__(__self__, *,
                 domain_name: Optional[str] = None,
                 schema_name: Optional[str] = None):
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[str]:
        return pulumi.get(self, "domain_name")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[str]:
        return pulumi.get(self, "schema_name")


@pulumi.output_type
class GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupInstanceLevelSchemaNameResult(dict):
    def __init__(__self__, *,
                 db_instance_id: Optional[str] = None,
                 schema_name: Optional[str] = None):
        if db_instance_id is not None:
            pulumi.set(__self__, "db_instance_id", db_instance_id)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter(name="dbInstanceId")
    def db_instance_id(self) -> Optional[str]:
        return pulumi.get(self, "db_instance_id")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[str]:
        return pulumi.get(self, "schema_name")


@pulumi.output_type
class GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiondynamicGroupResult(dict):
    def __init__(__self__, *,
                 membership_rule: Optional[str] = None,
                 membership_type: Optional[str] = None):
        if membership_rule is not None:
            pulumi.set(__self__, "membership_rule", membership_rule)
        if membership_type is not None:
            pulumi.set(__self__, "membership_type", membership_type)

    @property
    @pulumi.getter(name="membershipRule")
    def membership_rule(self) -> Optional[str]:
        return pulumi.get(self, "membership_rule")

    @property
    @pulumi.getter(name="membershipType")
    def membership_type(self) -> Optional[str]:
        return pulumi.get(self, "membership_type")


@pulumi.output_type
class GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupResult(dict):
    def __init__(__self__, *,
                 app_roles: Optional[Sequence['outputs.GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupAppRoleResult']] = None,
                 creation_mechanism: Optional[str] = None,
                 description: Optional[str] = None,
                 grants: Optional[Sequence['outputs.GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupGrantResult']] = None,
                 owners: Optional[Sequence['outputs.GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupOwnerResult']] = None,
                 password_policies: Optional[Sequence['outputs.GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupPasswordPolicyResult']] = None,
                 synced_from_apps: Optional[Sequence['outputs.GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupSyncedFromAppResult']] = None):
        if app_roles is not None:
            pulumi.set(__self__, "app_roles", app_roles)
        if creation_mechanism is not None:
            pulumi.set(__self__, "creation_mechanism", creation_mechanism)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if grants is not None:
            pulumi.set(__self__, "grants", grants)
        if owners is not None:
            pulumi.set(__self__, "owners", owners)
        if password_policies is not None:
            pulumi.set(__self__, "password_policies", password_policies)
        if synced_from_apps is not None:
            pulumi.set(__self__, "synced_from_apps", synced_from_apps)

    @property
    @pulumi.getter(name="appRoles")
    def app_roles(self) -> Optional[Sequence['outputs.GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupAppRoleResult']]:
        return pulumi.get(self, "app_roles")

    @property
    @pulumi.getter(name="creationMechanism")
    def creation_mechanism(self) -> Optional[str]:
        return pulumi.get(self, "creation_mechanism")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def grants(self) -> Optional[Sequence['outputs.GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupGrantResult']]:
        return pulumi.get(self, "grants")

    @property
    @pulumi.getter
    def owners(self) -> Optional[Sequence['outputs.GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupOwnerResult']]:
        return pulumi.get(self, "owners")

    @property
    @pulumi.getter(name="passwordPolicies")
    def password_policies(self) -> Optional[Sequence['outputs.GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupPasswordPolicyResult']]:
        return pulumi.get(self, "password_policies")

    @property
    @pulumi.getter(name="syncedFromApps")
    def synced_from_apps(self) -> Optional[Sequence['outputs.GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupSyncedFromAppResult']]:
        return pulumi.get(self, "synced_from_apps")


@pulumi.output_type
class GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupAppRoleResult(dict):
    def __init__(__self__, *,
                 admin_role: Optional[bool] = None,
                 app_id: Optional[str] = None,
                 app_name: Optional[str] = None,
                 display: Optional[str] = None,
                 legacy_group_name: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if admin_role is not None:
            pulumi.set(__self__, "admin_role", admin_role)
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if app_name is not None:
            pulumi.set(__self__, "app_name", app_name)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if legacy_group_name is not None:
            pulumi.set(__self__, "legacy_group_name", legacy_group_name)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="adminRole")
    def admin_role(self) -> Optional[bool]:
        return pulumi.get(self, "admin_role")

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[str]:
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="appName")
    def app_name(self) -> Optional[str]:
        return pulumi.get(self, "app_name")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter(name="legacyGroupName")
    def legacy_group_name(self) -> Optional[str]:
        return pulumi.get(self, "legacy_group_name")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupGrantResult(dict):
    def __init__(__self__, *,
                 app_id: Optional[str] = None,
                 grant_mechanism: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if grant_mechanism is not None:
            pulumi.set(__self__, "grant_mechanism", grant_mechanism)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[str]:
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="grantMechanism")
    def grant_mechanism(self) -> Optional[str]:
        return pulumi.get(self, "grant_mechanism")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupOwnerResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupPasswordPolicyResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 priority: Optional[int] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupSyncedFromAppResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensionposixGroupResult(dict):
    def __init__(__self__, *,
                 gid_number: Optional[int] = None):
        if gid_number is not None:
            pulumi.set(__self__, "gid_number", gid_number)

    @property
    @pulumi.getter(name="gidNumber")
    def gid_number(self) -> Optional[int]:
        return pulumi.get(self, "gid_number")


@pulumi.output_type
class GetDomainsGroupUrnietfparamsscimschemasoracleidcsextensionrequestableGroupResult(dict):
    def __init__(__self__, *,
                 requestable: Optional[bool] = None):
        if requestable is not None:
            pulumi.set(__self__, "requestable", requestable)

    @property
    @pulumi.getter
    def requestable(self) -> Optional[bool]:
        return pulumi.get(self, "requestable")


@pulumi.output_type
class GetDomainsGroupsGroupResult(dict):
    def __init__(__self__, *,
                 attribute_sets: Optional[Sequence[str]] = None,
                 attributes: Optional[str] = None,
                 authorization: Optional[str] = None,
                 compartment_ocid: Optional[str] = None,
                 delete_in_progress: Optional[bool] = None,
                 display_name: Optional[str] = None,
                 domain_ocid: Optional[str] = None,
                 external_id: Optional[str] = None,
                 id: Optional[str] = None,
                 idcs_created_bies: Optional[Sequence['outputs.GetDomainsGroupsGroupIdcsCreatedByResult']] = None,
                 idcs_endpoint: Optional[str] = None,
                 idcs_last_modified_bies: Optional[Sequence['outputs.GetDomainsGroupsGroupIdcsLastModifiedByResult']] = None,
                 idcs_last_upgraded_in_release: Optional[str] = None,
                 idcs_prevented_operations: Optional[Sequence[str]] = None,
                 members: Optional[Sequence['outputs.GetDomainsGroupsGroupMemberResult']] = None,
                 metas: Optional[Sequence['outputs.GetDomainsGroupsGroupMetaResult']] = None,
                 non_unique_display_name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 resource_type_schema_version: Optional[str] = None,
                 schemas: Optional[Sequence[str]] = None,
                 tags: Optional[Sequence['outputs.GetDomainsGroupsGroupTagResult']] = None,
                 tenancy_ocid: Optional[str] = None,
                 urnietfparamsscimschemasoracleidcsextension_oci_tags: Optional[Sequence['outputs.GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagResult']] = None,
                 urnietfparamsscimschemasoracleidcsextensiondbcs_groups: Optional[Sequence['outputs.GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupResult']] = None,
                 urnietfparamsscimschemasoracleidcsextensiondynamic_groups: Optional[Sequence['outputs.GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiondynamicGroupResult']] = None,
                 urnietfparamsscimschemasoracleidcsextensiongroup_groups: Optional[Sequence['outputs.GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupResult']] = None,
                 urnietfparamsscimschemasoracleidcsextensionposix_groups: Optional[Sequence['outputs.GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensionposixGroupResult']] = None,
                 urnietfparamsscimschemasoracleidcsextensionrequestable_groups: Optional[Sequence['outputs.GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensionrequestableGroupResult']] = None):
        if attribute_sets is not None:
            pulumi.set(__self__, "attribute_sets", attribute_sets)
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)
        if authorization is not None:
            pulumi.set(__self__, "authorization", authorization)
        if compartment_ocid is not None:
            pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        if delete_in_progress is not None:
            pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if domain_ocid is not None:
            pulumi.set(__self__, "domain_ocid", domain_ocid)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if idcs_created_bies is not None:
            pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        if idcs_endpoint is not None:
            pulumi.set(__self__, "idcs_endpoint", idcs_endpoint)
        if idcs_last_modified_bies is not None:
            pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        if idcs_last_upgraded_in_release is not None:
            pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        if idcs_prevented_operations is not None:
            pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if metas is not None:
            pulumi.set(__self__, "metas", metas)
        if non_unique_display_name is not None:
            pulumi.set(__self__, "non_unique_display_name", non_unique_display_name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if resource_type_schema_version is not None:
            pulumi.set(__self__, "resource_type_schema_version", resource_type_schema_version)
        if schemas is not None:
            pulumi.set(__self__, "schemas", schemas)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tenancy_ocid is not None:
            pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)
        if urnietfparamsscimschemasoracleidcsextension_oci_tags is not None:
            pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextension_oci_tags", urnietfparamsscimschemasoracleidcsextension_oci_tags)
        if urnietfparamsscimschemasoracleidcsextensiondbcs_groups is not None:
            pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensiondbcs_groups", urnietfparamsscimschemasoracleidcsextensiondbcs_groups)
        if urnietfparamsscimschemasoracleidcsextensiondynamic_groups is not None:
            pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensiondynamic_groups", urnietfparamsscimschemasoracleidcsextensiondynamic_groups)
        if urnietfparamsscimschemasoracleidcsextensiongroup_groups is not None:
            pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensiongroup_groups", urnietfparamsscimschemasoracleidcsextensiongroup_groups)
        if urnietfparamsscimschemasoracleidcsextensionposix_groups is not None:
            pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionposix_groups", urnietfparamsscimschemasoracleidcsextensionposix_groups)
        if urnietfparamsscimschemasoracleidcsextensionrequestable_groups is not None:
            pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionrequestable_groups", urnietfparamsscimschemasoracleidcsextensionrequestable_groups)

    @property
    @pulumi.getter(name="attributeSets")
    def attribute_sets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "attribute_sets")

    @property
    @pulumi.getter
    def attributes(self) -> Optional[str]:
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter
    def authorization(self) -> Optional[str]:
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> Optional[str]:
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> Optional[bool]:
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> Optional[str]:
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[str]:
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Optional[Sequence['outputs.GetDomainsGroupsGroupIdcsCreatedByResult']]:
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "idcs_endpoint")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Optional[Sequence['outputs.GetDomainsGroupsGroupIdcsLastModifiedByResult']]:
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> Optional[str]:
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter
    def members(self) -> Optional[Sequence['outputs.GetDomainsGroupsGroupMemberResult']]:
        return pulumi.get(self, "members")

    @property
    @pulumi.getter
    def metas(self) -> Optional[Sequence['outputs.GetDomainsGroupsGroupMetaResult']]:
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter(name="nonUniqueDisplayName")
    def non_unique_display_name(self) -> Optional[str]:
        return pulumi.get(self, "non_unique_display_name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> Optional[str]:
        return pulumi.get(self, "resource_type_schema_version")

    @property
    @pulumi.getter
    def schemas(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.GetDomainsGroupsGroupTagResult']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> Optional[str]:
        return pulumi.get(self, "tenancy_ocid")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionOciTags")
    def urnietfparamsscimschemasoracleidcsextension_oci_tags(self) -> Optional[Sequence['outputs.GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagResult']]:
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextension_oci_tags")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensiondbcsGroups")
    def urnietfparamsscimschemasoracleidcsextensiondbcs_groups(self) -> Optional[Sequence['outputs.GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupResult']]:
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensiondbcs_groups")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensiondynamicGroups")
    def urnietfparamsscimschemasoracleidcsextensiondynamic_groups(self) -> Optional[Sequence['outputs.GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiondynamicGroupResult']]:
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensiondynamic_groups")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensiongroupGroups")
    def urnietfparamsscimschemasoracleidcsextensiongroup_groups(self) -> Optional[Sequence['outputs.GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupResult']]:
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensiongroup_groups")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionposixGroups")
    def urnietfparamsscimschemasoracleidcsextensionposix_groups(self) -> Optional[Sequence['outputs.GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensionposixGroupResult']]:
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionposix_groups")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionrequestableGroups")
    def urnietfparamsscimschemasoracleidcsextensionrequestable_groups(self) -> Optional[Sequence['outputs.GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensionrequestableGroupResult']]:
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionrequestable_groups")


@pulumi.output_type
class GetDomainsGroupsGroupIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsGroupsGroupIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsGroupsGroupMemberResult(dict):
    def __init__(__self__, *,
                 date_added: Optional[str] = None,
                 display: Optional[str] = None,
                 membership_ocid: Optional[str] = None,
                 name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if date_added is not None:
            pulumi.set(__self__, "date_added", date_added)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if membership_ocid is not None:
            pulumi.set(__self__, "membership_ocid", membership_ocid)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="dateAdded")
    def date_added(self) -> Optional[str]:
        return pulumi.get(self, "date_added")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter(name="membershipOcid")
    def membership_ocid(self) -> Optional[str]:
        return pulumi.get(self, "membership_ocid")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsGroupsGroupMetaResult(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsGroupsGroupTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagResult(dict):
    def __init__(__self__, *,
                 defined_tags: Optional[Sequence['outputs.GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTagResult']] = None,
                 freeform_tags: Optional[Sequence['outputs.GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTagResult']] = None,
                 tag_slug: Optional[str] = None):
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if tag_slug is not None:
            pulumi.set(__self__, "tag_slug", tag_slug)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Sequence['outputs.GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTagResult']]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Sequence['outputs.GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTagResult']]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="tagSlug")
    def tag_slug(self) -> Optional[str]:
        return pulumi.get(self, "tag_slug")


@pulumi.output_type
class GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 namespace: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupResult(dict):
    def __init__(__self__, *,
                 domain_level_schema: Optional[str] = None,
                 domain_level_schema_names: Optional[Sequence['outputs.GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupDomainLevelSchemaNameResult']] = None,
                 instance_level_schema: Optional[str] = None,
                 instance_level_schema_names: Optional[Sequence['outputs.GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupInstanceLevelSchemaNameResult']] = None):
        if domain_level_schema is not None:
            pulumi.set(__self__, "domain_level_schema", domain_level_schema)
        if domain_level_schema_names is not None:
            pulumi.set(__self__, "domain_level_schema_names", domain_level_schema_names)
        if instance_level_schema is not None:
            pulumi.set(__self__, "instance_level_schema", instance_level_schema)
        if instance_level_schema_names is not None:
            pulumi.set(__self__, "instance_level_schema_names", instance_level_schema_names)

    @property
    @pulumi.getter(name="domainLevelSchema")
    def domain_level_schema(self) -> Optional[str]:
        return pulumi.get(self, "domain_level_schema")

    @property
    @pulumi.getter(name="domainLevelSchemaNames")
    def domain_level_schema_names(self) -> Optional[Sequence['outputs.GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupDomainLevelSchemaNameResult']]:
        return pulumi.get(self, "domain_level_schema_names")

    @property
    @pulumi.getter(name="instanceLevelSchema")
    def instance_level_schema(self) -> Optional[str]:
        return pulumi.get(self, "instance_level_schema")

    @property
    @pulumi.getter(name="instanceLevelSchemaNames")
    def instance_level_schema_names(self) -> Optional[Sequence['outputs.GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupInstanceLevelSchemaNameResult']]:
        return pulumi.get(self, "instance_level_schema_names")


@pulumi.output_type
class GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupDomainLevelSchemaNameResult(dict):
    def __init__(__self__, *,
                 domain_name: Optional[str] = None,
                 schema_name: Optional[str] = None):
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[str]:
        return pulumi.get(self, "domain_name")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[str]:
        return pulumi.get(self, "schema_name")


@pulumi.output_type
class GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupInstanceLevelSchemaNameResult(dict):
    def __init__(__self__, *,
                 db_instance_id: Optional[str] = None,
                 schema_name: Optional[str] = None):
        if db_instance_id is not None:
            pulumi.set(__self__, "db_instance_id", db_instance_id)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter(name="dbInstanceId")
    def db_instance_id(self) -> Optional[str]:
        return pulumi.get(self, "db_instance_id")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[str]:
        return pulumi.get(self, "schema_name")


@pulumi.output_type
class GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiondynamicGroupResult(dict):
    def __init__(__self__, *,
                 membership_rule: Optional[str] = None,
                 membership_type: Optional[str] = None):
        if membership_rule is not None:
            pulumi.set(__self__, "membership_rule", membership_rule)
        if membership_type is not None:
            pulumi.set(__self__, "membership_type", membership_type)

    @property
    @pulumi.getter(name="membershipRule")
    def membership_rule(self) -> Optional[str]:
        return pulumi.get(self, "membership_rule")

    @property
    @pulumi.getter(name="membershipType")
    def membership_type(self) -> Optional[str]:
        return pulumi.get(self, "membership_type")


@pulumi.output_type
class GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupResult(dict):
    def __init__(__self__, *,
                 app_roles: Optional[Sequence['outputs.GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupAppRoleResult']] = None,
                 creation_mechanism: Optional[str] = None,
                 description: Optional[str] = None,
                 grants: Optional[Sequence['outputs.GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupGrantResult']] = None,
                 owners: Optional[Sequence['outputs.GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupOwnerResult']] = None,
                 password_policies: Optional[Sequence['outputs.GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupPasswordPolicyResult']] = None,
                 synced_from_apps: Optional[Sequence['outputs.GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupSyncedFromAppResult']] = None):
        if app_roles is not None:
            pulumi.set(__self__, "app_roles", app_roles)
        if creation_mechanism is not None:
            pulumi.set(__self__, "creation_mechanism", creation_mechanism)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if grants is not None:
            pulumi.set(__self__, "grants", grants)
        if owners is not None:
            pulumi.set(__self__, "owners", owners)
        if password_policies is not None:
            pulumi.set(__self__, "password_policies", password_policies)
        if synced_from_apps is not None:
            pulumi.set(__self__, "synced_from_apps", synced_from_apps)

    @property
    @pulumi.getter(name="appRoles")
    def app_roles(self) -> Optional[Sequence['outputs.GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupAppRoleResult']]:
        return pulumi.get(self, "app_roles")

    @property
    @pulumi.getter(name="creationMechanism")
    def creation_mechanism(self) -> Optional[str]:
        return pulumi.get(self, "creation_mechanism")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def grants(self) -> Optional[Sequence['outputs.GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupGrantResult']]:
        return pulumi.get(self, "grants")

    @property
    @pulumi.getter
    def owners(self) -> Optional[Sequence['outputs.GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupOwnerResult']]:
        return pulumi.get(self, "owners")

    @property
    @pulumi.getter(name="passwordPolicies")
    def password_policies(self) -> Optional[Sequence['outputs.GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupPasswordPolicyResult']]:
        return pulumi.get(self, "password_policies")

    @property
    @pulumi.getter(name="syncedFromApps")
    def synced_from_apps(self) -> Optional[Sequence['outputs.GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupSyncedFromAppResult']]:
        return pulumi.get(self, "synced_from_apps")


@pulumi.output_type
class GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupAppRoleResult(dict):
    def __init__(__self__, *,
                 admin_role: Optional[bool] = None,
                 app_id: Optional[str] = None,
                 app_name: Optional[str] = None,
                 display: Optional[str] = None,
                 legacy_group_name: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if admin_role is not None:
            pulumi.set(__self__, "admin_role", admin_role)
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if app_name is not None:
            pulumi.set(__self__, "app_name", app_name)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if legacy_group_name is not None:
            pulumi.set(__self__, "legacy_group_name", legacy_group_name)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="adminRole")
    def admin_role(self) -> Optional[bool]:
        return pulumi.get(self, "admin_role")

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[str]:
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="appName")
    def app_name(self) -> Optional[str]:
        return pulumi.get(self, "app_name")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter(name="legacyGroupName")
    def legacy_group_name(self) -> Optional[str]:
        return pulumi.get(self, "legacy_group_name")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupGrantResult(dict):
    def __init__(__self__, *,
                 app_id: Optional[str] = None,
                 grant_mechanism: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if grant_mechanism is not None:
            pulumi.set(__self__, "grant_mechanism", grant_mechanism)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[str]:
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="grantMechanism")
    def grant_mechanism(self) -> Optional[str]:
        return pulumi.get(self, "grant_mechanism")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupOwnerResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupPasswordPolicyResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 priority: Optional[int] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupSyncedFromAppResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensionposixGroupResult(dict):
    def __init__(__self__, *,
                 gid_number: Optional[int] = None):
        if gid_number is not None:
            pulumi.set(__self__, "gid_number", gid_number)

    @property
    @pulumi.getter(name="gidNumber")
    def gid_number(self) -> Optional[int]:
        return pulumi.get(self, "gid_number")


@pulumi.output_type
class GetDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensionrequestableGroupResult(dict):
    def __init__(__self__, *,
                 requestable: Optional[bool] = None):
        if requestable is not None:
            pulumi.set(__self__, "requestable", requestable)

    @property
    @pulumi.getter
    def requestable(self) -> Optional[bool]:
        return pulumi.get(self, "requestable")


@pulumi.output_type
class GetDomainsIdentityProviderCorrelationPolicyResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsIdentityProviderIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsIdentityProviderIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsIdentityProviderJitUserProvAssignedGroupResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsIdentityProviderJitUserProvAttributeResult(dict):
    def __init__(__self__, *,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsIdentityProviderJitUserProvGroupMappingResult(dict):
    def __init__(__self__, *,
                 idp_group: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if idp_group is not None:
            pulumi.set(__self__, "idp_group", idp_group)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="idpGroup")
    def idp_group(self) -> Optional[str]:
        return pulumi.get(self, "idp_group")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsIdentityProviderMetaResult(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsIdentityProviderTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProviderResult(dict):
    def __init__(__self__, *,
                 access_token_url: Optional[str] = None,
                 account_linking_enabled: Optional[bool] = None,
                 admin_scopes: Optional[Sequence[str]] = None,
                 authz_url: Optional[str] = None,
                 client_credential_in_payload: Optional[bool] = None,
                 clock_skew_in_seconds: Optional[int] = None,
                 consumer_key: Optional[str] = None,
                 consumer_secret: Optional[str] = None,
                 discovery_url: Optional[str] = None,
                 id_attribute: Optional[str] = None,
                 profile_url: Optional[str] = None,
                 redirect_url: Optional[str] = None,
                 registration_enabled: Optional[bool] = None,
                 scopes: Optional[Sequence[str]] = None,
                 service_provider_name: Optional[str] = None,
                 status: Optional[str] = None):
        if access_token_url is not None:
            pulumi.set(__self__, "access_token_url", access_token_url)
        if account_linking_enabled is not None:
            pulumi.set(__self__, "account_linking_enabled", account_linking_enabled)
        if admin_scopes is not None:
            pulumi.set(__self__, "admin_scopes", admin_scopes)
        if authz_url is not None:
            pulumi.set(__self__, "authz_url", authz_url)
        if client_credential_in_payload is not None:
            pulumi.set(__self__, "client_credential_in_payload", client_credential_in_payload)
        if clock_skew_in_seconds is not None:
            pulumi.set(__self__, "clock_skew_in_seconds", clock_skew_in_seconds)
        if consumer_key is not None:
            pulumi.set(__self__, "consumer_key", consumer_key)
        if consumer_secret is not None:
            pulumi.set(__self__, "consumer_secret", consumer_secret)
        if discovery_url is not None:
            pulumi.set(__self__, "discovery_url", discovery_url)
        if id_attribute is not None:
            pulumi.set(__self__, "id_attribute", id_attribute)
        if profile_url is not None:
            pulumi.set(__self__, "profile_url", profile_url)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if registration_enabled is not None:
            pulumi.set(__self__, "registration_enabled", registration_enabled)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)
        if service_provider_name is not None:
            pulumi.set(__self__, "service_provider_name", service_provider_name)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="accessTokenUrl")
    def access_token_url(self) -> Optional[str]:
        return pulumi.get(self, "access_token_url")

    @property
    @pulumi.getter(name="accountLinkingEnabled")
    def account_linking_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "account_linking_enabled")

    @property
    @pulumi.getter(name="adminScopes")
    def admin_scopes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "admin_scopes")

    @property
    @pulumi.getter(name="authzUrl")
    def authz_url(self) -> Optional[str]:
        return pulumi.get(self, "authz_url")

    @property
    @pulumi.getter(name="clientCredentialInPayload")
    def client_credential_in_payload(self) -> Optional[bool]:
        return pulumi.get(self, "client_credential_in_payload")

    @property
    @pulumi.getter(name="clockSkewInSeconds")
    def clock_skew_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "clock_skew_in_seconds")

    @property
    @pulumi.getter(name="consumerKey")
    def consumer_key(self) -> Optional[str]:
        return pulumi.get(self, "consumer_key")

    @property
    @pulumi.getter(name="consumerSecret")
    def consumer_secret(self) -> Optional[str]:
        return pulumi.get(self, "consumer_secret")

    @property
    @pulumi.getter(name="discoveryUrl")
    def discovery_url(self) -> Optional[str]:
        return pulumi.get(self, "discovery_url")

    @property
    @pulumi.getter(name="idAttribute")
    def id_attribute(self) -> Optional[str]:
        return pulumi.get(self, "id_attribute")

    @property
    @pulumi.getter(name="profileUrl")
    def profile_url(self) -> Optional[str]:
        return pulumi.get(self, "profile_url")

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[str]:
        return pulumi.get(self, "redirect_url")

    @property
    @pulumi.getter(name="registrationEnabled")
    def registration_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "registration_enabled")

    @property
    @pulumi.getter
    def scopes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "scopes")

    @property
    @pulumi.getter(name="serviceProviderName")
    def service_provider_name(self) -> Optional[str]:
        return pulumi.get(self, "service_provider_name")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionx509identityProviderResult(dict):
    def __init__(__self__, *,
                 cert_match_attribute: Optional[str] = None,
                 crl_check_on_ocsp_failure_enabled: Optional[bool] = None,
                 crl_enabled: Optional[bool] = None,
                 crl_location: Optional[str] = None,
                 crl_reload_duration: Optional[int] = None,
                 eku_validation_enabled: Optional[bool] = None,
                 eku_values: Optional[Sequence[str]] = None,
                 ocsp_allow_unknown_response_status: Optional[bool] = None,
                 ocsp_enable_signed_response: Optional[bool] = None,
                 ocsp_enabled: Optional[bool] = None,
                 ocsp_responder_url: Optional[str] = None,
                 ocsp_revalidate_time: Optional[int] = None,
                 ocsp_server_name: Optional[str] = None,
                 ocsp_trust_cert_chains: Optional[Sequence[str]] = None,
                 other_cert_match_attribute: Optional[str] = None,
                 signing_certificate_chains: Optional[Sequence[str]] = None,
                 user_match_attribute: Optional[str] = None):
        if cert_match_attribute is not None:
            pulumi.set(__self__, "cert_match_attribute", cert_match_attribute)
        if crl_check_on_ocsp_failure_enabled is not None:
            pulumi.set(__self__, "crl_check_on_ocsp_failure_enabled", crl_check_on_ocsp_failure_enabled)
        if crl_enabled is not None:
            pulumi.set(__self__, "crl_enabled", crl_enabled)
        if crl_location is not None:
            pulumi.set(__self__, "crl_location", crl_location)
        if crl_reload_duration is not None:
            pulumi.set(__self__, "crl_reload_duration", crl_reload_duration)
        if eku_validation_enabled is not None:
            pulumi.set(__self__, "eku_validation_enabled", eku_validation_enabled)
        if eku_values is not None:
            pulumi.set(__self__, "eku_values", eku_values)
        if ocsp_allow_unknown_response_status is not None:
            pulumi.set(__self__, "ocsp_allow_unknown_response_status", ocsp_allow_unknown_response_status)
        if ocsp_enable_signed_response is not None:
            pulumi.set(__self__, "ocsp_enable_signed_response", ocsp_enable_signed_response)
        if ocsp_enabled is not None:
            pulumi.set(__self__, "ocsp_enabled", ocsp_enabled)
        if ocsp_responder_url is not None:
            pulumi.set(__self__, "ocsp_responder_url", ocsp_responder_url)
        if ocsp_revalidate_time is not None:
            pulumi.set(__self__, "ocsp_revalidate_time", ocsp_revalidate_time)
        if ocsp_server_name is not None:
            pulumi.set(__self__, "ocsp_server_name", ocsp_server_name)
        if ocsp_trust_cert_chains is not None:
            pulumi.set(__self__, "ocsp_trust_cert_chains", ocsp_trust_cert_chains)
        if other_cert_match_attribute is not None:
            pulumi.set(__self__, "other_cert_match_attribute", other_cert_match_attribute)
        if signing_certificate_chains is not None:
            pulumi.set(__self__, "signing_certificate_chains", signing_certificate_chains)
        if user_match_attribute is not None:
            pulumi.set(__self__, "user_match_attribute", user_match_attribute)

    @property
    @pulumi.getter(name="certMatchAttribute")
    def cert_match_attribute(self) -> Optional[str]:
        return pulumi.get(self, "cert_match_attribute")

    @property
    @pulumi.getter(name="crlCheckOnOcspFailureEnabled")
    def crl_check_on_ocsp_failure_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "crl_check_on_ocsp_failure_enabled")

    @property
    @pulumi.getter(name="crlEnabled")
    def crl_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "crl_enabled")

    @property
    @pulumi.getter(name="crlLocation")
    def crl_location(self) -> Optional[str]:
        return pulumi.get(self, "crl_location")

    @property
    @pulumi.getter(name="crlReloadDuration")
    def crl_reload_duration(self) -> Optional[int]:
        return pulumi.get(self, "crl_reload_duration")

    @property
    @pulumi.getter(name="ekuValidationEnabled")
    def eku_validation_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "eku_validation_enabled")

    @property
    @pulumi.getter(name="ekuValues")
    def eku_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "eku_values")

    @property
    @pulumi.getter(name="ocspAllowUnknownResponseStatus")
    def ocsp_allow_unknown_response_status(self) -> Optional[bool]:
        return pulumi.get(self, "ocsp_allow_unknown_response_status")

    @property
    @pulumi.getter(name="ocspEnableSignedResponse")
    def ocsp_enable_signed_response(self) -> Optional[bool]:
        return pulumi.get(self, "ocsp_enable_signed_response")

    @property
    @pulumi.getter(name="ocspEnabled")
    def ocsp_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "ocsp_enabled")

    @property
    @pulumi.getter(name="ocspResponderUrl")
    def ocsp_responder_url(self) -> Optional[str]:
        return pulumi.get(self, "ocsp_responder_url")

    @property
    @pulumi.getter(name="ocspRevalidateTime")
    def ocsp_revalidate_time(self) -> Optional[int]:
        return pulumi.get(self, "ocsp_revalidate_time")

    @property
    @pulumi.getter(name="ocspServerName")
    def ocsp_server_name(self) -> Optional[str]:
        return pulumi.get(self, "ocsp_server_name")

    @property
    @pulumi.getter(name="ocspTrustCertChains")
    def ocsp_trust_cert_chains(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ocsp_trust_cert_chains")

    @property
    @pulumi.getter(name="otherCertMatchAttribute")
    def other_cert_match_attribute(self) -> Optional[str]:
        return pulumi.get(self, "other_cert_match_attribute")

    @property
    @pulumi.getter(name="signingCertificateChains")
    def signing_certificate_chains(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "signing_certificate_chains")

    @property
    @pulumi.getter(name="userMatchAttribute")
    def user_match_attribute(self) -> Optional[str]:
        return pulumi.get(self, "user_match_attribute")


@pulumi.output_type
class GetDomainsIdentityProvidersIdentityProviderResult(dict):
    def __init__(__self__, *,
                 assertion_attribute: Optional[str] = None,
                 attribute_sets: Optional[Sequence[str]] = None,
                 attributes: Optional[str] = None,
                 authn_request_binding: Optional[str] = None,
                 authorization: Optional[str] = None,
                 compartment_ocid: Optional[str] = None,
                 correlation_policies: Optional[Sequence['outputs.GetDomainsIdentityProvidersIdentityProviderCorrelationPolicyResult']] = None,
                 delete_in_progress: Optional[bool] = None,
                 description: Optional[str] = None,
                 domain_ocid: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 encryption_certificate: Optional[str] = None,
                 external_id: Optional[str] = None,
                 icon_url: Optional[str] = None,
                 id: Optional[str] = None,
                 idcs_created_bies: Optional[Sequence['outputs.GetDomainsIdentityProvidersIdentityProviderIdcsCreatedByResult']] = None,
                 idcs_endpoint: Optional[str] = None,
                 idcs_last_modified_bies: Optional[Sequence['outputs.GetDomainsIdentityProvidersIdentityProviderIdcsLastModifiedByResult']] = None,
                 idcs_last_upgraded_in_release: Optional[str] = None,
                 idcs_prevented_operations: Optional[Sequence[str]] = None,
                 idp_sso_url: Optional[str] = None,
                 include_signing_cert_in_signature: Optional[bool] = None,
                 jit_user_prov_assigned_groups: Optional[Sequence['outputs.GetDomainsIdentityProvidersIdentityProviderJitUserProvAssignedGroupResult']] = None,
                 jit_user_prov_attribute_update_enabled: Optional[bool] = None,
                 jit_user_prov_attributes: Optional[Sequence['outputs.GetDomainsIdentityProvidersIdentityProviderJitUserProvAttributeResult']] = None,
                 jit_user_prov_create_user_enabled: Optional[bool] = None,
                 jit_user_prov_enabled: Optional[bool] = None,
                 jit_user_prov_group_assertion_attribute_enabled: Optional[bool] = None,
                 jit_user_prov_group_assignment_method: Optional[str] = None,
                 jit_user_prov_group_mapping_mode: Optional[str] = None,
                 jit_user_prov_group_mappings: Optional[Sequence['outputs.GetDomainsIdentityProvidersIdentityProviderJitUserProvGroupMappingResult']] = None,
                 jit_user_prov_group_saml_attribute_name: Optional[str] = None,
                 jit_user_prov_group_static_list_enabled: Optional[bool] = None,
                 jit_user_prov_ignore_error_on_absent_groups: Optional[bool] = None,
                 last_notification_sent_time: Optional[str] = None,
                 logout_binding: Optional[str] = None,
                 logout_enabled: Optional[bool] = None,
                 logout_request_url: Optional[str] = None,
                 logout_response_url: Optional[str] = None,
                 metadata: Optional[str] = None,
                 metas: Optional[Sequence['outputs.GetDomainsIdentityProvidersIdentityProviderMetaResult']] = None,
                 name_id_format: Optional[str] = None,
                 ocid: Optional[str] = None,
                 partner_name: Optional[str] = None,
                 partner_provider_id: Optional[str] = None,
                 requested_authentication_contexts: Optional[Sequence[str]] = None,
                 require_force_authn: Optional[bool] = None,
                 requires_encrypted_assertion: Optional[bool] = None,
                 resource_type_schema_version: Optional[str] = None,
                 saml_ho_krequired: Optional[bool] = None,
                 schemas: Optional[Sequence[str]] = None,
                 service_instance_identifier: Optional[str] = None,
                 shown_on_login_page: Optional[bool] = None,
                 signature_hash_algorithm: Optional[str] = None,
                 signing_certificate: Optional[str] = None,
                 succinct_id: Optional[str] = None,
                 tags: Optional[Sequence['outputs.GetDomainsIdentityProvidersIdentityProviderTagResult']] = None,
                 tenancy_ocid: Optional[str] = None,
                 tenant_provider_id: Optional[str] = None,
                 type: Optional[str] = None,
                 urnietfparamsscimschemasoracleidcsextensionsocial_identity_providers: Optional[Sequence['outputs.GetDomainsIdentityProvidersIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProviderResult']] = None,
                 urnietfparamsscimschemasoracleidcsextensionx509identity_providers: Optional[Sequence['outputs.GetDomainsIdentityProvidersIdentityProviderUrnietfparamsscimschemasoracleidcsextensionx509identityProviderResult']] = None,
                 user_mapping_method: Optional[str] = None,
                 user_mapping_store_attribute: Optional[str] = None):
        if assertion_attribute is not None:
            pulumi.set(__self__, "assertion_attribute", assertion_attribute)
        if attribute_sets is not None:
            pulumi.set(__self__, "attribute_sets", attribute_sets)
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)
        if authn_request_binding is not None:
            pulumi.set(__self__, "authn_request_binding", authn_request_binding)
        if authorization is not None:
            pulumi.set(__self__, "authorization", authorization)
        if compartment_ocid is not None:
            pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        if correlation_policies is not None:
            pulumi.set(__self__, "correlation_policies", correlation_policies)
        if delete_in_progress is not None:
            pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain_ocid is not None:
            pulumi.set(__self__, "domain_ocid", domain_ocid)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if encryption_certificate is not None:
            pulumi.set(__self__, "encryption_certificate", encryption_certificate)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if icon_url is not None:
            pulumi.set(__self__, "icon_url", icon_url)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if idcs_created_bies is not None:
            pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        if idcs_endpoint is not None:
            pulumi.set(__self__, "idcs_endpoint", idcs_endpoint)
        if idcs_last_modified_bies is not None:
            pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        if idcs_last_upgraded_in_release is not None:
            pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        if idcs_prevented_operations is not None:
            pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        if idp_sso_url is not None:
            pulumi.set(__self__, "idp_sso_url", idp_sso_url)
        if include_signing_cert_in_signature is not None:
            pulumi.set(__self__, "include_signing_cert_in_signature", include_signing_cert_in_signature)
        if jit_user_prov_assigned_groups is not None:
            pulumi.set(__self__, "jit_user_prov_assigned_groups", jit_user_prov_assigned_groups)
        if jit_user_prov_attribute_update_enabled is not None:
            pulumi.set(__self__, "jit_user_prov_attribute_update_enabled", jit_user_prov_attribute_update_enabled)
        if jit_user_prov_attributes is not None:
            pulumi.set(__self__, "jit_user_prov_attributes", jit_user_prov_attributes)
        if jit_user_prov_create_user_enabled is not None:
            pulumi.set(__self__, "jit_user_prov_create_user_enabled", jit_user_prov_create_user_enabled)
        if jit_user_prov_enabled is not None:
            pulumi.set(__self__, "jit_user_prov_enabled", jit_user_prov_enabled)
        if jit_user_prov_group_assertion_attribute_enabled is not None:
            pulumi.set(__self__, "jit_user_prov_group_assertion_attribute_enabled", jit_user_prov_group_assertion_attribute_enabled)
        if jit_user_prov_group_assignment_method is not None:
            pulumi.set(__self__, "jit_user_prov_group_assignment_method", jit_user_prov_group_assignment_method)
        if jit_user_prov_group_mapping_mode is not None:
            pulumi.set(__self__, "jit_user_prov_group_mapping_mode", jit_user_prov_group_mapping_mode)
        if jit_user_prov_group_mappings is not None:
            pulumi.set(__self__, "jit_user_prov_group_mappings", jit_user_prov_group_mappings)
        if jit_user_prov_group_saml_attribute_name is not None:
            pulumi.set(__self__, "jit_user_prov_group_saml_attribute_name", jit_user_prov_group_saml_attribute_name)
        if jit_user_prov_group_static_list_enabled is not None:
            pulumi.set(__self__, "jit_user_prov_group_static_list_enabled", jit_user_prov_group_static_list_enabled)
        if jit_user_prov_ignore_error_on_absent_groups is not None:
            pulumi.set(__self__, "jit_user_prov_ignore_error_on_absent_groups", jit_user_prov_ignore_error_on_absent_groups)
        if last_notification_sent_time is not None:
            pulumi.set(__self__, "last_notification_sent_time", last_notification_sent_time)
        if logout_binding is not None:
            pulumi.set(__self__, "logout_binding", logout_binding)
        if logout_enabled is not None:
            pulumi.set(__self__, "logout_enabled", logout_enabled)
        if logout_request_url is not None:
            pulumi.set(__self__, "logout_request_url", logout_request_url)
        if logout_response_url is not None:
            pulumi.set(__self__, "logout_response_url", logout_response_url)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if metas is not None:
            pulumi.set(__self__, "metas", metas)
        if name_id_format is not None:
            pulumi.set(__self__, "name_id_format", name_id_format)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if partner_name is not None:
            pulumi.set(__self__, "partner_name", partner_name)
        if partner_provider_id is not None:
            pulumi.set(__self__, "partner_provider_id", partner_provider_id)
        if requested_authentication_contexts is not None:
            pulumi.set(__self__, "requested_authentication_contexts", requested_authentication_contexts)
        if require_force_authn is not None:
            pulumi.set(__self__, "require_force_authn", require_force_authn)
        if requires_encrypted_assertion is not None:
            pulumi.set(__self__, "requires_encrypted_assertion", requires_encrypted_assertion)
        if resource_type_schema_version is not None:
            pulumi.set(__self__, "resource_type_schema_version", resource_type_schema_version)
        if saml_ho_krequired is not None:
            pulumi.set(__self__, "saml_ho_krequired", saml_ho_krequired)
        if schemas is not None:
            pulumi.set(__self__, "schemas", schemas)
        if service_instance_identifier is not None:
            pulumi.set(__self__, "service_instance_identifier", service_instance_identifier)
        if shown_on_login_page is not None:
            pulumi.set(__self__, "shown_on_login_page", shown_on_login_page)
        if signature_hash_algorithm is not None:
            pulumi.set(__self__, "signature_hash_algorithm", signature_hash_algorithm)
        if signing_certificate is not None:
            pulumi.set(__self__, "signing_certificate", signing_certificate)
        if succinct_id is not None:
            pulumi.set(__self__, "succinct_id", succinct_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tenancy_ocid is not None:
            pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)
        if tenant_provider_id is not None:
            pulumi.set(__self__, "tenant_provider_id", tenant_provider_id)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if urnietfparamsscimschemasoracleidcsextensionsocial_identity_providers is not None:
            pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionsocial_identity_providers", urnietfparamsscimschemasoracleidcsextensionsocial_identity_providers)
        if urnietfparamsscimschemasoracleidcsextensionx509identity_providers is not None:
            pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionx509identity_providers", urnietfparamsscimschemasoracleidcsextensionx509identity_providers)
        if user_mapping_method is not None:
            pulumi.set(__self__, "user_mapping_method", user_mapping_method)
        if user_mapping_store_attribute is not None:
            pulumi.set(__self__, "user_mapping_store_attribute", user_mapping_store_attribute)

    @property
    @pulumi.getter(name="assertionAttribute")
    def assertion_attribute(self) -> Optional[str]:
        return pulumi.get(self, "assertion_attribute")

    @property
    @pulumi.getter(name="attributeSets")
    def attribute_sets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "attribute_sets")

    @property
    @pulumi.getter
    def attributes(self) -> Optional[str]:
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter(name="authnRequestBinding")
    def authn_request_binding(self) -> Optional[str]:
        return pulumi.get(self, "authn_request_binding")

    @property
    @pulumi.getter
    def authorization(self) -> Optional[str]:
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> Optional[str]:
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="correlationPolicies")
    def correlation_policies(self) -> Optional[Sequence['outputs.GetDomainsIdentityProvidersIdentityProviderCorrelationPolicyResult']]:
        return pulumi.get(self, "correlation_policies")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> Optional[bool]:
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> Optional[str]:
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="encryptionCertificate")
    def encryption_certificate(self) -> Optional[str]:
        return pulumi.get(self, "encryption_certificate")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[str]:
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter(name="iconUrl")
    def icon_url(self) -> Optional[str]:
        return pulumi.get(self, "icon_url")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Optional[Sequence['outputs.GetDomainsIdentityProvidersIdentityProviderIdcsCreatedByResult']]:
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "idcs_endpoint")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Optional[Sequence['outputs.GetDomainsIdentityProvidersIdentityProviderIdcsLastModifiedByResult']]:
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> Optional[str]:
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter(name="idpSsoUrl")
    def idp_sso_url(self) -> Optional[str]:
        return pulumi.get(self, "idp_sso_url")

    @property
    @pulumi.getter(name="includeSigningCertInSignature")
    def include_signing_cert_in_signature(self) -> Optional[bool]:
        return pulumi.get(self, "include_signing_cert_in_signature")

    @property
    @pulumi.getter(name="jitUserProvAssignedGroups")
    def jit_user_prov_assigned_groups(self) -> Optional[Sequence['outputs.GetDomainsIdentityProvidersIdentityProviderJitUserProvAssignedGroupResult']]:
        return pulumi.get(self, "jit_user_prov_assigned_groups")

    @property
    @pulumi.getter(name="jitUserProvAttributeUpdateEnabled")
    def jit_user_prov_attribute_update_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "jit_user_prov_attribute_update_enabled")

    @property
    @pulumi.getter(name="jitUserProvAttributes")
    def jit_user_prov_attributes(self) -> Optional[Sequence['outputs.GetDomainsIdentityProvidersIdentityProviderJitUserProvAttributeResult']]:
        return pulumi.get(self, "jit_user_prov_attributes")

    @property
    @pulumi.getter(name="jitUserProvCreateUserEnabled")
    def jit_user_prov_create_user_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "jit_user_prov_create_user_enabled")

    @property
    @pulumi.getter(name="jitUserProvEnabled")
    def jit_user_prov_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "jit_user_prov_enabled")

    @property
    @pulumi.getter(name="jitUserProvGroupAssertionAttributeEnabled")
    def jit_user_prov_group_assertion_attribute_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "jit_user_prov_group_assertion_attribute_enabled")

    @property
    @pulumi.getter(name="jitUserProvGroupAssignmentMethod")
    def jit_user_prov_group_assignment_method(self) -> Optional[str]:
        return pulumi.get(self, "jit_user_prov_group_assignment_method")

    @property
    @pulumi.getter(name="jitUserProvGroupMappingMode")
    def jit_user_prov_group_mapping_mode(self) -> Optional[str]:
        return pulumi.get(self, "jit_user_prov_group_mapping_mode")

    @property
    @pulumi.getter(name="jitUserProvGroupMappings")
    def jit_user_prov_group_mappings(self) -> Optional[Sequence['outputs.GetDomainsIdentityProvidersIdentityProviderJitUserProvGroupMappingResult']]:
        return pulumi.get(self, "jit_user_prov_group_mappings")

    @property
    @pulumi.getter(name="jitUserProvGroupSamlAttributeName")
    def jit_user_prov_group_saml_attribute_name(self) -> Optional[str]:
        return pulumi.get(self, "jit_user_prov_group_saml_attribute_name")

    @property
    @pulumi.getter(name="jitUserProvGroupStaticListEnabled")
    def jit_user_prov_group_static_list_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "jit_user_prov_group_static_list_enabled")

    @property
    @pulumi.getter(name="jitUserProvIgnoreErrorOnAbsentGroups")
    def jit_user_prov_ignore_error_on_absent_groups(self) -> Optional[bool]:
        return pulumi.get(self, "jit_user_prov_ignore_error_on_absent_groups")

    @property
    @pulumi.getter(name="lastNotificationSentTime")
    def last_notification_sent_time(self) -> Optional[str]:
        return pulumi.get(self, "last_notification_sent_time")

    @property
    @pulumi.getter(name="logoutBinding")
    def logout_binding(self) -> Optional[str]:
        return pulumi.get(self, "logout_binding")

    @property
    @pulumi.getter(name="logoutEnabled")
    def logout_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "logout_enabled")

    @property
    @pulumi.getter(name="logoutRequestUrl")
    def logout_request_url(self) -> Optional[str]:
        return pulumi.get(self, "logout_request_url")

    @property
    @pulumi.getter(name="logoutResponseUrl")
    def logout_response_url(self) -> Optional[str]:
        return pulumi.get(self, "logout_response_url")

    @property
    @pulumi.getter
    def metadata(self) -> Optional[str]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def metas(self) -> Optional[Sequence['outputs.GetDomainsIdentityProvidersIdentityProviderMetaResult']]:
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter(name="nameIdFormat")
    def name_id_format(self) -> Optional[str]:
        return pulumi.get(self, "name_id_format")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="partnerName")
    def partner_name(self) -> Optional[str]:
        return pulumi.get(self, "partner_name")

    @property
    @pulumi.getter(name="partnerProviderId")
    def partner_provider_id(self) -> Optional[str]:
        return pulumi.get(self, "partner_provider_id")

    @property
    @pulumi.getter(name="requestedAuthenticationContexts")
    def requested_authentication_contexts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "requested_authentication_contexts")

    @property
    @pulumi.getter(name="requireForceAuthn")
    def require_force_authn(self) -> Optional[bool]:
        return pulumi.get(self, "require_force_authn")

    @property
    @pulumi.getter(name="requiresEncryptedAssertion")
    def requires_encrypted_assertion(self) -> Optional[bool]:
        return pulumi.get(self, "requires_encrypted_assertion")

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> Optional[str]:
        return pulumi.get(self, "resource_type_schema_version")

    @property
    @pulumi.getter(name="samlHoKrequired")
    def saml_ho_krequired(self) -> Optional[bool]:
        return pulumi.get(self, "saml_ho_krequired")

    @property
    @pulumi.getter
    def schemas(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter(name="serviceInstanceIdentifier")
    def service_instance_identifier(self) -> Optional[str]:
        return pulumi.get(self, "service_instance_identifier")

    @property
    @pulumi.getter(name="shownOnLoginPage")
    def shown_on_login_page(self) -> Optional[bool]:
        return pulumi.get(self, "shown_on_login_page")

    @property
    @pulumi.getter(name="signatureHashAlgorithm")
    def signature_hash_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "signature_hash_algorithm")

    @property
    @pulumi.getter(name="signingCertificate")
    def signing_certificate(self) -> Optional[str]:
        return pulumi.get(self, "signing_certificate")

    @property
    @pulumi.getter(name="succinctId")
    def succinct_id(self) -> Optional[str]:
        return pulumi.get(self, "succinct_id")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.GetDomainsIdentityProvidersIdentityProviderTagResult']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> Optional[str]:
        return pulumi.get(self, "tenancy_ocid")

    @property
    @pulumi.getter(name="tenantProviderId")
    def tenant_provider_id(self) -> Optional[str]:
        return pulumi.get(self, "tenant_provider_id")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionsocialIdentityProviders")
    def urnietfparamsscimschemasoracleidcsextensionsocial_identity_providers(self) -> Optional[Sequence['outputs.GetDomainsIdentityProvidersIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProviderResult']]:
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionsocial_identity_providers")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionx509identityProviders")
    def urnietfparamsscimschemasoracleidcsextensionx509identity_providers(self) -> Optional[Sequence['outputs.GetDomainsIdentityProvidersIdentityProviderUrnietfparamsscimschemasoracleidcsextensionx509identityProviderResult']]:
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionx509identity_providers")

    @property
    @pulumi.getter(name="userMappingMethod")
    def user_mapping_method(self) -> Optional[str]:
        return pulumi.get(self, "user_mapping_method")

    @property
    @pulumi.getter(name="userMappingStoreAttribute")
    def user_mapping_store_attribute(self) -> Optional[str]:
        return pulumi.get(self, "user_mapping_store_attribute")


@pulumi.output_type
class GetDomainsIdentityProvidersIdentityProviderCorrelationPolicyResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsIdentityProvidersIdentityProviderIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsIdentityProvidersIdentityProviderIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsIdentityProvidersIdentityProviderJitUserProvAssignedGroupResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsIdentityProvidersIdentityProviderJitUserProvAttributeResult(dict):
    def __init__(__self__, *,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsIdentityProvidersIdentityProviderJitUserProvGroupMappingResult(dict):
    def __init__(__self__, *,
                 idp_group: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if idp_group is not None:
            pulumi.set(__self__, "idp_group", idp_group)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="idpGroup")
    def idp_group(self) -> Optional[str]:
        return pulumi.get(self, "idp_group")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsIdentityProvidersIdentityProviderMetaResult(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsIdentityProvidersIdentityProviderTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsIdentityProvidersIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProviderResult(dict):
    def __init__(__self__, *,
                 access_token_url: Optional[str] = None,
                 account_linking_enabled: Optional[bool] = None,
                 admin_scopes: Optional[Sequence[str]] = None,
                 authz_url: Optional[str] = None,
                 client_credential_in_payload: Optional[bool] = None,
                 clock_skew_in_seconds: Optional[int] = None,
                 consumer_key: Optional[str] = None,
                 consumer_secret: Optional[str] = None,
                 discovery_url: Optional[str] = None,
                 id_attribute: Optional[str] = None,
                 profile_url: Optional[str] = None,
                 redirect_url: Optional[str] = None,
                 registration_enabled: Optional[bool] = None,
                 scopes: Optional[Sequence[str]] = None,
                 service_provider_name: Optional[str] = None,
                 status: Optional[str] = None):
        if access_token_url is not None:
            pulumi.set(__self__, "access_token_url", access_token_url)
        if account_linking_enabled is not None:
            pulumi.set(__self__, "account_linking_enabled", account_linking_enabled)
        if admin_scopes is not None:
            pulumi.set(__self__, "admin_scopes", admin_scopes)
        if authz_url is not None:
            pulumi.set(__self__, "authz_url", authz_url)
        if client_credential_in_payload is not None:
            pulumi.set(__self__, "client_credential_in_payload", client_credential_in_payload)
        if clock_skew_in_seconds is not None:
            pulumi.set(__self__, "clock_skew_in_seconds", clock_skew_in_seconds)
        if consumer_key is not None:
            pulumi.set(__self__, "consumer_key", consumer_key)
        if consumer_secret is not None:
            pulumi.set(__self__, "consumer_secret", consumer_secret)
        if discovery_url is not None:
            pulumi.set(__self__, "discovery_url", discovery_url)
        if id_attribute is not None:
            pulumi.set(__self__, "id_attribute", id_attribute)
        if profile_url is not None:
            pulumi.set(__self__, "profile_url", profile_url)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if registration_enabled is not None:
            pulumi.set(__self__, "registration_enabled", registration_enabled)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)
        if service_provider_name is not None:
            pulumi.set(__self__, "service_provider_name", service_provider_name)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="accessTokenUrl")
    def access_token_url(self) -> Optional[str]:
        return pulumi.get(self, "access_token_url")

    @property
    @pulumi.getter(name="accountLinkingEnabled")
    def account_linking_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "account_linking_enabled")

    @property
    @pulumi.getter(name="adminScopes")
    def admin_scopes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "admin_scopes")

    @property
    @pulumi.getter(name="authzUrl")
    def authz_url(self) -> Optional[str]:
        return pulumi.get(self, "authz_url")

    @property
    @pulumi.getter(name="clientCredentialInPayload")
    def client_credential_in_payload(self) -> Optional[bool]:
        return pulumi.get(self, "client_credential_in_payload")

    @property
    @pulumi.getter(name="clockSkewInSeconds")
    def clock_skew_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "clock_skew_in_seconds")

    @property
    @pulumi.getter(name="consumerKey")
    def consumer_key(self) -> Optional[str]:
        return pulumi.get(self, "consumer_key")

    @property
    @pulumi.getter(name="consumerSecret")
    def consumer_secret(self) -> Optional[str]:
        return pulumi.get(self, "consumer_secret")

    @property
    @pulumi.getter(name="discoveryUrl")
    def discovery_url(self) -> Optional[str]:
        return pulumi.get(self, "discovery_url")

    @property
    @pulumi.getter(name="idAttribute")
    def id_attribute(self) -> Optional[str]:
        return pulumi.get(self, "id_attribute")

    @property
    @pulumi.getter(name="profileUrl")
    def profile_url(self) -> Optional[str]:
        return pulumi.get(self, "profile_url")

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[str]:
        return pulumi.get(self, "redirect_url")

    @property
    @pulumi.getter(name="registrationEnabled")
    def registration_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "registration_enabled")

    @property
    @pulumi.getter
    def scopes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "scopes")

    @property
    @pulumi.getter(name="serviceProviderName")
    def service_provider_name(self) -> Optional[str]:
        return pulumi.get(self, "service_provider_name")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetDomainsIdentityProvidersIdentityProviderUrnietfparamsscimschemasoracleidcsextensionx509identityProviderResult(dict):
    def __init__(__self__, *,
                 cert_match_attribute: Optional[str] = None,
                 crl_check_on_ocsp_failure_enabled: Optional[bool] = None,
                 crl_enabled: Optional[bool] = None,
                 crl_location: Optional[str] = None,
                 crl_reload_duration: Optional[int] = None,
                 eku_validation_enabled: Optional[bool] = None,
                 eku_values: Optional[Sequence[str]] = None,
                 ocsp_allow_unknown_response_status: Optional[bool] = None,
                 ocsp_enable_signed_response: Optional[bool] = None,
                 ocsp_enabled: Optional[bool] = None,
                 ocsp_responder_url: Optional[str] = None,
                 ocsp_revalidate_time: Optional[int] = None,
                 ocsp_server_name: Optional[str] = None,
                 ocsp_trust_cert_chains: Optional[Sequence[str]] = None,
                 other_cert_match_attribute: Optional[str] = None,
                 signing_certificate_chains: Optional[Sequence[str]] = None,
                 user_match_attribute: Optional[str] = None):
        if cert_match_attribute is not None:
            pulumi.set(__self__, "cert_match_attribute", cert_match_attribute)
        if crl_check_on_ocsp_failure_enabled is not None:
            pulumi.set(__self__, "crl_check_on_ocsp_failure_enabled", crl_check_on_ocsp_failure_enabled)
        if crl_enabled is not None:
            pulumi.set(__self__, "crl_enabled", crl_enabled)
        if crl_location is not None:
            pulumi.set(__self__, "crl_location", crl_location)
        if crl_reload_duration is not None:
            pulumi.set(__self__, "crl_reload_duration", crl_reload_duration)
        if eku_validation_enabled is not None:
            pulumi.set(__self__, "eku_validation_enabled", eku_validation_enabled)
        if eku_values is not None:
            pulumi.set(__self__, "eku_values", eku_values)
        if ocsp_allow_unknown_response_status is not None:
            pulumi.set(__self__, "ocsp_allow_unknown_response_status", ocsp_allow_unknown_response_status)
        if ocsp_enable_signed_response is not None:
            pulumi.set(__self__, "ocsp_enable_signed_response", ocsp_enable_signed_response)
        if ocsp_enabled is not None:
            pulumi.set(__self__, "ocsp_enabled", ocsp_enabled)
        if ocsp_responder_url is not None:
            pulumi.set(__self__, "ocsp_responder_url", ocsp_responder_url)
        if ocsp_revalidate_time is not None:
            pulumi.set(__self__, "ocsp_revalidate_time", ocsp_revalidate_time)
        if ocsp_server_name is not None:
            pulumi.set(__self__, "ocsp_server_name", ocsp_server_name)
        if ocsp_trust_cert_chains is not None:
            pulumi.set(__self__, "ocsp_trust_cert_chains", ocsp_trust_cert_chains)
        if other_cert_match_attribute is not None:
            pulumi.set(__self__, "other_cert_match_attribute", other_cert_match_attribute)
        if signing_certificate_chains is not None:
            pulumi.set(__self__, "signing_certificate_chains", signing_certificate_chains)
        if user_match_attribute is not None:
            pulumi.set(__self__, "user_match_attribute", user_match_attribute)

    @property
    @pulumi.getter(name="certMatchAttribute")
    def cert_match_attribute(self) -> Optional[str]:
        return pulumi.get(self, "cert_match_attribute")

    @property
    @pulumi.getter(name="crlCheckOnOcspFailureEnabled")
    def crl_check_on_ocsp_failure_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "crl_check_on_ocsp_failure_enabled")

    @property
    @pulumi.getter(name="crlEnabled")
    def crl_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "crl_enabled")

    @property
    @pulumi.getter(name="crlLocation")
    def crl_location(self) -> Optional[str]:
        return pulumi.get(self, "crl_location")

    @property
    @pulumi.getter(name="crlReloadDuration")
    def crl_reload_duration(self) -> Optional[int]:
        return pulumi.get(self, "crl_reload_duration")

    @property
    @pulumi.getter(name="ekuValidationEnabled")
    def eku_validation_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "eku_validation_enabled")

    @property
    @pulumi.getter(name="ekuValues")
    def eku_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "eku_values")

    @property
    @pulumi.getter(name="ocspAllowUnknownResponseStatus")
    def ocsp_allow_unknown_response_status(self) -> Optional[bool]:
        return pulumi.get(self, "ocsp_allow_unknown_response_status")

    @property
    @pulumi.getter(name="ocspEnableSignedResponse")
    def ocsp_enable_signed_response(self) -> Optional[bool]:
        return pulumi.get(self, "ocsp_enable_signed_response")

    @property
    @pulumi.getter(name="ocspEnabled")
    def ocsp_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "ocsp_enabled")

    @property
    @pulumi.getter(name="ocspResponderUrl")
    def ocsp_responder_url(self) -> Optional[str]:
        return pulumi.get(self, "ocsp_responder_url")

    @property
    @pulumi.getter(name="ocspRevalidateTime")
    def ocsp_revalidate_time(self) -> Optional[int]:
        return pulumi.get(self, "ocsp_revalidate_time")

    @property
    @pulumi.getter(name="ocspServerName")
    def ocsp_server_name(self) -> Optional[str]:
        return pulumi.get(self, "ocsp_server_name")

    @property
    @pulumi.getter(name="ocspTrustCertChains")
    def ocsp_trust_cert_chains(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ocsp_trust_cert_chains")

    @property
    @pulumi.getter(name="otherCertMatchAttribute")
    def other_cert_match_attribute(self) -> Optional[str]:
        return pulumi.get(self, "other_cert_match_attribute")

    @property
    @pulumi.getter(name="signingCertificateChains")
    def signing_certificate_chains(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "signing_certificate_chains")

    @property
    @pulumi.getter(name="userMatchAttribute")
    def user_match_attribute(self) -> Optional[str]:
        return pulumi.get(self, "user_match_attribute")


@pulumi.output_type
class GetDomainsIdentitySettingIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsIdentitySettingIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsIdentitySettingMetaResult(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsIdentitySettingMyProfileResult(dict):
    def __init__(__self__, *,
                 allow_end_users_to_change_their_password: Optional[bool] = None,
                 allow_end_users_to_link_their_support_account: Optional[bool] = None,
                 allow_end_users_to_manage_their_capabilities: Optional[bool] = None,
                 allow_end_users_to_update_their_security_settings: Optional[bool] = None):
        if allow_end_users_to_change_their_password is not None:
            pulumi.set(__self__, "allow_end_users_to_change_their_password", allow_end_users_to_change_their_password)
        if allow_end_users_to_link_their_support_account is not None:
            pulumi.set(__self__, "allow_end_users_to_link_their_support_account", allow_end_users_to_link_their_support_account)
        if allow_end_users_to_manage_their_capabilities is not None:
            pulumi.set(__self__, "allow_end_users_to_manage_their_capabilities", allow_end_users_to_manage_their_capabilities)
        if allow_end_users_to_update_their_security_settings is not None:
            pulumi.set(__self__, "allow_end_users_to_update_their_security_settings", allow_end_users_to_update_their_security_settings)

    @property
    @pulumi.getter(name="allowEndUsersToChangeTheirPassword")
    def allow_end_users_to_change_their_password(self) -> Optional[bool]:
        return pulumi.get(self, "allow_end_users_to_change_their_password")

    @property
    @pulumi.getter(name="allowEndUsersToLinkTheirSupportAccount")
    def allow_end_users_to_link_their_support_account(self) -> Optional[bool]:
        return pulumi.get(self, "allow_end_users_to_link_their_support_account")

    @property
    @pulumi.getter(name="allowEndUsersToManageTheirCapabilities")
    def allow_end_users_to_manage_their_capabilities(self) -> Optional[bool]:
        return pulumi.get(self, "allow_end_users_to_manage_their_capabilities")

    @property
    @pulumi.getter(name="allowEndUsersToUpdateTheirSecuritySettings")
    def allow_end_users_to_update_their_security_settings(self) -> Optional[bool]:
        return pulumi.get(self, "allow_end_users_to_update_their_security_settings")


@pulumi.output_type
class GetDomainsIdentitySettingPosixGidResult(dict):
    def __init__(__self__, *,
                 manual_assignment_ends_at: Optional[int] = None,
                 manual_assignment_starts_from: Optional[int] = None):
        if manual_assignment_ends_at is not None:
            pulumi.set(__self__, "manual_assignment_ends_at", manual_assignment_ends_at)
        if manual_assignment_starts_from is not None:
            pulumi.set(__self__, "manual_assignment_starts_from", manual_assignment_starts_from)

    @property
    @pulumi.getter(name="manualAssignmentEndsAt")
    def manual_assignment_ends_at(self) -> Optional[int]:
        return pulumi.get(self, "manual_assignment_ends_at")

    @property
    @pulumi.getter(name="manualAssignmentStartsFrom")
    def manual_assignment_starts_from(self) -> Optional[int]:
        return pulumi.get(self, "manual_assignment_starts_from")


@pulumi.output_type
class GetDomainsIdentitySettingPosixUidResult(dict):
    def __init__(__self__, *,
                 manual_assignment_ends_at: Optional[int] = None,
                 manual_assignment_starts_from: Optional[int] = None):
        if manual_assignment_ends_at is not None:
            pulumi.set(__self__, "manual_assignment_ends_at", manual_assignment_ends_at)
        if manual_assignment_starts_from is not None:
            pulumi.set(__self__, "manual_assignment_starts_from", manual_assignment_starts_from)

    @property
    @pulumi.getter(name="manualAssignmentEndsAt")
    def manual_assignment_ends_at(self) -> Optional[int]:
        return pulumi.get(self, "manual_assignment_ends_at")

    @property
    @pulumi.getter(name="manualAssignmentStartsFrom")
    def manual_assignment_starts_from(self) -> Optional[int]:
        return pulumi.get(self, "manual_assignment_starts_from")


@pulumi.output_type
class GetDomainsIdentitySettingTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsIdentitySettingTokenResult(dict):
    def __init__(__self__, *,
                 expires_after: Optional[int] = None,
                 type: Optional[str] = None):
        if expires_after is not None:
            pulumi.set(__self__, "expires_after", expires_after)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="expiresAfter")
    def expires_after(self) -> Optional[int]:
        return pulumi.get(self, "expires_after")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDomainsIdentitySettingsIdentitySettingResult(dict):
    def __init__(__self__, *,
                 attribute_sets: Optional[Sequence[str]] = None,
                 attributes: Optional[str] = None,
                 authorization: Optional[str] = None,
                 compartment_ocid: Optional[str] = None,
                 delete_in_progress: Optional[bool] = None,
                 domain_ocid: Optional[str] = None,
                 emit_locked_message_when_user_is_locked: Optional[bool] = None,
                 external_id: Optional[str] = None,
                 id: Optional[str] = None,
                 idcs_created_bies: Optional[Sequence['outputs.GetDomainsIdentitySettingsIdentitySettingIdcsCreatedByResult']] = None,
                 idcs_endpoint: Optional[str] = None,
                 idcs_last_modified_bies: Optional[Sequence['outputs.GetDomainsIdentitySettingsIdentitySettingIdcsLastModifiedByResult']] = None,
                 idcs_last_upgraded_in_release: Optional[str] = None,
                 idcs_prevented_operations: Optional[Sequence[str]] = None,
                 identity_setting_id: Optional[str] = None,
                 metas: Optional[Sequence['outputs.GetDomainsIdentitySettingsIdentitySettingMetaResult']] = None,
                 my_profiles: Optional[Sequence['outputs.GetDomainsIdentitySettingsIdentitySettingMyProfileResult']] = None,
                 ocid: Optional[str] = None,
                 posix_gids: Optional[Sequence['outputs.GetDomainsIdentitySettingsIdentitySettingPosixGidResult']] = None,
                 posix_uids: Optional[Sequence['outputs.GetDomainsIdentitySettingsIdentitySettingPosixUidResult']] = None,
                 primary_email_required: Optional[bool] = None,
                 remove_invalid_emails: Optional[bool] = None,
                 resource_type_schema_version: Optional[str] = None,
                 return_inactive_over_locked_message: Optional[bool] = None,
                 schemas: Optional[Sequence[str]] = None,
                 tags: Optional[Sequence['outputs.GetDomainsIdentitySettingsIdentitySettingTagResult']] = None,
                 tenancy_ocid: Optional[str] = None,
                 tokens: Optional[Sequence['outputs.GetDomainsIdentitySettingsIdentitySettingTokenResult']] = None,
                 user_allowed_to_set_recovery_email: Optional[bool] = None):
        if attribute_sets is not None:
            pulumi.set(__self__, "attribute_sets", attribute_sets)
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)
        if authorization is not None:
            pulumi.set(__self__, "authorization", authorization)
        if compartment_ocid is not None:
            pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        if delete_in_progress is not None:
            pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        if domain_ocid is not None:
            pulumi.set(__self__, "domain_ocid", domain_ocid)
        if emit_locked_message_when_user_is_locked is not None:
            pulumi.set(__self__, "emit_locked_message_when_user_is_locked", emit_locked_message_when_user_is_locked)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if idcs_created_bies is not None:
            pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        if idcs_endpoint is not None:
            pulumi.set(__self__, "idcs_endpoint", idcs_endpoint)
        if idcs_last_modified_bies is not None:
            pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        if idcs_last_upgraded_in_release is not None:
            pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        if idcs_prevented_operations is not None:
            pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        if identity_setting_id is not None:
            pulumi.set(__self__, "identity_setting_id", identity_setting_id)
        if metas is not None:
            pulumi.set(__self__, "metas", metas)
        if my_profiles is not None:
            pulumi.set(__self__, "my_profiles", my_profiles)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if posix_gids is not None:
            pulumi.set(__self__, "posix_gids", posix_gids)
        if posix_uids is not None:
            pulumi.set(__self__, "posix_uids", posix_uids)
        if primary_email_required is not None:
            pulumi.set(__self__, "primary_email_required", primary_email_required)
        if remove_invalid_emails is not None:
            pulumi.set(__self__, "remove_invalid_emails", remove_invalid_emails)
        if resource_type_schema_version is not None:
            pulumi.set(__self__, "resource_type_schema_version", resource_type_schema_version)
        if return_inactive_over_locked_message is not None:
            pulumi.set(__self__, "return_inactive_over_locked_message", return_inactive_over_locked_message)
        if schemas is not None:
            pulumi.set(__self__, "schemas", schemas)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tenancy_ocid is not None:
            pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)
        if tokens is not None:
            pulumi.set(__self__, "tokens", tokens)
        if user_allowed_to_set_recovery_email is not None:
            pulumi.set(__self__, "user_allowed_to_set_recovery_email", user_allowed_to_set_recovery_email)

    @property
    @pulumi.getter(name="attributeSets")
    def attribute_sets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "attribute_sets")

    @property
    @pulumi.getter
    def attributes(self) -> Optional[str]:
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter
    def authorization(self) -> Optional[str]:
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> Optional[str]:
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> Optional[bool]:
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> Optional[str]:
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter(name="emitLockedMessageWhenUserIsLocked")
    def emit_locked_message_when_user_is_locked(self) -> Optional[bool]:
        return pulumi.get(self, "emit_locked_message_when_user_is_locked")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[str]:
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Optional[Sequence['outputs.GetDomainsIdentitySettingsIdentitySettingIdcsCreatedByResult']]:
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "idcs_endpoint")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Optional[Sequence['outputs.GetDomainsIdentitySettingsIdentitySettingIdcsLastModifiedByResult']]:
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> Optional[str]:
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter(name="identitySettingId")
    def identity_setting_id(self) -> Optional[str]:
        return pulumi.get(self, "identity_setting_id")

    @property
    @pulumi.getter
    def metas(self) -> Optional[Sequence['outputs.GetDomainsIdentitySettingsIdentitySettingMetaResult']]:
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter(name="myProfiles")
    def my_profiles(self) -> Optional[Sequence['outputs.GetDomainsIdentitySettingsIdentitySettingMyProfileResult']]:
        return pulumi.get(self, "my_profiles")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="posixGids")
    def posix_gids(self) -> Optional[Sequence['outputs.GetDomainsIdentitySettingsIdentitySettingPosixGidResult']]:
        return pulumi.get(self, "posix_gids")

    @property
    @pulumi.getter(name="posixUids")
    def posix_uids(self) -> Optional[Sequence['outputs.GetDomainsIdentitySettingsIdentitySettingPosixUidResult']]:
        return pulumi.get(self, "posix_uids")

    @property
    @pulumi.getter(name="primaryEmailRequired")
    def primary_email_required(self) -> Optional[bool]:
        return pulumi.get(self, "primary_email_required")

    @property
    @pulumi.getter(name="removeInvalidEmails")
    def remove_invalid_emails(self) -> Optional[bool]:
        return pulumi.get(self, "remove_invalid_emails")

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> Optional[str]:
        return pulumi.get(self, "resource_type_schema_version")

    @property
    @pulumi.getter(name="returnInactiveOverLockedMessage")
    def return_inactive_over_locked_message(self) -> Optional[bool]:
        return pulumi.get(self, "return_inactive_over_locked_message")

    @property
    @pulumi.getter
    def schemas(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.GetDomainsIdentitySettingsIdentitySettingTagResult']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> Optional[str]:
        return pulumi.get(self, "tenancy_ocid")

    @property
    @pulumi.getter
    def tokens(self) -> Optional[Sequence['outputs.GetDomainsIdentitySettingsIdentitySettingTokenResult']]:
        return pulumi.get(self, "tokens")

    @property
    @pulumi.getter(name="userAllowedToSetRecoveryEmail")
    def user_allowed_to_set_recovery_email(self) -> Optional[bool]:
        return pulumi.get(self, "user_allowed_to_set_recovery_email")


@pulumi.output_type
class GetDomainsIdentitySettingsIdentitySettingIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsIdentitySettingsIdentitySettingIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsIdentitySettingsIdentitySettingMetaResult(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsIdentitySettingsIdentitySettingMyProfileResult(dict):
    def __init__(__self__, *,
                 allow_end_users_to_change_their_password: Optional[bool] = None,
                 allow_end_users_to_link_their_support_account: Optional[bool] = None,
                 allow_end_users_to_manage_their_capabilities: Optional[bool] = None,
                 allow_end_users_to_update_their_security_settings: Optional[bool] = None):
        if allow_end_users_to_change_their_password is not None:
            pulumi.set(__self__, "allow_end_users_to_change_their_password", allow_end_users_to_change_their_password)
        if allow_end_users_to_link_their_support_account is not None:
            pulumi.set(__self__, "allow_end_users_to_link_their_support_account", allow_end_users_to_link_their_support_account)
        if allow_end_users_to_manage_their_capabilities is not None:
            pulumi.set(__self__, "allow_end_users_to_manage_their_capabilities", allow_end_users_to_manage_their_capabilities)
        if allow_end_users_to_update_their_security_settings is not None:
            pulumi.set(__self__, "allow_end_users_to_update_their_security_settings", allow_end_users_to_update_their_security_settings)

    @property
    @pulumi.getter(name="allowEndUsersToChangeTheirPassword")
    def allow_end_users_to_change_their_password(self) -> Optional[bool]:
        return pulumi.get(self, "allow_end_users_to_change_their_password")

    @property
    @pulumi.getter(name="allowEndUsersToLinkTheirSupportAccount")
    def allow_end_users_to_link_their_support_account(self) -> Optional[bool]:
        return pulumi.get(self, "allow_end_users_to_link_their_support_account")

    @property
    @pulumi.getter(name="allowEndUsersToManageTheirCapabilities")
    def allow_end_users_to_manage_their_capabilities(self) -> Optional[bool]:
        return pulumi.get(self, "allow_end_users_to_manage_their_capabilities")

    @property
    @pulumi.getter(name="allowEndUsersToUpdateTheirSecuritySettings")
    def allow_end_users_to_update_their_security_settings(self) -> Optional[bool]:
        return pulumi.get(self, "allow_end_users_to_update_their_security_settings")


@pulumi.output_type
class GetDomainsIdentitySettingsIdentitySettingPosixGidResult(dict):
    def __init__(__self__, *,
                 manual_assignment_ends_at: Optional[int] = None,
                 manual_assignment_starts_from: Optional[int] = None):
        if manual_assignment_ends_at is not None:
            pulumi.set(__self__, "manual_assignment_ends_at", manual_assignment_ends_at)
        if manual_assignment_starts_from is not None:
            pulumi.set(__self__, "manual_assignment_starts_from", manual_assignment_starts_from)

    @property
    @pulumi.getter(name="manualAssignmentEndsAt")
    def manual_assignment_ends_at(self) -> Optional[int]:
        return pulumi.get(self, "manual_assignment_ends_at")

    @property
    @pulumi.getter(name="manualAssignmentStartsFrom")
    def manual_assignment_starts_from(self) -> Optional[int]:
        return pulumi.get(self, "manual_assignment_starts_from")


@pulumi.output_type
class GetDomainsIdentitySettingsIdentitySettingPosixUidResult(dict):
    def __init__(__self__, *,
                 manual_assignment_ends_at: Optional[int] = None,
                 manual_assignment_starts_from: Optional[int] = None):
        if manual_assignment_ends_at is not None:
            pulumi.set(__self__, "manual_assignment_ends_at", manual_assignment_ends_at)
        if manual_assignment_starts_from is not None:
            pulumi.set(__self__, "manual_assignment_starts_from", manual_assignment_starts_from)

    @property
    @pulumi.getter(name="manualAssignmentEndsAt")
    def manual_assignment_ends_at(self) -> Optional[int]:
        return pulumi.get(self, "manual_assignment_ends_at")

    @property
    @pulumi.getter(name="manualAssignmentStartsFrom")
    def manual_assignment_starts_from(self) -> Optional[int]:
        return pulumi.get(self, "manual_assignment_starts_from")


@pulumi.output_type
class GetDomainsIdentitySettingsIdentitySettingTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsIdentitySettingsIdentitySettingTokenResult(dict):
    def __init__(__self__, *,
                 expires_after: Optional[int] = None,
                 type: Optional[str] = None):
        if expires_after is not None:
            pulumi.set(__self__, "expires_after", expires_after)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="expiresAfter")
    def expires_after(self) -> Optional[int]:
        return pulumi.get(self, "expires_after")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDomainsKmsiSettingIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsKmsiSettingIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsKmsiSettingMetaResult(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsKmsiSettingTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsKmsiSettingsKmsiSettingResult(dict):
    def __init__(__self__, *,
                 attribute_sets: Optional[Sequence[str]] = None,
                 attributes: Optional[str] = None,
                 authorization: Optional[str] = None,
                 compartment_ocid: Optional[str] = None,
                 delete_in_progress: Optional[bool] = None,
                 domain_ocid: Optional[str] = None,
                 external_id: Optional[str] = None,
                 id: Optional[str] = None,
                 idcs_created_bies: Optional[Sequence['outputs.GetDomainsKmsiSettingsKmsiSettingIdcsCreatedByResult']] = None,
                 idcs_endpoint: Optional[str] = None,
                 idcs_last_modified_bies: Optional[Sequence['outputs.GetDomainsKmsiSettingsKmsiSettingIdcsLastModifiedByResult']] = None,
                 idcs_last_upgraded_in_release: Optional[str] = None,
                 idcs_prevented_operations: Optional[Sequence[str]] = None,
                 kmsi_feature_enabled: Optional[bool] = None,
                 kmsi_prompt_enabled: Optional[bool] = None,
                 kmsi_setting_id: Optional[str] = None,
                 last_enabled_on: Optional[str] = None,
                 last_used_validity_in_days: Optional[int] = None,
                 max_allowed_sessions: Optional[int] = None,
                 metas: Optional[Sequence['outputs.GetDomainsKmsiSettingsKmsiSettingMetaResult']] = None,
                 ocid: Optional[str] = None,
                 resource_type_schema_version: Optional[str] = None,
                 schemas: Optional[Sequence[str]] = None,
                 tags: Optional[Sequence['outputs.GetDomainsKmsiSettingsKmsiSettingTagResult']] = None,
                 tenancy_ocid: Optional[str] = None,
                 token_validity_in_days: Optional[int] = None,
                 tou_prompt_disabled: Optional[bool] = None):
        if attribute_sets is not None:
            pulumi.set(__self__, "attribute_sets", attribute_sets)
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)
        if authorization is not None:
            pulumi.set(__self__, "authorization", authorization)
        if compartment_ocid is not None:
            pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        if delete_in_progress is not None:
            pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        if domain_ocid is not None:
            pulumi.set(__self__, "domain_ocid", domain_ocid)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if idcs_created_bies is not None:
            pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        if idcs_endpoint is not None:
            pulumi.set(__self__, "idcs_endpoint", idcs_endpoint)
        if idcs_last_modified_bies is not None:
            pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        if idcs_last_upgraded_in_release is not None:
            pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        if idcs_prevented_operations is not None:
            pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        if kmsi_feature_enabled is not None:
            pulumi.set(__self__, "kmsi_feature_enabled", kmsi_feature_enabled)
        if kmsi_prompt_enabled is not None:
            pulumi.set(__self__, "kmsi_prompt_enabled", kmsi_prompt_enabled)
        if kmsi_setting_id is not None:
            pulumi.set(__self__, "kmsi_setting_id", kmsi_setting_id)
        if last_enabled_on is not None:
            pulumi.set(__self__, "last_enabled_on", last_enabled_on)
        if last_used_validity_in_days is not None:
            pulumi.set(__self__, "last_used_validity_in_days", last_used_validity_in_days)
        if max_allowed_sessions is not None:
            pulumi.set(__self__, "max_allowed_sessions", max_allowed_sessions)
        if metas is not None:
            pulumi.set(__self__, "metas", metas)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if resource_type_schema_version is not None:
            pulumi.set(__self__, "resource_type_schema_version", resource_type_schema_version)
        if schemas is not None:
            pulumi.set(__self__, "schemas", schemas)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tenancy_ocid is not None:
            pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)
        if token_validity_in_days is not None:
            pulumi.set(__self__, "token_validity_in_days", token_validity_in_days)
        if tou_prompt_disabled is not None:
            pulumi.set(__self__, "tou_prompt_disabled", tou_prompt_disabled)

    @property
    @pulumi.getter(name="attributeSets")
    def attribute_sets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "attribute_sets")

    @property
    @pulumi.getter
    def attributes(self) -> Optional[str]:
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter
    def authorization(self) -> Optional[str]:
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> Optional[str]:
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> Optional[bool]:
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> Optional[str]:
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[str]:
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Optional[Sequence['outputs.GetDomainsKmsiSettingsKmsiSettingIdcsCreatedByResult']]:
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "idcs_endpoint")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Optional[Sequence['outputs.GetDomainsKmsiSettingsKmsiSettingIdcsLastModifiedByResult']]:
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> Optional[str]:
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter(name="kmsiFeatureEnabled")
    def kmsi_feature_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "kmsi_feature_enabled")

    @property
    @pulumi.getter(name="kmsiPromptEnabled")
    def kmsi_prompt_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "kmsi_prompt_enabled")

    @property
    @pulumi.getter(name="kmsiSettingId")
    def kmsi_setting_id(self) -> Optional[str]:
        return pulumi.get(self, "kmsi_setting_id")

    @property
    @pulumi.getter(name="lastEnabledOn")
    def last_enabled_on(self) -> Optional[str]:
        return pulumi.get(self, "last_enabled_on")

    @property
    @pulumi.getter(name="lastUsedValidityInDays")
    def last_used_validity_in_days(self) -> Optional[int]:
        return pulumi.get(self, "last_used_validity_in_days")

    @property
    @pulumi.getter(name="maxAllowedSessions")
    def max_allowed_sessions(self) -> Optional[int]:
        return pulumi.get(self, "max_allowed_sessions")

    @property
    @pulumi.getter
    def metas(self) -> Optional[Sequence['outputs.GetDomainsKmsiSettingsKmsiSettingMetaResult']]:
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> Optional[str]:
        return pulumi.get(self, "resource_type_schema_version")

    @property
    @pulumi.getter
    def schemas(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.GetDomainsKmsiSettingsKmsiSettingTagResult']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> Optional[str]:
        return pulumi.get(self, "tenancy_ocid")

    @property
    @pulumi.getter(name="tokenValidityInDays")
    def token_validity_in_days(self) -> Optional[int]:
        return pulumi.get(self, "token_validity_in_days")

    @property
    @pulumi.getter(name="touPromptDisabled")
    def tou_prompt_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "tou_prompt_disabled")


@pulumi.output_type
class GetDomainsKmsiSettingsKmsiSettingIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsKmsiSettingsKmsiSettingIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsKmsiSettingsKmsiSettingMetaResult(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsKmsiSettingsKmsiSettingTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyApiKeyIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyApiKeyIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyApiKeyMetaResult(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsMyApiKeyTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyApiKeyUserResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyApiKeysMyApiKeyResult(dict):
    def __init__(__self__, *,
                 authorization: Optional[str] = None,
                 compartment_ocid: Optional[str] = None,
                 delete_in_progress: Optional[bool] = None,
                 description: Optional[str] = None,
                 domain_ocid: Optional[str] = None,
                 fingerprint: Optional[str] = None,
                 id: Optional[str] = None,
                 idcs_created_bies: Optional[Sequence['outputs.GetDomainsMyApiKeysMyApiKeyIdcsCreatedByResult']] = None,
                 idcs_endpoint: Optional[str] = None,
                 idcs_last_modified_bies: Optional[Sequence['outputs.GetDomainsMyApiKeysMyApiKeyIdcsLastModifiedByResult']] = None,
                 idcs_last_upgraded_in_release: Optional[str] = None,
                 idcs_prevented_operations: Optional[Sequence[str]] = None,
                 key: Optional[str] = None,
                 metas: Optional[Sequence['outputs.GetDomainsMyApiKeysMyApiKeyMetaResult']] = None,
                 ocid: Optional[str] = None,
                 resource_type_schema_version: Optional[str] = None,
                 schemas: Optional[Sequence[str]] = None,
                 tags: Optional[Sequence['outputs.GetDomainsMyApiKeysMyApiKeyTagResult']] = None,
                 tenancy_ocid: Optional[str] = None,
                 users: Optional[Sequence['outputs.GetDomainsMyApiKeysMyApiKeyUserResult']] = None):
        if authorization is not None:
            pulumi.set(__self__, "authorization", authorization)
        if compartment_ocid is not None:
            pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        if delete_in_progress is not None:
            pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain_ocid is not None:
            pulumi.set(__self__, "domain_ocid", domain_ocid)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if idcs_created_bies is not None:
            pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        if idcs_endpoint is not None:
            pulumi.set(__self__, "idcs_endpoint", idcs_endpoint)
        if idcs_last_modified_bies is not None:
            pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        if idcs_last_upgraded_in_release is not None:
            pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        if idcs_prevented_operations is not None:
            pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if metas is not None:
            pulumi.set(__self__, "metas", metas)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if resource_type_schema_version is not None:
            pulumi.set(__self__, "resource_type_schema_version", resource_type_schema_version)
        if schemas is not None:
            pulumi.set(__self__, "schemas", schemas)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tenancy_ocid is not None:
            pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter
    def authorization(self) -> Optional[str]:
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> Optional[str]:
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> Optional[bool]:
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> Optional[str]:
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[str]:
        return pulumi.get(self, "fingerprint")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Optional[Sequence['outputs.GetDomainsMyApiKeysMyApiKeyIdcsCreatedByResult']]:
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "idcs_endpoint")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Optional[Sequence['outputs.GetDomainsMyApiKeysMyApiKeyIdcsLastModifiedByResult']]:
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> Optional[str]:
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def metas(self) -> Optional[Sequence['outputs.GetDomainsMyApiKeysMyApiKeyMetaResult']]:
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> Optional[str]:
        return pulumi.get(self, "resource_type_schema_version")

    @property
    @pulumi.getter
    def schemas(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.GetDomainsMyApiKeysMyApiKeyTagResult']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> Optional[str]:
        return pulumi.get(self, "tenancy_ocid")

    @property
    @pulumi.getter
    def users(self) -> Optional[Sequence['outputs.GetDomainsMyApiKeysMyApiKeyUserResult']]:
        return pulumi.get(self, "users")


@pulumi.output_type
class GetDomainsMyApiKeysMyApiKeyIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyApiKeysMyApiKeyIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyApiKeysMyApiKeyMetaResult(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsMyApiKeysMyApiKeyTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyApiKeysMyApiKeyUserResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyAppsMyAppResult(dict):
    def __init__(__self__, *,
                 account_type: Optional[str] = None,
                 active: Optional[bool] = None,
                 apps: Optional[Sequence['outputs.GetDomainsMyAppsMyAppAppResult']] = None,
                 compartment_ocid: Optional[str] = None,
                 delete_in_progress: Optional[bool] = None,
                 domain_ocid: Optional[str] = None,
                 favorite: Optional[bool] = None,
                 id: Optional[str] = None,
                 idcs_created_bies: Optional[Sequence['outputs.GetDomainsMyAppsMyAppIdcsCreatedByResult']] = None,
                 idcs_last_modified_bies: Optional[Sequence['outputs.GetDomainsMyAppsMyAppIdcsLastModifiedByResult']] = None,
                 idcs_last_upgraded_in_release: Optional[str] = None,
                 idcs_prevented_operations: Optional[Sequence[str]] = None,
                 is_account: Optional[bool] = None,
                 last_accessed: Optional[str] = None,
                 launch_url: Optional[str] = None,
                 metas: Optional[Sequence['outputs.GetDomainsMyAppsMyAppMetaResult']] = None,
                 name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 owners: Optional[Sequence['outputs.GetDomainsMyAppsMyAppOwnerResult']] = None,
                 schemas: Optional[Sequence[str]] = None,
                 tags: Optional[Sequence['outputs.GetDomainsMyAppsMyAppTagResult']] = None,
                 tenancy_ocid: Optional[str] = None,
                 uid: Optional[str] = None,
                 user_wallet_artifacts: Optional[Sequence['outputs.GetDomainsMyAppsMyAppUserWalletArtifactResult']] = None):
        if account_type is not None:
            pulumi.set(__self__, "account_type", account_type)
        if active is not None:
            pulumi.set(__self__, "active", active)
        if apps is not None:
            pulumi.set(__self__, "apps", apps)
        if compartment_ocid is not None:
            pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        if delete_in_progress is not None:
            pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        if domain_ocid is not None:
            pulumi.set(__self__, "domain_ocid", domain_ocid)
        if favorite is not None:
            pulumi.set(__self__, "favorite", favorite)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if idcs_created_bies is not None:
            pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        if idcs_last_modified_bies is not None:
            pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        if idcs_last_upgraded_in_release is not None:
            pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        if idcs_prevented_operations is not None:
            pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        if is_account is not None:
            pulumi.set(__self__, "is_account", is_account)
        if last_accessed is not None:
            pulumi.set(__self__, "last_accessed", last_accessed)
        if launch_url is not None:
            pulumi.set(__self__, "launch_url", launch_url)
        if metas is not None:
            pulumi.set(__self__, "metas", metas)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if owners is not None:
            pulumi.set(__self__, "owners", owners)
        if schemas is not None:
            pulumi.set(__self__, "schemas", schemas)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tenancy_ocid is not None:
            pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)
        if user_wallet_artifacts is not None:
            pulumi.set(__self__, "user_wallet_artifacts", user_wallet_artifacts)

    @property
    @pulumi.getter(name="accountType")
    def account_type(self) -> Optional[str]:
        return pulumi.get(self, "account_type")

    @property
    @pulumi.getter
    def active(self) -> Optional[bool]:
        return pulumi.get(self, "active")

    @property
    @pulumi.getter
    def apps(self) -> Optional[Sequence['outputs.GetDomainsMyAppsMyAppAppResult']]:
        return pulumi.get(self, "apps")

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> Optional[str]:
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> Optional[bool]:
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> Optional[str]:
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter
    def favorite(self) -> Optional[bool]:
        return pulumi.get(self, "favorite")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Optional[Sequence['outputs.GetDomainsMyAppsMyAppIdcsCreatedByResult']]:
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Optional[Sequence['outputs.GetDomainsMyAppsMyAppIdcsLastModifiedByResult']]:
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> Optional[str]:
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter(name="isAccount")
    def is_account(self) -> Optional[bool]:
        return pulumi.get(self, "is_account")

    @property
    @pulumi.getter(name="lastAccessed")
    def last_accessed(self) -> Optional[str]:
        return pulumi.get(self, "last_accessed")

    @property
    @pulumi.getter(name="launchUrl")
    def launch_url(self) -> Optional[str]:
        return pulumi.get(self, "launch_url")

    @property
    @pulumi.getter
    def metas(self) -> Optional[Sequence['outputs.GetDomainsMyAppsMyAppMetaResult']]:
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def owners(self) -> Optional[Sequence['outputs.GetDomainsMyAppsMyAppOwnerResult']]:
        return pulumi.get(self, "owners")

    @property
    @pulumi.getter
    def schemas(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.GetDomainsMyAppsMyAppTagResult']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> Optional[str]:
        return pulumi.get(self, "tenancy_ocid")

    @property
    @pulumi.getter
    def uid(self) -> Optional[str]:
        return pulumi.get(self, "uid")

    @property
    @pulumi.getter(name="userWalletArtifacts")
    def user_wallet_artifacts(self) -> Optional[Sequence['outputs.GetDomainsMyAppsMyAppUserWalletArtifactResult']]:
        return pulumi.get(self, "user_wallet_artifacts")


@pulumi.output_type
class GetDomainsMyAppsMyAppAppResult(dict):
    def __init__(__self__, *,
                 active: Optional[bool] = None,
                 app_icon: Optional[str] = None,
                 app_thumbnail: Optional[str] = None,
                 description: Optional[str] = None,
                 display: Optional[str] = None,
                 is_alias_app: Optional[bool] = None,
                 is_login_target: Optional[bool] = None,
                 is_opc_service: Optional[bool] = None,
                 login_mechanism: Optional[str] = None,
                 ref: Optional[str] = None,
                 service_type_urn: Optional[str] = None,
                 show_in_my_apps: Optional[bool] = None,
                 value: Optional[str] = None):
        if active is not None:
            pulumi.set(__self__, "active", active)
        if app_icon is not None:
            pulumi.set(__self__, "app_icon", app_icon)
        if app_thumbnail is not None:
            pulumi.set(__self__, "app_thumbnail", app_thumbnail)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if is_alias_app is not None:
            pulumi.set(__self__, "is_alias_app", is_alias_app)
        if is_login_target is not None:
            pulumi.set(__self__, "is_login_target", is_login_target)
        if is_opc_service is not None:
            pulumi.set(__self__, "is_opc_service", is_opc_service)
        if login_mechanism is not None:
            pulumi.set(__self__, "login_mechanism", login_mechanism)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if service_type_urn is not None:
            pulumi.set(__self__, "service_type_urn", service_type_urn)
        if show_in_my_apps is not None:
            pulumi.set(__self__, "show_in_my_apps", show_in_my_apps)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def active(self) -> Optional[bool]:
        return pulumi.get(self, "active")

    @property
    @pulumi.getter(name="appIcon")
    def app_icon(self) -> Optional[str]:
        return pulumi.get(self, "app_icon")

    @property
    @pulumi.getter(name="appThumbnail")
    def app_thumbnail(self) -> Optional[str]:
        return pulumi.get(self, "app_thumbnail")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter(name="isAliasApp")
    def is_alias_app(self) -> Optional[bool]:
        return pulumi.get(self, "is_alias_app")

    @property
    @pulumi.getter(name="isLoginTarget")
    def is_login_target(self) -> Optional[bool]:
        return pulumi.get(self, "is_login_target")

    @property
    @pulumi.getter(name="isOpcService")
    def is_opc_service(self) -> Optional[bool]:
        return pulumi.get(self, "is_opc_service")

    @property
    @pulumi.getter(name="loginMechanism")
    def login_mechanism(self) -> Optional[str]:
        return pulumi.get(self, "login_mechanism")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="serviceTypeUrn")
    def service_type_urn(self) -> Optional[str]:
        return pulumi.get(self, "service_type_urn")

    @property
    @pulumi.getter(name="showInMyApps")
    def show_in_my_apps(self) -> Optional[bool]:
        return pulumi.get(self, "show_in_my_apps")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyAppsMyAppIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyAppsMyAppIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyAppsMyAppMetaResult(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsMyAppsMyAppOwnerResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyAppsMyAppTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyAppsMyAppUserWalletArtifactResult(dict):
    def __init__(__self__, *,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyAuthTokenIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyAuthTokenIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyAuthTokenMetaResult(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsMyAuthTokenTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyAuthTokenUserResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyAuthTokensMyAuthTokenResult(dict):
    def __init__(__self__, *,
                 authorization: Optional[str] = None,
                 compartment_ocid: Optional[str] = None,
                 delete_in_progress: Optional[bool] = None,
                 description: Optional[str] = None,
                 domain_ocid: Optional[str] = None,
                 expires_on: Optional[str] = None,
                 id: Optional[str] = None,
                 idcs_created_bies: Optional[Sequence['outputs.GetDomainsMyAuthTokensMyAuthTokenIdcsCreatedByResult']] = None,
                 idcs_endpoint: Optional[str] = None,
                 idcs_last_modified_bies: Optional[Sequence['outputs.GetDomainsMyAuthTokensMyAuthTokenIdcsLastModifiedByResult']] = None,
                 idcs_last_upgraded_in_release: Optional[str] = None,
                 idcs_prevented_operations: Optional[Sequence[str]] = None,
                 metas: Optional[Sequence['outputs.GetDomainsMyAuthTokensMyAuthTokenMetaResult']] = None,
                 ocid: Optional[str] = None,
                 resource_type_schema_version: Optional[str] = None,
                 schemas: Optional[Sequence[str]] = None,
                 status: Optional[str] = None,
                 tags: Optional[Sequence['outputs.GetDomainsMyAuthTokensMyAuthTokenTagResult']] = None,
                 tenancy_ocid: Optional[str] = None,
                 users: Optional[Sequence['outputs.GetDomainsMyAuthTokensMyAuthTokenUserResult']] = None):
        if authorization is not None:
            pulumi.set(__self__, "authorization", authorization)
        if compartment_ocid is not None:
            pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        if delete_in_progress is not None:
            pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain_ocid is not None:
            pulumi.set(__self__, "domain_ocid", domain_ocid)
        if expires_on is not None:
            pulumi.set(__self__, "expires_on", expires_on)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if idcs_created_bies is not None:
            pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        if idcs_endpoint is not None:
            pulumi.set(__self__, "idcs_endpoint", idcs_endpoint)
        if idcs_last_modified_bies is not None:
            pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        if idcs_last_upgraded_in_release is not None:
            pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        if idcs_prevented_operations is not None:
            pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        if metas is not None:
            pulumi.set(__self__, "metas", metas)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if resource_type_schema_version is not None:
            pulumi.set(__self__, "resource_type_schema_version", resource_type_schema_version)
        if schemas is not None:
            pulumi.set(__self__, "schemas", schemas)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tenancy_ocid is not None:
            pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter
    def authorization(self) -> Optional[str]:
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> Optional[str]:
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> Optional[bool]:
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> Optional[str]:
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter(name="expiresOn")
    def expires_on(self) -> Optional[str]:
        return pulumi.get(self, "expires_on")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Optional[Sequence['outputs.GetDomainsMyAuthTokensMyAuthTokenIdcsCreatedByResult']]:
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "idcs_endpoint")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Optional[Sequence['outputs.GetDomainsMyAuthTokensMyAuthTokenIdcsLastModifiedByResult']]:
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> Optional[str]:
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter
    def metas(self) -> Optional[Sequence['outputs.GetDomainsMyAuthTokensMyAuthTokenMetaResult']]:
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> Optional[str]:
        return pulumi.get(self, "resource_type_schema_version")

    @property
    @pulumi.getter
    def schemas(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.GetDomainsMyAuthTokensMyAuthTokenTagResult']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> Optional[str]:
        return pulumi.get(self, "tenancy_ocid")

    @property
    @pulumi.getter
    def users(self) -> Optional[Sequence['outputs.GetDomainsMyAuthTokensMyAuthTokenUserResult']]:
        return pulumi.get(self, "users")


@pulumi.output_type
class GetDomainsMyAuthTokensMyAuthTokenIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyAuthTokensMyAuthTokenIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyAuthTokensMyAuthTokenMetaResult(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsMyAuthTokensMyAuthTokenTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyAuthTokensMyAuthTokenUserResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyCustomerSecretKeyIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyCustomerSecretKeyIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyCustomerSecretKeyMetaResult(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsMyCustomerSecretKeyTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyCustomerSecretKeyUserResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyCustomerSecretKeysMyCustomerSecretKeyResult(dict):
    def __init__(__self__, *,
                 access_key: Optional[str] = None,
                 authorization: Optional[str] = None,
                 compartment_ocid: Optional[str] = None,
                 delete_in_progress: Optional[bool] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 domain_ocid: Optional[str] = None,
                 expires_on: Optional[str] = None,
                 id: Optional[str] = None,
                 idcs_created_bies: Optional[Sequence['outputs.GetDomainsMyCustomerSecretKeysMyCustomerSecretKeyIdcsCreatedByResult']] = None,
                 idcs_endpoint: Optional[str] = None,
                 idcs_last_modified_bies: Optional[Sequence['outputs.GetDomainsMyCustomerSecretKeysMyCustomerSecretKeyIdcsLastModifiedByResult']] = None,
                 idcs_last_upgraded_in_release: Optional[str] = None,
                 idcs_prevented_operations: Optional[Sequence[str]] = None,
                 metas: Optional[Sequence['outputs.GetDomainsMyCustomerSecretKeysMyCustomerSecretKeyMetaResult']] = None,
                 ocid: Optional[str] = None,
                 resource_type_schema_version: Optional[str] = None,
                 schemas: Optional[Sequence[str]] = None,
                 status: Optional[str] = None,
                 tags: Optional[Sequence['outputs.GetDomainsMyCustomerSecretKeysMyCustomerSecretKeyTagResult']] = None,
                 tenancy_ocid: Optional[str] = None,
                 users: Optional[Sequence['outputs.GetDomainsMyCustomerSecretKeysMyCustomerSecretKeyUserResult']] = None):
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if authorization is not None:
            pulumi.set(__self__, "authorization", authorization)
        if compartment_ocid is not None:
            pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        if delete_in_progress is not None:
            pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if domain_ocid is not None:
            pulumi.set(__self__, "domain_ocid", domain_ocid)
        if expires_on is not None:
            pulumi.set(__self__, "expires_on", expires_on)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if idcs_created_bies is not None:
            pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        if idcs_endpoint is not None:
            pulumi.set(__self__, "idcs_endpoint", idcs_endpoint)
        if idcs_last_modified_bies is not None:
            pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        if idcs_last_upgraded_in_release is not None:
            pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        if idcs_prevented_operations is not None:
            pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        if metas is not None:
            pulumi.set(__self__, "metas", metas)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if resource_type_schema_version is not None:
            pulumi.set(__self__, "resource_type_schema_version", resource_type_schema_version)
        if schemas is not None:
            pulumi.set(__self__, "schemas", schemas)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tenancy_ocid is not None:
            pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[str]:
        return pulumi.get(self, "access_key")

    @property
    @pulumi.getter
    def authorization(self) -> Optional[str]:
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> Optional[str]:
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> Optional[bool]:
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> Optional[str]:
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter(name="expiresOn")
    def expires_on(self) -> Optional[str]:
        return pulumi.get(self, "expires_on")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Optional[Sequence['outputs.GetDomainsMyCustomerSecretKeysMyCustomerSecretKeyIdcsCreatedByResult']]:
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "idcs_endpoint")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Optional[Sequence['outputs.GetDomainsMyCustomerSecretKeysMyCustomerSecretKeyIdcsLastModifiedByResult']]:
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> Optional[str]:
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter
    def metas(self) -> Optional[Sequence['outputs.GetDomainsMyCustomerSecretKeysMyCustomerSecretKeyMetaResult']]:
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> Optional[str]:
        return pulumi.get(self, "resource_type_schema_version")

    @property
    @pulumi.getter
    def schemas(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.GetDomainsMyCustomerSecretKeysMyCustomerSecretKeyTagResult']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> Optional[str]:
        return pulumi.get(self, "tenancy_ocid")

    @property
    @pulumi.getter
    def users(self) -> Optional[Sequence['outputs.GetDomainsMyCustomerSecretKeysMyCustomerSecretKeyUserResult']]:
        return pulumi.get(self, "users")


@pulumi.output_type
class GetDomainsMyCustomerSecretKeysMyCustomerSecretKeyIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyCustomerSecretKeysMyCustomerSecretKeyIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyCustomerSecretKeysMyCustomerSecretKeyMetaResult(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsMyCustomerSecretKeysMyCustomerSecretKeyTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyCustomerSecretKeysMyCustomerSecretKeyUserResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyDeviceAdditionalAttributeResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyDeviceAuthenticationFactorResult(dict):
    def __init__(__self__, *,
                 public_key: Optional[str] = None,
                 status: Optional[str] = None,
                 type: Optional[str] = None):
        if public_key is not None:
            pulumi.set(__self__, "public_key", public_key)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> Optional[str]:
        return pulumi.get(self, "public_key")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDomainsMyDeviceIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyDeviceIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyDeviceMetaResult(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsMyDeviceNonComplianceResult(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyDevicePushNotificationTargetResult(dict):
    def __init__(__self__, *,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyDeviceTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyDeviceThirdPartyFactorResult(dict):
    def __init__(__self__, *,
                 ref: Optional[str] = None,
                 third_party_factor_type: Optional[str] = None,
                 third_party_vendor_name: Optional[str] = None,
                 value: Optional[str] = None):
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if third_party_factor_type is not None:
            pulumi.set(__self__, "third_party_factor_type", third_party_factor_type)
        if third_party_vendor_name is not None:
            pulumi.set(__self__, "third_party_vendor_name", third_party_vendor_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="thirdPartyFactorType")
    def third_party_factor_type(self) -> Optional[str]:
        return pulumi.get(self, "third_party_factor_type")

    @property
    @pulumi.getter(name="thirdPartyVendorName")
    def third_party_vendor_name(self) -> Optional[str]:
        return pulumi.get(self, "third_party_vendor_name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyDeviceUserResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyDevicesMyDeviceResult(dict):
    def __init__(__self__, *,
                 additional_attributes: Optional[Sequence['outputs.GetDomainsMyDevicesMyDeviceAdditionalAttributeResult']] = None,
                 app_version: Optional[str] = None,
                 attribute_sets: Optional[Sequence[str]] = None,
                 attributes: Optional[str] = None,
                 authentication_factors: Optional[Sequence['outputs.GetDomainsMyDevicesMyDeviceAuthenticationFactorResult']] = None,
                 authentication_method: Optional[str] = None,
                 authorization: Optional[str] = None,
                 base_public_key: Optional[str] = None,
                 compartment_ocid: Optional[str] = None,
                 country_code: Optional[str] = None,
                 delete_in_progress: Optional[bool] = None,
                 device_type: Optional[str] = None,
                 device_uuid: Optional[str] = None,
                 display_name: Optional[str] = None,
                 domain_ocid: Optional[str] = None,
                 expires_on: Optional[int] = None,
                 external_id: Optional[str] = None,
                 id: Optional[str] = None,
                 idcs_created_bies: Optional[Sequence['outputs.GetDomainsMyDevicesMyDeviceIdcsCreatedByResult']] = None,
                 idcs_endpoint: Optional[str] = None,
                 idcs_last_modified_bies: Optional[Sequence['outputs.GetDomainsMyDevicesMyDeviceIdcsLastModifiedByResult']] = None,
                 idcs_last_upgraded_in_release: Optional[str] = None,
                 idcs_prevented_operations: Optional[Sequence[str]] = None,
                 is_acc_rec_enabled: Optional[bool] = None,
                 is_compliant: Optional[bool] = None,
                 last_sync_time: Optional[str] = None,
                 last_validated_time: Optional[str] = None,
                 metas: Optional[Sequence['outputs.GetDomainsMyDevicesMyDeviceMetaResult']] = None,
                 my_device_id: Optional[str] = None,
                 non_compliances: Optional[Sequence['outputs.GetDomainsMyDevicesMyDeviceNonComplianceResult']] = None,
                 ocid: Optional[str] = None,
                 package_id: Optional[str] = None,
                 phone_number: Optional[str] = None,
                 platform: Optional[str] = None,
                 push_notification_targets: Optional[Sequence['outputs.GetDomainsMyDevicesMyDevicePushNotificationTargetResult']] = None,
                 reason: Optional[str] = None,
                 resource_type_schema_version: Optional[str] = None,
                 schemas: Optional[Sequence[str]] = None,
                 seed: Optional[str] = None,
                 seed_dek_id: Optional[str] = None,
                 status: Optional[str] = None,
                 tags: Optional[Sequence['outputs.GetDomainsMyDevicesMyDeviceTagResult']] = None,
                 tenancy_ocid: Optional[str] = None,
                 third_party_factors: Optional[Sequence['outputs.GetDomainsMyDevicesMyDeviceThirdPartyFactorResult']] = None,
                 users: Optional[Sequence['outputs.GetDomainsMyDevicesMyDeviceUserResult']] = None):
        if additional_attributes is not None:
            pulumi.set(__self__, "additional_attributes", additional_attributes)
        if app_version is not None:
            pulumi.set(__self__, "app_version", app_version)
        if attribute_sets is not None:
            pulumi.set(__self__, "attribute_sets", attribute_sets)
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)
        if authentication_factors is not None:
            pulumi.set(__self__, "authentication_factors", authentication_factors)
        if authentication_method is not None:
            pulumi.set(__self__, "authentication_method", authentication_method)
        if authorization is not None:
            pulumi.set(__self__, "authorization", authorization)
        if base_public_key is not None:
            pulumi.set(__self__, "base_public_key", base_public_key)
        if compartment_ocid is not None:
            pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        if country_code is not None:
            pulumi.set(__self__, "country_code", country_code)
        if delete_in_progress is not None:
            pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        if device_type is not None:
            pulumi.set(__self__, "device_type", device_type)
        if device_uuid is not None:
            pulumi.set(__self__, "device_uuid", device_uuid)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if domain_ocid is not None:
            pulumi.set(__self__, "domain_ocid", domain_ocid)
        if expires_on is not None:
            pulumi.set(__self__, "expires_on", expires_on)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if idcs_created_bies is not None:
            pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        if idcs_endpoint is not None:
            pulumi.set(__self__, "idcs_endpoint", idcs_endpoint)
        if idcs_last_modified_bies is not None:
            pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        if idcs_last_upgraded_in_release is not None:
            pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        if idcs_prevented_operations is not None:
            pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        if is_acc_rec_enabled is not None:
            pulumi.set(__self__, "is_acc_rec_enabled", is_acc_rec_enabled)
        if is_compliant is not None:
            pulumi.set(__self__, "is_compliant", is_compliant)
        if last_sync_time is not None:
            pulumi.set(__self__, "last_sync_time", last_sync_time)
        if last_validated_time is not None:
            pulumi.set(__self__, "last_validated_time", last_validated_time)
        if metas is not None:
            pulumi.set(__self__, "metas", metas)
        if my_device_id is not None:
            pulumi.set(__self__, "my_device_id", my_device_id)
        if non_compliances is not None:
            pulumi.set(__self__, "non_compliances", non_compliances)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if package_id is not None:
            pulumi.set(__self__, "package_id", package_id)
        if phone_number is not None:
            pulumi.set(__self__, "phone_number", phone_number)
        if platform is not None:
            pulumi.set(__self__, "platform", platform)
        if push_notification_targets is not None:
            pulumi.set(__self__, "push_notification_targets", push_notification_targets)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if resource_type_schema_version is not None:
            pulumi.set(__self__, "resource_type_schema_version", resource_type_schema_version)
        if schemas is not None:
            pulumi.set(__self__, "schemas", schemas)
        if seed is not None:
            pulumi.set(__self__, "seed", seed)
        if seed_dek_id is not None:
            pulumi.set(__self__, "seed_dek_id", seed_dek_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tenancy_ocid is not None:
            pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)
        if third_party_factors is not None:
            pulumi.set(__self__, "third_party_factors", third_party_factors)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="additionalAttributes")
    def additional_attributes(self) -> Optional[Sequence['outputs.GetDomainsMyDevicesMyDeviceAdditionalAttributeResult']]:
        return pulumi.get(self, "additional_attributes")

    @property
    @pulumi.getter(name="appVersion")
    def app_version(self) -> Optional[str]:
        return pulumi.get(self, "app_version")

    @property
    @pulumi.getter(name="attributeSets")
    def attribute_sets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "attribute_sets")

    @property
    @pulumi.getter
    def attributes(self) -> Optional[str]:
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter(name="authenticationFactors")
    def authentication_factors(self) -> Optional[Sequence['outputs.GetDomainsMyDevicesMyDeviceAuthenticationFactorResult']]:
        return pulumi.get(self, "authentication_factors")

    @property
    @pulumi.getter(name="authenticationMethod")
    def authentication_method(self) -> Optional[str]:
        return pulumi.get(self, "authentication_method")

    @property
    @pulumi.getter
    def authorization(self) -> Optional[str]:
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="basePublicKey")
    def base_public_key(self) -> Optional[str]:
        return pulumi.get(self, "base_public_key")

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> Optional[str]:
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> Optional[str]:
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> Optional[bool]:
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter(name="deviceType")
    def device_type(self) -> Optional[str]:
        return pulumi.get(self, "device_type")

    @property
    @pulumi.getter(name="deviceUuid")
    def device_uuid(self) -> Optional[str]:
        return pulumi.get(self, "device_uuid")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> Optional[str]:
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter(name="expiresOn")
    def expires_on(self) -> Optional[int]:
        return pulumi.get(self, "expires_on")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[str]:
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Optional[Sequence['outputs.GetDomainsMyDevicesMyDeviceIdcsCreatedByResult']]:
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "idcs_endpoint")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Optional[Sequence['outputs.GetDomainsMyDevicesMyDeviceIdcsLastModifiedByResult']]:
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> Optional[str]:
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter(name="isAccRecEnabled")
    def is_acc_rec_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_acc_rec_enabled")

    @property
    @pulumi.getter(name="isCompliant")
    def is_compliant(self) -> Optional[bool]:
        return pulumi.get(self, "is_compliant")

    @property
    @pulumi.getter(name="lastSyncTime")
    def last_sync_time(self) -> Optional[str]:
        return pulumi.get(self, "last_sync_time")

    @property
    @pulumi.getter(name="lastValidatedTime")
    def last_validated_time(self) -> Optional[str]:
        return pulumi.get(self, "last_validated_time")

    @property
    @pulumi.getter
    def metas(self) -> Optional[Sequence['outputs.GetDomainsMyDevicesMyDeviceMetaResult']]:
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter(name="myDeviceId")
    def my_device_id(self) -> Optional[str]:
        return pulumi.get(self, "my_device_id")

    @property
    @pulumi.getter(name="nonCompliances")
    def non_compliances(self) -> Optional[Sequence['outputs.GetDomainsMyDevicesMyDeviceNonComplianceResult']]:
        return pulumi.get(self, "non_compliances")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> Optional[str]:
        return pulumi.get(self, "package_id")

    @property
    @pulumi.getter(name="phoneNumber")
    def phone_number(self) -> Optional[str]:
        return pulumi.get(self, "phone_number")

    @property
    @pulumi.getter
    def platform(self) -> Optional[str]:
        return pulumi.get(self, "platform")

    @property
    @pulumi.getter(name="pushNotificationTargets")
    def push_notification_targets(self) -> Optional[Sequence['outputs.GetDomainsMyDevicesMyDevicePushNotificationTargetResult']]:
        return pulumi.get(self, "push_notification_targets")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> Optional[str]:
        return pulumi.get(self, "resource_type_schema_version")

    @property
    @pulumi.getter
    def schemas(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter
    def seed(self) -> Optional[str]:
        return pulumi.get(self, "seed")

    @property
    @pulumi.getter(name="seedDekId")
    def seed_dek_id(self) -> Optional[str]:
        return pulumi.get(self, "seed_dek_id")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.GetDomainsMyDevicesMyDeviceTagResult']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> Optional[str]:
        return pulumi.get(self, "tenancy_ocid")

    @property
    @pulumi.getter(name="thirdPartyFactors")
    def third_party_factors(self) -> Optional[Sequence['outputs.GetDomainsMyDevicesMyDeviceThirdPartyFactorResult']]:
        return pulumi.get(self, "third_party_factors")

    @property
    @pulumi.getter
    def users(self) -> Optional[Sequence['outputs.GetDomainsMyDevicesMyDeviceUserResult']]:
        return pulumi.get(self, "users")


@pulumi.output_type
class GetDomainsMyDevicesMyDeviceAdditionalAttributeResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyDevicesMyDeviceAuthenticationFactorResult(dict):
    def __init__(__self__, *,
                 public_key: Optional[str] = None,
                 status: Optional[str] = None,
                 type: Optional[str] = None):
        if public_key is not None:
            pulumi.set(__self__, "public_key", public_key)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> Optional[str]:
        return pulumi.get(self, "public_key")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDomainsMyDevicesMyDeviceIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyDevicesMyDeviceIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyDevicesMyDeviceMetaResult(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsMyDevicesMyDeviceNonComplianceResult(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyDevicesMyDevicePushNotificationTargetResult(dict):
    def __init__(__self__, *,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyDevicesMyDeviceTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyDevicesMyDeviceThirdPartyFactorResult(dict):
    def __init__(__self__, *,
                 ref: Optional[str] = None,
                 third_party_factor_type: Optional[str] = None,
                 third_party_vendor_name: Optional[str] = None,
                 value: Optional[str] = None):
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if third_party_factor_type is not None:
            pulumi.set(__self__, "third_party_factor_type", third_party_factor_type)
        if third_party_vendor_name is not None:
            pulumi.set(__self__, "third_party_vendor_name", third_party_vendor_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="thirdPartyFactorType")
    def third_party_factor_type(self) -> Optional[str]:
        return pulumi.get(self, "third_party_factor_type")

    @property
    @pulumi.getter(name="thirdPartyVendorName")
    def third_party_vendor_name(self) -> Optional[str]:
        return pulumi.get(self, "third_party_vendor_name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyDevicesMyDeviceUserResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyGroupsMyGroupResult(dict):
    def __init__(__self__, *,
                 compartment_ocid: Optional[str] = None,
                 delete_in_progress: Optional[bool] = None,
                 display_name: Optional[str] = None,
                 domain_ocid: Optional[str] = None,
                 external_id: Optional[str] = None,
                 id: Optional[str] = None,
                 idcs_created_bies: Optional[Sequence['outputs.GetDomainsMyGroupsMyGroupIdcsCreatedByResult']] = None,
                 idcs_last_modified_bies: Optional[Sequence['outputs.GetDomainsMyGroupsMyGroupIdcsLastModifiedByResult']] = None,
                 idcs_last_upgraded_in_release: Optional[str] = None,
                 idcs_prevented_operations: Optional[Sequence[str]] = None,
                 members: Optional[Sequence['outputs.GetDomainsMyGroupsMyGroupMemberResult']] = None,
                 metas: Optional[Sequence['outputs.GetDomainsMyGroupsMyGroupMetaResult']] = None,
                 non_unique_display_name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 schemas: Optional[Sequence[str]] = None,
                 tags: Optional[Sequence['outputs.GetDomainsMyGroupsMyGroupTagResult']] = None,
                 tenancy_ocid: Optional[str] = None,
                 urnietfparamsscimschemasoracleidcsextensiongroup_groups: Optional[Sequence['outputs.GetDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupResult']] = None,
                 urnietfparamsscimschemasoracleidcsextensionposix_groups: Optional[Sequence['outputs.GetDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensionposixGroupResult']] = None):
        if compartment_ocid is not None:
            pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        if delete_in_progress is not None:
            pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if domain_ocid is not None:
            pulumi.set(__self__, "domain_ocid", domain_ocid)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if idcs_created_bies is not None:
            pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        if idcs_last_modified_bies is not None:
            pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        if idcs_last_upgraded_in_release is not None:
            pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        if idcs_prevented_operations is not None:
            pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if metas is not None:
            pulumi.set(__self__, "metas", metas)
        if non_unique_display_name is not None:
            pulumi.set(__self__, "non_unique_display_name", non_unique_display_name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if schemas is not None:
            pulumi.set(__self__, "schemas", schemas)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tenancy_ocid is not None:
            pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)
        if urnietfparamsscimschemasoracleidcsextensiongroup_groups is not None:
            pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensiongroup_groups", urnietfparamsscimschemasoracleidcsextensiongroup_groups)
        if urnietfparamsscimschemasoracleidcsextensionposix_groups is not None:
            pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionposix_groups", urnietfparamsscimschemasoracleidcsextensionposix_groups)

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> Optional[str]:
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> Optional[bool]:
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> Optional[str]:
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[str]:
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Optional[Sequence['outputs.GetDomainsMyGroupsMyGroupIdcsCreatedByResult']]:
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Optional[Sequence['outputs.GetDomainsMyGroupsMyGroupIdcsLastModifiedByResult']]:
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> Optional[str]:
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter
    def members(self) -> Optional[Sequence['outputs.GetDomainsMyGroupsMyGroupMemberResult']]:
        return pulumi.get(self, "members")

    @property
    @pulumi.getter
    def metas(self) -> Optional[Sequence['outputs.GetDomainsMyGroupsMyGroupMetaResult']]:
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter(name="nonUniqueDisplayName")
    def non_unique_display_name(self) -> Optional[str]:
        return pulumi.get(self, "non_unique_display_name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def schemas(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.GetDomainsMyGroupsMyGroupTagResult']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> Optional[str]:
        return pulumi.get(self, "tenancy_ocid")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensiongroupGroups")
    def urnietfparamsscimschemasoracleidcsextensiongroup_groups(self) -> Optional[Sequence['outputs.GetDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupResult']]:
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensiongroup_groups")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionposixGroups")
    def urnietfparamsscimschemasoracleidcsextensionposix_groups(self) -> Optional[Sequence['outputs.GetDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensionposixGroupResult']]:
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionposix_groups")


@pulumi.output_type
class GetDomainsMyGroupsMyGroupIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyGroupsMyGroupIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyGroupsMyGroupMemberResult(dict):
    def __init__(__self__, *,
                 date_added: Optional[str] = None,
                 display: Optional[str] = None,
                 membership_ocid: Optional[str] = None,
                 name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if date_added is not None:
            pulumi.set(__self__, "date_added", date_added)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if membership_ocid is not None:
            pulumi.set(__self__, "membership_ocid", membership_ocid)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="dateAdded")
    def date_added(self) -> Optional[str]:
        return pulumi.get(self, "date_added")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter(name="membershipOcid")
    def membership_ocid(self) -> Optional[str]:
        return pulumi.get(self, "membership_ocid")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyGroupsMyGroupMetaResult(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsMyGroupsMyGroupTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupResult(dict):
    def __init__(__self__, *,
                 app_roles: Optional[Sequence['outputs.GetDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupAppRoleResult']] = None,
                 creation_mechanism: Optional[str] = None,
                 description: Optional[str] = None,
                 grants: Optional[Sequence['outputs.GetDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupGrantResult']] = None,
                 owners: Optional[Sequence['outputs.GetDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupOwnerResult']] = None,
                 password_policies: Optional[Sequence['outputs.GetDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupPasswordPolicyResult']] = None,
                 synced_from_apps: Optional[Sequence['outputs.GetDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupSyncedFromAppResult']] = None):
        if app_roles is not None:
            pulumi.set(__self__, "app_roles", app_roles)
        if creation_mechanism is not None:
            pulumi.set(__self__, "creation_mechanism", creation_mechanism)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if grants is not None:
            pulumi.set(__self__, "grants", grants)
        if owners is not None:
            pulumi.set(__self__, "owners", owners)
        if password_policies is not None:
            pulumi.set(__self__, "password_policies", password_policies)
        if synced_from_apps is not None:
            pulumi.set(__self__, "synced_from_apps", synced_from_apps)

    @property
    @pulumi.getter(name="appRoles")
    def app_roles(self) -> Optional[Sequence['outputs.GetDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupAppRoleResult']]:
        return pulumi.get(self, "app_roles")

    @property
    @pulumi.getter(name="creationMechanism")
    def creation_mechanism(self) -> Optional[str]:
        return pulumi.get(self, "creation_mechanism")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def grants(self) -> Optional[Sequence['outputs.GetDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupGrantResult']]:
        return pulumi.get(self, "grants")

    @property
    @pulumi.getter
    def owners(self) -> Optional[Sequence['outputs.GetDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupOwnerResult']]:
        return pulumi.get(self, "owners")

    @property
    @pulumi.getter(name="passwordPolicies")
    def password_policies(self) -> Optional[Sequence['outputs.GetDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupPasswordPolicyResult']]:
        return pulumi.get(self, "password_policies")

    @property
    @pulumi.getter(name="syncedFromApps")
    def synced_from_apps(self) -> Optional[Sequence['outputs.GetDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupSyncedFromAppResult']]:
        return pulumi.get(self, "synced_from_apps")


@pulumi.output_type
class GetDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupAppRoleResult(dict):
    def __init__(__self__, *,
                 admin_role: Optional[bool] = None,
                 app_id: Optional[str] = None,
                 app_name: Optional[str] = None,
                 display: Optional[str] = None,
                 legacy_group_name: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if admin_role is not None:
            pulumi.set(__self__, "admin_role", admin_role)
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if app_name is not None:
            pulumi.set(__self__, "app_name", app_name)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if legacy_group_name is not None:
            pulumi.set(__self__, "legacy_group_name", legacy_group_name)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="adminRole")
    def admin_role(self) -> Optional[bool]:
        return pulumi.get(self, "admin_role")

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[str]:
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="appName")
    def app_name(self) -> Optional[str]:
        return pulumi.get(self, "app_name")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter(name="legacyGroupName")
    def legacy_group_name(self) -> Optional[str]:
        return pulumi.get(self, "legacy_group_name")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupGrantResult(dict):
    def __init__(__self__, *,
                 app_id: Optional[str] = None,
                 grant_mechanism: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if grant_mechanism is not None:
            pulumi.set(__self__, "grant_mechanism", grant_mechanism)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[str]:
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="grantMechanism")
    def grant_mechanism(self) -> Optional[str]:
        return pulumi.get(self, "grant_mechanism")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupOwnerResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupPasswordPolicyResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 priority: Optional[int] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupSyncedFromAppResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensionposixGroupResult(dict):
    def __init__(__self__, *,
                 gid_number: Optional[int] = None):
        if gid_number is not None:
            pulumi.set(__self__, "gid_number", gid_number)

    @property
    @pulumi.getter(name="gidNumber")
    def gid_number(self) -> Optional[int]:
        return pulumi.get(self, "gid_number")


@pulumi.output_type
class GetDomainsMyOauth2clientCredentialIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyOauth2clientCredentialIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyOauth2clientCredentialMetaResult(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsMyOauth2clientCredentialScopeResult(dict):
    def __init__(__self__, *,
                 audience: Optional[str] = None,
                 scope: Optional[str] = None):
        if audience is not None:
            pulumi.set(__self__, "audience", audience)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)

    @property
    @pulumi.getter
    def audience(self) -> Optional[str]:
        return pulumi.get(self, "audience")

    @property
    @pulumi.getter
    def scope(self) -> Optional[str]:
        return pulumi.get(self, "scope")


@pulumi.output_type
class GetDomainsMyOauth2clientCredentialTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyOauth2clientCredentialUserResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyOauth2clientCredentialsMyOauth2clientCredentialResult(dict):
    def __init__(__self__, *,
                 authorization: Optional[str] = None,
                 compartment_ocid: Optional[str] = None,
                 delete_in_progress: Optional[bool] = None,
                 description: Optional[str] = None,
                 domain_ocid: Optional[str] = None,
                 expires_on: Optional[str] = None,
                 id: Optional[str] = None,
                 idcs_created_bies: Optional[Sequence['outputs.GetDomainsMyOauth2clientCredentialsMyOauth2clientCredentialIdcsCreatedByResult']] = None,
                 idcs_endpoint: Optional[str] = None,
                 idcs_last_modified_bies: Optional[Sequence['outputs.GetDomainsMyOauth2clientCredentialsMyOauth2clientCredentialIdcsLastModifiedByResult']] = None,
                 idcs_last_upgraded_in_release: Optional[str] = None,
                 idcs_prevented_operations: Optional[Sequence[str]] = None,
                 is_reset_secret: Optional[bool] = None,
                 metas: Optional[Sequence['outputs.GetDomainsMyOauth2clientCredentialsMyOauth2clientCredentialMetaResult']] = None,
                 name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 resource_type_schema_version: Optional[str] = None,
                 schemas: Optional[Sequence[str]] = None,
                 scopes: Optional[Sequence['outputs.GetDomainsMyOauth2clientCredentialsMyOauth2clientCredentialScopeResult']] = None,
                 status: Optional[str] = None,
                 tags: Optional[Sequence['outputs.GetDomainsMyOauth2clientCredentialsMyOauth2clientCredentialTagResult']] = None,
                 tenancy_ocid: Optional[str] = None,
                 users: Optional[Sequence['outputs.GetDomainsMyOauth2clientCredentialsMyOauth2clientCredentialUserResult']] = None):
        if authorization is not None:
            pulumi.set(__self__, "authorization", authorization)
        if compartment_ocid is not None:
            pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        if delete_in_progress is not None:
            pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain_ocid is not None:
            pulumi.set(__self__, "domain_ocid", domain_ocid)
        if expires_on is not None:
            pulumi.set(__self__, "expires_on", expires_on)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if idcs_created_bies is not None:
            pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        if idcs_endpoint is not None:
            pulumi.set(__self__, "idcs_endpoint", idcs_endpoint)
        if idcs_last_modified_bies is not None:
            pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        if idcs_last_upgraded_in_release is not None:
            pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        if idcs_prevented_operations is not None:
            pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        if is_reset_secret is not None:
            pulumi.set(__self__, "is_reset_secret", is_reset_secret)
        if metas is not None:
            pulumi.set(__self__, "metas", metas)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if resource_type_schema_version is not None:
            pulumi.set(__self__, "resource_type_schema_version", resource_type_schema_version)
        if schemas is not None:
            pulumi.set(__self__, "schemas", schemas)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tenancy_ocid is not None:
            pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter
    def authorization(self) -> Optional[str]:
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> Optional[str]:
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> Optional[bool]:
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> Optional[str]:
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter(name="expiresOn")
    def expires_on(self) -> Optional[str]:
        return pulumi.get(self, "expires_on")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Optional[Sequence['outputs.GetDomainsMyOauth2clientCredentialsMyOauth2clientCredentialIdcsCreatedByResult']]:
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "idcs_endpoint")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Optional[Sequence['outputs.GetDomainsMyOauth2clientCredentialsMyOauth2clientCredentialIdcsLastModifiedByResult']]:
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> Optional[str]:
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter(name="isResetSecret")
    def is_reset_secret(self) -> Optional[bool]:
        return pulumi.get(self, "is_reset_secret")

    @property
    @pulumi.getter
    def metas(self) -> Optional[Sequence['outputs.GetDomainsMyOauth2clientCredentialsMyOauth2clientCredentialMetaResult']]:
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> Optional[str]:
        return pulumi.get(self, "resource_type_schema_version")

    @property
    @pulumi.getter
    def schemas(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter
    def scopes(self) -> Optional[Sequence['outputs.GetDomainsMyOauth2clientCredentialsMyOauth2clientCredentialScopeResult']]:
        return pulumi.get(self, "scopes")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.GetDomainsMyOauth2clientCredentialsMyOauth2clientCredentialTagResult']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> Optional[str]:
        return pulumi.get(self, "tenancy_ocid")

    @property
    @pulumi.getter
    def users(self) -> Optional[Sequence['outputs.GetDomainsMyOauth2clientCredentialsMyOauth2clientCredentialUserResult']]:
        return pulumi.get(self, "users")


@pulumi.output_type
class GetDomainsMyOauth2clientCredentialsMyOauth2clientCredentialIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyOauth2clientCredentialsMyOauth2clientCredentialIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyOauth2clientCredentialsMyOauth2clientCredentialMetaResult(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsMyOauth2clientCredentialsMyOauth2clientCredentialScopeResult(dict):
    def __init__(__self__, *,
                 audience: Optional[str] = None,
                 scope: Optional[str] = None):
        if audience is not None:
            pulumi.set(__self__, "audience", audience)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)

    @property
    @pulumi.getter
    def audience(self) -> Optional[str]:
        return pulumi.get(self, "audience")

    @property
    @pulumi.getter
    def scope(self) -> Optional[str]:
        return pulumi.get(self, "scope")


@pulumi.output_type
class GetDomainsMyOauth2clientCredentialsMyOauth2clientCredentialTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyOauth2clientCredentialsMyOauth2clientCredentialUserResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyRequestableGroupsMyRequestableGroupResult(dict):
    def __init__(__self__, *,
                 compartment_ocid: Optional[str] = None,
                 delete_in_progress: Optional[bool] = None,
                 display_name: Optional[str] = None,
                 domain_ocid: Optional[str] = None,
                 external_id: Optional[str] = None,
                 id: Optional[str] = None,
                 idcs_created_bies: Optional[Sequence['outputs.GetDomainsMyRequestableGroupsMyRequestableGroupIdcsCreatedByResult']] = None,
                 idcs_last_modified_bies: Optional[Sequence['outputs.GetDomainsMyRequestableGroupsMyRequestableGroupIdcsLastModifiedByResult']] = None,
                 idcs_last_upgraded_in_release: Optional[str] = None,
                 idcs_prevented_operations: Optional[Sequence[str]] = None,
                 members: Optional[Sequence['outputs.GetDomainsMyRequestableGroupsMyRequestableGroupMemberResult']] = None,
                 metas: Optional[Sequence['outputs.GetDomainsMyRequestableGroupsMyRequestableGroupMetaResult']] = None,
                 non_unique_display_name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 schemas: Optional[Sequence[str]] = None,
                 tags: Optional[Sequence['outputs.GetDomainsMyRequestableGroupsMyRequestableGroupTagResult']] = None,
                 tenancy_ocid: Optional[str] = None,
                 urnietfparamsscimschemasoracleidcsextensiongroup_groups: Optional[Sequence['outputs.GetDomainsMyRequestableGroupsMyRequestableGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupResult']] = None,
                 urnietfparamsscimschemasoracleidcsextensionrequestable_groups: Optional[Sequence['outputs.GetDomainsMyRequestableGroupsMyRequestableGroupUrnietfparamsscimschemasoracleidcsextensionrequestableGroupResult']] = None):
        if compartment_ocid is not None:
            pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        if delete_in_progress is not None:
            pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if domain_ocid is not None:
            pulumi.set(__self__, "domain_ocid", domain_ocid)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if idcs_created_bies is not None:
            pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        if idcs_last_modified_bies is not None:
            pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        if idcs_last_upgraded_in_release is not None:
            pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        if idcs_prevented_operations is not None:
            pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if metas is not None:
            pulumi.set(__self__, "metas", metas)
        if non_unique_display_name is not None:
            pulumi.set(__self__, "non_unique_display_name", non_unique_display_name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if schemas is not None:
            pulumi.set(__self__, "schemas", schemas)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tenancy_ocid is not None:
            pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)
        if urnietfparamsscimschemasoracleidcsextensiongroup_groups is not None:
            pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensiongroup_groups", urnietfparamsscimschemasoracleidcsextensiongroup_groups)
        if urnietfparamsscimschemasoracleidcsextensionrequestable_groups is not None:
            pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionrequestable_groups", urnietfparamsscimschemasoracleidcsextensionrequestable_groups)

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> Optional[str]:
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> Optional[bool]:
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> Optional[str]:
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[str]:
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Optional[Sequence['outputs.GetDomainsMyRequestableGroupsMyRequestableGroupIdcsCreatedByResult']]:
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Optional[Sequence['outputs.GetDomainsMyRequestableGroupsMyRequestableGroupIdcsLastModifiedByResult']]:
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> Optional[str]:
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter
    def members(self) -> Optional[Sequence['outputs.GetDomainsMyRequestableGroupsMyRequestableGroupMemberResult']]:
        return pulumi.get(self, "members")

    @property
    @pulumi.getter
    def metas(self) -> Optional[Sequence['outputs.GetDomainsMyRequestableGroupsMyRequestableGroupMetaResult']]:
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter(name="nonUniqueDisplayName")
    def non_unique_display_name(self) -> Optional[str]:
        return pulumi.get(self, "non_unique_display_name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def schemas(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.GetDomainsMyRequestableGroupsMyRequestableGroupTagResult']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> Optional[str]:
        return pulumi.get(self, "tenancy_ocid")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensiongroupGroups")
    def urnietfparamsscimschemasoracleidcsextensiongroup_groups(self) -> Optional[Sequence['outputs.GetDomainsMyRequestableGroupsMyRequestableGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupResult']]:
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensiongroup_groups")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionrequestableGroups")
    def urnietfparamsscimschemasoracleidcsextensionrequestable_groups(self) -> Optional[Sequence['outputs.GetDomainsMyRequestableGroupsMyRequestableGroupUrnietfparamsscimschemasoracleidcsextensionrequestableGroupResult']]:
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionrequestable_groups")


@pulumi.output_type
class GetDomainsMyRequestableGroupsMyRequestableGroupIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyRequestableGroupsMyRequestableGroupIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyRequestableGroupsMyRequestableGroupMemberResult(dict):
    def __init__(__self__, *,
                 date_added: Optional[str] = None,
                 display: Optional[str] = None,
                 membership_ocid: Optional[str] = None,
                 name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if date_added is not None:
            pulumi.set(__self__, "date_added", date_added)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if membership_ocid is not None:
            pulumi.set(__self__, "membership_ocid", membership_ocid)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="dateAdded")
    def date_added(self) -> Optional[str]:
        return pulumi.get(self, "date_added")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter(name="membershipOcid")
    def membership_ocid(self) -> Optional[str]:
        return pulumi.get(self, "membership_ocid")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyRequestableGroupsMyRequestableGroupMetaResult(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsMyRequestableGroupsMyRequestableGroupTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyRequestableGroupsMyRequestableGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupResult(dict):
    def __init__(__self__, *,
                 app_roles: Optional[Sequence['outputs.GetDomainsMyRequestableGroupsMyRequestableGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupAppRoleResult']] = None,
                 creation_mechanism: Optional[str] = None,
                 description: Optional[str] = None,
                 grants: Optional[Sequence['outputs.GetDomainsMyRequestableGroupsMyRequestableGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupGrantResult']] = None,
                 owners: Optional[Sequence['outputs.GetDomainsMyRequestableGroupsMyRequestableGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupOwnerResult']] = None,
                 password_policies: Optional[Sequence['outputs.GetDomainsMyRequestableGroupsMyRequestableGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupPasswordPolicyResult']] = None,
                 synced_from_apps: Optional[Sequence['outputs.GetDomainsMyRequestableGroupsMyRequestableGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupSyncedFromAppResult']] = None):
        if app_roles is not None:
            pulumi.set(__self__, "app_roles", app_roles)
        if creation_mechanism is not None:
            pulumi.set(__self__, "creation_mechanism", creation_mechanism)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if grants is not None:
            pulumi.set(__self__, "grants", grants)
        if owners is not None:
            pulumi.set(__self__, "owners", owners)
        if password_policies is not None:
            pulumi.set(__self__, "password_policies", password_policies)
        if synced_from_apps is not None:
            pulumi.set(__self__, "synced_from_apps", synced_from_apps)

    @property
    @pulumi.getter(name="appRoles")
    def app_roles(self) -> Optional[Sequence['outputs.GetDomainsMyRequestableGroupsMyRequestableGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupAppRoleResult']]:
        return pulumi.get(self, "app_roles")

    @property
    @pulumi.getter(name="creationMechanism")
    def creation_mechanism(self) -> Optional[str]:
        return pulumi.get(self, "creation_mechanism")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def grants(self) -> Optional[Sequence['outputs.GetDomainsMyRequestableGroupsMyRequestableGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupGrantResult']]:
        return pulumi.get(self, "grants")

    @property
    @pulumi.getter
    def owners(self) -> Optional[Sequence['outputs.GetDomainsMyRequestableGroupsMyRequestableGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupOwnerResult']]:
        return pulumi.get(self, "owners")

    @property
    @pulumi.getter(name="passwordPolicies")
    def password_policies(self) -> Optional[Sequence['outputs.GetDomainsMyRequestableGroupsMyRequestableGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupPasswordPolicyResult']]:
        return pulumi.get(self, "password_policies")

    @property
    @pulumi.getter(name="syncedFromApps")
    def synced_from_apps(self) -> Optional[Sequence['outputs.GetDomainsMyRequestableGroupsMyRequestableGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupSyncedFromAppResult']]:
        return pulumi.get(self, "synced_from_apps")


@pulumi.output_type
class GetDomainsMyRequestableGroupsMyRequestableGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupAppRoleResult(dict):
    def __init__(__self__, *,
                 admin_role: Optional[bool] = None,
                 app_id: Optional[str] = None,
                 app_name: Optional[str] = None,
                 display: Optional[str] = None,
                 legacy_group_name: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if admin_role is not None:
            pulumi.set(__self__, "admin_role", admin_role)
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if app_name is not None:
            pulumi.set(__self__, "app_name", app_name)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if legacy_group_name is not None:
            pulumi.set(__self__, "legacy_group_name", legacy_group_name)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="adminRole")
    def admin_role(self) -> Optional[bool]:
        return pulumi.get(self, "admin_role")

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[str]:
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="appName")
    def app_name(self) -> Optional[str]:
        return pulumi.get(self, "app_name")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter(name="legacyGroupName")
    def legacy_group_name(self) -> Optional[str]:
        return pulumi.get(self, "legacy_group_name")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyRequestableGroupsMyRequestableGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupGrantResult(dict):
    def __init__(__self__, *,
                 app_id: Optional[str] = None,
                 grant_mechanism: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if grant_mechanism is not None:
            pulumi.set(__self__, "grant_mechanism", grant_mechanism)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[str]:
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="grantMechanism")
    def grant_mechanism(self) -> Optional[str]:
        return pulumi.get(self, "grant_mechanism")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyRequestableGroupsMyRequestableGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupOwnerResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyRequestableGroupsMyRequestableGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupPasswordPolicyResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 priority: Optional[int] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyRequestableGroupsMyRequestableGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupSyncedFromAppResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyRequestableGroupsMyRequestableGroupUrnietfparamsscimschemasoracleidcsextensionrequestableGroupResult(dict):
    def __init__(__self__, *,
                 requestable: Optional[bool] = None):
        if requestable is not None:
            pulumi.set(__self__, "requestable", requestable)

    @property
    @pulumi.getter
    def requestable(self) -> Optional[bool]:
        return pulumi.get(self, "requestable")


@pulumi.output_type
class GetDomainsMyRequestsMyRequestResult(dict):
    def __init__(__self__, *,
                 compartment_ocid: Optional[str] = None,
                 delete_in_progress: Optional[bool] = None,
                 domain_ocid: Optional[str] = None,
                 id: Optional[str] = None,
                 idcs_created_bies: Optional[Sequence['outputs.GetDomainsMyRequestsMyRequestIdcsCreatedByResult']] = None,
                 idcs_last_modified_bies: Optional[Sequence['outputs.GetDomainsMyRequestsMyRequestIdcsLastModifiedByResult']] = None,
                 idcs_last_upgraded_in_release: Optional[str] = None,
                 idcs_prevented_operations: Optional[Sequence[str]] = None,
                 justification: Optional[str] = None,
                 metas: Optional[Sequence['outputs.GetDomainsMyRequestsMyRequestMetaResult']] = None,
                 ocid: Optional[str] = None,
                 requestings: Optional[Sequence['outputs.GetDomainsMyRequestsMyRequestRequestingResult']] = None,
                 requestors: Optional[Sequence['outputs.GetDomainsMyRequestsMyRequestRequestorResult']] = None,
                 schemas: Optional[Sequence[str]] = None,
                 status: Optional[str] = None,
                 tags: Optional[Sequence['outputs.GetDomainsMyRequestsMyRequestTagResult']] = None,
                 tenancy_ocid: Optional[str] = None):
        if compartment_ocid is not None:
            pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        if delete_in_progress is not None:
            pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        if domain_ocid is not None:
            pulumi.set(__self__, "domain_ocid", domain_ocid)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if idcs_created_bies is not None:
            pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        if idcs_last_modified_bies is not None:
            pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        if idcs_last_upgraded_in_release is not None:
            pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        if idcs_prevented_operations is not None:
            pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        if justification is not None:
            pulumi.set(__self__, "justification", justification)
        if metas is not None:
            pulumi.set(__self__, "metas", metas)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if requestings is not None:
            pulumi.set(__self__, "requestings", requestings)
        if requestors is not None:
            pulumi.set(__self__, "requestors", requestors)
        if schemas is not None:
            pulumi.set(__self__, "schemas", schemas)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tenancy_ocid is not None:
            pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> Optional[str]:
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> Optional[bool]:
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> Optional[str]:
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Optional[Sequence['outputs.GetDomainsMyRequestsMyRequestIdcsCreatedByResult']]:
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Optional[Sequence['outputs.GetDomainsMyRequestsMyRequestIdcsLastModifiedByResult']]:
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> Optional[str]:
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter
    def justification(self) -> Optional[str]:
        return pulumi.get(self, "justification")

    @property
    @pulumi.getter
    def metas(self) -> Optional[Sequence['outputs.GetDomainsMyRequestsMyRequestMetaResult']]:
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def requestings(self) -> Optional[Sequence['outputs.GetDomainsMyRequestsMyRequestRequestingResult']]:
        return pulumi.get(self, "requestings")

    @property
    @pulumi.getter
    def requestors(self) -> Optional[Sequence['outputs.GetDomainsMyRequestsMyRequestRequestorResult']]:
        return pulumi.get(self, "requestors")

    @property
    @pulumi.getter
    def schemas(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.GetDomainsMyRequestsMyRequestTagResult']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> Optional[str]:
        return pulumi.get(self, "tenancy_ocid")


@pulumi.output_type
class GetDomainsMyRequestsMyRequestIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyRequestsMyRequestIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyRequestsMyRequestMetaResult(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsMyRequestsMyRequestRequestingResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyRequestsMyRequestRequestorResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyRequestsMyRequestTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMySmtpCredentialIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMySmtpCredentialIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMySmtpCredentialMetaResult(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsMySmtpCredentialTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMySmtpCredentialUserResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMySmtpCredentialsMySmtpCredentialResult(dict):
    def __init__(__self__, *,
                 authorization: Optional[str] = None,
                 compartment_ocid: Optional[str] = None,
                 delete_in_progress: Optional[bool] = None,
                 description: Optional[str] = None,
                 domain_ocid: Optional[str] = None,
                 expires_on: Optional[str] = None,
                 id: Optional[str] = None,
                 idcs_created_bies: Optional[Sequence['outputs.GetDomainsMySmtpCredentialsMySmtpCredentialIdcsCreatedByResult']] = None,
                 idcs_endpoint: Optional[str] = None,
                 idcs_last_modified_bies: Optional[Sequence['outputs.GetDomainsMySmtpCredentialsMySmtpCredentialIdcsLastModifiedByResult']] = None,
                 idcs_last_upgraded_in_release: Optional[str] = None,
                 idcs_prevented_operations: Optional[Sequence[str]] = None,
                 metas: Optional[Sequence['outputs.GetDomainsMySmtpCredentialsMySmtpCredentialMetaResult']] = None,
                 ocid: Optional[str] = None,
                 resource_type_schema_version: Optional[str] = None,
                 schemas: Optional[Sequence[str]] = None,
                 status: Optional[str] = None,
                 tags: Optional[Sequence['outputs.GetDomainsMySmtpCredentialsMySmtpCredentialTagResult']] = None,
                 tenancy_ocid: Optional[str] = None,
                 user_name: Optional[str] = None,
                 users: Optional[Sequence['outputs.GetDomainsMySmtpCredentialsMySmtpCredentialUserResult']] = None):
        if authorization is not None:
            pulumi.set(__self__, "authorization", authorization)
        if compartment_ocid is not None:
            pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        if delete_in_progress is not None:
            pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain_ocid is not None:
            pulumi.set(__self__, "domain_ocid", domain_ocid)
        if expires_on is not None:
            pulumi.set(__self__, "expires_on", expires_on)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if idcs_created_bies is not None:
            pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        if idcs_endpoint is not None:
            pulumi.set(__self__, "idcs_endpoint", idcs_endpoint)
        if idcs_last_modified_bies is not None:
            pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        if idcs_last_upgraded_in_release is not None:
            pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        if idcs_prevented_operations is not None:
            pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        if metas is not None:
            pulumi.set(__self__, "metas", metas)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if resource_type_schema_version is not None:
            pulumi.set(__self__, "resource_type_schema_version", resource_type_schema_version)
        if schemas is not None:
            pulumi.set(__self__, "schemas", schemas)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tenancy_ocid is not None:
            pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter
    def authorization(self) -> Optional[str]:
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> Optional[str]:
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> Optional[bool]:
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> Optional[str]:
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter(name="expiresOn")
    def expires_on(self) -> Optional[str]:
        return pulumi.get(self, "expires_on")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Optional[Sequence['outputs.GetDomainsMySmtpCredentialsMySmtpCredentialIdcsCreatedByResult']]:
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "idcs_endpoint")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Optional[Sequence['outputs.GetDomainsMySmtpCredentialsMySmtpCredentialIdcsLastModifiedByResult']]:
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> Optional[str]:
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter
    def metas(self) -> Optional[Sequence['outputs.GetDomainsMySmtpCredentialsMySmtpCredentialMetaResult']]:
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> Optional[str]:
        return pulumi.get(self, "resource_type_schema_version")

    @property
    @pulumi.getter
    def schemas(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.GetDomainsMySmtpCredentialsMySmtpCredentialTagResult']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> Optional[str]:
        return pulumi.get(self, "tenancy_ocid")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter
    def users(self) -> Optional[Sequence['outputs.GetDomainsMySmtpCredentialsMySmtpCredentialUserResult']]:
        return pulumi.get(self, "users")


@pulumi.output_type
class GetDomainsMySmtpCredentialsMySmtpCredentialIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMySmtpCredentialsMySmtpCredentialIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMySmtpCredentialsMySmtpCredentialMetaResult(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsMySmtpCredentialsMySmtpCredentialTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMySmtpCredentialsMySmtpCredentialUserResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMySupportAccountIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMySupportAccountIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMySupportAccountMetaResult(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsMySupportAccountTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMySupportAccountUserResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMySupportAccountsMySupportAccountResult(dict):
    def __init__(__self__, *,
                 authorization: Optional[str] = None,
                 compartment_ocid: Optional[str] = None,
                 delete_in_progress: Optional[bool] = None,
                 domain_ocid: Optional[str] = None,
                 id: Optional[str] = None,
                 idcs_created_bies: Optional[Sequence['outputs.GetDomainsMySupportAccountsMySupportAccountIdcsCreatedByResult']] = None,
                 idcs_endpoint: Optional[str] = None,
                 idcs_last_modified_bies: Optional[Sequence['outputs.GetDomainsMySupportAccountsMySupportAccountIdcsLastModifiedByResult']] = None,
                 idcs_last_upgraded_in_release: Optional[str] = None,
                 idcs_prevented_operations: Optional[Sequence[str]] = None,
                 metas: Optional[Sequence['outputs.GetDomainsMySupportAccountsMySupportAccountMetaResult']] = None,
                 my_support_account_provider: Optional[str] = None,
                 ocid: Optional[str] = None,
                 resource_type_schema_version: Optional[str] = None,
                 schemas: Optional[Sequence[str]] = None,
                 tags: Optional[Sequence['outputs.GetDomainsMySupportAccountsMySupportAccountTagResult']] = None,
                 tenancy_ocid: Optional[str] = None,
                 token: Optional[str] = None,
                 user_id: Optional[str] = None,
                 users: Optional[Sequence['outputs.GetDomainsMySupportAccountsMySupportAccountUserResult']] = None):
        if authorization is not None:
            pulumi.set(__self__, "authorization", authorization)
        if compartment_ocid is not None:
            pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        if delete_in_progress is not None:
            pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        if domain_ocid is not None:
            pulumi.set(__self__, "domain_ocid", domain_ocid)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if idcs_created_bies is not None:
            pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        if idcs_endpoint is not None:
            pulumi.set(__self__, "idcs_endpoint", idcs_endpoint)
        if idcs_last_modified_bies is not None:
            pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        if idcs_last_upgraded_in_release is not None:
            pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        if idcs_prevented_operations is not None:
            pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        if metas is not None:
            pulumi.set(__self__, "metas", metas)
        if my_support_account_provider is not None:
            pulumi.set(__self__, "my_support_account_provider", my_support_account_provider)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if resource_type_schema_version is not None:
            pulumi.set(__self__, "resource_type_schema_version", resource_type_schema_version)
        if schemas is not None:
            pulumi.set(__self__, "schemas", schemas)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tenancy_ocid is not None:
            pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)
        if token is not None:
            pulumi.set(__self__, "token", token)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter
    def authorization(self) -> Optional[str]:
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> Optional[str]:
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> Optional[bool]:
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> Optional[str]:
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Optional[Sequence['outputs.GetDomainsMySupportAccountsMySupportAccountIdcsCreatedByResult']]:
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "idcs_endpoint")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Optional[Sequence['outputs.GetDomainsMySupportAccountsMySupportAccountIdcsLastModifiedByResult']]:
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> Optional[str]:
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter
    def metas(self) -> Optional[Sequence['outputs.GetDomainsMySupportAccountsMySupportAccountMetaResult']]:
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter(name="mySupportAccountProvider")
    def my_support_account_provider(self) -> Optional[str]:
        return pulumi.get(self, "my_support_account_provider")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> Optional[str]:
        return pulumi.get(self, "resource_type_schema_version")

    @property
    @pulumi.getter
    def schemas(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.GetDomainsMySupportAccountsMySupportAccountTagResult']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> Optional[str]:
        return pulumi.get(self, "tenancy_ocid")

    @property
    @pulumi.getter
    def token(self) -> Optional[str]:
        return pulumi.get(self, "token")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[str]:
        return pulumi.get(self, "user_id")

    @property
    @pulumi.getter
    def users(self) -> Optional[Sequence['outputs.GetDomainsMySupportAccountsMySupportAccountUserResult']]:
        return pulumi.get(self, "users")


@pulumi.output_type
class GetDomainsMySupportAccountsMySupportAccountIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMySupportAccountsMySupportAccountIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMySupportAccountsMySupportAccountMetaResult(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsMySupportAccountsMySupportAccountTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMySupportAccountsMySupportAccountUserResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyTrustedUserAgentIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyTrustedUserAgentIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyTrustedUserAgentMetaResult(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsMyTrustedUserAgentTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyTrustedUserAgentTrustedFactorResult(dict):
    def __init__(__self__, *,
                 category: Optional[str] = None,
                 creation_time: Optional[str] = None,
                 type: Optional[str] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if creation_time is not None:
            pulumi.set(__self__, "creation_time", creation_time)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> Optional[str]:
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDomainsMyTrustedUserAgentUserResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyTrustedUserAgentsMyTrustedUserAgentResult(dict):
    def __init__(__self__, *,
                 attribute_sets: Optional[Sequence[str]] = None,
                 attributes: Optional[str] = None,
                 authorization: Optional[str] = None,
                 compartment_ocid: Optional[str] = None,
                 delete_in_progress: Optional[bool] = None,
                 domain_ocid: Optional[str] = None,
                 expiry_time: Optional[str] = None,
                 id: Optional[str] = None,
                 idcs_created_bies: Optional[Sequence['outputs.GetDomainsMyTrustedUserAgentsMyTrustedUserAgentIdcsCreatedByResult']] = None,
                 idcs_endpoint: Optional[str] = None,
                 idcs_last_modified_bies: Optional[Sequence['outputs.GetDomainsMyTrustedUserAgentsMyTrustedUserAgentIdcsLastModifiedByResult']] = None,
                 idcs_last_upgraded_in_release: Optional[str] = None,
                 idcs_prevented_operations: Optional[Sequence[str]] = None,
                 last_used_on: Optional[str] = None,
                 location: Optional[str] = None,
                 metas: Optional[Sequence['outputs.GetDomainsMyTrustedUserAgentsMyTrustedUserAgentMetaResult']] = None,
                 my_trusted_user_agent_id: Optional[str] = None,
                 name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 platform: Optional[str] = None,
                 resource_type_schema_version: Optional[str] = None,
                 schemas: Optional[Sequence[str]] = None,
                 tags: Optional[Sequence['outputs.GetDomainsMyTrustedUserAgentsMyTrustedUserAgentTagResult']] = None,
                 tenancy_ocid: Optional[str] = None,
                 token_type: Optional[str] = None,
                 trust_token: Optional[str] = None,
                 trusted_factors: Optional[Sequence['outputs.GetDomainsMyTrustedUserAgentsMyTrustedUserAgentTrustedFactorResult']] = None,
                 users: Optional[Sequence['outputs.GetDomainsMyTrustedUserAgentsMyTrustedUserAgentUserResult']] = None):
        if attribute_sets is not None:
            pulumi.set(__self__, "attribute_sets", attribute_sets)
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)
        if authorization is not None:
            pulumi.set(__self__, "authorization", authorization)
        if compartment_ocid is not None:
            pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        if delete_in_progress is not None:
            pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        if domain_ocid is not None:
            pulumi.set(__self__, "domain_ocid", domain_ocid)
        if expiry_time is not None:
            pulumi.set(__self__, "expiry_time", expiry_time)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if idcs_created_bies is not None:
            pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        if idcs_endpoint is not None:
            pulumi.set(__self__, "idcs_endpoint", idcs_endpoint)
        if idcs_last_modified_bies is not None:
            pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        if idcs_last_upgraded_in_release is not None:
            pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        if idcs_prevented_operations is not None:
            pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        if last_used_on is not None:
            pulumi.set(__self__, "last_used_on", last_used_on)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if metas is not None:
            pulumi.set(__self__, "metas", metas)
        if my_trusted_user_agent_id is not None:
            pulumi.set(__self__, "my_trusted_user_agent_id", my_trusted_user_agent_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if platform is not None:
            pulumi.set(__self__, "platform", platform)
        if resource_type_schema_version is not None:
            pulumi.set(__self__, "resource_type_schema_version", resource_type_schema_version)
        if schemas is not None:
            pulumi.set(__self__, "schemas", schemas)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tenancy_ocid is not None:
            pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)
        if token_type is not None:
            pulumi.set(__self__, "token_type", token_type)
        if trust_token is not None:
            pulumi.set(__self__, "trust_token", trust_token)
        if trusted_factors is not None:
            pulumi.set(__self__, "trusted_factors", trusted_factors)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="attributeSets")
    def attribute_sets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "attribute_sets")

    @property
    @pulumi.getter
    def attributes(self) -> Optional[str]:
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter
    def authorization(self) -> Optional[str]:
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> Optional[str]:
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> Optional[bool]:
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> Optional[str]:
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter(name="expiryTime")
    def expiry_time(self) -> Optional[str]:
        return pulumi.get(self, "expiry_time")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Optional[Sequence['outputs.GetDomainsMyTrustedUserAgentsMyTrustedUserAgentIdcsCreatedByResult']]:
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "idcs_endpoint")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Optional[Sequence['outputs.GetDomainsMyTrustedUserAgentsMyTrustedUserAgentIdcsLastModifiedByResult']]:
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> Optional[str]:
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter(name="lastUsedOn")
    def last_used_on(self) -> Optional[str]:
        return pulumi.get(self, "last_used_on")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def metas(self) -> Optional[Sequence['outputs.GetDomainsMyTrustedUserAgentsMyTrustedUserAgentMetaResult']]:
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter(name="myTrustedUserAgentId")
    def my_trusted_user_agent_id(self) -> Optional[str]:
        return pulumi.get(self, "my_trusted_user_agent_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def platform(self) -> Optional[str]:
        return pulumi.get(self, "platform")

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> Optional[str]:
        return pulumi.get(self, "resource_type_schema_version")

    @property
    @pulumi.getter
    def schemas(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.GetDomainsMyTrustedUserAgentsMyTrustedUserAgentTagResult']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> Optional[str]:
        return pulumi.get(self, "tenancy_ocid")

    @property
    @pulumi.getter(name="tokenType")
    def token_type(self) -> Optional[str]:
        return pulumi.get(self, "token_type")

    @property
    @pulumi.getter(name="trustToken")
    def trust_token(self) -> Optional[str]:
        return pulumi.get(self, "trust_token")

    @property
    @pulumi.getter(name="trustedFactors")
    def trusted_factors(self) -> Optional[Sequence['outputs.GetDomainsMyTrustedUserAgentsMyTrustedUserAgentTrustedFactorResult']]:
        return pulumi.get(self, "trusted_factors")

    @property
    @pulumi.getter
    def users(self) -> Optional[Sequence['outputs.GetDomainsMyTrustedUserAgentsMyTrustedUserAgentUserResult']]:
        return pulumi.get(self, "users")


@pulumi.output_type
class GetDomainsMyTrustedUserAgentsMyTrustedUserAgentIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyTrustedUserAgentsMyTrustedUserAgentIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyTrustedUserAgentsMyTrustedUserAgentMetaResult(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsMyTrustedUserAgentsMyTrustedUserAgentTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyTrustedUserAgentsMyTrustedUserAgentTrustedFactorResult(dict):
    def __init__(__self__, *,
                 category: Optional[str] = None,
                 creation_time: Optional[str] = None,
                 type: Optional[str] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if creation_time is not None:
            pulumi.set(__self__, "creation_time", creation_time)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> Optional[str]:
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDomainsMyTrustedUserAgentsMyTrustedUserAgentUserResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyUserDbCredentialIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyUserDbCredentialIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyUserDbCredentialMetaResult(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsMyUserDbCredentialTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyUserDbCredentialUserResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyUserDbCredentialsMyUserDbCredentialResult(dict):
    def __init__(__self__, *,
                 authorization: Optional[str] = None,
                 compartment_ocid: Optional[str] = None,
                 db_password: Optional[str] = None,
                 delete_in_progress: Optional[bool] = None,
                 description: Optional[str] = None,
                 domain_ocid: Optional[str] = None,
                 expired: Optional[bool] = None,
                 expires_on: Optional[str] = None,
                 id: Optional[str] = None,
                 idcs_created_bies: Optional[Sequence['outputs.GetDomainsMyUserDbCredentialsMyUserDbCredentialIdcsCreatedByResult']] = None,
                 idcs_endpoint: Optional[str] = None,
                 idcs_last_modified_bies: Optional[Sequence['outputs.GetDomainsMyUserDbCredentialsMyUserDbCredentialIdcsLastModifiedByResult']] = None,
                 idcs_last_upgraded_in_release: Optional[str] = None,
                 idcs_prevented_operations: Optional[Sequence[str]] = None,
                 last_set_date: Optional[str] = None,
                 metas: Optional[Sequence['outputs.GetDomainsMyUserDbCredentialsMyUserDbCredentialMetaResult']] = None,
                 mixed_db_password: Optional[str] = None,
                 mixed_salt: Optional[str] = None,
                 name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 resource_type_schema_version: Optional[str] = None,
                 salt: Optional[str] = None,
                 schemas: Optional[Sequence[str]] = None,
                 status: Optional[str] = None,
                 tags: Optional[Sequence['outputs.GetDomainsMyUserDbCredentialsMyUserDbCredentialTagResult']] = None,
                 tenancy_ocid: Optional[str] = None,
                 users: Optional[Sequence['outputs.GetDomainsMyUserDbCredentialsMyUserDbCredentialUserResult']] = None):
        if authorization is not None:
            pulumi.set(__self__, "authorization", authorization)
        if compartment_ocid is not None:
            pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        if db_password is not None:
            pulumi.set(__self__, "db_password", db_password)
        if delete_in_progress is not None:
            pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain_ocid is not None:
            pulumi.set(__self__, "domain_ocid", domain_ocid)
        if expired is not None:
            pulumi.set(__self__, "expired", expired)
        if expires_on is not None:
            pulumi.set(__self__, "expires_on", expires_on)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if idcs_created_bies is not None:
            pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        if idcs_endpoint is not None:
            pulumi.set(__self__, "idcs_endpoint", idcs_endpoint)
        if idcs_last_modified_bies is not None:
            pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        if idcs_last_upgraded_in_release is not None:
            pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        if idcs_prevented_operations is not None:
            pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        if last_set_date is not None:
            pulumi.set(__self__, "last_set_date", last_set_date)
        if metas is not None:
            pulumi.set(__self__, "metas", metas)
        if mixed_db_password is not None:
            pulumi.set(__self__, "mixed_db_password", mixed_db_password)
        if mixed_salt is not None:
            pulumi.set(__self__, "mixed_salt", mixed_salt)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if resource_type_schema_version is not None:
            pulumi.set(__self__, "resource_type_schema_version", resource_type_schema_version)
        if salt is not None:
            pulumi.set(__self__, "salt", salt)
        if schemas is not None:
            pulumi.set(__self__, "schemas", schemas)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tenancy_ocid is not None:
            pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter
    def authorization(self) -> Optional[str]:
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> Optional[str]:
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="dbPassword")
    def db_password(self) -> Optional[str]:
        return pulumi.get(self, "db_password")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> Optional[bool]:
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> Optional[str]:
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter
    def expired(self) -> Optional[bool]:
        return pulumi.get(self, "expired")

    @property
    @pulumi.getter(name="expiresOn")
    def expires_on(self) -> Optional[str]:
        return pulumi.get(self, "expires_on")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Optional[Sequence['outputs.GetDomainsMyUserDbCredentialsMyUserDbCredentialIdcsCreatedByResult']]:
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "idcs_endpoint")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Optional[Sequence['outputs.GetDomainsMyUserDbCredentialsMyUserDbCredentialIdcsLastModifiedByResult']]:
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> Optional[str]:
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter(name="lastSetDate")
    def last_set_date(self) -> Optional[str]:
        return pulumi.get(self, "last_set_date")

    @property
    @pulumi.getter
    def metas(self) -> Optional[Sequence['outputs.GetDomainsMyUserDbCredentialsMyUserDbCredentialMetaResult']]:
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter(name="mixedDbPassword")
    def mixed_db_password(self) -> Optional[str]:
        return pulumi.get(self, "mixed_db_password")

    @property
    @pulumi.getter(name="mixedSalt")
    def mixed_salt(self) -> Optional[str]:
        return pulumi.get(self, "mixed_salt")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> Optional[str]:
        return pulumi.get(self, "resource_type_schema_version")

    @property
    @pulumi.getter
    def salt(self) -> Optional[str]:
        return pulumi.get(self, "salt")

    @property
    @pulumi.getter
    def schemas(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.GetDomainsMyUserDbCredentialsMyUserDbCredentialTagResult']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> Optional[str]:
        return pulumi.get(self, "tenancy_ocid")

    @property
    @pulumi.getter
    def users(self) -> Optional[Sequence['outputs.GetDomainsMyUserDbCredentialsMyUserDbCredentialUserResult']]:
        return pulumi.get(self, "users")


@pulumi.output_type
class GetDomainsMyUserDbCredentialsMyUserDbCredentialIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyUserDbCredentialsMyUserDbCredentialIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyUserDbCredentialsMyUserDbCredentialMetaResult(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsMyUserDbCredentialsMyUserDbCredentialTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsMyUserDbCredentialsMyUserDbCredentialUserResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsOauth2clientCredentialIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsOauth2clientCredentialIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsOauth2clientCredentialMetaResult(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsOauth2clientCredentialScopeResult(dict):
    def __init__(__self__, *,
                 audience: Optional[str] = None,
                 scope: Optional[str] = None):
        if audience is not None:
            pulumi.set(__self__, "audience", audience)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)

    @property
    @pulumi.getter
    def audience(self) -> Optional[str]:
        return pulumi.get(self, "audience")

    @property
    @pulumi.getter
    def scope(self) -> Optional[str]:
        return pulumi.get(self, "scope")


@pulumi.output_type
class GetDomainsOauth2clientCredentialTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsOauth2clientCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult(dict):
    def __init__(__self__, *,
                 allow_self_change: Optional[bool] = None):
        if allow_self_change is not None:
            pulumi.set(__self__, "allow_self_change", allow_self_change)

    @property
    @pulumi.getter(name="allowSelfChange")
    def allow_self_change(self) -> Optional[bool]:
        return pulumi.get(self, "allow_self_change")


@pulumi.output_type
class GetDomainsOauth2clientCredentialUserResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsOauth2clientCredentialsOauth2clientCredentialResult(dict):
    def __init__(__self__, *,
                 attribute_sets: Optional[Sequence[str]] = None,
                 attributes: Optional[str] = None,
                 authorization: Optional[str] = None,
                 compartment_ocid: Optional[str] = None,
                 delete_in_progress: Optional[bool] = None,
                 description: Optional[str] = None,
                 domain_ocid: Optional[str] = None,
                 expires_on: Optional[str] = None,
                 id: Optional[str] = None,
                 idcs_created_bies: Optional[Sequence['outputs.GetDomainsOauth2clientCredentialsOauth2clientCredentialIdcsCreatedByResult']] = None,
                 idcs_endpoint: Optional[str] = None,
                 idcs_last_modified_bies: Optional[Sequence['outputs.GetDomainsOauth2clientCredentialsOauth2clientCredentialIdcsLastModifiedByResult']] = None,
                 idcs_last_upgraded_in_release: Optional[str] = None,
                 idcs_prevented_operations: Optional[Sequence[str]] = None,
                 is_reset_secret: Optional[bool] = None,
                 metas: Optional[Sequence['outputs.GetDomainsOauth2clientCredentialsOauth2clientCredentialMetaResult']] = None,
                 name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 resource_type_schema_version: Optional[str] = None,
                 schemas: Optional[Sequence[str]] = None,
                 scopes: Optional[Sequence['outputs.GetDomainsOauth2clientCredentialsOauth2clientCredentialScopeResult']] = None,
                 status: Optional[str] = None,
                 tags: Optional[Sequence['outputs.GetDomainsOauth2clientCredentialsOauth2clientCredentialTagResult']] = None,
                 tenancy_ocid: Optional[str] = None,
                 urnietfparamsscimschemasoracleidcsextensionself_change_users: Optional[Sequence['outputs.GetDomainsOauth2clientCredentialsOauth2clientCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult']] = None,
                 users: Optional[Sequence['outputs.GetDomainsOauth2clientCredentialsOauth2clientCredentialUserResult']] = None):
        if attribute_sets is not None:
            pulumi.set(__self__, "attribute_sets", attribute_sets)
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)
        if authorization is not None:
            pulumi.set(__self__, "authorization", authorization)
        if compartment_ocid is not None:
            pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        if delete_in_progress is not None:
            pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain_ocid is not None:
            pulumi.set(__self__, "domain_ocid", domain_ocid)
        if expires_on is not None:
            pulumi.set(__self__, "expires_on", expires_on)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if idcs_created_bies is not None:
            pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        if idcs_endpoint is not None:
            pulumi.set(__self__, "idcs_endpoint", idcs_endpoint)
        if idcs_last_modified_bies is not None:
            pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        if idcs_last_upgraded_in_release is not None:
            pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        if idcs_prevented_operations is not None:
            pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        if is_reset_secret is not None:
            pulumi.set(__self__, "is_reset_secret", is_reset_secret)
        if metas is not None:
            pulumi.set(__self__, "metas", metas)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if resource_type_schema_version is not None:
            pulumi.set(__self__, "resource_type_schema_version", resource_type_schema_version)
        if schemas is not None:
            pulumi.set(__self__, "schemas", schemas)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tenancy_ocid is not None:
            pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)
        if urnietfparamsscimschemasoracleidcsextensionself_change_users is not None:
            pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionself_change_users", urnietfparamsscimschemasoracleidcsextensionself_change_users)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="attributeSets")
    def attribute_sets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "attribute_sets")

    @property
    @pulumi.getter
    def attributes(self) -> Optional[str]:
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter
    def authorization(self) -> Optional[str]:
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> Optional[str]:
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> Optional[bool]:
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> Optional[str]:
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter(name="expiresOn")
    def expires_on(self) -> Optional[str]:
        return pulumi.get(self, "expires_on")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Optional[Sequence['outputs.GetDomainsOauth2clientCredentialsOauth2clientCredentialIdcsCreatedByResult']]:
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "idcs_endpoint")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Optional[Sequence['outputs.GetDomainsOauth2clientCredentialsOauth2clientCredentialIdcsLastModifiedByResult']]:
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> Optional[str]:
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter(name="isResetSecret")
    def is_reset_secret(self) -> Optional[bool]:
        return pulumi.get(self, "is_reset_secret")

    @property
    @pulumi.getter
    def metas(self) -> Optional[Sequence['outputs.GetDomainsOauth2clientCredentialsOauth2clientCredentialMetaResult']]:
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> Optional[str]:
        return pulumi.get(self, "resource_type_schema_version")

    @property
    @pulumi.getter
    def schemas(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter
    def scopes(self) -> Optional[Sequence['outputs.GetDomainsOauth2clientCredentialsOauth2clientCredentialScopeResult']]:
        return pulumi.get(self, "scopes")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.GetDomainsOauth2clientCredentialsOauth2clientCredentialTagResult']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> Optional[str]:
        return pulumi.get(self, "tenancy_ocid")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionselfChangeUsers")
    def urnietfparamsscimschemasoracleidcsextensionself_change_users(self) -> Optional[Sequence['outputs.GetDomainsOauth2clientCredentialsOauth2clientCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult']]:
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionself_change_users")

    @property
    @pulumi.getter
    def users(self) -> Optional[Sequence['outputs.GetDomainsOauth2clientCredentialsOauth2clientCredentialUserResult']]:
        return pulumi.get(self, "users")


@pulumi.output_type
class GetDomainsOauth2clientCredentialsOauth2clientCredentialIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsOauth2clientCredentialsOauth2clientCredentialIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsOauth2clientCredentialsOauth2clientCredentialMetaResult(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsOauth2clientCredentialsOauth2clientCredentialScopeResult(dict):
    def __init__(__self__, *,
                 audience: Optional[str] = None,
                 scope: Optional[str] = None):
        if audience is not None:
            pulumi.set(__self__, "audience", audience)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)

    @property
    @pulumi.getter
    def audience(self) -> Optional[str]:
        return pulumi.get(self, "audience")

    @property
    @pulumi.getter
    def scope(self) -> Optional[str]:
        return pulumi.get(self, "scope")


@pulumi.output_type
class GetDomainsOauth2clientCredentialsOauth2clientCredentialTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsOauth2clientCredentialsOauth2clientCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult(dict):
    def __init__(__self__, *,
                 allow_self_change: Optional[bool] = None):
        if allow_self_change is not None:
            pulumi.set(__self__, "allow_self_change", allow_self_change)

    @property
    @pulumi.getter(name="allowSelfChange")
    def allow_self_change(self) -> Optional[bool]:
        return pulumi.get(self, "allow_self_change")


@pulumi.output_type
class GetDomainsOauth2clientCredentialsOauth2clientCredentialUserResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsPasswordPoliciesPasswordPolicyResult(dict):
    def __init__(__self__, *,
                 allowed_chars: Optional[str] = None,
                 attribute_sets: Optional[Sequence[str]] = None,
                 attributes: Optional[str] = None,
                 authorization: Optional[str] = None,
                 compartment_ocid: Optional[str] = None,
                 configured_password_policy_rules: Optional[Sequence['outputs.GetDomainsPasswordPoliciesPasswordPolicyConfiguredPasswordPolicyRuleResult']] = None,
                 delete_in_progress: Optional[bool] = None,
                 description: Optional[str] = None,
                 dictionary_delimiter: Optional[str] = None,
                 dictionary_location: Optional[str] = None,
                 dictionary_word_disallowed: Optional[bool] = None,
                 disallowed_chars: Optional[str] = None,
                 disallowed_substrings: Optional[Sequence[str]] = None,
                 disallowed_user_attribute_values: Optional[Sequence[str]] = None,
                 distinct_characters: Optional[int] = None,
                 domain_ocid: Optional[str] = None,
                 external_id: Optional[str] = None,
                 first_name_disallowed: Optional[bool] = None,
                 force_password_reset: Optional[bool] = None,
                 groups: Optional[Sequence['outputs.GetDomainsPasswordPoliciesPasswordPolicyGroupResult']] = None,
                 id: Optional[str] = None,
                 idcs_created_bies: Optional[Sequence['outputs.GetDomainsPasswordPoliciesPasswordPolicyIdcsCreatedByResult']] = None,
                 idcs_endpoint: Optional[str] = None,
                 idcs_last_modified_bies: Optional[Sequence['outputs.GetDomainsPasswordPoliciesPasswordPolicyIdcsLastModifiedByResult']] = None,
                 idcs_last_upgraded_in_release: Optional[str] = None,
                 idcs_prevented_operations: Optional[Sequence[str]] = None,
                 last_name_disallowed: Optional[bool] = None,
                 lockout_duration: Optional[int] = None,
                 max_incorrect_attempts: Optional[int] = None,
                 max_length: Optional[int] = None,
                 max_repeated_chars: Optional[int] = None,
                 max_special_chars: Optional[int] = None,
                 metas: Optional[Sequence['outputs.GetDomainsPasswordPoliciesPasswordPolicyMetaResult']] = None,
                 min_alpha_numerals: Optional[int] = None,
                 min_alphas: Optional[int] = None,
                 min_length: Optional[int] = None,
                 min_lower_case: Optional[int] = None,
                 min_numerals: Optional[int] = None,
                 min_password_age: Optional[int] = None,
                 min_special_chars: Optional[int] = None,
                 min_unique_chars: Optional[int] = None,
                 min_upper_case: Optional[int] = None,
                 name: Optional[str] = None,
                 num_passwords_in_history: Optional[int] = None,
                 ocid: Optional[str] = None,
                 password_expire_warning: Optional[int] = None,
                 password_expires_after: Optional[int] = None,
                 password_strength: Optional[str] = None,
                 priority: Optional[int] = None,
                 required_chars: Optional[str] = None,
                 resource_type_schema_version: Optional[str] = None,
                 schemas: Optional[Sequence[str]] = None,
                 starts_with_alphabet: Optional[bool] = None,
                 tags: Optional[Sequence['outputs.GetDomainsPasswordPoliciesPasswordPolicyTagResult']] = None,
                 tenancy_ocid: Optional[str] = None,
                 user_name_disallowed: Optional[bool] = None):
        if allowed_chars is not None:
            pulumi.set(__self__, "allowed_chars", allowed_chars)
        if attribute_sets is not None:
            pulumi.set(__self__, "attribute_sets", attribute_sets)
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)
        if authorization is not None:
            pulumi.set(__self__, "authorization", authorization)
        if compartment_ocid is not None:
            pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        if configured_password_policy_rules is not None:
            pulumi.set(__self__, "configured_password_policy_rules", configured_password_policy_rules)
        if delete_in_progress is not None:
            pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dictionary_delimiter is not None:
            pulumi.set(__self__, "dictionary_delimiter", dictionary_delimiter)
        if dictionary_location is not None:
            pulumi.set(__self__, "dictionary_location", dictionary_location)
        if dictionary_word_disallowed is not None:
            pulumi.set(__self__, "dictionary_word_disallowed", dictionary_word_disallowed)
        if disallowed_chars is not None:
            pulumi.set(__self__, "disallowed_chars", disallowed_chars)
        if disallowed_substrings is not None:
            pulumi.set(__self__, "disallowed_substrings", disallowed_substrings)
        if disallowed_user_attribute_values is not None:
            pulumi.set(__self__, "disallowed_user_attribute_values", disallowed_user_attribute_values)
        if distinct_characters is not None:
            pulumi.set(__self__, "distinct_characters", distinct_characters)
        if domain_ocid is not None:
            pulumi.set(__self__, "domain_ocid", domain_ocid)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if first_name_disallowed is not None:
            pulumi.set(__self__, "first_name_disallowed", first_name_disallowed)
        if force_password_reset is not None:
            pulumi.set(__self__, "force_password_reset", force_password_reset)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if idcs_created_bies is not None:
            pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        if idcs_endpoint is not None:
            pulumi.set(__self__, "idcs_endpoint", idcs_endpoint)
        if idcs_last_modified_bies is not None:
            pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        if idcs_last_upgraded_in_release is not None:
            pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        if idcs_prevented_operations is not None:
            pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        if last_name_disallowed is not None:
            pulumi.set(__self__, "last_name_disallowed", last_name_disallowed)
        if lockout_duration is not None:
            pulumi.set(__self__, "lockout_duration", lockout_duration)
        if max_incorrect_attempts is not None:
            pulumi.set(__self__, "max_incorrect_attempts", max_incorrect_attempts)
        if max_length is not None:
            pulumi.set(__self__, "max_length", max_length)
        if max_repeated_chars is not None:
            pulumi.set(__self__, "max_repeated_chars", max_repeated_chars)
        if max_special_chars is not None:
            pulumi.set(__self__, "max_special_chars", max_special_chars)
        if metas is not None:
            pulumi.set(__self__, "metas", metas)
        if min_alpha_numerals is not None:
            pulumi.set(__self__, "min_alpha_numerals", min_alpha_numerals)
        if min_alphas is not None:
            pulumi.set(__self__, "min_alphas", min_alphas)
        if min_length is not None:
            pulumi.set(__self__, "min_length", min_length)
        if min_lower_case is not None:
            pulumi.set(__self__, "min_lower_case", min_lower_case)
        if min_numerals is not None:
            pulumi.set(__self__, "min_numerals", min_numerals)
        if min_password_age is not None:
            pulumi.set(__self__, "min_password_age", min_password_age)
        if min_special_chars is not None:
            pulumi.set(__self__, "min_special_chars", min_special_chars)
        if min_unique_chars is not None:
            pulumi.set(__self__, "min_unique_chars", min_unique_chars)
        if min_upper_case is not None:
            pulumi.set(__self__, "min_upper_case", min_upper_case)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if num_passwords_in_history is not None:
            pulumi.set(__self__, "num_passwords_in_history", num_passwords_in_history)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if password_expire_warning is not None:
            pulumi.set(__self__, "password_expire_warning", password_expire_warning)
        if password_expires_after is not None:
            pulumi.set(__self__, "password_expires_after", password_expires_after)
        if password_strength is not None:
            pulumi.set(__self__, "password_strength", password_strength)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if required_chars is not None:
            pulumi.set(__self__, "required_chars", required_chars)
        if resource_type_schema_version is not None:
            pulumi.set(__self__, "resource_type_schema_version", resource_type_schema_version)
        if schemas is not None:
            pulumi.set(__self__, "schemas", schemas)
        if starts_with_alphabet is not None:
            pulumi.set(__self__, "starts_with_alphabet", starts_with_alphabet)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tenancy_ocid is not None:
            pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)
        if user_name_disallowed is not None:
            pulumi.set(__self__, "user_name_disallowed", user_name_disallowed)

    @property
    @pulumi.getter(name="allowedChars")
    def allowed_chars(self) -> Optional[str]:
        return pulumi.get(self, "allowed_chars")

    @property
    @pulumi.getter(name="attributeSets")
    def attribute_sets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "attribute_sets")

    @property
    @pulumi.getter
    def attributes(self) -> Optional[str]:
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter
    def authorization(self) -> Optional[str]:
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> Optional[str]:
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="configuredPasswordPolicyRules")
    def configured_password_policy_rules(self) -> Optional[Sequence['outputs.GetDomainsPasswordPoliciesPasswordPolicyConfiguredPasswordPolicyRuleResult']]:
        return pulumi.get(self, "configured_password_policy_rules")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> Optional[bool]:
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dictionaryDelimiter")
    def dictionary_delimiter(self) -> Optional[str]:
        return pulumi.get(self, "dictionary_delimiter")

    @property
    @pulumi.getter(name="dictionaryLocation")
    def dictionary_location(self) -> Optional[str]:
        return pulumi.get(self, "dictionary_location")

    @property
    @pulumi.getter(name="dictionaryWordDisallowed")
    def dictionary_word_disallowed(self) -> Optional[bool]:
        return pulumi.get(self, "dictionary_word_disallowed")

    @property
    @pulumi.getter(name="disallowedChars")
    def disallowed_chars(self) -> Optional[str]:
        return pulumi.get(self, "disallowed_chars")

    @property
    @pulumi.getter(name="disallowedSubstrings")
    def disallowed_substrings(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "disallowed_substrings")

    @property
    @pulumi.getter(name="disallowedUserAttributeValues")
    def disallowed_user_attribute_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "disallowed_user_attribute_values")

    @property
    @pulumi.getter(name="distinctCharacters")
    def distinct_characters(self) -> Optional[int]:
        return pulumi.get(self, "distinct_characters")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> Optional[str]:
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[str]:
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter(name="firstNameDisallowed")
    def first_name_disallowed(self) -> Optional[bool]:
        return pulumi.get(self, "first_name_disallowed")

    @property
    @pulumi.getter(name="forcePasswordReset")
    def force_password_reset(self) -> Optional[bool]:
        return pulumi.get(self, "force_password_reset")

    @property
    @pulumi.getter
    def groups(self) -> Optional[Sequence['outputs.GetDomainsPasswordPoliciesPasswordPolicyGroupResult']]:
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Optional[Sequence['outputs.GetDomainsPasswordPoliciesPasswordPolicyIdcsCreatedByResult']]:
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "idcs_endpoint")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Optional[Sequence['outputs.GetDomainsPasswordPoliciesPasswordPolicyIdcsLastModifiedByResult']]:
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> Optional[str]:
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter(name="lastNameDisallowed")
    def last_name_disallowed(self) -> Optional[bool]:
        return pulumi.get(self, "last_name_disallowed")

    @property
    @pulumi.getter(name="lockoutDuration")
    def lockout_duration(self) -> Optional[int]:
        return pulumi.get(self, "lockout_duration")

    @property
    @pulumi.getter(name="maxIncorrectAttempts")
    def max_incorrect_attempts(self) -> Optional[int]:
        return pulumi.get(self, "max_incorrect_attempts")

    @property
    @pulumi.getter(name="maxLength")
    def max_length(self) -> Optional[int]:
        return pulumi.get(self, "max_length")

    @property
    @pulumi.getter(name="maxRepeatedChars")
    def max_repeated_chars(self) -> Optional[int]:
        return pulumi.get(self, "max_repeated_chars")

    @property
    @pulumi.getter(name="maxSpecialChars")
    def max_special_chars(self) -> Optional[int]:
        return pulumi.get(self, "max_special_chars")

    @property
    @pulumi.getter
    def metas(self) -> Optional[Sequence['outputs.GetDomainsPasswordPoliciesPasswordPolicyMetaResult']]:
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter(name="minAlphaNumerals")
    def min_alpha_numerals(self) -> Optional[int]:
        return pulumi.get(self, "min_alpha_numerals")

    @property
    @pulumi.getter(name="minAlphas")
    def min_alphas(self) -> Optional[int]:
        return pulumi.get(self, "min_alphas")

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[int]:
        return pulumi.get(self, "min_length")

    @property
    @pulumi.getter(name="minLowerCase")
    def min_lower_case(self) -> Optional[int]:
        return pulumi.get(self, "min_lower_case")

    @property
    @pulumi.getter(name="minNumerals")
    def min_numerals(self) -> Optional[int]:
        return pulumi.get(self, "min_numerals")

    @property
    @pulumi.getter(name="minPasswordAge")
    def min_password_age(self) -> Optional[int]:
        return pulumi.get(self, "min_password_age")

    @property
    @pulumi.getter(name="minSpecialChars")
    def min_special_chars(self) -> Optional[int]:
        return pulumi.get(self, "min_special_chars")

    @property
    @pulumi.getter(name="minUniqueChars")
    def min_unique_chars(self) -> Optional[int]:
        return pulumi.get(self, "min_unique_chars")

    @property
    @pulumi.getter(name="minUpperCase")
    def min_upper_case(self) -> Optional[int]:
        return pulumi.get(self, "min_upper_case")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="numPasswordsInHistory")
    def num_passwords_in_history(self) -> Optional[int]:
        return pulumi.get(self, "num_passwords_in_history")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="passwordExpireWarning")
    def password_expire_warning(self) -> Optional[int]:
        return pulumi.get(self, "password_expire_warning")

    @property
    @pulumi.getter(name="passwordExpiresAfter")
    def password_expires_after(self) -> Optional[int]:
        return pulumi.get(self, "password_expires_after")

    @property
    @pulumi.getter(name="passwordStrength")
    def password_strength(self) -> Optional[str]:
        return pulumi.get(self, "password_strength")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="requiredChars")
    def required_chars(self) -> Optional[str]:
        return pulumi.get(self, "required_chars")

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> Optional[str]:
        return pulumi.get(self, "resource_type_schema_version")

    @property
    @pulumi.getter
    def schemas(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter(name="startsWithAlphabet")
    def starts_with_alphabet(self) -> Optional[bool]:
        return pulumi.get(self, "starts_with_alphabet")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.GetDomainsPasswordPoliciesPasswordPolicyTagResult']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> Optional[str]:
        return pulumi.get(self, "tenancy_ocid")

    @property
    @pulumi.getter(name="userNameDisallowed")
    def user_name_disallowed(self) -> Optional[bool]:
        return pulumi.get(self, "user_name_disallowed")


@pulumi.output_type
class GetDomainsPasswordPoliciesPasswordPolicyConfiguredPasswordPolicyRuleResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsPasswordPoliciesPasswordPolicyGroupResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsPasswordPoliciesPasswordPolicyIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsPasswordPoliciesPasswordPolicyIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsPasswordPoliciesPasswordPolicyMetaResult(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsPasswordPoliciesPasswordPolicyTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsPasswordPolicyConfiguredPasswordPolicyRuleResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsPasswordPolicyGroupResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsPasswordPolicyIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsPasswordPolicyIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsPasswordPolicyMetaResult(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsPasswordPolicyTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeResult(dict):
    def __init__(__self__, *,
                 canonical_values: Optional[Sequence[str]] = None,
                 case_exact: Optional[bool] = None,
                 compartment_ocid: Optional[str] = None,
                 delete_in_progress: Optional[bool] = None,
                 description: Optional[str] = None,
                 domain_ocid: Optional[str] = None,
                 end_user_mutability: Optional[str] = None,
                 end_user_mutability_allowed_values: Optional[Sequence[str]] = None,
                 id: Optional[str] = None,
                 idcs_added_since_release_number: Optional[str] = None,
                 idcs_added_since_version: Optional[int] = None,
                 idcs_attribute_cacheable: Optional[bool] = None,
                 idcs_attribute_mappable: Optional[bool] = None,
                 idcs_auditable: Optional[bool] = None,
                 idcs_auto_increment_seq_name: Optional[str] = None,
                 idcs_canonical_value_source_filter: Optional[str] = None,
                 idcs_canonical_value_source_resource_type: Optional[str] = None,
                 idcs_composite_keys: Optional[Sequence[str]] = None,
                 idcs_created_bies: Optional[Sequence['outputs.GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeIdcsCreatedByResult']] = None,
                 idcs_csv_column_header_name: Optional[str] = None,
                 idcs_custom_attribute: Optional[bool] = None,
                 idcs_deprecated_since_release_number: Optional[str] = None,
                 idcs_deprecated_since_version: Optional[int] = None,
                 idcs_display_name: Optional[str] = None,
                 idcs_display_name_message_id: Optional[str] = None,
                 idcs_fetch_complex_attribute_values: Optional[bool] = None,
                 idcs_from_target_mapper: Optional[str] = None,
                 idcs_fully_qualified_name: Optional[str] = None,
                 idcs_generated: Optional[bool] = None,
                 idcs_icf_attribute_type: Optional[str] = None,
                 idcs_icf_bundle_attribute_name: Optional[str] = None,
                 idcs_icf_required: Optional[bool] = None,
                 idcs_indirect_ref_resource_attributes: Optional[Sequence[str]] = None,
                 idcs_internal: Optional[bool] = None,
                 idcs_last_modified_bies: Optional[Sequence['outputs.GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeIdcsLastModifiedByResult']] = None,
                 idcs_last_upgraded_in_release: Optional[str] = None,
                 idcs_max_length: Optional[int] = None,
                 idcs_max_value: Optional[int] = None,
                 idcs_min_length: Optional[int] = None,
                 idcs_min_value: Optional[int] = None,
                 idcs_multi_language: Optional[bool] = None,
                 idcs_prevented_operations: Optional[Sequence[str]] = None,
                 idcs_ref_resource_attribute: Optional[str] = None,
                 idcs_ref_resource_attributes: Optional[Sequence[str]] = None,
                 idcs_schema_urn: Optional[str] = None,
                 idcs_scim_compliant: Optional[bool] = None,
                 idcs_searchable: Optional[bool] = None,
                 idcs_sensitive: Optional[str] = None,
                 idcs_target_attribute_name: Optional[str] = None,
                 idcs_target_attribute_name_to_migrate_from: Optional[str] = None,
                 idcs_target_norm_attribute_name: Optional[str] = None,
                 idcs_target_unique_constraint_name: Optional[str] = None,
                 idcs_to_target_mapper: Optional[str] = None,
                 idcs_trim_string_value: Optional[bool] = None,
                 idcs_validate_reference: Optional[bool] = None,
                 idcs_value_persisted: Optional[bool] = None,
                 metas: Optional[Sequence['outputs.GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeMetaResult']] = None,
                 multi_valued: Optional[bool] = None,
                 mutability: Optional[str] = None,
                 name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 reference_types: Optional[Sequence[str]] = None,
                 required: Optional[bool] = None,
                 resource_type: Optional[str] = None,
                 returned: Optional[str] = None,
                 schemas: Optional[Sequence[str]] = None,
                 tags: Optional[Sequence['outputs.GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeTagResult']] = None,
                 tenancy_ocid: Optional[str] = None,
                 type: Optional[str] = None,
                 uniqueness: Optional[str] = None):
        if canonical_values is not None:
            pulumi.set(__self__, "canonical_values", canonical_values)
        if case_exact is not None:
            pulumi.set(__self__, "case_exact", case_exact)
        if compartment_ocid is not None:
            pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        if delete_in_progress is not None:
            pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain_ocid is not None:
            pulumi.set(__self__, "domain_ocid", domain_ocid)
        if end_user_mutability is not None:
            pulumi.set(__self__, "end_user_mutability", end_user_mutability)
        if end_user_mutability_allowed_values is not None:
            pulumi.set(__self__, "end_user_mutability_allowed_values", end_user_mutability_allowed_values)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if idcs_added_since_release_number is not None:
            pulumi.set(__self__, "idcs_added_since_release_number", idcs_added_since_release_number)
        if idcs_added_since_version is not None:
            pulumi.set(__self__, "idcs_added_since_version", idcs_added_since_version)
        if idcs_attribute_cacheable is not None:
            pulumi.set(__self__, "idcs_attribute_cacheable", idcs_attribute_cacheable)
        if idcs_attribute_mappable is not None:
            pulumi.set(__self__, "idcs_attribute_mappable", idcs_attribute_mappable)
        if idcs_auditable is not None:
            pulumi.set(__self__, "idcs_auditable", idcs_auditable)
        if idcs_auto_increment_seq_name is not None:
            pulumi.set(__self__, "idcs_auto_increment_seq_name", idcs_auto_increment_seq_name)
        if idcs_canonical_value_source_filter is not None:
            pulumi.set(__self__, "idcs_canonical_value_source_filter", idcs_canonical_value_source_filter)
        if idcs_canonical_value_source_resource_type is not None:
            pulumi.set(__self__, "idcs_canonical_value_source_resource_type", idcs_canonical_value_source_resource_type)
        if idcs_composite_keys is not None:
            pulumi.set(__self__, "idcs_composite_keys", idcs_composite_keys)
        if idcs_created_bies is not None:
            pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        if idcs_csv_column_header_name is not None:
            pulumi.set(__self__, "idcs_csv_column_header_name", idcs_csv_column_header_name)
        if idcs_custom_attribute is not None:
            pulumi.set(__self__, "idcs_custom_attribute", idcs_custom_attribute)
        if idcs_deprecated_since_release_number is not None:
            pulumi.set(__self__, "idcs_deprecated_since_release_number", idcs_deprecated_since_release_number)
        if idcs_deprecated_since_version is not None:
            pulumi.set(__self__, "idcs_deprecated_since_version", idcs_deprecated_since_version)
        if idcs_display_name is not None:
            pulumi.set(__self__, "idcs_display_name", idcs_display_name)
        if idcs_display_name_message_id is not None:
            pulumi.set(__self__, "idcs_display_name_message_id", idcs_display_name_message_id)
        if idcs_fetch_complex_attribute_values is not None:
            pulumi.set(__self__, "idcs_fetch_complex_attribute_values", idcs_fetch_complex_attribute_values)
        if idcs_from_target_mapper is not None:
            pulumi.set(__self__, "idcs_from_target_mapper", idcs_from_target_mapper)
        if idcs_fully_qualified_name is not None:
            pulumi.set(__self__, "idcs_fully_qualified_name", idcs_fully_qualified_name)
        if idcs_generated is not None:
            pulumi.set(__self__, "idcs_generated", idcs_generated)
        if idcs_icf_attribute_type is not None:
            pulumi.set(__self__, "idcs_icf_attribute_type", idcs_icf_attribute_type)
        if idcs_icf_bundle_attribute_name is not None:
            pulumi.set(__self__, "idcs_icf_bundle_attribute_name", idcs_icf_bundle_attribute_name)
        if idcs_icf_required is not None:
            pulumi.set(__self__, "idcs_icf_required", idcs_icf_required)
        if idcs_indirect_ref_resource_attributes is not None:
            pulumi.set(__self__, "idcs_indirect_ref_resource_attributes", idcs_indirect_ref_resource_attributes)
        if idcs_internal is not None:
            pulumi.set(__self__, "idcs_internal", idcs_internal)
        if idcs_last_modified_bies is not None:
            pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        if idcs_last_upgraded_in_release is not None:
            pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        if idcs_max_length is not None:
            pulumi.set(__self__, "idcs_max_length", idcs_max_length)
        if idcs_max_value is not None:
            pulumi.set(__self__, "idcs_max_value", idcs_max_value)
        if idcs_min_length is not None:
            pulumi.set(__self__, "idcs_min_length", idcs_min_length)
        if idcs_min_value is not None:
            pulumi.set(__self__, "idcs_min_value", idcs_min_value)
        if idcs_multi_language is not None:
            pulumi.set(__self__, "idcs_multi_language", idcs_multi_language)
        if idcs_prevented_operations is not None:
            pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        if idcs_ref_resource_attribute is not None:
            pulumi.set(__self__, "idcs_ref_resource_attribute", idcs_ref_resource_attribute)
        if idcs_ref_resource_attributes is not None:
            pulumi.set(__self__, "idcs_ref_resource_attributes", idcs_ref_resource_attributes)
        if idcs_schema_urn is not None:
            pulumi.set(__self__, "idcs_schema_urn", idcs_schema_urn)
        if idcs_scim_compliant is not None:
            pulumi.set(__self__, "idcs_scim_compliant", idcs_scim_compliant)
        if idcs_searchable is not None:
            pulumi.set(__self__, "idcs_searchable", idcs_searchable)
        if idcs_sensitive is not None:
            pulumi.set(__self__, "idcs_sensitive", idcs_sensitive)
        if idcs_target_attribute_name is not None:
            pulumi.set(__self__, "idcs_target_attribute_name", idcs_target_attribute_name)
        if idcs_target_attribute_name_to_migrate_from is not None:
            pulumi.set(__self__, "idcs_target_attribute_name_to_migrate_from", idcs_target_attribute_name_to_migrate_from)
        if idcs_target_norm_attribute_name is not None:
            pulumi.set(__self__, "idcs_target_norm_attribute_name", idcs_target_norm_attribute_name)
        if idcs_target_unique_constraint_name is not None:
            pulumi.set(__self__, "idcs_target_unique_constraint_name", idcs_target_unique_constraint_name)
        if idcs_to_target_mapper is not None:
            pulumi.set(__self__, "idcs_to_target_mapper", idcs_to_target_mapper)
        if idcs_trim_string_value is not None:
            pulumi.set(__self__, "idcs_trim_string_value", idcs_trim_string_value)
        if idcs_validate_reference is not None:
            pulumi.set(__self__, "idcs_validate_reference", idcs_validate_reference)
        if idcs_value_persisted is not None:
            pulumi.set(__self__, "idcs_value_persisted", idcs_value_persisted)
        if metas is not None:
            pulumi.set(__self__, "metas", metas)
        if multi_valued is not None:
            pulumi.set(__self__, "multi_valued", multi_valued)
        if mutability is not None:
            pulumi.set(__self__, "mutability", mutability)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if reference_types is not None:
            pulumi.set(__self__, "reference_types", reference_types)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if returned is not None:
            pulumi.set(__self__, "returned", returned)
        if schemas is not None:
            pulumi.set(__self__, "schemas", schemas)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tenancy_ocid is not None:
            pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uniqueness is not None:
            pulumi.set(__self__, "uniqueness", uniqueness)

    @property
    @pulumi.getter(name="canonicalValues")
    def canonical_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "canonical_values")

    @property
    @pulumi.getter(name="caseExact")
    def case_exact(self) -> Optional[bool]:
        return pulumi.get(self, "case_exact")

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> Optional[str]:
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> Optional[bool]:
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> Optional[str]:
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter(name="endUserMutability")
    def end_user_mutability(self) -> Optional[str]:
        return pulumi.get(self, "end_user_mutability")

    @property
    @pulumi.getter(name="endUserMutabilityAllowedValues")
    def end_user_mutability_allowed_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "end_user_mutability_allowed_values")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsAddedSinceReleaseNumber")
    def idcs_added_since_release_number(self) -> Optional[str]:
        return pulumi.get(self, "idcs_added_since_release_number")

    @property
    @pulumi.getter(name="idcsAddedSinceVersion")
    def idcs_added_since_version(self) -> Optional[int]:
        return pulumi.get(self, "idcs_added_since_version")

    @property
    @pulumi.getter(name="idcsAttributeCacheable")
    def idcs_attribute_cacheable(self) -> Optional[bool]:
        return pulumi.get(self, "idcs_attribute_cacheable")

    @property
    @pulumi.getter(name="idcsAttributeMappable")
    def idcs_attribute_mappable(self) -> Optional[bool]:
        return pulumi.get(self, "idcs_attribute_mappable")

    @property
    @pulumi.getter(name="idcsAuditable")
    def idcs_auditable(self) -> Optional[bool]:
        return pulumi.get(self, "idcs_auditable")

    @property
    @pulumi.getter(name="idcsAutoIncrementSeqName")
    def idcs_auto_increment_seq_name(self) -> Optional[str]:
        return pulumi.get(self, "idcs_auto_increment_seq_name")

    @property
    @pulumi.getter(name="idcsCanonicalValueSourceFilter")
    def idcs_canonical_value_source_filter(self) -> Optional[str]:
        return pulumi.get(self, "idcs_canonical_value_source_filter")

    @property
    @pulumi.getter(name="idcsCanonicalValueSourceResourceType")
    def idcs_canonical_value_source_resource_type(self) -> Optional[str]:
        return pulumi.get(self, "idcs_canonical_value_source_resource_type")

    @property
    @pulumi.getter(name="idcsCompositeKeys")
    def idcs_composite_keys(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "idcs_composite_keys")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Optional[Sequence['outputs.GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeIdcsCreatedByResult']]:
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsCsvColumnHeaderName")
    def idcs_csv_column_header_name(self) -> Optional[str]:
        return pulumi.get(self, "idcs_csv_column_header_name")

    @property
    @pulumi.getter(name="idcsCustomAttribute")
    def idcs_custom_attribute(self) -> Optional[bool]:
        return pulumi.get(self, "idcs_custom_attribute")

    @property
    @pulumi.getter(name="idcsDeprecatedSinceReleaseNumber")
    def idcs_deprecated_since_release_number(self) -> Optional[str]:
        return pulumi.get(self, "idcs_deprecated_since_release_number")

    @property
    @pulumi.getter(name="idcsDeprecatedSinceVersion")
    def idcs_deprecated_since_version(self) -> Optional[int]:
        return pulumi.get(self, "idcs_deprecated_since_version")

    @property
    @pulumi.getter(name="idcsDisplayName")
    def idcs_display_name(self) -> Optional[str]:
        return pulumi.get(self, "idcs_display_name")

    @property
    @pulumi.getter(name="idcsDisplayNameMessageId")
    def idcs_display_name_message_id(self) -> Optional[str]:
        return pulumi.get(self, "idcs_display_name_message_id")

    @property
    @pulumi.getter(name="idcsFetchComplexAttributeValues")
    def idcs_fetch_complex_attribute_values(self) -> Optional[bool]:
        return pulumi.get(self, "idcs_fetch_complex_attribute_values")

    @property
    @pulumi.getter(name="idcsFromTargetMapper")
    def idcs_from_target_mapper(self) -> Optional[str]:
        return pulumi.get(self, "idcs_from_target_mapper")

    @property
    @pulumi.getter(name="idcsFullyQualifiedName")
    def idcs_fully_qualified_name(self) -> Optional[str]:
        return pulumi.get(self, "idcs_fully_qualified_name")

    @property
    @pulumi.getter(name="idcsGenerated")
    def idcs_generated(self) -> Optional[bool]:
        return pulumi.get(self, "idcs_generated")

    @property
    @pulumi.getter(name="idcsIcfAttributeType")
    def idcs_icf_attribute_type(self) -> Optional[str]:
        return pulumi.get(self, "idcs_icf_attribute_type")

    @property
    @pulumi.getter(name="idcsIcfBundleAttributeName")
    def idcs_icf_bundle_attribute_name(self) -> Optional[str]:
        return pulumi.get(self, "idcs_icf_bundle_attribute_name")

    @property
    @pulumi.getter(name="idcsIcfRequired")
    def idcs_icf_required(self) -> Optional[bool]:
        return pulumi.get(self, "idcs_icf_required")

    @property
    @pulumi.getter(name="idcsIndirectRefResourceAttributes")
    def idcs_indirect_ref_resource_attributes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "idcs_indirect_ref_resource_attributes")

    @property
    @pulumi.getter(name="idcsInternal")
    def idcs_internal(self) -> Optional[bool]:
        return pulumi.get(self, "idcs_internal")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Optional[Sequence['outputs.GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeIdcsLastModifiedByResult']]:
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> Optional[str]:
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsMaxLength")
    def idcs_max_length(self) -> Optional[int]:
        return pulumi.get(self, "idcs_max_length")

    @property
    @pulumi.getter(name="idcsMaxValue")
    def idcs_max_value(self) -> Optional[int]:
        return pulumi.get(self, "idcs_max_value")

    @property
    @pulumi.getter(name="idcsMinLength")
    def idcs_min_length(self) -> Optional[int]:
        return pulumi.get(self, "idcs_min_length")

    @property
    @pulumi.getter(name="idcsMinValue")
    def idcs_min_value(self) -> Optional[int]:
        return pulumi.get(self, "idcs_min_value")

    @property
    @pulumi.getter(name="idcsMultiLanguage")
    def idcs_multi_language(self) -> Optional[bool]:
        return pulumi.get(self, "idcs_multi_language")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter(name="idcsRefResourceAttribute")
    def idcs_ref_resource_attribute(self) -> Optional[str]:
        return pulumi.get(self, "idcs_ref_resource_attribute")

    @property
    @pulumi.getter(name="idcsRefResourceAttributes")
    def idcs_ref_resource_attributes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "idcs_ref_resource_attributes")

    @property
    @pulumi.getter(name="idcsSchemaUrn")
    def idcs_schema_urn(self) -> Optional[str]:
        return pulumi.get(self, "idcs_schema_urn")

    @property
    @pulumi.getter(name="idcsScimCompliant")
    def idcs_scim_compliant(self) -> Optional[bool]:
        return pulumi.get(self, "idcs_scim_compliant")

    @property
    @pulumi.getter(name="idcsSearchable")
    def idcs_searchable(self) -> Optional[bool]:
        return pulumi.get(self, "idcs_searchable")

    @property
    @pulumi.getter(name="idcsSensitive")
    def idcs_sensitive(self) -> Optional[str]:
        return pulumi.get(self, "idcs_sensitive")

    @property
    @pulumi.getter(name="idcsTargetAttributeName")
    def idcs_target_attribute_name(self) -> Optional[str]:
        return pulumi.get(self, "idcs_target_attribute_name")

    @property
    @pulumi.getter(name="idcsTargetAttributeNameToMigrateFrom")
    def idcs_target_attribute_name_to_migrate_from(self) -> Optional[str]:
        return pulumi.get(self, "idcs_target_attribute_name_to_migrate_from")

    @property
    @pulumi.getter(name="idcsTargetNormAttributeName")
    def idcs_target_norm_attribute_name(self) -> Optional[str]:
        return pulumi.get(self, "idcs_target_norm_attribute_name")

    @property
    @pulumi.getter(name="idcsTargetUniqueConstraintName")
    def idcs_target_unique_constraint_name(self) -> Optional[str]:
        return pulumi.get(self, "idcs_target_unique_constraint_name")

    @property
    @pulumi.getter(name="idcsToTargetMapper")
    def idcs_to_target_mapper(self) -> Optional[str]:
        return pulumi.get(self, "idcs_to_target_mapper")

    @property
    @pulumi.getter(name="idcsTrimStringValue")
    def idcs_trim_string_value(self) -> Optional[bool]:
        return pulumi.get(self, "idcs_trim_string_value")

    @property
    @pulumi.getter(name="idcsValidateReference")
    def idcs_validate_reference(self) -> Optional[bool]:
        return pulumi.get(self, "idcs_validate_reference")

    @property
    @pulumi.getter(name="idcsValuePersisted")
    def idcs_value_persisted(self) -> Optional[bool]:
        return pulumi.get(self, "idcs_value_persisted")

    @property
    @pulumi.getter
    def metas(self) -> Optional[Sequence['outputs.GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeMetaResult']]:
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter(name="multiValued")
    def multi_valued(self) -> Optional[bool]:
        return pulumi.get(self, "multi_valued")

    @property
    @pulumi.getter
    def mutability(self) -> Optional[str]:
        return pulumi.get(self, "mutability")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="referenceTypes")
    def reference_types(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "reference_types")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        return pulumi.get(self, "required")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def returned(self) -> Optional[str]:
        return pulumi.get(self, "returned")

    @property
    @pulumi.getter
    def schemas(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeTagResult']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> Optional[str]:
        return pulumi.get(self, "tenancy_ocid")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uniqueness(self) -> Optional[str]:
        return pulumi.get(self, "uniqueness")


@pulumi.output_type
class GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeMetaResult(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsSecurityQuestionIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsSecurityQuestionIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsSecurityQuestionMetaResult(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsSecurityQuestionQuestionTextResult(dict):
    def __init__(__self__, *,
                 default: Optional[bool] = None,
                 locale: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if locale is not None:
            pulumi.set(__self__, "locale", locale)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[bool]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def locale(self) -> Optional[str]:
        return pulumi.get(self, "locale")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsSecurityQuestionSettingIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsSecurityQuestionSettingIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsSecurityQuestionSettingMetaResult(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsSecurityQuestionSettingTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsSecurityQuestionSettingsSecurityQuestionSettingResult(dict):
    def __init__(__self__, *,
                 attribute_sets: Optional[Sequence[str]] = None,
                 attributes: Optional[str] = None,
                 authorization: Optional[str] = None,
                 compartment_ocid: Optional[str] = None,
                 delete_in_progress: Optional[bool] = None,
                 domain_ocid: Optional[str] = None,
                 external_id: Optional[str] = None,
                 id: Optional[str] = None,
                 idcs_created_bies: Optional[Sequence['outputs.GetDomainsSecurityQuestionSettingsSecurityQuestionSettingIdcsCreatedByResult']] = None,
                 idcs_endpoint: Optional[str] = None,
                 idcs_last_modified_bies: Optional[Sequence['outputs.GetDomainsSecurityQuestionSettingsSecurityQuestionSettingIdcsLastModifiedByResult']] = None,
                 idcs_last_upgraded_in_release: Optional[str] = None,
                 idcs_prevented_operations: Optional[Sequence[str]] = None,
                 max_field_length: Optional[int] = None,
                 metas: Optional[Sequence['outputs.GetDomainsSecurityQuestionSettingsSecurityQuestionSettingMetaResult']] = None,
                 min_answer_length: Optional[int] = None,
                 num_questions_to_ans: Optional[int] = None,
                 num_questions_to_setup: Optional[int] = None,
                 ocid: Optional[str] = None,
                 resource_type_schema_version: Optional[str] = None,
                 schemas: Optional[Sequence[str]] = None,
                 security_question_setting_id: Optional[str] = None,
                 tags: Optional[Sequence['outputs.GetDomainsSecurityQuestionSettingsSecurityQuestionSettingTagResult']] = None,
                 tenancy_ocid: Optional[str] = None):
        if attribute_sets is not None:
            pulumi.set(__self__, "attribute_sets", attribute_sets)
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)
        if authorization is not None:
            pulumi.set(__self__, "authorization", authorization)
        if compartment_ocid is not None:
            pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        if delete_in_progress is not None:
            pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        if domain_ocid is not None:
            pulumi.set(__self__, "domain_ocid", domain_ocid)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if idcs_created_bies is not None:
            pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        if idcs_endpoint is not None:
            pulumi.set(__self__, "idcs_endpoint", idcs_endpoint)
        if idcs_last_modified_bies is not None:
            pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        if idcs_last_upgraded_in_release is not None:
            pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        if idcs_prevented_operations is not None:
            pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        if max_field_length is not None:
            pulumi.set(__self__, "max_field_length", max_field_length)
        if metas is not None:
            pulumi.set(__self__, "metas", metas)
        if min_answer_length is not None:
            pulumi.set(__self__, "min_answer_length", min_answer_length)
        if num_questions_to_ans is not None:
            pulumi.set(__self__, "num_questions_to_ans", num_questions_to_ans)
        if num_questions_to_setup is not None:
            pulumi.set(__self__, "num_questions_to_setup", num_questions_to_setup)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if resource_type_schema_version is not None:
            pulumi.set(__self__, "resource_type_schema_version", resource_type_schema_version)
        if schemas is not None:
            pulumi.set(__self__, "schemas", schemas)
        if security_question_setting_id is not None:
            pulumi.set(__self__, "security_question_setting_id", security_question_setting_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tenancy_ocid is not None:
            pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)

    @property
    @pulumi.getter(name="attributeSets")
    def attribute_sets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "attribute_sets")

    @property
    @pulumi.getter
    def attributes(self) -> Optional[str]:
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter
    def authorization(self) -> Optional[str]:
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> Optional[str]:
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> Optional[bool]:
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> Optional[str]:
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[str]:
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Optional[Sequence['outputs.GetDomainsSecurityQuestionSettingsSecurityQuestionSettingIdcsCreatedByResult']]:
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "idcs_endpoint")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Optional[Sequence['outputs.GetDomainsSecurityQuestionSettingsSecurityQuestionSettingIdcsLastModifiedByResult']]:
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> Optional[str]:
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter(name="maxFieldLength")
    def max_field_length(self) -> Optional[int]:
        return pulumi.get(self, "max_field_length")

    @property
    @pulumi.getter
    def metas(self) -> Optional[Sequence['outputs.GetDomainsSecurityQuestionSettingsSecurityQuestionSettingMetaResult']]:
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter(name="minAnswerLength")
    def min_answer_length(self) -> Optional[int]:
        return pulumi.get(self, "min_answer_length")

    @property
    @pulumi.getter(name="numQuestionsToAns")
    def num_questions_to_ans(self) -> Optional[int]:
        return pulumi.get(self, "num_questions_to_ans")

    @property
    @pulumi.getter(name="numQuestionsToSetup")
    def num_questions_to_setup(self) -> Optional[int]:
        return pulumi.get(self, "num_questions_to_setup")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> Optional[str]:
        return pulumi.get(self, "resource_type_schema_version")

    @property
    @pulumi.getter
    def schemas(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter(name="securityQuestionSettingId")
    def security_question_setting_id(self) -> Optional[str]:
        return pulumi.get(self, "security_question_setting_id")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.GetDomainsSecurityQuestionSettingsSecurityQuestionSettingTagResult']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> Optional[str]:
        return pulumi.get(self, "tenancy_ocid")


@pulumi.output_type
class GetDomainsSecurityQuestionSettingsSecurityQuestionSettingIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsSecurityQuestionSettingsSecurityQuestionSettingIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsSecurityQuestionSettingsSecurityQuestionSettingMetaResult(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsSecurityQuestionSettingsSecurityQuestionSettingTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsSecurityQuestionTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsSecurityQuestionsSecurityQuestionResult(dict):
    def __init__(__self__, *,
                 active: Optional[bool] = None,
                 attribute_sets: Optional[Sequence[str]] = None,
                 attributes: Optional[str] = None,
                 authorization: Optional[str] = None,
                 compartment_ocid: Optional[str] = None,
                 delete_in_progress: Optional[bool] = None,
                 domain_ocid: Optional[str] = None,
                 external_id: Optional[str] = None,
                 id: Optional[str] = None,
                 idcs_created_bies: Optional[Sequence['outputs.GetDomainsSecurityQuestionsSecurityQuestionIdcsCreatedByResult']] = None,
                 idcs_endpoint: Optional[str] = None,
                 idcs_last_modified_bies: Optional[Sequence['outputs.GetDomainsSecurityQuestionsSecurityQuestionIdcsLastModifiedByResult']] = None,
                 idcs_last_upgraded_in_release: Optional[str] = None,
                 idcs_prevented_operations: Optional[Sequence[str]] = None,
                 metas: Optional[Sequence['outputs.GetDomainsSecurityQuestionsSecurityQuestionMetaResult']] = None,
                 ocid: Optional[str] = None,
                 question_texts: Optional[Sequence['outputs.GetDomainsSecurityQuestionsSecurityQuestionQuestionTextResult']] = None,
                 resource_type_schema_version: Optional[str] = None,
                 schemas: Optional[Sequence[str]] = None,
                 tags: Optional[Sequence['outputs.GetDomainsSecurityQuestionsSecurityQuestionTagResult']] = None,
                 tenancy_ocid: Optional[str] = None,
                 type: Optional[str] = None):
        if active is not None:
            pulumi.set(__self__, "active", active)
        if attribute_sets is not None:
            pulumi.set(__self__, "attribute_sets", attribute_sets)
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)
        if authorization is not None:
            pulumi.set(__self__, "authorization", authorization)
        if compartment_ocid is not None:
            pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        if delete_in_progress is not None:
            pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        if domain_ocid is not None:
            pulumi.set(__self__, "domain_ocid", domain_ocid)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if idcs_created_bies is not None:
            pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        if idcs_endpoint is not None:
            pulumi.set(__self__, "idcs_endpoint", idcs_endpoint)
        if idcs_last_modified_bies is not None:
            pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        if idcs_last_upgraded_in_release is not None:
            pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        if idcs_prevented_operations is not None:
            pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        if metas is not None:
            pulumi.set(__self__, "metas", metas)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if question_texts is not None:
            pulumi.set(__self__, "question_texts", question_texts)
        if resource_type_schema_version is not None:
            pulumi.set(__self__, "resource_type_schema_version", resource_type_schema_version)
        if schemas is not None:
            pulumi.set(__self__, "schemas", schemas)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tenancy_ocid is not None:
            pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def active(self) -> Optional[bool]:
        return pulumi.get(self, "active")

    @property
    @pulumi.getter(name="attributeSets")
    def attribute_sets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "attribute_sets")

    @property
    @pulumi.getter
    def attributes(self) -> Optional[str]:
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter
    def authorization(self) -> Optional[str]:
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> Optional[str]:
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> Optional[bool]:
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> Optional[str]:
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[str]:
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Optional[Sequence['outputs.GetDomainsSecurityQuestionsSecurityQuestionIdcsCreatedByResult']]:
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "idcs_endpoint")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Optional[Sequence['outputs.GetDomainsSecurityQuestionsSecurityQuestionIdcsLastModifiedByResult']]:
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> Optional[str]:
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter
    def metas(self) -> Optional[Sequence['outputs.GetDomainsSecurityQuestionsSecurityQuestionMetaResult']]:
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="questionTexts")
    def question_texts(self) -> Optional[Sequence['outputs.GetDomainsSecurityQuestionsSecurityQuestionQuestionTextResult']]:
        return pulumi.get(self, "question_texts")

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> Optional[str]:
        return pulumi.get(self, "resource_type_schema_version")

    @property
    @pulumi.getter
    def schemas(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.GetDomainsSecurityQuestionsSecurityQuestionTagResult']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> Optional[str]:
        return pulumi.get(self, "tenancy_ocid")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDomainsSecurityQuestionsSecurityQuestionIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsSecurityQuestionsSecurityQuestionIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsSecurityQuestionsSecurityQuestionMetaResult(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsSecurityQuestionsSecurityQuestionQuestionTextResult(dict):
    def __init__(__self__, *,
                 default: Optional[bool] = None,
                 locale: Optional[str] = None,
                 value: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if locale is not None:
            pulumi.set(__self__, "locale", locale)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[bool]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def locale(self) -> Optional[str]:
        return pulumi.get(self, "locale")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsSecurityQuestionsSecurityQuestionTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsSmtpCredentialIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsSmtpCredentialIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsSmtpCredentialMetaResult(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsSmtpCredentialTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsSmtpCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult(dict):
    def __init__(__self__, *,
                 allow_self_change: Optional[bool] = None):
        if allow_self_change is not None:
            pulumi.set(__self__, "allow_self_change", allow_self_change)

    @property
    @pulumi.getter(name="allowSelfChange")
    def allow_self_change(self) -> Optional[bool]:
        return pulumi.get(self, "allow_self_change")


@pulumi.output_type
class GetDomainsSmtpCredentialUserResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsSmtpCredentialsSmtpCredentialResult(dict):
    def __init__(__self__, *,
                 attribute_sets: Optional[Sequence[str]] = None,
                 attributes: Optional[str] = None,
                 authorization: Optional[str] = None,
                 compartment_ocid: Optional[str] = None,
                 delete_in_progress: Optional[bool] = None,
                 description: Optional[str] = None,
                 domain_ocid: Optional[str] = None,
                 expires_on: Optional[str] = None,
                 id: Optional[str] = None,
                 idcs_created_bies: Optional[Sequence['outputs.GetDomainsSmtpCredentialsSmtpCredentialIdcsCreatedByResult']] = None,
                 idcs_endpoint: Optional[str] = None,
                 idcs_last_modified_bies: Optional[Sequence['outputs.GetDomainsSmtpCredentialsSmtpCredentialIdcsLastModifiedByResult']] = None,
                 idcs_last_upgraded_in_release: Optional[str] = None,
                 idcs_prevented_operations: Optional[Sequence[str]] = None,
                 metas: Optional[Sequence['outputs.GetDomainsSmtpCredentialsSmtpCredentialMetaResult']] = None,
                 ocid: Optional[str] = None,
                 resource_type_schema_version: Optional[str] = None,
                 schemas: Optional[Sequence[str]] = None,
                 status: Optional[str] = None,
                 tags: Optional[Sequence['outputs.GetDomainsSmtpCredentialsSmtpCredentialTagResult']] = None,
                 tenancy_ocid: Optional[str] = None,
                 urnietfparamsscimschemasoracleidcsextensionself_change_users: Optional[Sequence['outputs.GetDomainsSmtpCredentialsSmtpCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult']] = None,
                 user_name: Optional[str] = None,
                 users: Optional[Sequence['outputs.GetDomainsSmtpCredentialsSmtpCredentialUserResult']] = None):
        if attribute_sets is not None:
            pulumi.set(__self__, "attribute_sets", attribute_sets)
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)
        if authorization is not None:
            pulumi.set(__self__, "authorization", authorization)
        if compartment_ocid is not None:
            pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        if delete_in_progress is not None:
            pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain_ocid is not None:
            pulumi.set(__self__, "domain_ocid", domain_ocid)
        if expires_on is not None:
            pulumi.set(__self__, "expires_on", expires_on)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if idcs_created_bies is not None:
            pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        if idcs_endpoint is not None:
            pulumi.set(__self__, "idcs_endpoint", idcs_endpoint)
        if idcs_last_modified_bies is not None:
            pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        if idcs_last_upgraded_in_release is not None:
            pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        if idcs_prevented_operations is not None:
            pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        if metas is not None:
            pulumi.set(__self__, "metas", metas)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if resource_type_schema_version is not None:
            pulumi.set(__self__, "resource_type_schema_version", resource_type_schema_version)
        if schemas is not None:
            pulumi.set(__self__, "schemas", schemas)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tenancy_ocid is not None:
            pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)
        if urnietfparamsscimschemasoracleidcsextensionself_change_users is not None:
            pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionself_change_users", urnietfparamsscimschemasoracleidcsextensionself_change_users)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="attributeSets")
    def attribute_sets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "attribute_sets")

    @property
    @pulumi.getter
    def attributes(self) -> Optional[str]:
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter
    def authorization(self) -> Optional[str]:
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> Optional[str]:
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> Optional[bool]:
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> Optional[str]:
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter(name="expiresOn")
    def expires_on(self) -> Optional[str]:
        return pulumi.get(self, "expires_on")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Optional[Sequence['outputs.GetDomainsSmtpCredentialsSmtpCredentialIdcsCreatedByResult']]:
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "idcs_endpoint")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Optional[Sequence['outputs.GetDomainsSmtpCredentialsSmtpCredentialIdcsLastModifiedByResult']]:
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> Optional[str]:
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter
    def metas(self) -> Optional[Sequence['outputs.GetDomainsSmtpCredentialsSmtpCredentialMetaResult']]:
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> Optional[str]:
        return pulumi.get(self, "resource_type_schema_version")

    @property
    @pulumi.getter
    def schemas(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.GetDomainsSmtpCredentialsSmtpCredentialTagResult']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> Optional[str]:
        return pulumi.get(self, "tenancy_ocid")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionselfChangeUsers")
    def urnietfparamsscimschemasoracleidcsextensionself_change_users(self) -> Optional[Sequence['outputs.GetDomainsSmtpCredentialsSmtpCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult']]:
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionself_change_users")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter
    def users(self) -> Optional[Sequence['outputs.GetDomainsSmtpCredentialsSmtpCredentialUserResult']]:
        return pulumi.get(self, "users")


@pulumi.output_type
class GetDomainsSmtpCredentialsSmtpCredentialIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsSmtpCredentialsSmtpCredentialIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsSmtpCredentialsSmtpCredentialMetaResult(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsSmtpCredentialsSmtpCredentialTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsSmtpCredentialsSmtpCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult(dict):
    def __init__(__self__, *,
                 allow_self_change: Optional[bool] = None):
        if allow_self_change is not None:
            pulumi.set(__self__, "allow_self_change", allow_self_change)

    @property
    @pulumi.getter(name="allowSelfChange")
    def allow_self_change(self) -> Optional[bool]:
        return pulumi.get(self, "allow_self_change")


@pulumi.output_type
class GetDomainsSmtpCredentialsSmtpCredentialUserResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserAddressResult(dict):
    def __init__(__self__, *,
                 country: Optional[str] = None,
                 formatted: Optional[str] = None,
                 locality: Optional[str] = None,
                 postal_code: Optional[str] = None,
                 primary: Optional[bool] = None,
                 region: Optional[str] = None,
                 street_address: Optional[str] = None,
                 type: Optional[str] = None):
        if country is not None:
            pulumi.set(__self__, "country", country)
        if formatted is not None:
            pulumi.set(__self__, "formatted", formatted)
        if locality is not None:
            pulumi.set(__self__, "locality", locality)
        if postal_code is not None:
            pulumi.set(__self__, "postal_code", postal_code)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if street_address is not None:
            pulumi.set(__self__, "street_address", street_address)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter
    def formatted(self) -> Optional[str]:
        return pulumi.get(self, "formatted")

    @property
    @pulumi.getter
    def locality(self) -> Optional[str]:
        return pulumi.get(self, "locality")

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> Optional[str]:
        return pulumi.get(self, "postal_code")

    @property
    @pulumi.getter
    def primary(self) -> Optional[bool]:
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="streetAddress")
    def street_address(self) -> Optional[str]:
        return pulumi.get(self, "street_address")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDomainsUserAttributesSettingAttributeSettingResult(dict):
    def __init__(__self__, *,
                 end_user_mutability: Optional[str] = None,
                 end_user_mutability_canonical_values: Optional[Sequence[str]] = None,
                 name: Optional[str] = None):
        if end_user_mutability is not None:
            pulumi.set(__self__, "end_user_mutability", end_user_mutability)
        if end_user_mutability_canonical_values is not None:
            pulumi.set(__self__, "end_user_mutability_canonical_values", end_user_mutability_canonical_values)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="endUserMutability")
    def end_user_mutability(self) -> Optional[str]:
        return pulumi.get(self, "end_user_mutability")

    @property
    @pulumi.getter(name="endUserMutabilityCanonicalValues")
    def end_user_mutability_canonical_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "end_user_mutability_canonical_values")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDomainsUserAttributesSettingIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserAttributesSettingIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserAttributesSettingMetaResult(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsUserAttributesSettingTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserAttributesSettingsUserAttributesSettingResult(dict):
    def __init__(__self__, *,
                 attribute_sets: Optional[Sequence[str]] = None,
                 attribute_settings: Optional[Sequence['outputs.GetDomainsUserAttributesSettingsUserAttributesSettingAttributeSettingResult']] = None,
                 attributes: Optional[str] = None,
                 authorization: Optional[str] = None,
                 compartment_ocid: Optional[str] = None,
                 delete_in_progress: Optional[bool] = None,
                 domain_ocid: Optional[str] = None,
                 id: Optional[str] = None,
                 idcs_created_bies: Optional[Sequence['outputs.GetDomainsUserAttributesSettingsUserAttributesSettingIdcsCreatedByResult']] = None,
                 idcs_endpoint: Optional[str] = None,
                 idcs_last_modified_bies: Optional[Sequence['outputs.GetDomainsUserAttributesSettingsUserAttributesSettingIdcsLastModifiedByResult']] = None,
                 idcs_last_upgraded_in_release: Optional[str] = None,
                 idcs_prevented_operations: Optional[Sequence[str]] = None,
                 metas: Optional[Sequence['outputs.GetDomainsUserAttributesSettingsUserAttributesSettingMetaResult']] = None,
                 ocid: Optional[str] = None,
                 resource_type_schema_version: Optional[str] = None,
                 schemas: Optional[Sequence[str]] = None,
                 tags: Optional[Sequence['outputs.GetDomainsUserAttributesSettingsUserAttributesSettingTagResult']] = None,
                 tenancy_ocid: Optional[str] = None,
                 user_attributes_setting_id: Optional[str] = None):
        if attribute_sets is not None:
            pulumi.set(__self__, "attribute_sets", attribute_sets)
        if attribute_settings is not None:
            pulumi.set(__self__, "attribute_settings", attribute_settings)
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)
        if authorization is not None:
            pulumi.set(__self__, "authorization", authorization)
        if compartment_ocid is not None:
            pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        if delete_in_progress is not None:
            pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        if domain_ocid is not None:
            pulumi.set(__self__, "domain_ocid", domain_ocid)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if idcs_created_bies is not None:
            pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        if idcs_endpoint is not None:
            pulumi.set(__self__, "idcs_endpoint", idcs_endpoint)
        if idcs_last_modified_bies is not None:
            pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        if idcs_last_upgraded_in_release is not None:
            pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        if idcs_prevented_operations is not None:
            pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        if metas is not None:
            pulumi.set(__self__, "metas", metas)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if resource_type_schema_version is not None:
            pulumi.set(__self__, "resource_type_schema_version", resource_type_schema_version)
        if schemas is not None:
            pulumi.set(__self__, "schemas", schemas)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tenancy_ocid is not None:
            pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)
        if user_attributes_setting_id is not None:
            pulumi.set(__self__, "user_attributes_setting_id", user_attributes_setting_id)

    @property
    @pulumi.getter(name="attributeSets")
    def attribute_sets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "attribute_sets")

    @property
    @pulumi.getter(name="attributeSettings")
    def attribute_settings(self) -> Optional[Sequence['outputs.GetDomainsUserAttributesSettingsUserAttributesSettingAttributeSettingResult']]:
        return pulumi.get(self, "attribute_settings")

    @property
    @pulumi.getter
    def attributes(self) -> Optional[str]:
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter
    def authorization(self) -> Optional[str]:
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> Optional[str]:
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> Optional[bool]:
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> Optional[str]:
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Optional[Sequence['outputs.GetDomainsUserAttributesSettingsUserAttributesSettingIdcsCreatedByResult']]:
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "idcs_endpoint")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Optional[Sequence['outputs.GetDomainsUserAttributesSettingsUserAttributesSettingIdcsLastModifiedByResult']]:
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> Optional[str]:
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter
    def metas(self) -> Optional[Sequence['outputs.GetDomainsUserAttributesSettingsUserAttributesSettingMetaResult']]:
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> Optional[str]:
        return pulumi.get(self, "resource_type_schema_version")

    @property
    @pulumi.getter
    def schemas(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.GetDomainsUserAttributesSettingsUserAttributesSettingTagResult']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> Optional[str]:
        return pulumi.get(self, "tenancy_ocid")

    @property
    @pulumi.getter(name="userAttributesSettingId")
    def user_attributes_setting_id(self) -> Optional[str]:
        return pulumi.get(self, "user_attributes_setting_id")


@pulumi.output_type
class GetDomainsUserAttributesSettingsUserAttributesSettingAttributeSettingResult(dict):
    def __init__(__self__, *,
                 end_user_mutability: Optional[str] = None,
                 end_user_mutability_canonical_values: Optional[Sequence[str]] = None,
                 name: Optional[str] = None):
        if end_user_mutability is not None:
            pulumi.set(__self__, "end_user_mutability", end_user_mutability)
        if end_user_mutability_canonical_values is not None:
            pulumi.set(__self__, "end_user_mutability_canonical_values", end_user_mutability_canonical_values)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="endUserMutability")
    def end_user_mutability(self) -> Optional[str]:
        return pulumi.get(self, "end_user_mutability")

    @property
    @pulumi.getter(name="endUserMutabilityCanonicalValues")
    def end_user_mutability_canonical_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "end_user_mutability_canonical_values")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDomainsUserAttributesSettingsUserAttributesSettingIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserAttributesSettingsUserAttributesSettingIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserAttributesSettingsUserAttributesSettingMetaResult(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsUserAttributesSettingsUserAttributesSettingTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserDbCredentialIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserDbCredentialIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserDbCredentialMetaResult(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsUserDbCredentialTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserDbCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult(dict):
    def __init__(__self__, *,
                 allow_self_change: Optional[bool] = None):
        if allow_self_change is not None:
            pulumi.set(__self__, "allow_self_change", allow_self_change)

    @property
    @pulumi.getter(name="allowSelfChange")
    def allow_self_change(self) -> Optional[bool]:
        return pulumi.get(self, "allow_self_change")


@pulumi.output_type
class GetDomainsUserDbCredentialUserResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserDbCredentialsUserDbCredentialResult(dict):
    def __init__(__self__, *,
                 attribute_sets: Optional[Sequence[str]] = None,
                 attributes: Optional[str] = None,
                 authorization: Optional[str] = None,
                 compartment_ocid: Optional[str] = None,
                 db_password: Optional[str] = None,
                 delete_in_progress: Optional[bool] = None,
                 description: Optional[str] = None,
                 domain_ocid: Optional[str] = None,
                 expired: Optional[bool] = None,
                 expires_on: Optional[str] = None,
                 id: Optional[str] = None,
                 idcs_created_bies: Optional[Sequence['outputs.GetDomainsUserDbCredentialsUserDbCredentialIdcsCreatedByResult']] = None,
                 idcs_endpoint: Optional[str] = None,
                 idcs_last_modified_bies: Optional[Sequence['outputs.GetDomainsUserDbCredentialsUserDbCredentialIdcsLastModifiedByResult']] = None,
                 idcs_last_upgraded_in_release: Optional[str] = None,
                 idcs_prevented_operations: Optional[Sequence[str]] = None,
                 last_set_date: Optional[str] = None,
                 metas: Optional[Sequence['outputs.GetDomainsUserDbCredentialsUserDbCredentialMetaResult']] = None,
                 mixed_db_password: Optional[str] = None,
                 mixed_salt: Optional[str] = None,
                 name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 resource_type_schema_version: Optional[str] = None,
                 salt: Optional[str] = None,
                 schemas: Optional[Sequence[str]] = None,
                 status: Optional[str] = None,
                 tags: Optional[Sequence['outputs.GetDomainsUserDbCredentialsUserDbCredentialTagResult']] = None,
                 tenancy_ocid: Optional[str] = None,
                 urnietfparamsscimschemasoracleidcsextensionself_change_users: Optional[Sequence['outputs.GetDomainsUserDbCredentialsUserDbCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult']] = None,
                 users: Optional[Sequence['outputs.GetDomainsUserDbCredentialsUserDbCredentialUserResult']] = None):
        if attribute_sets is not None:
            pulumi.set(__self__, "attribute_sets", attribute_sets)
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)
        if authorization is not None:
            pulumi.set(__self__, "authorization", authorization)
        if compartment_ocid is not None:
            pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        if db_password is not None:
            pulumi.set(__self__, "db_password", db_password)
        if delete_in_progress is not None:
            pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain_ocid is not None:
            pulumi.set(__self__, "domain_ocid", domain_ocid)
        if expired is not None:
            pulumi.set(__self__, "expired", expired)
        if expires_on is not None:
            pulumi.set(__self__, "expires_on", expires_on)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if idcs_created_bies is not None:
            pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        if idcs_endpoint is not None:
            pulumi.set(__self__, "idcs_endpoint", idcs_endpoint)
        if idcs_last_modified_bies is not None:
            pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        if idcs_last_upgraded_in_release is not None:
            pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        if idcs_prevented_operations is not None:
            pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        if last_set_date is not None:
            pulumi.set(__self__, "last_set_date", last_set_date)
        if metas is not None:
            pulumi.set(__self__, "metas", metas)
        if mixed_db_password is not None:
            pulumi.set(__self__, "mixed_db_password", mixed_db_password)
        if mixed_salt is not None:
            pulumi.set(__self__, "mixed_salt", mixed_salt)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if resource_type_schema_version is not None:
            pulumi.set(__self__, "resource_type_schema_version", resource_type_schema_version)
        if salt is not None:
            pulumi.set(__self__, "salt", salt)
        if schemas is not None:
            pulumi.set(__self__, "schemas", schemas)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tenancy_ocid is not None:
            pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)
        if urnietfparamsscimschemasoracleidcsextensionself_change_users is not None:
            pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionself_change_users", urnietfparamsscimschemasoracleidcsextensionself_change_users)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="attributeSets")
    def attribute_sets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "attribute_sets")

    @property
    @pulumi.getter
    def attributes(self) -> Optional[str]:
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter
    def authorization(self) -> Optional[str]:
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> Optional[str]:
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="dbPassword")
    def db_password(self) -> Optional[str]:
        return pulumi.get(self, "db_password")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> Optional[bool]:
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> Optional[str]:
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter
    def expired(self) -> Optional[bool]:
        return pulumi.get(self, "expired")

    @property
    @pulumi.getter(name="expiresOn")
    def expires_on(self) -> Optional[str]:
        return pulumi.get(self, "expires_on")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Optional[Sequence['outputs.GetDomainsUserDbCredentialsUserDbCredentialIdcsCreatedByResult']]:
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "idcs_endpoint")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Optional[Sequence['outputs.GetDomainsUserDbCredentialsUserDbCredentialIdcsLastModifiedByResult']]:
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> Optional[str]:
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter(name="lastSetDate")
    def last_set_date(self) -> Optional[str]:
        return pulumi.get(self, "last_set_date")

    @property
    @pulumi.getter
    def metas(self) -> Optional[Sequence['outputs.GetDomainsUserDbCredentialsUserDbCredentialMetaResult']]:
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter(name="mixedDbPassword")
    def mixed_db_password(self) -> Optional[str]:
        return pulumi.get(self, "mixed_db_password")

    @property
    @pulumi.getter(name="mixedSalt")
    def mixed_salt(self) -> Optional[str]:
        return pulumi.get(self, "mixed_salt")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> Optional[str]:
        return pulumi.get(self, "resource_type_schema_version")

    @property
    @pulumi.getter
    def salt(self) -> Optional[str]:
        return pulumi.get(self, "salt")

    @property
    @pulumi.getter
    def schemas(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.GetDomainsUserDbCredentialsUserDbCredentialTagResult']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> Optional[str]:
        return pulumi.get(self, "tenancy_ocid")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionselfChangeUsers")
    def urnietfparamsscimschemasoracleidcsextensionself_change_users(self) -> Optional[Sequence['outputs.GetDomainsUserDbCredentialsUserDbCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult']]:
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionself_change_users")

    @property
    @pulumi.getter
    def users(self) -> Optional[Sequence['outputs.GetDomainsUserDbCredentialsUserDbCredentialUserResult']]:
        return pulumi.get(self, "users")


@pulumi.output_type
class GetDomainsUserDbCredentialsUserDbCredentialIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserDbCredentialsUserDbCredentialIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserDbCredentialsUserDbCredentialMetaResult(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsUserDbCredentialsUserDbCredentialTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserDbCredentialsUserDbCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult(dict):
    def __init__(__self__, *,
                 allow_self_change: Optional[bool] = None):
        if allow_self_change is not None:
            pulumi.set(__self__, "allow_self_change", allow_self_change)

    @property
    @pulumi.getter(name="allowSelfChange")
    def allow_self_change(self) -> Optional[bool]:
        return pulumi.get(self, "allow_self_change")


@pulumi.output_type
class GetDomainsUserDbCredentialsUserDbCredentialUserResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserEmailResult(dict):
    def __init__(__self__, *,
                 pending_verification_data: Optional[str] = None,
                 primary: Optional[bool] = None,
                 secondary: Optional[bool] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None,
                 verified: Optional[bool] = None):
        if pending_verification_data is not None:
            pulumi.set(__self__, "pending_verification_data", pending_verification_data)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if secondary is not None:
            pulumi.set(__self__, "secondary", secondary)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if verified is not None:
            pulumi.set(__self__, "verified", verified)

    @property
    @pulumi.getter(name="pendingVerificationData")
    def pending_verification_data(self) -> Optional[str]:
        return pulumi.get(self, "pending_verification_data")

    @property
    @pulumi.getter
    def primary(self) -> Optional[bool]:
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def secondary(self) -> Optional[bool]:
        return pulumi.get(self, "secondary")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def verified(self) -> Optional[bool]:
        return pulumi.get(self, "verified")


@pulumi.output_type
class GetDomainsUserEntitlementResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 primary: Optional[bool] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def primary(self) -> Optional[bool]:
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserGroupResult(dict):
    def __init__(__self__, *,
                 date_added: Optional[str] = None,
                 display: Optional[str] = None,
                 external_id: Optional[str] = None,
                 membership_ocid: Optional[str] = None,
                 non_unique_display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if date_added is not None:
            pulumi.set(__self__, "date_added", date_added)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if membership_ocid is not None:
            pulumi.set(__self__, "membership_ocid", membership_ocid)
        if non_unique_display is not None:
            pulumi.set(__self__, "non_unique_display", non_unique_display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="dateAdded")
    def date_added(self) -> Optional[str]:
        return pulumi.get(self, "date_added")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[str]:
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter(name="membershipOcid")
    def membership_ocid(self) -> Optional[str]:
        return pulumi.get(self, "membership_ocid")

    @property
    @pulumi.getter(name="nonUniqueDisplay")
    def non_unique_display(self) -> Optional[str]:
        return pulumi.get(self, "non_unique_display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserImResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 primary: Optional[bool] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def primary(self) -> Optional[bool]:
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserMetaResult(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsUserNameResult(dict):
    def __init__(__self__, *,
                 family_name: Optional[str] = None,
                 formatted: Optional[str] = None,
                 given_name: Optional[str] = None,
                 honorific_prefix: Optional[str] = None,
                 honorific_suffix: Optional[str] = None,
                 middle_name: Optional[str] = None):
        if family_name is not None:
            pulumi.set(__self__, "family_name", family_name)
        if formatted is not None:
            pulumi.set(__self__, "formatted", formatted)
        if given_name is not None:
            pulumi.set(__self__, "given_name", given_name)
        if honorific_prefix is not None:
            pulumi.set(__self__, "honorific_prefix", honorific_prefix)
        if honorific_suffix is not None:
            pulumi.set(__self__, "honorific_suffix", honorific_suffix)
        if middle_name is not None:
            pulumi.set(__self__, "middle_name", middle_name)

    @property
    @pulumi.getter(name="familyName")
    def family_name(self) -> Optional[str]:
        return pulumi.get(self, "family_name")

    @property
    @pulumi.getter
    def formatted(self) -> Optional[str]:
        return pulumi.get(self, "formatted")

    @property
    @pulumi.getter(name="givenName")
    def given_name(self) -> Optional[str]:
        return pulumi.get(self, "given_name")

    @property
    @pulumi.getter(name="honorificPrefix")
    def honorific_prefix(self) -> Optional[str]:
        return pulumi.get(self, "honorific_prefix")

    @property
    @pulumi.getter(name="honorificSuffix")
    def honorific_suffix(self) -> Optional[str]:
        return pulumi.get(self, "honorific_suffix")

    @property
    @pulumi.getter(name="middleName")
    def middle_name(self) -> Optional[str]:
        return pulumi.get(self, "middle_name")


@pulumi.output_type
class GetDomainsUserPhoneNumberResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 primary: Optional[bool] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None,
                 verified: Optional[bool] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if verified is not None:
            pulumi.set(__self__, "verified", verified)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def primary(self) -> Optional[bool]:
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def verified(self) -> Optional[bool]:
        return pulumi.get(self, "verified")


@pulumi.output_type
class GetDomainsUserPhotoResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 primary: Optional[bool] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def primary(self) -> Optional[bool]:
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserRoleResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 primary: Optional[bool] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def primary(self) -> Optional[bool]:
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasextensionenterprise20userResult(dict):
    def __init__(__self__, *,
                 cost_center: Optional[str] = None,
                 department: Optional[str] = None,
                 division: Optional[str] = None,
                 employee_number: Optional[str] = None,
                 managers: Optional[Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasextensionenterprise20userManagerResult']] = None,
                 organization: Optional[str] = None):
        if cost_center is not None:
            pulumi.set(__self__, "cost_center", cost_center)
        if department is not None:
            pulumi.set(__self__, "department", department)
        if division is not None:
            pulumi.set(__self__, "division", division)
        if employee_number is not None:
            pulumi.set(__self__, "employee_number", employee_number)
        if managers is not None:
            pulumi.set(__self__, "managers", managers)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)

    @property
    @pulumi.getter(name="costCenter")
    def cost_center(self) -> Optional[str]:
        return pulumi.get(self, "cost_center")

    @property
    @pulumi.getter
    def department(self) -> Optional[str]:
        return pulumi.get(self, "department")

    @property
    @pulumi.getter
    def division(self) -> Optional[str]:
        return pulumi.get(self, "division")

    @property
    @pulumi.getter(name="employeeNumber")
    def employee_number(self) -> Optional[str]:
        return pulumi.get(self, "employee_number")

    @property
    @pulumi.getter
    def managers(self) -> Optional[Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasextensionenterprise20userManagerResult']]:
        return pulumi.get(self, "managers")

    @property
    @pulumi.getter
    def organization(self) -> Optional[str]:
        return pulumi.get(self, "organization")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasextensionenterprise20userManagerResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionOciTagResult(dict):
    def __init__(__self__, *,
                 defined_tags: Optional[Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTagResult']] = None,
                 freeform_tags: Optional[Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTagResult']] = None,
                 tag_slug: Optional[str] = None):
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if tag_slug is not None:
            pulumi.set(__self__, "tag_slug", tag_slug)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTagResult']]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTagResult']]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="tagSlug")
    def tag_slug(self) -> Optional[str]:
        return pulumi.get(self, "tag_slug")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 namespace: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionadaptiveUserResult(dict):
    def __init__(__self__, *,
                 risk_level: Optional[str] = None,
                 risk_scores: Optional[Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionadaptiveUserRiskScoreResult']] = None):
        if risk_level is not None:
            pulumi.set(__self__, "risk_level", risk_level)
        if risk_scores is not None:
            pulumi.set(__self__, "risk_scores", risk_scores)

    @property
    @pulumi.getter(name="riskLevel")
    def risk_level(self) -> Optional[str]:
        return pulumi.get(self, "risk_level")

    @property
    @pulumi.getter(name="riskScores")
    def risk_scores(self) -> Optional[Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionadaptiveUserRiskScoreResult']]:
        return pulumi.get(self, "risk_scores")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionadaptiveUserRiskScoreResult(dict):
    def __init__(__self__, *,
                 last_update_timestamp: Optional[str] = None,
                 ref: Optional[str] = None,
                 risk_level: Optional[str] = None,
                 score: Optional[int] = None,
                 source: Optional[str] = None,
                 status: Optional[str] = None,
                 value: Optional[str] = None):
        if last_update_timestamp is not None:
            pulumi.set(__self__, "last_update_timestamp", last_update_timestamp)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if risk_level is not None:
            pulumi.set(__self__, "risk_level", risk_level)
        if score is not None:
            pulumi.set(__self__, "score", score)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="lastUpdateTimestamp")
    def last_update_timestamp(self) -> Optional[str]:
        return pulumi.get(self, "last_update_timestamp")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="riskLevel")
    def risk_level(self) -> Optional[str]:
        return pulumi.get(self, "risk_level")

    @property
    @pulumi.getter
    def score(self) -> Optional[int]:
        return pulumi.get(self, "score")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensioncapabilitiesUserResult(dict):
    def __init__(__self__, *,
                 can_use_api_keys: Optional[bool] = None,
                 can_use_auth_tokens: Optional[bool] = None,
                 can_use_console: Optional[bool] = None,
                 can_use_console_password: Optional[bool] = None,
                 can_use_customer_secret_keys: Optional[bool] = None,
                 can_use_db_credentials: Optional[bool] = None,
                 can_use_oauth2client_credentials: Optional[bool] = None,
                 can_use_smtp_credentials: Optional[bool] = None):
        if can_use_api_keys is not None:
            pulumi.set(__self__, "can_use_api_keys", can_use_api_keys)
        if can_use_auth_tokens is not None:
            pulumi.set(__self__, "can_use_auth_tokens", can_use_auth_tokens)
        if can_use_console is not None:
            pulumi.set(__self__, "can_use_console", can_use_console)
        if can_use_console_password is not None:
            pulumi.set(__self__, "can_use_console_password", can_use_console_password)
        if can_use_customer_secret_keys is not None:
            pulumi.set(__self__, "can_use_customer_secret_keys", can_use_customer_secret_keys)
        if can_use_db_credentials is not None:
            pulumi.set(__self__, "can_use_db_credentials", can_use_db_credentials)
        if can_use_oauth2client_credentials is not None:
            pulumi.set(__self__, "can_use_oauth2client_credentials", can_use_oauth2client_credentials)
        if can_use_smtp_credentials is not None:
            pulumi.set(__self__, "can_use_smtp_credentials", can_use_smtp_credentials)

    @property
    @pulumi.getter(name="canUseApiKeys")
    def can_use_api_keys(self) -> Optional[bool]:
        return pulumi.get(self, "can_use_api_keys")

    @property
    @pulumi.getter(name="canUseAuthTokens")
    def can_use_auth_tokens(self) -> Optional[bool]:
        return pulumi.get(self, "can_use_auth_tokens")

    @property
    @pulumi.getter(name="canUseConsole")
    def can_use_console(self) -> Optional[bool]:
        return pulumi.get(self, "can_use_console")

    @property
    @pulumi.getter(name="canUseConsolePassword")
    def can_use_console_password(self) -> Optional[bool]:
        return pulumi.get(self, "can_use_console_password")

    @property
    @pulumi.getter(name="canUseCustomerSecretKeys")
    def can_use_customer_secret_keys(self) -> Optional[bool]:
        return pulumi.get(self, "can_use_customer_secret_keys")

    @property
    @pulumi.getter(name="canUseDbCredentials")
    def can_use_db_credentials(self) -> Optional[bool]:
        return pulumi.get(self, "can_use_db_credentials")

    @property
    @pulumi.getter(name="canUseOauth2clientCredentials")
    def can_use_oauth2client_credentials(self) -> Optional[bool]:
        return pulumi.get(self, "can_use_oauth2client_credentials")

    @property
    @pulumi.getter(name="canUseSmtpCredentials")
    def can_use_smtp_credentials(self) -> Optional[bool]:
        return pulumi.get(self, "can_use_smtp_credentials")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensiondbCredentialsUserResult(dict):
    def __init__(__self__, *,
                 db_login_attempts: Optional[int] = None,
                 db_user_name: Optional[str] = None):
        if db_login_attempts is not None:
            pulumi.set(__self__, "db_login_attempts", db_login_attempts)
        if db_user_name is not None:
            pulumi.set(__self__, "db_user_name", db_user_name)

    @property
    @pulumi.getter(name="dbLoginAttempts")
    def db_login_attempts(self) -> Optional[int]:
        return pulumi.get(self, "db_login_attempts")

    @property
    @pulumi.getter(name="dbUserName")
    def db_user_name(self) -> Optional[str]:
        return pulumi.get(self, "db_user_name")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensiondbUserUserResult(dict):
    def __init__(__self__, *,
                 db_global_roles: Optional[Sequence[str]] = None,
                 domain_level_schema: Optional[str] = None,
                 instance_level_schema: Optional[str] = None,
                 is_db_user: Optional[bool] = None,
                 password_verifiers: Optional[Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensiondbUserUserPasswordVerifierResult']] = None):
        if db_global_roles is not None:
            pulumi.set(__self__, "db_global_roles", db_global_roles)
        if domain_level_schema is not None:
            pulumi.set(__self__, "domain_level_schema", domain_level_schema)
        if instance_level_schema is not None:
            pulumi.set(__self__, "instance_level_schema", instance_level_schema)
        if is_db_user is not None:
            pulumi.set(__self__, "is_db_user", is_db_user)
        if password_verifiers is not None:
            pulumi.set(__self__, "password_verifiers", password_verifiers)

    @property
    @pulumi.getter(name="dbGlobalRoles")
    def db_global_roles(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "db_global_roles")

    @property
    @pulumi.getter(name="domainLevelSchema")
    def domain_level_schema(self) -> Optional[str]:
        return pulumi.get(self, "domain_level_schema")

    @property
    @pulumi.getter(name="instanceLevelSchema")
    def instance_level_schema(self) -> Optional[str]:
        return pulumi.get(self, "instance_level_schema")

    @property
    @pulumi.getter(name="isDbUser")
    def is_db_user(self) -> Optional[bool]:
        return pulumi.get(self, "is_db_user")

    @property
    @pulumi.getter(name="passwordVerifiers")
    def password_verifiers(self) -> Optional[Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensiondbUserUserPasswordVerifierResult']]:
        return pulumi.get(self, "password_verifiers")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensiondbUserUserPasswordVerifierResult(dict):
    def __init__(__self__, *,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionkerberosUserUserResult(dict):
    def __init__(__self__, *,
                 realm_users: Optional[Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionkerberosUserUserRealmUserResult']] = None):
        if realm_users is not None:
            pulumi.set(__self__, "realm_users", realm_users)

    @property
    @pulumi.getter(name="realmUsers")
    def realm_users(self) -> Optional[Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionkerberosUserUserRealmUserResult']]:
        return pulumi.get(self, "realm_users")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionkerberosUserUserRealmUserResult(dict):
    def __init__(__self__, *,
                 principal_name: Optional[str] = None,
                 realm_name: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if principal_name is not None:
            pulumi.set(__self__, "principal_name", principal_name)
        if realm_name is not None:
            pulumi.set(__self__, "realm_name", realm_name)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="principalName")
    def principal_name(self) -> Optional[str]:
        return pulumi.get(self, "principal_name")

    @property
    @pulumi.getter(name="realmName")
    def realm_name(self) -> Optional[str]:
        return pulumi.get(self, "realm_name")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserResult(dict):
    def __init__(__self__, *,
                 bypass_codes: Optional[Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserBypassCodeResult']] = None,
                 devices: Optional[Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserDeviceResult']] = None,
                 login_attempts: Optional[int] = None,
                 mfa_enabled_on: Optional[str] = None,
                 mfa_ignored_apps: Optional[Sequence[str]] = None,
                 mfa_status: Optional[str] = None,
                 preferred_authentication_factor: Optional[str] = None,
                 preferred_authentication_method: Optional[str] = None,
                 preferred_devices: Optional[Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserPreferredDeviceResult']] = None,
                 preferred_third_party_vendor: Optional[str] = None,
                 trusted_user_agents: Optional[Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserTrustedUserAgentResult']] = None):
        if bypass_codes is not None:
            pulumi.set(__self__, "bypass_codes", bypass_codes)
        if devices is not None:
            pulumi.set(__self__, "devices", devices)
        if login_attempts is not None:
            pulumi.set(__self__, "login_attempts", login_attempts)
        if mfa_enabled_on is not None:
            pulumi.set(__self__, "mfa_enabled_on", mfa_enabled_on)
        if mfa_ignored_apps is not None:
            pulumi.set(__self__, "mfa_ignored_apps", mfa_ignored_apps)
        if mfa_status is not None:
            pulumi.set(__self__, "mfa_status", mfa_status)
        if preferred_authentication_factor is not None:
            pulumi.set(__self__, "preferred_authentication_factor", preferred_authentication_factor)
        if preferred_authentication_method is not None:
            pulumi.set(__self__, "preferred_authentication_method", preferred_authentication_method)
        if preferred_devices is not None:
            pulumi.set(__self__, "preferred_devices", preferred_devices)
        if preferred_third_party_vendor is not None:
            pulumi.set(__self__, "preferred_third_party_vendor", preferred_third_party_vendor)
        if trusted_user_agents is not None:
            pulumi.set(__self__, "trusted_user_agents", trusted_user_agents)

    @property
    @pulumi.getter(name="bypassCodes")
    def bypass_codes(self) -> Optional[Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserBypassCodeResult']]:
        return pulumi.get(self, "bypass_codes")

    @property
    @pulumi.getter
    def devices(self) -> Optional[Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserDeviceResult']]:
        return pulumi.get(self, "devices")

    @property
    @pulumi.getter(name="loginAttempts")
    def login_attempts(self) -> Optional[int]:
        return pulumi.get(self, "login_attempts")

    @property
    @pulumi.getter(name="mfaEnabledOn")
    def mfa_enabled_on(self) -> Optional[str]:
        return pulumi.get(self, "mfa_enabled_on")

    @property
    @pulumi.getter(name="mfaIgnoredApps")
    def mfa_ignored_apps(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "mfa_ignored_apps")

    @property
    @pulumi.getter(name="mfaStatus")
    def mfa_status(self) -> Optional[str]:
        return pulumi.get(self, "mfa_status")

    @property
    @pulumi.getter(name="preferredAuthenticationFactor")
    def preferred_authentication_factor(self) -> Optional[str]:
        return pulumi.get(self, "preferred_authentication_factor")

    @property
    @pulumi.getter(name="preferredAuthenticationMethod")
    def preferred_authentication_method(self) -> Optional[str]:
        return pulumi.get(self, "preferred_authentication_method")

    @property
    @pulumi.getter(name="preferredDevices")
    def preferred_devices(self) -> Optional[Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserPreferredDeviceResult']]:
        return pulumi.get(self, "preferred_devices")

    @property
    @pulumi.getter(name="preferredThirdPartyVendor")
    def preferred_third_party_vendor(self) -> Optional[str]:
        return pulumi.get(self, "preferred_third_party_vendor")

    @property
    @pulumi.getter(name="trustedUserAgents")
    def trusted_user_agents(self) -> Optional[Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserTrustedUserAgentResult']]:
        return pulumi.get(self, "trusted_user_agents")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserBypassCodeResult(dict):
    def __init__(__self__, *,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserDeviceResult(dict):
    def __init__(__self__, *,
                 authentication_method: Optional[str] = None,
                 display: Optional[str] = None,
                 factor_status: Optional[str] = None,
                 factor_type: Optional[str] = None,
                 last_sync_time: Optional[str] = None,
                 ref: Optional[str] = None,
                 status: Optional[str] = None,
                 third_party_vendor_name: Optional[str] = None,
                 value: Optional[str] = None):
        if authentication_method is not None:
            pulumi.set(__self__, "authentication_method", authentication_method)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if factor_status is not None:
            pulumi.set(__self__, "factor_status", factor_status)
        if factor_type is not None:
            pulumi.set(__self__, "factor_type", factor_type)
        if last_sync_time is not None:
            pulumi.set(__self__, "last_sync_time", last_sync_time)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if third_party_vendor_name is not None:
            pulumi.set(__self__, "third_party_vendor_name", third_party_vendor_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="authenticationMethod")
    def authentication_method(self) -> Optional[str]:
        return pulumi.get(self, "authentication_method")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter(name="factorStatus")
    def factor_status(self) -> Optional[str]:
        return pulumi.get(self, "factor_status")

    @property
    @pulumi.getter(name="factorType")
    def factor_type(self) -> Optional[str]:
        return pulumi.get(self, "factor_type")

    @property
    @pulumi.getter(name="lastSyncTime")
    def last_sync_time(self) -> Optional[str]:
        return pulumi.get(self, "last_sync_time")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="thirdPartyVendorName")
    def third_party_vendor_name(self) -> Optional[str]:
        return pulumi.get(self, "third_party_vendor_name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserPreferredDeviceResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserTrustedUserAgentResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserResult(dict):
    def __init__(__self__, *,
                 applicable_password_policies: Optional[Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserApplicablePasswordPolicyResult']] = None,
                 cant_change: Optional[bool] = None,
                 cant_expire: Optional[bool] = None,
                 expired: Optional[bool] = None,
                 last_failed_validation_date: Optional[str] = None,
                 last_successful_set_date: Optional[str] = None,
                 last_successful_validation_date: Optional[str] = None,
                 must_change: Optional[bool] = None):
        if applicable_password_policies is not None:
            pulumi.set(__self__, "applicable_password_policies", applicable_password_policies)
        if cant_change is not None:
            pulumi.set(__self__, "cant_change", cant_change)
        if cant_expire is not None:
            pulumi.set(__self__, "cant_expire", cant_expire)
        if expired is not None:
            pulumi.set(__self__, "expired", expired)
        if last_failed_validation_date is not None:
            pulumi.set(__self__, "last_failed_validation_date", last_failed_validation_date)
        if last_successful_set_date is not None:
            pulumi.set(__self__, "last_successful_set_date", last_successful_set_date)
        if last_successful_validation_date is not None:
            pulumi.set(__self__, "last_successful_validation_date", last_successful_validation_date)
        if must_change is not None:
            pulumi.set(__self__, "must_change", must_change)

    @property
    @pulumi.getter(name="applicablePasswordPolicies")
    def applicable_password_policies(self) -> Optional[Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserApplicablePasswordPolicyResult']]:
        return pulumi.get(self, "applicable_password_policies")

    @property
    @pulumi.getter(name="cantChange")
    def cant_change(self) -> Optional[bool]:
        return pulumi.get(self, "cant_change")

    @property
    @pulumi.getter(name="cantExpire")
    def cant_expire(self) -> Optional[bool]:
        return pulumi.get(self, "cant_expire")

    @property
    @pulumi.getter
    def expired(self) -> Optional[bool]:
        return pulumi.get(self, "expired")

    @property
    @pulumi.getter(name="lastFailedValidationDate")
    def last_failed_validation_date(self) -> Optional[str]:
        return pulumi.get(self, "last_failed_validation_date")

    @property
    @pulumi.getter(name="lastSuccessfulSetDate")
    def last_successful_set_date(self) -> Optional[str]:
        return pulumi.get(self, "last_successful_set_date")

    @property
    @pulumi.getter(name="lastSuccessfulValidationDate")
    def last_successful_validation_date(self) -> Optional[str]:
        return pulumi.get(self, "last_successful_validation_date")

    @property
    @pulumi.getter(name="mustChange")
    def must_change(self) -> Optional[bool]:
        return pulumi.get(self, "must_change")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserApplicablePasswordPolicyResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 priority: Optional[int] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordlessUserResult(dict):
    def __init__(__self__, *,
                 factor_identifiers: Optional[Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordlessUserFactorIdentifierResult']] = None,
                 factor_method: Optional[str] = None,
                 factor_type: Optional[str] = None):
        if factor_identifiers is not None:
            pulumi.set(__self__, "factor_identifiers", factor_identifiers)
        if factor_method is not None:
            pulumi.set(__self__, "factor_method", factor_method)
        if factor_type is not None:
            pulumi.set(__self__, "factor_type", factor_type)

    @property
    @pulumi.getter(name="factorIdentifiers")
    def factor_identifiers(self) -> Optional[Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordlessUserFactorIdentifierResult']]:
        return pulumi.get(self, "factor_identifiers")

    @property
    @pulumi.getter(name="factorMethod")
    def factor_method(self) -> Optional[str]:
        return pulumi.get(self, "factor_method")

    @property
    @pulumi.getter(name="factorType")
    def factor_type(self) -> Optional[str]:
        return pulumi.get(self, "factor_type")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordlessUserFactorIdentifierResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionposixUserResult(dict):
    def __init__(__self__, *,
                 gecos: Optional[str] = None,
                 gid_number: Optional[int] = None,
                 home_directory: Optional[str] = None,
                 login_shell: Optional[str] = None,
                 uid_number: Optional[int] = None):
        if gecos is not None:
            pulumi.set(__self__, "gecos", gecos)
        if gid_number is not None:
            pulumi.set(__self__, "gid_number", gid_number)
        if home_directory is not None:
            pulumi.set(__self__, "home_directory", home_directory)
        if login_shell is not None:
            pulumi.set(__self__, "login_shell", login_shell)
        if uid_number is not None:
            pulumi.set(__self__, "uid_number", uid_number)

    @property
    @pulumi.getter
    def gecos(self) -> Optional[str]:
        return pulumi.get(self, "gecos")

    @property
    @pulumi.getter(name="gidNumber")
    def gid_number(self) -> Optional[int]:
        return pulumi.get(self, "gid_number")

    @property
    @pulumi.getter(name="homeDirectory")
    def home_directory(self) -> Optional[str]:
        return pulumi.get(self, "home_directory")

    @property
    @pulumi.getter(name="loginShell")
    def login_shell(self) -> Optional[str]:
        return pulumi.get(self, "login_shell")

    @property
    @pulumi.getter(name="uidNumber")
    def uid_number(self) -> Optional[int]:
        return pulumi.get(self, "uid_number")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUserResult(dict):
    def __init__(__self__, *,
                 sec_questions: Optional[Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUserSecQuestionResult']] = None):
        if sec_questions is not None:
            pulumi.set(__self__, "sec_questions", sec_questions)

    @property
    @pulumi.getter(name="secQuestions")
    def sec_questions(self) -> Optional[Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUserSecQuestionResult']]:
        return pulumi.get(self, "sec_questions")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUserSecQuestionResult(dict):
    def __init__(__self__, *,
                 answer: Optional[str] = None,
                 hint_text: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if answer is not None:
            pulumi.set(__self__, "answer", answer)
        if hint_text is not None:
            pulumi.set(__self__, "hint_text", hint_text)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def answer(self) -> Optional[str]:
        return pulumi.get(self, "answer")

    @property
    @pulumi.getter(name="hintText")
    def hint_text(self) -> Optional[str]:
        return pulumi.get(self, "hint_text")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult(dict):
    def __init__(__self__, *,
                 allow_self_change: Optional[bool] = None):
        if allow_self_change is not None:
            pulumi.set(__self__, "allow_self_change", allow_self_change)

    @property
    @pulumi.getter(name="allowSelfChange")
    def allow_self_change(self) -> Optional[bool]:
        return pulumi.get(self, "allow_self_change")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionselfRegistrationUserResult(dict):
    def __init__(__self__, *,
                 consent_granted: Optional[bool] = None,
                 self_registration_profiles: Optional[Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionselfRegistrationUserSelfRegistrationProfileResult']] = None,
                 user_token: Optional[str] = None):
        if consent_granted is not None:
            pulumi.set(__self__, "consent_granted", consent_granted)
        if self_registration_profiles is not None:
            pulumi.set(__self__, "self_registration_profiles", self_registration_profiles)
        if user_token is not None:
            pulumi.set(__self__, "user_token", user_token)

    @property
    @pulumi.getter(name="consentGranted")
    def consent_granted(self) -> Optional[bool]:
        return pulumi.get(self, "consent_granted")

    @property
    @pulumi.getter(name="selfRegistrationProfiles")
    def self_registration_profiles(self) -> Optional[Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionselfRegistrationUserSelfRegistrationProfileResult']]:
        return pulumi.get(self, "self_registration_profiles")

    @property
    @pulumi.getter(name="userToken")
    def user_token(self) -> Optional[str]:
        return pulumi.get(self, "user_token")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionselfRegistrationUserSelfRegistrationProfileResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionsffUserResult(dict):
    def __init__(__self__, *,
                 sff_auth_keys: Optional[str] = None):
        if sff_auth_keys is not None:
            pulumi.set(__self__, "sff_auth_keys", sff_auth_keys)

    @property
    @pulumi.getter(name="sffAuthKeys")
    def sff_auth_keys(self) -> Optional[str]:
        return pulumi.get(self, "sff_auth_keys")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionsocialAccountUserResult(dict):
    def __init__(__self__, *,
                 social_accounts: Optional[Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionsocialAccountUserSocialAccountResult']] = None):
        if social_accounts is not None:
            pulumi.set(__self__, "social_accounts", social_accounts)

    @property
    @pulumi.getter(name="socialAccounts")
    def social_accounts(self) -> Optional[Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionsocialAccountUserSocialAccountResult']]:
        return pulumi.get(self, "social_accounts")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionsocialAccountUserSocialAccountResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensiontermsOfUseUserResult(dict):
    def __init__(__self__, *,
                 terms_of_use_consents: Optional[Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensiontermsOfUseUserTermsOfUseConsentResult']] = None):
        if terms_of_use_consents is not None:
            pulumi.set(__self__, "terms_of_use_consents", terms_of_use_consents)

    @property
    @pulumi.getter(name="termsOfUseConsents")
    def terms_of_use_consents(self) -> Optional[Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensiontermsOfUseUserTermsOfUseConsentResult']]:
        return pulumi.get(self, "terms_of_use_consents")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensiontermsOfUseUserTermsOfUseConsentResult(dict):
    def __init__(__self__, *,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserResult(dict):
    def __init__(__self__, *,
                 api_keys: Optional[Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserApiKeyResult']] = None,
                 auth_tokens: Optional[Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserAuthTokenResult']] = None,
                 customer_secret_keys: Optional[Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserCustomerSecretKeyResult']] = None,
                 db_credentials: Optional[Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserDbCredentialResult']] = None,
                 o_auth2client_credentials: Optional[Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserOAuth2clientCredentialResult']] = None,
                 smtp_credentials: Optional[Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserSmtpCredentialResult']] = None):
        if api_keys is not None:
            pulumi.set(__self__, "api_keys", api_keys)
        if auth_tokens is not None:
            pulumi.set(__self__, "auth_tokens", auth_tokens)
        if customer_secret_keys is not None:
            pulumi.set(__self__, "customer_secret_keys", customer_secret_keys)
        if db_credentials is not None:
            pulumi.set(__self__, "db_credentials", db_credentials)
        if o_auth2client_credentials is not None:
            pulumi.set(__self__, "o_auth2client_credentials", o_auth2client_credentials)
        if smtp_credentials is not None:
            pulumi.set(__self__, "smtp_credentials", smtp_credentials)

    @property
    @pulumi.getter(name="apiKeys")
    def api_keys(self) -> Optional[Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserApiKeyResult']]:
        return pulumi.get(self, "api_keys")

    @property
    @pulumi.getter(name="authTokens")
    def auth_tokens(self) -> Optional[Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserAuthTokenResult']]:
        return pulumi.get(self, "auth_tokens")

    @property
    @pulumi.getter(name="customerSecretKeys")
    def customer_secret_keys(self) -> Optional[Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserCustomerSecretKeyResult']]:
        return pulumi.get(self, "customer_secret_keys")

    @property
    @pulumi.getter(name="dbCredentials")
    def db_credentials(self) -> Optional[Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserDbCredentialResult']]:
        return pulumi.get(self, "db_credentials")

    @property
    @pulumi.getter(name="oAuth2clientCredentials")
    def o_auth2client_credentials(self) -> Optional[Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserOAuth2clientCredentialResult']]:
        return pulumi.get(self, "o_auth2client_credentials")

    @property
    @pulumi.getter(name="smtpCredentials")
    def smtp_credentials(self) -> Optional[Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserSmtpCredentialResult']]:
        return pulumi.get(self, "smtp_credentials")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserApiKeyResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserAuthTokenResult(dict):
    def __init__(__self__, *,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserCustomerSecretKeyResult(dict):
    def __init__(__self__, *,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserDbCredentialResult(dict):
    def __init__(__self__, *,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserOAuth2clientCredentialResult(dict):
    def __init__(__self__, *,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserSmtpCredentialResult(dict):
    def __init__(__self__, *,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserResult(dict):
    def __init__(__self__, *,
                 last_failed_login_date: Optional[str] = None,
                 last_successful_login_date: Optional[str] = None,
                 lockeds: Optional[Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLockedResult']] = None,
                 login_attempts: Optional[int] = None,
                 max_concurrent_sessions: Optional[int] = None,
                 previous_successful_login_date: Optional[str] = None,
                 recovery_attempts: Optional[int] = None,
                 recovery_enroll_attempts: Optional[int] = None,
                 recovery_lockeds: Optional[Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserRecoveryLockedResult']] = None):
        if last_failed_login_date is not None:
            pulumi.set(__self__, "last_failed_login_date", last_failed_login_date)
        if last_successful_login_date is not None:
            pulumi.set(__self__, "last_successful_login_date", last_successful_login_date)
        if lockeds is not None:
            pulumi.set(__self__, "lockeds", lockeds)
        if login_attempts is not None:
            pulumi.set(__self__, "login_attempts", login_attempts)
        if max_concurrent_sessions is not None:
            pulumi.set(__self__, "max_concurrent_sessions", max_concurrent_sessions)
        if previous_successful_login_date is not None:
            pulumi.set(__self__, "previous_successful_login_date", previous_successful_login_date)
        if recovery_attempts is not None:
            pulumi.set(__self__, "recovery_attempts", recovery_attempts)
        if recovery_enroll_attempts is not None:
            pulumi.set(__self__, "recovery_enroll_attempts", recovery_enroll_attempts)
        if recovery_lockeds is not None:
            pulumi.set(__self__, "recovery_lockeds", recovery_lockeds)

    @property
    @pulumi.getter(name="lastFailedLoginDate")
    def last_failed_login_date(self) -> Optional[str]:
        return pulumi.get(self, "last_failed_login_date")

    @property
    @pulumi.getter(name="lastSuccessfulLoginDate")
    def last_successful_login_date(self) -> Optional[str]:
        return pulumi.get(self, "last_successful_login_date")

    @property
    @pulumi.getter
    def lockeds(self) -> Optional[Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLockedResult']]:
        return pulumi.get(self, "lockeds")

    @property
    @pulumi.getter(name="loginAttempts")
    def login_attempts(self) -> Optional[int]:
        return pulumi.get(self, "login_attempts")

    @property
    @pulumi.getter(name="maxConcurrentSessions")
    def max_concurrent_sessions(self) -> Optional[int]:
        return pulumi.get(self, "max_concurrent_sessions")

    @property
    @pulumi.getter(name="previousSuccessfulLoginDate")
    def previous_successful_login_date(self) -> Optional[str]:
        return pulumi.get(self, "previous_successful_login_date")

    @property
    @pulumi.getter(name="recoveryAttempts")
    def recovery_attempts(self) -> Optional[int]:
        return pulumi.get(self, "recovery_attempts")

    @property
    @pulumi.getter(name="recoveryEnrollAttempts")
    def recovery_enroll_attempts(self) -> Optional[int]:
        return pulumi.get(self, "recovery_enroll_attempts")

    @property
    @pulumi.getter(name="recoveryLockeds")
    def recovery_lockeds(self) -> Optional[Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserRecoveryLockedResult']]:
        return pulumi.get(self, "recovery_lockeds")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLockedResult(dict):
    def __init__(__self__, *,
                 expired: Optional[bool] = None,
                 lock_date: Optional[str] = None,
                 on: Optional[bool] = None,
                 reason: Optional[int] = None):
        if expired is not None:
            pulumi.set(__self__, "expired", expired)
        if lock_date is not None:
            pulumi.set(__self__, "lock_date", lock_date)
        if on is not None:
            pulumi.set(__self__, "on", on)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def expired(self) -> Optional[bool]:
        return pulumi.get(self, "expired")

    @property
    @pulumi.getter(name="lockDate")
    def lock_date(self) -> Optional[str]:
        return pulumi.get(self, "lock_date")

    @property
    @pulumi.getter
    def on(self) -> Optional[bool]:
        return pulumi.get(self, "on")

    @property
    @pulumi.getter
    def reason(self) -> Optional[int]:
        return pulumi.get(self, "reason")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserRecoveryLockedResult(dict):
    def __init__(__self__, *,
                 lock_date: Optional[str] = None,
                 on: Optional[bool] = None):
        if lock_date is not None:
            pulumi.set(__self__, "lock_date", lock_date)
        if on is not None:
            pulumi.set(__self__, "on", on)

    @property
    @pulumi.getter(name="lockDate")
    def lock_date(self) -> Optional[str]:
        return pulumi.get(self, "lock_date")

    @property
    @pulumi.getter
    def on(self) -> Optional[bool]:
        return pulumi.get(self, "on")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserResult(dict):
    def __init__(__self__, *,
                 account_recovery_required: Optional[bool] = None,
                 accounts: Optional[Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAccountResult']] = None,
                 app_roles: Optional[Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAppRoleResult']] = None,
                 applicable_authentication_target_apps: Optional[Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserApplicableAuthenticationTargetAppResult']] = None,
                 bypass_notification: Optional[bool] = None,
                 creation_mechanism: Optional[str] = None,
                 delegated_authentication_target_apps: Optional[Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserDelegatedAuthenticationTargetAppResult']] = None,
                 do_not_show_getting_started: Optional[bool] = None,
                 grants: Optional[Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserGrantResult']] = None,
                 group_membership_last_modified: Optional[str] = None,
                 idcs_app_roles_limited_to_groups: Optional[Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserIdcsAppRolesLimitedToGroupResult']] = None,
                 is_account_recovery_enrolled: Optional[bool] = None,
                 is_authentication_delegated: Optional[bool] = None,
                 is_federated_user: Optional[bool] = None,
                 is_group_membership_normalized: Optional[bool] = None,
                 is_group_membership_synced_to_users_groups: Optional[bool] = None,
                 notification_email_template_id: Optional[str] = None,
                 preferred_ui_landing_page: Optional[str] = None,
                 status: Optional[str] = None,
                 support_accounts: Optional[Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserSupportAccountResult']] = None,
                 synced_from_apps: Optional[Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserSyncedFromAppResult']] = None,
                 user_flow_controlled_by_external_client: Optional[bool] = None,
                 user_provider: Optional[str] = None,
                 user_tokens: Optional[Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserUserTokenResult']] = None):
        if account_recovery_required is not None:
            pulumi.set(__self__, "account_recovery_required", account_recovery_required)
        if accounts is not None:
            pulumi.set(__self__, "accounts", accounts)
        if app_roles is not None:
            pulumi.set(__self__, "app_roles", app_roles)
        if applicable_authentication_target_apps is not None:
            pulumi.set(__self__, "applicable_authentication_target_apps", applicable_authentication_target_apps)
        if bypass_notification is not None:
            pulumi.set(__self__, "bypass_notification", bypass_notification)
        if creation_mechanism is not None:
            pulumi.set(__self__, "creation_mechanism", creation_mechanism)
        if delegated_authentication_target_apps is not None:
            pulumi.set(__self__, "delegated_authentication_target_apps", delegated_authentication_target_apps)
        if do_not_show_getting_started is not None:
            pulumi.set(__self__, "do_not_show_getting_started", do_not_show_getting_started)
        if grants is not None:
            pulumi.set(__self__, "grants", grants)
        if group_membership_last_modified is not None:
            pulumi.set(__self__, "group_membership_last_modified", group_membership_last_modified)
        if idcs_app_roles_limited_to_groups is not None:
            pulumi.set(__self__, "idcs_app_roles_limited_to_groups", idcs_app_roles_limited_to_groups)
        if is_account_recovery_enrolled is not None:
            pulumi.set(__self__, "is_account_recovery_enrolled", is_account_recovery_enrolled)
        if is_authentication_delegated is not None:
            pulumi.set(__self__, "is_authentication_delegated", is_authentication_delegated)
        if is_federated_user is not None:
            pulumi.set(__self__, "is_federated_user", is_federated_user)
        if is_group_membership_normalized is not None:
            pulumi.set(__self__, "is_group_membership_normalized", is_group_membership_normalized)
        if is_group_membership_synced_to_users_groups is not None:
            pulumi.set(__self__, "is_group_membership_synced_to_users_groups", is_group_membership_synced_to_users_groups)
        if notification_email_template_id is not None:
            pulumi.set(__self__, "notification_email_template_id", notification_email_template_id)
        if preferred_ui_landing_page is not None:
            pulumi.set(__self__, "preferred_ui_landing_page", preferred_ui_landing_page)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if support_accounts is not None:
            pulumi.set(__self__, "support_accounts", support_accounts)
        if synced_from_apps is not None:
            pulumi.set(__self__, "synced_from_apps", synced_from_apps)
        if user_flow_controlled_by_external_client is not None:
            pulumi.set(__self__, "user_flow_controlled_by_external_client", user_flow_controlled_by_external_client)
        if user_provider is not None:
            pulumi.set(__self__, "user_provider", user_provider)
        if user_tokens is not None:
            pulumi.set(__self__, "user_tokens", user_tokens)

    @property
    @pulumi.getter(name="accountRecoveryRequired")
    def account_recovery_required(self) -> Optional[bool]:
        return pulumi.get(self, "account_recovery_required")

    @property
    @pulumi.getter
    def accounts(self) -> Optional[Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAccountResult']]:
        return pulumi.get(self, "accounts")

    @property
    @pulumi.getter(name="appRoles")
    def app_roles(self) -> Optional[Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAppRoleResult']]:
        return pulumi.get(self, "app_roles")

    @property
    @pulumi.getter(name="applicableAuthenticationTargetApps")
    def applicable_authentication_target_apps(self) -> Optional[Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserApplicableAuthenticationTargetAppResult']]:
        return pulumi.get(self, "applicable_authentication_target_apps")

    @property
    @pulumi.getter(name="bypassNotification")
    def bypass_notification(self) -> Optional[bool]:
        return pulumi.get(self, "bypass_notification")

    @property
    @pulumi.getter(name="creationMechanism")
    def creation_mechanism(self) -> Optional[str]:
        return pulumi.get(self, "creation_mechanism")

    @property
    @pulumi.getter(name="delegatedAuthenticationTargetApps")
    def delegated_authentication_target_apps(self) -> Optional[Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserDelegatedAuthenticationTargetAppResult']]:
        return pulumi.get(self, "delegated_authentication_target_apps")

    @property
    @pulumi.getter(name="doNotShowGettingStarted")
    def do_not_show_getting_started(self) -> Optional[bool]:
        return pulumi.get(self, "do_not_show_getting_started")

    @property
    @pulumi.getter
    def grants(self) -> Optional[Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserGrantResult']]:
        return pulumi.get(self, "grants")

    @property
    @pulumi.getter(name="groupMembershipLastModified")
    def group_membership_last_modified(self) -> Optional[str]:
        return pulumi.get(self, "group_membership_last_modified")

    @property
    @pulumi.getter(name="idcsAppRolesLimitedToGroups")
    def idcs_app_roles_limited_to_groups(self) -> Optional[Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserIdcsAppRolesLimitedToGroupResult']]:
        return pulumi.get(self, "idcs_app_roles_limited_to_groups")

    @property
    @pulumi.getter(name="isAccountRecoveryEnrolled")
    def is_account_recovery_enrolled(self) -> Optional[bool]:
        return pulumi.get(self, "is_account_recovery_enrolled")

    @property
    @pulumi.getter(name="isAuthenticationDelegated")
    def is_authentication_delegated(self) -> Optional[bool]:
        return pulumi.get(self, "is_authentication_delegated")

    @property
    @pulumi.getter(name="isFederatedUser")
    def is_federated_user(self) -> Optional[bool]:
        return pulumi.get(self, "is_federated_user")

    @property
    @pulumi.getter(name="isGroupMembershipNormalized")
    def is_group_membership_normalized(self) -> Optional[bool]:
        return pulumi.get(self, "is_group_membership_normalized")

    @property
    @pulumi.getter(name="isGroupMembershipSyncedToUsersGroups")
    def is_group_membership_synced_to_users_groups(self) -> Optional[bool]:
        return pulumi.get(self, "is_group_membership_synced_to_users_groups")

    @property
    @pulumi.getter(name="notificationEmailTemplateId")
    def notification_email_template_id(self) -> Optional[str]:
        return pulumi.get(self, "notification_email_template_id")

    @property
    @pulumi.getter(name="preferredUiLandingPage")
    def preferred_ui_landing_page(self) -> Optional[str]:
        return pulumi.get(self, "preferred_ui_landing_page")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="supportAccounts")
    def support_accounts(self) -> Optional[Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserSupportAccountResult']]:
        return pulumi.get(self, "support_accounts")

    @property
    @pulumi.getter(name="syncedFromApps")
    def synced_from_apps(self) -> Optional[Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserSyncedFromAppResult']]:
        return pulumi.get(self, "synced_from_apps")

    @property
    @pulumi.getter(name="userFlowControlledByExternalClient")
    def user_flow_controlled_by_external_client(self) -> Optional[bool]:
        return pulumi.get(self, "user_flow_controlled_by_external_client")

    @property
    @pulumi.getter(name="userProvider")
    def user_provider(self) -> Optional[str]:
        return pulumi.get(self, "user_provider")

    @property
    @pulumi.getter(name="userTokens")
    def user_tokens(self) -> Optional[Sequence['outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserUserTokenResult']]:
        return pulumi.get(self, "user_tokens")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAccountResult(dict):
    def __init__(__self__, *,
                 active: Optional[bool] = None,
                 app_id: Optional[str] = None,
                 name: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if active is not None:
            pulumi.set(__self__, "active", active)
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def active(self) -> Optional[bool]:
        return pulumi.get(self, "active")

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[str]:
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAppRoleResult(dict):
    def __init__(__self__, *,
                 admin_role: Optional[bool] = None,
                 app_id: Optional[str] = None,
                 app_name: Optional[str] = None,
                 display: Optional[str] = None,
                 legacy_group_name: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if admin_role is not None:
            pulumi.set(__self__, "admin_role", admin_role)
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if app_name is not None:
            pulumi.set(__self__, "app_name", app_name)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if legacy_group_name is not None:
            pulumi.set(__self__, "legacy_group_name", legacy_group_name)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="adminRole")
    def admin_role(self) -> Optional[bool]:
        return pulumi.get(self, "admin_role")

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[str]:
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="appName")
    def app_name(self) -> Optional[str]:
        return pulumi.get(self, "app_name")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter(name="legacyGroupName")
    def legacy_group_name(self) -> Optional[str]:
        return pulumi.get(self, "legacy_group_name")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserApplicableAuthenticationTargetAppResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ref: Optional[str] = None,
                 target_request_timeout: Optional[int] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if target_request_timeout is not None:
            pulumi.set(__self__, "target_request_timeout", target_request_timeout)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="targetRequestTimeout")
    def target_request_timeout(self) -> Optional[int]:
        return pulumi.get(self, "target_request_timeout")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserDelegatedAuthenticationTargetAppResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserGrantResult(dict):
    def __init__(__self__, *,
                 app_id: Optional[str] = None,
                 grant_mechanism: Optional[str] = None,
                 grantor_id: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if grant_mechanism is not None:
            pulumi.set(__self__, "grant_mechanism", grant_mechanism)
        if grantor_id is not None:
            pulumi.set(__self__, "grantor_id", grantor_id)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[str]:
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="grantMechanism")
    def grant_mechanism(self) -> Optional[str]:
        return pulumi.get(self, "grant_mechanism")

    @property
    @pulumi.getter(name="grantorId")
    def grantor_id(self) -> Optional[str]:
        return pulumi.get(self, "grantor_id")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserIdcsAppRolesLimitedToGroupResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 idcs_app_role_id: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if idcs_app_role_id is not None:
            pulumi.set(__self__, "idcs_app_role_id", idcs_app_role_id)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter(name="idcsAppRoleId")
    def idcs_app_role_id(self) -> Optional[str]:
        return pulumi.get(self, "idcs_app_role_id")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserSupportAccountResult(dict):
    def __init__(__self__, *,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 user_id: Optional[str] = None,
                 user_provider: Optional[str] = None,
                 value: Optional[str] = None):
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)
        if user_provider is not None:
            pulumi.set(__self__, "user_provider", user_provider)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[str]:
        return pulumi.get(self, "user_id")

    @property
    @pulumi.getter(name="userProvider")
    def user_provider(self) -> Optional[str]:
        return pulumi.get(self, "user_provider")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserSyncedFromAppResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserUserTokenResult(dict):
    def __init__(__self__, *,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUserX509certificateResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 primary: Optional[bool] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def primary(self) -> Optional[bool]:
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserResult(dict):
    def __init__(__self__, *,
                 active: Optional[bool] = None,
                 addresses: Optional[Sequence['outputs.GetDomainsUsersUserAddressResult']] = None,
                 attribute_sets: Optional[Sequence[str]] = None,
                 attributes: Optional[str] = None,
                 authorization: Optional[str] = None,
                 compartment_ocid: Optional[str] = None,
                 delete_in_progress: Optional[bool] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 domain_ocid: Optional[str] = None,
                 emails: Optional[Sequence['outputs.GetDomainsUsersUserEmailResult']] = None,
                 entitlements: Optional[Sequence['outputs.GetDomainsUsersUserEntitlementResult']] = None,
                 external_id: Optional[str] = None,
                 groups: Optional[Sequence['outputs.GetDomainsUsersUserGroupResult']] = None,
                 id: Optional[str] = None,
                 idcs_created_bies: Optional[Sequence['outputs.GetDomainsUsersUserIdcsCreatedByResult']] = None,
                 idcs_endpoint: Optional[str] = None,
                 idcs_last_modified_bies: Optional[Sequence['outputs.GetDomainsUsersUserIdcsLastModifiedByResult']] = None,
                 idcs_last_upgraded_in_release: Optional[str] = None,
                 idcs_prevented_operations: Optional[Sequence[str]] = None,
                 ims: Optional[Sequence['outputs.GetDomainsUsersUserImResult']] = None,
                 locale: Optional[str] = None,
                 metas: Optional[Sequence['outputs.GetDomainsUsersUserMetaResult']] = None,
                 names: Optional[Sequence['outputs.GetDomainsUsersUserNameResult']] = None,
                 nick_name: Optional[str] = None,
                 ocid: Optional[str] = None,
                 password: Optional[str] = None,
                 phone_numbers: Optional[Sequence['outputs.GetDomainsUsersUserPhoneNumberResult']] = None,
                 photos: Optional[Sequence['outputs.GetDomainsUsersUserPhotoResult']] = None,
                 preferred_language: Optional[str] = None,
                 profile_url: Optional[str] = None,
                 resource_type_schema_version: Optional[str] = None,
                 roles: Optional[Sequence['outputs.GetDomainsUsersUserRoleResult']] = None,
                 schemas: Optional[Sequence[str]] = None,
                 tags: Optional[Sequence['outputs.GetDomainsUsersUserTagResult']] = None,
                 tenancy_ocid: Optional[str] = None,
                 timezone: Optional[str] = None,
                 title: Optional[str] = None,
                 urnietfparamsscimschemasextensionenterprise20users: Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasextensionenterprise20userResult']] = None,
                 urnietfparamsscimschemasoracleidcsextension_oci_tags: Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionOciTagResult']] = None,
                 urnietfparamsscimschemasoracleidcsextensionadaptive_users: Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionadaptiveUserResult']] = None,
                 urnietfparamsscimschemasoracleidcsextensioncapabilities_users: Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensioncapabilitiesUserResult']] = None,
                 urnietfparamsscimschemasoracleidcsextensiondb_credentials_users: Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensiondbCredentialsUserResult']] = None,
                 urnietfparamsscimschemasoracleidcsextensiondb_user_users: Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensiondbUserUserResult']] = None,
                 urnietfparamsscimschemasoracleidcsextensionkerberos_user_users: Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionkerberosUserUserResult']] = None,
                 urnietfparamsscimschemasoracleidcsextensionmfa_users: Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserResult']] = None,
                 urnietfparamsscimschemasoracleidcsextensionpassword_state_users: Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserResult']] = None,
                 urnietfparamsscimschemasoracleidcsextensionpasswordless_users: Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionpasswordlessUserResult']] = None,
                 urnietfparamsscimschemasoracleidcsextensionposix_users: Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionposixUserResult']] = None,
                 urnietfparamsscimschemasoracleidcsextensionsecurity_questions_users: Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUserResult']] = None,
                 urnietfparamsscimschemasoracleidcsextensionself_change_users: Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult']] = None,
                 urnietfparamsscimschemasoracleidcsextensionself_registration_users: Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionselfRegistrationUserResult']] = None,
                 urnietfparamsscimschemasoracleidcsextensionsff_users: Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionsffUserResult']] = None,
                 urnietfparamsscimschemasoracleidcsextensionsocial_account_users: Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionsocialAccountUserResult']] = None,
                 urnietfparamsscimschemasoracleidcsextensionterms_of_use_users: Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensiontermsOfUseUserResult']] = None,
                 urnietfparamsscimschemasoracleidcsextensionuser_credentials_users: Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserResult']] = None,
                 urnietfparamsscimschemasoracleidcsextensionuser_state_users: Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserResult']] = None,
                 urnietfparamsscimschemasoracleidcsextensionuser_users: Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserResult']] = None,
                 user_name: Optional[str] = None,
                 user_type: Optional[str] = None,
                 x509certificates: Optional[Sequence['outputs.GetDomainsUsersUserX509certificateResult']] = None):
        if active is not None:
            pulumi.set(__self__, "active", active)
        if addresses is not None:
            pulumi.set(__self__, "addresses", addresses)
        if attribute_sets is not None:
            pulumi.set(__self__, "attribute_sets", attribute_sets)
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)
        if authorization is not None:
            pulumi.set(__self__, "authorization", authorization)
        if compartment_ocid is not None:
            pulumi.set(__self__, "compartment_ocid", compartment_ocid)
        if delete_in_progress is not None:
            pulumi.set(__self__, "delete_in_progress", delete_in_progress)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if domain_ocid is not None:
            pulumi.set(__self__, "domain_ocid", domain_ocid)
        if emails is not None:
            pulumi.set(__self__, "emails", emails)
        if entitlements is not None:
            pulumi.set(__self__, "entitlements", entitlements)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if idcs_created_bies is not None:
            pulumi.set(__self__, "idcs_created_bies", idcs_created_bies)
        if idcs_endpoint is not None:
            pulumi.set(__self__, "idcs_endpoint", idcs_endpoint)
        if idcs_last_modified_bies is not None:
            pulumi.set(__self__, "idcs_last_modified_bies", idcs_last_modified_bies)
        if idcs_last_upgraded_in_release is not None:
            pulumi.set(__self__, "idcs_last_upgraded_in_release", idcs_last_upgraded_in_release)
        if idcs_prevented_operations is not None:
            pulumi.set(__self__, "idcs_prevented_operations", idcs_prevented_operations)
        if ims is not None:
            pulumi.set(__self__, "ims", ims)
        if locale is not None:
            pulumi.set(__self__, "locale", locale)
        if metas is not None:
            pulumi.set(__self__, "metas", metas)
        if names is not None:
            pulumi.set(__self__, "names", names)
        if nick_name is not None:
            pulumi.set(__self__, "nick_name", nick_name)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if phone_numbers is not None:
            pulumi.set(__self__, "phone_numbers", phone_numbers)
        if photos is not None:
            pulumi.set(__self__, "photos", photos)
        if preferred_language is not None:
            pulumi.set(__self__, "preferred_language", preferred_language)
        if profile_url is not None:
            pulumi.set(__self__, "profile_url", profile_url)
        if resource_type_schema_version is not None:
            pulumi.set(__self__, "resource_type_schema_version", resource_type_schema_version)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if schemas is not None:
            pulumi.set(__self__, "schemas", schemas)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tenancy_ocid is not None:
            pulumi.set(__self__, "tenancy_ocid", tenancy_ocid)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if urnietfparamsscimschemasextensionenterprise20users is not None:
            pulumi.set(__self__, "urnietfparamsscimschemasextensionenterprise20users", urnietfparamsscimschemasextensionenterprise20users)
        if urnietfparamsscimschemasoracleidcsextension_oci_tags is not None:
            pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextension_oci_tags", urnietfparamsscimschemasoracleidcsextension_oci_tags)
        if urnietfparamsscimschemasoracleidcsextensionadaptive_users is not None:
            pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionadaptive_users", urnietfparamsscimschemasoracleidcsextensionadaptive_users)
        if urnietfparamsscimschemasoracleidcsextensioncapabilities_users is not None:
            pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensioncapabilities_users", urnietfparamsscimschemasoracleidcsextensioncapabilities_users)
        if urnietfparamsscimschemasoracleidcsextensiondb_credentials_users is not None:
            pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensiondb_credentials_users", urnietfparamsscimschemasoracleidcsextensiondb_credentials_users)
        if urnietfparamsscimschemasoracleidcsextensiondb_user_users is not None:
            pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensiondb_user_users", urnietfparamsscimschemasoracleidcsextensiondb_user_users)
        if urnietfparamsscimschemasoracleidcsextensionkerberos_user_users is not None:
            pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionkerberos_user_users", urnietfparamsscimschemasoracleidcsextensionkerberos_user_users)
        if urnietfparamsscimschemasoracleidcsextensionmfa_users is not None:
            pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionmfa_users", urnietfparamsscimschemasoracleidcsextensionmfa_users)
        if urnietfparamsscimschemasoracleidcsextensionpassword_state_users is not None:
            pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionpassword_state_users", urnietfparamsscimschemasoracleidcsextensionpassword_state_users)
        if urnietfparamsscimschemasoracleidcsextensionpasswordless_users is not None:
            pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionpasswordless_users", urnietfparamsscimschemasoracleidcsextensionpasswordless_users)
        if urnietfparamsscimschemasoracleidcsextensionposix_users is not None:
            pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionposix_users", urnietfparamsscimschemasoracleidcsextensionposix_users)
        if urnietfparamsscimschemasoracleidcsextensionsecurity_questions_users is not None:
            pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionsecurity_questions_users", urnietfparamsscimschemasoracleidcsextensionsecurity_questions_users)
        if urnietfparamsscimschemasoracleidcsextensionself_change_users is not None:
            pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionself_change_users", urnietfparamsscimschemasoracleidcsextensionself_change_users)
        if urnietfparamsscimschemasoracleidcsextensionself_registration_users is not None:
            pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionself_registration_users", urnietfparamsscimschemasoracleidcsextensionself_registration_users)
        if urnietfparamsscimschemasoracleidcsextensionsff_users is not None:
            pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionsff_users", urnietfparamsscimschemasoracleidcsextensionsff_users)
        if urnietfparamsscimschemasoracleidcsextensionsocial_account_users is not None:
            pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionsocial_account_users", urnietfparamsscimschemasoracleidcsextensionsocial_account_users)
        if urnietfparamsscimschemasoracleidcsextensionterms_of_use_users is not None:
            pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionterms_of_use_users", urnietfparamsscimschemasoracleidcsextensionterms_of_use_users)
        if urnietfparamsscimschemasoracleidcsextensionuser_credentials_users is not None:
            pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionuser_credentials_users", urnietfparamsscimschemasoracleidcsextensionuser_credentials_users)
        if urnietfparamsscimschemasoracleidcsextensionuser_state_users is not None:
            pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionuser_state_users", urnietfparamsscimschemasoracleidcsextensionuser_state_users)
        if urnietfparamsscimschemasoracleidcsextensionuser_users is not None:
            pulumi.set(__self__, "urnietfparamsscimschemasoracleidcsextensionuser_users", urnietfparamsscimschemasoracleidcsextensionuser_users)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if user_type is not None:
            pulumi.set(__self__, "user_type", user_type)
        if x509certificates is not None:
            pulumi.set(__self__, "x509certificates", x509certificates)

    @property
    @pulumi.getter
    def active(self) -> Optional[bool]:
        return pulumi.get(self, "active")

    @property
    @pulumi.getter
    def addresses(self) -> Optional[Sequence['outputs.GetDomainsUsersUserAddressResult']]:
        return pulumi.get(self, "addresses")

    @property
    @pulumi.getter(name="attributeSets")
    def attribute_sets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "attribute_sets")

    @property
    @pulumi.getter
    def attributes(self) -> Optional[str]:
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter
    def authorization(self) -> Optional[str]:
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="compartmentOcid")
    def compartment_ocid(self) -> Optional[str]:
        return pulumi.get(self, "compartment_ocid")

    @property
    @pulumi.getter(name="deleteInProgress")
    def delete_in_progress(self) -> Optional[bool]:
        return pulumi.get(self, "delete_in_progress")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="domainOcid")
    def domain_ocid(self) -> Optional[str]:
        return pulumi.get(self, "domain_ocid")

    @property
    @pulumi.getter
    def emails(self) -> Optional[Sequence['outputs.GetDomainsUsersUserEmailResult']]:
        return pulumi.get(self, "emails")

    @property
    @pulumi.getter
    def entitlements(self) -> Optional[Sequence['outputs.GetDomainsUsersUserEntitlementResult']]:
        return pulumi.get(self, "entitlements")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[str]:
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter
    def groups(self) -> Optional[Sequence['outputs.GetDomainsUsersUserGroupResult']]:
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsCreatedBies")
    def idcs_created_bies(self) -> Optional[Sequence['outputs.GetDomainsUsersUserIdcsCreatedByResult']]:
        return pulumi.get(self, "idcs_created_bies")

    @property
    @pulumi.getter(name="idcsEndpoint")
    def idcs_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "idcs_endpoint")

    @property
    @pulumi.getter(name="idcsLastModifiedBies")
    def idcs_last_modified_bies(self) -> Optional[Sequence['outputs.GetDomainsUsersUserIdcsLastModifiedByResult']]:
        return pulumi.get(self, "idcs_last_modified_bies")

    @property
    @pulumi.getter(name="idcsLastUpgradedInRelease")
    def idcs_last_upgraded_in_release(self) -> Optional[str]:
        return pulumi.get(self, "idcs_last_upgraded_in_release")

    @property
    @pulumi.getter(name="idcsPreventedOperations")
    def idcs_prevented_operations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "idcs_prevented_operations")

    @property
    @pulumi.getter
    def ims(self) -> Optional[Sequence['outputs.GetDomainsUsersUserImResult']]:
        return pulumi.get(self, "ims")

    @property
    @pulumi.getter
    def locale(self) -> Optional[str]:
        return pulumi.get(self, "locale")

    @property
    @pulumi.getter
    def metas(self) -> Optional[Sequence['outputs.GetDomainsUsersUserMetaResult']]:
        return pulumi.get(self, "metas")

    @property
    @pulumi.getter
    def names(self) -> Optional[Sequence['outputs.GetDomainsUsersUserNameResult']]:
        return pulumi.get(self, "names")

    @property
    @pulumi.getter(name="nickName")
    def nick_name(self) -> Optional[str]:
        return pulumi.get(self, "nick_name")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="phoneNumbers")
    def phone_numbers(self) -> Optional[Sequence['outputs.GetDomainsUsersUserPhoneNumberResult']]:
        return pulumi.get(self, "phone_numbers")

    @property
    @pulumi.getter
    def photos(self) -> Optional[Sequence['outputs.GetDomainsUsersUserPhotoResult']]:
        return pulumi.get(self, "photos")

    @property
    @pulumi.getter(name="preferredLanguage")
    def preferred_language(self) -> Optional[str]:
        return pulumi.get(self, "preferred_language")

    @property
    @pulumi.getter(name="profileUrl")
    def profile_url(self) -> Optional[str]:
        return pulumi.get(self, "profile_url")

    @property
    @pulumi.getter(name="resourceTypeSchemaVersion")
    def resource_type_schema_version(self) -> Optional[str]:
        return pulumi.get(self, "resource_type_schema_version")

    @property
    @pulumi.getter
    def roles(self) -> Optional[Sequence['outputs.GetDomainsUsersUserRoleResult']]:
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter
    def schemas(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.GetDomainsUsersUserTagResult']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenancyOcid")
    def tenancy_ocid(self) -> Optional[str]:
        return pulumi.get(self, "tenancy_ocid")

    @property
    @pulumi.getter
    def timezone(self) -> Optional[str]:
        return pulumi.get(self, "timezone")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def urnietfparamsscimschemasextensionenterprise20users(self) -> Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasextensionenterprise20userResult']]:
        return pulumi.get(self, "urnietfparamsscimschemasextensionenterprise20users")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionOciTags")
    def urnietfparamsscimschemasoracleidcsextension_oci_tags(self) -> Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionOciTagResult']]:
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextension_oci_tags")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionadaptiveUsers")
    def urnietfparamsscimschemasoracleidcsextensionadaptive_users(self) -> Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionadaptiveUserResult']]:
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionadaptive_users")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensioncapabilitiesUsers")
    def urnietfparamsscimschemasoracleidcsextensioncapabilities_users(self) -> Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensioncapabilitiesUserResult']]:
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensioncapabilities_users")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensiondbCredentialsUsers")
    def urnietfparamsscimschemasoracleidcsextensiondb_credentials_users(self) -> Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensiondbCredentialsUserResult']]:
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensiondb_credentials_users")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensiondbUserUsers")
    def urnietfparamsscimschemasoracleidcsextensiondb_user_users(self) -> Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensiondbUserUserResult']]:
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensiondb_user_users")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionkerberosUserUsers")
    def urnietfparamsscimschemasoracleidcsextensionkerberos_user_users(self) -> Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionkerberosUserUserResult']]:
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionkerberos_user_users")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionmfaUsers")
    def urnietfparamsscimschemasoracleidcsextensionmfa_users(self) -> Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserResult']]:
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionmfa_users")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionpasswordStateUsers")
    def urnietfparamsscimschemasoracleidcsextensionpassword_state_users(self) -> Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserResult']]:
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionpassword_state_users")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionpasswordlessUsers")
    def urnietfparamsscimschemasoracleidcsextensionpasswordless_users(self) -> Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionpasswordlessUserResult']]:
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionpasswordless_users")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionposixUsers")
    def urnietfparamsscimschemasoracleidcsextensionposix_users(self) -> Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionposixUserResult']]:
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionposix_users")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUsers")
    def urnietfparamsscimschemasoracleidcsextensionsecurity_questions_users(self) -> Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUserResult']]:
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionsecurity_questions_users")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionselfChangeUsers")
    def urnietfparamsscimschemasoracleidcsextensionself_change_users(self) -> Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult']]:
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionself_change_users")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionselfRegistrationUsers")
    def urnietfparamsscimschemasoracleidcsextensionself_registration_users(self) -> Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionselfRegistrationUserResult']]:
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionself_registration_users")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionsffUsers")
    def urnietfparamsscimschemasoracleidcsextensionsff_users(self) -> Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionsffUserResult']]:
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionsff_users")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionsocialAccountUsers")
    def urnietfparamsscimschemasoracleidcsextensionsocial_account_users(self) -> Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionsocialAccountUserResult']]:
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionsocial_account_users")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensiontermsOfUseUsers")
    def urnietfparamsscimschemasoracleidcsextensionterms_of_use_users(self) -> Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensiontermsOfUseUserResult']]:
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionterms_of_use_users")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionuserCredentialsUsers")
    def urnietfparamsscimschemasoracleidcsextensionuser_credentials_users(self) -> Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserResult']]:
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionuser_credentials_users")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionuserStateUsers")
    def urnietfparamsscimschemasoracleidcsextensionuser_state_users(self) -> Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserResult']]:
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionuser_state_users")

    @property
    @pulumi.getter(name="urnietfparamsscimschemasoracleidcsextensionuserUsers")
    def urnietfparamsscimschemasoracleidcsextensionuser_users(self) -> Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserResult']]:
        return pulumi.get(self, "urnietfparamsscimschemasoracleidcsextensionuser_users")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter(name="userType")
    def user_type(self) -> Optional[str]:
        return pulumi.get(self, "user_type")

    @property
    @pulumi.getter
    def x509certificates(self) -> Optional[Sequence['outputs.GetDomainsUsersUserX509certificateResult']]:
        return pulumi.get(self, "x509certificates")


@pulumi.output_type
class GetDomainsUsersUserAddressResult(dict):
    def __init__(__self__, *,
                 country: Optional[str] = None,
                 formatted: Optional[str] = None,
                 locality: Optional[str] = None,
                 postal_code: Optional[str] = None,
                 primary: Optional[bool] = None,
                 region: Optional[str] = None,
                 street_address: Optional[str] = None,
                 type: Optional[str] = None):
        if country is not None:
            pulumi.set(__self__, "country", country)
        if formatted is not None:
            pulumi.set(__self__, "formatted", formatted)
        if locality is not None:
            pulumi.set(__self__, "locality", locality)
        if postal_code is not None:
            pulumi.set(__self__, "postal_code", postal_code)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if street_address is not None:
            pulumi.set(__self__, "street_address", street_address)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter
    def formatted(self) -> Optional[str]:
        return pulumi.get(self, "formatted")

    @property
    @pulumi.getter
    def locality(self) -> Optional[str]:
        return pulumi.get(self, "locality")

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> Optional[str]:
        return pulumi.get(self, "postal_code")

    @property
    @pulumi.getter
    def primary(self) -> Optional[bool]:
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="streetAddress")
    def street_address(self) -> Optional[str]:
        return pulumi.get(self, "street_address")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDomainsUsersUserEmailResult(dict):
    def __init__(__self__, *,
                 pending_verification_data: Optional[str] = None,
                 primary: Optional[bool] = None,
                 secondary: Optional[bool] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None,
                 verified: Optional[bool] = None):
        if pending_verification_data is not None:
            pulumi.set(__self__, "pending_verification_data", pending_verification_data)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if secondary is not None:
            pulumi.set(__self__, "secondary", secondary)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if verified is not None:
            pulumi.set(__self__, "verified", verified)

    @property
    @pulumi.getter(name="pendingVerificationData")
    def pending_verification_data(self) -> Optional[str]:
        return pulumi.get(self, "pending_verification_data")

    @property
    @pulumi.getter
    def primary(self) -> Optional[bool]:
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def secondary(self) -> Optional[bool]:
        return pulumi.get(self, "secondary")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def verified(self) -> Optional[bool]:
        return pulumi.get(self, "verified")


@pulumi.output_type
class GetDomainsUsersUserEntitlementResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 primary: Optional[bool] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def primary(self) -> Optional[bool]:
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserGroupResult(dict):
    def __init__(__self__, *,
                 date_added: Optional[str] = None,
                 display: Optional[str] = None,
                 external_id: Optional[str] = None,
                 membership_ocid: Optional[str] = None,
                 non_unique_display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if date_added is not None:
            pulumi.set(__self__, "date_added", date_added)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if membership_ocid is not None:
            pulumi.set(__self__, "membership_ocid", membership_ocid)
        if non_unique_display is not None:
            pulumi.set(__self__, "non_unique_display", non_unique_display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="dateAdded")
    def date_added(self) -> Optional[str]:
        return pulumi.get(self, "date_added")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[str]:
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter(name="membershipOcid")
    def membership_ocid(self) -> Optional[str]:
        return pulumi.get(self, "membership_ocid")

    @property
    @pulumi.getter(name="nonUniqueDisplay")
    def non_unique_display(self) -> Optional[str]:
        return pulumi.get(self, "non_unique_display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserIdcsCreatedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserIdcsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserImResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 primary: Optional[bool] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def primary(self) -> Optional[bool]:
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserMetaResult(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 version: Optional[str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDomainsUsersUserNameResult(dict):
    def __init__(__self__, *,
                 family_name: Optional[str] = None,
                 formatted: Optional[str] = None,
                 given_name: Optional[str] = None,
                 honorific_prefix: Optional[str] = None,
                 honorific_suffix: Optional[str] = None,
                 middle_name: Optional[str] = None):
        if family_name is not None:
            pulumi.set(__self__, "family_name", family_name)
        if formatted is not None:
            pulumi.set(__self__, "formatted", formatted)
        if given_name is not None:
            pulumi.set(__self__, "given_name", given_name)
        if honorific_prefix is not None:
            pulumi.set(__self__, "honorific_prefix", honorific_prefix)
        if honorific_suffix is not None:
            pulumi.set(__self__, "honorific_suffix", honorific_suffix)
        if middle_name is not None:
            pulumi.set(__self__, "middle_name", middle_name)

    @property
    @pulumi.getter(name="familyName")
    def family_name(self) -> Optional[str]:
        return pulumi.get(self, "family_name")

    @property
    @pulumi.getter
    def formatted(self) -> Optional[str]:
        return pulumi.get(self, "formatted")

    @property
    @pulumi.getter(name="givenName")
    def given_name(self) -> Optional[str]:
        return pulumi.get(self, "given_name")

    @property
    @pulumi.getter(name="honorificPrefix")
    def honorific_prefix(self) -> Optional[str]:
        return pulumi.get(self, "honorific_prefix")

    @property
    @pulumi.getter(name="honorificSuffix")
    def honorific_suffix(self) -> Optional[str]:
        return pulumi.get(self, "honorific_suffix")

    @property
    @pulumi.getter(name="middleName")
    def middle_name(self) -> Optional[str]:
        return pulumi.get(self, "middle_name")


@pulumi.output_type
class GetDomainsUsersUserPhoneNumberResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 primary: Optional[bool] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None,
                 verified: Optional[bool] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if verified is not None:
            pulumi.set(__self__, "verified", verified)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def primary(self) -> Optional[bool]:
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def verified(self) -> Optional[bool]:
        return pulumi.get(self, "verified")


@pulumi.output_type
class GetDomainsUsersUserPhotoResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 primary: Optional[bool] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def primary(self) -> Optional[bool]:
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserRoleResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 primary: Optional[bool] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def primary(self) -> Optional[bool]:
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasextensionenterprise20userResult(dict):
    def __init__(__self__, *,
                 cost_center: Optional[str] = None,
                 department: Optional[str] = None,
                 division: Optional[str] = None,
                 employee_number: Optional[str] = None,
                 managers: Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasextensionenterprise20userManagerResult']] = None,
                 organization: Optional[str] = None):
        if cost_center is not None:
            pulumi.set(__self__, "cost_center", cost_center)
        if department is not None:
            pulumi.set(__self__, "department", department)
        if division is not None:
            pulumi.set(__self__, "division", division)
        if employee_number is not None:
            pulumi.set(__self__, "employee_number", employee_number)
        if managers is not None:
            pulumi.set(__self__, "managers", managers)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)

    @property
    @pulumi.getter(name="costCenter")
    def cost_center(self) -> Optional[str]:
        return pulumi.get(self, "cost_center")

    @property
    @pulumi.getter
    def department(self) -> Optional[str]:
        return pulumi.get(self, "department")

    @property
    @pulumi.getter
    def division(self) -> Optional[str]:
        return pulumi.get(self, "division")

    @property
    @pulumi.getter(name="employeeNumber")
    def employee_number(self) -> Optional[str]:
        return pulumi.get(self, "employee_number")

    @property
    @pulumi.getter
    def managers(self) -> Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasextensionenterprise20userManagerResult']]:
        return pulumi.get(self, "managers")

    @property
    @pulumi.getter
    def organization(self) -> Optional[str]:
        return pulumi.get(self, "organization")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasextensionenterprise20userManagerResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionOciTagResult(dict):
    def __init__(__self__, *,
                 defined_tags: Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTagResult']] = None,
                 freeform_tags: Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTagResult']] = None,
                 tag_slug: Optional[str] = None):
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if tag_slug is not None:
            pulumi.set(__self__, "tag_slug", tag_slug)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTagResult']]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTagResult']]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="tagSlug")
    def tag_slug(self) -> Optional[str]:
        return pulumi.get(self, "tag_slug")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 namespace: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionadaptiveUserResult(dict):
    def __init__(__self__, *,
                 risk_level: Optional[str] = None,
                 risk_scores: Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionadaptiveUserRiskScoreResult']] = None):
        if risk_level is not None:
            pulumi.set(__self__, "risk_level", risk_level)
        if risk_scores is not None:
            pulumi.set(__self__, "risk_scores", risk_scores)

    @property
    @pulumi.getter(name="riskLevel")
    def risk_level(self) -> Optional[str]:
        return pulumi.get(self, "risk_level")

    @property
    @pulumi.getter(name="riskScores")
    def risk_scores(self) -> Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionadaptiveUserRiskScoreResult']]:
        return pulumi.get(self, "risk_scores")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionadaptiveUserRiskScoreResult(dict):
    def __init__(__self__, *,
                 last_update_timestamp: Optional[str] = None,
                 ref: Optional[str] = None,
                 risk_level: Optional[str] = None,
                 score: Optional[int] = None,
                 source: Optional[str] = None,
                 status: Optional[str] = None,
                 value: Optional[str] = None):
        if last_update_timestamp is not None:
            pulumi.set(__self__, "last_update_timestamp", last_update_timestamp)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if risk_level is not None:
            pulumi.set(__self__, "risk_level", risk_level)
        if score is not None:
            pulumi.set(__self__, "score", score)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="lastUpdateTimestamp")
    def last_update_timestamp(self) -> Optional[str]:
        return pulumi.get(self, "last_update_timestamp")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="riskLevel")
    def risk_level(self) -> Optional[str]:
        return pulumi.get(self, "risk_level")

    @property
    @pulumi.getter
    def score(self) -> Optional[int]:
        return pulumi.get(self, "score")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensioncapabilitiesUserResult(dict):
    def __init__(__self__, *,
                 can_use_api_keys: Optional[bool] = None,
                 can_use_auth_tokens: Optional[bool] = None,
                 can_use_console: Optional[bool] = None,
                 can_use_console_password: Optional[bool] = None,
                 can_use_customer_secret_keys: Optional[bool] = None,
                 can_use_db_credentials: Optional[bool] = None,
                 can_use_oauth2client_credentials: Optional[bool] = None,
                 can_use_smtp_credentials: Optional[bool] = None):
        if can_use_api_keys is not None:
            pulumi.set(__self__, "can_use_api_keys", can_use_api_keys)
        if can_use_auth_tokens is not None:
            pulumi.set(__self__, "can_use_auth_tokens", can_use_auth_tokens)
        if can_use_console is not None:
            pulumi.set(__self__, "can_use_console", can_use_console)
        if can_use_console_password is not None:
            pulumi.set(__self__, "can_use_console_password", can_use_console_password)
        if can_use_customer_secret_keys is not None:
            pulumi.set(__self__, "can_use_customer_secret_keys", can_use_customer_secret_keys)
        if can_use_db_credentials is not None:
            pulumi.set(__self__, "can_use_db_credentials", can_use_db_credentials)
        if can_use_oauth2client_credentials is not None:
            pulumi.set(__self__, "can_use_oauth2client_credentials", can_use_oauth2client_credentials)
        if can_use_smtp_credentials is not None:
            pulumi.set(__self__, "can_use_smtp_credentials", can_use_smtp_credentials)

    @property
    @pulumi.getter(name="canUseApiKeys")
    def can_use_api_keys(self) -> Optional[bool]:
        return pulumi.get(self, "can_use_api_keys")

    @property
    @pulumi.getter(name="canUseAuthTokens")
    def can_use_auth_tokens(self) -> Optional[bool]:
        return pulumi.get(self, "can_use_auth_tokens")

    @property
    @pulumi.getter(name="canUseConsole")
    def can_use_console(self) -> Optional[bool]:
        return pulumi.get(self, "can_use_console")

    @property
    @pulumi.getter(name="canUseConsolePassword")
    def can_use_console_password(self) -> Optional[bool]:
        return pulumi.get(self, "can_use_console_password")

    @property
    @pulumi.getter(name="canUseCustomerSecretKeys")
    def can_use_customer_secret_keys(self) -> Optional[bool]:
        return pulumi.get(self, "can_use_customer_secret_keys")

    @property
    @pulumi.getter(name="canUseDbCredentials")
    def can_use_db_credentials(self) -> Optional[bool]:
        return pulumi.get(self, "can_use_db_credentials")

    @property
    @pulumi.getter(name="canUseOauth2clientCredentials")
    def can_use_oauth2client_credentials(self) -> Optional[bool]:
        return pulumi.get(self, "can_use_oauth2client_credentials")

    @property
    @pulumi.getter(name="canUseSmtpCredentials")
    def can_use_smtp_credentials(self) -> Optional[bool]:
        return pulumi.get(self, "can_use_smtp_credentials")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensiondbCredentialsUserResult(dict):
    def __init__(__self__, *,
                 db_login_attempts: Optional[int] = None,
                 db_user_name: Optional[str] = None):
        if db_login_attempts is not None:
            pulumi.set(__self__, "db_login_attempts", db_login_attempts)
        if db_user_name is not None:
            pulumi.set(__self__, "db_user_name", db_user_name)

    @property
    @pulumi.getter(name="dbLoginAttempts")
    def db_login_attempts(self) -> Optional[int]:
        return pulumi.get(self, "db_login_attempts")

    @property
    @pulumi.getter(name="dbUserName")
    def db_user_name(self) -> Optional[str]:
        return pulumi.get(self, "db_user_name")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensiondbUserUserResult(dict):
    def __init__(__self__, *,
                 db_global_roles: Optional[Sequence[str]] = None,
                 domain_level_schema: Optional[str] = None,
                 instance_level_schema: Optional[str] = None,
                 is_db_user: Optional[bool] = None,
                 password_verifiers: Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensiondbUserUserPasswordVerifierResult']] = None):
        if db_global_roles is not None:
            pulumi.set(__self__, "db_global_roles", db_global_roles)
        if domain_level_schema is not None:
            pulumi.set(__self__, "domain_level_schema", domain_level_schema)
        if instance_level_schema is not None:
            pulumi.set(__self__, "instance_level_schema", instance_level_schema)
        if is_db_user is not None:
            pulumi.set(__self__, "is_db_user", is_db_user)
        if password_verifiers is not None:
            pulumi.set(__self__, "password_verifiers", password_verifiers)

    @property
    @pulumi.getter(name="dbGlobalRoles")
    def db_global_roles(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "db_global_roles")

    @property
    @pulumi.getter(name="domainLevelSchema")
    def domain_level_schema(self) -> Optional[str]:
        return pulumi.get(self, "domain_level_schema")

    @property
    @pulumi.getter(name="instanceLevelSchema")
    def instance_level_schema(self) -> Optional[str]:
        return pulumi.get(self, "instance_level_schema")

    @property
    @pulumi.getter(name="isDbUser")
    def is_db_user(self) -> Optional[bool]:
        return pulumi.get(self, "is_db_user")

    @property
    @pulumi.getter(name="passwordVerifiers")
    def password_verifiers(self) -> Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensiondbUserUserPasswordVerifierResult']]:
        return pulumi.get(self, "password_verifiers")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensiondbUserUserPasswordVerifierResult(dict):
    def __init__(__self__, *,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionkerberosUserUserResult(dict):
    def __init__(__self__, *,
                 realm_users: Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionkerberosUserUserRealmUserResult']] = None):
        if realm_users is not None:
            pulumi.set(__self__, "realm_users", realm_users)

    @property
    @pulumi.getter(name="realmUsers")
    def realm_users(self) -> Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionkerberosUserUserRealmUserResult']]:
        return pulumi.get(self, "realm_users")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionkerberosUserUserRealmUserResult(dict):
    def __init__(__self__, *,
                 principal_name: Optional[str] = None,
                 realm_name: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if principal_name is not None:
            pulumi.set(__self__, "principal_name", principal_name)
        if realm_name is not None:
            pulumi.set(__self__, "realm_name", realm_name)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="principalName")
    def principal_name(self) -> Optional[str]:
        return pulumi.get(self, "principal_name")

    @property
    @pulumi.getter(name="realmName")
    def realm_name(self) -> Optional[str]:
        return pulumi.get(self, "realm_name")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserResult(dict):
    def __init__(__self__, *,
                 bypass_codes: Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserBypassCodeResult']] = None,
                 devices: Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserDeviceResult']] = None,
                 login_attempts: Optional[int] = None,
                 mfa_enabled_on: Optional[str] = None,
                 mfa_ignored_apps: Optional[Sequence[str]] = None,
                 mfa_status: Optional[str] = None,
                 preferred_authentication_factor: Optional[str] = None,
                 preferred_authentication_method: Optional[str] = None,
                 preferred_devices: Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserPreferredDeviceResult']] = None,
                 preferred_third_party_vendor: Optional[str] = None,
                 trusted_user_agents: Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserTrustedUserAgentResult']] = None):
        if bypass_codes is not None:
            pulumi.set(__self__, "bypass_codes", bypass_codes)
        if devices is not None:
            pulumi.set(__self__, "devices", devices)
        if login_attempts is not None:
            pulumi.set(__self__, "login_attempts", login_attempts)
        if mfa_enabled_on is not None:
            pulumi.set(__self__, "mfa_enabled_on", mfa_enabled_on)
        if mfa_ignored_apps is not None:
            pulumi.set(__self__, "mfa_ignored_apps", mfa_ignored_apps)
        if mfa_status is not None:
            pulumi.set(__self__, "mfa_status", mfa_status)
        if preferred_authentication_factor is not None:
            pulumi.set(__self__, "preferred_authentication_factor", preferred_authentication_factor)
        if preferred_authentication_method is not None:
            pulumi.set(__self__, "preferred_authentication_method", preferred_authentication_method)
        if preferred_devices is not None:
            pulumi.set(__self__, "preferred_devices", preferred_devices)
        if preferred_third_party_vendor is not None:
            pulumi.set(__self__, "preferred_third_party_vendor", preferred_third_party_vendor)
        if trusted_user_agents is not None:
            pulumi.set(__self__, "trusted_user_agents", trusted_user_agents)

    @property
    @pulumi.getter(name="bypassCodes")
    def bypass_codes(self) -> Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserBypassCodeResult']]:
        return pulumi.get(self, "bypass_codes")

    @property
    @pulumi.getter
    def devices(self) -> Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserDeviceResult']]:
        return pulumi.get(self, "devices")

    @property
    @pulumi.getter(name="loginAttempts")
    def login_attempts(self) -> Optional[int]:
        return pulumi.get(self, "login_attempts")

    @property
    @pulumi.getter(name="mfaEnabledOn")
    def mfa_enabled_on(self) -> Optional[str]:
        return pulumi.get(self, "mfa_enabled_on")

    @property
    @pulumi.getter(name="mfaIgnoredApps")
    def mfa_ignored_apps(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "mfa_ignored_apps")

    @property
    @pulumi.getter(name="mfaStatus")
    def mfa_status(self) -> Optional[str]:
        return pulumi.get(self, "mfa_status")

    @property
    @pulumi.getter(name="preferredAuthenticationFactor")
    def preferred_authentication_factor(self) -> Optional[str]:
        return pulumi.get(self, "preferred_authentication_factor")

    @property
    @pulumi.getter(name="preferredAuthenticationMethod")
    def preferred_authentication_method(self) -> Optional[str]:
        return pulumi.get(self, "preferred_authentication_method")

    @property
    @pulumi.getter(name="preferredDevices")
    def preferred_devices(self) -> Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserPreferredDeviceResult']]:
        return pulumi.get(self, "preferred_devices")

    @property
    @pulumi.getter(name="preferredThirdPartyVendor")
    def preferred_third_party_vendor(self) -> Optional[str]:
        return pulumi.get(self, "preferred_third_party_vendor")

    @property
    @pulumi.getter(name="trustedUserAgents")
    def trusted_user_agents(self) -> Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserTrustedUserAgentResult']]:
        return pulumi.get(self, "trusted_user_agents")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserBypassCodeResult(dict):
    def __init__(__self__, *,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserDeviceResult(dict):
    def __init__(__self__, *,
                 authentication_method: Optional[str] = None,
                 display: Optional[str] = None,
                 factor_status: Optional[str] = None,
                 factor_type: Optional[str] = None,
                 last_sync_time: Optional[str] = None,
                 ref: Optional[str] = None,
                 status: Optional[str] = None,
                 third_party_vendor_name: Optional[str] = None,
                 value: Optional[str] = None):
        if authentication_method is not None:
            pulumi.set(__self__, "authentication_method", authentication_method)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if factor_status is not None:
            pulumi.set(__self__, "factor_status", factor_status)
        if factor_type is not None:
            pulumi.set(__self__, "factor_type", factor_type)
        if last_sync_time is not None:
            pulumi.set(__self__, "last_sync_time", last_sync_time)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if third_party_vendor_name is not None:
            pulumi.set(__self__, "third_party_vendor_name", third_party_vendor_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="authenticationMethod")
    def authentication_method(self) -> Optional[str]:
        return pulumi.get(self, "authentication_method")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter(name="factorStatus")
    def factor_status(self) -> Optional[str]:
        return pulumi.get(self, "factor_status")

    @property
    @pulumi.getter(name="factorType")
    def factor_type(self) -> Optional[str]:
        return pulumi.get(self, "factor_type")

    @property
    @pulumi.getter(name="lastSyncTime")
    def last_sync_time(self) -> Optional[str]:
        return pulumi.get(self, "last_sync_time")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="thirdPartyVendorName")
    def third_party_vendor_name(self) -> Optional[str]:
        return pulumi.get(self, "third_party_vendor_name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserPreferredDeviceResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserTrustedUserAgentResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserResult(dict):
    def __init__(__self__, *,
                 applicable_password_policies: Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserApplicablePasswordPolicyResult']] = None,
                 cant_change: Optional[bool] = None,
                 cant_expire: Optional[bool] = None,
                 expired: Optional[bool] = None,
                 last_failed_validation_date: Optional[str] = None,
                 last_successful_set_date: Optional[str] = None,
                 last_successful_validation_date: Optional[str] = None,
                 must_change: Optional[bool] = None):
        if applicable_password_policies is not None:
            pulumi.set(__self__, "applicable_password_policies", applicable_password_policies)
        if cant_change is not None:
            pulumi.set(__self__, "cant_change", cant_change)
        if cant_expire is not None:
            pulumi.set(__self__, "cant_expire", cant_expire)
        if expired is not None:
            pulumi.set(__self__, "expired", expired)
        if last_failed_validation_date is not None:
            pulumi.set(__self__, "last_failed_validation_date", last_failed_validation_date)
        if last_successful_set_date is not None:
            pulumi.set(__self__, "last_successful_set_date", last_successful_set_date)
        if last_successful_validation_date is not None:
            pulumi.set(__self__, "last_successful_validation_date", last_successful_validation_date)
        if must_change is not None:
            pulumi.set(__self__, "must_change", must_change)

    @property
    @pulumi.getter(name="applicablePasswordPolicies")
    def applicable_password_policies(self) -> Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserApplicablePasswordPolicyResult']]:
        return pulumi.get(self, "applicable_password_policies")

    @property
    @pulumi.getter(name="cantChange")
    def cant_change(self) -> Optional[bool]:
        return pulumi.get(self, "cant_change")

    @property
    @pulumi.getter(name="cantExpire")
    def cant_expire(self) -> Optional[bool]:
        return pulumi.get(self, "cant_expire")

    @property
    @pulumi.getter
    def expired(self) -> Optional[bool]:
        return pulumi.get(self, "expired")

    @property
    @pulumi.getter(name="lastFailedValidationDate")
    def last_failed_validation_date(self) -> Optional[str]:
        return pulumi.get(self, "last_failed_validation_date")

    @property
    @pulumi.getter(name="lastSuccessfulSetDate")
    def last_successful_set_date(self) -> Optional[str]:
        return pulumi.get(self, "last_successful_set_date")

    @property
    @pulumi.getter(name="lastSuccessfulValidationDate")
    def last_successful_validation_date(self) -> Optional[str]:
        return pulumi.get(self, "last_successful_validation_date")

    @property
    @pulumi.getter(name="mustChange")
    def must_change(self) -> Optional[bool]:
        return pulumi.get(self, "must_change")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserApplicablePasswordPolicyResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 priority: Optional[int] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionpasswordlessUserResult(dict):
    def __init__(__self__, *,
                 factor_identifiers: Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionpasswordlessUserFactorIdentifierResult']] = None,
                 factor_method: Optional[str] = None,
                 factor_type: Optional[str] = None):
        if factor_identifiers is not None:
            pulumi.set(__self__, "factor_identifiers", factor_identifiers)
        if factor_method is not None:
            pulumi.set(__self__, "factor_method", factor_method)
        if factor_type is not None:
            pulumi.set(__self__, "factor_type", factor_type)

    @property
    @pulumi.getter(name="factorIdentifiers")
    def factor_identifiers(self) -> Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionpasswordlessUserFactorIdentifierResult']]:
        return pulumi.get(self, "factor_identifiers")

    @property
    @pulumi.getter(name="factorMethod")
    def factor_method(self) -> Optional[str]:
        return pulumi.get(self, "factor_method")

    @property
    @pulumi.getter(name="factorType")
    def factor_type(self) -> Optional[str]:
        return pulumi.get(self, "factor_type")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionpasswordlessUserFactorIdentifierResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionposixUserResult(dict):
    def __init__(__self__, *,
                 gecos: Optional[str] = None,
                 gid_number: Optional[int] = None,
                 home_directory: Optional[str] = None,
                 login_shell: Optional[str] = None,
                 uid_number: Optional[int] = None):
        if gecos is not None:
            pulumi.set(__self__, "gecos", gecos)
        if gid_number is not None:
            pulumi.set(__self__, "gid_number", gid_number)
        if home_directory is not None:
            pulumi.set(__self__, "home_directory", home_directory)
        if login_shell is not None:
            pulumi.set(__self__, "login_shell", login_shell)
        if uid_number is not None:
            pulumi.set(__self__, "uid_number", uid_number)

    @property
    @pulumi.getter
    def gecos(self) -> Optional[str]:
        return pulumi.get(self, "gecos")

    @property
    @pulumi.getter(name="gidNumber")
    def gid_number(self) -> Optional[int]:
        return pulumi.get(self, "gid_number")

    @property
    @pulumi.getter(name="homeDirectory")
    def home_directory(self) -> Optional[str]:
        return pulumi.get(self, "home_directory")

    @property
    @pulumi.getter(name="loginShell")
    def login_shell(self) -> Optional[str]:
        return pulumi.get(self, "login_shell")

    @property
    @pulumi.getter(name="uidNumber")
    def uid_number(self) -> Optional[int]:
        return pulumi.get(self, "uid_number")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUserResult(dict):
    def __init__(__self__, *,
                 sec_questions: Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUserSecQuestionResult']] = None):
        if sec_questions is not None:
            pulumi.set(__self__, "sec_questions", sec_questions)

    @property
    @pulumi.getter(name="secQuestions")
    def sec_questions(self) -> Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUserSecQuestionResult']]:
        return pulumi.get(self, "sec_questions")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUserSecQuestionResult(dict):
    def __init__(__self__, *,
                 answer: Optional[str] = None,
                 hint_text: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if answer is not None:
            pulumi.set(__self__, "answer", answer)
        if hint_text is not None:
            pulumi.set(__self__, "hint_text", hint_text)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def answer(self) -> Optional[str]:
        return pulumi.get(self, "answer")

    @property
    @pulumi.getter(name="hintText")
    def hint_text(self) -> Optional[str]:
        return pulumi.get(self, "hint_text")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionselfChangeUserResult(dict):
    def __init__(__self__, *,
                 allow_self_change: Optional[bool] = None):
        if allow_self_change is not None:
            pulumi.set(__self__, "allow_self_change", allow_self_change)

    @property
    @pulumi.getter(name="allowSelfChange")
    def allow_self_change(self) -> Optional[bool]:
        return pulumi.get(self, "allow_self_change")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionselfRegistrationUserResult(dict):
    def __init__(__self__, *,
                 consent_granted: Optional[bool] = None,
                 self_registration_profiles: Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionselfRegistrationUserSelfRegistrationProfileResult']] = None,
                 user_token: Optional[str] = None):
        if consent_granted is not None:
            pulumi.set(__self__, "consent_granted", consent_granted)
        if self_registration_profiles is not None:
            pulumi.set(__self__, "self_registration_profiles", self_registration_profiles)
        if user_token is not None:
            pulumi.set(__self__, "user_token", user_token)

    @property
    @pulumi.getter(name="consentGranted")
    def consent_granted(self) -> Optional[bool]:
        return pulumi.get(self, "consent_granted")

    @property
    @pulumi.getter(name="selfRegistrationProfiles")
    def self_registration_profiles(self) -> Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionselfRegistrationUserSelfRegistrationProfileResult']]:
        return pulumi.get(self, "self_registration_profiles")

    @property
    @pulumi.getter(name="userToken")
    def user_token(self) -> Optional[str]:
        return pulumi.get(self, "user_token")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionselfRegistrationUserSelfRegistrationProfileResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionsffUserResult(dict):
    def __init__(__self__, *,
                 sff_auth_keys: Optional[str] = None):
        if sff_auth_keys is not None:
            pulumi.set(__self__, "sff_auth_keys", sff_auth_keys)

    @property
    @pulumi.getter(name="sffAuthKeys")
    def sff_auth_keys(self) -> Optional[str]:
        return pulumi.get(self, "sff_auth_keys")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionsocialAccountUserResult(dict):
    def __init__(__self__, *,
                 social_accounts: Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionsocialAccountUserSocialAccountResult']] = None):
        if social_accounts is not None:
            pulumi.set(__self__, "social_accounts", social_accounts)

    @property
    @pulumi.getter(name="socialAccounts")
    def social_accounts(self) -> Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionsocialAccountUserSocialAccountResult']]:
        return pulumi.get(self, "social_accounts")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionsocialAccountUserSocialAccountResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensiontermsOfUseUserResult(dict):
    def __init__(__self__, *,
                 terms_of_use_consents: Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensiontermsOfUseUserTermsOfUseConsentResult']] = None):
        if terms_of_use_consents is not None:
            pulumi.set(__self__, "terms_of_use_consents", terms_of_use_consents)

    @property
    @pulumi.getter(name="termsOfUseConsents")
    def terms_of_use_consents(self) -> Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensiontermsOfUseUserTermsOfUseConsentResult']]:
        return pulumi.get(self, "terms_of_use_consents")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensiontermsOfUseUserTermsOfUseConsentResult(dict):
    def __init__(__self__, *,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserResult(dict):
    def __init__(__self__, *,
                 api_keys: Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserApiKeyResult']] = None,
                 auth_tokens: Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserAuthTokenResult']] = None,
                 customer_secret_keys: Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserCustomerSecretKeyResult']] = None,
                 db_credentials: Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserDbCredentialResult']] = None,
                 o_auth2client_credentials: Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserOAuth2clientCredentialResult']] = None,
                 smtp_credentials: Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserSmtpCredentialResult']] = None):
        if api_keys is not None:
            pulumi.set(__self__, "api_keys", api_keys)
        if auth_tokens is not None:
            pulumi.set(__self__, "auth_tokens", auth_tokens)
        if customer_secret_keys is not None:
            pulumi.set(__self__, "customer_secret_keys", customer_secret_keys)
        if db_credentials is not None:
            pulumi.set(__self__, "db_credentials", db_credentials)
        if o_auth2client_credentials is not None:
            pulumi.set(__self__, "o_auth2client_credentials", o_auth2client_credentials)
        if smtp_credentials is not None:
            pulumi.set(__self__, "smtp_credentials", smtp_credentials)

    @property
    @pulumi.getter(name="apiKeys")
    def api_keys(self) -> Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserApiKeyResult']]:
        return pulumi.get(self, "api_keys")

    @property
    @pulumi.getter(name="authTokens")
    def auth_tokens(self) -> Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserAuthTokenResult']]:
        return pulumi.get(self, "auth_tokens")

    @property
    @pulumi.getter(name="customerSecretKeys")
    def customer_secret_keys(self) -> Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserCustomerSecretKeyResult']]:
        return pulumi.get(self, "customer_secret_keys")

    @property
    @pulumi.getter(name="dbCredentials")
    def db_credentials(self) -> Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserDbCredentialResult']]:
        return pulumi.get(self, "db_credentials")

    @property
    @pulumi.getter(name="oAuth2clientCredentials")
    def o_auth2client_credentials(self) -> Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserOAuth2clientCredentialResult']]:
        return pulumi.get(self, "o_auth2client_credentials")

    @property
    @pulumi.getter(name="smtpCredentials")
    def smtp_credentials(self) -> Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserSmtpCredentialResult']]:
        return pulumi.get(self, "smtp_credentials")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserApiKeyResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserAuthTokenResult(dict):
    def __init__(__self__, *,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserCustomerSecretKeyResult(dict):
    def __init__(__self__, *,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserDbCredentialResult(dict):
    def __init__(__self__, *,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserOAuth2clientCredentialResult(dict):
    def __init__(__self__, *,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserSmtpCredentialResult(dict):
    def __init__(__self__, *,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserResult(dict):
    def __init__(__self__, *,
                 last_failed_login_date: Optional[str] = None,
                 last_successful_login_date: Optional[str] = None,
                 lockeds: Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLockedResult']] = None,
                 login_attempts: Optional[int] = None,
                 max_concurrent_sessions: Optional[int] = None,
                 previous_successful_login_date: Optional[str] = None,
                 recovery_attempts: Optional[int] = None,
                 recovery_enroll_attempts: Optional[int] = None,
                 recovery_lockeds: Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserRecoveryLockedResult']] = None):
        if last_failed_login_date is not None:
            pulumi.set(__self__, "last_failed_login_date", last_failed_login_date)
        if last_successful_login_date is not None:
            pulumi.set(__self__, "last_successful_login_date", last_successful_login_date)
        if lockeds is not None:
            pulumi.set(__self__, "lockeds", lockeds)
        if login_attempts is not None:
            pulumi.set(__self__, "login_attempts", login_attempts)
        if max_concurrent_sessions is not None:
            pulumi.set(__self__, "max_concurrent_sessions", max_concurrent_sessions)
        if previous_successful_login_date is not None:
            pulumi.set(__self__, "previous_successful_login_date", previous_successful_login_date)
        if recovery_attempts is not None:
            pulumi.set(__self__, "recovery_attempts", recovery_attempts)
        if recovery_enroll_attempts is not None:
            pulumi.set(__self__, "recovery_enroll_attempts", recovery_enroll_attempts)
        if recovery_lockeds is not None:
            pulumi.set(__self__, "recovery_lockeds", recovery_lockeds)

    @property
    @pulumi.getter(name="lastFailedLoginDate")
    def last_failed_login_date(self) -> Optional[str]:
        return pulumi.get(self, "last_failed_login_date")

    @property
    @pulumi.getter(name="lastSuccessfulLoginDate")
    def last_successful_login_date(self) -> Optional[str]:
        return pulumi.get(self, "last_successful_login_date")

    @property
    @pulumi.getter
    def lockeds(self) -> Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLockedResult']]:
        return pulumi.get(self, "lockeds")

    @property
    @pulumi.getter(name="loginAttempts")
    def login_attempts(self) -> Optional[int]:
        return pulumi.get(self, "login_attempts")

    @property
    @pulumi.getter(name="maxConcurrentSessions")
    def max_concurrent_sessions(self) -> Optional[int]:
        return pulumi.get(self, "max_concurrent_sessions")

    @property
    @pulumi.getter(name="previousSuccessfulLoginDate")
    def previous_successful_login_date(self) -> Optional[str]:
        return pulumi.get(self, "previous_successful_login_date")

    @property
    @pulumi.getter(name="recoveryAttempts")
    def recovery_attempts(self) -> Optional[int]:
        return pulumi.get(self, "recovery_attempts")

    @property
    @pulumi.getter(name="recoveryEnrollAttempts")
    def recovery_enroll_attempts(self) -> Optional[int]:
        return pulumi.get(self, "recovery_enroll_attempts")

    @property
    @pulumi.getter(name="recoveryLockeds")
    def recovery_lockeds(self) -> Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserRecoveryLockedResult']]:
        return pulumi.get(self, "recovery_lockeds")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLockedResult(dict):
    def __init__(__self__, *,
                 expired: Optional[bool] = None,
                 lock_date: Optional[str] = None,
                 on: Optional[bool] = None,
                 reason: Optional[int] = None):
        if expired is not None:
            pulumi.set(__self__, "expired", expired)
        if lock_date is not None:
            pulumi.set(__self__, "lock_date", lock_date)
        if on is not None:
            pulumi.set(__self__, "on", on)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def expired(self) -> Optional[bool]:
        return pulumi.get(self, "expired")

    @property
    @pulumi.getter(name="lockDate")
    def lock_date(self) -> Optional[str]:
        return pulumi.get(self, "lock_date")

    @property
    @pulumi.getter
    def on(self) -> Optional[bool]:
        return pulumi.get(self, "on")

    @property
    @pulumi.getter
    def reason(self) -> Optional[int]:
        return pulumi.get(self, "reason")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserRecoveryLockedResult(dict):
    def __init__(__self__, *,
                 lock_date: Optional[str] = None,
                 on: Optional[bool] = None):
        if lock_date is not None:
            pulumi.set(__self__, "lock_date", lock_date)
        if on is not None:
            pulumi.set(__self__, "on", on)

    @property
    @pulumi.getter(name="lockDate")
    def lock_date(self) -> Optional[str]:
        return pulumi.get(self, "lock_date")

    @property
    @pulumi.getter
    def on(self) -> Optional[bool]:
        return pulumi.get(self, "on")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserResult(dict):
    def __init__(__self__, *,
                 account_recovery_required: Optional[bool] = None,
                 accounts: Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserAccountResult']] = None,
                 app_roles: Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserAppRoleResult']] = None,
                 applicable_authentication_target_apps: Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserApplicableAuthenticationTargetAppResult']] = None,
                 bypass_notification: Optional[bool] = None,
                 creation_mechanism: Optional[str] = None,
                 delegated_authentication_target_apps: Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserDelegatedAuthenticationTargetAppResult']] = None,
                 do_not_show_getting_started: Optional[bool] = None,
                 grants: Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserGrantResult']] = None,
                 group_membership_last_modified: Optional[str] = None,
                 idcs_app_roles_limited_to_groups: Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserIdcsAppRolesLimitedToGroupResult']] = None,
                 is_account_recovery_enrolled: Optional[bool] = None,
                 is_authentication_delegated: Optional[bool] = None,
                 is_federated_user: Optional[bool] = None,
                 is_group_membership_normalized: Optional[bool] = None,
                 is_group_membership_synced_to_users_groups: Optional[bool] = None,
                 notification_email_template_id: Optional[str] = None,
                 preferred_ui_landing_page: Optional[str] = None,
                 status: Optional[str] = None,
                 support_accounts: Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserSupportAccountResult']] = None,
                 synced_from_apps: Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserSyncedFromAppResult']] = None,
                 user_flow_controlled_by_external_client: Optional[bool] = None,
                 user_provider: Optional[str] = None,
                 user_tokens: Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserUserTokenResult']] = None):
        if account_recovery_required is not None:
            pulumi.set(__self__, "account_recovery_required", account_recovery_required)
        if accounts is not None:
            pulumi.set(__self__, "accounts", accounts)
        if app_roles is not None:
            pulumi.set(__self__, "app_roles", app_roles)
        if applicable_authentication_target_apps is not None:
            pulumi.set(__self__, "applicable_authentication_target_apps", applicable_authentication_target_apps)
        if bypass_notification is not None:
            pulumi.set(__self__, "bypass_notification", bypass_notification)
        if creation_mechanism is not None:
            pulumi.set(__self__, "creation_mechanism", creation_mechanism)
        if delegated_authentication_target_apps is not None:
            pulumi.set(__self__, "delegated_authentication_target_apps", delegated_authentication_target_apps)
        if do_not_show_getting_started is not None:
            pulumi.set(__self__, "do_not_show_getting_started", do_not_show_getting_started)
        if grants is not None:
            pulumi.set(__self__, "grants", grants)
        if group_membership_last_modified is not None:
            pulumi.set(__self__, "group_membership_last_modified", group_membership_last_modified)
        if idcs_app_roles_limited_to_groups is not None:
            pulumi.set(__self__, "idcs_app_roles_limited_to_groups", idcs_app_roles_limited_to_groups)
        if is_account_recovery_enrolled is not None:
            pulumi.set(__self__, "is_account_recovery_enrolled", is_account_recovery_enrolled)
        if is_authentication_delegated is not None:
            pulumi.set(__self__, "is_authentication_delegated", is_authentication_delegated)
        if is_federated_user is not None:
            pulumi.set(__self__, "is_federated_user", is_federated_user)
        if is_group_membership_normalized is not None:
            pulumi.set(__self__, "is_group_membership_normalized", is_group_membership_normalized)
        if is_group_membership_synced_to_users_groups is not None:
            pulumi.set(__self__, "is_group_membership_synced_to_users_groups", is_group_membership_synced_to_users_groups)
        if notification_email_template_id is not None:
            pulumi.set(__self__, "notification_email_template_id", notification_email_template_id)
        if preferred_ui_landing_page is not None:
            pulumi.set(__self__, "preferred_ui_landing_page", preferred_ui_landing_page)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if support_accounts is not None:
            pulumi.set(__self__, "support_accounts", support_accounts)
        if synced_from_apps is not None:
            pulumi.set(__self__, "synced_from_apps", synced_from_apps)
        if user_flow_controlled_by_external_client is not None:
            pulumi.set(__self__, "user_flow_controlled_by_external_client", user_flow_controlled_by_external_client)
        if user_provider is not None:
            pulumi.set(__self__, "user_provider", user_provider)
        if user_tokens is not None:
            pulumi.set(__self__, "user_tokens", user_tokens)

    @property
    @pulumi.getter(name="accountRecoveryRequired")
    def account_recovery_required(self) -> Optional[bool]:
        return pulumi.get(self, "account_recovery_required")

    @property
    @pulumi.getter
    def accounts(self) -> Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserAccountResult']]:
        return pulumi.get(self, "accounts")

    @property
    @pulumi.getter(name="appRoles")
    def app_roles(self) -> Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserAppRoleResult']]:
        return pulumi.get(self, "app_roles")

    @property
    @pulumi.getter(name="applicableAuthenticationTargetApps")
    def applicable_authentication_target_apps(self) -> Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserApplicableAuthenticationTargetAppResult']]:
        return pulumi.get(self, "applicable_authentication_target_apps")

    @property
    @pulumi.getter(name="bypassNotification")
    def bypass_notification(self) -> Optional[bool]:
        return pulumi.get(self, "bypass_notification")

    @property
    @pulumi.getter(name="creationMechanism")
    def creation_mechanism(self) -> Optional[str]:
        return pulumi.get(self, "creation_mechanism")

    @property
    @pulumi.getter(name="delegatedAuthenticationTargetApps")
    def delegated_authentication_target_apps(self) -> Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserDelegatedAuthenticationTargetAppResult']]:
        return pulumi.get(self, "delegated_authentication_target_apps")

    @property
    @pulumi.getter(name="doNotShowGettingStarted")
    def do_not_show_getting_started(self) -> Optional[bool]:
        return pulumi.get(self, "do_not_show_getting_started")

    @property
    @pulumi.getter
    def grants(self) -> Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserGrantResult']]:
        return pulumi.get(self, "grants")

    @property
    @pulumi.getter(name="groupMembershipLastModified")
    def group_membership_last_modified(self) -> Optional[str]:
        return pulumi.get(self, "group_membership_last_modified")

    @property
    @pulumi.getter(name="idcsAppRolesLimitedToGroups")
    def idcs_app_roles_limited_to_groups(self) -> Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserIdcsAppRolesLimitedToGroupResult']]:
        return pulumi.get(self, "idcs_app_roles_limited_to_groups")

    @property
    @pulumi.getter(name="isAccountRecoveryEnrolled")
    def is_account_recovery_enrolled(self) -> Optional[bool]:
        return pulumi.get(self, "is_account_recovery_enrolled")

    @property
    @pulumi.getter(name="isAuthenticationDelegated")
    def is_authentication_delegated(self) -> Optional[bool]:
        return pulumi.get(self, "is_authentication_delegated")

    @property
    @pulumi.getter(name="isFederatedUser")
    def is_federated_user(self) -> Optional[bool]:
        return pulumi.get(self, "is_federated_user")

    @property
    @pulumi.getter(name="isGroupMembershipNormalized")
    def is_group_membership_normalized(self) -> Optional[bool]:
        return pulumi.get(self, "is_group_membership_normalized")

    @property
    @pulumi.getter(name="isGroupMembershipSyncedToUsersGroups")
    def is_group_membership_synced_to_users_groups(self) -> Optional[bool]:
        return pulumi.get(self, "is_group_membership_synced_to_users_groups")

    @property
    @pulumi.getter(name="notificationEmailTemplateId")
    def notification_email_template_id(self) -> Optional[str]:
        return pulumi.get(self, "notification_email_template_id")

    @property
    @pulumi.getter(name="preferredUiLandingPage")
    def preferred_ui_landing_page(self) -> Optional[str]:
        return pulumi.get(self, "preferred_ui_landing_page")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="supportAccounts")
    def support_accounts(self) -> Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserSupportAccountResult']]:
        return pulumi.get(self, "support_accounts")

    @property
    @pulumi.getter(name="syncedFromApps")
    def synced_from_apps(self) -> Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserSyncedFromAppResult']]:
        return pulumi.get(self, "synced_from_apps")

    @property
    @pulumi.getter(name="userFlowControlledByExternalClient")
    def user_flow_controlled_by_external_client(self) -> Optional[bool]:
        return pulumi.get(self, "user_flow_controlled_by_external_client")

    @property
    @pulumi.getter(name="userProvider")
    def user_provider(self) -> Optional[str]:
        return pulumi.get(self, "user_provider")

    @property
    @pulumi.getter(name="userTokens")
    def user_tokens(self) -> Optional[Sequence['outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserUserTokenResult']]:
        return pulumi.get(self, "user_tokens")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserAccountResult(dict):
    def __init__(__self__, *,
                 active: Optional[bool] = None,
                 app_id: Optional[str] = None,
                 name: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if active is not None:
            pulumi.set(__self__, "active", active)
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def active(self) -> Optional[bool]:
        return pulumi.get(self, "active")

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[str]:
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserAppRoleResult(dict):
    def __init__(__self__, *,
                 admin_role: Optional[bool] = None,
                 app_id: Optional[str] = None,
                 app_name: Optional[str] = None,
                 display: Optional[str] = None,
                 legacy_group_name: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if admin_role is not None:
            pulumi.set(__self__, "admin_role", admin_role)
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if app_name is not None:
            pulumi.set(__self__, "app_name", app_name)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if legacy_group_name is not None:
            pulumi.set(__self__, "legacy_group_name", legacy_group_name)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="adminRole")
    def admin_role(self) -> Optional[bool]:
        return pulumi.get(self, "admin_role")

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[str]:
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="appName")
    def app_name(self) -> Optional[str]:
        return pulumi.get(self, "app_name")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter(name="legacyGroupName")
    def legacy_group_name(self) -> Optional[str]:
        return pulumi.get(self, "legacy_group_name")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserApplicableAuthenticationTargetAppResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ref: Optional[str] = None,
                 target_request_timeout: Optional[int] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if target_request_timeout is not None:
            pulumi.set(__self__, "target_request_timeout", target_request_timeout)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="targetRequestTimeout")
    def target_request_timeout(self) -> Optional[int]:
        return pulumi.get(self, "target_request_timeout")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserDelegatedAuthenticationTargetAppResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserGrantResult(dict):
    def __init__(__self__, *,
                 app_id: Optional[str] = None,
                 grant_mechanism: Optional[str] = None,
                 grantor_id: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if grant_mechanism is not None:
            pulumi.set(__self__, "grant_mechanism", grant_mechanism)
        if grantor_id is not None:
            pulumi.set(__self__, "grantor_id", grantor_id)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[str]:
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="grantMechanism")
    def grant_mechanism(self) -> Optional[str]:
        return pulumi.get(self, "grant_mechanism")

    @property
    @pulumi.getter(name="grantorId")
    def grantor_id(self) -> Optional[str]:
        return pulumi.get(self, "grantor_id")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserIdcsAppRolesLimitedToGroupResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 idcs_app_role_id: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if idcs_app_role_id is not None:
            pulumi.set(__self__, "idcs_app_role_id", idcs_app_role_id)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter(name="idcsAppRoleId")
    def idcs_app_role_id(self) -> Optional[str]:
        return pulumi.get(self, "idcs_app_role_id")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserSupportAccountResult(dict):
    def __init__(__self__, *,
                 ocid: Optional[str] = None,
                 ref: Optional[str] = None,
                 user_id: Optional[str] = None,
                 user_provider: Optional[str] = None,
                 value: Optional[str] = None):
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)
        if user_provider is not None:
            pulumi.set(__self__, "user_provider", user_provider)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[str]:
        return pulumi.get(self, "user_id")

    @property
    @pulumi.getter(name="userProvider")
    def user_provider(self) -> Optional[str]:
        return pulumi.get(self, "user_provider")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserSyncedFromAppResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 ref: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserUserTokenResult(dict):
    def __init__(__self__, *,
                 ref: Optional[str] = None,
                 value: Optional[str] = None):
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainsUsersUserX509certificateResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 primary: Optional[bool] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def primary(self) -> Optional[bool]:
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDynamicGroupsDynamicGroupResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 inactive_state: Optional[str] = None,
                 matching_rule: Optional[str] = None,
                 name: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if inactive_state is not None:
            pulumi.set(__self__, "inactive_state", inactive_state)
        if matching_rule is not None:
            pulumi.set(__self__, "matching_rule", matching_rule)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inactiveState")
    def inactive_state(self) -> Optional[str]:
        return pulumi.get(self, "inactive_state")

    @property
    @pulumi.getter(name="matchingRule")
    def matching_rule(self) -> Optional[str]:
        return pulumi.get(self, "matching_rule")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetDynamicGroupsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetFaultDomainsFaultDomainResult(dict):
    def __init__(__self__, *,
                 availability_domain: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None):
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFaultDomainsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetGroupsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetGroupsGroupResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 inactive_state: Optional[str] = None,
                 name: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if inactive_state is not None:
            pulumi.set(__self__, "inactive_state", inactive_state)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inactiveState")
    def inactive_state(self) -> Optional[str]:
        return pulumi.get(self, "inactive_state")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetIamWorkRequestErrorsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetIamWorkRequestErrorsIamWorkRequestErrorResult(dict):
    def __init__(__self__, *,
                 code: Optional[str] = None,
                 message: Optional[str] = None,
                 timestamp: Optional[str] = None):
        if code is not None:
            pulumi.set(__self__, "code", code)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if timestamp is not None:
            pulumi.set(__self__, "timestamp", timestamp)

    @property
    @pulumi.getter
    def code(self) -> Optional[str]:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def timestamp(self) -> Optional[str]:
        return pulumi.get(self, "timestamp")


@pulumi.output_type
class GetIamWorkRequestLogsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetIamWorkRequestLogsIamWorkRequestLogResult(dict):
    def __init__(__self__, *,
                 message: Optional[str] = None,
                 timestamp: Optional[str] = None):
        if message is not None:
            pulumi.set(__self__, "message", message)
        if timestamp is not None:
            pulumi.set(__self__, "timestamp", timestamp)

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def timestamp(self) -> Optional[str]:
        return pulumi.get(self, "timestamp")


@pulumi.output_type
class GetIamWorkRequestResourceResult(dict):
    def __init__(__self__, *,
                 action_type: Optional[str] = None,
                 entity_type: Optional[str] = None,
                 entity_uri: Optional[str] = None,
                 identifier: Optional[str] = None):
        if action_type is not None:
            pulumi.set(__self__, "action_type", action_type)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if entity_uri is not None:
            pulumi.set(__self__, "entity_uri", entity_uri)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> Optional[str]:
        return pulumi.get(self, "action_type")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[str]:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="entityUri")
    def entity_uri(self) -> Optional[str]:
        return pulumi.get(self, "entity_uri")

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        return pulumi.get(self, "identifier")


@pulumi.output_type
class GetIamWorkRequestsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetIamWorkRequestsIamWorkRequestResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 id: Optional[str] = None,
                 operation_type: Optional[str] = None,
                 percent_complete: Optional[float] = None,
                 resources: Optional[Sequence['outputs.GetIamWorkRequestsIamWorkRequestResourceResult']] = None,
                 status: Optional[str] = None,
                 time_accepted: Optional[str] = None,
                 time_finished: Optional[str] = None,
                 time_started: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if operation_type is not None:
            pulumi.set(__self__, "operation_type", operation_type)
        if percent_complete is not None:
            pulumi.set(__self__, "percent_complete", percent_complete)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if time_accepted is not None:
            pulumi.set(__self__, "time_accepted", time_accepted)
        if time_finished is not None:
            pulumi.set(__self__, "time_finished", time_finished)
        if time_started is not None:
            pulumi.set(__self__, "time_started", time_started)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="operationType")
    def operation_type(self) -> Optional[str]:
        return pulumi.get(self, "operation_type")

    @property
    @pulumi.getter(name="percentComplete")
    def percent_complete(self) -> Optional[float]:
        return pulumi.get(self, "percent_complete")

    @property
    @pulumi.getter
    def resources(self) -> Optional[Sequence['outputs.GetIamWorkRequestsIamWorkRequestResourceResult']]:
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="timeAccepted")
    def time_accepted(self) -> Optional[str]:
        return pulumi.get(self, "time_accepted")

    @property
    @pulumi.getter(name="timeFinished")
    def time_finished(self) -> Optional[str]:
        return pulumi.get(self, "time_finished")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> Optional[str]:
        return pulumi.get(self, "time_started")


@pulumi.output_type
class GetIamWorkRequestsIamWorkRequestResourceResult(dict):
    def __init__(__self__, *,
                 action_type: Optional[str] = None,
                 entity_type: Optional[str] = None,
                 entity_uri: Optional[str] = None,
                 identifier: Optional[str] = None):
        if action_type is not None:
            pulumi.set(__self__, "action_type", action_type)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if entity_uri is not None:
            pulumi.set(__self__, "entity_uri", entity_uri)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> Optional[str]:
        return pulumi.get(self, "action_type")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[str]:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="entityUri")
    def entity_uri(self) -> Optional[str]:
        return pulumi.get(self, "entity_uri")

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        return pulumi.get(self, "identifier")


@pulumi.output_type
class GetIdentityProviderGroupsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetIdentityProviderGroupsIdentityProviderGroupResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 external_identifier: Optional[str] = None,
                 id: Optional[str] = None,
                 identity_provider_id: Optional[str] = None,
                 name: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_modified: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if external_identifier is not None:
            pulumi.set(__self__, "external_identifier", external_identifier)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if identity_provider_id is not None:
            pulumi.set(__self__, "identity_provider_id", identity_provider_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_modified is not None:
            pulumi.set(__self__, "time_modified", time_modified)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="externalIdentifier")
    def external_identifier(self) -> Optional[str]:
        return pulumi.get(self, "external_identifier")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="identityProviderId")
    def identity_provider_id(self) -> Optional[str]:
        return pulumi.get(self, "identity_provider_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeModified")
    def time_modified(self) -> Optional[str]:
        return pulumi.get(self, "time_modified")


@pulumi.output_type
class GetIdentityProvidersFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetIdentityProvidersIdentityProviderResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 freeform_attributes: Optional[Mapping[str, Any]] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 inactive_state: Optional[str] = None,
                 metadata: Optional[str] = None,
                 metadata_url: Optional[str] = None,
                 name: Optional[str] = None,
                 product_type: Optional[str] = None,
                 protocol: Optional[str] = None,
                 redirect_url: Optional[str] = None,
                 signing_certificate: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if freeform_attributes is not None:
            pulumi.set(__self__, "freeform_attributes", freeform_attributes)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if inactive_state is not None:
            pulumi.set(__self__, "inactive_state", inactive_state)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if metadata_url is not None:
            pulumi.set(__self__, "metadata_url", metadata_url)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if product_type is not None:
            pulumi.set(__self__, "product_type", product_type)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if signing_certificate is not None:
            pulumi.set(__self__, "signing_certificate", signing_certificate)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="freeformAttributes")
    def freeform_attributes(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_attributes")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inactiveState")
    def inactive_state(self) -> Optional[str]:
        return pulumi.get(self, "inactive_state")

    @property
    @pulumi.getter
    def metadata(self) -> Optional[str]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="metadataUrl")
    def metadata_url(self) -> Optional[str]:
        return pulumi.get(self, "metadata_url")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="productType")
    def product_type(self) -> Optional[str]:
        return pulumi.get(self, "product_type")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[str]:
        return pulumi.get(self, "redirect_url")

    @property
    @pulumi.getter(name="signingCertificate")
    def signing_certificate(self) -> Optional[str]:
        return pulumi.get(self, "signing_certificate")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetIdpGroupMappingsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetIdpGroupMappingsIdpGroupMappingResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 group_id: Optional[str] = None,
                 id: Optional[str] = None,
                 identity_provider_id: Optional[str] = None,
                 idp_group_name: Optional[str] = None,
                 inactive_state: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if identity_provider_id is not None:
            pulumi.set(__self__, "identity_provider_id", identity_provider_id)
        if idp_group_name is not None:
            pulumi.set(__self__, "idp_group_name", idp_group_name)
        if inactive_state is not None:
            pulumi.set(__self__, "inactive_state", inactive_state)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[str]:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="identityProviderId")
    def identity_provider_id(self) -> Optional[str]:
        return pulumi.get(self, "identity_provider_id")

    @property
    @pulumi.getter(name="idpGroupName")
    def idp_group_name(self) -> Optional[str]:
        return pulumi.get(self, "idp_group_name")

    @property
    @pulumi.getter(name="inactiveState")
    def inactive_state(self) -> Optional[str]:
        return pulumi.get(self, "inactive_state")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetNetworkSourceVirtualSourceListResult(dict):
    def __init__(__self__, *,
                 ip_ranges: Optional[Sequence[str]] = None,
                 vcn_id: Optional[str] = None):
        if ip_ranges is not None:
            pulumi.set(__self__, "ip_ranges", ip_ranges)
        if vcn_id is not None:
            pulumi.set(__self__, "vcn_id", vcn_id)

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ip_ranges")

    @property
    @pulumi.getter(name="vcnId")
    def vcn_id(self) -> Optional[str]:
        return pulumi.get(self, "vcn_id")


@pulumi.output_type
class GetNetworkSourcesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetNetworkSourcesNetworkSourceResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 inactive_state: Optional[str] = None,
                 name: Optional[str] = None,
                 public_source_lists: Optional[Sequence[str]] = None,
                 services: Optional[Sequence[str]] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 virtual_source_lists: Optional[Sequence['outputs.GetNetworkSourcesNetworkSourceVirtualSourceListResult']] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if inactive_state is not None:
            pulumi.set(__self__, "inactive_state", inactive_state)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if public_source_lists is not None:
            pulumi.set(__self__, "public_source_lists", public_source_lists)
        if services is not None:
            pulumi.set(__self__, "services", services)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if virtual_source_lists is not None:
            pulumi.set(__self__, "virtual_source_lists", virtual_source_lists)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inactiveState")
    def inactive_state(self) -> Optional[str]:
        return pulumi.get(self, "inactive_state")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="publicSourceLists")
    def public_source_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "public_source_lists")

    @property
    @pulumi.getter
    def services(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "services")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="virtualSourceLists")
    def virtual_source_lists(self) -> Optional[Sequence['outputs.GetNetworkSourcesNetworkSourceVirtualSourceListResult']]:
        return pulumi.get(self, "virtual_source_lists")


@pulumi.output_type
class GetNetworkSourcesNetworkSourceVirtualSourceListResult(dict):
    def __init__(__self__, *,
                 ip_ranges: Optional[Sequence[str]] = None,
                 vcn_id: Optional[str] = None):
        if ip_ranges is not None:
            pulumi.set(__self__, "ip_ranges", ip_ranges)
        if vcn_id is not None:
            pulumi.set(__self__, "vcn_id", vcn_id)

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ip_ranges")

    @property
    @pulumi.getter(name="vcnId")
    def vcn_id(self) -> Optional[str]:
        return pulumi.get(self, "vcn_id")


@pulumi.output_type
class GetPoliciesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetPoliciesPolicyResult(dict):
    def __init__(__self__, *,
                 e_tag: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 inactive_state: Optional[str] = None,
                 last_update_e_tag: Optional[str] = None,
                 name: Optional[str] = None,
                 policy_hash: Optional[str] = None,
                 state: Optional[str] = None,
                 statements: Optional[Sequence[str]] = None,
                 time_created: Optional[str] = None,
                 version_date: Optional[str] = None):
        if e_tag is not None:
            pulumi.set(__self__, "e_tag", e_tag)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if inactive_state is not None:
            pulumi.set(__self__, "inactive_state", inactive_state)
        if last_update_e_tag is not None:
            pulumi.set(__self__, "last_update_e_tag", last_update_e_tag)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if policy_hash is not None:
            pulumi.set(__self__, "policy_hash", policy_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if statements is not None:
            pulumi.set(__self__, "statements", statements)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if version_date is not None:
            pulumi.set(__self__, "version_date", version_date)

    @property
    @pulumi.getter(name="ETag")
    def e_tag(self) -> Optional[str]:
        warnings.warn("""The 'ETag' field has been deprecated and may be removed in a future version. Do not use this field.""", DeprecationWarning)
        pulumi.log.warn("""e_tag is deprecated: The 'ETag' field has been deprecated and may be removed in a future version. Do not use this field.""")

        return pulumi.get(self, "e_tag")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inactiveState")
    def inactive_state(self) -> Optional[str]:
        return pulumi.get(self, "inactive_state")

    @property
    @pulumi.getter(name="lastUpdateETag")
    def last_update_e_tag(self) -> Optional[str]:
        warnings.warn("""The 'lastUpdateETag' field has been deprecated and may be removed in a future version. Do not use this field.""", DeprecationWarning)
        pulumi.log.warn("""last_update_e_tag is deprecated: The 'lastUpdateETag' field has been deprecated and may be removed in a future version. Do not use this field.""")

        return pulumi.get(self, "last_update_e_tag")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="policyHash")
    def policy_hash(self) -> Optional[str]:
        warnings.warn("""The 'policyHash' field has been deprecated and may be removed in a future version. Do not use this field.""", DeprecationWarning)
        pulumi.log.warn("""policy_hash is deprecated: The 'policyHash' field has been deprecated and may be removed in a future version. Do not use this field.""")

        return pulumi.get(self, "policy_hash")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def statements(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "statements")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="versionDate")
    def version_date(self) -> Optional[str]:
        return pulumi.get(self, "version_date")


@pulumi.output_type
class GetRegionSubscriptionsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetRegionSubscriptionsRegionSubscriptionResult(dict):
    def __init__(__self__, *,
                 region_key: str,
                 tenancy_id: str,
                 is_home_region: Optional[bool] = None,
                 region_name: Optional[str] = None,
                 state: Optional[str] = None):
        pulumi.set(__self__, "region_key", region_key)
        pulumi.set(__self__, "tenancy_id", tenancy_id)
        if is_home_region is not None:
            pulumi.set(__self__, "is_home_region", is_home_region)
        if region_name is not None:
            pulumi.set(__self__, "region_name", region_name)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="regionKey")
    def region_key(self) -> str:
        return pulumi.get(self, "region_key")

    @property
    @pulumi.getter(name="tenancyId")
    def tenancy_id(self) -> str:
        return pulumi.get(self, "tenancy_id")

    @property
    @pulumi.getter(name="isHomeRegion")
    def is_home_region(self) -> Optional[bool]:
        return pulumi.get(self, "is_home_region")

    @property
    @pulumi.getter(name="regionName")
    def region_name(self) -> Optional[str]:
        return pulumi.get(self, "region_name")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")


@pulumi.output_type
class GetRegionsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetRegionsRegionResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 name: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSmtpCredentialsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSmtpCredentialsSmtpCredentialResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 id: Optional[str] = None,
                 inactive_state: Optional[str] = None,
                 password: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_expires: Optional[str] = None,
                 user_id: Optional[str] = None,
                 username: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if inactive_state is not None:
            pulumi.set(__self__, "inactive_state", inactive_state)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_expires is not None:
            pulumi.set(__self__, "time_expires", time_expires)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inactiveState")
    def inactive_state(self) -> Optional[str]:
        return pulumi.get(self, "inactive_state")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeExpires")
    def time_expires(self) -> Optional[str]:
        return pulumi.get(self, "time_expires")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[str]:
        return pulumi.get(self, "user_id")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetTagDefaultsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetTagDefaultsTagDefaultResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 id: Optional[str] = None,
                 is_required: Optional[bool] = None,
                 state: Optional[str] = None,
                 tag_definition_id: Optional[str] = None,
                 tag_definition_name: Optional[str] = None,
                 tag_namespace_id: Optional[str] = None,
                 time_created: Optional[str] = None,
                 value: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if tag_definition_id is not None:
            pulumi.set(__self__, "tag_definition_id", tag_definition_id)
        if tag_definition_name is not None:
            pulumi.set(__self__, "tag_definition_name", tag_definition_name)
        if tag_namespace_id is not None:
            pulumi.set(__self__, "tag_namespace_id", tag_namespace_id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[bool]:
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="tagDefinitionId")
    def tag_definition_id(self) -> Optional[str]:
        return pulumi.get(self, "tag_definition_id")

    @property
    @pulumi.getter(name="tagDefinitionName")
    def tag_definition_name(self) -> Optional[str]:
        return pulumi.get(self, "tag_definition_name")

    @property
    @pulumi.getter(name="tagNamespaceId")
    def tag_namespace_id(self) -> Optional[str]:
        return pulumi.get(self, "tag_namespace_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTagNamespacesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetTagNamespacesTagNamespaceResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 is_retired: Optional[bool] = None,
                 name: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_retired is not None:
            pulumi.set(__self__, "is_retired", is_retired)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isRetired")
    def is_retired(self) -> Optional[bool]:
        return pulumi.get(self, "is_retired")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetTagStandardTagNamespaceTemplateTagDefinitionTemplateResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 enum_mutability: Optional[str] = None,
                 is_cost_tracking: Optional[bool] = None,
                 possible_values: Optional[Sequence[str]] = None,
                 tag_definition_name: Optional[str] = None,
                 type: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enum_mutability is not None:
            pulumi.set(__self__, "enum_mutability", enum_mutability)
        if is_cost_tracking is not None:
            pulumi.set(__self__, "is_cost_tracking", is_cost_tracking)
        if possible_values is not None:
            pulumi.set(__self__, "possible_values", possible_values)
        if tag_definition_name is not None:
            pulumi.set(__self__, "tag_definition_name", tag_definition_name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="enumMutability")
    def enum_mutability(self) -> Optional[str]:
        return pulumi.get(self, "enum_mutability")

    @property
    @pulumi.getter(name="isCostTracking")
    def is_cost_tracking(self) -> Optional[bool]:
        return pulumi.get(self, "is_cost_tracking")

    @property
    @pulumi.getter(name="possibleValues")
    def possible_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "possible_values")

    @property
    @pulumi.getter(name="tagDefinitionName")
    def tag_definition_name(self) -> Optional[str]:
        return pulumi.get(self, "tag_definition_name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetTagStandardTagNamespaceTemplatesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetTagStandardTagNamespaceTemplatesStandardTagNamespaceTemplateResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 standard_tag_namespace_name: Optional[str] = None,
                 status: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if standard_tag_namespace_name is not None:
            pulumi.set(__self__, "standard_tag_namespace_name", standard_tag_namespace_name)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="standardTagNamespaceName")
    def standard_tag_namespace_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_tag_namespace_name")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetTagValidatorResult(dict):
    def __init__(__self__, *,
                 validator_type: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if validator_type is not None:
            pulumi.set(__self__, "validator_type", validator_type)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="validatorType")
    def validator_type(self) -> Optional[str]:
        return pulumi.get(self, "validator_type")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetTagsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetTagsTagResult(dict):
    def __init__(__self__, *,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 is_cost_tracking: Optional[bool] = None,
                 is_retired: Optional[bool] = None,
                 name: Optional[str] = None,
                 state: Optional[str] = None,
                 tag_namespace_id: Optional[str] = None,
                 time_created: Optional[str] = None,
                 validators: Optional[Sequence['outputs.GetTagsTagValidatorResult']] = None):
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_cost_tracking is not None:
            pulumi.set(__self__, "is_cost_tracking", is_cost_tracking)
        if is_retired is not None:
            pulumi.set(__self__, "is_retired", is_retired)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if tag_namespace_id is not None:
            pulumi.set(__self__, "tag_namespace_id", tag_namespace_id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if validators is not None:
            pulumi.set(__self__, "validators", validators)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isCostTracking")
    def is_cost_tracking(self) -> Optional[bool]:
        return pulumi.get(self, "is_cost_tracking")

    @property
    @pulumi.getter(name="isRetired")
    def is_retired(self) -> Optional[bool]:
        return pulumi.get(self, "is_retired")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="tagNamespaceId")
    def tag_namespace_id(self) -> Optional[str]:
        return pulumi.get(self, "tag_namespace_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter
    def validators(self) -> Optional[Sequence['outputs.GetTagsTagValidatorResult']]:
        return pulumi.get(self, "validators")


@pulumi.output_type
class GetTagsTagValidatorResult(dict):
    def __init__(__self__, *,
                 validator_type: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if validator_type is not None:
            pulumi.set(__self__, "validator_type", validator_type)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="validatorType")
    def validator_type(self) -> Optional[str]:
        return pulumi.get(self, "validator_type")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetUserCapabilityResult(dict):
    def __init__(__self__, *,
                 can_use_api_keys: Optional[bool] = None,
                 can_use_auth_tokens: Optional[bool] = None,
                 can_use_console_password: Optional[bool] = None,
                 can_use_customer_secret_keys: Optional[bool] = None,
                 can_use_db_credentials: Optional[bool] = None,
                 can_use_oauth2client_credentials: Optional[bool] = None,
                 can_use_smtp_credentials: Optional[bool] = None):
        if can_use_api_keys is not None:
            pulumi.set(__self__, "can_use_api_keys", can_use_api_keys)
        if can_use_auth_tokens is not None:
            pulumi.set(__self__, "can_use_auth_tokens", can_use_auth_tokens)
        if can_use_console_password is not None:
            pulumi.set(__self__, "can_use_console_password", can_use_console_password)
        if can_use_customer_secret_keys is not None:
            pulumi.set(__self__, "can_use_customer_secret_keys", can_use_customer_secret_keys)
        if can_use_db_credentials is not None:
            pulumi.set(__self__, "can_use_db_credentials", can_use_db_credentials)
        if can_use_oauth2client_credentials is not None:
            pulumi.set(__self__, "can_use_oauth2client_credentials", can_use_oauth2client_credentials)
        if can_use_smtp_credentials is not None:
            pulumi.set(__self__, "can_use_smtp_credentials", can_use_smtp_credentials)

    @property
    @pulumi.getter(name="canUseApiKeys")
    def can_use_api_keys(self) -> Optional[bool]:
        return pulumi.get(self, "can_use_api_keys")

    @property
    @pulumi.getter(name="canUseAuthTokens")
    def can_use_auth_tokens(self) -> Optional[bool]:
        return pulumi.get(self, "can_use_auth_tokens")

    @property
    @pulumi.getter(name="canUseConsolePassword")
    def can_use_console_password(self) -> Optional[bool]:
        return pulumi.get(self, "can_use_console_password")

    @property
    @pulumi.getter(name="canUseCustomerSecretKeys")
    def can_use_customer_secret_keys(self) -> Optional[bool]:
        return pulumi.get(self, "can_use_customer_secret_keys")

    @property
    @pulumi.getter(name="canUseDbCredentials")
    def can_use_db_credentials(self) -> Optional[bool]:
        return pulumi.get(self, "can_use_db_credentials")

    @property
    @pulumi.getter(name="canUseOauth2clientCredentials")
    def can_use_oauth2client_credentials(self) -> Optional[bool]:
        return pulumi.get(self, "can_use_oauth2client_credentials")

    @property
    @pulumi.getter(name="canUseSmtpCredentials")
    def can_use_smtp_credentials(self) -> Optional[bool]:
        return pulumi.get(self, "can_use_smtp_credentials")


@pulumi.output_type
class GetUserGroupMembershipsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetUserGroupMembershipsMembershipResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 group_id: Optional[str] = None,
                 id: Optional[str] = None,
                 inactive_state: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 user_id: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if inactive_state is not None:
            pulumi.set(__self__, "inactive_state", inactive_state)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[str]:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inactiveState")
    def inactive_state(self) -> Optional[str]:
        return pulumi.get(self, "inactive_state")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[str]:
        return pulumi.get(self, "user_id")


@pulumi.output_type
class GetUsersFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetUsersUserResult(dict):
    def __init__(__self__, *,
                 capabilities: Optional[Sequence['outputs.GetUsersUserCapabilityResult']] = None,
                 compartment_id: Optional[str] = None,
                 db_user_name: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 email: Optional[str] = None,
                 email_verified: Optional[bool] = None,
                 external_identifier: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 identity_provider_id: Optional[str] = None,
                 inactive_state: Optional[str] = None,
                 last_successful_login_time: Optional[str] = None,
                 name: Optional[str] = None,
                 previous_successful_login_time: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None):
        if capabilities is not None:
            pulumi.set(__self__, "capabilities", capabilities)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if db_user_name is not None:
            pulumi.set(__self__, "db_user_name", db_user_name)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if email_verified is not None:
            pulumi.set(__self__, "email_verified", email_verified)
        if external_identifier is not None:
            pulumi.set(__self__, "external_identifier", external_identifier)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if identity_provider_id is not None:
            pulumi.set(__self__, "identity_provider_id", identity_provider_id)
        if inactive_state is not None:
            pulumi.set(__self__, "inactive_state", inactive_state)
        if last_successful_login_time is not None:
            pulumi.set(__self__, "last_successful_login_time", last_successful_login_time)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if previous_successful_login_time is not None:
            pulumi.set(__self__, "previous_successful_login_time", previous_successful_login_time)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter
    def capabilities(self) -> Optional[Sequence['outputs.GetUsersUserCapabilityResult']]:
        return pulumi.get(self, "capabilities")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="dbUserName")
    def db_user_name(self) -> Optional[str]:
        return pulumi.get(self, "db_user_name")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="emailVerified")
    def email_verified(self) -> Optional[bool]:
        return pulumi.get(self, "email_verified")

    @property
    @pulumi.getter(name="externalIdentifier")
    def external_identifier(self) -> Optional[str]:
        return pulumi.get(self, "external_identifier")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="identityProviderId")
    def identity_provider_id(self) -> Optional[str]:
        return pulumi.get(self, "identity_provider_id")

    @property
    @pulumi.getter(name="inactiveState")
    def inactive_state(self) -> Optional[str]:
        return pulumi.get(self, "inactive_state")

    @property
    @pulumi.getter(name="lastSuccessfulLoginTime")
    def last_successful_login_time(self) -> Optional[str]:
        return pulumi.get(self, "last_successful_login_time")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="previousSuccessfulLoginTime")
    def previous_successful_login_time(self) -> Optional[str]:
        return pulumi.get(self, "previous_successful_login_time")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetUsersUserCapabilityResult(dict):
    def __init__(__self__, *,
                 can_use_api_keys: Optional[bool] = None,
                 can_use_auth_tokens: Optional[bool] = None,
                 can_use_console_password: Optional[bool] = None,
                 can_use_customer_secret_keys: Optional[bool] = None,
                 can_use_db_credentials: Optional[bool] = None,
                 can_use_oauth2client_credentials: Optional[bool] = None,
                 can_use_smtp_credentials: Optional[bool] = None):
        if can_use_api_keys is not None:
            pulumi.set(__self__, "can_use_api_keys", can_use_api_keys)
        if can_use_auth_tokens is not None:
            pulumi.set(__self__, "can_use_auth_tokens", can_use_auth_tokens)
        if can_use_console_password is not None:
            pulumi.set(__self__, "can_use_console_password", can_use_console_password)
        if can_use_customer_secret_keys is not None:
            pulumi.set(__self__, "can_use_customer_secret_keys", can_use_customer_secret_keys)
        if can_use_db_credentials is not None:
            pulumi.set(__self__, "can_use_db_credentials", can_use_db_credentials)
        if can_use_oauth2client_credentials is not None:
            pulumi.set(__self__, "can_use_oauth2client_credentials", can_use_oauth2client_credentials)
        if can_use_smtp_credentials is not None:
            pulumi.set(__self__, "can_use_smtp_credentials", can_use_smtp_credentials)

    @property
    @pulumi.getter(name="canUseApiKeys")
    def can_use_api_keys(self) -> Optional[bool]:
        return pulumi.get(self, "can_use_api_keys")

    @property
    @pulumi.getter(name="canUseAuthTokens")
    def can_use_auth_tokens(self) -> Optional[bool]:
        return pulumi.get(self, "can_use_auth_tokens")

    @property
    @pulumi.getter(name="canUseConsolePassword")
    def can_use_console_password(self) -> Optional[bool]:
        return pulumi.get(self, "can_use_console_password")

    @property
    @pulumi.getter(name="canUseCustomerSecretKeys")
    def can_use_customer_secret_keys(self) -> Optional[bool]:
        return pulumi.get(self, "can_use_customer_secret_keys")

    @property
    @pulumi.getter(name="canUseDbCredentials")
    def can_use_db_credentials(self) -> Optional[bool]:
        return pulumi.get(self, "can_use_db_credentials")

    @property
    @pulumi.getter(name="canUseOauth2clientCredentials")
    def can_use_oauth2client_credentials(self) -> Optional[bool]:
        return pulumi.get(self, "can_use_oauth2client_credentials")

    @property
    @pulumi.getter(name="canUseSmtpCredentials")
    def can_use_smtp_credentials(self) -> Optional[bool]:
        return pulumi.get(self, "can_use_smtp_credentials")


