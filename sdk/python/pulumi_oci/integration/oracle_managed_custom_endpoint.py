# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['OracleManagedCustomEndpointArgs', 'OracleManagedCustomEndpoint']

@pulumi.input_type
class OracleManagedCustomEndpointArgs:
    def __init__(__self__, *,
                 hostname: pulumi.Input[str],
                 integration_instance_id: pulumi.Input[str],
                 dns_type: Optional[pulumi.Input[str]] = None,
                 dns_zone_name: Optional[pulumi.Input[str]] = None,
                 managed_type: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a OracleManagedCustomEndpoint resource.
        """
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "integration_instance_id", integration_instance_id)
        if dns_type is not None:
            pulumi.set(__self__, "dns_type", dns_type)
        if dns_zone_name is not None:
            pulumi.set(__self__, "dns_zone_name", dns_zone_name)
        if managed_type is not None:
            pulumi.set(__self__, "managed_type", managed_type)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter(name="integrationInstanceId")
    def integration_instance_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "integration_instance_id")

    @integration_instance_id.setter
    def integration_instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "integration_instance_id", value)

    @property
    @pulumi.getter(name="dnsType")
    def dns_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dns_type")

    @dns_type.setter
    def dns_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_type", value)

    @property
    @pulumi.getter(name="dnsZoneName")
    def dns_zone_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dns_zone_name")

    @dns_zone_name.setter
    def dns_zone_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_zone_name", value)

    @property
    @pulumi.getter(name="managedType")
    def managed_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "managed_type")

    @managed_type.setter
    def managed_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "managed_type", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class _OracleManagedCustomEndpointState:
    def __init__(__self__, *,
                 dns_type: Optional[pulumi.Input[str]] = None,
                 dns_zone_name: Optional[pulumi.Input[str]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 integration_instance_id: Optional[pulumi.Input[str]] = None,
                 managed_type: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering OracleManagedCustomEndpoint resources.
        """
        if dns_type is not None:
            pulumi.set(__self__, "dns_type", dns_type)
        if dns_zone_name is not None:
            pulumi.set(__self__, "dns_zone_name", dns_zone_name)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if integration_instance_id is not None:
            pulumi.set(__self__, "integration_instance_id", integration_instance_id)
        if managed_type is not None:
            pulumi.set(__self__, "managed_type", managed_type)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="dnsType")
    def dns_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dns_type")

    @dns_type.setter
    def dns_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_type", value)

    @property
    @pulumi.getter(name="dnsZoneName")
    def dns_zone_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dns_zone_name")

    @dns_zone_name.setter
    def dns_zone_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_zone_name", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter(name="integrationInstanceId")
    def integration_instance_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "integration_instance_id")

    @integration_instance_id.setter
    def integration_instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "integration_instance_id", value)

    @property
    @pulumi.getter(name="managedType")
    def managed_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "managed_type")

    @managed_type.setter
    def managed_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "managed_type", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


class OracleManagedCustomEndpoint(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dns_type: Optional[pulumi.Input[str]] = None,
                 dns_zone_name: Optional[pulumi.Input[str]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 integration_instance_id: Optional[pulumi.Input[str]] = None,
                 managed_type: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a OracleManagedCustomEndpoint resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: OracleManagedCustomEndpointArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a OracleManagedCustomEndpoint resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param OracleManagedCustomEndpointArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OracleManagedCustomEndpointArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dns_type: Optional[pulumi.Input[str]] = None,
                 dns_zone_name: Optional[pulumi.Input[str]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 integration_instance_id: Optional[pulumi.Input[str]] = None,
                 managed_type: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OracleManagedCustomEndpointArgs.__new__(OracleManagedCustomEndpointArgs)

            __props__.__dict__["dns_type"] = dns_type
            __props__.__dict__["dns_zone_name"] = dns_zone_name
            if hostname is None and not opts.urn:
                raise TypeError("Missing required property 'hostname'")
            __props__.__dict__["hostname"] = hostname
            if integration_instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'integration_instance_id'")
            __props__.__dict__["integration_instance_id"] = integration_instance_id
            __props__.__dict__["managed_type"] = managed_type
            __props__.__dict__["state"] = state
        super(OracleManagedCustomEndpoint, __self__).__init__(
            'oci:Integration/oracleManagedCustomEndpoint:OracleManagedCustomEndpoint',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            dns_type: Optional[pulumi.Input[str]] = None,
            dns_zone_name: Optional[pulumi.Input[str]] = None,
            hostname: Optional[pulumi.Input[str]] = None,
            integration_instance_id: Optional[pulumi.Input[str]] = None,
            managed_type: Optional[pulumi.Input[str]] = None,
            state: Optional[pulumi.Input[str]] = None) -> 'OracleManagedCustomEndpoint':
        """
        Get an existing OracleManagedCustomEndpoint resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _OracleManagedCustomEndpointState.__new__(_OracleManagedCustomEndpointState)

        __props__.__dict__["dns_type"] = dns_type
        __props__.__dict__["dns_zone_name"] = dns_zone_name
        __props__.__dict__["hostname"] = hostname
        __props__.__dict__["integration_instance_id"] = integration_instance_id
        __props__.__dict__["managed_type"] = managed_type
        __props__.__dict__["state"] = state
        return OracleManagedCustomEndpoint(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="dnsType")
    def dns_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dns_type")

    @property
    @pulumi.getter(name="dnsZoneName")
    def dns_zone_name(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dns_zone_name")

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Output[str]:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="integrationInstanceId")
    def integration_instance_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "integration_instance_id")

    @property
    @pulumi.getter(name="managedType")
    def managed_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "managed_type")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        return pulumi.get(self, "state")

