# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'IntegrationInstanceAlternateCustomEndpoint',
    'IntegrationInstanceAttachment',
    'IntegrationInstanceCustomEndpoint',
    'IntegrationInstanceIdcsInfo',
    'IntegrationInstanceNetworkEndpointDetails',
    'IntegrationInstanceNetworkEndpointDetailsAllowlistedHttpVcn',
    'GetIntegrationInstanceAlternateCustomEndpointResult',
    'GetIntegrationInstanceAttachmentResult',
    'GetIntegrationInstanceCustomEndpointResult',
    'GetIntegrationInstanceIdcsInfoResult',
    'GetIntegrationInstanceNetworkEndpointDetailResult',
    'GetIntegrationInstanceNetworkEndpointDetailAllowlistedHttpVcnResult',
    'GetIntegrationInstancesFilterResult',
    'GetIntegrationInstancesIntegrationInstanceResult',
    'GetIntegrationInstancesIntegrationInstanceAlternateCustomEndpointResult',
    'GetIntegrationInstancesIntegrationInstanceAttachmentResult',
    'GetIntegrationInstancesIntegrationInstanceCustomEndpointResult',
    'GetIntegrationInstancesIntegrationInstanceIdcsInfoResult',
    'GetIntegrationInstancesIntegrationInstanceNetworkEndpointDetailResult',
    'GetIntegrationInstancesIntegrationInstanceNetworkEndpointDetailAllowlistedHttpVcnResult',
]

@pulumi.output_type
class IntegrationInstanceAlternateCustomEndpoint(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certificateSecretId":
            suggest = "certificate_secret_id"
        elif key == "certificateSecretVersion":
            suggest = "certificate_secret_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IntegrationInstanceAlternateCustomEndpoint. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IntegrationInstanceAlternateCustomEndpoint.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IntegrationInstanceAlternateCustomEndpoint.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 hostname: str,
                 alias: Optional[str] = None,
                 certificate_secret_id: Optional[str] = None,
                 certificate_secret_version: Optional[int] = None):
        pulumi.set(__self__, "hostname", hostname)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if certificate_secret_id is not None:
            pulumi.set(__self__, "certificate_secret_id", certificate_secret_id)
        if certificate_secret_version is not None:
            pulumi.set(__self__, "certificate_secret_version", certificate_secret_version)

    @property
    @pulumi.getter
    def hostname(self) -> str:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def alias(self) -> Optional[str]:
        return pulumi.get(self, "alias")

    @property
    @pulumi.getter(name="certificateSecretId")
    def certificate_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "certificate_secret_id")

    @property
    @pulumi.getter(name="certificateSecretVersion")
    def certificate_secret_version(self) -> Optional[int]:
        return pulumi.get(self, "certificate_secret_version")


@pulumi.output_type
class IntegrationInstanceAttachment(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isImplicit":
            suggest = "is_implicit"
        elif key == "targetId":
            suggest = "target_id"
        elif key == "targetInstanceUrl":
            suggest = "target_instance_url"
        elif key == "targetRole":
            suggest = "target_role"
        elif key == "targetServiceType":
            suggest = "target_service_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IntegrationInstanceAttachment. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IntegrationInstanceAttachment.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IntegrationInstanceAttachment.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_implicit: Optional[bool] = None,
                 target_id: Optional[str] = None,
                 target_instance_url: Optional[str] = None,
                 target_role: Optional[str] = None,
                 target_service_type: Optional[str] = None):
        if is_implicit is not None:
            pulumi.set(__self__, "is_implicit", is_implicit)
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)
        if target_instance_url is not None:
            pulumi.set(__self__, "target_instance_url", target_instance_url)
        if target_role is not None:
            pulumi.set(__self__, "target_role", target_role)
        if target_service_type is not None:
            pulumi.set(__self__, "target_service_type", target_service_type)

    @property
    @pulumi.getter(name="isImplicit")
    def is_implicit(self) -> Optional[bool]:
        return pulumi.get(self, "is_implicit")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[str]:
        return pulumi.get(self, "target_id")

    @property
    @pulumi.getter(name="targetInstanceUrl")
    def target_instance_url(self) -> Optional[str]:
        return pulumi.get(self, "target_instance_url")

    @property
    @pulumi.getter(name="targetRole")
    def target_role(self) -> Optional[str]:
        return pulumi.get(self, "target_role")

    @property
    @pulumi.getter(name="targetServiceType")
    def target_service_type(self) -> Optional[str]:
        return pulumi.get(self, "target_service_type")


@pulumi.output_type
class IntegrationInstanceCustomEndpoint(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certificateSecretId":
            suggest = "certificate_secret_id"
        elif key == "certificateSecretVersion":
            suggest = "certificate_secret_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IntegrationInstanceCustomEndpoint. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IntegrationInstanceCustomEndpoint.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IntegrationInstanceCustomEndpoint.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 hostname: str,
                 alias: Optional[str] = None,
                 certificate_secret_id: Optional[str] = None,
                 certificate_secret_version: Optional[int] = None):
        pulumi.set(__self__, "hostname", hostname)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if certificate_secret_id is not None:
            pulumi.set(__self__, "certificate_secret_id", certificate_secret_id)
        if certificate_secret_version is not None:
            pulumi.set(__self__, "certificate_secret_version", certificate_secret_version)

    @property
    @pulumi.getter
    def hostname(self) -> str:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def alias(self) -> Optional[str]:
        return pulumi.get(self, "alias")

    @property
    @pulumi.getter(name="certificateSecretId")
    def certificate_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "certificate_secret_id")

    @property
    @pulumi.getter(name="certificateSecretVersion")
    def certificate_secret_version(self) -> Optional[int]:
        return pulumi.get(self, "certificate_secret_version")


@pulumi.output_type
class IntegrationInstanceIdcsInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "idcsAppDisplayName":
            suggest = "idcs_app_display_name"
        elif key == "idcsAppId":
            suggest = "idcs_app_id"
        elif key == "idcsAppLocationUrl":
            suggest = "idcs_app_location_url"
        elif key == "idcsAppName":
            suggest = "idcs_app_name"
        elif key == "instancePrimaryAudienceUrl":
            suggest = "instance_primary_audience_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IntegrationInstanceIdcsInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IntegrationInstanceIdcsInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IntegrationInstanceIdcsInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 idcs_app_display_name: Optional[str] = None,
                 idcs_app_id: Optional[str] = None,
                 idcs_app_location_url: Optional[str] = None,
                 idcs_app_name: Optional[str] = None,
                 instance_primary_audience_url: Optional[str] = None):
        if idcs_app_display_name is not None:
            pulumi.set(__self__, "idcs_app_display_name", idcs_app_display_name)
        if idcs_app_id is not None:
            pulumi.set(__self__, "idcs_app_id", idcs_app_id)
        if idcs_app_location_url is not None:
            pulumi.set(__self__, "idcs_app_location_url", idcs_app_location_url)
        if idcs_app_name is not None:
            pulumi.set(__self__, "idcs_app_name", idcs_app_name)
        if instance_primary_audience_url is not None:
            pulumi.set(__self__, "instance_primary_audience_url", instance_primary_audience_url)

    @property
    @pulumi.getter(name="idcsAppDisplayName")
    def idcs_app_display_name(self) -> Optional[str]:
        return pulumi.get(self, "idcs_app_display_name")

    @property
    @pulumi.getter(name="idcsAppId")
    def idcs_app_id(self) -> Optional[str]:
        return pulumi.get(self, "idcs_app_id")

    @property
    @pulumi.getter(name="idcsAppLocationUrl")
    def idcs_app_location_url(self) -> Optional[str]:
        return pulumi.get(self, "idcs_app_location_url")

    @property
    @pulumi.getter(name="idcsAppName")
    def idcs_app_name(self) -> Optional[str]:
        return pulumi.get(self, "idcs_app_name")

    @property
    @pulumi.getter(name="instancePrimaryAudienceUrl")
    def instance_primary_audience_url(self) -> Optional[str]:
        return pulumi.get(self, "instance_primary_audience_url")


@pulumi.output_type
class IntegrationInstanceNetworkEndpointDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkEndpointType":
            suggest = "network_endpoint_type"
        elif key == "allowlistedHttpIps":
            suggest = "allowlisted_http_ips"
        elif key == "allowlistedHttpVcns":
            suggest = "allowlisted_http_vcns"
        elif key == "isIntegrationVcnAllowlisted":
            suggest = "is_integration_vcn_allowlisted"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IntegrationInstanceNetworkEndpointDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IntegrationInstanceNetworkEndpointDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IntegrationInstanceNetworkEndpointDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 network_endpoint_type: str,
                 allowlisted_http_ips: Optional[Sequence[str]] = None,
                 allowlisted_http_vcns: Optional[Sequence['outputs.IntegrationInstanceNetworkEndpointDetailsAllowlistedHttpVcn']] = None,
                 is_integration_vcn_allowlisted: Optional[bool] = None):
        pulumi.set(__self__, "network_endpoint_type", network_endpoint_type)
        if allowlisted_http_ips is not None:
            pulumi.set(__self__, "allowlisted_http_ips", allowlisted_http_ips)
        if allowlisted_http_vcns is not None:
            pulumi.set(__self__, "allowlisted_http_vcns", allowlisted_http_vcns)
        if is_integration_vcn_allowlisted is not None:
            pulumi.set(__self__, "is_integration_vcn_allowlisted", is_integration_vcn_allowlisted)

    @property
    @pulumi.getter(name="networkEndpointType")
    def network_endpoint_type(self) -> str:
        return pulumi.get(self, "network_endpoint_type")

    @property
    @pulumi.getter(name="allowlistedHttpIps")
    def allowlisted_http_ips(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowlisted_http_ips")

    @property
    @pulumi.getter(name="allowlistedHttpVcns")
    def allowlisted_http_vcns(self) -> Optional[Sequence['outputs.IntegrationInstanceNetworkEndpointDetailsAllowlistedHttpVcn']]:
        return pulumi.get(self, "allowlisted_http_vcns")

    @property
    @pulumi.getter(name="isIntegrationVcnAllowlisted")
    def is_integration_vcn_allowlisted(self) -> Optional[bool]:
        return pulumi.get(self, "is_integration_vcn_allowlisted")


@pulumi.output_type
class IntegrationInstanceNetworkEndpointDetailsAllowlistedHttpVcn(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowlistedIps":
            suggest = "allowlisted_ips"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IntegrationInstanceNetworkEndpointDetailsAllowlistedHttpVcn. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IntegrationInstanceNetworkEndpointDetailsAllowlistedHttpVcn.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IntegrationInstanceNetworkEndpointDetailsAllowlistedHttpVcn.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: str,
                 allowlisted_ips: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "id", id)
        if allowlisted_ips is not None:
            pulumi.set(__self__, "allowlisted_ips", allowlisted_ips)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="allowlistedIps")
    def allowlisted_ips(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowlisted_ips")


@pulumi.output_type
class GetIntegrationInstanceAlternateCustomEndpointResult(dict):
    def __init__(__self__, *,
                 alias: Optional[str] = None,
                 certificate_secret_id: Optional[str] = None,
                 certificate_secret_version: Optional[int] = None,
                 hostname: Optional[str] = None):
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if certificate_secret_id is not None:
            pulumi.set(__self__, "certificate_secret_id", certificate_secret_id)
        if certificate_secret_version is not None:
            pulumi.set(__self__, "certificate_secret_version", certificate_secret_version)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)

    @property
    @pulumi.getter
    def alias(self) -> Optional[str]:
        return pulumi.get(self, "alias")

    @property
    @pulumi.getter(name="certificateSecretId")
    def certificate_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "certificate_secret_id")

    @property
    @pulumi.getter(name="certificateSecretVersion")
    def certificate_secret_version(self) -> Optional[int]:
        return pulumi.get(self, "certificate_secret_version")

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")


@pulumi.output_type
class GetIntegrationInstanceAttachmentResult(dict):
    def __init__(__self__, *,
                 is_implicit: Optional[bool] = None,
                 target_id: Optional[str] = None,
                 target_instance_url: Optional[str] = None,
                 target_role: Optional[str] = None,
                 target_service_type: Optional[str] = None):
        if is_implicit is not None:
            pulumi.set(__self__, "is_implicit", is_implicit)
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)
        if target_instance_url is not None:
            pulumi.set(__self__, "target_instance_url", target_instance_url)
        if target_role is not None:
            pulumi.set(__self__, "target_role", target_role)
        if target_service_type is not None:
            pulumi.set(__self__, "target_service_type", target_service_type)

    @property
    @pulumi.getter(name="isImplicit")
    def is_implicit(self) -> Optional[bool]:
        return pulumi.get(self, "is_implicit")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[str]:
        return pulumi.get(self, "target_id")

    @property
    @pulumi.getter(name="targetInstanceUrl")
    def target_instance_url(self) -> Optional[str]:
        return pulumi.get(self, "target_instance_url")

    @property
    @pulumi.getter(name="targetRole")
    def target_role(self) -> Optional[str]:
        return pulumi.get(self, "target_role")

    @property
    @pulumi.getter(name="targetServiceType")
    def target_service_type(self) -> Optional[str]:
        return pulumi.get(self, "target_service_type")


@pulumi.output_type
class GetIntegrationInstanceCustomEndpointResult(dict):
    def __init__(__self__, *,
                 alias: Optional[str] = None,
                 certificate_secret_id: Optional[str] = None,
                 certificate_secret_version: Optional[int] = None,
                 hostname: Optional[str] = None):
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if certificate_secret_id is not None:
            pulumi.set(__self__, "certificate_secret_id", certificate_secret_id)
        if certificate_secret_version is not None:
            pulumi.set(__self__, "certificate_secret_version", certificate_secret_version)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)

    @property
    @pulumi.getter
    def alias(self) -> Optional[str]:
        return pulumi.get(self, "alias")

    @property
    @pulumi.getter(name="certificateSecretId")
    def certificate_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "certificate_secret_id")

    @property
    @pulumi.getter(name="certificateSecretVersion")
    def certificate_secret_version(self) -> Optional[int]:
        return pulumi.get(self, "certificate_secret_version")

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")


@pulumi.output_type
class GetIntegrationInstanceIdcsInfoResult(dict):
    def __init__(__self__, *,
                 idcs_app_display_name: Optional[str] = None,
                 idcs_app_id: Optional[str] = None,
                 idcs_app_location_url: Optional[str] = None,
                 idcs_app_name: Optional[str] = None,
                 instance_primary_audience_url: Optional[str] = None):
        if idcs_app_display_name is not None:
            pulumi.set(__self__, "idcs_app_display_name", idcs_app_display_name)
        if idcs_app_id is not None:
            pulumi.set(__self__, "idcs_app_id", idcs_app_id)
        if idcs_app_location_url is not None:
            pulumi.set(__self__, "idcs_app_location_url", idcs_app_location_url)
        if idcs_app_name is not None:
            pulumi.set(__self__, "idcs_app_name", idcs_app_name)
        if instance_primary_audience_url is not None:
            pulumi.set(__self__, "instance_primary_audience_url", instance_primary_audience_url)

    @property
    @pulumi.getter(name="idcsAppDisplayName")
    def idcs_app_display_name(self) -> Optional[str]:
        return pulumi.get(self, "idcs_app_display_name")

    @property
    @pulumi.getter(name="idcsAppId")
    def idcs_app_id(self) -> Optional[str]:
        return pulumi.get(self, "idcs_app_id")

    @property
    @pulumi.getter(name="idcsAppLocationUrl")
    def idcs_app_location_url(self) -> Optional[str]:
        return pulumi.get(self, "idcs_app_location_url")

    @property
    @pulumi.getter(name="idcsAppName")
    def idcs_app_name(self) -> Optional[str]:
        return pulumi.get(self, "idcs_app_name")

    @property
    @pulumi.getter(name="instancePrimaryAudienceUrl")
    def instance_primary_audience_url(self) -> Optional[str]:
        return pulumi.get(self, "instance_primary_audience_url")


@pulumi.output_type
class GetIntegrationInstanceNetworkEndpointDetailResult(dict):
    def __init__(__self__, *,
                 allowlisted_http_ips: Optional[Sequence[str]] = None,
                 allowlisted_http_vcns: Optional[Sequence['outputs.GetIntegrationInstanceNetworkEndpointDetailAllowlistedHttpVcnResult']] = None,
                 is_integration_vcn_allowlisted: Optional[bool] = None,
                 network_endpoint_type: Optional[str] = None):
        if allowlisted_http_ips is not None:
            pulumi.set(__self__, "allowlisted_http_ips", allowlisted_http_ips)
        if allowlisted_http_vcns is not None:
            pulumi.set(__self__, "allowlisted_http_vcns", allowlisted_http_vcns)
        if is_integration_vcn_allowlisted is not None:
            pulumi.set(__self__, "is_integration_vcn_allowlisted", is_integration_vcn_allowlisted)
        if network_endpoint_type is not None:
            pulumi.set(__self__, "network_endpoint_type", network_endpoint_type)

    @property
    @pulumi.getter(name="allowlistedHttpIps")
    def allowlisted_http_ips(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowlisted_http_ips")

    @property
    @pulumi.getter(name="allowlistedHttpVcns")
    def allowlisted_http_vcns(self) -> Optional[Sequence['outputs.GetIntegrationInstanceNetworkEndpointDetailAllowlistedHttpVcnResult']]:
        return pulumi.get(self, "allowlisted_http_vcns")

    @property
    @pulumi.getter(name="isIntegrationVcnAllowlisted")
    def is_integration_vcn_allowlisted(self) -> Optional[bool]:
        return pulumi.get(self, "is_integration_vcn_allowlisted")

    @property
    @pulumi.getter(name="networkEndpointType")
    def network_endpoint_type(self) -> Optional[str]:
        return pulumi.get(self, "network_endpoint_type")


@pulumi.output_type
class GetIntegrationInstanceNetworkEndpointDetailAllowlistedHttpVcnResult(dict):
    def __init__(__self__, *,
                 allowlisted_ips: Optional[Sequence[str]] = None,
                 id: Optional[str] = None):
        if allowlisted_ips is not None:
            pulumi.set(__self__, "allowlisted_ips", allowlisted_ips)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="allowlistedIps")
    def allowlisted_ips(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowlisted_ips")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetIntegrationInstancesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetIntegrationInstancesIntegrationInstanceResult(dict):
    def __init__(__self__, *,
                 alternate_custom_endpoints: Optional[Sequence['outputs.GetIntegrationInstancesIntegrationInstanceAlternateCustomEndpointResult']] = None,
                 attachments: Optional[Sequence['outputs.GetIntegrationInstancesIntegrationInstanceAttachmentResult']] = None,
                 compartment_id: Optional[str] = None,
                 consumption_model: Optional[str] = None,
                 custom_endpoints: Optional[Sequence['outputs.GetIntegrationInstancesIntegrationInstanceCustomEndpointResult']] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 domain_id: Optional[str] = None,
                 enable_process_automation_trigger: Optional[int] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 idcs_at: Optional[str] = None,
                 idcs_infos: Optional[Sequence['outputs.GetIntegrationInstancesIntegrationInstanceIdcsInfoResult']] = None,
                 instance_url: Optional[str] = None,
                 integration_instance_type: Optional[str] = None,
                 is_byol: Optional[bool] = None,
                 is_file_server_enabled: Optional[bool] = None,
                 is_visual_builder_enabled: Optional[bool] = None,
                 message_packs: Optional[int] = None,
                 network_endpoint_details: Optional[Sequence['outputs.GetIntegrationInstancesIntegrationInstanceNetworkEndpointDetailResult']] = None,
                 shape: Optional[str] = None,
                 state: Optional[str] = None,
                 state_message: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if alternate_custom_endpoints is not None:
            pulumi.set(__self__, "alternate_custom_endpoints", alternate_custom_endpoints)
        if attachments is not None:
            pulumi.set(__self__, "attachments", attachments)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if consumption_model is not None:
            pulumi.set(__self__, "consumption_model", consumption_model)
        if custom_endpoints is not None:
            pulumi.set(__self__, "custom_endpoints", custom_endpoints)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if domain_id is not None:
            pulumi.set(__self__, "domain_id", domain_id)
        if enable_process_automation_trigger is not None:
            pulumi.set(__self__, "enable_process_automation_trigger", enable_process_automation_trigger)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if idcs_at is not None:
            pulumi.set(__self__, "idcs_at", idcs_at)
        if idcs_infos is not None:
            pulumi.set(__self__, "idcs_infos", idcs_infos)
        if instance_url is not None:
            pulumi.set(__self__, "instance_url", instance_url)
        if integration_instance_type is not None:
            pulumi.set(__self__, "integration_instance_type", integration_instance_type)
        if is_byol is not None:
            pulumi.set(__self__, "is_byol", is_byol)
        if is_file_server_enabled is not None:
            pulumi.set(__self__, "is_file_server_enabled", is_file_server_enabled)
        if is_visual_builder_enabled is not None:
            pulumi.set(__self__, "is_visual_builder_enabled", is_visual_builder_enabled)
        if message_packs is not None:
            pulumi.set(__self__, "message_packs", message_packs)
        if network_endpoint_details is not None:
            pulumi.set(__self__, "network_endpoint_details", network_endpoint_details)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if state_message is not None:
            pulumi.set(__self__, "state_message", state_message)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="alternateCustomEndpoints")
    def alternate_custom_endpoints(self) -> Optional[Sequence['outputs.GetIntegrationInstancesIntegrationInstanceAlternateCustomEndpointResult']]:
        return pulumi.get(self, "alternate_custom_endpoints")

    @property
    @pulumi.getter
    def attachments(self) -> Optional[Sequence['outputs.GetIntegrationInstancesIntegrationInstanceAttachmentResult']]:
        return pulumi.get(self, "attachments")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="consumptionModel")
    def consumption_model(self) -> Optional[str]:
        return pulumi.get(self, "consumption_model")

    @property
    @pulumi.getter(name="customEndpoints")
    def custom_endpoints(self) -> Optional[Sequence['outputs.GetIntegrationInstancesIntegrationInstanceCustomEndpointResult']]:
        return pulumi.get(self, "custom_endpoints")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> Optional[str]:
        return pulumi.get(self, "domain_id")

    @property
    @pulumi.getter(name="enableProcessAutomationTrigger")
    def enable_process_automation_trigger(self) -> Optional[int]:
        return pulumi.get(self, "enable_process_automation_trigger")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsAt")
    def idcs_at(self) -> Optional[str]:
        return pulumi.get(self, "idcs_at")

    @property
    @pulumi.getter(name="idcsInfos")
    def idcs_infos(self) -> Optional[Sequence['outputs.GetIntegrationInstancesIntegrationInstanceIdcsInfoResult']]:
        return pulumi.get(self, "idcs_infos")

    @property
    @pulumi.getter(name="instanceUrl")
    def instance_url(self) -> Optional[str]:
        return pulumi.get(self, "instance_url")

    @property
    @pulumi.getter(name="integrationInstanceType")
    def integration_instance_type(self) -> Optional[str]:
        return pulumi.get(self, "integration_instance_type")

    @property
    @pulumi.getter(name="isByol")
    def is_byol(self) -> Optional[bool]:
        return pulumi.get(self, "is_byol")

    @property
    @pulumi.getter(name="isFileServerEnabled")
    def is_file_server_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_file_server_enabled")

    @property
    @pulumi.getter(name="isVisualBuilderEnabled")
    def is_visual_builder_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_visual_builder_enabled")

    @property
    @pulumi.getter(name="messagePacks")
    def message_packs(self) -> Optional[int]:
        return pulumi.get(self, "message_packs")

    @property
    @pulumi.getter(name="networkEndpointDetails")
    def network_endpoint_details(self) -> Optional[Sequence['outputs.GetIntegrationInstancesIntegrationInstanceNetworkEndpointDetailResult']]:
        return pulumi.get(self, "network_endpoint_details")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="stateMessage")
    def state_message(self) -> Optional[str]:
        return pulumi.get(self, "state_message")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetIntegrationInstancesIntegrationInstanceAlternateCustomEndpointResult(dict):
    def __init__(__self__, *,
                 alias: Optional[str] = None,
                 certificate_secret_id: Optional[str] = None,
                 certificate_secret_version: Optional[int] = None,
                 hostname: Optional[str] = None):
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if certificate_secret_id is not None:
            pulumi.set(__self__, "certificate_secret_id", certificate_secret_id)
        if certificate_secret_version is not None:
            pulumi.set(__self__, "certificate_secret_version", certificate_secret_version)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)

    @property
    @pulumi.getter
    def alias(self) -> Optional[str]:
        return pulumi.get(self, "alias")

    @property
    @pulumi.getter(name="certificateSecretId")
    def certificate_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "certificate_secret_id")

    @property
    @pulumi.getter(name="certificateSecretVersion")
    def certificate_secret_version(self) -> Optional[int]:
        return pulumi.get(self, "certificate_secret_version")

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")


@pulumi.output_type
class GetIntegrationInstancesIntegrationInstanceAttachmentResult(dict):
    def __init__(__self__, *,
                 is_implicit: Optional[bool] = None,
                 target_id: Optional[str] = None,
                 target_instance_url: Optional[str] = None,
                 target_role: Optional[str] = None,
                 target_service_type: Optional[str] = None):
        if is_implicit is not None:
            pulumi.set(__self__, "is_implicit", is_implicit)
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)
        if target_instance_url is not None:
            pulumi.set(__self__, "target_instance_url", target_instance_url)
        if target_role is not None:
            pulumi.set(__self__, "target_role", target_role)
        if target_service_type is not None:
            pulumi.set(__self__, "target_service_type", target_service_type)

    @property
    @pulumi.getter(name="isImplicit")
    def is_implicit(self) -> Optional[bool]:
        return pulumi.get(self, "is_implicit")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[str]:
        return pulumi.get(self, "target_id")

    @property
    @pulumi.getter(name="targetInstanceUrl")
    def target_instance_url(self) -> Optional[str]:
        return pulumi.get(self, "target_instance_url")

    @property
    @pulumi.getter(name="targetRole")
    def target_role(self) -> Optional[str]:
        return pulumi.get(self, "target_role")

    @property
    @pulumi.getter(name="targetServiceType")
    def target_service_type(self) -> Optional[str]:
        return pulumi.get(self, "target_service_type")


@pulumi.output_type
class GetIntegrationInstancesIntegrationInstanceCustomEndpointResult(dict):
    def __init__(__self__, *,
                 alias: Optional[str] = None,
                 certificate_secret_id: Optional[str] = None,
                 certificate_secret_version: Optional[int] = None,
                 hostname: Optional[str] = None):
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if certificate_secret_id is not None:
            pulumi.set(__self__, "certificate_secret_id", certificate_secret_id)
        if certificate_secret_version is not None:
            pulumi.set(__self__, "certificate_secret_version", certificate_secret_version)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)

    @property
    @pulumi.getter
    def alias(self) -> Optional[str]:
        return pulumi.get(self, "alias")

    @property
    @pulumi.getter(name="certificateSecretId")
    def certificate_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "certificate_secret_id")

    @property
    @pulumi.getter(name="certificateSecretVersion")
    def certificate_secret_version(self) -> Optional[int]:
        return pulumi.get(self, "certificate_secret_version")

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")


@pulumi.output_type
class GetIntegrationInstancesIntegrationInstanceIdcsInfoResult(dict):
    def __init__(__self__, *,
                 idcs_app_display_name: Optional[str] = None,
                 idcs_app_id: Optional[str] = None,
                 idcs_app_location_url: Optional[str] = None,
                 idcs_app_name: Optional[str] = None,
                 instance_primary_audience_url: Optional[str] = None):
        if idcs_app_display_name is not None:
            pulumi.set(__self__, "idcs_app_display_name", idcs_app_display_name)
        if idcs_app_id is not None:
            pulumi.set(__self__, "idcs_app_id", idcs_app_id)
        if idcs_app_location_url is not None:
            pulumi.set(__self__, "idcs_app_location_url", idcs_app_location_url)
        if idcs_app_name is not None:
            pulumi.set(__self__, "idcs_app_name", idcs_app_name)
        if instance_primary_audience_url is not None:
            pulumi.set(__self__, "instance_primary_audience_url", instance_primary_audience_url)

    @property
    @pulumi.getter(name="idcsAppDisplayName")
    def idcs_app_display_name(self) -> Optional[str]:
        return pulumi.get(self, "idcs_app_display_name")

    @property
    @pulumi.getter(name="idcsAppId")
    def idcs_app_id(self) -> Optional[str]:
        return pulumi.get(self, "idcs_app_id")

    @property
    @pulumi.getter(name="idcsAppLocationUrl")
    def idcs_app_location_url(self) -> Optional[str]:
        return pulumi.get(self, "idcs_app_location_url")

    @property
    @pulumi.getter(name="idcsAppName")
    def idcs_app_name(self) -> Optional[str]:
        return pulumi.get(self, "idcs_app_name")

    @property
    @pulumi.getter(name="instancePrimaryAudienceUrl")
    def instance_primary_audience_url(self) -> Optional[str]:
        return pulumi.get(self, "instance_primary_audience_url")


@pulumi.output_type
class GetIntegrationInstancesIntegrationInstanceNetworkEndpointDetailResult(dict):
    def __init__(__self__, *,
                 allowlisted_http_ips: Optional[Sequence[str]] = None,
                 allowlisted_http_vcns: Optional[Sequence['outputs.GetIntegrationInstancesIntegrationInstanceNetworkEndpointDetailAllowlistedHttpVcnResult']] = None,
                 is_integration_vcn_allowlisted: Optional[bool] = None,
                 network_endpoint_type: Optional[str] = None):
        if allowlisted_http_ips is not None:
            pulumi.set(__self__, "allowlisted_http_ips", allowlisted_http_ips)
        if allowlisted_http_vcns is not None:
            pulumi.set(__self__, "allowlisted_http_vcns", allowlisted_http_vcns)
        if is_integration_vcn_allowlisted is not None:
            pulumi.set(__self__, "is_integration_vcn_allowlisted", is_integration_vcn_allowlisted)
        if network_endpoint_type is not None:
            pulumi.set(__self__, "network_endpoint_type", network_endpoint_type)

    @property
    @pulumi.getter(name="allowlistedHttpIps")
    def allowlisted_http_ips(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowlisted_http_ips")

    @property
    @pulumi.getter(name="allowlistedHttpVcns")
    def allowlisted_http_vcns(self) -> Optional[Sequence['outputs.GetIntegrationInstancesIntegrationInstanceNetworkEndpointDetailAllowlistedHttpVcnResult']]:
        return pulumi.get(self, "allowlisted_http_vcns")

    @property
    @pulumi.getter(name="isIntegrationVcnAllowlisted")
    def is_integration_vcn_allowlisted(self) -> Optional[bool]:
        return pulumi.get(self, "is_integration_vcn_allowlisted")

    @property
    @pulumi.getter(name="networkEndpointType")
    def network_endpoint_type(self) -> Optional[str]:
        return pulumi.get(self, "network_endpoint_type")


@pulumi.output_type
class GetIntegrationInstancesIntegrationInstanceNetworkEndpointDetailAllowlistedHttpVcnResult(dict):
    def __init__(__self__, *,
                 allowlisted_ips: Optional[Sequence[str]] = None,
                 id: Optional[str] = None):
        if allowlisted_ips is not None:
            pulumi.set(__self__, "allowlisted_ips", allowlisted_ips)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="allowlistedIps")
    def allowlisted_ips(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowlisted_ips")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


