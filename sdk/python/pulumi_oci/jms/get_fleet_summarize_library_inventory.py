# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetFleetSummarizeLibraryInventoryResult',
    'AwaitableGetFleetSummarizeLibraryInventoryResult',
    'get_fleet_summarize_library_inventory',
    'get_fleet_summarize_library_inventory_output',
]

@pulumi.output_type
class GetFleetSummarizeLibraryInventoryResult:
    """
    A collection of values returned by getFleetSummarizeLibraryInventory.
    """
    def __init__(__self__, application_id=None, dynamically_detected_library_count=None, fleet_id=None, high_severity_library_count=None, id=None, low_severity_library_count=None, managed_instance_id=None, medium_severity_library_count=None, statically_detected_library_count=None, time_end=None, time_start=None, uncorrelated_package_count=None):
        if application_id and not isinstance(application_id, str):
            raise TypeError("Expected argument 'application_id' to be a str")
        pulumi.set(__self__, "application_id", application_id)
        if dynamically_detected_library_count and not isinstance(dynamically_detected_library_count, int):
            raise TypeError("Expected argument 'dynamically_detected_library_count' to be a int")
        pulumi.set(__self__, "dynamically_detected_library_count", dynamically_detected_library_count)
        if fleet_id and not isinstance(fleet_id, str):
            raise TypeError("Expected argument 'fleet_id' to be a str")
        pulumi.set(__self__, "fleet_id", fleet_id)
        if high_severity_library_count and not isinstance(high_severity_library_count, int):
            raise TypeError("Expected argument 'high_severity_library_count' to be a int")
        pulumi.set(__self__, "high_severity_library_count", high_severity_library_count)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if low_severity_library_count and not isinstance(low_severity_library_count, int):
            raise TypeError("Expected argument 'low_severity_library_count' to be a int")
        pulumi.set(__self__, "low_severity_library_count", low_severity_library_count)
        if managed_instance_id and not isinstance(managed_instance_id, str):
            raise TypeError("Expected argument 'managed_instance_id' to be a str")
        pulumi.set(__self__, "managed_instance_id", managed_instance_id)
        if medium_severity_library_count and not isinstance(medium_severity_library_count, int):
            raise TypeError("Expected argument 'medium_severity_library_count' to be a int")
        pulumi.set(__self__, "medium_severity_library_count", medium_severity_library_count)
        if statically_detected_library_count and not isinstance(statically_detected_library_count, int):
            raise TypeError("Expected argument 'statically_detected_library_count' to be a int")
        pulumi.set(__self__, "statically_detected_library_count", statically_detected_library_count)
        if time_end and not isinstance(time_end, str):
            raise TypeError("Expected argument 'time_end' to be a str")
        pulumi.set(__self__, "time_end", time_end)
        if time_start and not isinstance(time_start, str):
            raise TypeError("Expected argument 'time_start' to be a str")
        pulumi.set(__self__, "time_start", time_start)
        if uncorrelated_package_count and not isinstance(uncorrelated_package_count, int):
            raise TypeError("Expected argument 'uncorrelated_package_count' to be a int")
        pulumi.set(__self__, "uncorrelated_package_count", uncorrelated_package_count)

    @_builtins.property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "application_id")

    @_builtins.property
    @pulumi.getter(name="dynamicallyDetectedLibraryCount")
    def dynamically_detected_library_count(self) -> _builtins.int:
        return pulumi.get(self, "dynamically_detected_library_count")

    @_builtins.property
    @pulumi.getter(name="fleetId")
    def fleet_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "fleet_id")

    @_builtins.property
    @pulumi.getter(name="highSeverityLibraryCount")
    def high_severity_library_count(self) -> _builtins.int:
        return pulumi.get(self, "high_severity_library_count")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lowSeverityLibraryCount")
    def low_severity_library_count(self) -> _builtins.int:
        return pulumi.get(self, "low_severity_library_count")

    @_builtins.property
    @pulumi.getter(name="managedInstanceId")
    def managed_instance_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "managed_instance_id")

    @_builtins.property
    @pulumi.getter(name="mediumSeverityLibraryCount")
    def medium_severity_library_count(self) -> _builtins.int:
        return pulumi.get(self, "medium_severity_library_count")

    @_builtins.property
    @pulumi.getter(name="staticallyDetectedLibraryCount")
    def statically_detected_library_count(self) -> _builtins.int:
        return pulumi.get(self, "statically_detected_library_count")

    @_builtins.property
    @pulumi.getter(name="timeEnd")
    def time_end(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "time_end")

    @_builtins.property
    @pulumi.getter(name="timeStart")
    def time_start(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "time_start")

    @_builtins.property
    @pulumi.getter(name="uncorrelatedPackageCount")
    def uncorrelated_package_count(self) -> _builtins.int:
        return pulumi.get(self, "uncorrelated_package_count")


class AwaitableGetFleetSummarizeLibraryInventoryResult(GetFleetSummarizeLibraryInventoryResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFleetSummarizeLibraryInventoryResult(
            application_id=self.application_id,
            dynamically_detected_library_count=self.dynamically_detected_library_count,
            fleet_id=self.fleet_id,
            high_severity_library_count=self.high_severity_library_count,
            id=self.id,
            low_severity_library_count=self.low_severity_library_count,
            managed_instance_id=self.managed_instance_id,
            medium_severity_library_count=self.medium_severity_library_count,
            statically_detected_library_count=self.statically_detected_library_count,
            time_end=self.time_end,
            time_start=self.time_start,
            uncorrelated_package_count=self.uncorrelated_package_count)


def get_fleet_summarize_library_inventory(application_id: Optional[_builtins.str] = None,
                                          fleet_id: Optional[_builtins.str] = None,
                                          managed_instance_id: Optional[_builtins.str] = None,
                                          time_end: Optional[_builtins.str] = None,
                                          time_start: Optional[_builtins.str] = None,
                                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFleetSummarizeLibraryInventoryResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['applicationId'] = application_id
    __args__['fleetId'] = fleet_id
    __args__['managedInstanceId'] = managed_instance_id
    __args__['timeEnd'] = time_end
    __args__['timeStart'] = time_start
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:Jms/getFleetSummarizeLibraryInventory:getFleetSummarizeLibraryInventory', __args__, opts=opts, typ=GetFleetSummarizeLibraryInventoryResult).value

    return AwaitableGetFleetSummarizeLibraryInventoryResult(
        application_id=pulumi.get(__ret__, 'application_id'),
        dynamically_detected_library_count=pulumi.get(__ret__, 'dynamically_detected_library_count'),
        fleet_id=pulumi.get(__ret__, 'fleet_id'),
        high_severity_library_count=pulumi.get(__ret__, 'high_severity_library_count'),
        id=pulumi.get(__ret__, 'id'),
        low_severity_library_count=pulumi.get(__ret__, 'low_severity_library_count'),
        managed_instance_id=pulumi.get(__ret__, 'managed_instance_id'),
        medium_severity_library_count=pulumi.get(__ret__, 'medium_severity_library_count'),
        statically_detected_library_count=pulumi.get(__ret__, 'statically_detected_library_count'),
        time_end=pulumi.get(__ret__, 'time_end'),
        time_start=pulumi.get(__ret__, 'time_start'),
        uncorrelated_package_count=pulumi.get(__ret__, 'uncorrelated_package_count'))
def get_fleet_summarize_library_inventory_output(application_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                 fleet_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                 managed_instance_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                 time_end: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                 time_start: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetFleetSummarizeLibraryInventoryResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['applicationId'] = application_id
    __args__['fleetId'] = fleet_id
    __args__['managedInstanceId'] = managed_instance_id
    __args__['timeEnd'] = time_end
    __args__['timeStart'] = time_start
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('oci:Jms/getFleetSummarizeLibraryInventory:getFleetSummarizeLibraryInventory', __args__, opts=opts, typ=GetFleetSummarizeLibraryInventoryResult)
    return __ret__.apply(lambda __response__: GetFleetSummarizeLibraryInventoryResult(
        application_id=pulumi.get(__response__, 'application_id'),
        dynamically_detected_library_count=pulumi.get(__response__, 'dynamically_detected_library_count'),
        fleet_id=pulumi.get(__response__, 'fleet_id'),
        high_severity_library_count=pulumi.get(__response__, 'high_severity_library_count'),
        id=pulumi.get(__response__, 'id'),
        low_severity_library_count=pulumi.get(__response__, 'low_severity_library_count'),
        managed_instance_id=pulumi.get(__response__, 'managed_instance_id'),
        medium_severity_library_count=pulumi.get(__response__, 'medium_severity_library_count'),
        statically_detected_library_count=pulumi.get(__response__, 'statically_detected_library_count'),
        time_end=pulumi.get(__response__, 'time_end'),
        time_start=pulumi.get(__response__, 'time_start'),
        uncorrelated_package_count=pulumi.get(__response__, 'uncorrelated_package_count')))
