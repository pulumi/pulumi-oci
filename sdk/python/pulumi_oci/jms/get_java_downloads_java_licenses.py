# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetJavaDownloadsJavaLicensesResult',
    'AwaitableGetJavaDownloadsJavaLicensesResult',
    'get_java_downloads_java_licenses',
    'get_java_downloads_java_licenses_output',
]

@pulumi.output_type
class GetJavaDownloadsJavaLicensesResult:
    """
    A collection of values returned by getJavaDownloadsJavaLicenses.
    """
    def __init__(__self__, display_name=None, filters=None, id=None, java_license_collections=None, license_type=None):
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if java_license_collections and not isinstance(java_license_collections, list):
            raise TypeError("Expected argument 'java_license_collections' to be a list")
        pulumi.set(__self__, "java_license_collections", java_license_collections)
        if license_type and not isinstance(license_type, str):
            raise TypeError("Expected argument 'license_type' to be a str")
        pulumi.set(__self__, "license_type", license_type)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        Commonly used name for the license type.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetJavaDownloadsJavaLicensesFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="javaLicenseCollections")
    def java_license_collections(self) -> Sequence['outputs.GetJavaDownloadsJavaLicensesJavaLicenseCollectionResult']:
        """
        The list of java_license_collection.
        """
        return pulumi.get(self, "java_license_collections")

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> Optional[str]:
        """
        License Type
        """
        return pulumi.get(self, "license_type")


class AwaitableGetJavaDownloadsJavaLicensesResult(GetJavaDownloadsJavaLicensesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetJavaDownloadsJavaLicensesResult(
            display_name=self.display_name,
            filters=self.filters,
            id=self.id,
            java_license_collections=self.java_license_collections,
            license_type=self.license_type)


def get_java_downloads_java_licenses(display_name: Optional[str] = None,
                                     filters: Optional[Sequence[pulumi.InputType['GetJavaDownloadsJavaLicensesFilterArgs']]] = None,
                                     license_type: Optional[str] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetJavaDownloadsJavaLicensesResult:
    """
    This data source provides the list of Java Licenses in Oracle Cloud Infrastructure Jms Java Downloads service.

    Return a list with details of all Java licenses.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_java_licenses = oci.Jms.get_java_downloads_java_licenses(display_name=var["java_license_display_name"],
        license_type=var["java_license_license_type"])
    ```


    :param str display_name: A filter to return only resources that match the display name.
    :param str license_type: Unique Java license type.
    """
    __args__ = dict()
    __args__['displayName'] = display_name
    __args__['filters'] = filters
    __args__['licenseType'] = license_type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:Jms/getJavaDownloadsJavaLicenses:getJavaDownloadsJavaLicenses', __args__, opts=opts, typ=GetJavaDownloadsJavaLicensesResult).value

    return AwaitableGetJavaDownloadsJavaLicensesResult(
        display_name=pulumi.get(__ret__, 'display_name'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        java_license_collections=pulumi.get(__ret__, 'java_license_collections'),
        license_type=pulumi.get(__ret__, 'license_type'))


@_utilities.lift_output_func(get_java_downloads_java_licenses)
def get_java_downloads_java_licenses_output(display_name: Optional[pulumi.Input[Optional[str]]] = None,
                                            filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetJavaDownloadsJavaLicensesFilterArgs']]]]] = None,
                                            license_type: Optional[pulumi.Input[Optional[str]]] = None,
                                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetJavaDownloadsJavaLicensesResult]:
    """
    This data source provides the list of Java Licenses in Oracle Cloud Infrastructure Jms Java Downloads service.

    Return a list with details of all Java licenses.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_java_licenses = oci.Jms.get_java_downloads_java_licenses(display_name=var["java_license_display_name"],
        license_type=var["java_license_license_type"])
    ```


    :param str display_name: A filter to return only resources that match the display name.
    :param str license_type: Unique Java license type.
    """
    ...
