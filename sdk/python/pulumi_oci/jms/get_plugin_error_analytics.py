# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetPluginErrorAnalyticsResult',
    'AwaitableGetPluginErrorAnalyticsResult',
    'get_plugin_error_analytics',
    'get_plugin_error_analytics_output',
]

@pulumi.output_type
class GetPluginErrorAnalyticsResult:
    """
    A collection of values returned by getPluginErrorAnalytics.
    """
    def __init__(__self__, compartment_id=None, compartment_id_in_subtree=None, filters=None, id=None, plugin_error_aggregation_collections=None):
        if compartment_id and not isinstance(compartment_id, str):
            raise TypeError("Expected argument 'compartment_id' to be a str")
        pulumi.set(__self__, "compartment_id", compartment_id)
        if compartment_id_in_subtree and not isinstance(compartment_id_in_subtree, bool):
            raise TypeError("Expected argument 'compartment_id_in_subtree' to be a bool")
        pulumi.set(__self__, "compartment_id_in_subtree", compartment_id_in_subtree)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if plugin_error_aggregation_collections and not isinstance(plugin_error_aggregation_collections, list):
            raise TypeError("Expected argument 'plugin_error_aggregation_collections' to be a list")
        pulumi.set(__self__, "plugin_error_aggregation_collections", plugin_error_aggregation_collections)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="compartmentIdInSubtree")
    def compartment_id_in_subtree(self) -> Optional[bool]:
        return pulumi.get(self, "compartment_id_in_subtree")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetPluginErrorAnalyticsFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="pluginErrorAggregationCollections")
    def plugin_error_aggregation_collections(self) -> Sequence['outputs.GetPluginErrorAnalyticsPluginErrorAggregationCollectionResult']:
        """
        The list of plugin_error_aggregation_collection.
        """
        return pulumi.get(self, "plugin_error_aggregation_collections")


class AwaitableGetPluginErrorAnalyticsResult(GetPluginErrorAnalyticsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPluginErrorAnalyticsResult(
            compartment_id=self.compartment_id,
            compartment_id_in_subtree=self.compartment_id_in_subtree,
            filters=self.filters,
            id=self.id,
            plugin_error_aggregation_collections=self.plugin_error_aggregation_collections)


def get_plugin_error_analytics(compartment_id: Optional[str] = None,
                               compartment_id_in_subtree: Optional[bool] = None,
                               filters: Optional[Sequence[Union['GetPluginErrorAnalyticsFilterArgs', 'GetPluginErrorAnalyticsFilterArgsDict']]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPluginErrorAnalyticsResult:
    """
    This data source provides the list of Plugin Error Analytics in Oracle Cloud Infrastructure Jms service.

    Returns a high level summary of PluginErrors.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_plugin_error_analytics = oci.Jms.get_plugin_error_analytics(compartment_id=compartment_id,
        compartment_id_in_subtree=plugin_error_analytic_compartment_id_in_subtree)
    ```


    :param str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
    :param bool compartment_id_in_subtree: Flag to determine whether the info should be gathered only in the compartment or in the compartment and its subcompartments.
    """
    __args__ = dict()
    __args__['compartmentId'] = compartment_id
    __args__['compartmentIdInSubtree'] = compartment_id_in_subtree
    __args__['filters'] = filters
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:Jms/getPluginErrorAnalytics:getPluginErrorAnalytics', __args__, opts=opts, typ=GetPluginErrorAnalyticsResult).value

    return AwaitableGetPluginErrorAnalyticsResult(
        compartment_id=pulumi.get(__ret__, 'compartment_id'),
        compartment_id_in_subtree=pulumi.get(__ret__, 'compartment_id_in_subtree'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        plugin_error_aggregation_collections=pulumi.get(__ret__, 'plugin_error_aggregation_collections'))
def get_plugin_error_analytics_output(compartment_id: Optional[pulumi.Input[Optional[str]]] = None,
                                      compartment_id_in_subtree: Optional[pulumi.Input[Optional[bool]]] = None,
                                      filters: Optional[pulumi.Input[Optional[Sequence[Union['GetPluginErrorAnalyticsFilterArgs', 'GetPluginErrorAnalyticsFilterArgsDict']]]]] = None,
                                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPluginErrorAnalyticsResult]:
    """
    This data source provides the list of Plugin Error Analytics in Oracle Cloud Infrastructure Jms service.

    Returns a high level summary of PluginErrors.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_plugin_error_analytics = oci.Jms.get_plugin_error_analytics(compartment_id=compartment_id,
        compartment_id_in_subtree=plugin_error_analytic_compartment_id_in_subtree)
    ```


    :param str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
    :param bool compartment_id_in_subtree: Flag to determine whether the info should be gathered only in the compartment or in the compartment and its subcompartments.
    """
    __args__ = dict()
    __args__['compartmentId'] = compartment_id
    __args__['compartmentIdInSubtree'] = compartment_id_in_subtree
    __args__['filters'] = filters
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('oci:Jms/getPluginErrorAnalytics:getPluginErrorAnalytics', __args__, opts=opts, typ=GetPluginErrorAnalyticsResult)
    return __ret__.apply(lambda __response__: GetPluginErrorAnalyticsResult(
        compartment_id=pulumi.get(__response__, 'compartment_id'),
        compartment_id_in_subtree=pulumi.get(__response__, 'compartment_id_in_subtree'),
        filters=pulumi.get(__response__, 'filters'),
        id=pulumi.get(__response__, 'id'),
        plugin_error_aggregation_collections=pulumi.get(__response__, 'plugin_error_aggregation_collections')))
