# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'FleetInventoryLog',
    'FleetOperationLog',
    'GetAnnouncementsAnnouncementCollectionResult',
    'GetAnnouncementsAnnouncementCollectionItemResult',
    'GetAnnouncementsFilterResult',
    'GetFleetAdvancedFeatureConfigurationAdvancedUsageTrackingResult',
    'GetFleetAdvancedFeatureConfigurationCryptoEventAnalysisResult',
    'GetFleetAdvancedFeatureConfigurationCryptoEventAnalysisSummarizedEventsLogResult',
    'GetFleetAdvancedFeatureConfigurationJavaMigrationAnalysisResult',
    'GetFleetAdvancedFeatureConfigurationJfrRecordingResult',
    'GetFleetAdvancedFeatureConfigurationLcmResult',
    'GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionResult',
    'GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionMinimumKeySizeSettingResult',
    'GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionMinimumKeySizeSettingCertpathResult',
    'GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionMinimumKeySizeSettingJarResult',
    'GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionMinimumKeySizeSettingTlResult',
    'GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionProxyResult',
    'GetFleetAdvancedFeatureConfigurationPerformanceTuningAnalysisResult',
    'GetFleetBlocklistsFilterResult',
    'GetFleetBlocklistsItemResult',
    'GetFleetBlocklistsItemTargetResult',
    'GetFleetCryptoAnalysisResultsCryptoAnalysisResultCollectionResult',
    'GetFleetCryptoAnalysisResultsCryptoAnalysisResultCollectionItemResult',
    'GetFleetCryptoAnalysisResultsFilterResult',
    'GetFleetDiagnosesFilterResult',
    'GetFleetDiagnosesFleetDiagnosisCollectionResult',
    'GetFleetDiagnosesFleetDiagnosisCollectionItemResult',
    'GetFleetInventoryLogResult',
    'GetFleetJavaMigrationAnalysisResultsFilterResult',
    'GetFleetJavaMigrationAnalysisResultsJavaMigrationAnalysisResultCollectionResult',
    'GetFleetJavaMigrationAnalysisResultsJavaMigrationAnalysisResultCollectionItemResult',
    'GetFleetOperationLogResult',
    'GetFleetPerformanceTuningAnalysisResultsFilterResult',
    'GetFleetPerformanceTuningAnalysisResultsPerformanceTuningAnalysisResultCollectionResult',
    'GetFleetPerformanceTuningAnalysisResultsPerformanceTuningAnalysisResultCollectionItemResult',
    'GetFleetsFilterResult',
    'GetFleetsFleetCollectionResult',
    'GetFleetsFleetCollectionItemResult',
    'GetFleetsFleetCollectionItemInventoryLogResult',
    'GetFleetsFleetCollectionItemOperationLogResult',
    'GetInstallationSiteItemResult',
    'GetInstallationSiteItemBlocklistResult',
    'GetInstallationSiteItemJreResult',
    'GetInstallationSiteItemOperatingSystemResult',
    'GetInstallationSitesFilterResult',
    'GetInstallationSitesInstallationSiteCollectionResult',
    'GetInstallationSitesInstallationSiteCollectionItemResult',
    'GetInstallationSitesInstallationSiteCollectionItemItemResult',
    'GetInstallationSitesInstallationSiteCollectionItemItemBlocklistResult',
    'GetInstallationSitesInstallationSiteCollectionItemItemJreResult',
    'GetInstallationSitesInstallationSiteCollectionItemItemOperatingSystemResult',
    'GetJavaFamiliesFilterResult',
    'GetJavaFamiliesJavaFamilyCollectionResult',
    'GetJavaFamiliesJavaFamilyCollectionItemResult',
    'GetJavaReleaseArtifactResult',
    'GetJavaReleaseFamilyDetailResult',
    'GetJavaReleaseLicenseDetailResult',
    'GetJavaReleasesFilterResult',
    'GetJavaReleasesJavaReleaseCollectionResult',
    'GetJavaReleasesJavaReleaseCollectionItemResult',
    'GetJavaReleasesJavaReleaseCollectionItemArtifactResult',
    'GetJavaReleasesJavaReleaseCollectionItemFamilyDetailResult',
    'GetJavaReleasesJavaReleaseCollectionItemLicenseDetailResult',
    'GetListJreUsageItemResult',
    'GetListJreUsageItemOperatingSystemResult',
]

@pulumi.output_type
class FleetInventoryLog(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logGroupId":
            suggest = "log_group_id"
        elif key == "logId":
            suggest = "log_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FleetInventoryLog. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FleetInventoryLog.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FleetInventoryLog.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 log_group_id: str,
                 log_id: str):
        pulumi.set(__self__, "log_group_id", log_group_id)
        pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> str:
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> str:
        return pulumi.get(self, "log_id")


@pulumi.output_type
class FleetOperationLog(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logGroupId":
            suggest = "log_group_id"
        elif key == "logId":
            suggest = "log_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FleetOperationLog. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FleetOperationLog.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FleetOperationLog.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 log_group_id: str,
                 log_id: str):
        pulumi.set(__self__, "log_group_id", log_group_id)
        pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> str:
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> str:
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetAnnouncementsAnnouncementCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetAnnouncementsAnnouncementCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetAnnouncementsAnnouncementCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAnnouncementsAnnouncementCollectionItemResult(dict):
    def __init__(__self__, *,
                 key: Optional[int] = None,
                 summary: Optional[str] = None,
                 time_released: Optional[str] = None,
                 url: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if summary is not None:
            pulumi.set(__self__, "summary", summary)
        if time_released is not None:
            pulumi.set(__self__, "time_released", time_released)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def key(self) -> Optional[int]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def summary(self) -> Optional[str]:
        return pulumi.get(self, "summary")

    @property
    @pulumi.getter(name="timeReleased")
    def time_released(self) -> Optional[str]:
        return pulumi.get(self, "time_released")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")


@pulumi.output_type
class GetAnnouncementsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetFleetAdvancedFeatureConfigurationAdvancedUsageTrackingResult(dict):
    def __init__(__self__, *,
                 is_enabled: Optional[bool] = None):
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")


@pulumi.output_type
class GetFleetAdvancedFeatureConfigurationCryptoEventAnalysisResult(dict):
    def __init__(__self__, *,
                 is_enabled: Optional[bool] = None,
                 summarized_events_logs: Optional[Sequence['outputs.GetFleetAdvancedFeatureConfigurationCryptoEventAnalysisSummarizedEventsLogResult']] = None):
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if summarized_events_logs is not None:
            pulumi.set(__self__, "summarized_events_logs", summarized_events_logs)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="summarizedEventsLogs")
    def summarized_events_logs(self) -> Optional[Sequence['outputs.GetFleetAdvancedFeatureConfigurationCryptoEventAnalysisSummarizedEventsLogResult']]:
        return pulumi.get(self, "summarized_events_logs")


@pulumi.output_type
class GetFleetAdvancedFeatureConfigurationCryptoEventAnalysisSummarizedEventsLogResult(dict):
    def __init__(__self__, *,
                 log_group_id: Optional[str] = None,
                 log_id: Optional[str] = None):
        if log_group_id is not None:
            pulumi.set(__self__, "log_group_id", log_group_id)
        if log_id is not None:
            pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[str]:
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> Optional[str]:
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetFleetAdvancedFeatureConfigurationJavaMigrationAnalysisResult(dict):
    def __init__(__self__, *,
                 is_enabled: Optional[bool] = None):
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")


@pulumi.output_type
class GetFleetAdvancedFeatureConfigurationJfrRecordingResult(dict):
    def __init__(__self__, *,
                 is_enabled: Optional[bool] = None):
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")


@pulumi.output_type
class GetFleetAdvancedFeatureConfigurationLcmResult(dict):
    def __init__(__self__, *,
                 is_enabled: Optional[bool] = None,
                 post_installation_actions: Optional[Sequence['outputs.GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionResult']] = None):
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if post_installation_actions is not None:
            pulumi.set(__self__, "post_installation_actions", post_installation_actions)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="postInstallationActions")
    def post_installation_actions(self) -> Optional[Sequence['outputs.GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionResult']]:
        return pulumi.get(self, "post_installation_actions")


@pulumi.output_type
class GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionResult(dict):
    def __init__(__self__, *,
                 add_logging_handler: Optional[bool] = None,
                 disabled_tls_versions: Optional[Sequence[str]] = None,
                 global_logging_level: Optional[str] = None,
                 minimum_key_size_settings: Optional[Sequence['outputs.GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionMinimumKeySizeSettingResult']] = None,
                 proxies: Optional[Sequence['outputs.GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionProxyResult']] = None,
                 should_replace_certificates_operating_system: Optional[bool] = None):
        if add_logging_handler is not None:
            pulumi.set(__self__, "add_logging_handler", add_logging_handler)
        if disabled_tls_versions is not None:
            pulumi.set(__self__, "disabled_tls_versions", disabled_tls_versions)
        if global_logging_level is not None:
            pulumi.set(__self__, "global_logging_level", global_logging_level)
        if minimum_key_size_settings is not None:
            pulumi.set(__self__, "minimum_key_size_settings", minimum_key_size_settings)
        if proxies is not None:
            pulumi.set(__self__, "proxies", proxies)
        if should_replace_certificates_operating_system is not None:
            pulumi.set(__self__, "should_replace_certificates_operating_system", should_replace_certificates_operating_system)

    @property
    @pulumi.getter(name="addLoggingHandler")
    def add_logging_handler(self) -> Optional[bool]:
        return pulumi.get(self, "add_logging_handler")

    @property
    @pulumi.getter(name="disabledTlsVersions")
    def disabled_tls_versions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "disabled_tls_versions")

    @property
    @pulumi.getter(name="globalLoggingLevel")
    def global_logging_level(self) -> Optional[str]:
        return pulumi.get(self, "global_logging_level")

    @property
    @pulumi.getter(name="minimumKeySizeSettings")
    def minimum_key_size_settings(self) -> Optional[Sequence['outputs.GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionMinimumKeySizeSettingResult']]:
        return pulumi.get(self, "minimum_key_size_settings")

    @property
    @pulumi.getter
    def proxies(self) -> Optional[Sequence['outputs.GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionProxyResult']]:
        return pulumi.get(self, "proxies")

    @property
    @pulumi.getter(name="shouldReplaceCertificatesOperatingSystem")
    def should_replace_certificates_operating_system(self) -> Optional[bool]:
        return pulumi.get(self, "should_replace_certificates_operating_system")


@pulumi.output_type
class GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionMinimumKeySizeSettingResult(dict):
    def __init__(__self__, *,
                 certpaths: Optional[Sequence['outputs.GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionMinimumKeySizeSettingCertpathResult']] = None,
                 jars: Optional[Sequence['outputs.GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionMinimumKeySizeSettingJarResult']] = None,
                 tls: Optional[Sequence['outputs.GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionMinimumKeySizeSettingTlResult']] = None):
        if certpaths is not None:
            pulumi.set(__self__, "certpaths", certpaths)
        if jars is not None:
            pulumi.set(__self__, "jars", jars)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)

    @property
    @pulumi.getter
    def certpaths(self) -> Optional[Sequence['outputs.GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionMinimumKeySizeSettingCertpathResult']]:
        return pulumi.get(self, "certpaths")

    @property
    @pulumi.getter
    def jars(self) -> Optional[Sequence['outputs.GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionMinimumKeySizeSettingJarResult']]:
        return pulumi.get(self, "jars")

    @property
    @pulumi.getter
    def tls(self) -> Optional[Sequence['outputs.GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionMinimumKeySizeSettingTlResult']]:
        return pulumi.get(self, "tls")


@pulumi.output_type
class GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionMinimumKeySizeSettingCertpathResult(dict):
    def __init__(__self__, *,
                 key_size: Optional[int] = None,
                 name: Optional[str] = None):
        if key_size is not None:
            pulumi.set(__self__, "key_size", key_size)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="keySize")
    def key_size(self) -> Optional[int]:
        return pulumi.get(self, "key_size")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionMinimumKeySizeSettingJarResult(dict):
    def __init__(__self__, *,
                 key_size: Optional[int] = None,
                 name: Optional[str] = None):
        if key_size is not None:
            pulumi.set(__self__, "key_size", key_size)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="keySize")
    def key_size(self) -> Optional[int]:
        return pulumi.get(self, "key_size")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionMinimumKeySizeSettingTlResult(dict):
    def __init__(__self__, *,
                 key_size: Optional[int] = None,
                 name: Optional[str] = None):
        if key_size is not None:
            pulumi.set(__self__, "key_size", key_size)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="keySize")
    def key_size(self) -> Optional[int]:
        return pulumi.get(self, "key_size")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionProxyResult(dict):
    def __init__(__self__, *,
                 ftp_proxy_host: Optional[str] = None,
                 ftp_proxy_port: Optional[int] = None,
                 http_proxy_host: Optional[str] = None,
                 http_proxy_port: Optional[int] = None,
                 https_proxy_host: Optional[str] = None,
                 https_proxy_port: Optional[int] = None,
                 socks_proxy_host: Optional[str] = None,
                 socks_proxy_port: Optional[int] = None,
                 use_system_proxies: Optional[bool] = None):
        if ftp_proxy_host is not None:
            pulumi.set(__self__, "ftp_proxy_host", ftp_proxy_host)
        if ftp_proxy_port is not None:
            pulumi.set(__self__, "ftp_proxy_port", ftp_proxy_port)
        if http_proxy_host is not None:
            pulumi.set(__self__, "http_proxy_host", http_proxy_host)
        if http_proxy_port is not None:
            pulumi.set(__self__, "http_proxy_port", http_proxy_port)
        if https_proxy_host is not None:
            pulumi.set(__self__, "https_proxy_host", https_proxy_host)
        if https_proxy_port is not None:
            pulumi.set(__self__, "https_proxy_port", https_proxy_port)
        if socks_proxy_host is not None:
            pulumi.set(__self__, "socks_proxy_host", socks_proxy_host)
        if socks_proxy_port is not None:
            pulumi.set(__self__, "socks_proxy_port", socks_proxy_port)
        if use_system_proxies is not None:
            pulumi.set(__self__, "use_system_proxies", use_system_proxies)

    @property
    @pulumi.getter(name="ftpProxyHost")
    def ftp_proxy_host(self) -> Optional[str]:
        return pulumi.get(self, "ftp_proxy_host")

    @property
    @pulumi.getter(name="ftpProxyPort")
    def ftp_proxy_port(self) -> Optional[int]:
        return pulumi.get(self, "ftp_proxy_port")

    @property
    @pulumi.getter(name="httpProxyHost")
    def http_proxy_host(self) -> Optional[str]:
        return pulumi.get(self, "http_proxy_host")

    @property
    @pulumi.getter(name="httpProxyPort")
    def http_proxy_port(self) -> Optional[int]:
        return pulumi.get(self, "http_proxy_port")

    @property
    @pulumi.getter(name="httpsProxyHost")
    def https_proxy_host(self) -> Optional[str]:
        return pulumi.get(self, "https_proxy_host")

    @property
    @pulumi.getter(name="httpsProxyPort")
    def https_proxy_port(self) -> Optional[int]:
        return pulumi.get(self, "https_proxy_port")

    @property
    @pulumi.getter(name="socksProxyHost")
    def socks_proxy_host(self) -> Optional[str]:
        return pulumi.get(self, "socks_proxy_host")

    @property
    @pulumi.getter(name="socksProxyPort")
    def socks_proxy_port(self) -> Optional[int]:
        return pulumi.get(self, "socks_proxy_port")

    @property
    @pulumi.getter(name="useSystemProxies")
    def use_system_proxies(self) -> Optional[bool]:
        return pulumi.get(self, "use_system_proxies")


@pulumi.output_type
class GetFleetAdvancedFeatureConfigurationPerformanceTuningAnalysisResult(dict):
    def __init__(__self__, *,
                 is_enabled: Optional[bool] = None):
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")


@pulumi.output_type
class GetFleetBlocklistsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetFleetBlocklistsItemResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 operation: Optional[str] = None,
                 reason: Optional[str] = None,
                 targets: Optional[Sequence['outputs.GetFleetBlocklistsItemTargetResult']] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operation is not None:
            pulumi.set(__self__, "operation", operation)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if targets is not None:
            pulumi.set(__self__, "targets", targets)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operation(self) -> Optional[str]:
        return pulumi.get(self, "operation")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def targets(self) -> Optional[Sequence['outputs.GetFleetBlocklistsItemTargetResult']]:
        return pulumi.get(self, "targets")


@pulumi.output_type
class GetFleetBlocklistsItemTargetResult(dict):
    def __init__(__self__, *,
                 fleet_id: Optional[str] = None,
                 installation_key: Optional[str] = None,
                 managed_instance_id: Optional[str] = None):
        if fleet_id is not None:
            pulumi.set(__self__, "fleet_id", fleet_id)
        if installation_key is not None:
            pulumi.set(__self__, "installation_key", installation_key)
        if managed_instance_id is not None:
            pulumi.set(__self__, "managed_instance_id", managed_instance_id)

    @property
    @pulumi.getter(name="fleetId")
    def fleet_id(self) -> Optional[str]:
        return pulumi.get(self, "fleet_id")

    @property
    @pulumi.getter(name="installationKey")
    def installation_key(self) -> Optional[str]:
        return pulumi.get(self, "installation_key")

    @property
    @pulumi.getter(name="managedInstanceId")
    def managed_instance_id(self) -> Optional[str]:
        return pulumi.get(self, "managed_instance_id")


@pulumi.output_type
class GetFleetCryptoAnalysisResultsCryptoAnalysisResultCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetFleetCryptoAnalysisResultsCryptoAnalysisResultCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetFleetCryptoAnalysisResultsCryptoAnalysisResultCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetFleetCryptoAnalysisResultsCryptoAnalysisResultCollectionItemResult(dict):
    def __init__(__self__, *,
                 aggregation_mode: Optional[str] = None,
                 bucket: Optional[str] = None,
                 crypto_roadmap_version: Optional[str] = None,
                 finding_count: Optional[int] = None,
                 fleet_id: Optional[str] = None,
                 host_name: Optional[str] = None,
                 id: Optional[str] = None,
                 managed_instance_id: Optional[str] = None,
                 namespace: Optional[str] = None,
                 non_compliant_finding_count: Optional[int] = None,
                 object: Optional[str] = None,
                 summarized_event_count: Optional[int] = None,
                 time_created: Optional[str] = None,
                 time_first_event: Optional[str] = None,
                 time_last_event: Optional[str] = None,
                 total_event_count: Optional[int] = None,
                 work_request_id: Optional[str] = None):
        if aggregation_mode is not None:
            pulumi.set(__self__, "aggregation_mode", aggregation_mode)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if crypto_roadmap_version is not None:
            pulumi.set(__self__, "crypto_roadmap_version", crypto_roadmap_version)
        if finding_count is not None:
            pulumi.set(__self__, "finding_count", finding_count)
        if fleet_id is not None:
            pulumi.set(__self__, "fleet_id", fleet_id)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if managed_instance_id is not None:
            pulumi.set(__self__, "managed_instance_id", managed_instance_id)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if non_compliant_finding_count is not None:
            pulumi.set(__self__, "non_compliant_finding_count", non_compliant_finding_count)
        if object is not None:
            pulumi.set(__self__, "object", object)
        if summarized_event_count is not None:
            pulumi.set(__self__, "summarized_event_count", summarized_event_count)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_first_event is not None:
            pulumi.set(__self__, "time_first_event", time_first_event)
        if time_last_event is not None:
            pulumi.set(__self__, "time_last_event", time_last_event)
        if total_event_count is not None:
            pulumi.set(__self__, "total_event_count", total_event_count)
        if work_request_id is not None:
            pulumi.set(__self__, "work_request_id", work_request_id)

    @property
    @pulumi.getter(name="aggregationMode")
    def aggregation_mode(self) -> Optional[str]:
        return pulumi.get(self, "aggregation_mode")

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="cryptoRoadmapVersion")
    def crypto_roadmap_version(self) -> Optional[str]:
        return pulumi.get(self, "crypto_roadmap_version")

    @property
    @pulumi.getter(name="findingCount")
    def finding_count(self) -> Optional[int]:
        return pulumi.get(self, "finding_count")

    @property
    @pulumi.getter(name="fleetId")
    def fleet_id(self) -> Optional[str]:
        return pulumi.get(self, "fleet_id")

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[str]:
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="managedInstanceId")
    def managed_instance_id(self) -> Optional[str]:
        return pulumi.get(self, "managed_instance_id")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="nonCompliantFindingCount")
    def non_compliant_finding_count(self) -> Optional[int]:
        return pulumi.get(self, "non_compliant_finding_count")

    @property
    @pulumi.getter
    def object(self) -> Optional[str]:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter(name="summarizedEventCount")
    def summarized_event_count(self) -> Optional[int]:
        return pulumi.get(self, "summarized_event_count")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeFirstEvent")
    def time_first_event(self) -> Optional[str]:
        return pulumi.get(self, "time_first_event")

    @property
    @pulumi.getter(name="timeLastEvent")
    def time_last_event(self) -> Optional[str]:
        return pulumi.get(self, "time_last_event")

    @property
    @pulumi.getter(name="totalEventCount")
    def total_event_count(self) -> Optional[int]:
        return pulumi.get(self, "total_event_count")

    @property
    @pulumi.getter(name="workRequestId")
    def work_request_id(self) -> Optional[str]:
        return pulumi.get(self, "work_request_id")


@pulumi.output_type
class GetFleetCryptoAnalysisResultsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetFleetDiagnosesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetFleetDiagnosesFleetDiagnosisCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetFleetDiagnosesFleetDiagnosisCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetFleetDiagnosesFleetDiagnosisCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetFleetDiagnosesFleetDiagnosisCollectionItemResult(dict):
    def __init__(__self__, *,
                 resource_diagnosis: Optional[str] = None,
                 resource_id: Optional[str] = None,
                 resource_state: Optional[str] = None,
                 resource_type: Optional[str] = None):
        if resource_diagnosis is not None:
            pulumi.set(__self__, "resource_diagnosis", resource_diagnosis)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_state is not None:
            pulumi.set(__self__, "resource_state", resource_state)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter(name="resourceDiagnosis")
    def resource_diagnosis(self) -> Optional[str]:
        return pulumi.get(self, "resource_diagnosis")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceState")
    def resource_state(self) -> Optional[str]:
        return pulumi.get(self, "resource_state")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")


@pulumi.output_type
class GetFleetInventoryLogResult(dict):
    def __init__(__self__, *,
                 log_group_id: Optional[str] = None,
                 log_id: Optional[str] = None):
        if log_group_id is not None:
            pulumi.set(__self__, "log_group_id", log_group_id)
        if log_id is not None:
            pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[str]:
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> Optional[str]:
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetFleetJavaMigrationAnalysisResultsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetFleetJavaMigrationAnalysisResultsJavaMigrationAnalysisResultCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetFleetJavaMigrationAnalysisResultsJavaMigrationAnalysisResultCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetFleetJavaMigrationAnalysisResultsJavaMigrationAnalysisResultCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetFleetJavaMigrationAnalysisResultsJavaMigrationAnalysisResultCollectionItemResult(dict):
    def __init__(__self__, *,
                 application_execution_type: Optional[str] = None,
                 application_name: Optional[str] = None,
                 application_path: Optional[str] = None,
                 bucket: Optional[str] = None,
                 fleet_id: Optional[str] = None,
                 host_name: Optional[str] = None,
                 id: Optional[str] = None,
                 managed_instance_id: Optional[str] = None,
                 metadata: Optional[str] = None,
                 namespace: Optional[str] = None,
                 object_lists: Optional[Sequence[str]] = None,
                 object_storage_upload_dir_path: Optional[str] = None,
                 source_jdk_version: Optional[str] = None,
                 target_jdk_version: Optional[str] = None,
                 time_created: Optional[str] = None,
                 work_request_id: Optional[str] = None):
        if application_execution_type is not None:
            pulumi.set(__self__, "application_execution_type", application_execution_type)
        if application_name is not None:
            pulumi.set(__self__, "application_name", application_name)
        if application_path is not None:
            pulumi.set(__self__, "application_path", application_path)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if fleet_id is not None:
            pulumi.set(__self__, "fleet_id", fleet_id)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if managed_instance_id is not None:
            pulumi.set(__self__, "managed_instance_id", managed_instance_id)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if object_lists is not None:
            pulumi.set(__self__, "object_lists", object_lists)
        if object_storage_upload_dir_path is not None:
            pulumi.set(__self__, "object_storage_upload_dir_path", object_storage_upload_dir_path)
        if source_jdk_version is not None:
            pulumi.set(__self__, "source_jdk_version", source_jdk_version)
        if target_jdk_version is not None:
            pulumi.set(__self__, "target_jdk_version", target_jdk_version)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if work_request_id is not None:
            pulumi.set(__self__, "work_request_id", work_request_id)

    @property
    @pulumi.getter(name="applicationExecutionType")
    def application_execution_type(self) -> Optional[str]:
        return pulumi.get(self, "application_execution_type")

    @property
    @pulumi.getter(name="applicationName")
    def application_name(self) -> Optional[str]:
        return pulumi.get(self, "application_name")

    @property
    @pulumi.getter(name="applicationPath")
    def application_path(self) -> Optional[str]:
        return pulumi.get(self, "application_path")

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="fleetId")
    def fleet_id(self) -> Optional[str]:
        return pulumi.get(self, "fleet_id")

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[str]:
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="managedInstanceId")
    def managed_instance_id(self) -> Optional[str]:
        return pulumi.get(self, "managed_instance_id")

    @property
    @pulumi.getter
    def metadata(self) -> Optional[str]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="objectLists")
    def object_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "object_lists")

    @property
    @pulumi.getter(name="objectStorageUploadDirPath")
    def object_storage_upload_dir_path(self) -> Optional[str]:
        return pulumi.get(self, "object_storage_upload_dir_path")

    @property
    @pulumi.getter(name="sourceJdkVersion")
    def source_jdk_version(self) -> Optional[str]:
        return pulumi.get(self, "source_jdk_version")

    @property
    @pulumi.getter(name="targetJdkVersion")
    def target_jdk_version(self) -> Optional[str]:
        return pulumi.get(self, "target_jdk_version")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="workRequestId")
    def work_request_id(self) -> Optional[str]:
        return pulumi.get(self, "work_request_id")


@pulumi.output_type
class GetFleetOperationLogResult(dict):
    def __init__(__self__, *,
                 log_group_id: Optional[str] = None,
                 log_id: Optional[str] = None):
        if log_group_id is not None:
            pulumi.set(__self__, "log_group_id", log_group_id)
        if log_id is not None:
            pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[str]:
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> Optional[str]:
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetFleetPerformanceTuningAnalysisResultsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetFleetPerformanceTuningAnalysisResultsPerformanceTuningAnalysisResultCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetFleetPerformanceTuningAnalysisResultsPerformanceTuningAnalysisResultCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetFleetPerformanceTuningAnalysisResultsPerformanceTuningAnalysisResultCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetFleetPerformanceTuningAnalysisResultsPerformanceTuningAnalysisResultCollectionItemResult(dict):
    def __init__(__self__, *,
                 application_id: Optional[str] = None,
                 application_installation_id: Optional[str] = None,
                 application_installation_path: Optional[str] = None,
                 application_name: Optional[str] = None,
                 bucket: Optional[str] = None,
                 fleet_id: Optional[str] = None,
                 host_name: Optional[str] = None,
                 id: Optional[str] = None,
                 managed_instance_id: Optional[str] = None,
                 namespace: Optional[str] = None,
                 object: Optional[str] = None,
                 result: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_finished: Optional[str] = None,
                 time_started: Optional[str] = None,
                 warning_count: Optional[int] = None,
                 work_request_id: Optional[str] = None):
        if application_id is not None:
            pulumi.set(__self__, "application_id", application_id)
        if application_installation_id is not None:
            pulumi.set(__self__, "application_installation_id", application_installation_id)
        if application_installation_path is not None:
            pulumi.set(__self__, "application_installation_path", application_installation_path)
        if application_name is not None:
            pulumi.set(__self__, "application_name", application_name)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if fleet_id is not None:
            pulumi.set(__self__, "fleet_id", fleet_id)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if managed_instance_id is not None:
            pulumi.set(__self__, "managed_instance_id", managed_instance_id)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if object is not None:
            pulumi.set(__self__, "object", object)
        if result is not None:
            pulumi.set(__self__, "result", result)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_finished is not None:
            pulumi.set(__self__, "time_finished", time_finished)
        if time_started is not None:
            pulumi.set(__self__, "time_started", time_started)
        if warning_count is not None:
            pulumi.set(__self__, "warning_count", warning_count)
        if work_request_id is not None:
            pulumi.set(__self__, "work_request_id", work_request_id)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> Optional[str]:
        return pulumi.get(self, "application_id")

    @property
    @pulumi.getter(name="applicationInstallationId")
    def application_installation_id(self) -> Optional[str]:
        return pulumi.get(self, "application_installation_id")

    @property
    @pulumi.getter(name="applicationInstallationPath")
    def application_installation_path(self) -> Optional[str]:
        return pulumi.get(self, "application_installation_path")

    @property
    @pulumi.getter(name="applicationName")
    def application_name(self) -> Optional[str]:
        return pulumi.get(self, "application_name")

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="fleetId")
    def fleet_id(self) -> Optional[str]:
        return pulumi.get(self, "fleet_id")

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[str]:
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="managedInstanceId")
    def managed_instance_id(self) -> Optional[str]:
        return pulumi.get(self, "managed_instance_id")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> Optional[str]:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def result(self) -> Optional[str]:
        return pulumi.get(self, "result")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeFinished")
    def time_finished(self) -> Optional[str]:
        return pulumi.get(self, "time_finished")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> Optional[str]:
        return pulumi.get(self, "time_started")

    @property
    @pulumi.getter(name="warningCount")
    def warning_count(self) -> Optional[int]:
        return pulumi.get(self, "warning_count")

    @property
    @pulumi.getter(name="workRequestId")
    def work_request_id(self) -> Optional[str]:
        return pulumi.get(self, "work_request_id")


@pulumi.output_type
class GetFleetsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetFleetsFleetCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetFleetsFleetCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetFleetsFleetCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetFleetsFleetCollectionItemResult(dict):
    def __init__(__self__, *,
                 approximate_application_count: Optional[int] = None,
                 approximate_installation_count: Optional[int] = None,
                 approximate_java_server_count: Optional[int] = None,
                 approximate_jre_count: Optional[int] = None,
                 approximate_managed_instance_count: Optional[int] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 inventory_logs: Optional[Sequence['outputs.GetFleetsFleetCollectionItemInventoryLogResult']] = None,
                 is_advanced_features_enabled: Optional[bool] = None,
                 operation_logs: Optional[Sequence['outputs.GetFleetsFleetCollectionItemOperationLogResult']] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None):
        if approximate_application_count is not None:
            pulumi.set(__self__, "approximate_application_count", approximate_application_count)
        if approximate_installation_count is not None:
            pulumi.set(__self__, "approximate_installation_count", approximate_installation_count)
        if approximate_java_server_count is not None:
            pulumi.set(__self__, "approximate_java_server_count", approximate_java_server_count)
        if approximate_jre_count is not None:
            pulumi.set(__self__, "approximate_jre_count", approximate_jre_count)
        if approximate_managed_instance_count is not None:
            pulumi.set(__self__, "approximate_managed_instance_count", approximate_managed_instance_count)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if inventory_logs is not None:
            pulumi.set(__self__, "inventory_logs", inventory_logs)
        if is_advanced_features_enabled is not None:
            pulumi.set(__self__, "is_advanced_features_enabled", is_advanced_features_enabled)
        if operation_logs is not None:
            pulumi.set(__self__, "operation_logs", operation_logs)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="approximateApplicationCount")
    def approximate_application_count(self) -> Optional[int]:
        return pulumi.get(self, "approximate_application_count")

    @property
    @pulumi.getter(name="approximateInstallationCount")
    def approximate_installation_count(self) -> Optional[int]:
        return pulumi.get(self, "approximate_installation_count")

    @property
    @pulumi.getter(name="approximateJavaServerCount")
    def approximate_java_server_count(self) -> Optional[int]:
        return pulumi.get(self, "approximate_java_server_count")

    @property
    @pulumi.getter(name="approximateJreCount")
    def approximate_jre_count(self) -> Optional[int]:
        return pulumi.get(self, "approximate_jre_count")

    @property
    @pulumi.getter(name="approximateManagedInstanceCount")
    def approximate_managed_instance_count(self) -> Optional[int]:
        return pulumi.get(self, "approximate_managed_instance_count")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inventoryLogs")
    def inventory_logs(self) -> Optional[Sequence['outputs.GetFleetsFleetCollectionItemInventoryLogResult']]:
        return pulumi.get(self, "inventory_logs")

    @property
    @pulumi.getter(name="isAdvancedFeaturesEnabled")
    def is_advanced_features_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_advanced_features_enabled")

    @property
    @pulumi.getter(name="operationLogs")
    def operation_logs(self) -> Optional[Sequence['outputs.GetFleetsFleetCollectionItemOperationLogResult']]:
        return pulumi.get(self, "operation_logs")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetFleetsFleetCollectionItemInventoryLogResult(dict):
    def __init__(__self__, *,
                 log_group_id: Optional[str] = None,
                 log_id: Optional[str] = None):
        if log_group_id is not None:
            pulumi.set(__self__, "log_group_id", log_group_id)
        if log_id is not None:
            pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[str]:
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> Optional[str]:
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetFleetsFleetCollectionItemOperationLogResult(dict):
    def __init__(__self__, *,
                 log_group_id: Optional[str] = None,
                 log_id: Optional[str] = None):
        if log_group_id is not None:
            pulumi.set(__self__, "log_group_id", log_group_id)
        if log_id is not None:
            pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[str]:
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> Optional[str]:
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetInstallationSiteItemResult(dict):
    def __init__(__self__, *,
                 approximate_application_count: Optional[int] = None,
                 blocklists: Optional[Sequence['outputs.GetInstallationSiteItemBlocklistResult']] = None,
                 installation_key: Optional[str] = None,
                 jres: Optional[Sequence['outputs.GetInstallationSiteItemJreResult']] = None,
                 managed_instance_id: Optional[str] = None,
                 operating_systems: Optional[Sequence['outputs.GetInstallationSiteItemOperatingSystemResult']] = None,
                 path: Optional[str] = None,
                 security_status: Optional[str] = None,
                 state: Optional[str] = None,
                 time_last_seen: Optional[str] = None):
        if approximate_application_count is not None:
            pulumi.set(__self__, "approximate_application_count", approximate_application_count)
        if blocklists is not None:
            pulumi.set(__self__, "blocklists", blocklists)
        if installation_key is not None:
            pulumi.set(__self__, "installation_key", installation_key)
        if jres is not None:
            pulumi.set(__self__, "jres", jres)
        if managed_instance_id is not None:
            pulumi.set(__self__, "managed_instance_id", managed_instance_id)
        if operating_systems is not None:
            pulumi.set(__self__, "operating_systems", operating_systems)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if security_status is not None:
            pulumi.set(__self__, "security_status", security_status)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_last_seen is not None:
            pulumi.set(__self__, "time_last_seen", time_last_seen)

    @property
    @pulumi.getter(name="approximateApplicationCount")
    def approximate_application_count(self) -> Optional[int]:
        return pulumi.get(self, "approximate_application_count")

    @property
    @pulumi.getter
    def blocklists(self) -> Optional[Sequence['outputs.GetInstallationSiteItemBlocklistResult']]:
        return pulumi.get(self, "blocklists")

    @property
    @pulumi.getter(name="installationKey")
    def installation_key(self) -> Optional[str]:
        return pulumi.get(self, "installation_key")

    @property
    @pulumi.getter
    def jres(self) -> Optional[Sequence['outputs.GetInstallationSiteItemJreResult']]:
        return pulumi.get(self, "jres")

    @property
    @pulumi.getter(name="managedInstanceId")
    def managed_instance_id(self) -> Optional[str]:
        return pulumi.get(self, "managed_instance_id")

    @property
    @pulumi.getter(name="operatingSystems")
    def operating_systems(self) -> Optional[Sequence['outputs.GetInstallationSiteItemOperatingSystemResult']]:
        return pulumi.get(self, "operating_systems")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="securityStatus")
    def security_status(self) -> Optional[str]:
        return pulumi.get(self, "security_status")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeLastSeen")
    def time_last_seen(self) -> Optional[str]:
        return pulumi.get(self, "time_last_seen")


@pulumi.output_type
class GetInstallationSiteItemBlocklistResult(dict):
    def __init__(__self__, *,
                 operation: Optional[str] = None,
                 reason: Optional[str] = None):
        if operation is not None:
            pulumi.set(__self__, "operation", operation)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def operation(self) -> Optional[str]:
        return pulumi.get(self, "operation")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        return pulumi.get(self, "reason")


@pulumi.output_type
class GetInstallationSiteItemJreResult(dict):
    def __init__(__self__, *,
                 distribution: Optional[str] = None,
                 jre_key: Optional[str] = None,
                 vendor: Optional[str] = None,
                 version: Optional[str] = None):
        if distribution is not None:
            pulumi.set(__self__, "distribution", distribution)
        if jre_key is not None:
            pulumi.set(__self__, "jre_key", jre_key)
        if vendor is not None:
            pulumi.set(__self__, "vendor", vendor)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def distribution(self) -> Optional[str]:
        return pulumi.get(self, "distribution")

    @property
    @pulumi.getter(name="jreKey")
    def jre_key(self) -> Optional[str]:
        return pulumi.get(self, "jre_key")

    @property
    @pulumi.getter
    def vendor(self) -> Optional[str]:
        return pulumi.get(self, "vendor")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetInstallationSiteItemOperatingSystemResult(dict):
    def __init__(__self__, *,
                 architecture: Optional[str] = None,
                 family: Optional[str] = None,
                 managed_instance_count: Optional[int] = None,
                 name: Optional[str] = None,
                 version: Optional[str] = None):
        if architecture is not None:
            pulumi.set(__self__, "architecture", architecture)
        if family is not None:
            pulumi.set(__self__, "family", family)
        if managed_instance_count is not None:
            pulumi.set(__self__, "managed_instance_count", managed_instance_count)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def architecture(self) -> Optional[str]:
        return pulumi.get(self, "architecture")

    @property
    @pulumi.getter
    def family(self) -> Optional[str]:
        return pulumi.get(self, "family")

    @property
    @pulumi.getter(name="managedInstanceCount")
    def managed_instance_count(self) -> Optional[int]:
        return pulumi.get(self, "managed_instance_count")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetInstallationSitesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetInstallationSitesInstallationSiteCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetInstallationSitesInstallationSiteCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetInstallationSitesInstallationSiteCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetInstallationSitesInstallationSiteCollectionItemResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetInstallationSitesInstallationSiteCollectionItemItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetInstallationSitesInstallationSiteCollectionItemItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetInstallationSitesInstallationSiteCollectionItemItemResult(dict):
    def __init__(__self__, *,
                 approximate_application_count: Optional[int] = None,
                 blocklists: Optional[Sequence['outputs.GetInstallationSitesInstallationSiteCollectionItemItemBlocklistResult']] = None,
                 installation_key: Optional[str] = None,
                 jres: Optional[Sequence['outputs.GetInstallationSitesInstallationSiteCollectionItemItemJreResult']] = None,
                 managed_instance_id: Optional[str] = None,
                 operating_systems: Optional[Sequence['outputs.GetInstallationSitesInstallationSiteCollectionItemItemOperatingSystemResult']] = None,
                 path: Optional[str] = None,
                 security_status: Optional[str] = None,
                 state: Optional[str] = None,
                 time_last_seen: Optional[str] = None):
        if approximate_application_count is not None:
            pulumi.set(__self__, "approximate_application_count", approximate_application_count)
        if blocklists is not None:
            pulumi.set(__self__, "blocklists", blocklists)
        if installation_key is not None:
            pulumi.set(__self__, "installation_key", installation_key)
        if jres is not None:
            pulumi.set(__self__, "jres", jres)
        if managed_instance_id is not None:
            pulumi.set(__self__, "managed_instance_id", managed_instance_id)
        if operating_systems is not None:
            pulumi.set(__self__, "operating_systems", operating_systems)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if security_status is not None:
            pulumi.set(__self__, "security_status", security_status)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_last_seen is not None:
            pulumi.set(__self__, "time_last_seen", time_last_seen)

    @property
    @pulumi.getter(name="approximateApplicationCount")
    def approximate_application_count(self) -> Optional[int]:
        return pulumi.get(self, "approximate_application_count")

    @property
    @pulumi.getter
    def blocklists(self) -> Optional[Sequence['outputs.GetInstallationSitesInstallationSiteCollectionItemItemBlocklistResult']]:
        return pulumi.get(self, "blocklists")

    @property
    @pulumi.getter(name="installationKey")
    def installation_key(self) -> Optional[str]:
        return pulumi.get(self, "installation_key")

    @property
    @pulumi.getter
    def jres(self) -> Optional[Sequence['outputs.GetInstallationSitesInstallationSiteCollectionItemItemJreResult']]:
        return pulumi.get(self, "jres")

    @property
    @pulumi.getter(name="managedInstanceId")
    def managed_instance_id(self) -> Optional[str]:
        return pulumi.get(self, "managed_instance_id")

    @property
    @pulumi.getter(name="operatingSystems")
    def operating_systems(self) -> Optional[Sequence['outputs.GetInstallationSitesInstallationSiteCollectionItemItemOperatingSystemResult']]:
        return pulumi.get(self, "operating_systems")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="securityStatus")
    def security_status(self) -> Optional[str]:
        return pulumi.get(self, "security_status")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeLastSeen")
    def time_last_seen(self) -> Optional[str]:
        return pulumi.get(self, "time_last_seen")


@pulumi.output_type
class GetInstallationSitesInstallationSiteCollectionItemItemBlocklistResult(dict):
    def __init__(__self__, *,
                 operation: Optional[str] = None,
                 reason: Optional[str] = None):
        if operation is not None:
            pulumi.set(__self__, "operation", operation)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def operation(self) -> Optional[str]:
        return pulumi.get(self, "operation")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        return pulumi.get(self, "reason")


@pulumi.output_type
class GetInstallationSitesInstallationSiteCollectionItemItemJreResult(dict):
    def __init__(__self__, *,
                 distribution: Optional[str] = None,
                 jre_key: Optional[str] = None,
                 vendor: Optional[str] = None,
                 version: Optional[str] = None):
        if distribution is not None:
            pulumi.set(__self__, "distribution", distribution)
        if jre_key is not None:
            pulumi.set(__self__, "jre_key", jre_key)
        if vendor is not None:
            pulumi.set(__self__, "vendor", vendor)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def distribution(self) -> Optional[str]:
        return pulumi.get(self, "distribution")

    @property
    @pulumi.getter(name="jreKey")
    def jre_key(self) -> Optional[str]:
        return pulumi.get(self, "jre_key")

    @property
    @pulumi.getter
    def vendor(self) -> Optional[str]:
        return pulumi.get(self, "vendor")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetInstallationSitesInstallationSiteCollectionItemItemOperatingSystemResult(dict):
    def __init__(__self__, *,
                 architecture: Optional[str] = None,
                 family: Optional[str] = None,
                 managed_instance_count: Optional[int] = None,
                 name: Optional[str] = None,
                 version: Optional[str] = None):
        if architecture is not None:
            pulumi.set(__self__, "architecture", architecture)
        if family is not None:
            pulumi.set(__self__, "family", family)
        if managed_instance_count is not None:
            pulumi.set(__self__, "managed_instance_count", managed_instance_count)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def architecture(self) -> Optional[str]:
        return pulumi.get(self, "architecture")

    @property
    @pulumi.getter
    def family(self) -> Optional[str]:
        return pulumi.get(self, "family")

    @property
    @pulumi.getter(name="managedInstanceCount")
    def managed_instance_count(self) -> Optional[int]:
        return pulumi.get(self, "managed_instance_count")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetJavaFamiliesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetJavaFamiliesJavaFamilyCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetJavaFamiliesJavaFamilyCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetJavaFamiliesJavaFamilyCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetJavaFamiliesJavaFamilyCollectionItemResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 doc_url: Optional[str] = None,
                 end_of_support_life_date: Optional[str] = None,
                 family_version: Optional[str] = None,
                 support_type: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if doc_url is not None:
            pulumi.set(__self__, "doc_url", doc_url)
        if end_of_support_life_date is not None:
            pulumi.set(__self__, "end_of_support_life_date", end_of_support_life_date)
        if family_version is not None:
            pulumi.set(__self__, "family_version", family_version)
        if support_type is not None:
            pulumi.set(__self__, "support_type", support_type)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="docUrl")
    def doc_url(self) -> Optional[str]:
        return pulumi.get(self, "doc_url")

    @property
    @pulumi.getter(name="endOfSupportLifeDate")
    def end_of_support_life_date(self) -> Optional[str]:
        return pulumi.get(self, "end_of_support_life_date")

    @property
    @pulumi.getter(name="familyVersion")
    def family_version(self) -> Optional[str]:
        return pulumi.get(self, "family_version")

    @property
    @pulumi.getter(name="supportType")
    def support_type(self) -> Optional[str]:
        return pulumi.get(self, "support_type")


@pulumi.output_type
class GetJavaReleaseArtifactResult(dict):
    def __init__(__self__, *,
                 approximate_file_size_in_bytes: Optional[str] = None,
                 artifact_content_type: Optional[str] = None,
                 artifact_description: Optional[str] = None,
                 artifact_id: Optional[str] = None,
                 sha256: Optional[str] = None):
        if approximate_file_size_in_bytes is not None:
            pulumi.set(__self__, "approximate_file_size_in_bytes", approximate_file_size_in_bytes)
        if artifact_content_type is not None:
            pulumi.set(__self__, "artifact_content_type", artifact_content_type)
        if artifact_description is not None:
            pulumi.set(__self__, "artifact_description", artifact_description)
        if artifact_id is not None:
            pulumi.set(__self__, "artifact_id", artifact_id)
        if sha256 is not None:
            pulumi.set(__self__, "sha256", sha256)

    @property
    @pulumi.getter(name="approximateFileSizeInBytes")
    def approximate_file_size_in_bytes(self) -> Optional[str]:
        return pulumi.get(self, "approximate_file_size_in_bytes")

    @property
    @pulumi.getter(name="artifactContentType")
    def artifact_content_type(self) -> Optional[str]:
        return pulumi.get(self, "artifact_content_type")

    @property
    @pulumi.getter(name="artifactDescription")
    def artifact_description(self) -> Optional[str]:
        return pulumi.get(self, "artifact_description")

    @property
    @pulumi.getter(name="artifactId")
    def artifact_id(self) -> Optional[str]:
        return pulumi.get(self, "artifact_id")

    @property
    @pulumi.getter
    def sha256(self) -> Optional[str]:
        return pulumi.get(self, "sha256")


@pulumi.output_type
class GetJavaReleaseFamilyDetailResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 doc_url: Optional[str] = None,
                 end_of_support_life_date: Optional[str] = None,
                 family_version: Optional[str] = None,
                 support_type: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if doc_url is not None:
            pulumi.set(__self__, "doc_url", doc_url)
        if end_of_support_life_date is not None:
            pulumi.set(__self__, "end_of_support_life_date", end_of_support_life_date)
        if family_version is not None:
            pulumi.set(__self__, "family_version", family_version)
        if support_type is not None:
            pulumi.set(__self__, "support_type", support_type)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="docUrl")
    def doc_url(self) -> Optional[str]:
        return pulumi.get(self, "doc_url")

    @property
    @pulumi.getter(name="endOfSupportLifeDate")
    def end_of_support_life_date(self) -> Optional[str]:
        return pulumi.get(self, "end_of_support_life_date")

    @property
    @pulumi.getter(name="familyVersion")
    def family_version(self) -> Optional[str]:
        return pulumi.get(self, "family_version")

    @property
    @pulumi.getter(name="supportType")
    def support_type(self) -> Optional[str]:
        return pulumi.get(self, "support_type")


@pulumi.output_type
class GetJavaReleaseLicenseDetailResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 license_type: Optional[str] = None,
                 license_url: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if license_type is not None:
            pulumi.set(__self__, "license_type", license_type)
        if license_url is not None:
            pulumi.set(__self__, "license_url", license_url)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> Optional[str]:
        return pulumi.get(self, "license_type")

    @property
    @pulumi.getter(name="licenseUrl")
    def license_url(self) -> Optional[str]:
        return pulumi.get(self, "license_url")


@pulumi.output_type
class GetJavaReleasesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetJavaReleasesJavaReleaseCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetJavaReleasesJavaReleaseCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetJavaReleasesJavaReleaseCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetJavaReleasesJavaReleaseCollectionItemResult(dict):
    def __init__(__self__, *,
                 artifact_content_types: Optional[Sequence[str]] = None,
                 artifacts: Optional[Sequence['outputs.GetJavaReleasesJavaReleaseCollectionItemArtifactResult']] = None,
                 family_details: Optional[Sequence['outputs.GetJavaReleasesJavaReleaseCollectionItemFamilyDetailResult']] = None,
                 family_version: Optional[str] = None,
                 license_details: Optional[Sequence['outputs.GetJavaReleasesJavaReleaseCollectionItemLicenseDetailResult']] = None,
                 license_type: Optional[str] = None,
                 parent_release_version: Optional[str] = None,
                 release_date: Optional[str] = None,
                 release_notes_url: Optional[str] = None,
                 release_type: Optional[str] = None,
                 release_version: Optional[str] = None,
                 security_status: Optional[str] = None):
        if artifact_content_types is not None:
            pulumi.set(__self__, "artifact_content_types", artifact_content_types)
        if artifacts is not None:
            pulumi.set(__self__, "artifacts", artifacts)
        if family_details is not None:
            pulumi.set(__self__, "family_details", family_details)
        if family_version is not None:
            pulumi.set(__self__, "family_version", family_version)
        if license_details is not None:
            pulumi.set(__self__, "license_details", license_details)
        if license_type is not None:
            pulumi.set(__self__, "license_type", license_type)
        if parent_release_version is not None:
            pulumi.set(__self__, "parent_release_version", parent_release_version)
        if release_date is not None:
            pulumi.set(__self__, "release_date", release_date)
        if release_notes_url is not None:
            pulumi.set(__self__, "release_notes_url", release_notes_url)
        if release_type is not None:
            pulumi.set(__self__, "release_type", release_type)
        if release_version is not None:
            pulumi.set(__self__, "release_version", release_version)
        if security_status is not None:
            pulumi.set(__self__, "security_status", security_status)

    @property
    @pulumi.getter(name="artifactContentTypes")
    def artifact_content_types(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "artifact_content_types")

    @property
    @pulumi.getter
    def artifacts(self) -> Optional[Sequence['outputs.GetJavaReleasesJavaReleaseCollectionItemArtifactResult']]:
        return pulumi.get(self, "artifacts")

    @property
    @pulumi.getter(name="familyDetails")
    def family_details(self) -> Optional[Sequence['outputs.GetJavaReleasesJavaReleaseCollectionItemFamilyDetailResult']]:
        return pulumi.get(self, "family_details")

    @property
    @pulumi.getter(name="familyVersion")
    def family_version(self) -> Optional[str]:
        return pulumi.get(self, "family_version")

    @property
    @pulumi.getter(name="licenseDetails")
    def license_details(self) -> Optional[Sequence['outputs.GetJavaReleasesJavaReleaseCollectionItemLicenseDetailResult']]:
        return pulumi.get(self, "license_details")

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> Optional[str]:
        return pulumi.get(self, "license_type")

    @property
    @pulumi.getter(name="parentReleaseVersion")
    def parent_release_version(self) -> Optional[str]:
        return pulumi.get(self, "parent_release_version")

    @property
    @pulumi.getter(name="releaseDate")
    def release_date(self) -> Optional[str]:
        return pulumi.get(self, "release_date")

    @property
    @pulumi.getter(name="releaseNotesUrl")
    def release_notes_url(self) -> Optional[str]:
        return pulumi.get(self, "release_notes_url")

    @property
    @pulumi.getter(name="releaseType")
    def release_type(self) -> Optional[str]:
        return pulumi.get(self, "release_type")

    @property
    @pulumi.getter(name="releaseVersion")
    def release_version(self) -> Optional[str]:
        return pulumi.get(self, "release_version")

    @property
    @pulumi.getter(name="securityStatus")
    def security_status(self) -> Optional[str]:
        return pulumi.get(self, "security_status")


@pulumi.output_type
class GetJavaReleasesJavaReleaseCollectionItemArtifactResult(dict):
    def __init__(__self__, *,
                 approximate_file_size_in_bytes: Optional[str] = None,
                 artifact_content_type: Optional[str] = None,
                 artifact_description: Optional[str] = None,
                 artifact_id: Optional[str] = None,
                 sha256: Optional[str] = None):
        if approximate_file_size_in_bytes is not None:
            pulumi.set(__self__, "approximate_file_size_in_bytes", approximate_file_size_in_bytes)
        if artifact_content_type is not None:
            pulumi.set(__self__, "artifact_content_type", artifact_content_type)
        if artifact_description is not None:
            pulumi.set(__self__, "artifact_description", artifact_description)
        if artifact_id is not None:
            pulumi.set(__self__, "artifact_id", artifact_id)
        if sha256 is not None:
            pulumi.set(__self__, "sha256", sha256)

    @property
    @pulumi.getter(name="approximateFileSizeInBytes")
    def approximate_file_size_in_bytes(self) -> Optional[str]:
        return pulumi.get(self, "approximate_file_size_in_bytes")

    @property
    @pulumi.getter(name="artifactContentType")
    def artifact_content_type(self) -> Optional[str]:
        return pulumi.get(self, "artifact_content_type")

    @property
    @pulumi.getter(name="artifactDescription")
    def artifact_description(self) -> Optional[str]:
        return pulumi.get(self, "artifact_description")

    @property
    @pulumi.getter(name="artifactId")
    def artifact_id(self) -> Optional[str]:
        return pulumi.get(self, "artifact_id")

    @property
    @pulumi.getter
    def sha256(self) -> Optional[str]:
        return pulumi.get(self, "sha256")


@pulumi.output_type
class GetJavaReleasesJavaReleaseCollectionItemFamilyDetailResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 doc_url: Optional[str] = None,
                 end_of_support_life_date: Optional[str] = None,
                 family_version: Optional[str] = None,
                 support_type: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if doc_url is not None:
            pulumi.set(__self__, "doc_url", doc_url)
        if end_of_support_life_date is not None:
            pulumi.set(__self__, "end_of_support_life_date", end_of_support_life_date)
        if family_version is not None:
            pulumi.set(__self__, "family_version", family_version)
        if support_type is not None:
            pulumi.set(__self__, "support_type", support_type)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="docUrl")
    def doc_url(self) -> Optional[str]:
        return pulumi.get(self, "doc_url")

    @property
    @pulumi.getter(name="endOfSupportLifeDate")
    def end_of_support_life_date(self) -> Optional[str]:
        return pulumi.get(self, "end_of_support_life_date")

    @property
    @pulumi.getter(name="familyVersion")
    def family_version(self) -> Optional[str]:
        return pulumi.get(self, "family_version")

    @property
    @pulumi.getter(name="supportType")
    def support_type(self) -> Optional[str]:
        return pulumi.get(self, "support_type")


@pulumi.output_type
class GetJavaReleasesJavaReleaseCollectionItemLicenseDetailResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 license_type: Optional[str] = None,
                 license_url: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if license_type is not None:
            pulumi.set(__self__, "license_type", license_type)
        if license_url is not None:
            pulumi.set(__self__, "license_url", license_url)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> Optional[str]:
        return pulumi.get(self, "license_type")

    @property
    @pulumi.getter(name="licenseUrl")
    def license_url(self) -> Optional[str]:
        return pulumi.get(self, "license_url")


@pulumi.output_type
class GetListJreUsageItemResult(dict):
    def __init__(__self__, *,
                 approximate_application_count: Optional[int] = None,
                 approximate_installation_count: Optional[int] = None,
                 approximate_managed_instance_count: Optional[int] = None,
                 approximate_pending_work_request_count: Optional[int] = None,
                 days_under_security_baseline: Optional[int] = None,
                 distribution: Optional[str] = None,
                 end_of_support_life_date: Optional[str] = None,
                 fleet_id: Optional[str] = None,
                 id: Optional[str] = None,
                 managed_instance_id: Optional[str] = None,
                 operating_systems: Optional[Sequence['outputs.GetListJreUsageItemOperatingSystemResult']] = None,
                 release_date: Optional[str] = None,
                 security_status: Optional[str] = None,
                 time_end: Optional[str] = None,
                 time_first_seen: Optional[str] = None,
                 time_last_seen: Optional[str] = None,
                 time_start: Optional[str] = None,
                 vendor: Optional[str] = None,
                 version: Optional[str] = None):
        if approximate_application_count is not None:
            pulumi.set(__self__, "approximate_application_count", approximate_application_count)
        if approximate_installation_count is not None:
            pulumi.set(__self__, "approximate_installation_count", approximate_installation_count)
        if approximate_managed_instance_count is not None:
            pulumi.set(__self__, "approximate_managed_instance_count", approximate_managed_instance_count)
        if approximate_pending_work_request_count is not None:
            pulumi.set(__self__, "approximate_pending_work_request_count", approximate_pending_work_request_count)
        if days_under_security_baseline is not None:
            pulumi.set(__self__, "days_under_security_baseline", days_under_security_baseline)
        if distribution is not None:
            pulumi.set(__self__, "distribution", distribution)
        if end_of_support_life_date is not None:
            pulumi.set(__self__, "end_of_support_life_date", end_of_support_life_date)
        if fleet_id is not None:
            pulumi.set(__self__, "fleet_id", fleet_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if managed_instance_id is not None:
            pulumi.set(__self__, "managed_instance_id", managed_instance_id)
        if operating_systems is not None:
            pulumi.set(__self__, "operating_systems", operating_systems)
        if release_date is not None:
            pulumi.set(__self__, "release_date", release_date)
        if security_status is not None:
            pulumi.set(__self__, "security_status", security_status)
        if time_end is not None:
            pulumi.set(__self__, "time_end", time_end)
        if time_first_seen is not None:
            pulumi.set(__self__, "time_first_seen", time_first_seen)
        if time_last_seen is not None:
            pulumi.set(__self__, "time_last_seen", time_last_seen)
        if time_start is not None:
            pulumi.set(__self__, "time_start", time_start)
        if vendor is not None:
            pulumi.set(__self__, "vendor", vendor)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="approximateApplicationCount")
    def approximate_application_count(self) -> Optional[int]:
        return pulumi.get(self, "approximate_application_count")

    @property
    @pulumi.getter(name="approximateInstallationCount")
    def approximate_installation_count(self) -> Optional[int]:
        return pulumi.get(self, "approximate_installation_count")

    @property
    @pulumi.getter(name="approximateManagedInstanceCount")
    def approximate_managed_instance_count(self) -> Optional[int]:
        return pulumi.get(self, "approximate_managed_instance_count")

    @property
    @pulumi.getter(name="approximatePendingWorkRequestCount")
    def approximate_pending_work_request_count(self) -> Optional[int]:
        return pulumi.get(self, "approximate_pending_work_request_count")

    @property
    @pulumi.getter(name="daysUnderSecurityBaseline")
    def days_under_security_baseline(self) -> Optional[int]:
        return pulumi.get(self, "days_under_security_baseline")

    @property
    @pulumi.getter
    def distribution(self) -> Optional[str]:
        return pulumi.get(self, "distribution")

    @property
    @pulumi.getter(name="endOfSupportLifeDate")
    def end_of_support_life_date(self) -> Optional[str]:
        return pulumi.get(self, "end_of_support_life_date")

    @property
    @pulumi.getter(name="fleetId")
    def fleet_id(self) -> Optional[str]:
        return pulumi.get(self, "fleet_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="managedInstanceId")
    def managed_instance_id(self) -> Optional[str]:
        return pulumi.get(self, "managed_instance_id")

    @property
    @pulumi.getter(name="operatingSystems")
    def operating_systems(self) -> Optional[Sequence['outputs.GetListJreUsageItemOperatingSystemResult']]:
        return pulumi.get(self, "operating_systems")

    @property
    @pulumi.getter(name="releaseDate")
    def release_date(self) -> Optional[str]:
        return pulumi.get(self, "release_date")

    @property
    @pulumi.getter(name="securityStatus")
    def security_status(self) -> Optional[str]:
        return pulumi.get(self, "security_status")

    @property
    @pulumi.getter(name="timeEnd")
    def time_end(self) -> Optional[str]:
        return pulumi.get(self, "time_end")

    @property
    @pulumi.getter(name="timeFirstSeen")
    def time_first_seen(self) -> Optional[str]:
        return pulumi.get(self, "time_first_seen")

    @property
    @pulumi.getter(name="timeLastSeen")
    def time_last_seen(self) -> Optional[str]:
        return pulumi.get(self, "time_last_seen")

    @property
    @pulumi.getter(name="timeStart")
    def time_start(self) -> Optional[str]:
        return pulumi.get(self, "time_start")

    @property
    @pulumi.getter
    def vendor(self) -> Optional[str]:
        return pulumi.get(self, "vendor")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetListJreUsageItemOperatingSystemResult(dict):
    def __init__(__self__, *,
                 architecture: Optional[str] = None,
                 family: Optional[str] = None,
                 managed_instance_count: Optional[int] = None,
                 name: Optional[str] = None,
                 version: Optional[str] = None):
        if architecture is not None:
            pulumi.set(__self__, "architecture", architecture)
        if family is not None:
            pulumi.set(__self__, "family", family)
        if managed_instance_count is not None:
            pulumi.set(__self__, "managed_instance_count", managed_instance_count)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def architecture(self) -> Optional[str]:
        return pulumi.get(self, "architecture")

    @property
    @pulumi.getter
    def family(self) -> Optional[str]:
        return pulumi.get(self, "family")

    @property
    @pulumi.getter(name="managedInstanceCount")
    def managed_instance_count(self) -> Optional[int]:
        return pulumi.get(self, "managed_instance_count")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


