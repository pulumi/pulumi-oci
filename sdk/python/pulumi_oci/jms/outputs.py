# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'FleetInventoryLog',
    'FleetOperationLog',
    'GetAnnouncementsAnnouncementCollectionResult',
    'GetAnnouncementsAnnouncementCollectionItemResult',
    'GetAnnouncementsFilterResult',
    'GetFleetAdvancedFeatureConfigurationAdvancedUsageTrackingResult',
    'GetFleetAdvancedFeatureConfigurationCryptoEventAnalysisResult',
    'GetFleetAdvancedFeatureConfigurationCryptoEventAnalysisSummarizedEventsLogResult',
    'GetFleetAdvancedFeatureConfigurationJavaMigrationAnalysisResult',
    'GetFleetAdvancedFeatureConfigurationJfrRecordingResult',
    'GetFleetAdvancedFeatureConfigurationLcmResult',
    'GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionResult',
    'GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionMinimumKeySizeSettingResult',
    'GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionMinimumKeySizeSettingCertpathResult',
    'GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionMinimumKeySizeSettingJarResult',
    'GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionMinimumKeySizeSettingTlResult',
    'GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionProxyResult',
    'GetFleetAdvancedFeatureConfigurationPerformanceTuningAnalysisResult',
    'GetFleetBlocklistsFilterResult',
    'GetFleetBlocklistsItemResult',
    'GetFleetBlocklistsItemTargetResult',
    'GetFleetCryptoAnalysisResultsCryptoAnalysisResultCollectionResult',
    'GetFleetCryptoAnalysisResultsCryptoAnalysisResultCollectionItemResult',
    'GetFleetCryptoAnalysisResultsFilterResult',
    'GetFleetDiagnosesFilterResult',
    'GetFleetDiagnosesFleetDiagnosisCollectionResult',
    'GetFleetDiagnosesFleetDiagnosisCollectionItemResult',
    'GetFleetInventoryLogResult',
    'GetFleetJavaMigrationAnalysisResultsFilterResult',
    'GetFleetJavaMigrationAnalysisResultsJavaMigrationAnalysisResultCollectionResult',
    'GetFleetJavaMigrationAnalysisResultsJavaMigrationAnalysisResultCollectionItemResult',
    'GetFleetOperationLogResult',
    'GetFleetPerformanceTuningAnalysisResultsFilterResult',
    'GetFleetPerformanceTuningAnalysisResultsPerformanceTuningAnalysisResultCollectionResult',
    'GetFleetPerformanceTuningAnalysisResultsPerformanceTuningAnalysisResultCollectionItemResult',
    'GetFleetsFilterResult',
    'GetFleetsFleetCollectionResult',
    'GetFleetsFleetCollectionItemResult',
    'GetFleetsFleetCollectionItemInventoryLogResult',
    'GetFleetsFleetCollectionItemOperationLogResult',
    'GetInstallationSiteItemResult',
    'GetInstallationSiteItemBlocklistResult',
    'GetInstallationSiteItemJreResult',
    'GetInstallationSiteItemOperatingSystemResult',
    'GetInstallationSitesFilterResult',
    'GetInstallationSitesInstallationSiteCollectionResult',
    'GetInstallationSitesInstallationSiteCollectionItemResult',
    'GetInstallationSitesInstallationSiteCollectionItemItemResult',
    'GetInstallationSitesInstallationSiteCollectionItemItemBlocklistResult',
    'GetInstallationSitesInstallationSiteCollectionItemItemJreResult',
    'GetInstallationSitesInstallationSiteCollectionItemItemOperatingSystemResult',
    'GetJavaFamiliesFilterResult',
    'GetJavaFamiliesJavaFamilyCollectionResult',
    'GetJavaFamiliesJavaFamilyCollectionItemResult',
    'GetJavaReleaseArtifactResult',
    'GetJavaReleaseFamilyDetailResult',
    'GetJavaReleaseLicenseDetailResult',
    'GetJavaReleasesFilterResult',
    'GetJavaReleasesJavaReleaseCollectionResult',
    'GetJavaReleasesJavaReleaseCollectionItemResult',
    'GetJavaReleasesJavaReleaseCollectionItemArtifactResult',
    'GetJavaReleasesJavaReleaseCollectionItemFamilyDetailResult',
    'GetJavaReleasesJavaReleaseCollectionItemLicenseDetailResult',
    'GetListJreUsageItemResult',
    'GetListJreUsageItemOperatingSystemResult',
]

@pulumi.output_type
class FleetInventoryLog(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logGroupId":
            suggest = "log_group_id"
        elif key == "logId":
            suggest = "log_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FleetInventoryLog. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FleetInventoryLog.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FleetInventoryLog.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 log_group_id: str,
                 log_id: str):
        """
        :param str log_group_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log group.
        :param str log_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        FleetInventoryLog._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            log_group_id=log_group_id,
            log_id=log_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             log_group_id: Optional[str] = None,
             log_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if log_group_id is None and 'logGroupId' in kwargs:
            log_group_id = kwargs['logGroupId']
        if log_group_id is None:
            raise TypeError("Missing 'log_group_id' argument")
        if log_id is None and 'logId' in kwargs:
            log_id = kwargs['logId']
        if log_id is None:
            raise TypeError("Missing 'log_id' argument")

        _setter("log_group_id", log_group_id)
        _setter("log_id", log_id)

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> str:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log group.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> str:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class FleetOperationLog(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logGroupId":
            suggest = "log_group_id"
        elif key == "logId":
            suggest = "log_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FleetOperationLog. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FleetOperationLog.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FleetOperationLog.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 log_group_id: str,
                 log_id: str):
        """
        :param str log_group_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log group.
        :param str log_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        FleetOperationLog._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            log_group_id=log_group_id,
            log_id=log_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             log_group_id: Optional[str] = None,
             log_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if log_group_id is None and 'logGroupId' in kwargs:
            log_group_id = kwargs['logGroupId']
        if log_group_id is None:
            raise TypeError("Missing 'log_group_id' argument")
        if log_id is None and 'logId' in kwargs:
            log_id = kwargs['logId']
        if log_id is None:
            raise TypeError("Missing 'log_id' argument")

        _setter("log_group_id", log_group_id)
        _setter("log_id", log_id)

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> str:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log group.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> str:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetAnnouncementsAnnouncementCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetAnnouncementsAnnouncementCollectionItemResult']):
        """
        :param Sequence['GetAnnouncementsAnnouncementCollectionItemArgs'] items: List of AnnouncementSummary items
        """
        GetAnnouncementsAnnouncementCollectionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Optional[Sequence['outputs.GetAnnouncementsAnnouncementCollectionItemResult']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if items is None:
            raise TypeError("Missing 'items' argument")

        _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetAnnouncementsAnnouncementCollectionItemResult']:
        """
        List of AnnouncementSummary items
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAnnouncementsAnnouncementCollectionItemResult(dict):
    def __init__(__self__, *,
                 key: int,
                 summary: str,
                 time_released: str,
                 url: str):
        """
        :param int key: Unique id of the announcement
        :param str summary: Summary text of the announcement
        :param str time_released: Date time on which the announcement was released
        :param str url: URL to the announcement web page
        """
        GetAnnouncementsAnnouncementCollectionItemResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            summary=summary,
            time_released=time_released,
            url=url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: Optional[int] = None,
             summary: Optional[str] = None,
             time_released: Optional[str] = None,
             url: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if key is None:
            raise TypeError("Missing 'key' argument")
        if summary is None:
            raise TypeError("Missing 'summary' argument")
        if time_released is None and 'timeReleased' in kwargs:
            time_released = kwargs['timeReleased']
        if time_released is None:
            raise TypeError("Missing 'time_released' argument")
        if url is None:
            raise TypeError("Missing 'url' argument")

        _setter("key", key)
        _setter("summary", summary)
        _setter("time_released", time_released)
        _setter("url", url)

    @property
    @pulumi.getter
    def key(self) -> int:
        """
        Unique id of the announcement
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def summary(self) -> str:
        """
        Summary text of the announcement
        """
        return pulumi.get(self, "summary")

    @property
    @pulumi.getter(name="timeReleased")
    def time_released(self) -> str:
        """
        Date time on which the announcement was released
        """
        return pulumi.get(self, "time_released")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        URL to the announcement web page
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetAnnouncementsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        GetAnnouncementsFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             values: Optional[Sequence[str]] = None,
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if name is None:
            raise TypeError("Missing 'name' argument")
        if values is None:
            raise TypeError("Missing 'values' argument")

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetFleetAdvancedFeatureConfigurationAdvancedUsageTrackingResult(dict):
    def __init__(__self__, *,
                 is_enabled: bool):
        """
        :param bool is_enabled: PerformanceTuningAnalysis flag to store enabled or disabled status.
        """
        GetFleetAdvancedFeatureConfigurationAdvancedUsageTrackingResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            is_enabled=is_enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             is_enabled: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if is_enabled is None and 'isEnabled' in kwargs:
            is_enabled = kwargs['isEnabled']
        if is_enabled is None:
            raise TypeError("Missing 'is_enabled' argument")

        _setter("is_enabled", is_enabled)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        """
        PerformanceTuningAnalysis flag to store enabled or disabled status.
        """
        return pulumi.get(self, "is_enabled")


@pulumi.output_type
class GetFleetAdvancedFeatureConfigurationCryptoEventAnalysisResult(dict):
    def __init__(__self__, *,
                 is_enabled: bool,
                 summarized_events_logs: Sequence['outputs.GetFleetAdvancedFeatureConfigurationCryptoEventAnalysisSummarizedEventsLogResult']):
        """
        :param bool is_enabled: PerformanceTuningAnalysis flag to store enabled or disabled status.
        :param Sequence['GetFleetAdvancedFeatureConfigurationCryptoEventAnalysisSummarizedEventsLogArgs'] summarized_events_logs: Summarized events log for advanced feature.
        """
        GetFleetAdvancedFeatureConfigurationCryptoEventAnalysisResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            is_enabled=is_enabled,
            summarized_events_logs=summarized_events_logs,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             is_enabled: Optional[bool] = None,
             summarized_events_logs: Optional[Sequence['outputs.GetFleetAdvancedFeatureConfigurationCryptoEventAnalysisSummarizedEventsLogResult']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if is_enabled is None and 'isEnabled' in kwargs:
            is_enabled = kwargs['isEnabled']
        if is_enabled is None:
            raise TypeError("Missing 'is_enabled' argument")
        if summarized_events_logs is None and 'summarizedEventsLogs' in kwargs:
            summarized_events_logs = kwargs['summarizedEventsLogs']
        if summarized_events_logs is None:
            raise TypeError("Missing 'summarized_events_logs' argument")

        _setter("is_enabled", is_enabled)
        _setter("summarized_events_logs", summarized_events_logs)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        """
        PerformanceTuningAnalysis flag to store enabled or disabled status.
        """
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="summarizedEventsLogs")
    def summarized_events_logs(self) -> Sequence['outputs.GetFleetAdvancedFeatureConfigurationCryptoEventAnalysisSummarizedEventsLogResult']:
        """
        Summarized events log for advanced feature.
        """
        return pulumi.get(self, "summarized_events_logs")


@pulumi.output_type
class GetFleetAdvancedFeatureConfigurationCryptoEventAnalysisSummarizedEventsLogResult(dict):
    def __init__(__self__, *,
                 log_group_id: str,
                 log_id: str):
        """
        :param str log_group_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log group.
        :param str log_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log.
        """
        GetFleetAdvancedFeatureConfigurationCryptoEventAnalysisSummarizedEventsLogResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            log_group_id=log_group_id,
            log_id=log_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             log_group_id: Optional[str] = None,
             log_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if log_group_id is None and 'logGroupId' in kwargs:
            log_group_id = kwargs['logGroupId']
        if log_group_id is None:
            raise TypeError("Missing 'log_group_id' argument")
        if log_id is None and 'logId' in kwargs:
            log_id = kwargs['logId']
        if log_id is None:
            raise TypeError("Missing 'log_id' argument")

        _setter("log_group_id", log_group_id)
        _setter("log_id", log_id)

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log group.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetFleetAdvancedFeatureConfigurationJavaMigrationAnalysisResult(dict):
    def __init__(__self__, *,
                 is_enabled: bool):
        """
        :param bool is_enabled: PerformanceTuningAnalysis flag to store enabled or disabled status.
        """
        GetFleetAdvancedFeatureConfigurationJavaMigrationAnalysisResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            is_enabled=is_enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             is_enabled: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if is_enabled is None and 'isEnabled' in kwargs:
            is_enabled = kwargs['isEnabled']
        if is_enabled is None:
            raise TypeError("Missing 'is_enabled' argument")

        _setter("is_enabled", is_enabled)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        """
        PerformanceTuningAnalysis flag to store enabled or disabled status.
        """
        return pulumi.get(self, "is_enabled")


@pulumi.output_type
class GetFleetAdvancedFeatureConfigurationJfrRecordingResult(dict):
    def __init__(__self__, *,
                 is_enabled: bool):
        """
        :param bool is_enabled: PerformanceTuningAnalysis flag to store enabled or disabled status.
        """
        GetFleetAdvancedFeatureConfigurationJfrRecordingResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            is_enabled=is_enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             is_enabled: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if is_enabled is None and 'isEnabled' in kwargs:
            is_enabled = kwargs['isEnabled']
        if is_enabled is None:
            raise TypeError("Missing 'is_enabled' argument")

        _setter("is_enabled", is_enabled)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        """
        PerformanceTuningAnalysis flag to store enabled or disabled status.
        """
        return pulumi.get(self, "is_enabled")


@pulumi.output_type
class GetFleetAdvancedFeatureConfigurationLcmResult(dict):
    def __init__(__self__, *,
                 is_enabled: bool,
                 post_installation_actions: Sequence['outputs.GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionResult']):
        """
        :param bool is_enabled: PerformanceTuningAnalysis flag to store enabled or disabled status.
        :param Sequence['GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionArgs'] post_installation_actions: List of available post actions you can execute after the successful Java installation.
        """
        GetFleetAdvancedFeatureConfigurationLcmResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            is_enabled=is_enabled,
            post_installation_actions=post_installation_actions,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             is_enabled: Optional[bool] = None,
             post_installation_actions: Optional[Sequence['outputs.GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionResult']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if is_enabled is None and 'isEnabled' in kwargs:
            is_enabled = kwargs['isEnabled']
        if is_enabled is None:
            raise TypeError("Missing 'is_enabled' argument")
        if post_installation_actions is None and 'postInstallationActions' in kwargs:
            post_installation_actions = kwargs['postInstallationActions']
        if post_installation_actions is None:
            raise TypeError("Missing 'post_installation_actions' argument")

        _setter("is_enabled", is_enabled)
        _setter("post_installation_actions", post_installation_actions)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        """
        PerformanceTuningAnalysis flag to store enabled or disabled status.
        """
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="postInstallationActions")
    def post_installation_actions(self) -> Sequence['outputs.GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionResult']:
        """
        List of available post actions you can execute after the successful Java installation.
        """
        return pulumi.get(self, "post_installation_actions")


@pulumi.output_type
class GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionResult(dict):
    def __init__(__self__, *,
                 add_logging_handler: bool,
                 disabled_tls_versions: Sequence[str],
                 global_logging_level: str,
                 minimum_key_size_settings: Sequence['outputs.GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionMinimumKeySizeSettingResult'],
                 proxies: Sequence['outputs.GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionProxyResult'],
                 should_replace_certificates_operating_system: bool):
        """
        :param bool add_logging_handler: Sets FileHandler and ConsoleHandler as handlers in logging.properties file.
        :param Sequence[str] disabled_tls_versions: The following post JRE installation actions are supported by the field:
               * Disable TLS 1.0 , TLS 1.1
        :param str global_logging_level: Sets the logging level in logging.properties file.
        :param Sequence['GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionMinimumKeySizeSettingArgs'] minimum_key_size_settings: test
        :param Sequence['GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionProxyArgs'] proxies: List of proxy properties to be configured in net.properties file.
        :param bool should_replace_certificates_operating_system: Restores JDK root certificates with the certificates that are available in the operating system. The following action is supported by the field:
               * Replace JDK root certificates with a list provided by the operating system.
        """
        GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            add_logging_handler=add_logging_handler,
            disabled_tls_versions=disabled_tls_versions,
            global_logging_level=global_logging_level,
            minimum_key_size_settings=minimum_key_size_settings,
            proxies=proxies,
            should_replace_certificates_operating_system=should_replace_certificates_operating_system,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             add_logging_handler: Optional[bool] = None,
             disabled_tls_versions: Optional[Sequence[str]] = None,
             global_logging_level: Optional[str] = None,
             minimum_key_size_settings: Optional[Sequence['outputs.GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionMinimumKeySizeSettingResult']] = None,
             proxies: Optional[Sequence['outputs.GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionProxyResult']] = None,
             should_replace_certificates_operating_system: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if add_logging_handler is None and 'addLoggingHandler' in kwargs:
            add_logging_handler = kwargs['addLoggingHandler']
        if add_logging_handler is None:
            raise TypeError("Missing 'add_logging_handler' argument")
        if disabled_tls_versions is None and 'disabledTlsVersions' in kwargs:
            disabled_tls_versions = kwargs['disabledTlsVersions']
        if disabled_tls_versions is None:
            raise TypeError("Missing 'disabled_tls_versions' argument")
        if global_logging_level is None and 'globalLoggingLevel' in kwargs:
            global_logging_level = kwargs['globalLoggingLevel']
        if global_logging_level is None:
            raise TypeError("Missing 'global_logging_level' argument")
        if minimum_key_size_settings is None and 'minimumKeySizeSettings' in kwargs:
            minimum_key_size_settings = kwargs['minimumKeySizeSettings']
        if minimum_key_size_settings is None:
            raise TypeError("Missing 'minimum_key_size_settings' argument")
        if proxies is None:
            raise TypeError("Missing 'proxies' argument")
        if should_replace_certificates_operating_system is None and 'shouldReplaceCertificatesOperatingSystem' in kwargs:
            should_replace_certificates_operating_system = kwargs['shouldReplaceCertificatesOperatingSystem']
        if should_replace_certificates_operating_system is None:
            raise TypeError("Missing 'should_replace_certificates_operating_system' argument")

        _setter("add_logging_handler", add_logging_handler)
        _setter("disabled_tls_versions", disabled_tls_versions)
        _setter("global_logging_level", global_logging_level)
        _setter("minimum_key_size_settings", minimum_key_size_settings)
        _setter("proxies", proxies)
        _setter("should_replace_certificates_operating_system", should_replace_certificates_operating_system)

    @property
    @pulumi.getter(name="addLoggingHandler")
    def add_logging_handler(self) -> bool:
        """
        Sets FileHandler and ConsoleHandler as handlers in logging.properties file.
        """
        return pulumi.get(self, "add_logging_handler")

    @property
    @pulumi.getter(name="disabledTlsVersions")
    def disabled_tls_versions(self) -> Sequence[str]:
        """
        The following post JRE installation actions are supported by the field:
        * Disable TLS 1.0 , TLS 1.1
        """
        return pulumi.get(self, "disabled_tls_versions")

    @property
    @pulumi.getter(name="globalLoggingLevel")
    def global_logging_level(self) -> str:
        """
        Sets the logging level in logging.properties file.
        """
        return pulumi.get(self, "global_logging_level")

    @property
    @pulumi.getter(name="minimumKeySizeSettings")
    def minimum_key_size_settings(self) -> Sequence['outputs.GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionMinimumKeySizeSettingResult']:
        """
        test
        """
        return pulumi.get(self, "minimum_key_size_settings")

    @property
    @pulumi.getter
    def proxies(self) -> Sequence['outputs.GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionProxyResult']:
        """
        List of proxy properties to be configured in net.properties file.
        """
        return pulumi.get(self, "proxies")

    @property
    @pulumi.getter(name="shouldReplaceCertificatesOperatingSystem")
    def should_replace_certificates_operating_system(self) -> bool:
        """
        Restores JDK root certificates with the certificates that are available in the operating system. The following action is supported by the field:
        * Replace JDK root certificates with a list provided by the operating system.
        """
        return pulumi.get(self, "should_replace_certificates_operating_system")


@pulumi.output_type
class GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionMinimumKeySizeSettingResult(dict):
    def __init__(__self__, *,
                 certpaths: Sequence['outputs.GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionMinimumKeySizeSettingCertpathResult'],
                 jars: Sequence['outputs.GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionMinimumKeySizeSettingJarResult'],
                 tls: Sequence['outputs.GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionMinimumKeySizeSettingTlResult']):
        """
        :param Sequence['GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionMinimumKeySizeSettingCertpathArgs'] certpaths: Updates the minimum key size for the specified encryption algorithm. The JDK property jdk.certpath.disabledAlgorithms will be updated with the following supported actions:
               * Changing minimum key length for RSA signed jars
               * Changing minimum key length for EC
               * Changing minimum key length for DSA
        :param Sequence['GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionMinimumKeySizeSettingJarArgs'] jars: Updates the minimum key size for the specified encryption algorithm. The JDK property jdk.jar.disabledAlgorithms will be updated with the following supported actions:
               * Changing minimum key length for RSA signed jars
               * Changing minimum key length for EC
               * Changing minimum key length for DSA
        :param Sequence['GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionMinimumKeySizeSettingTlArgs'] tls: Updates the minimum key size for the specified encryption algorithm. The JDK property jdk.tls.disabledAlgorithms will be updated with the following supported actions:
               * Changing minimum key length for Diffie-Hellman
        """
        GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionMinimumKeySizeSettingResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            certpaths=certpaths,
            jars=jars,
            tls=tls,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             certpaths: Optional[Sequence['outputs.GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionMinimumKeySizeSettingCertpathResult']] = None,
             jars: Optional[Sequence['outputs.GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionMinimumKeySizeSettingJarResult']] = None,
             tls: Optional[Sequence['outputs.GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionMinimumKeySizeSettingTlResult']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if certpaths is None:
            raise TypeError("Missing 'certpaths' argument")
        if jars is None:
            raise TypeError("Missing 'jars' argument")
        if tls is None:
            raise TypeError("Missing 'tls' argument")

        _setter("certpaths", certpaths)
        _setter("jars", jars)
        _setter("tls", tls)

    @property
    @pulumi.getter
    def certpaths(self) -> Sequence['outputs.GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionMinimumKeySizeSettingCertpathResult']:
        """
        Updates the minimum key size for the specified encryption algorithm. The JDK property jdk.certpath.disabledAlgorithms will be updated with the following supported actions:
        * Changing minimum key length for RSA signed jars
        * Changing minimum key length for EC
        * Changing minimum key length for DSA
        """
        return pulumi.get(self, "certpaths")

    @property
    @pulumi.getter
    def jars(self) -> Sequence['outputs.GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionMinimumKeySizeSettingJarResult']:
        """
        Updates the minimum key size for the specified encryption algorithm. The JDK property jdk.jar.disabledAlgorithms will be updated with the following supported actions:
        * Changing minimum key length for RSA signed jars
        * Changing minimum key length for EC
        * Changing minimum key length for DSA
        """
        return pulumi.get(self, "jars")

    @property
    @pulumi.getter
    def tls(self) -> Sequence['outputs.GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionMinimumKeySizeSettingTlResult']:
        """
        Updates the minimum key size for the specified encryption algorithm. The JDK property jdk.tls.disabledAlgorithms will be updated with the following supported actions:
        * Changing minimum key length for Diffie-Hellman
        """
        return pulumi.get(self, "tls")


@pulumi.output_type
class GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionMinimumKeySizeSettingCertpathResult(dict):
    def __init__(__self__, *,
                 key_size: int,
                 name: str):
        """
        :param int key_size: Key size for the encryption algorithm. Allowed values: 256 for EC, 2048 for DH/DSA/RSA
        :param str name: The algorithm name.
        """
        GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionMinimumKeySizeSettingCertpathResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key_size=key_size,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key_size: Optional[int] = None,
             name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if key_size is None and 'keySize' in kwargs:
            key_size = kwargs['keySize']
        if key_size is None:
            raise TypeError("Missing 'key_size' argument")
        if name is None:
            raise TypeError("Missing 'name' argument")

        _setter("key_size", key_size)
        _setter("name", name)

    @property
    @pulumi.getter(name="keySize")
    def key_size(self) -> int:
        """
        Key size for the encryption algorithm. Allowed values: 256 for EC, 2048 for DH/DSA/RSA
        """
        return pulumi.get(self, "key_size")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The algorithm name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionMinimumKeySizeSettingJarResult(dict):
    def __init__(__self__, *,
                 key_size: int,
                 name: str):
        """
        :param int key_size: Key size for the encryption algorithm. Allowed values: 256 for EC, 2048 for DH/DSA/RSA
        :param str name: The algorithm name.
        """
        GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionMinimumKeySizeSettingJarResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key_size=key_size,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key_size: Optional[int] = None,
             name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if key_size is None and 'keySize' in kwargs:
            key_size = kwargs['keySize']
        if key_size is None:
            raise TypeError("Missing 'key_size' argument")
        if name is None:
            raise TypeError("Missing 'name' argument")

        _setter("key_size", key_size)
        _setter("name", name)

    @property
    @pulumi.getter(name="keySize")
    def key_size(self) -> int:
        """
        Key size for the encryption algorithm. Allowed values: 256 for EC, 2048 for DH/DSA/RSA
        """
        return pulumi.get(self, "key_size")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The algorithm name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionMinimumKeySizeSettingTlResult(dict):
    def __init__(__self__, *,
                 key_size: int,
                 name: str):
        """
        :param int key_size: Key size for the encryption algorithm. Allowed values: 256 for EC, 2048 for DH/DSA/RSA
        :param str name: The algorithm name.
        """
        GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionMinimumKeySizeSettingTlResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key_size=key_size,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key_size: Optional[int] = None,
             name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if key_size is None and 'keySize' in kwargs:
            key_size = kwargs['keySize']
        if key_size is None:
            raise TypeError("Missing 'key_size' argument")
        if name is None:
            raise TypeError("Missing 'name' argument")

        _setter("key_size", key_size)
        _setter("name", name)

    @property
    @pulumi.getter(name="keySize")
    def key_size(self) -> int:
        """
        Key size for the encryption algorithm. Allowed values: 256 for EC, 2048 for DH/DSA/RSA
        """
        return pulumi.get(self, "key_size")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The algorithm name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionProxyResult(dict):
    def __init__(__self__, *,
                 ftp_proxy_host: str,
                 ftp_proxy_port: int,
                 http_proxy_host: str,
                 http_proxy_port: int,
                 https_proxy_host: str,
                 https_proxy_port: int,
                 socks_proxy_host: str,
                 socks_proxy_port: int,
                 use_system_proxies: bool):
        """
        :param str ftp_proxy_host: Ftp host to be set in net.properties file.
        :param int ftp_proxy_port: Ftp port number to be set in net.properties file.
        :param str http_proxy_host: Http host to be set in net.properties file.
        :param int http_proxy_port: Http port number to be set in net.properties file.
        :param str https_proxy_host: Https host to be set in net.properties file.
        :param int https_proxy_port: Https port number to be set in net.properties file.
        :param str socks_proxy_host: Socks host to be set in net.properties file.
        :param int socks_proxy_port: Socks port number to be set in net.properties file.
        :param bool use_system_proxies: Sets "java.net.useSystemProxies=true" in net.properties when they exist.
        """
        GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionProxyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ftp_proxy_host=ftp_proxy_host,
            ftp_proxy_port=ftp_proxy_port,
            http_proxy_host=http_proxy_host,
            http_proxy_port=http_proxy_port,
            https_proxy_host=https_proxy_host,
            https_proxy_port=https_proxy_port,
            socks_proxy_host=socks_proxy_host,
            socks_proxy_port=socks_proxy_port,
            use_system_proxies=use_system_proxies,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ftp_proxy_host: Optional[str] = None,
             ftp_proxy_port: Optional[int] = None,
             http_proxy_host: Optional[str] = None,
             http_proxy_port: Optional[int] = None,
             https_proxy_host: Optional[str] = None,
             https_proxy_port: Optional[int] = None,
             socks_proxy_host: Optional[str] = None,
             socks_proxy_port: Optional[int] = None,
             use_system_proxies: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if ftp_proxy_host is None and 'ftpProxyHost' in kwargs:
            ftp_proxy_host = kwargs['ftpProxyHost']
        if ftp_proxy_host is None:
            raise TypeError("Missing 'ftp_proxy_host' argument")
        if ftp_proxy_port is None and 'ftpProxyPort' in kwargs:
            ftp_proxy_port = kwargs['ftpProxyPort']
        if ftp_proxy_port is None:
            raise TypeError("Missing 'ftp_proxy_port' argument")
        if http_proxy_host is None and 'httpProxyHost' in kwargs:
            http_proxy_host = kwargs['httpProxyHost']
        if http_proxy_host is None:
            raise TypeError("Missing 'http_proxy_host' argument")
        if http_proxy_port is None and 'httpProxyPort' in kwargs:
            http_proxy_port = kwargs['httpProxyPort']
        if http_proxy_port is None:
            raise TypeError("Missing 'http_proxy_port' argument")
        if https_proxy_host is None and 'httpsProxyHost' in kwargs:
            https_proxy_host = kwargs['httpsProxyHost']
        if https_proxy_host is None:
            raise TypeError("Missing 'https_proxy_host' argument")
        if https_proxy_port is None and 'httpsProxyPort' in kwargs:
            https_proxy_port = kwargs['httpsProxyPort']
        if https_proxy_port is None:
            raise TypeError("Missing 'https_proxy_port' argument")
        if socks_proxy_host is None and 'socksProxyHost' in kwargs:
            socks_proxy_host = kwargs['socksProxyHost']
        if socks_proxy_host is None:
            raise TypeError("Missing 'socks_proxy_host' argument")
        if socks_proxy_port is None and 'socksProxyPort' in kwargs:
            socks_proxy_port = kwargs['socksProxyPort']
        if socks_proxy_port is None:
            raise TypeError("Missing 'socks_proxy_port' argument")
        if use_system_proxies is None and 'useSystemProxies' in kwargs:
            use_system_proxies = kwargs['useSystemProxies']
        if use_system_proxies is None:
            raise TypeError("Missing 'use_system_proxies' argument")

        _setter("ftp_proxy_host", ftp_proxy_host)
        _setter("ftp_proxy_port", ftp_proxy_port)
        _setter("http_proxy_host", http_proxy_host)
        _setter("http_proxy_port", http_proxy_port)
        _setter("https_proxy_host", https_proxy_host)
        _setter("https_proxy_port", https_proxy_port)
        _setter("socks_proxy_host", socks_proxy_host)
        _setter("socks_proxy_port", socks_proxy_port)
        _setter("use_system_proxies", use_system_proxies)

    @property
    @pulumi.getter(name="ftpProxyHost")
    def ftp_proxy_host(self) -> str:
        """
        Ftp host to be set in net.properties file.
        """
        return pulumi.get(self, "ftp_proxy_host")

    @property
    @pulumi.getter(name="ftpProxyPort")
    def ftp_proxy_port(self) -> int:
        """
        Ftp port number to be set in net.properties file.
        """
        return pulumi.get(self, "ftp_proxy_port")

    @property
    @pulumi.getter(name="httpProxyHost")
    def http_proxy_host(self) -> str:
        """
        Http host to be set in net.properties file.
        """
        return pulumi.get(self, "http_proxy_host")

    @property
    @pulumi.getter(name="httpProxyPort")
    def http_proxy_port(self) -> int:
        """
        Http port number to be set in net.properties file.
        """
        return pulumi.get(self, "http_proxy_port")

    @property
    @pulumi.getter(name="httpsProxyHost")
    def https_proxy_host(self) -> str:
        """
        Https host to be set in net.properties file.
        """
        return pulumi.get(self, "https_proxy_host")

    @property
    @pulumi.getter(name="httpsProxyPort")
    def https_proxy_port(self) -> int:
        """
        Https port number to be set in net.properties file.
        """
        return pulumi.get(self, "https_proxy_port")

    @property
    @pulumi.getter(name="socksProxyHost")
    def socks_proxy_host(self) -> str:
        """
        Socks host to be set in net.properties file.
        """
        return pulumi.get(self, "socks_proxy_host")

    @property
    @pulumi.getter(name="socksProxyPort")
    def socks_proxy_port(self) -> int:
        """
        Socks port number to be set in net.properties file.
        """
        return pulumi.get(self, "socks_proxy_port")

    @property
    @pulumi.getter(name="useSystemProxies")
    def use_system_proxies(self) -> bool:
        """
        Sets "java.net.useSystemProxies=true" in net.properties when they exist.
        """
        return pulumi.get(self, "use_system_proxies")


@pulumi.output_type
class GetFleetAdvancedFeatureConfigurationPerformanceTuningAnalysisResult(dict):
    def __init__(__self__, *,
                 is_enabled: bool):
        """
        :param bool is_enabled: PerformanceTuningAnalysis flag to store enabled or disabled status.
        """
        GetFleetAdvancedFeatureConfigurationPerformanceTuningAnalysisResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            is_enabled=is_enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             is_enabled: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if is_enabled is None and 'isEnabled' in kwargs:
            is_enabled = kwargs['isEnabled']
        if is_enabled is None:
            raise TypeError("Missing 'is_enabled' argument")

        _setter("is_enabled", is_enabled)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        """
        PerformanceTuningAnalysis flag to store enabled or disabled status.
        """
        return pulumi.get(self, "is_enabled")


@pulumi.output_type
class GetFleetBlocklistsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        GetFleetBlocklistsFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             values: Optional[Sequence[str]] = None,
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if name is None:
            raise TypeError("Missing 'name' argument")
        if values is None:
            raise TypeError("Missing 'values' argument")

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetFleetBlocklistsItemResult(dict):
    def __init__(__self__, *,
                 key: str,
                 operation: str,
                 reason: str,
                 targets: Sequence['outputs.GetFleetBlocklistsItemTargetResult']):
        """
        :param str key: The unique identifier of this blocklist record.
        :param str operation: The operation type.
        :param str reason: The reason why the operation is blocklisted.
        :param Sequence['GetFleetBlocklistsItemTargetArgs'] targets: A resource to blocklist for certain operation.
        """
        GetFleetBlocklistsItemResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            operation=operation,
            reason=reason,
            targets=targets,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: Optional[str] = None,
             operation: Optional[str] = None,
             reason: Optional[str] = None,
             targets: Optional[Sequence['outputs.GetFleetBlocklistsItemTargetResult']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if key is None:
            raise TypeError("Missing 'key' argument")
        if operation is None:
            raise TypeError("Missing 'operation' argument")
        if reason is None:
            raise TypeError("Missing 'reason' argument")
        if targets is None:
            raise TypeError("Missing 'targets' argument")

        _setter("key", key)
        _setter("operation", operation)
        _setter("reason", reason)
        _setter("targets", targets)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The unique identifier of this blocklist record.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operation(self) -> str:
        """
        The operation type.
        """
        return pulumi.get(self, "operation")

    @property
    @pulumi.getter
    def reason(self) -> str:
        """
        The reason why the operation is blocklisted.
        """
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def targets(self) -> Sequence['outputs.GetFleetBlocklistsItemTargetResult']:
        """
        A resource to blocklist for certain operation.
        """
        return pulumi.get(self, "targets")


@pulumi.output_type
class GetFleetBlocklistsItemTargetResult(dict):
    def __init__(__self__, *,
                 fleet_id: str,
                 installation_key: str,
                 managed_instance_id: str):
        """
        :param str fleet_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Fleet.
        :param str installation_key: The unique identifier for the installation of Java Runtime at a specific path on a specific operating system.
        :param str managed_instance_id: The Fleet-unique identifier of the related managed instance.
        """
        GetFleetBlocklistsItemTargetResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            fleet_id=fleet_id,
            installation_key=installation_key,
            managed_instance_id=managed_instance_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             fleet_id: Optional[str] = None,
             installation_key: Optional[str] = None,
             managed_instance_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if fleet_id is None and 'fleetId' in kwargs:
            fleet_id = kwargs['fleetId']
        if fleet_id is None:
            raise TypeError("Missing 'fleet_id' argument")
        if installation_key is None and 'installationKey' in kwargs:
            installation_key = kwargs['installationKey']
        if installation_key is None:
            raise TypeError("Missing 'installation_key' argument")
        if managed_instance_id is None and 'managedInstanceId' in kwargs:
            managed_instance_id = kwargs['managedInstanceId']
        if managed_instance_id is None:
            raise TypeError("Missing 'managed_instance_id' argument")

        _setter("fleet_id", fleet_id)
        _setter("installation_key", installation_key)
        _setter("managed_instance_id", managed_instance_id)

    @property
    @pulumi.getter(name="fleetId")
    def fleet_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Fleet.
        """
        return pulumi.get(self, "fleet_id")

    @property
    @pulumi.getter(name="installationKey")
    def installation_key(self) -> str:
        """
        The unique identifier for the installation of Java Runtime at a specific path on a specific operating system.
        """
        return pulumi.get(self, "installation_key")

    @property
    @pulumi.getter(name="managedInstanceId")
    def managed_instance_id(self) -> str:
        """
        The Fleet-unique identifier of the related managed instance.
        """
        return pulumi.get(self, "managed_instance_id")


@pulumi.output_type
class GetFleetCryptoAnalysisResultsCryptoAnalysisResultCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetFleetCryptoAnalysisResultsCryptoAnalysisResultCollectionItemResult']):
        GetFleetCryptoAnalysisResultsCryptoAnalysisResultCollectionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Optional[Sequence['outputs.GetFleetCryptoAnalysisResultsCryptoAnalysisResultCollectionItemResult']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if items is None:
            raise TypeError("Missing 'items' argument")

        _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetFleetCryptoAnalysisResultsCryptoAnalysisResultCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetFleetCryptoAnalysisResultsCryptoAnalysisResultCollectionItemResult(dict):
    def __init__(__self__, *,
                 aggregation_mode: str,
                 bucket: str,
                 crypto_roadmap_version: str,
                 finding_count: int,
                 fleet_id: str,
                 host_name: str,
                 id: str,
                 managed_instance_id: str,
                 namespace: str,
                 non_compliant_finding_count: int,
                 object: str,
                 summarized_event_count: int,
                 time_created: str,
                 time_first_event: str,
                 time_last_event: str,
                 total_event_count: int,
                 work_request_id: str):
        """
        :param str aggregation_mode: The aggregation mode of the crypto event analysis result.
        :param str bucket: The Object Storage bucket name of this analysis result.
        :param str crypto_roadmap_version: The Crypto Roadmap version used to perform the analysis.
        :param int finding_count: Total number of findings with the analysis.
        :param str fleet_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Fleet.
        :param str host_name: The hostname of the managed instance.
        :param str id: The OCID to identify this analysis results.
        :param str managed_instance_id: The Fleet-unique identifier of the related managed instance.
        :param str namespace: The Object Storage namespace of this analysis result.
        :param int non_compliant_finding_count: Total number of non-compliant findings with the analysis. A non-compliant finding means the application won't work properly with the changes introduced by the Crypto Roadmap version used by the analysis.
        :param str object: The Object Storage object name of this analysis result.
        :param int summarized_event_count: Total number of summarized events. Summarized events are deduplicated events of interest.
        :param str time_created: The time the result is compiled.
        :param str time_first_event: Time of the first event in the analysis.
        :param str time_last_event: Time of the last event in the analysis.
        :param int total_event_count: Total number of events in the analysis.
        :param str work_request_id: The OCID of the work request to start the analysis.
        """
        GetFleetCryptoAnalysisResultsCryptoAnalysisResultCollectionItemResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aggregation_mode=aggregation_mode,
            bucket=bucket,
            crypto_roadmap_version=crypto_roadmap_version,
            finding_count=finding_count,
            fleet_id=fleet_id,
            host_name=host_name,
            id=id,
            managed_instance_id=managed_instance_id,
            namespace=namespace,
            non_compliant_finding_count=non_compliant_finding_count,
            object=object,
            summarized_event_count=summarized_event_count,
            time_created=time_created,
            time_first_event=time_first_event,
            time_last_event=time_last_event,
            total_event_count=total_event_count,
            work_request_id=work_request_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aggregation_mode: Optional[str] = None,
             bucket: Optional[str] = None,
             crypto_roadmap_version: Optional[str] = None,
             finding_count: Optional[int] = None,
             fleet_id: Optional[str] = None,
             host_name: Optional[str] = None,
             id: Optional[str] = None,
             managed_instance_id: Optional[str] = None,
             namespace: Optional[str] = None,
             non_compliant_finding_count: Optional[int] = None,
             object: Optional[str] = None,
             summarized_event_count: Optional[int] = None,
             time_created: Optional[str] = None,
             time_first_event: Optional[str] = None,
             time_last_event: Optional[str] = None,
             total_event_count: Optional[int] = None,
             work_request_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if aggregation_mode is None and 'aggregationMode' in kwargs:
            aggregation_mode = kwargs['aggregationMode']
        if aggregation_mode is None:
            raise TypeError("Missing 'aggregation_mode' argument")
        if bucket is None:
            raise TypeError("Missing 'bucket' argument")
        if crypto_roadmap_version is None and 'cryptoRoadmapVersion' in kwargs:
            crypto_roadmap_version = kwargs['cryptoRoadmapVersion']
        if crypto_roadmap_version is None:
            raise TypeError("Missing 'crypto_roadmap_version' argument")
        if finding_count is None and 'findingCount' in kwargs:
            finding_count = kwargs['findingCount']
        if finding_count is None:
            raise TypeError("Missing 'finding_count' argument")
        if fleet_id is None and 'fleetId' in kwargs:
            fleet_id = kwargs['fleetId']
        if fleet_id is None:
            raise TypeError("Missing 'fleet_id' argument")
        if host_name is None and 'hostName' in kwargs:
            host_name = kwargs['hostName']
        if host_name is None:
            raise TypeError("Missing 'host_name' argument")
        if id is None:
            raise TypeError("Missing 'id' argument")
        if managed_instance_id is None and 'managedInstanceId' in kwargs:
            managed_instance_id = kwargs['managedInstanceId']
        if managed_instance_id is None:
            raise TypeError("Missing 'managed_instance_id' argument")
        if namespace is None:
            raise TypeError("Missing 'namespace' argument")
        if non_compliant_finding_count is None and 'nonCompliantFindingCount' in kwargs:
            non_compliant_finding_count = kwargs['nonCompliantFindingCount']
        if non_compliant_finding_count is None:
            raise TypeError("Missing 'non_compliant_finding_count' argument")
        if object is None:
            raise TypeError("Missing 'object' argument")
        if summarized_event_count is None and 'summarizedEventCount' in kwargs:
            summarized_event_count = kwargs['summarizedEventCount']
        if summarized_event_count is None:
            raise TypeError("Missing 'summarized_event_count' argument")
        if time_created is None and 'timeCreated' in kwargs:
            time_created = kwargs['timeCreated']
        if time_created is None:
            raise TypeError("Missing 'time_created' argument")
        if time_first_event is None and 'timeFirstEvent' in kwargs:
            time_first_event = kwargs['timeFirstEvent']
        if time_first_event is None:
            raise TypeError("Missing 'time_first_event' argument")
        if time_last_event is None and 'timeLastEvent' in kwargs:
            time_last_event = kwargs['timeLastEvent']
        if time_last_event is None:
            raise TypeError("Missing 'time_last_event' argument")
        if total_event_count is None and 'totalEventCount' in kwargs:
            total_event_count = kwargs['totalEventCount']
        if total_event_count is None:
            raise TypeError("Missing 'total_event_count' argument")
        if work_request_id is None and 'workRequestId' in kwargs:
            work_request_id = kwargs['workRequestId']
        if work_request_id is None:
            raise TypeError("Missing 'work_request_id' argument")

        _setter("aggregation_mode", aggregation_mode)
        _setter("bucket", bucket)
        _setter("crypto_roadmap_version", crypto_roadmap_version)
        _setter("finding_count", finding_count)
        _setter("fleet_id", fleet_id)
        _setter("host_name", host_name)
        _setter("id", id)
        _setter("managed_instance_id", managed_instance_id)
        _setter("namespace", namespace)
        _setter("non_compliant_finding_count", non_compliant_finding_count)
        _setter("object", object)
        _setter("summarized_event_count", summarized_event_count)
        _setter("time_created", time_created)
        _setter("time_first_event", time_first_event)
        _setter("time_last_event", time_last_event)
        _setter("total_event_count", total_event_count)
        _setter("work_request_id", work_request_id)

    @property
    @pulumi.getter(name="aggregationMode")
    def aggregation_mode(self) -> str:
        """
        The aggregation mode of the crypto event analysis result.
        """
        return pulumi.get(self, "aggregation_mode")

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The Object Storage bucket name of this analysis result.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="cryptoRoadmapVersion")
    def crypto_roadmap_version(self) -> str:
        """
        The Crypto Roadmap version used to perform the analysis.
        """
        return pulumi.get(self, "crypto_roadmap_version")

    @property
    @pulumi.getter(name="findingCount")
    def finding_count(self) -> int:
        """
        Total number of findings with the analysis.
        """
        return pulumi.get(self, "finding_count")

    @property
    @pulumi.getter(name="fleetId")
    def fleet_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Fleet.
        """
        return pulumi.get(self, "fleet_id")

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> str:
        """
        The hostname of the managed instance.
        """
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The OCID to identify this analysis results.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="managedInstanceId")
    def managed_instance_id(self) -> str:
        """
        The Fleet-unique identifier of the related managed instance.
        """
        return pulumi.get(self, "managed_instance_id")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        The Object Storage namespace of this analysis result.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="nonCompliantFindingCount")
    def non_compliant_finding_count(self) -> int:
        """
        Total number of non-compliant findings with the analysis. A non-compliant finding means the application won't work properly with the changes introduced by the Crypto Roadmap version used by the analysis.
        """
        return pulumi.get(self, "non_compliant_finding_count")

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        The Object Storage object name of this analysis result.
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter(name="summarizedEventCount")
    def summarized_event_count(self) -> int:
        """
        Total number of summarized events. Summarized events are deduplicated events of interest.
        """
        return pulumi.get(self, "summarized_event_count")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The time the result is compiled.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeFirstEvent")
    def time_first_event(self) -> str:
        """
        Time of the first event in the analysis.
        """
        return pulumi.get(self, "time_first_event")

    @property
    @pulumi.getter(name="timeLastEvent")
    def time_last_event(self) -> str:
        """
        Time of the last event in the analysis.
        """
        return pulumi.get(self, "time_last_event")

    @property
    @pulumi.getter(name="totalEventCount")
    def total_event_count(self) -> int:
        """
        Total number of events in the analysis.
        """
        return pulumi.get(self, "total_event_count")

    @property
    @pulumi.getter(name="workRequestId")
    def work_request_id(self) -> str:
        """
        The OCID of the work request to start the analysis.
        """
        return pulumi.get(self, "work_request_id")


@pulumi.output_type
class GetFleetCryptoAnalysisResultsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        GetFleetCryptoAnalysisResultsFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             values: Optional[Sequence[str]] = None,
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if name is None:
            raise TypeError("Missing 'name' argument")
        if values is None:
            raise TypeError("Missing 'values' argument")

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetFleetDiagnosesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        GetFleetDiagnosesFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             values: Optional[Sequence[str]] = None,
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if name is None:
            raise TypeError("Missing 'name' argument")
        if values is None:
            raise TypeError("Missing 'values' argument")

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetFleetDiagnosesFleetDiagnosisCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetFleetDiagnosesFleetDiagnosisCollectionItemResult']):
        """
        :param Sequence['GetFleetDiagnosesFleetDiagnosisCollectionItemArgs'] items: A list of the fleet resource diagnosis.
        """
        GetFleetDiagnosesFleetDiagnosisCollectionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Optional[Sequence['outputs.GetFleetDiagnosesFleetDiagnosisCollectionItemResult']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if items is None:
            raise TypeError("Missing 'items' argument")

        _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetFleetDiagnosesFleetDiagnosisCollectionItemResult']:
        """
        A list of the fleet resource diagnosis.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetFleetDiagnosesFleetDiagnosisCollectionItemResult(dict):
    def __init__(__self__, *,
                 resource_diagnosis: str,
                 resource_id: str,
                 resource_state: str,
                 resource_type: str):
        """
        :param str resource_diagnosis: The diagnosis message.
        :param str resource_id: The OCID of the external resouce needed by the fleet.
        :param str resource_state: The state of the resource. The resource state is ACTIVE when it works properly for the fleet. In case it would cause an issue for the fleet function, the state is INACTIVE. When JMS can't locate the resource, the state is NOT_FOUND. OTHER covers other cases, such as a temporarily network issue that prevents JMS from detecting the resource. Check the resourceDiagnosis for details.
        :param str resource_type: The type of the resource needed by the fleet. This is the role of a resource in the fleet. Use the OCID to determine the actual Oracle Cloud Infrastructure resource type such as log group or log.
        """
        GetFleetDiagnosesFleetDiagnosisCollectionItemResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            resource_diagnosis=resource_diagnosis,
            resource_id=resource_id,
            resource_state=resource_state,
            resource_type=resource_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             resource_diagnosis: Optional[str] = None,
             resource_id: Optional[str] = None,
             resource_state: Optional[str] = None,
             resource_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if resource_diagnosis is None and 'resourceDiagnosis' in kwargs:
            resource_diagnosis = kwargs['resourceDiagnosis']
        if resource_diagnosis is None:
            raise TypeError("Missing 'resource_diagnosis' argument")
        if resource_id is None and 'resourceId' in kwargs:
            resource_id = kwargs['resourceId']
        if resource_id is None:
            raise TypeError("Missing 'resource_id' argument")
        if resource_state is None and 'resourceState' in kwargs:
            resource_state = kwargs['resourceState']
        if resource_state is None:
            raise TypeError("Missing 'resource_state' argument")
        if resource_type is None and 'resourceType' in kwargs:
            resource_type = kwargs['resourceType']
        if resource_type is None:
            raise TypeError("Missing 'resource_type' argument")

        _setter("resource_diagnosis", resource_diagnosis)
        _setter("resource_id", resource_id)
        _setter("resource_state", resource_state)
        _setter("resource_type", resource_type)

    @property
    @pulumi.getter(name="resourceDiagnosis")
    def resource_diagnosis(self) -> str:
        """
        The diagnosis message.
        """
        return pulumi.get(self, "resource_diagnosis")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> str:
        """
        The OCID of the external resouce needed by the fleet.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceState")
    def resource_state(self) -> str:
        """
        The state of the resource. The resource state is ACTIVE when it works properly for the fleet. In case it would cause an issue for the fleet function, the state is INACTIVE. When JMS can't locate the resource, the state is NOT_FOUND. OTHER covers other cases, such as a temporarily network issue that prevents JMS from detecting the resource. Check the resourceDiagnosis for details.
        """
        return pulumi.get(self, "resource_state")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        The type of the resource needed by the fleet. This is the role of a resource in the fleet. Use the OCID to determine the actual Oracle Cloud Infrastructure resource type such as log group or log.
        """
        return pulumi.get(self, "resource_type")


@pulumi.output_type
class GetFleetInventoryLogResult(dict):
    def __init__(__self__, *,
                 log_group_id: str,
                 log_id: str):
        """
        :param str log_group_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log group.
        :param str log_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log.
        """
        GetFleetInventoryLogResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            log_group_id=log_group_id,
            log_id=log_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             log_group_id: Optional[str] = None,
             log_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if log_group_id is None and 'logGroupId' in kwargs:
            log_group_id = kwargs['logGroupId']
        if log_group_id is None:
            raise TypeError("Missing 'log_group_id' argument")
        if log_id is None and 'logId' in kwargs:
            log_id = kwargs['logId']
        if log_id is None:
            raise TypeError("Missing 'log_id' argument")

        _setter("log_group_id", log_group_id)
        _setter("log_id", log_id)

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log group.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetFleetJavaMigrationAnalysisResultsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        GetFleetJavaMigrationAnalysisResultsFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             values: Optional[Sequence[str]] = None,
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if name is None:
            raise TypeError("Missing 'name' argument")
        if values is None:
            raise TypeError("Missing 'values' argument")

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetFleetJavaMigrationAnalysisResultsJavaMigrationAnalysisResultCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetFleetJavaMigrationAnalysisResultsJavaMigrationAnalysisResultCollectionItemResult']):
        GetFleetJavaMigrationAnalysisResultsJavaMigrationAnalysisResultCollectionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Optional[Sequence['outputs.GetFleetJavaMigrationAnalysisResultsJavaMigrationAnalysisResultCollectionItemResult']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if items is None:
            raise TypeError("Missing 'items' argument")

        _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetFleetJavaMigrationAnalysisResultsJavaMigrationAnalysisResultCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetFleetJavaMigrationAnalysisResultsJavaMigrationAnalysisResultCollectionItemResult(dict):
    def __init__(__self__, *,
                 application_execution_type: str,
                 application_name: str,
                 application_path: str,
                 bucket: str,
                 fleet_id: str,
                 host_name: str,
                 id: str,
                 managed_instance_id: str,
                 metadata: str,
                 namespace: str,
                 object_lists: Sequence[str],
                 object_storage_upload_dir_path: str,
                 source_jdk_version: str,
                 target_jdk_version: str,
                 time_created: str,
                 work_request_id: str):
        """
        :param str application_execution_type: Execution type of the application for an application type, such as WAR and EAR, that is deployed or installed.
        :param str application_name: The name of the application for which the Java migration analysis was performed.
        :param str application_path: The installation path of the application for which the Java migration analysis was performed.
        :param str bucket: The name of the object storage bucket that contains the results of the migration analysis.
        :param str fleet_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Fleet.
        :param str host_name: The hostname of the managed instance that hosts the application for which the Java migration analysis was performed.
        :param str id: The OCID of the migration analysis report.
        :param str managed_instance_id: The Fleet-unique identifier of the related managed instance.
        :param str metadata: Additional info reserved for future use.
        :param str namespace: The object storage namespace that contains the results of the migration analysis.
        :param Sequence[str] object_lists: The names of the object storage objects that contain the results of the migration analysis.
        :param str object_storage_upload_dir_path: The directory path of the object storage bucket that contains the results of the migration analysis.
        :param str source_jdk_version: The source JDK version of the application that's currently running.
        :param str target_jdk_version: The target JDK version of the application to be migrated.
        :param str time_created: The time the result is compiled.
        :param str work_request_id: The OCID of the work request of this analysis.
        """
        GetFleetJavaMigrationAnalysisResultsJavaMigrationAnalysisResultCollectionItemResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            application_execution_type=application_execution_type,
            application_name=application_name,
            application_path=application_path,
            bucket=bucket,
            fleet_id=fleet_id,
            host_name=host_name,
            id=id,
            managed_instance_id=managed_instance_id,
            metadata=metadata,
            namespace=namespace,
            object_lists=object_lists,
            object_storage_upload_dir_path=object_storage_upload_dir_path,
            source_jdk_version=source_jdk_version,
            target_jdk_version=target_jdk_version,
            time_created=time_created,
            work_request_id=work_request_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             application_execution_type: Optional[str] = None,
             application_name: Optional[str] = None,
             application_path: Optional[str] = None,
             bucket: Optional[str] = None,
             fleet_id: Optional[str] = None,
             host_name: Optional[str] = None,
             id: Optional[str] = None,
             managed_instance_id: Optional[str] = None,
             metadata: Optional[str] = None,
             namespace: Optional[str] = None,
             object_lists: Optional[Sequence[str]] = None,
             object_storage_upload_dir_path: Optional[str] = None,
             source_jdk_version: Optional[str] = None,
             target_jdk_version: Optional[str] = None,
             time_created: Optional[str] = None,
             work_request_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if application_execution_type is None and 'applicationExecutionType' in kwargs:
            application_execution_type = kwargs['applicationExecutionType']
        if application_execution_type is None:
            raise TypeError("Missing 'application_execution_type' argument")
        if application_name is None and 'applicationName' in kwargs:
            application_name = kwargs['applicationName']
        if application_name is None:
            raise TypeError("Missing 'application_name' argument")
        if application_path is None and 'applicationPath' in kwargs:
            application_path = kwargs['applicationPath']
        if application_path is None:
            raise TypeError("Missing 'application_path' argument")
        if bucket is None:
            raise TypeError("Missing 'bucket' argument")
        if fleet_id is None and 'fleetId' in kwargs:
            fleet_id = kwargs['fleetId']
        if fleet_id is None:
            raise TypeError("Missing 'fleet_id' argument")
        if host_name is None and 'hostName' in kwargs:
            host_name = kwargs['hostName']
        if host_name is None:
            raise TypeError("Missing 'host_name' argument")
        if id is None:
            raise TypeError("Missing 'id' argument")
        if managed_instance_id is None and 'managedInstanceId' in kwargs:
            managed_instance_id = kwargs['managedInstanceId']
        if managed_instance_id is None:
            raise TypeError("Missing 'managed_instance_id' argument")
        if metadata is None:
            raise TypeError("Missing 'metadata' argument")
        if namespace is None:
            raise TypeError("Missing 'namespace' argument")
        if object_lists is None and 'objectLists' in kwargs:
            object_lists = kwargs['objectLists']
        if object_lists is None:
            raise TypeError("Missing 'object_lists' argument")
        if object_storage_upload_dir_path is None and 'objectStorageUploadDirPath' in kwargs:
            object_storage_upload_dir_path = kwargs['objectStorageUploadDirPath']
        if object_storage_upload_dir_path is None:
            raise TypeError("Missing 'object_storage_upload_dir_path' argument")
        if source_jdk_version is None and 'sourceJdkVersion' in kwargs:
            source_jdk_version = kwargs['sourceJdkVersion']
        if source_jdk_version is None:
            raise TypeError("Missing 'source_jdk_version' argument")
        if target_jdk_version is None and 'targetJdkVersion' in kwargs:
            target_jdk_version = kwargs['targetJdkVersion']
        if target_jdk_version is None:
            raise TypeError("Missing 'target_jdk_version' argument")
        if time_created is None and 'timeCreated' in kwargs:
            time_created = kwargs['timeCreated']
        if time_created is None:
            raise TypeError("Missing 'time_created' argument")
        if work_request_id is None and 'workRequestId' in kwargs:
            work_request_id = kwargs['workRequestId']
        if work_request_id is None:
            raise TypeError("Missing 'work_request_id' argument")

        _setter("application_execution_type", application_execution_type)
        _setter("application_name", application_name)
        _setter("application_path", application_path)
        _setter("bucket", bucket)
        _setter("fleet_id", fleet_id)
        _setter("host_name", host_name)
        _setter("id", id)
        _setter("managed_instance_id", managed_instance_id)
        _setter("metadata", metadata)
        _setter("namespace", namespace)
        _setter("object_lists", object_lists)
        _setter("object_storage_upload_dir_path", object_storage_upload_dir_path)
        _setter("source_jdk_version", source_jdk_version)
        _setter("target_jdk_version", target_jdk_version)
        _setter("time_created", time_created)
        _setter("work_request_id", work_request_id)

    @property
    @pulumi.getter(name="applicationExecutionType")
    def application_execution_type(self) -> str:
        """
        Execution type of the application for an application type, such as WAR and EAR, that is deployed or installed.
        """
        return pulumi.get(self, "application_execution_type")

    @property
    @pulumi.getter(name="applicationName")
    def application_name(self) -> str:
        """
        The name of the application for which the Java migration analysis was performed.
        """
        return pulumi.get(self, "application_name")

    @property
    @pulumi.getter(name="applicationPath")
    def application_path(self) -> str:
        """
        The installation path of the application for which the Java migration analysis was performed.
        """
        return pulumi.get(self, "application_path")

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The name of the object storage bucket that contains the results of the migration analysis.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="fleetId")
    def fleet_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Fleet.
        """
        return pulumi.get(self, "fleet_id")

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> str:
        """
        The hostname of the managed instance that hosts the application for which the Java migration analysis was performed.
        """
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The OCID of the migration analysis report.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="managedInstanceId")
    def managed_instance_id(self) -> str:
        """
        The Fleet-unique identifier of the related managed instance.
        """
        return pulumi.get(self, "managed_instance_id")

    @property
    @pulumi.getter
    def metadata(self) -> str:
        """
        Additional info reserved for future use.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        The object storage namespace that contains the results of the migration analysis.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="objectLists")
    def object_lists(self) -> Sequence[str]:
        """
        The names of the object storage objects that contain the results of the migration analysis.
        """
        return pulumi.get(self, "object_lists")

    @property
    @pulumi.getter(name="objectStorageUploadDirPath")
    def object_storage_upload_dir_path(self) -> str:
        """
        The directory path of the object storage bucket that contains the results of the migration analysis.
        """
        return pulumi.get(self, "object_storage_upload_dir_path")

    @property
    @pulumi.getter(name="sourceJdkVersion")
    def source_jdk_version(self) -> str:
        """
        The source JDK version of the application that's currently running.
        """
        return pulumi.get(self, "source_jdk_version")

    @property
    @pulumi.getter(name="targetJdkVersion")
    def target_jdk_version(self) -> str:
        """
        The target JDK version of the application to be migrated.
        """
        return pulumi.get(self, "target_jdk_version")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The time the result is compiled.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="workRequestId")
    def work_request_id(self) -> str:
        """
        The OCID of the work request of this analysis.
        """
        return pulumi.get(self, "work_request_id")


@pulumi.output_type
class GetFleetOperationLogResult(dict):
    def __init__(__self__, *,
                 log_group_id: str,
                 log_id: str):
        """
        :param str log_group_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log group.
        :param str log_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log.
        """
        GetFleetOperationLogResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            log_group_id=log_group_id,
            log_id=log_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             log_group_id: Optional[str] = None,
             log_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if log_group_id is None and 'logGroupId' in kwargs:
            log_group_id = kwargs['logGroupId']
        if log_group_id is None:
            raise TypeError("Missing 'log_group_id' argument")
        if log_id is None and 'logId' in kwargs:
            log_id = kwargs['logId']
        if log_id is None:
            raise TypeError("Missing 'log_id' argument")

        _setter("log_group_id", log_group_id)
        _setter("log_id", log_id)

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log group.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetFleetPerformanceTuningAnalysisResultsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        GetFleetPerformanceTuningAnalysisResultsFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             values: Optional[Sequence[str]] = None,
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if name is None:
            raise TypeError("Missing 'name' argument")
        if values is None:
            raise TypeError("Missing 'values' argument")

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetFleetPerformanceTuningAnalysisResultsPerformanceTuningAnalysisResultCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetFleetPerformanceTuningAnalysisResultsPerformanceTuningAnalysisResultCollectionItemResult']):
        GetFleetPerformanceTuningAnalysisResultsPerformanceTuningAnalysisResultCollectionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Optional[Sequence['outputs.GetFleetPerformanceTuningAnalysisResultsPerformanceTuningAnalysisResultCollectionItemResult']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if items is None:
            raise TypeError("Missing 'items' argument")

        _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetFleetPerformanceTuningAnalysisResultsPerformanceTuningAnalysisResultCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetFleetPerformanceTuningAnalysisResultsPerformanceTuningAnalysisResultCollectionItemResult(dict):
    def __init__(__self__, *,
                 application_id: str,
                 application_installation_id: str,
                 application_installation_path: str,
                 application_name: str,
                 bucket: str,
                 fleet_id: str,
                 host_name: str,
                 id: str,
                 managed_instance_id: str,
                 namespace: str,
                 object: str,
                 result: str,
                 time_created: str,
                 time_finished: str,
                 time_started: str,
                 warning_count: int,
                 work_request_id: str):
        """
        :param str application_id: The Fleet-unique identifier of the related application.
        :param str application_installation_id: The internal identifier of the application installation for which the report has been generated.
        :param str application_installation_path: The installation path of the application for which the report has been generated.
        :param str application_name: The name of the application for which the report has been generated.
        :param str bucket: The Object Storage bucket name of this analysis result.
        :param str fleet_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Fleet.
        :param str host_name: The hostname of the managed instance.
        :param str id: The OCID to identify this analysis results.
        :param str managed_instance_id: The Fleet-unique identifier of the related managed instance.
        :param str namespace: The Object Storage namespace of this analysis result.
        :param str object: The Object Storage object name of this analysis result.
        :param str result: Result of the analysis based on whether warnings have been found or not.
        :param str time_created: The time the result is compiled.
        :param str time_finished: The time the JFR capture finished.
        :param str time_started: The time the JFR capture started.
        :param int warning_count: Total number of warnings reported by the analysis.
        :param str work_request_id: The OCID of the work request to start the analysis.
        """
        GetFleetPerformanceTuningAnalysisResultsPerformanceTuningAnalysisResultCollectionItemResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            application_id=application_id,
            application_installation_id=application_installation_id,
            application_installation_path=application_installation_path,
            application_name=application_name,
            bucket=bucket,
            fleet_id=fleet_id,
            host_name=host_name,
            id=id,
            managed_instance_id=managed_instance_id,
            namespace=namespace,
            object=object,
            result=result,
            time_created=time_created,
            time_finished=time_finished,
            time_started=time_started,
            warning_count=warning_count,
            work_request_id=work_request_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             application_id: Optional[str] = None,
             application_installation_id: Optional[str] = None,
             application_installation_path: Optional[str] = None,
             application_name: Optional[str] = None,
             bucket: Optional[str] = None,
             fleet_id: Optional[str] = None,
             host_name: Optional[str] = None,
             id: Optional[str] = None,
             managed_instance_id: Optional[str] = None,
             namespace: Optional[str] = None,
             object: Optional[str] = None,
             result: Optional[str] = None,
             time_created: Optional[str] = None,
             time_finished: Optional[str] = None,
             time_started: Optional[str] = None,
             warning_count: Optional[int] = None,
             work_request_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if application_id is None and 'applicationId' in kwargs:
            application_id = kwargs['applicationId']
        if application_id is None:
            raise TypeError("Missing 'application_id' argument")
        if application_installation_id is None and 'applicationInstallationId' in kwargs:
            application_installation_id = kwargs['applicationInstallationId']
        if application_installation_id is None:
            raise TypeError("Missing 'application_installation_id' argument")
        if application_installation_path is None and 'applicationInstallationPath' in kwargs:
            application_installation_path = kwargs['applicationInstallationPath']
        if application_installation_path is None:
            raise TypeError("Missing 'application_installation_path' argument")
        if application_name is None and 'applicationName' in kwargs:
            application_name = kwargs['applicationName']
        if application_name is None:
            raise TypeError("Missing 'application_name' argument")
        if bucket is None:
            raise TypeError("Missing 'bucket' argument")
        if fleet_id is None and 'fleetId' in kwargs:
            fleet_id = kwargs['fleetId']
        if fleet_id is None:
            raise TypeError("Missing 'fleet_id' argument")
        if host_name is None and 'hostName' in kwargs:
            host_name = kwargs['hostName']
        if host_name is None:
            raise TypeError("Missing 'host_name' argument")
        if id is None:
            raise TypeError("Missing 'id' argument")
        if managed_instance_id is None and 'managedInstanceId' in kwargs:
            managed_instance_id = kwargs['managedInstanceId']
        if managed_instance_id is None:
            raise TypeError("Missing 'managed_instance_id' argument")
        if namespace is None:
            raise TypeError("Missing 'namespace' argument")
        if object is None:
            raise TypeError("Missing 'object' argument")
        if result is None:
            raise TypeError("Missing 'result' argument")
        if time_created is None and 'timeCreated' in kwargs:
            time_created = kwargs['timeCreated']
        if time_created is None:
            raise TypeError("Missing 'time_created' argument")
        if time_finished is None and 'timeFinished' in kwargs:
            time_finished = kwargs['timeFinished']
        if time_finished is None:
            raise TypeError("Missing 'time_finished' argument")
        if time_started is None and 'timeStarted' in kwargs:
            time_started = kwargs['timeStarted']
        if time_started is None:
            raise TypeError("Missing 'time_started' argument")
        if warning_count is None and 'warningCount' in kwargs:
            warning_count = kwargs['warningCount']
        if warning_count is None:
            raise TypeError("Missing 'warning_count' argument")
        if work_request_id is None and 'workRequestId' in kwargs:
            work_request_id = kwargs['workRequestId']
        if work_request_id is None:
            raise TypeError("Missing 'work_request_id' argument")

        _setter("application_id", application_id)
        _setter("application_installation_id", application_installation_id)
        _setter("application_installation_path", application_installation_path)
        _setter("application_name", application_name)
        _setter("bucket", bucket)
        _setter("fleet_id", fleet_id)
        _setter("host_name", host_name)
        _setter("id", id)
        _setter("managed_instance_id", managed_instance_id)
        _setter("namespace", namespace)
        _setter("object", object)
        _setter("result", result)
        _setter("time_created", time_created)
        _setter("time_finished", time_finished)
        _setter("time_started", time_started)
        _setter("warning_count", warning_count)
        _setter("work_request_id", work_request_id)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> str:
        """
        The Fleet-unique identifier of the related application.
        """
        return pulumi.get(self, "application_id")

    @property
    @pulumi.getter(name="applicationInstallationId")
    def application_installation_id(self) -> str:
        """
        The internal identifier of the application installation for which the report has been generated.
        """
        return pulumi.get(self, "application_installation_id")

    @property
    @pulumi.getter(name="applicationInstallationPath")
    def application_installation_path(self) -> str:
        """
        The installation path of the application for which the report has been generated.
        """
        return pulumi.get(self, "application_installation_path")

    @property
    @pulumi.getter(name="applicationName")
    def application_name(self) -> str:
        """
        The name of the application for which the report has been generated.
        """
        return pulumi.get(self, "application_name")

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The Object Storage bucket name of this analysis result.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="fleetId")
    def fleet_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Fleet.
        """
        return pulumi.get(self, "fleet_id")

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> str:
        """
        The hostname of the managed instance.
        """
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The OCID to identify this analysis results.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="managedInstanceId")
    def managed_instance_id(self) -> str:
        """
        The Fleet-unique identifier of the related managed instance.
        """
        return pulumi.get(self, "managed_instance_id")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        The Object Storage namespace of this analysis result.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        The Object Storage object name of this analysis result.
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def result(self) -> str:
        """
        Result of the analysis based on whether warnings have been found or not.
        """
        return pulumi.get(self, "result")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The time the result is compiled.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeFinished")
    def time_finished(self) -> str:
        """
        The time the JFR capture finished.
        """
        return pulumi.get(self, "time_finished")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> str:
        """
        The time the JFR capture started.
        """
        return pulumi.get(self, "time_started")

    @property
    @pulumi.getter(name="warningCount")
    def warning_count(self) -> int:
        """
        Total number of warnings reported by the analysis.
        """
        return pulumi.get(self, "warning_count")

    @property
    @pulumi.getter(name="workRequestId")
    def work_request_id(self) -> str:
        """
        The OCID of the work request to start the analysis.
        """
        return pulumi.get(self, "work_request_id")


@pulumi.output_type
class GetFleetsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        GetFleetsFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             values: Optional[Sequence[str]] = None,
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if name is None:
            raise TypeError("Missing 'name' argument")
        if values is None:
            raise TypeError("Missing 'values' argument")

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetFleetsFleetCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetFleetsFleetCollectionItemResult']):
        GetFleetsFleetCollectionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Optional[Sequence['outputs.GetFleetsFleetCollectionItemResult']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if items is None:
            raise TypeError("Missing 'items' argument")

        _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetFleetsFleetCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetFleetsFleetCollectionItemResult(dict):
    def __init__(__self__, *,
                 approximate_application_count: int,
                 approximate_installation_count: int,
                 approximate_java_server_count: int,
                 approximate_jre_count: int,
                 approximate_managed_instance_count: int,
                 compartment_id: str,
                 defined_tags: Mapping[str, Any],
                 description: str,
                 display_name: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 inventory_logs: Sequence['outputs.GetFleetsFleetCollectionItemInventoryLogResult'],
                 is_advanced_features_enabled: bool,
                 operation_logs: Sequence['outputs.GetFleetsFleetCollectionItemOperationLogResult'],
                 state: str,
                 system_tags: Mapping[str, Any],
                 time_created: str):
        """
        :param int approximate_application_count: The approximate count of all unique applications in the Fleet in the past seven days. This metric is provided on a best-effort manner, and isn't taken into account when computing the resource ETag.
        :param int approximate_installation_count: The approximate count of all unique Java installations in the Fleet in the past seven days. This metric is provided on a best-effort manner, and isn't taken into account when computing the resource ETag.
        :param int approximate_java_server_count: The approximate count of all unique Java servers in the Fleet in the past seven days. This metric is provided on a best-effort manner, and isn't taken into account when computing the resource ETag.
        :param int approximate_jre_count: The approximate count of all unique Java Runtimes in the Fleet in the past seven days. This metric is provided on a best-effort manner, and isn't taken into account when computing the resource ETag.
        :param int approximate_managed_instance_count: The approximate count of all unique managed instances in the Fleet in the past seven days. This metric is provided on a best-effort manner, and isn't taken into account when computing the resource ETag.
        :param str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`. (See [Understanding Free-form Tags](https://docs.cloud.oracle.com/iaas/Content/Tagging/Tasks/managingtagsandtagnamespaces.htm)).
        :param str description: The Fleet's description.
        :param str display_name: The display name.
        :param Mapping[str, Any] freeform_tags: Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`. (See [Managing Tags and Tag Namespaces](https://docs.cloud.oracle.com/iaas/Content/Tagging/Concepts/understandingfreeformtags.htm).)
        :param str id: The ID of the Fleet.
        :param Sequence['GetFleetsFleetCollectionItemInventoryLogArgs'] inventory_logs: Custom Log for inventory or operation log.
        :param bool is_advanced_features_enabled: Whether or not advanced features are enabled in this Fleet. Deprecated, use `/fleets/{fleetId}/advanceFeatureConfiguration` API instead.
        :param Sequence['GetFleetsFleetCollectionItemOperationLogArgs'] operation_logs: Custom Log for inventory or operation log.
        :param str state: The state of the lifecycle.
        :param Mapping[str, Any] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). System tags can be viewed by users, but can only be created by the system.  Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param str time_created: The creation date and time of the Fleet (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
        """
        GetFleetsFleetCollectionItemResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            approximate_application_count=approximate_application_count,
            approximate_installation_count=approximate_installation_count,
            approximate_java_server_count=approximate_java_server_count,
            approximate_jre_count=approximate_jre_count,
            approximate_managed_instance_count=approximate_managed_instance_count,
            compartment_id=compartment_id,
            defined_tags=defined_tags,
            description=description,
            display_name=display_name,
            freeform_tags=freeform_tags,
            id=id,
            inventory_logs=inventory_logs,
            is_advanced_features_enabled=is_advanced_features_enabled,
            operation_logs=operation_logs,
            state=state,
            system_tags=system_tags,
            time_created=time_created,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             approximate_application_count: Optional[int] = None,
             approximate_installation_count: Optional[int] = None,
             approximate_java_server_count: Optional[int] = None,
             approximate_jre_count: Optional[int] = None,
             approximate_managed_instance_count: Optional[int] = None,
             compartment_id: Optional[str] = None,
             defined_tags: Optional[Mapping[str, Any]] = None,
             description: Optional[str] = None,
             display_name: Optional[str] = None,
             freeform_tags: Optional[Mapping[str, Any]] = None,
             id: Optional[str] = None,
             inventory_logs: Optional[Sequence['outputs.GetFleetsFleetCollectionItemInventoryLogResult']] = None,
             is_advanced_features_enabled: Optional[bool] = None,
             operation_logs: Optional[Sequence['outputs.GetFleetsFleetCollectionItemOperationLogResult']] = None,
             state: Optional[str] = None,
             system_tags: Optional[Mapping[str, Any]] = None,
             time_created: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if approximate_application_count is None and 'approximateApplicationCount' in kwargs:
            approximate_application_count = kwargs['approximateApplicationCount']
        if approximate_application_count is None:
            raise TypeError("Missing 'approximate_application_count' argument")
        if approximate_installation_count is None and 'approximateInstallationCount' in kwargs:
            approximate_installation_count = kwargs['approximateInstallationCount']
        if approximate_installation_count is None:
            raise TypeError("Missing 'approximate_installation_count' argument")
        if approximate_java_server_count is None and 'approximateJavaServerCount' in kwargs:
            approximate_java_server_count = kwargs['approximateJavaServerCount']
        if approximate_java_server_count is None:
            raise TypeError("Missing 'approximate_java_server_count' argument")
        if approximate_jre_count is None and 'approximateJreCount' in kwargs:
            approximate_jre_count = kwargs['approximateJreCount']
        if approximate_jre_count is None:
            raise TypeError("Missing 'approximate_jre_count' argument")
        if approximate_managed_instance_count is None and 'approximateManagedInstanceCount' in kwargs:
            approximate_managed_instance_count = kwargs['approximateManagedInstanceCount']
        if approximate_managed_instance_count is None:
            raise TypeError("Missing 'approximate_managed_instance_count' argument")
        if compartment_id is None and 'compartmentId' in kwargs:
            compartment_id = kwargs['compartmentId']
        if compartment_id is None:
            raise TypeError("Missing 'compartment_id' argument")
        if defined_tags is None and 'definedTags' in kwargs:
            defined_tags = kwargs['definedTags']
        if defined_tags is None:
            raise TypeError("Missing 'defined_tags' argument")
        if description is None:
            raise TypeError("Missing 'description' argument")
        if display_name is None and 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if display_name is None:
            raise TypeError("Missing 'display_name' argument")
        if freeform_tags is None and 'freeformTags' in kwargs:
            freeform_tags = kwargs['freeformTags']
        if freeform_tags is None:
            raise TypeError("Missing 'freeform_tags' argument")
        if id is None:
            raise TypeError("Missing 'id' argument")
        if inventory_logs is None and 'inventoryLogs' in kwargs:
            inventory_logs = kwargs['inventoryLogs']
        if inventory_logs is None:
            raise TypeError("Missing 'inventory_logs' argument")
        if is_advanced_features_enabled is None and 'isAdvancedFeaturesEnabled' in kwargs:
            is_advanced_features_enabled = kwargs['isAdvancedFeaturesEnabled']
        if is_advanced_features_enabled is None:
            raise TypeError("Missing 'is_advanced_features_enabled' argument")
        if operation_logs is None and 'operationLogs' in kwargs:
            operation_logs = kwargs['operationLogs']
        if operation_logs is None:
            raise TypeError("Missing 'operation_logs' argument")
        if state is None:
            raise TypeError("Missing 'state' argument")
        if system_tags is None and 'systemTags' in kwargs:
            system_tags = kwargs['systemTags']
        if system_tags is None:
            raise TypeError("Missing 'system_tags' argument")
        if time_created is None and 'timeCreated' in kwargs:
            time_created = kwargs['timeCreated']
        if time_created is None:
            raise TypeError("Missing 'time_created' argument")

        _setter("approximate_application_count", approximate_application_count)
        _setter("approximate_installation_count", approximate_installation_count)
        _setter("approximate_java_server_count", approximate_java_server_count)
        _setter("approximate_jre_count", approximate_jre_count)
        _setter("approximate_managed_instance_count", approximate_managed_instance_count)
        _setter("compartment_id", compartment_id)
        _setter("defined_tags", defined_tags)
        _setter("description", description)
        _setter("display_name", display_name)
        _setter("freeform_tags", freeform_tags)
        _setter("id", id)
        _setter("inventory_logs", inventory_logs)
        _setter("is_advanced_features_enabled", is_advanced_features_enabled)
        _setter("operation_logs", operation_logs)
        _setter("state", state)
        _setter("system_tags", system_tags)
        _setter("time_created", time_created)

    @property
    @pulumi.getter(name="approximateApplicationCount")
    def approximate_application_count(self) -> int:
        """
        The approximate count of all unique applications in the Fleet in the past seven days. This metric is provided on a best-effort manner, and isn't taken into account when computing the resource ETag.
        """
        return pulumi.get(self, "approximate_application_count")

    @property
    @pulumi.getter(name="approximateInstallationCount")
    def approximate_installation_count(self) -> int:
        """
        The approximate count of all unique Java installations in the Fleet in the past seven days. This metric is provided on a best-effort manner, and isn't taken into account when computing the resource ETag.
        """
        return pulumi.get(self, "approximate_installation_count")

    @property
    @pulumi.getter(name="approximateJavaServerCount")
    def approximate_java_server_count(self) -> int:
        """
        The approximate count of all unique Java servers in the Fleet in the past seven days. This metric is provided on a best-effort manner, and isn't taken into account when computing the resource ETag.
        """
        return pulumi.get(self, "approximate_java_server_count")

    @property
    @pulumi.getter(name="approximateJreCount")
    def approximate_jre_count(self) -> int:
        """
        The approximate count of all unique Java Runtimes in the Fleet in the past seven days. This metric is provided on a best-effort manner, and isn't taken into account when computing the resource ETag.
        """
        return pulumi.get(self, "approximate_jre_count")

    @property
    @pulumi.getter(name="approximateManagedInstanceCount")
    def approximate_managed_instance_count(self) -> int:
        """
        The approximate count of all unique managed instances in the Fleet in the past seven days. This metric is provided on a best-effort manner, and isn't taken into account when computing the resource ETag.
        """
        return pulumi.get(self, "approximate_managed_instance_count")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`. (See [Understanding Free-form Tags](https://docs.cloud.oracle.com/iaas/Content/Tagging/Tasks/managingtagsandtagnamespaces.htm)).
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The Fleet's description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The display name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`. (See [Managing Tags and Tag Namespaces](https://docs.cloud.oracle.com/iaas/Content/Tagging/Concepts/understandingfreeformtags.htm).)
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the Fleet.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inventoryLogs")
    def inventory_logs(self) -> Sequence['outputs.GetFleetsFleetCollectionItemInventoryLogResult']:
        """
        Custom Log for inventory or operation log.
        """
        return pulumi.get(self, "inventory_logs")

    @property
    @pulumi.getter(name="isAdvancedFeaturesEnabled")
    def is_advanced_features_enabled(self) -> bool:
        """
        Whether or not advanced features are enabled in this Fleet. Deprecated, use `/fleets/{fleetId}/advanceFeatureConfiguration` API instead.
        """
        return pulumi.get(self, "is_advanced_features_enabled")

    @property
    @pulumi.getter(name="operationLogs")
    def operation_logs(self) -> Sequence['outputs.GetFleetsFleetCollectionItemOperationLogResult']:
        """
        Custom Log for inventory or operation log.
        """
        return pulumi.get(self, "operation_logs")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the lifecycle.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, Any]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). System tags can be viewed by users, but can only be created by the system.  Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The creation date and time of the Fleet (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
        """
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetFleetsFleetCollectionItemInventoryLogResult(dict):
    def __init__(__self__, *,
                 log_group_id: str,
                 log_id: str):
        """
        :param str log_group_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log group.
        :param str log_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log.
        """
        GetFleetsFleetCollectionItemInventoryLogResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            log_group_id=log_group_id,
            log_id=log_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             log_group_id: Optional[str] = None,
             log_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if log_group_id is None and 'logGroupId' in kwargs:
            log_group_id = kwargs['logGroupId']
        if log_group_id is None:
            raise TypeError("Missing 'log_group_id' argument")
        if log_id is None and 'logId' in kwargs:
            log_id = kwargs['logId']
        if log_id is None:
            raise TypeError("Missing 'log_id' argument")

        _setter("log_group_id", log_group_id)
        _setter("log_id", log_id)

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log group.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetFleetsFleetCollectionItemOperationLogResult(dict):
    def __init__(__self__, *,
                 log_group_id: str,
                 log_id: str):
        """
        :param str log_group_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log group.
        :param str log_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log.
        """
        GetFleetsFleetCollectionItemOperationLogResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            log_group_id=log_group_id,
            log_id=log_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             log_group_id: Optional[str] = None,
             log_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if log_group_id is None and 'logGroupId' in kwargs:
            log_group_id = kwargs['logGroupId']
        if log_group_id is None:
            raise TypeError("Missing 'log_group_id' argument")
        if log_id is None and 'logId' in kwargs:
            log_id = kwargs['logId']
        if log_id is None:
            raise TypeError("Missing 'log_id' argument")

        _setter("log_group_id", log_group_id)
        _setter("log_id", log_id)

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log group.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetInstallationSiteItemResult(dict):
    def __init__(__self__, *,
                 approximate_application_count: int,
                 blocklists: Sequence['outputs.GetInstallationSiteItemBlocklistResult'],
                 installation_key: str,
                 jres: Sequence['outputs.GetInstallationSiteItemJreResult'],
                 managed_instance_id: str,
                 operating_systems: Sequence['outputs.GetInstallationSiteItemOperatingSystemResult'],
                 path: str,
                 security_status: str,
                 state: str,
                 time_last_seen: str):
        """
        :param int approximate_application_count: The approximate count of applications running on this installation
        :param Sequence['GetInstallationSiteItemBlocklistArgs'] blocklists: The list of operations that are blocklisted.
        :param str installation_key: The unique identifier for the installation of Java Runtime at a specific path on a specific operating system.
        :param Sequence['GetInstallationSiteItemJreArgs'] jres: The essential properties to identify a Java Runtime.
        :param str managed_instance_id: The Fleet-unique identifier of the related managed instance.
        :param Sequence['GetInstallationSiteItemOperatingSystemArgs'] operating_systems: Operating System of the platform on which the Java Runtime was reported.
        :param str path: The file system path of the installation.
        :param str security_status: The security status of the Java Runtime.
        :param str state: The lifecycle state of the installation site.
        :param str time_last_seen: The date and time the resource was _last_ reported to JMS. This is potentially _after_ the specified time period provided by the filters. For example, a resource can be last reported to JMS before the start of a specified time period, if it is also reported during the time period.
        """
        GetInstallationSiteItemResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            approximate_application_count=approximate_application_count,
            blocklists=blocklists,
            installation_key=installation_key,
            jres=jres,
            managed_instance_id=managed_instance_id,
            operating_systems=operating_systems,
            path=path,
            security_status=security_status,
            state=state,
            time_last_seen=time_last_seen,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             approximate_application_count: Optional[int] = None,
             blocklists: Optional[Sequence['outputs.GetInstallationSiteItemBlocklistResult']] = None,
             installation_key: Optional[str] = None,
             jres: Optional[Sequence['outputs.GetInstallationSiteItemJreResult']] = None,
             managed_instance_id: Optional[str] = None,
             operating_systems: Optional[Sequence['outputs.GetInstallationSiteItemOperatingSystemResult']] = None,
             path: Optional[str] = None,
             security_status: Optional[str] = None,
             state: Optional[str] = None,
             time_last_seen: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if approximate_application_count is None and 'approximateApplicationCount' in kwargs:
            approximate_application_count = kwargs['approximateApplicationCount']
        if approximate_application_count is None:
            raise TypeError("Missing 'approximate_application_count' argument")
        if blocklists is None:
            raise TypeError("Missing 'blocklists' argument")
        if installation_key is None and 'installationKey' in kwargs:
            installation_key = kwargs['installationKey']
        if installation_key is None:
            raise TypeError("Missing 'installation_key' argument")
        if jres is None:
            raise TypeError("Missing 'jres' argument")
        if managed_instance_id is None and 'managedInstanceId' in kwargs:
            managed_instance_id = kwargs['managedInstanceId']
        if managed_instance_id is None:
            raise TypeError("Missing 'managed_instance_id' argument")
        if operating_systems is None and 'operatingSystems' in kwargs:
            operating_systems = kwargs['operatingSystems']
        if operating_systems is None:
            raise TypeError("Missing 'operating_systems' argument")
        if path is None:
            raise TypeError("Missing 'path' argument")
        if security_status is None and 'securityStatus' in kwargs:
            security_status = kwargs['securityStatus']
        if security_status is None:
            raise TypeError("Missing 'security_status' argument")
        if state is None:
            raise TypeError("Missing 'state' argument")
        if time_last_seen is None and 'timeLastSeen' in kwargs:
            time_last_seen = kwargs['timeLastSeen']
        if time_last_seen is None:
            raise TypeError("Missing 'time_last_seen' argument")

        _setter("approximate_application_count", approximate_application_count)
        _setter("blocklists", blocklists)
        _setter("installation_key", installation_key)
        _setter("jres", jres)
        _setter("managed_instance_id", managed_instance_id)
        _setter("operating_systems", operating_systems)
        _setter("path", path)
        _setter("security_status", security_status)
        _setter("state", state)
        _setter("time_last_seen", time_last_seen)

    @property
    @pulumi.getter(name="approximateApplicationCount")
    def approximate_application_count(self) -> int:
        """
        The approximate count of applications running on this installation
        """
        return pulumi.get(self, "approximate_application_count")

    @property
    @pulumi.getter
    def blocklists(self) -> Sequence['outputs.GetInstallationSiteItemBlocklistResult']:
        """
        The list of operations that are blocklisted.
        """
        return pulumi.get(self, "blocklists")

    @property
    @pulumi.getter(name="installationKey")
    def installation_key(self) -> str:
        """
        The unique identifier for the installation of Java Runtime at a specific path on a specific operating system.
        """
        return pulumi.get(self, "installation_key")

    @property
    @pulumi.getter
    def jres(self) -> Sequence['outputs.GetInstallationSiteItemJreResult']:
        """
        The essential properties to identify a Java Runtime.
        """
        return pulumi.get(self, "jres")

    @property
    @pulumi.getter(name="managedInstanceId")
    def managed_instance_id(self) -> str:
        """
        The Fleet-unique identifier of the related managed instance.
        """
        return pulumi.get(self, "managed_instance_id")

    @property
    @pulumi.getter(name="operatingSystems")
    def operating_systems(self) -> Sequence['outputs.GetInstallationSiteItemOperatingSystemResult']:
        """
        Operating System of the platform on which the Java Runtime was reported.
        """
        return pulumi.get(self, "operating_systems")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        The file system path of the installation.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="securityStatus")
    def security_status(self) -> str:
        """
        The security status of the Java Runtime.
        """
        return pulumi.get(self, "security_status")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The lifecycle state of the installation site.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeLastSeen")
    def time_last_seen(self) -> str:
        """
        The date and time the resource was _last_ reported to JMS. This is potentially _after_ the specified time period provided by the filters. For example, a resource can be last reported to JMS before the start of a specified time period, if it is also reported during the time period.
        """
        return pulumi.get(self, "time_last_seen")


@pulumi.output_type
class GetInstallationSiteItemBlocklistResult(dict):
    def __init__(__self__, *,
                 operation: str,
                 reason: str):
        """
        :param str operation: The operation type.
        :param str reason: The reason why the operation is blocklisted.
        """
        GetInstallationSiteItemBlocklistResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operation=operation,
            reason=reason,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operation: Optional[str] = None,
             reason: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if operation is None:
            raise TypeError("Missing 'operation' argument")
        if reason is None:
            raise TypeError("Missing 'reason' argument")

        _setter("operation", operation)
        _setter("reason", reason)

    @property
    @pulumi.getter
    def operation(self) -> str:
        """
        The operation type.
        """
        return pulumi.get(self, "operation")

    @property
    @pulumi.getter
    def reason(self) -> str:
        """
        The reason why the operation is blocklisted.
        """
        return pulumi.get(self, "reason")


@pulumi.output_type
class GetInstallationSiteItemJreResult(dict):
    def __init__(__self__, *,
                 distribution: str,
                 jre_key: str,
                 vendor: str,
                 version: str):
        """
        :param str distribution: The distribution of a Java Runtime is the name of the lineage of product to which it belongs, for example _Java(TM) SE Runtime Environment_.
        :param str jre_key: The unique identifier for a Java Runtime.
        :param str vendor: The vendor of the Java Runtime.
        :param str version: The version of the operating system as provided by the Java system property os.version.
        """
        GetInstallationSiteItemJreResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            distribution=distribution,
            jre_key=jre_key,
            vendor=vendor,
            version=version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             distribution: Optional[str] = None,
             jre_key: Optional[str] = None,
             vendor: Optional[str] = None,
             version: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if distribution is None:
            raise TypeError("Missing 'distribution' argument")
        if jre_key is None and 'jreKey' in kwargs:
            jre_key = kwargs['jreKey']
        if jre_key is None:
            raise TypeError("Missing 'jre_key' argument")
        if vendor is None:
            raise TypeError("Missing 'vendor' argument")
        if version is None:
            raise TypeError("Missing 'version' argument")

        _setter("distribution", distribution)
        _setter("jre_key", jre_key)
        _setter("vendor", vendor)
        _setter("version", version)

    @property
    @pulumi.getter
    def distribution(self) -> str:
        """
        The distribution of a Java Runtime is the name of the lineage of product to which it belongs, for example _Java(TM) SE Runtime Environment_.
        """
        return pulumi.get(self, "distribution")

    @property
    @pulumi.getter(name="jreKey")
    def jre_key(self) -> str:
        """
        The unique identifier for a Java Runtime.
        """
        return pulumi.get(self, "jre_key")

    @property
    @pulumi.getter
    def vendor(self) -> str:
        """
        The vendor of the Java Runtime.
        """
        return pulumi.get(self, "vendor")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the operating system as provided by the Java system property os.version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetInstallationSiteItemOperatingSystemResult(dict):
    def __init__(__self__, *,
                 architecture: str,
                 family: str,
                 managed_instance_count: int,
                 name: str,
                 version: str):
        """
        :param str architecture: The architecture of the operating system as provided by the Java system property os.arch.
        :param str family: The operating system type, such as Windows or Linux
        :param int managed_instance_count: Number of instances running the operating system
        :param str name: The name of the operating system as provided by the Java system property os.name.
        :param str version: The version of the operating system as provided by the Java system property os.version.
        """
        GetInstallationSiteItemOperatingSystemResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            architecture=architecture,
            family=family,
            managed_instance_count=managed_instance_count,
            name=name,
            version=version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             architecture: Optional[str] = None,
             family: Optional[str] = None,
             managed_instance_count: Optional[int] = None,
             name: Optional[str] = None,
             version: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if architecture is None:
            raise TypeError("Missing 'architecture' argument")
        if family is None:
            raise TypeError("Missing 'family' argument")
        if managed_instance_count is None and 'managedInstanceCount' in kwargs:
            managed_instance_count = kwargs['managedInstanceCount']
        if managed_instance_count is None:
            raise TypeError("Missing 'managed_instance_count' argument")
        if name is None:
            raise TypeError("Missing 'name' argument")
        if version is None:
            raise TypeError("Missing 'version' argument")

        _setter("architecture", architecture)
        _setter("family", family)
        _setter("managed_instance_count", managed_instance_count)
        _setter("name", name)
        _setter("version", version)

    @property
    @pulumi.getter
    def architecture(self) -> str:
        """
        The architecture of the operating system as provided by the Java system property os.arch.
        """
        return pulumi.get(self, "architecture")

    @property
    @pulumi.getter
    def family(self) -> str:
        """
        The operating system type, such as Windows or Linux
        """
        return pulumi.get(self, "family")

    @property
    @pulumi.getter(name="managedInstanceCount")
    def managed_instance_count(self) -> int:
        """
        Number of instances running the operating system
        """
        return pulumi.get(self, "managed_instance_count")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the operating system as provided by the Java system property os.name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the operating system as provided by the Java system property os.version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetInstallationSitesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: The name of the operating system as provided by the Java system property os.name.
        """
        GetInstallationSitesFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             values: Optional[Sequence[str]] = None,
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if name is None:
            raise TypeError("Missing 'name' argument")
        if values is None:
            raise TypeError("Missing 'values' argument")

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the operating system as provided by the Java system property os.name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetInstallationSitesInstallationSiteCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetInstallationSitesInstallationSiteCollectionItemResult']):
        """
        :param Sequence['GetInstallationSitesInstallationSiteCollectionItemArgs'] items: A list of Java installation sites.
        """
        GetInstallationSitesInstallationSiteCollectionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Optional[Sequence['outputs.GetInstallationSitesInstallationSiteCollectionItemResult']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if items is None:
            raise TypeError("Missing 'items' argument")

        _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetInstallationSitesInstallationSiteCollectionItemResult']:
        """
        A list of Java installation sites.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetInstallationSitesInstallationSiteCollectionItemResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetInstallationSitesInstallationSiteCollectionItemItemResult']):
        """
        :param Sequence['GetInstallationSitesInstallationSiteCollectionItemItemArgs'] items: A list of Java installation sites.
        """
        GetInstallationSitesInstallationSiteCollectionItemResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Optional[Sequence['outputs.GetInstallationSitesInstallationSiteCollectionItemItemResult']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if items is None:
            raise TypeError("Missing 'items' argument")

        _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetInstallationSitesInstallationSiteCollectionItemItemResult']:
        """
        A list of Java installation sites.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetInstallationSitesInstallationSiteCollectionItemItemResult(dict):
    def __init__(__self__, *,
                 approximate_application_count: int,
                 blocklists: Sequence['outputs.GetInstallationSitesInstallationSiteCollectionItemItemBlocklistResult'],
                 installation_key: str,
                 jres: Sequence['outputs.GetInstallationSitesInstallationSiteCollectionItemItemJreResult'],
                 managed_instance_id: str,
                 operating_systems: Sequence['outputs.GetInstallationSitesInstallationSiteCollectionItemItemOperatingSystemResult'],
                 path: str,
                 security_status: str,
                 state: str,
                 time_last_seen: str):
        """
        :param int approximate_application_count: The approximate count of applications running on this installation
        :param Sequence['GetInstallationSitesInstallationSiteCollectionItemItemBlocklistArgs'] blocklists: The list of operations that are blocklisted.
        :param str installation_key: The unique identifier for the installation of Java Runtime at a specific path on a specific operating system.
        :param Sequence['GetInstallationSitesInstallationSiteCollectionItemItemJreArgs'] jres: The essential properties to identify a Java Runtime.
        :param str managed_instance_id: The Fleet-unique identifier of the related managed instance.
        :param Sequence['GetInstallationSitesInstallationSiteCollectionItemItemOperatingSystemArgs'] operating_systems: Operating System of the platform on which the Java Runtime was reported.
        :param str path: The file system path of the installation.
        :param str security_status: The security status of the Java Runtime.
        :param str state: The lifecycle state of the installation site.
        :param str time_last_seen: The date and time the resource was _last_ reported to JMS. This is potentially _after_ the specified time period provided by the filters. For example, a resource can be last reported to JMS before the start of a specified time period, if it is also reported during the time period.
        """
        GetInstallationSitesInstallationSiteCollectionItemItemResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            approximate_application_count=approximate_application_count,
            blocklists=blocklists,
            installation_key=installation_key,
            jres=jres,
            managed_instance_id=managed_instance_id,
            operating_systems=operating_systems,
            path=path,
            security_status=security_status,
            state=state,
            time_last_seen=time_last_seen,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             approximate_application_count: Optional[int] = None,
             blocklists: Optional[Sequence['outputs.GetInstallationSitesInstallationSiteCollectionItemItemBlocklistResult']] = None,
             installation_key: Optional[str] = None,
             jres: Optional[Sequence['outputs.GetInstallationSitesInstallationSiteCollectionItemItemJreResult']] = None,
             managed_instance_id: Optional[str] = None,
             operating_systems: Optional[Sequence['outputs.GetInstallationSitesInstallationSiteCollectionItemItemOperatingSystemResult']] = None,
             path: Optional[str] = None,
             security_status: Optional[str] = None,
             state: Optional[str] = None,
             time_last_seen: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if approximate_application_count is None and 'approximateApplicationCount' in kwargs:
            approximate_application_count = kwargs['approximateApplicationCount']
        if approximate_application_count is None:
            raise TypeError("Missing 'approximate_application_count' argument")
        if blocklists is None:
            raise TypeError("Missing 'blocklists' argument")
        if installation_key is None and 'installationKey' in kwargs:
            installation_key = kwargs['installationKey']
        if installation_key is None:
            raise TypeError("Missing 'installation_key' argument")
        if jres is None:
            raise TypeError("Missing 'jres' argument")
        if managed_instance_id is None and 'managedInstanceId' in kwargs:
            managed_instance_id = kwargs['managedInstanceId']
        if managed_instance_id is None:
            raise TypeError("Missing 'managed_instance_id' argument")
        if operating_systems is None and 'operatingSystems' in kwargs:
            operating_systems = kwargs['operatingSystems']
        if operating_systems is None:
            raise TypeError("Missing 'operating_systems' argument")
        if path is None:
            raise TypeError("Missing 'path' argument")
        if security_status is None and 'securityStatus' in kwargs:
            security_status = kwargs['securityStatus']
        if security_status is None:
            raise TypeError("Missing 'security_status' argument")
        if state is None:
            raise TypeError("Missing 'state' argument")
        if time_last_seen is None and 'timeLastSeen' in kwargs:
            time_last_seen = kwargs['timeLastSeen']
        if time_last_seen is None:
            raise TypeError("Missing 'time_last_seen' argument")

        _setter("approximate_application_count", approximate_application_count)
        _setter("blocklists", blocklists)
        _setter("installation_key", installation_key)
        _setter("jres", jres)
        _setter("managed_instance_id", managed_instance_id)
        _setter("operating_systems", operating_systems)
        _setter("path", path)
        _setter("security_status", security_status)
        _setter("state", state)
        _setter("time_last_seen", time_last_seen)

    @property
    @pulumi.getter(name="approximateApplicationCount")
    def approximate_application_count(self) -> int:
        """
        The approximate count of applications running on this installation
        """
        return pulumi.get(self, "approximate_application_count")

    @property
    @pulumi.getter
    def blocklists(self) -> Sequence['outputs.GetInstallationSitesInstallationSiteCollectionItemItemBlocklistResult']:
        """
        The list of operations that are blocklisted.
        """
        return pulumi.get(self, "blocklists")

    @property
    @pulumi.getter(name="installationKey")
    def installation_key(self) -> str:
        """
        The unique identifier for the installation of Java Runtime at a specific path on a specific operating system.
        """
        return pulumi.get(self, "installation_key")

    @property
    @pulumi.getter
    def jres(self) -> Sequence['outputs.GetInstallationSitesInstallationSiteCollectionItemItemJreResult']:
        """
        The essential properties to identify a Java Runtime.
        """
        return pulumi.get(self, "jres")

    @property
    @pulumi.getter(name="managedInstanceId")
    def managed_instance_id(self) -> str:
        """
        The Fleet-unique identifier of the related managed instance.
        """
        return pulumi.get(self, "managed_instance_id")

    @property
    @pulumi.getter(name="operatingSystems")
    def operating_systems(self) -> Sequence['outputs.GetInstallationSitesInstallationSiteCollectionItemItemOperatingSystemResult']:
        """
        Operating System of the platform on which the Java Runtime was reported.
        """
        return pulumi.get(self, "operating_systems")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        The file system path of the installation.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="securityStatus")
    def security_status(self) -> str:
        """
        The security status of the Java Runtime.
        """
        return pulumi.get(self, "security_status")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The lifecycle state of the installation site.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeLastSeen")
    def time_last_seen(self) -> str:
        """
        The date and time the resource was _last_ reported to JMS. This is potentially _after_ the specified time period provided by the filters. For example, a resource can be last reported to JMS before the start of a specified time period, if it is also reported during the time period.
        """
        return pulumi.get(self, "time_last_seen")


@pulumi.output_type
class GetInstallationSitesInstallationSiteCollectionItemItemBlocklistResult(dict):
    def __init__(__self__, *,
                 operation: str,
                 reason: str):
        """
        :param str operation: The operation type.
        :param str reason: The reason why the operation is blocklisted.
        """
        GetInstallationSitesInstallationSiteCollectionItemItemBlocklistResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operation=operation,
            reason=reason,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operation: Optional[str] = None,
             reason: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if operation is None:
            raise TypeError("Missing 'operation' argument")
        if reason is None:
            raise TypeError("Missing 'reason' argument")

        _setter("operation", operation)
        _setter("reason", reason)

    @property
    @pulumi.getter
    def operation(self) -> str:
        """
        The operation type.
        """
        return pulumi.get(self, "operation")

    @property
    @pulumi.getter
    def reason(self) -> str:
        """
        The reason why the operation is blocklisted.
        """
        return pulumi.get(self, "reason")


@pulumi.output_type
class GetInstallationSitesInstallationSiteCollectionItemItemJreResult(dict):
    def __init__(__self__, *,
                 distribution: str,
                 jre_key: str,
                 vendor: str,
                 version: str):
        """
        :param str distribution: The distribution of a Java Runtime is the name of the lineage of product to which it belongs, for example _Java(TM) SE Runtime Environment_.
        :param str jre_key: The unique identifier for a Java Runtime.
        :param str vendor: The vendor of the Java Runtime.
        :param str version: The version of the operating system as provided by the Java system property os.version.
        """
        GetInstallationSitesInstallationSiteCollectionItemItemJreResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            distribution=distribution,
            jre_key=jre_key,
            vendor=vendor,
            version=version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             distribution: Optional[str] = None,
             jre_key: Optional[str] = None,
             vendor: Optional[str] = None,
             version: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if distribution is None:
            raise TypeError("Missing 'distribution' argument")
        if jre_key is None and 'jreKey' in kwargs:
            jre_key = kwargs['jreKey']
        if jre_key is None:
            raise TypeError("Missing 'jre_key' argument")
        if vendor is None:
            raise TypeError("Missing 'vendor' argument")
        if version is None:
            raise TypeError("Missing 'version' argument")

        _setter("distribution", distribution)
        _setter("jre_key", jre_key)
        _setter("vendor", vendor)
        _setter("version", version)

    @property
    @pulumi.getter
    def distribution(self) -> str:
        """
        The distribution of a Java Runtime is the name of the lineage of product to which it belongs, for example _Java(TM) SE Runtime Environment_.
        """
        return pulumi.get(self, "distribution")

    @property
    @pulumi.getter(name="jreKey")
    def jre_key(self) -> str:
        """
        The unique identifier for a Java Runtime.
        """
        return pulumi.get(self, "jre_key")

    @property
    @pulumi.getter
    def vendor(self) -> str:
        """
        The vendor of the Java Runtime.
        """
        return pulumi.get(self, "vendor")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the operating system as provided by the Java system property os.version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetInstallationSitesInstallationSiteCollectionItemItemOperatingSystemResult(dict):
    def __init__(__self__, *,
                 architecture: str,
                 family: str,
                 managed_instance_count: int,
                 name: str,
                 version: str):
        """
        :param str architecture: The architecture of the operating system as provided by the Java system property os.arch.
        :param str family: The operating system type, such as Windows or Linux
        :param int managed_instance_count: Number of instances running the operating system.
        :param str name: The name of the operating system as provided by the Java system property os.name.
        :param str version: The version of the operating system as provided by the Java system property os.version.
        """
        GetInstallationSitesInstallationSiteCollectionItemItemOperatingSystemResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            architecture=architecture,
            family=family,
            managed_instance_count=managed_instance_count,
            name=name,
            version=version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             architecture: Optional[str] = None,
             family: Optional[str] = None,
             managed_instance_count: Optional[int] = None,
             name: Optional[str] = None,
             version: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if architecture is None:
            raise TypeError("Missing 'architecture' argument")
        if family is None:
            raise TypeError("Missing 'family' argument")
        if managed_instance_count is None and 'managedInstanceCount' in kwargs:
            managed_instance_count = kwargs['managedInstanceCount']
        if managed_instance_count is None:
            raise TypeError("Missing 'managed_instance_count' argument")
        if name is None:
            raise TypeError("Missing 'name' argument")
        if version is None:
            raise TypeError("Missing 'version' argument")

        _setter("architecture", architecture)
        _setter("family", family)
        _setter("managed_instance_count", managed_instance_count)
        _setter("name", name)
        _setter("version", version)

    @property
    @pulumi.getter
    def architecture(self) -> str:
        """
        The architecture of the operating system as provided by the Java system property os.arch.
        """
        return pulumi.get(self, "architecture")

    @property
    @pulumi.getter
    def family(self) -> str:
        """
        The operating system type, such as Windows or Linux
        """
        return pulumi.get(self, "family")

    @property
    @pulumi.getter(name="managedInstanceCount")
    def managed_instance_count(self) -> int:
        """
        Number of instances running the operating system.
        """
        return pulumi.get(self, "managed_instance_count")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the operating system as provided by the Java system property os.name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the operating system as provided by the Java system property os.version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetJavaFamiliesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        GetJavaFamiliesFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             values: Optional[Sequence[str]] = None,
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if name is None:
            raise TypeError("Missing 'name' argument")
        if values is None:
            raise TypeError("Missing 'values' argument")

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetJavaFamiliesJavaFamilyCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetJavaFamiliesJavaFamilyCollectionItemResult']):
        GetJavaFamiliesJavaFamilyCollectionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Optional[Sequence['outputs.GetJavaFamiliesJavaFamilyCollectionItemResult']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if items is None:
            raise TypeError("Missing 'items' argument")

        _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetJavaFamiliesJavaFamilyCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetJavaFamiliesJavaFamilyCollectionItemResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 doc_url: str,
                 end_of_support_life_date: str,
                 family_version: str,
                 support_type: str):
        """
        :param str display_name: The display name for the Java family.
        :param str doc_url: Link to access the documentation for the release.
        :param str end_of_support_life_date: The End of Support Life (EOSL) date of the Java release family (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
        :param str family_version: The version identifier for the Java family.
        :param str support_type: This indicates the support category for the Java release family.
        """
        GetJavaFamiliesJavaFamilyCollectionItemResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            display_name=display_name,
            doc_url=doc_url,
            end_of_support_life_date=end_of_support_life_date,
            family_version=family_version,
            support_type=support_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             display_name: Optional[str] = None,
             doc_url: Optional[str] = None,
             end_of_support_life_date: Optional[str] = None,
             family_version: Optional[str] = None,
             support_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if display_name is None and 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if display_name is None:
            raise TypeError("Missing 'display_name' argument")
        if doc_url is None and 'docUrl' in kwargs:
            doc_url = kwargs['docUrl']
        if doc_url is None:
            raise TypeError("Missing 'doc_url' argument")
        if end_of_support_life_date is None and 'endOfSupportLifeDate' in kwargs:
            end_of_support_life_date = kwargs['endOfSupportLifeDate']
        if end_of_support_life_date is None:
            raise TypeError("Missing 'end_of_support_life_date' argument")
        if family_version is None and 'familyVersion' in kwargs:
            family_version = kwargs['familyVersion']
        if family_version is None:
            raise TypeError("Missing 'family_version' argument")
        if support_type is None and 'supportType' in kwargs:
            support_type = kwargs['supportType']
        if support_type is None:
            raise TypeError("Missing 'support_type' argument")

        _setter("display_name", display_name)
        _setter("doc_url", doc_url)
        _setter("end_of_support_life_date", end_of_support_life_date)
        _setter("family_version", family_version)
        _setter("support_type", support_type)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The display name for the Java family.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="docUrl")
    def doc_url(self) -> str:
        """
        Link to access the documentation for the release.
        """
        return pulumi.get(self, "doc_url")

    @property
    @pulumi.getter(name="endOfSupportLifeDate")
    def end_of_support_life_date(self) -> str:
        """
        The End of Support Life (EOSL) date of the Java release family (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
        """
        return pulumi.get(self, "end_of_support_life_date")

    @property
    @pulumi.getter(name="familyVersion")
    def family_version(self) -> str:
        """
        The version identifier for the Java family.
        """
        return pulumi.get(self, "family_version")

    @property
    @pulumi.getter(name="supportType")
    def support_type(self) -> str:
        """
        This indicates the support category for the Java release family.
        """
        return pulumi.get(self, "support_type")


@pulumi.output_type
class GetJavaReleaseArtifactResult(dict):
    def __init__(__self__, *,
                 approximate_file_size_in_bytes: str,
                 artifact_content_type: str,
                 artifact_description: str,
                 artifact_id: str,
                 sha256: str):
        """
        :param str approximate_file_size_in_bytes: Approximate compressed file size in bytes.
        :param str artifact_content_type: Product content type of this artifact.
        :param str artifact_description: Description of the binary artifact. Typically includes the OS, architecture, and installer type.
        :param str artifact_id: Unique identifier for the artifact.
        :param str sha256: SHA256 checksum of the artifact.
        """
        GetJavaReleaseArtifactResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            approximate_file_size_in_bytes=approximate_file_size_in_bytes,
            artifact_content_type=artifact_content_type,
            artifact_description=artifact_description,
            artifact_id=artifact_id,
            sha256=sha256,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             approximate_file_size_in_bytes: Optional[str] = None,
             artifact_content_type: Optional[str] = None,
             artifact_description: Optional[str] = None,
             artifact_id: Optional[str] = None,
             sha256: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if approximate_file_size_in_bytes is None and 'approximateFileSizeInBytes' in kwargs:
            approximate_file_size_in_bytes = kwargs['approximateFileSizeInBytes']
        if approximate_file_size_in_bytes is None:
            raise TypeError("Missing 'approximate_file_size_in_bytes' argument")
        if artifact_content_type is None and 'artifactContentType' in kwargs:
            artifact_content_type = kwargs['artifactContentType']
        if artifact_content_type is None:
            raise TypeError("Missing 'artifact_content_type' argument")
        if artifact_description is None and 'artifactDescription' in kwargs:
            artifact_description = kwargs['artifactDescription']
        if artifact_description is None:
            raise TypeError("Missing 'artifact_description' argument")
        if artifact_id is None and 'artifactId' in kwargs:
            artifact_id = kwargs['artifactId']
        if artifact_id is None:
            raise TypeError("Missing 'artifact_id' argument")
        if sha256 is None:
            raise TypeError("Missing 'sha256' argument")

        _setter("approximate_file_size_in_bytes", approximate_file_size_in_bytes)
        _setter("artifact_content_type", artifact_content_type)
        _setter("artifact_description", artifact_description)
        _setter("artifact_id", artifact_id)
        _setter("sha256", sha256)

    @property
    @pulumi.getter(name="approximateFileSizeInBytes")
    def approximate_file_size_in_bytes(self) -> str:
        """
        Approximate compressed file size in bytes.
        """
        return pulumi.get(self, "approximate_file_size_in_bytes")

    @property
    @pulumi.getter(name="artifactContentType")
    def artifact_content_type(self) -> str:
        """
        Product content type of this artifact.
        """
        return pulumi.get(self, "artifact_content_type")

    @property
    @pulumi.getter(name="artifactDescription")
    def artifact_description(self) -> str:
        """
        Description of the binary artifact. Typically includes the OS, architecture, and installer type.
        """
        return pulumi.get(self, "artifact_description")

    @property
    @pulumi.getter(name="artifactId")
    def artifact_id(self) -> str:
        """
        Unique identifier for the artifact.
        """
        return pulumi.get(self, "artifact_id")

    @property
    @pulumi.getter
    def sha256(self) -> str:
        """
        SHA256 checksum of the artifact.
        """
        return pulumi.get(self, "sha256")


@pulumi.output_type
class GetJavaReleaseFamilyDetailResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 doc_url: str,
                 end_of_support_life_date: str,
                 family_version: str,
                 support_type: str):
        """
        :param str display_name: Commonly used name for the license type.
        :param str doc_url: Link to access the documentation for the release.
        :param str end_of_support_life_date: The End of Support Life (EOSL) date of the Java release family (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
        :param str family_version: Java release family identifier.
        :param str support_type: This indicates the support category for the Java release family.
        """
        GetJavaReleaseFamilyDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            display_name=display_name,
            doc_url=doc_url,
            end_of_support_life_date=end_of_support_life_date,
            family_version=family_version,
            support_type=support_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             display_name: Optional[str] = None,
             doc_url: Optional[str] = None,
             end_of_support_life_date: Optional[str] = None,
             family_version: Optional[str] = None,
             support_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if display_name is None and 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if display_name is None:
            raise TypeError("Missing 'display_name' argument")
        if doc_url is None and 'docUrl' in kwargs:
            doc_url = kwargs['docUrl']
        if doc_url is None:
            raise TypeError("Missing 'doc_url' argument")
        if end_of_support_life_date is None and 'endOfSupportLifeDate' in kwargs:
            end_of_support_life_date = kwargs['endOfSupportLifeDate']
        if end_of_support_life_date is None:
            raise TypeError("Missing 'end_of_support_life_date' argument")
        if family_version is None and 'familyVersion' in kwargs:
            family_version = kwargs['familyVersion']
        if family_version is None:
            raise TypeError("Missing 'family_version' argument")
        if support_type is None and 'supportType' in kwargs:
            support_type = kwargs['supportType']
        if support_type is None:
            raise TypeError("Missing 'support_type' argument")

        _setter("display_name", display_name)
        _setter("doc_url", doc_url)
        _setter("end_of_support_life_date", end_of_support_life_date)
        _setter("family_version", family_version)
        _setter("support_type", support_type)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Commonly used name for the license type.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="docUrl")
    def doc_url(self) -> str:
        """
        Link to access the documentation for the release.
        """
        return pulumi.get(self, "doc_url")

    @property
    @pulumi.getter(name="endOfSupportLifeDate")
    def end_of_support_life_date(self) -> str:
        """
        The End of Support Life (EOSL) date of the Java release family (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
        """
        return pulumi.get(self, "end_of_support_life_date")

    @property
    @pulumi.getter(name="familyVersion")
    def family_version(self) -> str:
        """
        Java release family identifier.
        """
        return pulumi.get(self, "family_version")

    @property
    @pulumi.getter(name="supportType")
    def support_type(self) -> str:
        """
        This indicates the support category for the Java release family.
        """
        return pulumi.get(self, "support_type")


@pulumi.output_type
class GetJavaReleaseLicenseDetailResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 license_type: str,
                 license_url: str):
        """
        :param str display_name: Commonly used name for the license type.
        :param str license_type: License type for the Java version.
        :param str license_url: Publicly accessible license URL containing the detailed terms and conditions.
        """
        GetJavaReleaseLicenseDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            display_name=display_name,
            license_type=license_type,
            license_url=license_url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             display_name: Optional[str] = None,
             license_type: Optional[str] = None,
             license_url: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if display_name is None and 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if display_name is None:
            raise TypeError("Missing 'display_name' argument")
        if license_type is None and 'licenseType' in kwargs:
            license_type = kwargs['licenseType']
        if license_type is None:
            raise TypeError("Missing 'license_type' argument")
        if license_url is None and 'licenseUrl' in kwargs:
            license_url = kwargs['licenseUrl']
        if license_url is None:
            raise TypeError("Missing 'license_url' argument")

        _setter("display_name", display_name)
        _setter("license_type", license_type)
        _setter("license_url", license_url)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Commonly used name for the license type.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> str:
        """
        License type for the Java version.
        """
        return pulumi.get(self, "license_type")

    @property
    @pulumi.getter(name="licenseUrl")
    def license_url(self) -> str:
        """
        Publicly accessible license URL containing the detailed terms and conditions.
        """
        return pulumi.get(self, "license_url")


@pulumi.output_type
class GetJavaReleasesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        GetJavaReleasesFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             values: Optional[Sequence[str]] = None,
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if name is None:
            raise TypeError("Missing 'name' argument")
        if values is None:
            raise TypeError("Missing 'values' argument")

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetJavaReleasesJavaReleaseCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetJavaReleasesJavaReleaseCollectionItemResult']):
        GetJavaReleasesJavaReleaseCollectionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Optional[Sequence['outputs.GetJavaReleasesJavaReleaseCollectionItemResult']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if items is None:
            raise TypeError("Missing 'items' argument")

        _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetJavaReleasesJavaReleaseCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetJavaReleasesJavaReleaseCollectionItemResult(dict):
    def __init__(__self__, *,
                 artifact_content_types: Sequence[str],
                 artifacts: Sequence['outputs.GetJavaReleasesJavaReleaseCollectionItemArtifactResult'],
                 family_details: Sequence['outputs.GetJavaReleasesJavaReleaseCollectionItemFamilyDetailResult'],
                 family_version: str,
                 license_details: Sequence['outputs.GetJavaReleasesJavaReleaseCollectionItemLicenseDetailResult'],
                 license_type: str,
                 parent_release_version: str,
                 release_date: str,
                 release_notes_url: str,
                 release_type: str,
                 release_version: str,
                 security_status: str):
        """
        :param Sequence[str] artifact_content_types: Artifact content types for the Java version.
        :param Sequence['GetJavaReleasesJavaReleaseCollectionItemArtifactArgs'] artifacts: List of Java artifacts.
        :param Sequence['GetJavaReleasesJavaReleaseCollectionItemFamilyDetailArgs'] family_details: Metadata associated with a specific Java release family. A Java release family is typically a major version in the Java version identifier.
        :param str family_version: The version identifier for the Java family.
        :param Sequence['GetJavaReleasesJavaReleaseCollectionItemLicenseDetailArgs'] license_details: Information about a license type for Java.
        :param str license_type: Java license type.
        :param str parent_release_version: Parent Java release version identifier. This is applicable for BPR releases.
        :param str release_date: The release date of the Java version (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
        :param str release_notes_url: Release notes associated with the Java version.
        :param str release_type: Java release type.
        :param str release_version: Unique Java release version identifier
        :param str security_status: The security status of the Java version.
        """
        GetJavaReleasesJavaReleaseCollectionItemResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            artifact_content_types=artifact_content_types,
            artifacts=artifacts,
            family_details=family_details,
            family_version=family_version,
            license_details=license_details,
            license_type=license_type,
            parent_release_version=parent_release_version,
            release_date=release_date,
            release_notes_url=release_notes_url,
            release_type=release_type,
            release_version=release_version,
            security_status=security_status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             artifact_content_types: Optional[Sequence[str]] = None,
             artifacts: Optional[Sequence['outputs.GetJavaReleasesJavaReleaseCollectionItemArtifactResult']] = None,
             family_details: Optional[Sequence['outputs.GetJavaReleasesJavaReleaseCollectionItemFamilyDetailResult']] = None,
             family_version: Optional[str] = None,
             license_details: Optional[Sequence['outputs.GetJavaReleasesJavaReleaseCollectionItemLicenseDetailResult']] = None,
             license_type: Optional[str] = None,
             parent_release_version: Optional[str] = None,
             release_date: Optional[str] = None,
             release_notes_url: Optional[str] = None,
             release_type: Optional[str] = None,
             release_version: Optional[str] = None,
             security_status: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if artifact_content_types is None and 'artifactContentTypes' in kwargs:
            artifact_content_types = kwargs['artifactContentTypes']
        if artifact_content_types is None:
            raise TypeError("Missing 'artifact_content_types' argument")
        if artifacts is None:
            raise TypeError("Missing 'artifacts' argument")
        if family_details is None and 'familyDetails' in kwargs:
            family_details = kwargs['familyDetails']
        if family_details is None:
            raise TypeError("Missing 'family_details' argument")
        if family_version is None and 'familyVersion' in kwargs:
            family_version = kwargs['familyVersion']
        if family_version is None:
            raise TypeError("Missing 'family_version' argument")
        if license_details is None and 'licenseDetails' in kwargs:
            license_details = kwargs['licenseDetails']
        if license_details is None:
            raise TypeError("Missing 'license_details' argument")
        if license_type is None and 'licenseType' in kwargs:
            license_type = kwargs['licenseType']
        if license_type is None:
            raise TypeError("Missing 'license_type' argument")
        if parent_release_version is None and 'parentReleaseVersion' in kwargs:
            parent_release_version = kwargs['parentReleaseVersion']
        if parent_release_version is None:
            raise TypeError("Missing 'parent_release_version' argument")
        if release_date is None and 'releaseDate' in kwargs:
            release_date = kwargs['releaseDate']
        if release_date is None:
            raise TypeError("Missing 'release_date' argument")
        if release_notes_url is None and 'releaseNotesUrl' in kwargs:
            release_notes_url = kwargs['releaseNotesUrl']
        if release_notes_url is None:
            raise TypeError("Missing 'release_notes_url' argument")
        if release_type is None and 'releaseType' in kwargs:
            release_type = kwargs['releaseType']
        if release_type is None:
            raise TypeError("Missing 'release_type' argument")
        if release_version is None and 'releaseVersion' in kwargs:
            release_version = kwargs['releaseVersion']
        if release_version is None:
            raise TypeError("Missing 'release_version' argument")
        if security_status is None and 'securityStatus' in kwargs:
            security_status = kwargs['securityStatus']
        if security_status is None:
            raise TypeError("Missing 'security_status' argument")

        _setter("artifact_content_types", artifact_content_types)
        _setter("artifacts", artifacts)
        _setter("family_details", family_details)
        _setter("family_version", family_version)
        _setter("license_details", license_details)
        _setter("license_type", license_type)
        _setter("parent_release_version", parent_release_version)
        _setter("release_date", release_date)
        _setter("release_notes_url", release_notes_url)
        _setter("release_type", release_type)
        _setter("release_version", release_version)
        _setter("security_status", security_status)

    @property
    @pulumi.getter(name="artifactContentTypes")
    def artifact_content_types(self) -> Sequence[str]:
        """
        Artifact content types for the Java version.
        """
        return pulumi.get(self, "artifact_content_types")

    @property
    @pulumi.getter
    def artifacts(self) -> Sequence['outputs.GetJavaReleasesJavaReleaseCollectionItemArtifactResult']:
        """
        List of Java artifacts.
        """
        return pulumi.get(self, "artifacts")

    @property
    @pulumi.getter(name="familyDetails")
    def family_details(self) -> Sequence['outputs.GetJavaReleasesJavaReleaseCollectionItemFamilyDetailResult']:
        """
        Metadata associated with a specific Java release family. A Java release family is typically a major version in the Java version identifier.
        """
        return pulumi.get(self, "family_details")

    @property
    @pulumi.getter(name="familyVersion")
    def family_version(self) -> str:
        """
        The version identifier for the Java family.
        """
        return pulumi.get(self, "family_version")

    @property
    @pulumi.getter(name="licenseDetails")
    def license_details(self) -> Sequence['outputs.GetJavaReleasesJavaReleaseCollectionItemLicenseDetailResult']:
        """
        Information about a license type for Java.
        """
        return pulumi.get(self, "license_details")

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> str:
        """
        Java license type.
        """
        return pulumi.get(self, "license_type")

    @property
    @pulumi.getter(name="parentReleaseVersion")
    def parent_release_version(self) -> str:
        """
        Parent Java release version identifier. This is applicable for BPR releases.
        """
        return pulumi.get(self, "parent_release_version")

    @property
    @pulumi.getter(name="releaseDate")
    def release_date(self) -> str:
        """
        The release date of the Java version (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
        """
        return pulumi.get(self, "release_date")

    @property
    @pulumi.getter(name="releaseNotesUrl")
    def release_notes_url(self) -> str:
        """
        Release notes associated with the Java version.
        """
        return pulumi.get(self, "release_notes_url")

    @property
    @pulumi.getter(name="releaseType")
    def release_type(self) -> str:
        """
        Java release type.
        """
        return pulumi.get(self, "release_type")

    @property
    @pulumi.getter(name="releaseVersion")
    def release_version(self) -> str:
        """
        Unique Java release version identifier
        """
        return pulumi.get(self, "release_version")

    @property
    @pulumi.getter(name="securityStatus")
    def security_status(self) -> str:
        """
        The security status of the Java version.
        """
        return pulumi.get(self, "security_status")


@pulumi.output_type
class GetJavaReleasesJavaReleaseCollectionItemArtifactResult(dict):
    def __init__(__self__, *,
                 approximate_file_size_in_bytes: str,
                 artifact_content_type: str,
                 artifact_description: str,
                 artifact_id: str,
                 sha256: str):
        """
        :param str approximate_file_size_in_bytes: Approximate compressed file size in bytes.
        :param str artifact_content_type: Product content type of this artifact.
        :param str artifact_description: Description of the binary artifact. Typically includes the OS, architecture, and installer type.
        :param str artifact_id: Unique identifier for the artifact.
        :param str sha256: SHA256 checksum of the artifact.
        """
        GetJavaReleasesJavaReleaseCollectionItemArtifactResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            approximate_file_size_in_bytes=approximate_file_size_in_bytes,
            artifact_content_type=artifact_content_type,
            artifact_description=artifact_description,
            artifact_id=artifact_id,
            sha256=sha256,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             approximate_file_size_in_bytes: Optional[str] = None,
             artifact_content_type: Optional[str] = None,
             artifact_description: Optional[str] = None,
             artifact_id: Optional[str] = None,
             sha256: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if approximate_file_size_in_bytes is None and 'approximateFileSizeInBytes' in kwargs:
            approximate_file_size_in_bytes = kwargs['approximateFileSizeInBytes']
        if approximate_file_size_in_bytes is None:
            raise TypeError("Missing 'approximate_file_size_in_bytes' argument")
        if artifact_content_type is None and 'artifactContentType' in kwargs:
            artifact_content_type = kwargs['artifactContentType']
        if artifact_content_type is None:
            raise TypeError("Missing 'artifact_content_type' argument")
        if artifact_description is None and 'artifactDescription' in kwargs:
            artifact_description = kwargs['artifactDescription']
        if artifact_description is None:
            raise TypeError("Missing 'artifact_description' argument")
        if artifact_id is None and 'artifactId' in kwargs:
            artifact_id = kwargs['artifactId']
        if artifact_id is None:
            raise TypeError("Missing 'artifact_id' argument")
        if sha256 is None:
            raise TypeError("Missing 'sha256' argument")

        _setter("approximate_file_size_in_bytes", approximate_file_size_in_bytes)
        _setter("artifact_content_type", artifact_content_type)
        _setter("artifact_description", artifact_description)
        _setter("artifact_id", artifact_id)
        _setter("sha256", sha256)

    @property
    @pulumi.getter(name="approximateFileSizeInBytes")
    def approximate_file_size_in_bytes(self) -> str:
        """
        Approximate compressed file size in bytes.
        """
        return pulumi.get(self, "approximate_file_size_in_bytes")

    @property
    @pulumi.getter(name="artifactContentType")
    def artifact_content_type(self) -> str:
        """
        Product content type of this artifact.
        """
        return pulumi.get(self, "artifact_content_type")

    @property
    @pulumi.getter(name="artifactDescription")
    def artifact_description(self) -> str:
        """
        Description of the binary artifact. Typically includes the OS, architecture, and installer type.
        """
        return pulumi.get(self, "artifact_description")

    @property
    @pulumi.getter(name="artifactId")
    def artifact_id(self) -> str:
        """
        Unique identifier for the artifact.
        """
        return pulumi.get(self, "artifact_id")

    @property
    @pulumi.getter
    def sha256(self) -> str:
        """
        SHA256 checksum of the artifact.
        """
        return pulumi.get(self, "sha256")


@pulumi.output_type
class GetJavaReleasesJavaReleaseCollectionItemFamilyDetailResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 doc_url: str,
                 end_of_support_life_date: str,
                 family_version: str,
                 support_type: str):
        """
        :param str display_name: Commonly used name for the license type.
        :param str doc_url: Link to access the documentation for the release.
        :param str end_of_support_life_date: The End of Support Life (EOSL) date of the Java release family (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
        :param str family_version: The version identifier for the Java family.
        :param str support_type: This indicates the support category for the Java release family.
        """
        GetJavaReleasesJavaReleaseCollectionItemFamilyDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            display_name=display_name,
            doc_url=doc_url,
            end_of_support_life_date=end_of_support_life_date,
            family_version=family_version,
            support_type=support_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             display_name: Optional[str] = None,
             doc_url: Optional[str] = None,
             end_of_support_life_date: Optional[str] = None,
             family_version: Optional[str] = None,
             support_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if display_name is None and 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if display_name is None:
            raise TypeError("Missing 'display_name' argument")
        if doc_url is None and 'docUrl' in kwargs:
            doc_url = kwargs['docUrl']
        if doc_url is None:
            raise TypeError("Missing 'doc_url' argument")
        if end_of_support_life_date is None and 'endOfSupportLifeDate' in kwargs:
            end_of_support_life_date = kwargs['endOfSupportLifeDate']
        if end_of_support_life_date is None:
            raise TypeError("Missing 'end_of_support_life_date' argument")
        if family_version is None and 'familyVersion' in kwargs:
            family_version = kwargs['familyVersion']
        if family_version is None:
            raise TypeError("Missing 'family_version' argument")
        if support_type is None and 'supportType' in kwargs:
            support_type = kwargs['supportType']
        if support_type is None:
            raise TypeError("Missing 'support_type' argument")

        _setter("display_name", display_name)
        _setter("doc_url", doc_url)
        _setter("end_of_support_life_date", end_of_support_life_date)
        _setter("family_version", family_version)
        _setter("support_type", support_type)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Commonly used name for the license type.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="docUrl")
    def doc_url(self) -> str:
        """
        Link to access the documentation for the release.
        """
        return pulumi.get(self, "doc_url")

    @property
    @pulumi.getter(name="endOfSupportLifeDate")
    def end_of_support_life_date(self) -> str:
        """
        The End of Support Life (EOSL) date of the Java release family (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
        """
        return pulumi.get(self, "end_of_support_life_date")

    @property
    @pulumi.getter(name="familyVersion")
    def family_version(self) -> str:
        """
        The version identifier for the Java family.
        """
        return pulumi.get(self, "family_version")

    @property
    @pulumi.getter(name="supportType")
    def support_type(self) -> str:
        """
        This indicates the support category for the Java release family.
        """
        return pulumi.get(self, "support_type")


@pulumi.output_type
class GetJavaReleasesJavaReleaseCollectionItemLicenseDetailResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 license_type: str,
                 license_url: str):
        """
        :param str display_name: Commonly used name for the license type.
        :param str license_type: Java license type.
        :param str license_url: Publicly accessible license URL containing the detailed terms and conditions.
        """
        GetJavaReleasesJavaReleaseCollectionItemLicenseDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            display_name=display_name,
            license_type=license_type,
            license_url=license_url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             display_name: Optional[str] = None,
             license_type: Optional[str] = None,
             license_url: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if display_name is None and 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if display_name is None:
            raise TypeError("Missing 'display_name' argument")
        if license_type is None and 'licenseType' in kwargs:
            license_type = kwargs['licenseType']
        if license_type is None:
            raise TypeError("Missing 'license_type' argument")
        if license_url is None and 'licenseUrl' in kwargs:
            license_url = kwargs['licenseUrl']
        if license_url is None:
            raise TypeError("Missing 'license_url' argument")

        _setter("display_name", display_name)
        _setter("license_type", license_type)
        _setter("license_url", license_url)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Commonly used name for the license type.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> str:
        """
        Java license type.
        """
        return pulumi.get(self, "license_type")

    @property
    @pulumi.getter(name="licenseUrl")
    def license_url(self) -> str:
        """
        Publicly accessible license URL containing the detailed terms and conditions.
        """
        return pulumi.get(self, "license_url")


@pulumi.output_type
class GetListJreUsageItemResult(dict):
    def __init__(__self__, *,
                 approximate_application_count: int,
                 approximate_installation_count: int,
                 approximate_managed_instance_count: int,
                 approximate_pending_work_request_count: int,
                 days_under_security_baseline: int,
                 distribution: str,
                 end_of_support_life_date: str,
                 fleet_id: str,
                 id: str,
                 managed_instance_id: str,
                 operating_systems: Sequence['outputs.GetListJreUsageItemOperatingSystemResult'],
                 release_date: str,
                 security_status: str,
                 time_end: str,
                 time_first_seen: str,
                 time_last_seen: str,
                 time_start: str,
                 vendor: str,
                 version: str):
        """
        :param int approximate_application_count: The approximate count of the applications running on this Java Runtime.
        :param int approximate_installation_count: The approximate count of installations that are installations of this Java Runtime.
        :param int approximate_managed_instance_count: The approximate count of the managed instances that report this Java Runtime.
        :param int approximate_pending_work_request_count: The approximate count of work requests working on this Java Runtime.
        :param int days_under_security_baseline: The number of days since this release has been under the security baseline.
        :param str distribution: The distribution of a Java Runtime is the name of the lineage of product to which it belongs, for example _Java(TM) SE Runtime Environment_.
        :param str end_of_support_life_date: The End of Support Life (EOSL) date of the Java Runtime (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
        :param str fleet_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the related fleet.
        :param str id: The internal identifier of the Java Runtime.
        :param str managed_instance_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the related managed instance. This property value is present only for /listJreUsage.
        :param Sequence['GetListJreUsageItemOperatingSystemArgs'] operating_systems: The operating systems that have this Java Runtime installed.
        :param str release_date: The release date of the Java Runtime (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
        :param str security_status: The security status of the Java Runtime.
        :param str time_end: The end of the time period during which resources are searched (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
        :param str time_first_seen: The date and time the resource was _first_ reported to JMS. This is potentially _before_ the specified time period provided by the filters. For example, a resource can be first reported to JMS before the start of a specified time period, if it is also reported during the time period.
        :param str time_last_seen: The date and time the resource was _last_ reported to JMS. This is potentially _after_ the specified time period provided by the filters. For example, a resource can be last reported to JMS before the start of a specified time period, if it is also reported during the time period.
        :param str time_start: The start of the time period during which resources are searched (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
        :param str vendor: The vendor of the Java Runtime.
        :param str version: The version of the Java Runtime.
        """
        GetListJreUsageItemResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            approximate_application_count=approximate_application_count,
            approximate_installation_count=approximate_installation_count,
            approximate_managed_instance_count=approximate_managed_instance_count,
            approximate_pending_work_request_count=approximate_pending_work_request_count,
            days_under_security_baseline=days_under_security_baseline,
            distribution=distribution,
            end_of_support_life_date=end_of_support_life_date,
            fleet_id=fleet_id,
            id=id,
            managed_instance_id=managed_instance_id,
            operating_systems=operating_systems,
            release_date=release_date,
            security_status=security_status,
            time_end=time_end,
            time_first_seen=time_first_seen,
            time_last_seen=time_last_seen,
            time_start=time_start,
            vendor=vendor,
            version=version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             approximate_application_count: Optional[int] = None,
             approximate_installation_count: Optional[int] = None,
             approximate_managed_instance_count: Optional[int] = None,
             approximate_pending_work_request_count: Optional[int] = None,
             days_under_security_baseline: Optional[int] = None,
             distribution: Optional[str] = None,
             end_of_support_life_date: Optional[str] = None,
             fleet_id: Optional[str] = None,
             id: Optional[str] = None,
             managed_instance_id: Optional[str] = None,
             operating_systems: Optional[Sequence['outputs.GetListJreUsageItemOperatingSystemResult']] = None,
             release_date: Optional[str] = None,
             security_status: Optional[str] = None,
             time_end: Optional[str] = None,
             time_first_seen: Optional[str] = None,
             time_last_seen: Optional[str] = None,
             time_start: Optional[str] = None,
             vendor: Optional[str] = None,
             version: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if approximate_application_count is None and 'approximateApplicationCount' in kwargs:
            approximate_application_count = kwargs['approximateApplicationCount']
        if approximate_application_count is None:
            raise TypeError("Missing 'approximate_application_count' argument")
        if approximate_installation_count is None and 'approximateInstallationCount' in kwargs:
            approximate_installation_count = kwargs['approximateInstallationCount']
        if approximate_installation_count is None:
            raise TypeError("Missing 'approximate_installation_count' argument")
        if approximate_managed_instance_count is None and 'approximateManagedInstanceCount' in kwargs:
            approximate_managed_instance_count = kwargs['approximateManagedInstanceCount']
        if approximate_managed_instance_count is None:
            raise TypeError("Missing 'approximate_managed_instance_count' argument")
        if approximate_pending_work_request_count is None and 'approximatePendingWorkRequestCount' in kwargs:
            approximate_pending_work_request_count = kwargs['approximatePendingWorkRequestCount']
        if approximate_pending_work_request_count is None:
            raise TypeError("Missing 'approximate_pending_work_request_count' argument")
        if days_under_security_baseline is None and 'daysUnderSecurityBaseline' in kwargs:
            days_under_security_baseline = kwargs['daysUnderSecurityBaseline']
        if days_under_security_baseline is None:
            raise TypeError("Missing 'days_under_security_baseline' argument")
        if distribution is None:
            raise TypeError("Missing 'distribution' argument")
        if end_of_support_life_date is None and 'endOfSupportLifeDate' in kwargs:
            end_of_support_life_date = kwargs['endOfSupportLifeDate']
        if end_of_support_life_date is None:
            raise TypeError("Missing 'end_of_support_life_date' argument")
        if fleet_id is None and 'fleetId' in kwargs:
            fleet_id = kwargs['fleetId']
        if fleet_id is None:
            raise TypeError("Missing 'fleet_id' argument")
        if id is None:
            raise TypeError("Missing 'id' argument")
        if managed_instance_id is None and 'managedInstanceId' in kwargs:
            managed_instance_id = kwargs['managedInstanceId']
        if managed_instance_id is None:
            raise TypeError("Missing 'managed_instance_id' argument")
        if operating_systems is None and 'operatingSystems' in kwargs:
            operating_systems = kwargs['operatingSystems']
        if operating_systems is None:
            raise TypeError("Missing 'operating_systems' argument")
        if release_date is None and 'releaseDate' in kwargs:
            release_date = kwargs['releaseDate']
        if release_date is None:
            raise TypeError("Missing 'release_date' argument")
        if security_status is None and 'securityStatus' in kwargs:
            security_status = kwargs['securityStatus']
        if security_status is None:
            raise TypeError("Missing 'security_status' argument")
        if time_end is None and 'timeEnd' in kwargs:
            time_end = kwargs['timeEnd']
        if time_end is None:
            raise TypeError("Missing 'time_end' argument")
        if time_first_seen is None and 'timeFirstSeen' in kwargs:
            time_first_seen = kwargs['timeFirstSeen']
        if time_first_seen is None:
            raise TypeError("Missing 'time_first_seen' argument")
        if time_last_seen is None and 'timeLastSeen' in kwargs:
            time_last_seen = kwargs['timeLastSeen']
        if time_last_seen is None:
            raise TypeError("Missing 'time_last_seen' argument")
        if time_start is None and 'timeStart' in kwargs:
            time_start = kwargs['timeStart']
        if time_start is None:
            raise TypeError("Missing 'time_start' argument")
        if vendor is None:
            raise TypeError("Missing 'vendor' argument")
        if version is None:
            raise TypeError("Missing 'version' argument")

        _setter("approximate_application_count", approximate_application_count)
        _setter("approximate_installation_count", approximate_installation_count)
        _setter("approximate_managed_instance_count", approximate_managed_instance_count)
        _setter("approximate_pending_work_request_count", approximate_pending_work_request_count)
        _setter("days_under_security_baseline", days_under_security_baseline)
        _setter("distribution", distribution)
        _setter("end_of_support_life_date", end_of_support_life_date)
        _setter("fleet_id", fleet_id)
        _setter("id", id)
        _setter("managed_instance_id", managed_instance_id)
        _setter("operating_systems", operating_systems)
        _setter("release_date", release_date)
        _setter("security_status", security_status)
        _setter("time_end", time_end)
        _setter("time_first_seen", time_first_seen)
        _setter("time_last_seen", time_last_seen)
        _setter("time_start", time_start)
        _setter("vendor", vendor)
        _setter("version", version)

    @property
    @pulumi.getter(name="approximateApplicationCount")
    def approximate_application_count(self) -> int:
        """
        The approximate count of the applications running on this Java Runtime.
        """
        return pulumi.get(self, "approximate_application_count")

    @property
    @pulumi.getter(name="approximateInstallationCount")
    def approximate_installation_count(self) -> int:
        """
        The approximate count of installations that are installations of this Java Runtime.
        """
        return pulumi.get(self, "approximate_installation_count")

    @property
    @pulumi.getter(name="approximateManagedInstanceCount")
    def approximate_managed_instance_count(self) -> int:
        """
        The approximate count of the managed instances that report this Java Runtime.
        """
        return pulumi.get(self, "approximate_managed_instance_count")

    @property
    @pulumi.getter(name="approximatePendingWorkRequestCount")
    def approximate_pending_work_request_count(self) -> int:
        """
        The approximate count of work requests working on this Java Runtime.
        """
        return pulumi.get(self, "approximate_pending_work_request_count")

    @property
    @pulumi.getter(name="daysUnderSecurityBaseline")
    def days_under_security_baseline(self) -> int:
        """
        The number of days since this release has been under the security baseline.
        """
        return pulumi.get(self, "days_under_security_baseline")

    @property
    @pulumi.getter
    def distribution(self) -> str:
        """
        The distribution of a Java Runtime is the name of the lineage of product to which it belongs, for example _Java(TM) SE Runtime Environment_.
        """
        return pulumi.get(self, "distribution")

    @property
    @pulumi.getter(name="endOfSupportLifeDate")
    def end_of_support_life_date(self) -> str:
        """
        The End of Support Life (EOSL) date of the Java Runtime (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
        """
        return pulumi.get(self, "end_of_support_life_date")

    @property
    @pulumi.getter(name="fleetId")
    def fleet_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the related fleet.
        """
        return pulumi.get(self, "fleet_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The internal identifier of the Java Runtime.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="managedInstanceId")
    def managed_instance_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the related managed instance. This property value is present only for /listJreUsage.
        """
        return pulumi.get(self, "managed_instance_id")

    @property
    @pulumi.getter(name="operatingSystems")
    def operating_systems(self) -> Sequence['outputs.GetListJreUsageItemOperatingSystemResult']:
        """
        The operating systems that have this Java Runtime installed.
        """
        return pulumi.get(self, "operating_systems")

    @property
    @pulumi.getter(name="releaseDate")
    def release_date(self) -> str:
        """
        The release date of the Java Runtime (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
        """
        return pulumi.get(self, "release_date")

    @property
    @pulumi.getter(name="securityStatus")
    def security_status(self) -> str:
        """
        The security status of the Java Runtime.
        """
        return pulumi.get(self, "security_status")

    @property
    @pulumi.getter(name="timeEnd")
    def time_end(self) -> str:
        """
        The end of the time period during which resources are searched (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
        """
        return pulumi.get(self, "time_end")

    @property
    @pulumi.getter(name="timeFirstSeen")
    def time_first_seen(self) -> str:
        """
        The date and time the resource was _first_ reported to JMS. This is potentially _before_ the specified time period provided by the filters. For example, a resource can be first reported to JMS before the start of a specified time period, if it is also reported during the time period.
        """
        return pulumi.get(self, "time_first_seen")

    @property
    @pulumi.getter(name="timeLastSeen")
    def time_last_seen(self) -> str:
        """
        The date and time the resource was _last_ reported to JMS. This is potentially _after_ the specified time period provided by the filters. For example, a resource can be last reported to JMS before the start of a specified time period, if it is also reported during the time period.
        """
        return pulumi.get(self, "time_last_seen")

    @property
    @pulumi.getter(name="timeStart")
    def time_start(self) -> str:
        """
        The start of the time period during which resources are searched (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
        """
        return pulumi.get(self, "time_start")

    @property
    @pulumi.getter
    def vendor(self) -> str:
        """
        The vendor of the Java Runtime.
        """
        return pulumi.get(self, "vendor")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the Java Runtime.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetListJreUsageItemOperatingSystemResult(dict):
    def __init__(__self__, *,
                 architecture: str,
                 family: str,
                 managed_instance_count: int,
                 name: str,
                 version: str):
        """
        :param str architecture: The architecture of the operating system as provided by the Java system property os.arch.
        :param str family: The operating system type, such as Windows or Linux
        :param int managed_instance_count: Number of instances running the operating system
        :param str name: The name of the operating system as provided by the Java system property os.name.
        :param str version: The version of the Java Runtime.
        """
        GetListJreUsageItemOperatingSystemResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            architecture=architecture,
            family=family,
            managed_instance_count=managed_instance_count,
            name=name,
            version=version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             architecture: Optional[str] = None,
             family: Optional[str] = None,
             managed_instance_count: Optional[int] = None,
             name: Optional[str] = None,
             version: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if architecture is None:
            raise TypeError("Missing 'architecture' argument")
        if family is None:
            raise TypeError("Missing 'family' argument")
        if managed_instance_count is None and 'managedInstanceCount' in kwargs:
            managed_instance_count = kwargs['managedInstanceCount']
        if managed_instance_count is None:
            raise TypeError("Missing 'managed_instance_count' argument")
        if name is None:
            raise TypeError("Missing 'name' argument")
        if version is None:
            raise TypeError("Missing 'version' argument")

        _setter("architecture", architecture)
        _setter("family", family)
        _setter("managed_instance_count", managed_instance_count)
        _setter("name", name)
        _setter("version", version)

    @property
    @pulumi.getter
    def architecture(self) -> str:
        """
        The architecture of the operating system as provided by the Java system property os.arch.
        """
        return pulumi.get(self, "architecture")

    @property
    @pulumi.getter
    def family(self) -> str:
        """
        The operating system type, such as Windows or Linux
        """
        return pulumi.get(self, "family")

    @property
    @pulumi.getter(name="managedInstanceCount")
    def managed_instance_count(self) -> int:
        """
        Number of instances running the operating system
        """
        return pulumi.get(self, "managed_instance_count")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the operating system as provided by the Java system property os.name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the Java Runtime.
        """
        return pulumi.get(self, "version")


