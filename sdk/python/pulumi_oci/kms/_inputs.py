# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GeneratedKeyKeyShapeArgs',
    'KeyExternalKeyReferenceArgs',
    'KeyExternalKeyReferenceDetailArgs',
    'KeyKeyShapeArgs',
    'KeyReplicaDetailArgs',
    'KeyRestoreFromFileArgs',
    'KeyRestoreFromObjectStoreArgs',
    'KeyVersionExternalKeyReferenceDetailArgs',
    'KeyVersionReplicaDetailArgs',
    'VaultExternalKeyManagerMetadataArgs',
    'VaultExternalKeyManagerMetadataOauthMetadataArgs',
    'VaultExternalKeyManagerMetadataSummaryArgs',
    'VaultExternalKeyManagerMetadataSummaryOauthMetadataSummaryArgs',
    'VaultReplicaDetailArgs',
    'VaultRestoreFromFileArgs',
    'VaultRestoreFromObjectStoreArgs',
    'GetEkmsPrivateEndpointsFilterArgs',
    'GetKeyVersionsFilterArgs',
    'GetKeysFilterArgs',
    'GetVaultReplicasFilterArgs',
    'GetVaultsFilterArgs',
]

@pulumi.input_type
class GeneratedKeyKeyShapeArgs:
    def __init__(__self__, *,
                 algorithm: pulumi.Input[str],
                 length: pulumi.Input[int],
                 curve_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "algorithm", algorithm)
        pulumi.set(__self__, "length", length)
        if curve_id is not None:
            pulumi.set(__self__, "curve_id", curve_id)

    @property
    @pulumi.getter
    def algorithm(self) -> pulumi.Input[str]:
        return pulumi.get(self, "algorithm")

    @algorithm.setter
    def algorithm(self, value: pulumi.Input[str]):
        pulumi.set(self, "algorithm", value)

    @property
    @pulumi.getter
    def length(self) -> pulumi.Input[int]:
        return pulumi.get(self, "length")

    @length.setter
    def length(self, value: pulumi.Input[int]):
        pulumi.set(self, "length", value)

    @property
    @pulumi.getter(name="curveId")
    def curve_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "curve_id")

    @curve_id.setter
    def curve_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "curve_id", value)


@pulumi.input_type
class KeyExternalKeyReferenceArgs:
    def __init__(__self__, *,
                 external_key_id: pulumi.Input[str]):
        pulumi.set(__self__, "external_key_id", external_key_id)

    @property
    @pulumi.getter(name="externalKeyId")
    def external_key_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "external_key_id")

    @external_key_id.setter
    def external_key_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "external_key_id", value)


@pulumi.input_type
class KeyExternalKeyReferenceDetailArgs:
    def __init__(__self__, *,
                 external_key_id: Optional[pulumi.Input[str]] = None,
                 external_key_version_id: Optional[pulumi.Input[str]] = None):
        if external_key_id is not None:
            pulumi.set(__self__, "external_key_id", external_key_id)
        if external_key_version_id is not None:
            pulumi.set(__self__, "external_key_version_id", external_key_version_id)

    @property
    @pulumi.getter(name="externalKeyId")
    def external_key_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_key_id")

    @external_key_id.setter
    def external_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_key_id", value)

    @property
    @pulumi.getter(name="externalKeyVersionId")
    def external_key_version_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_key_version_id")

    @external_key_version_id.setter
    def external_key_version_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_key_version_id", value)


@pulumi.input_type
class KeyKeyShapeArgs:
    def __init__(__self__, *,
                 algorithm: pulumi.Input[str],
                 length: pulumi.Input[int],
                 curve_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "algorithm", algorithm)
        pulumi.set(__self__, "length", length)
        if curve_id is not None:
            pulumi.set(__self__, "curve_id", curve_id)

    @property
    @pulumi.getter
    def algorithm(self) -> pulumi.Input[str]:
        return pulumi.get(self, "algorithm")

    @algorithm.setter
    def algorithm(self, value: pulumi.Input[str]):
        pulumi.set(self, "algorithm", value)

    @property
    @pulumi.getter
    def length(self) -> pulumi.Input[int]:
        return pulumi.get(self, "length")

    @length.setter
    def length(self, value: pulumi.Input[int]):
        pulumi.set(self, "length", value)

    @property
    @pulumi.getter(name="curveId")
    def curve_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "curve_id")

    @curve_id.setter
    def curve_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "curve_id", value)


@pulumi.input_type
class KeyReplicaDetailArgs:
    def __init__(__self__, *,
                 replication_id: Optional[pulumi.Input[str]] = None):
        if replication_id is not None:
            pulumi.set(__self__, "replication_id", replication_id)

    @property
    @pulumi.getter(name="replicationId")
    def replication_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "replication_id")

    @replication_id.setter
    def replication_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replication_id", value)


@pulumi.input_type
class KeyRestoreFromFileArgs:
    def __init__(__self__, *,
                 content_length: pulumi.Input[str],
                 restore_key_from_file_details: pulumi.Input[str],
                 content_md5: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "content_length", content_length)
        pulumi.set(__self__, "restore_key_from_file_details", restore_key_from_file_details)
        if content_md5 is not None:
            pulumi.set(__self__, "content_md5", content_md5)

    @property
    @pulumi.getter(name="contentLength")
    def content_length(self) -> pulumi.Input[str]:
        return pulumi.get(self, "content_length")

    @content_length.setter
    def content_length(self, value: pulumi.Input[str]):
        pulumi.set(self, "content_length", value)

    @property
    @pulumi.getter(name="restoreKeyFromFileDetails")
    def restore_key_from_file_details(self) -> pulumi.Input[str]:
        return pulumi.get(self, "restore_key_from_file_details")

    @restore_key_from_file_details.setter
    def restore_key_from_file_details(self, value: pulumi.Input[str]):
        pulumi.set(self, "restore_key_from_file_details", value)

    @property
    @pulumi.getter(name="contentMd5")
    def content_md5(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content_md5")

    @content_md5.setter
    def content_md5(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_md5", value)


@pulumi.input_type
class KeyRestoreFromObjectStoreArgs:
    def __init__(__self__, *,
                 destination: pulumi.Input[str],
                 bucket: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 object: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "destination", destination)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if object is not None:
            pulumi.set(__self__, "object", object)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def destination(self) -> pulumi.Input[str]:
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination", value)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def object(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)


@pulumi.input_type
class KeyVersionExternalKeyReferenceDetailArgs:
    def __init__(__self__, *,
                 external_key_id: Optional[pulumi.Input[str]] = None,
                 external_key_version_id: Optional[pulumi.Input[str]] = None):
        if external_key_id is not None:
            pulumi.set(__self__, "external_key_id", external_key_id)
        if external_key_version_id is not None:
            pulumi.set(__self__, "external_key_version_id", external_key_version_id)

    @property
    @pulumi.getter(name="externalKeyId")
    def external_key_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_key_id")

    @external_key_id.setter
    def external_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_key_id", value)

    @property
    @pulumi.getter(name="externalKeyVersionId")
    def external_key_version_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_key_version_id")

    @external_key_version_id.setter
    def external_key_version_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_key_version_id", value)


@pulumi.input_type
class KeyVersionReplicaDetailArgs:
    def __init__(__self__, *,
                 replication_id: Optional[pulumi.Input[str]] = None):
        if replication_id is not None:
            pulumi.set(__self__, "replication_id", replication_id)

    @property
    @pulumi.getter(name="replicationId")
    def replication_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "replication_id")

    @replication_id.setter
    def replication_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replication_id", value)


@pulumi.input_type
class VaultExternalKeyManagerMetadataArgs:
    def __init__(__self__, *,
                 external_vault_endpoint_url: pulumi.Input[str],
                 oauth_metadata: pulumi.Input['VaultExternalKeyManagerMetadataOauthMetadataArgs'],
                 private_endpoint_id: pulumi.Input[str]):
        pulumi.set(__self__, "external_vault_endpoint_url", external_vault_endpoint_url)
        pulumi.set(__self__, "oauth_metadata", oauth_metadata)
        pulumi.set(__self__, "private_endpoint_id", private_endpoint_id)

    @property
    @pulumi.getter(name="externalVaultEndpointUrl")
    def external_vault_endpoint_url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "external_vault_endpoint_url")

    @external_vault_endpoint_url.setter
    def external_vault_endpoint_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "external_vault_endpoint_url", value)

    @property
    @pulumi.getter(name="oauthMetadata")
    def oauth_metadata(self) -> pulumi.Input['VaultExternalKeyManagerMetadataOauthMetadataArgs']:
        return pulumi.get(self, "oauth_metadata")

    @oauth_metadata.setter
    def oauth_metadata(self, value: pulumi.Input['VaultExternalKeyManagerMetadataOauthMetadataArgs']):
        pulumi.set(self, "oauth_metadata", value)

    @property
    @pulumi.getter(name="privateEndpointId")
    def private_endpoint_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "private_endpoint_id")

    @private_endpoint_id.setter
    def private_endpoint_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "private_endpoint_id", value)


@pulumi.input_type
class VaultExternalKeyManagerMetadataOauthMetadataArgs:
    def __init__(__self__, *,
                 client_app_id: pulumi.Input[str],
                 client_app_secret: pulumi.Input[str],
                 idcs_account_name_url: pulumi.Input[str]):
        pulumi.set(__self__, "client_app_id", client_app_id)
        pulumi.set(__self__, "client_app_secret", client_app_secret)
        pulumi.set(__self__, "idcs_account_name_url", idcs_account_name_url)

    @property
    @pulumi.getter(name="clientAppId")
    def client_app_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_app_id")

    @client_app_id.setter
    def client_app_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_app_id", value)

    @property
    @pulumi.getter(name="clientAppSecret")
    def client_app_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_app_secret")

    @client_app_secret.setter
    def client_app_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_app_secret", value)

    @property
    @pulumi.getter(name="idcsAccountNameUrl")
    def idcs_account_name_url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "idcs_account_name_url")

    @idcs_account_name_url.setter
    def idcs_account_name_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "idcs_account_name_url", value)


@pulumi.input_type
class VaultExternalKeyManagerMetadataSummaryArgs:
    def __init__(__self__, *,
                 external_vault_endpoint_url: Optional[pulumi.Input[str]] = None,
                 oauth_metadata_summaries: Optional[pulumi.Input[Sequence[pulumi.Input['VaultExternalKeyManagerMetadataSummaryOauthMetadataSummaryArgs']]]] = None,
                 private_endpoint_id: Optional[pulumi.Input[str]] = None,
                 vendor: Optional[pulumi.Input[str]] = None):
        if external_vault_endpoint_url is not None:
            pulumi.set(__self__, "external_vault_endpoint_url", external_vault_endpoint_url)
        if oauth_metadata_summaries is not None:
            pulumi.set(__self__, "oauth_metadata_summaries", oauth_metadata_summaries)
        if private_endpoint_id is not None:
            pulumi.set(__self__, "private_endpoint_id", private_endpoint_id)
        if vendor is not None:
            pulumi.set(__self__, "vendor", vendor)

    @property
    @pulumi.getter(name="externalVaultEndpointUrl")
    def external_vault_endpoint_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_vault_endpoint_url")

    @external_vault_endpoint_url.setter
    def external_vault_endpoint_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_vault_endpoint_url", value)

    @property
    @pulumi.getter(name="oauthMetadataSummaries")
    def oauth_metadata_summaries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VaultExternalKeyManagerMetadataSummaryOauthMetadataSummaryArgs']]]]:
        return pulumi.get(self, "oauth_metadata_summaries")

    @oauth_metadata_summaries.setter
    def oauth_metadata_summaries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VaultExternalKeyManagerMetadataSummaryOauthMetadataSummaryArgs']]]]):
        pulumi.set(self, "oauth_metadata_summaries", value)

    @property
    @pulumi.getter(name="privateEndpointId")
    def private_endpoint_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "private_endpoint_id")

    @private_endpoint_id.setter
    def private_endpoint_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_endpoint_id", value)

    @property
    @pulumi.getter
    def vendor(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vendor")

    @vendor.setter
    def vendor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vendor", value)


@pulumi.input_type
class VaultExternalKeyManagerMetadataSummaryOauthMetadataSummaryArgs:
    def __init__(__self__, *,
                 client_app_id: Optional[pulumi.Input[str]] = None,
                 idcs_account_name_url: Optional[pulumi.Input[str]] = None):
        if client_app_id is not None:
            pulumi.set(__self__, "client_app_id", client_app_id)
        if idcs_account_name_url is not None:
            pulumi.set(__self__, "idcs_account_name_url", idcs_account_name_url)

    @property
    @pulumi.getter(name="clientAppId")
    def client_app_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_app_id")

    @client_app_id.setter
    def client_app_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_app_id", value)

    @property
    @pulumi.getter(name="idcsAccountNameUrl")
    def idcs_account_name_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "idcs_account_name_url")

    @idcs_account_name_url.setter
    def idcs_account_name_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idcs_account_name_url", value)


@pulumi.input_type
class VaultReplicaDetailArgs:
    def __init__(__self__, *,
                 replication_id: Optional[pulumi.Input[str]] = None):
        if replication_id is not None:
            pulumi.set(__self__, "replication_id", replication_id)

    @property
    @pulumi.getter(name="replicationId")
    def replication_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "replication_id")

    @replication_id.setter
    def replication_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replication_id", value)


@pulumi.input_type
class VaultRestoreFromFileArgs:
    def __init__(__self__, *,
                 content_length: pulumi.Input[str],
                 restore_vault_from_file_details: pulumi.Input[str],
                 content_md5: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "content_length", content_length)
        pulumi.set(__self__, "restore_vault_from_file_details", restore_vault_from_file_details)
        if content_md5 is not None:
            pulumi.set(__self__, "content_md5", content_md5)

    @property
    @pulumi.getter(name="contentLength")
    def content_length(self) -> pulumi.Input[str]:
        return pulumi.get(self, "content_length")

    @content_length.setter
    def content_length(self, value: pulumi.Input[str]):
        pulumi.set(self, "content_length", value)

    @property
    @pulumi.getter(name="restoreVaultFromFileDetails")
    def restore_vault_from_file_details(self) -> pulumi.Input[str]:
        return pulumi.get(self, "restore_vault_from_file_details")

    @restore_vault_from_file_details.setter
    def restore_vault_from_file_details(self, value: pulumi.Input[str]):
        pulumi.set(self, "restore_vault_from_file_details", value)

    @property
    @pulumi.getter(name="contentMd5")
    def content_md5(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content_md5")

    @content_md5.setter
    def content_md5(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_md5", value)


@pulumi.input_type
class VaultRestoreFromObjectStoreArgs:
    def __init__(__self__, *,
                 destination: pulumi.Input[str],
                 bucket: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 object: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "destination", destination)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if object is not None:
            pulumi.set(__self__, "object", object)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def destination(self) -> pulumi.Input[str]:
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination", value)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def object(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)


@pulumi.input_type
class GetEkmsPrivateEndpointsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class GetKeyVersionsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class GetKeysFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class GetVaultReplicasFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class GetVaultsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


