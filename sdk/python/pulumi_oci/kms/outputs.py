# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GeneratedKeyKeyShape',
    'KeyExternalKeyReference',
    'KeyExternalKeyReferenceDetail',
    'KeyKeyShape',
    'KeyReplicaDetail',
    'KeyRestoreFromFile',
    'KeyRestoreFromObjectStore',
    'KeyVersionExternalKeyReferenceDetail',
    'KeyVersionReplicaDetail',
    'VaultExternalKeyManagerMetadata',
    'VaultExternalKeyManagerMetadataOauthMetadata',
    'VaultExternalKeyManagerMetadataSummary',
    'VaultExternalKeyManagerMetadataSummaryOauthMetadataSummary',
    'VaultReplicaDetail',
    'VaultRestoreFromFile',
    'VaultRestoreFromObjectStore',
    'GetEkmsPrivateEndpointsEkmsPrivateEndpointResult',
    'GetEkmsPrivateEndpointsFilterResult',
    'GetKeyExternalKeyReferenceResult',
    'GetKeyExternalKeyReferenceDetailResult',
    'GetKeyKeyShapeResult',
    'GetKeyReplicaDetailResult',
    'GetKeyRestoreFromFileResult',
    'GetKeyRestoreFromObjectStoreResult',
    'GetKeyVersionExternalKeyReferenceDetailResult',
    'GetKeyVersionReplicaDetailResult',
    'GetKeyVersionsFilterResult',
    'GetKeyVersionsKeyVersionResult',
    'GetKeyVersionsKeyVersionExternalKeyReferenceDetailResult',
    'GetKeyVersionsKeyVersionReplicaDetailResult',
    'GetKeysFilterResult',
    'GetKeysKeyResult',
    'GetKeysKeyExternalKeyReferenceResult',
    'GetKeysKeyExternalKeyReferenceDetailResult',
    'GetKeysKeyKeyShapeResult',
    'GetKeysKeyReplicaDetailResult',
    'GetKeysKeyRestoreFromFileResult',
    'GetKeysKeyRestoreFromObjectStoreResult',
    'GetReplicationStatusReplicaDetailResult',
    'GetVaultExternalKeyManagerMetadataResult',
    'GetVaultExternalKeyManagerMetadataOauthMetadataResult',
    'GetVaultExternalKeyManagerMetadataSummaryResult',
    'GetVaultExternalKeyManagerMetadataSummaryOauthMetadataSummaryResult',
    'GetVaultReplicaDetailResult',
    'GetVaultReplicasFilterResult',
    'GetVaultReplicasVaultReplicaResult',
    'GetVaultRestoreFromFileResult',
    'GetVaultRestoreFromObjectStoreResult',
    'GetVaultsFilterResult',
    'GetVaultsVaultResult',
    'GetVaultsVaultExternalKeyManagerMetadataResult',
    'GetVaultsVaultExternalKeyManagerMetadataOauthMetadataResult',
    'GetVaultsVaultExternalKeyManagerMetadataSummaryResult',
    'GetVaultsVaultExternalKeyManagerMetadataSummaryOauthMetadataSummaryResult',
    'GetVaultsVaultReplicaDetailResult',
    'GetVaultsVaultRestoreFromFileResult',
    'GetVaultsVaultRestoreFromObjectStoreResult',
]

@pulumi.output_type
class GeneratedKeyKeyShape(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "curveId":
            suggest = "curve_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GeneratedKeyKeyShape. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GeneratedKeyKeyShape.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GeneratedKeyKeyShape.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 algorithm: str,
                 length: int,
                 curve_id: Optional[str] = None):
        pulumi.set(__self__, "algorithm", algorithm)
        pulumi.set(__self__, "length", length)
        if curve_id is not None:
            pulumi.set(__self__, "curve_id", curve_id)

    @property
    @pulumi.getter
    def algorithm(self) -> str:
        return pulumi.get(self, "algorithm")

    @property
    @pulumi.getter
    def length(self) -> int:
        return pulumi.get(self, "length")

    @property
    @pulumi.getter(name="curveId")
    def curve_id(self) -> Optional[str]:
        return pulumi.get(self, "curve_id")


@pulumi.output_type
class KeyExternalKeyReference(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "externalKeyId":
            suggest = "external_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KeyExternalKeyReference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KeyExternalKeyReference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KeyExternalKeyReference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 external_key_id: str):
        pulumi.set(__self__, "external_key_id", external_key_id)

    @property
    @pulumi.getter(name="externalKeyId")
    def external_key_id(self) -> str:
        return pulumi.get(self, "external_key_id")


@pulumi.output_type
class KeyExternalKeyReferenceDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "externalKeyId":
            suggest = "external_key_id"
        elif key == "externalKeyVersionId":
            suggest = "external_key_version_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KeyExternalKeyReferenceDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KeyExternalKeyReferenceDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KeyExternalKeyReferenceDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 external_key_id: Optional[str] = None,
                 external_key_version_id: Optional[str] = None):
        if external_key_id is not None:
            pulumi.set(__self__, "external_key_id", external_key_id)
        if external_key_version_id is not None:
            pulumi.set(__self__, "external_key_version_id", external_key_version_id)

    @property
    @pulumi.getter(name="externalKeyId")
    def external_key_id(self) -> Optional[str]:
        return pulumi.get(self, "external_key_id")

    @property
    @pulumi.getter(name="externalKeyVersionId")
    def external_key_version_id(self) -> Optional[str]:
        return pulumi.get(self, "external_key_version_id")


@pulumi.output_type
class KeyKeyShape(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "curveId":
            suggest = "curve_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KeyKeyShape. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KeyKeyShape.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KeyKeyShape.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 algorithm: str,
                 length: int,
                 curve_id: Optional[str] = None):
        pulumi.set(__self__, "algorithm", algorithm)
        pulumi.set(__self__, "length", length)
        if curve_id is not None:
            pulumi.set(__self__, "curve_id", curve_id)

    @property
    @pulumi.getter
    def algorithm(self) -> str:
        return pulumi.get(self, "algorithm")

    @property
    @pulumi.getter
    def length(self) -> int:
        return pulumi.get(self, "length")

    @property
    @pulumi.getter(name="curveId")
    def curve_id(self) -> Optional[str]:
        return pulumi.get(self, "curve_id")


@pulumi.output_type
class KeyReplicaDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "replicationId":
            suggest = "replication_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KeyReplicaDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KeyReplicaDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KeyReplicaDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 replication_id: Optional[str] = None):
        if replication_id is not None:
            pulumi.set(__self__, "replication_id", replication_id)

    @property
    @pulumi.getter(name="replicationId")
    def replication_id(self) -> Optional[str]:
        return pulumi.get(self, "replication_id")


@pulumi.output_type
class KeyRestoreFromFile(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contentLength":
            suggest = "content_length"
        elif key == "restoreKeyFromFileDetails":
            suggest = "restore_key_from_file_details"
        elif key == "contentMd5":
            suggest = "content_md5"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KeyRestoreFromFile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KeyRestoreFromFile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KeyRestoreFromFile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 content_length: str,
                 restore_key_from_file_details: str,
                 content_md5: Optional[str] = None):
        pulumi.set(__self__, "content_length", content_length)
        pulumi.set(__self__, "restore_key_from_file_details", restore_key_from_file_details)
        if content_md5 is not None:
            pulumi.set(__self__, "content_md5", content_md5)

    @property
    @pulumi.getter(name="contentLength")
    def content_length(self) -> str:
        return pulumi.get(self, "content_length")

    @property
    @pulumi.getter(name="restoreKeyFromFileDetails")
    def restore_key_from_file_details(self) -> str:
        return pulumi.get(self, "restore_key_from_file_details")

    @property
    @pulumi.getter(name="contentMd5")
    def content_md5(self) -> Optional[str]:
        return pulumi.get(self, "content_md5")


@pulumi.output_type
class KeyRestoreFromObjectStore(dict):
    def __init__(__self__, *,
                 destination: str,
                 bucket: Optional[str] = None,
                 namespace: Optional[str] = None,
                 object: Optional[str] = None,
                 uri: Optional[str] = None):
        pulumi.set(__self__, "destination", destination)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if object is not None:
            pulumi.set(__self__, "object", object)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def destination(self) -> str:
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> Optional[str]:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")


@pulumi.output_type
class KeyVersionExternalKeyReferenceDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "externalKeyId":
            suggest = "external_key_id"
        elif key == "externalKeyVersionId":
            suggest = "external_key_version_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KeyVersionExternalKeyReferenceDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KeyVersionExternalKeyReferenceDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KeyVersionExternalKeyReferenceDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 external_key_id: Optional[str] = None,
                 external_key_version_id: Optional[str] = None):
        if external_key_id is not None:
            pulumi.set(__self__, "external_key_id", external_key_id)
        if external_key_version_id is not None:
            pulumi.set(__self__, "external_key_version_id", external_key_version_id)

    @property
    @pulumi.getter(name="externalKeyId")
    def external_key_id(self) -> Optional[str]:
        return pulumi.get(self, "external_key_id")

    @property
    @pulumi.getter(name="externalKeyVersionId")
    def external_key_version_id(self) -> Optional[str]:
        return pulumi.get(self, "external_key_version_id")


@pulumi.output_type
class KeyVersionReplicaDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "replicationId":
            suggest = "replication_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KeyVersionReplicaDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KeyVersionReplicaDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KeyVersionReplicaDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 replication_id: Optional[str] = None):
        if replication_id is not None:
            pulumi.set(__self__, "replication_id", replication_id)

    @property
    @pulumi.getter(name="replicationId")
    def replication_id(self) -> Optional[str]:
        return pulumi.get(self, "replication_id")


@pulumi.output_type
class VaultExternalKeyManagerMetadata(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "externalVaultEndpointUrl":
            suggest = "external_vault_endpoint_url"
        elif key == "oauthMetadata":
            suggest = "oauth_metadata"
        elif key == "privateEndpointId":
            suggest = "private_endpoint_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VaultExternalKeyManagerMetadata. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VaultExternalKeyManagerMetadata.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VaultExternalKeyManagerMetadata.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 external_vault_endpoint_url: str,
                 oauth_metadata: 'outputs.VaultExternalKeyManagerMetadataOauthMetadata',
                 private_endpoint_id: str):
        pulumi.set(__self__, "external_vault_endpoint_url", external_vault_endpoint_url)
        pulumi.set(__self__, "oauth_metadata", oauth_metadata)
        pulumi.set(__self__, "private_endpoint_id", private_endpoint_id)

    @property
    @pulumi.getter(name="externalVaultEndpointUrl")
    def external_vault_endpoint_url(self) -> str:
        return pulumi.get(self, "external_vault_endpoint_url")

    @property
    @pulumi.getter(name="oauthMetadata")
    def oauth_metadata(self) -> 'outputs.VaultExternalKeyManagerMetadataOauthMetadata':
        return pulumi.get(self, "oauth_metadata")

    @property
    @pulumi.getter(name="privateEndpointId")
    def private_endpoint_id(self) -> str:
        return pulumi.get(self, "private_endpoint_id")


@pulumi.output_type
class VaultExternalKeyManagerMetadataOauthMetadata(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientAppId":
            suggest = "client_app_id"
        elif key == "clientAppSecret":
            suggest = "client_app_secret"
        elif key == "idcsAccountNameUrl":
            suggest = "idcs_account_name_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VaultExternalKeyManagerMetadataOauthMetadata. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VaultExternalKeyManagerMetadataOauthMetadata.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VaultExternalKeyManagerMetadataOauthMetadata.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_app_id: str,
                 client_app_secret: str,
                 idcs_account_name_url: str):
        pulumi.set(__self__, "client_app_id", client_app_id)
        pulumi.set(__self__, "client_app_secret", client_app_secret)
        pulumi.set(__self__, "idcs_account_name_url", idcs_account_name_url)

    @property
    @pulumi.getter(name="clientAppId")
    def client_app_id(self) -> str:
        return pulumi.get(self, "client_app_id")

    @property
    @pulumi.getter(name="clientAppSecret")
    def client_app_secret(self) -> str:
        return pulumi.get(self, "client_app_secret")

    @property
    @pulumi.getter(name="idcsAccountNameUrl")
    def idcs_account_name_url(self) -> str:
        return pulumi.get(self, "idcs_account_name_url")


@pulumi.output_type
class VaultExternalKeyManagerMetadataSummary(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "externalVaultEndpointUrl":
            suggest = "external_vault_endpoint_url"
        elif key == "oauthMetadataSummaries":
            suggest = "oauth_metadata_summaries"
        elif key == "privateEndpointId":
            suggest = "private_endpoint_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VaultExternalKeyManagerMetadataSummary. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VaultExternalKeyManagerMetadataSummary.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VaultExternalKeyManagerMetadataSummary.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 external_vault_endpoint_url: Optional[str] = None,
                 oauth_metadata_summaries: Optional[Sequence['outputs.VaultExternalKeyManagerMetadataSummaryOauthMetadataSummary']] = None,
                 private_endpoint_id: Optional[str] = None,
                 vendor: Optional[str] = None):
        if external_vault_endpoint_url is not None:
            pulumi.set(__self__, "external_vault_endpoint_url", external_vault_endpoint_url)
        if oauth_metadata_summaries is not None:
            pulumi.set(__self__, "oauth_metadata_summaries", oauth_metadata_summaries)
        if private_endpoint_id is not None:
            pulumi.set(__self__, "private_endpoint_id", private_endpoint_id)
        if vendor is not None:
            pulumi.set(__self__, "vendor", vendor)

    @property
    @pulumi.getter(name="externalVaultEndpointUrl")
    def external_vault_endpoint_url(self) -> Optional[str]:
        return pulumi.get(self, "external_vault_endpoint_url")

    @property
    @pulumi.getter(name="oauthMetadataSummaries")
    def oauth_metadata_summaries(self) -> Optional[Sequence['outputs.VaultExternalKeyManagerMetadataSummaryOauthMetadataSummary']]:
        return pulumi.get(self, "oauth_metadata_summaries")

    @property
    @pulumi.getter(name="privateEndpointId")
    def private_endpoint_id(self) -> Optional[str]:
        return pulumi.get(self, "private_endpoint_id")

    @property
    @pulumi.getter
    def vendor(self) -> Optional[str]:
        return pulumi.get(self, "vendor")


@pulumi.output_type
class VaultExternalKeyManagerMetadataSummaryOauthMetadataSummary(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientAppId":
            suggest = "client_app_id"
        elif key == "idcsAccountNameUrl":
            suggest = "idcs_account_name_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VaultExternalKeyManagerMetadataSummaryOauthMetadataSummary. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VaultExternalKeyManagerMetadataSummaryOauthMetadataSummary.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VaultExternalKeyManagerMetadataSummaryOauthMetadataSummary.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_app_id: Optional[str] = None,
                 idcs_account_name_url: Optional[str] = None):
        if client_app_id is not None:
            pulumi.set(__self__, "client_app_id", client_app_id)
        if idcs_account_name_url is not None:
            pulumi.set(__self__, "idcs_account_name_url", idcs_account_name_url)

    @property
    @pulumi.getter(name="clientAppId")
    def client_app_id(self) -> Optional[str]:
        return pulumi.get(self, "client_app_id")

    @property
    @pulumi.getter(name="idcsAccountNameUrl")
    def idcs_account_name_url(self) -> Optional[str]:
        return pulumi.get(self, "idcs_account_name_url")


@pulumi.output_type
class VaultReplicaDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "replicationId":
            suggest = "replication_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VaultReplicaDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VaultReplicaDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VaultReplicaDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 replication_id: Optional[str] = None):
        if replication_id is not None:
            pulumi.set(__self__, "replication_id", replication_id)

    @property
    @pulumi.getter(name="replicationId")
    def replication_id(self) -> Optional[str]:
        return pulumi.get(self, "replication_id")


@pulumi.output_type
class VaultRestoreFromFile(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contentLength":
            suggest = "content_length"
        elif key == "restoreVaultFromFileDetails":
            suggest = "restore_vault_from_file_details"
        elif key == "contentMd5":
            suggest = "content_md5"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VaultRestoreFromFile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VaultRestoreFromFile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VaultRestoreFromFile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 content_length: str,
                 restore_vault_from_file_details: str,
                 content_md5: Optional[str] = None):
        pulumi.set(__self__, "content_length", content_length)
        pulumi.set(__self__, "restore_vault_from_file_details", restore_vault_from_file_details)
        if content_md5 is not None:
            pulumi.set(__self__, "content_md5", content_md5)

    @property
    @pulumi.getter(name="contentLength")
    def content_length(self) -> str:
        return pulumi.get(self, "content_length")

    @property
    @pulumi.getter(name="restoreVaultFromFileDetails")
    def restore_vault_from_file_details(self) -> str:
        return pulumi.get(self, "restore_vault_from_file_details")

    @property
    @pulumi.getter(name="contentMd5")
    def content_md5(self) -> Optional[str]:
        return pulumi.get(self, "content_md5")


@pulumi.output_type
class VaultRestoreFromObjectStore(dict):
    def __init__(__self__, *,
                 destination: str,
                 bucket: Optional[str] = None,
                 namespace: Optional[str] = None,
                 object: Optional[str] = None,
                 uri: Optional[str] = None):
        pulumi.set(__self__, "destination", destination)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if object is not None:
            pulumi.set(__self__, "object", object)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def destination(self) -> str:
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> Optional[str]:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")


@pulumi.output_type
class GetEkmsPrivateEndpointsEkmsPrivateEndpointResult(dict):
    def __init__(__self__, *,
                 ca_bundle: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 external_key_manager_ip: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 port: Optional[int] = None,
                 private_endpoint_ip: Optional[str] = None,
                 state: Optional[str] = None,
                 subnet_id: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if ca_bundle is not None:
            pulumi.set(__self__, "ca_bundle", ca_bundle)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if external_key_manager_ip is not None:
            pulumi.set(__self__, "external_key_manager_ip", external_key_manager_ip)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if private_endpoint_ip is not None:
            pulumi.set(__self__, "private_endpoint_ip", private_endpoint_ip)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="caBundle")
    def ca_bundle(self) -> Optional[str]:
        return pulumi.get(self, "ca_bundle")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="externalKeyManagerIp")
    def external_key_manager_ip(self) -> Optional[str]:
        return pulumi.get(self, "external_key_manager_ip")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="privateEndpointIp")
    def private_endpoint_ip(self) -> Optional[str]:
        return pulumi.get(self, "private_endpoint_ip")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetEkmsPrivateEndpointsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetKeyExternalKeyReferenceResult(dict):
    def __init__(__self__, *,
                 external_key_id: Optional[str] = None):
        if external_key_id is not None:
            pulumi.set(__self__, "external_key_id", external_key_id)

    @property
    @pulumi.getter(name="externalKeyId")
    def external_key_id(self) -> Optional[str]:
        return pulumi.get(self, "external_key_id")


@pulumi.output_type
class GetKeyExternalKeyReferenceDetailResult(dict):
    def __init__(__self__, *,
                 external_key_id: Optional[str] = None,
                 external_key_version_id: Optional[str] = None):
        if external_key_id is not None:
            pulumi.set(__self__, "external_key_id", external_key_id)
        if external_key_version_id is not None:
            pulumi.set(__self__, "external_key_version_id", external_key_version_id)

    @property
    @pulumi.getter(name="externalKeyId")
    def external_key_id(self) -> Optional[str]:
        return pulumi.get(self, "external_key_id")

    @property
    @pulumi.getter(name="externalKeyVersionId")
    def external_key_version_id(self) -> Optional[str]:
        return pulumi.get(self, "external_key_version_id")


@pulumi.output_type
class GetKeyKeyShapeResult(dict):
    def __init__(__self__, *,
                 algorithm: Optional[str] = None,
                 curve_id: Optional[str] = None,
                 length: Optional[int] = None):
        if algorithm is not None:
            pulumi.set(__self__, "algorithm", algorithm)
        if curve_id is not None:
            pulumi.set(__self__, "curve_id", curve_id)
        if length is not None:
            pulumi.set(__self__, "length", length)

    @property
    @pulumi.getter
    def algorithm(self) -> Optional[str]:
        return pulumi.get(self, "algorithm")

    @property
    @pulumi.getter(name="curveId")
    def curve_id(self) -> Optional[str]:
        return pulumi.get(self, "curve_id")

    @property
    @pulumi.getter
    def length(self) -> Optional[int]:
        return pulumi.get(self, "length")


@pulumi.output_type
class GetKeyReplicaDetailResult(dict):
    def __init__(__self__, *,
                 replication_id: Optional[str] = None):
        if replication_id is not None:
            pulumi.set(__self__, "replication_id", replication_id)

    @property
    @pulumi.getter(name="replicationId")
    def replication_id(self) -> Optional[str]:
        return pulumi.get(self, "replication_id")


@pulumi.output_type
class GetKeyRestoreFromFileResult(dict):
    def __init__(__self__, *,
                 content_length: Optional[str] = None,
                 content_md5: Optional[str] = None,
                 restore_key_from_file_details: Optional[str] = None):
        if content_length is not None:
            pulumi.set(__self__, "content_length", content_length)
        if content_md5 is not None:
            pulumi.set(__self__, "content_md5", content_md5)
        if restore_key_from_file_details is not None:
            pulumi.set(__self__, "restore_key_from_file_details", restore_key_from_file_details)

    @property
    @pulumi.getter(name="contentLength")
    def content_length(self) -> Optional[str]:
        return pulumi.get(self, "content_length")

    @property
    @pulumi.getter(name="contentMd5")
    def content_md5(self) -> Optional[str]:
        return pulumi.get(self, "content_md5")

    @property
    @pulumi.getter(name="restoreKeyFromFileDetails")
    def restore_key_from_file_details(self) -> Optional[str]:
        return pulumi.get(self, "restore_key_from_file_details")


@pulumi.output_type
class GetKeyRestoreFromObjectStoreResult(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 destination: Optional[str] = None,
                 namespace: Optional[str] = None,
                 object: Optional[str] = None,
                 uri: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if object is not None:
            pulumi.set(__self__, "object", object)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> Optional[str]:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")


@pulumi.output_type
class GetKeyVersionExternalKeyReferenceDetailResult(dict):
    def __init__(__self__, *,
                 external_key_id: Optional[str] = None,
                 external_key_version_id: Optional[str] = None):
        if external_key_id is not None:
            pulumi.set(__self__, "external_key_id", external_key_id)
        if external_key_version_id is not None:
            pulumi.set(__self__, "external_key_version_id", external_key_version_id)

    @property
    @pulumi.getter(name="externalKeyId")
    def external_key_id(self) -> Optional[str]:
        return pulumi.get(self, "external_key_id")

    @property
    @pulumi.getter(name="externalKeyVersionId")
    def external_key_version_id(self) -> Optional[str]:
        return pulumi.get(self, "external_key_version_id")


@pulumi.output_type
class GetKeyVersionReplicaDetailResult(dict):
    def __init__(__self__, *,
                 replication_id: Optional[str] = None):
        if replication_id is not None:
            pulumi.set(__self__, "replication_id", replication_id)

    @property
    @pulumi.getter(name="replicationId")
    def replication_id(self) -> Optional[str]:
        return pulumi.get(self, "replication_id")


@pulumi.output_type
class GetKeyVersionsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetKeyVersionsKeyVersionResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 external_key_reference_details: Optional[Sequence['outputs.GetKeyVersionsKeyVersionExternalKeyReferenceDetailResult']] = None,
                 external_key_version_id: Optional[str] = None,
                 id: Optional[str] = None,
                 is_primary: Optional[bool] = None,
                 key_id: Optional[str] = None,
                 key_version_id: Optional[str] = None,
                 management_endpoint: Optional[str] = None,
                 public_key: Optional[str] = None,
                 replica_details: Optional[Sequence['outputs.GetKeyVersionsKeyVersionReplicaDetailResult']] = None,
                 restored_from_key_id: Optional[str] = None,
                 restored_from_key_version_id: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_of_deletion: Optional[str] = None,
                 vault_id: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if external_key_reference_details is not None:
            pulumi.set(__self__, "external_key_reference_details", external_key_reference_details)
        if external_key_version_id is not None:
            pulumi.set(__self__, "external_key_version_id", external_key_version_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_primary is not None:
            pulumi.set(__self__, "is_primary", is_primary)
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if key_version_id is not None:
            pulumi.set(__self__, "key_version_id", key_version_id)
        if management_endpoint is not None:
            pulumi.set(__self__, "management_endpoint", management_endpoint)
        if public_key is not None:
            pulumi.set(__self__, "public_key", public_key)
        if replica_details is not None:
            pulumi.set(__self__, "replica_details", replica_details)
        if restored_from_key_id is not None:
            pulumi.set(__self__, "restored_from_key_id", restored_from_key_id)
        if restored_from_key_version_id is not None:
            pulumi.set(__self__, "restored_from_key_version_id", restored_from_key_version_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_of_deletion is not None:
            pulumi.set(__self__, "time_of_deletion", time_of_deletion)
        if vault_id is not None:
            pulumi.set(__self__, "vault_id", vault_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="externalKeyReferenceDetails")
    def external_key_reference_details(self) -> Optional[Sequence['outputs.GetKeyVersionsKeyVersionExternalKeyReferenceDetailResult']]:
        return pulumi.get(self, "external_key_reference_details")

    @property
    @pulumi.getter(name="externalKeyVersionId")
    def external_key_version_id(self) -> Optional[str]:
        return pulumi.get(self, "external_key_version_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isPrimary")
    def is_primary(self) -> Optional[bool]:
        return pulumi.get(self, "is_primary")

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[str]:
        return pulumi.get(self, "key_id")

    @property
    @pulumi.getter(name="keyVersionId")
    def key_version_id(self) -> Optional[str]:
        return pulumi.get(self, "key_version_id")

    @property
    @pulumi.getter(name="managementEndpoint")
    def management_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "management_endpoint")

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> Optional[str]:
        return pulumi.get(self, "public_key")

    @property
    @pulumi.getter(name="replicaDetails")
    def replica_details(self) -> Optional[Sequence['outputs.GetKeyVersionsKeyVersionReplicaDetailResult']]:
        return pulumi.get(self, "replica_details")

    @property
    @pulumi.getter(name="restoredFromKeyId")
    def restored_from_key_id(self) -> Optional[str]:
        return pulumi.get(self, "restored_from_key_id")

    @property
    @pulumi.getter(name="restoredFromKeyVersionId")
    def restored_from_key_version_id(self) -> Optional[str]:
        return pulumi.get(self, "restored_from_key_version_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeOfDeletion")
    def time_of_deletion(self) -> Optional[str]:
        return pulumi.get(self, "time_of_deletion")

    @property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> Optional[str]:
        return pulumi.get(self, "vault_id")


@pulumi.output_type
class GetKeyVersionsKeyVersionExternalKeyReferenceDetailResult(dict):
    def __init__(__self__, *,
                 external_key_id: Optional[str] = None,
                 external_key_version_id: Optional[str] = None):
        if external_key_id is not None:
            pulumi.set(__self__, "external_key_id", external_key_id)
        if external_key_version_id is not None:
            pulumi.set(__self__, "external_key_version_id", external_key_version_id)

    @property
    @pulumi.getter(name="externalKeyId")
    def external_key_id(self) -> Optional[str]:
        return pulumi.get(self, "external_key_id")

    @property
    @pulumi.getter(name="externalKeyVersionId")
    def external_key_version_id(self) -> Optional[str]:
        return pulumi.get(self, "external_key_version_id")


@pulumi.output_type
class GetKeyVersionsKeyVersionReplicaDetailResult(dict):
    def __init__(__self__, *,
                 replication_id: Optional[str] = None):
        if replication_id is not None:
            pulumi.set(__self__, "replication_id", replication_id)

    @property
    @pulumi.getter(name="replicationId")
    def replication_id(self) -> Optional[str]:
        return pulumi.get(self, "replication_id")


@pulumi.output_type
class GetKeysFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetKeysKeyResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 current_key_version: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 desired_state: Optional[str] = None,
                 display_name: Optional[str] = None,
                 external_key_reference_details: Optional[Sequence['outputs.GetKeysKeyExternalKeyReferenceDetailResult']] = None,
                 external_key_references: Optional[Sequence['outputs.GetKeysKeyExternalKeyReferenceResult']] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 is_primary: Optional[bool] = None,
                 key_shapes: Optional[Sequence['outputs.GetKeysKeyKeyShapeResult']] = None,
                 management_endpoint: Optional[str] = None,
                 protection_mode: Optional[str] = None,
                 replica_details: Optional[Sequence['outputs.GetKeysKeyReplicaDetailResult']] = None,
                 restore_from_files: Optional[Sequence['outputs.GetKeysKeyRestoreFromFileResult']] = None,
                 restore_from_object_stores: Optional[Sequence['outputs.GetKeysKeyRestoreFromObjectStoreResult']] = None,
                 restore_trigger: Optional[bool] = None,
                 restored_from_key_id: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_of_deletion: Optional[str] = None,
                 vault_id: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if current_key_version is not None:
            pulumi.set(__self__, "current_key_version", current_key_version)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if desired_state is not None:
            pulumi.set(__self__, "desired_state", desired_state)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if external_key_reference_details is not None:
            pulumi.set(__self__, "external_key_reference_details", external_key_reference_details)
        if external_key_references is not None:
            pulumi.set(__self__, "external_key_references", external_key_references)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_primary is not None:
            pulumi.set(__self__, "is_primary", is_primary)
        if key_shapes is not None:
            pulumi.set(__self__, "key_shapes", key_shapes)
        if management_endpoint is not None:
            pulumi.set(__self__, "management_endpoint", management_endpoint)
        if protection_mode is not None:
            pulumi.set(__self__, "protection_mode", protection_mode)
        if replica_details is not None:
            pulumi.set(__self__, "replica_details", replica_details)
        if restore_from_files is not None:
            pulumi.set(__self__, "restore_from_files", restore_from_files)
        if restore_from_object_stores is not None:
            pulumi.set(__self__, "restore_from_object_stores", restore_from_object_stores)
        if restore_trigger is not None:
            pulumi.set(__self__, "restore_trigger", restore_trigger)
        if restored_from_key_id is not None:
            pulumi.set(__self__, "restored_from_key_id", restored_from_key_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_of_deletion is not None:
            pulumi.set(__self__, "time_of_deletion", time_of_deletion)
        if vault_id is not None:
            pulumi.set(__self__, "vault_id", vault_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="currentKeyVersion")
    def current_key_version(self) -> Optional[str]:
        return pulumi.get(self, "current_key_version")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="desiredState")
    def desired_state(self) -> Optional[str]:
        return pulumi.get(self, "desired_state")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="externalKeyReferenceDetails")
    def external_key_reference_details(self) -> Optional[Sequence['outputs.GetKeysKeyExternalKeyReferenceDetailResult']]:
        return pulumi.get(self, "external_key_reference_details")

    @property
    @pulumi.getter(name="externalKeyReferences")
    def external_key_references(self) -> Optional[Sequence['outputs.GetKeysKeyExternalKeyReferenceResult']]:
        return pulumi.get(self, "external_key_references")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isPrimary")
    def is_primary(self) -> Optional[bool]:
        return pulumi.get(self, "is_primary")

    @property
    @pulumi.getter(name="keyShapes")
    def key_shapes(self) -> Optional[Sequence['outputs.GetKeysKeyKeyShapeResult']]:
        return pulumi.get(self, "key_shapes")

    @property
    @pulumi.getter(name="managementEndpoint")
    def management_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "management_endpoint")

    @property
    @pulumi.getter(name="protectionMode")
    def protection_mode(self) -> Optional[str]:
        return pulumi.get(self, "protection_mode")

    @property
    @pulumi.getter(name="replicaDetails")
    def replica_details(self) -> Optional[Sequence['outputs.GetKeysKeyReplicaDetailResult']]:
        return pulumi.get(self, "replica_details")

    @property
    @pulumi.getter(name="restoreFromFiles")
    def restore_from_files(self) -> Optional[Sequence['outputs.GetKeysKeyRestoreFromFileResult']]:
        return pulumi.get(self, "restore_from_files")

    @property
    @pulumi.getter(name="restoreFromObjectStores")
    def restore_from_object_stores(self) -> Optional[Sequence['outputs.GetKeysKeyRestoreFromObjectStoreResult']]:
        return pulumi.get(self, "restore_from_object_stores")

    @property
    @pulumi.getter(name="restoreTrigger")
    def restore_trigger(self) -> Optional[bool]:
        return pulumi.get(self, "restore_trigger")

    @property
    @pulumi.getter(name="restoredFromKeyId")
    def restored_from_key_id(self) -> Optional[str]:
        return pulumi.get(self, "restored_from_key_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeOfDeletion")
    def time_of_deletion(self) -> Optional[str]:
        return pulumi.get(self, "time_of_deletion")

    @property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> Optional[str]:
        return pulumi.get(self, "vault_id")


@pulumi.output_type
class GetKeysKeyExternalKeyReferenceResult(dict):
    def __init__(__self__, *,
                 external_key_id: Optional[str] = None):
        if external_key_id is not None:
            pulumi.set(__self__, "external_key_id", external_key_id)

    @property
    @pulumi.getter(name="externalKeyId")
    def external_key_id(self) -> Optional[str]:
        return pulumi.get(self, "external_key_id")


@pulumi.output_type
class GetKeysKeyExternalKeyReferenceDetailResult(dict):
    def __init__(__self__, *,
                 external_key_id: Optional[str] = None,
                 external_key_version_id: Optional[str] = None):
        if external_key_id is not None:
            pulumi.set(__self__, "external_key_id", external_key_id)
        if external_key_version_id is not None:
            pulumi.set(__self__, "external_key_version_id", external_key_version_id)

    @property
    @pulumi.getter(name="externalKeyId")
    def external_key_id(self) -> Optional[str]:
        return pulumi.get(self, "external_key_id")

    @property
    @pulumi.getter(name="externalKeyVersionId")
    def external_key_version_id(self) -> Optional[str]:
        return pulumi.get(self, "external_key_version_id")


@pulumi.output_type
class GetKeysKeyKeyShapeResult(dict):
    def __init__(__self__, *,
                 algorithm: Optional[str] = None,
                 curve_id: Optional[str] = None,
                 length: Optional[int] = None):
        if algorithm is not None:
            pulumi.set(__self__, "algorithm", algorithm)
        if curve_id is not None:
            pulumi.set(__self__, "curve_id", curve_id)
        if length is not None:
            pulumi.set(__self__, "length", length)

    @property
    @pulumi.getter
    def algorithm(self) -> Optional[str]:
        return pulumi.get(self, "algorithm")

    @property
    @pulumi.getter(name="curveId")
    def curve_id(self) -> Optional[str]:
        return pulumi.get(self, "curve_id")

    @property
    @pulumi.getter
    def length(self) -> Optional[int]:
        return pulumi.get(self, "length")


@pulumi.output_type
class GetKeysKeyReplicaDetailResult(dict):
    def __init__(__self__, *,
                 replication_id: Optional[str] = None):
        if replication_id is not None:
            pulumi.set(__self__, "replication_id", replication_id)

    @property
    @pulumi.getter(name="replicationId")
    def replication_id(self) -> Optional[str]:
        return pulumi.get(self, "replication_id")


@pulumi.output_type
class GetKeysKeyRestoreFromFileResult(dict):
    def __init__(__self__, *,
                 content_length: Optional[str] = None,
                 content_md5: Optional[str] = None,
                 restore_key_from_file_details: Optional[str] = None):
        if content_length is not None:
            pulumi.set(__self__, "content_length", content_length)
        if content_md5 is not None:
            pulumi.set(__self__, "content_md5", content_md5)
        if restore_key_from_file_details is not None:
            pulumi.set(__self__, "restore_key_from_file_details", restore_key_from_file_details)

    @property
    @pulumi.getter(name="contentLength")
    def content_length(self) -> Optional[str]:
        return pulumi.get(self, "content_length")

    @property
    @pulumi.getter(name="contentMd5")
    def content_md5(self) -> Optional[str]:
        return pulumi.get(self, "content_md5")

    @property
    @pulumi.getter(name="restoreKeyFromFileDetails")
    def restore_key_from_file_details(self) -> Optional[str]:
        return pulumi.get(self, "restore_key_from_file_details")


@pulumi.output_type
class GetKeysKeyRestoreFromObjectStoreResult(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 destination: Optional[str] = None,
                 namespace: Optional[str] = None,
                 object: Optional[str] = None,
                 uri: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if object is not None:
            pulumi.set(__self__, "object", object)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> Optional[str]:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")


@pulumi.output_type
class GetReplicationStatusReplicaDetailResult(dict):
    def __init__(__self__, *,
                 region: Optional[str] = None,
                 status: Optional[str] = None):
        if region is not None:
            pulumi.set(__self__, "region", region)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetVaultExternalKeyManagerMetadataResult(dict):
    def __init__(__self__, *,
                 external_vault_endpoint_url: Optional[str] = None,
                 oauth_metadatas: Optional[Sequence['outputs.GetVaultExternalKeyManagerMetadataOauthMetadataResult']] = None,
                 private_endpoint_id: Optional[str] = None):
        if external_vault_endpoint_url is not None:
            pulumi.set(__self__, "external_vault_endpoint_url", external_vault_endpoint_url)
        if oauth_metadatas is not None:
            pulumi.set(__self__, "oauth_metadatas", oauth_metadatas)
        if private_endpoint_id is not None:
            pulumi.set(__self__, "private_endpoint_id", private_endpoint_id)

    @property
    @pulumi.getter(name="externalVaultEndpointUrl")
    def external_vault_endpoint_url(self) -> Optional[str]:
        return pulumi.get(self, "external_vault_endpoint_url")

    @property
    @pulumi.getter(name="oauthMetadatas")
    def oauth_metadatas(self) -> Optional[Sequence['outputs.GetVaultExternalKeyManagerMetadataOauthMetadataResult']]:
        return pulumi.get(self, "oauth_metadatas")

    @property
    @pulumi.getter(name="privateEndpointId")
    def private_endpoint_id(self) -> Optional[str]:
        return pulumi.get(self, "private_endpoint_id")


@pulumi.output_type
class GetVaultExternalKeyManagerMetadataOauthMetadataResult(dict):
    def __init__(__self__, *,
                 client_app_id: Optional[str] = None,
                 client_app_secret: Optional[str] = None,
                 idcs_account_name_url: Optional[str] = None):
        if client_app_id is not None:
            pulumi.set(__self__, "client_app_id", client_app_id)
        if client_app_secret is not None:
            pulumi.set(__self__, "client_app_secret", client_app_secret)
        if idcs_account_name_url is not None:
            pulumi.set(__self__, "idcs_account_name_url", idcs_account_name_url)

    @property
    @pulumi.getter(name="clientAppId")
    def client_app_id(self) -> Optional[str]:
        return pulumi.get(self, "client_app_id")

    @property
    @pulumi.getter(name="clientAppSecret")
    def client_app_secret(self) -> Optional[str]:
        return pulumi.get(self, "client_app_secret")

    @property
    @pulumi.getter(name="idcsAccountNameUrl")
    def idcs_account_name_url(self) -> Optional[str]:
        return pulumi.get(self, "idcs_account_name_url")


@pulumi.output_type
class GetVaultExternalKeyManagerMetadataSummaryResult(dict):
    def __init__(__self__, *,
                 external_vault_endpoint_url: Optional[str] = None,
                 oauth_metadata_summaries: Optional[Sequence['outputs.GetVaultExternalKeyManagerMetadataSummaryOauthMetadataSummaryResult']] = None,
                 private_endpoint_id: Optional[str] = None,
                 vendor: Optional[str] = None):
        if external_vault_endpoint_url is not None:
            pulumi.set(__self__, "external_vault_endpoint_url", external_vault_endpoint_url)
        if oauth_metadata_summaries is not None:
            pulumi.set(__self__, "oauth_metadata_summaries", oauth_metadata_summaries)
        if private_endpoint_id is not None:
            pulumi.set(__self__, "private_endpoint_id", private_endpoint_id)
        if vendor is not None:
            pulumi.set(__self__, "vendor", vendor)

    @property
    @pulumi.getter(name="externalVaultEndpointUrl")
    def external_vault_endpoint_url(self) -> Optional[str]:
        return pulumi.get(self, "external_vault_endpoint_url")

    @property
    @pulumi.getter(name="oauthMetadataSummaries")
    def oauth_metadata_summaries(self) -> Optional[Sequence['outputs.GetVaultExternalKeyManagerMetadataSummaryOauthMetadataSummaryResult']]:
        return pulumi.get(self, "oauth_metadata_summaries")

    @property
    @pulumi.getter(name="privateEndpointId")
    def private_endpoint_id(self) -> Optional[str]:
        return pulumi.get(self, "private_endpoint_id")

    @property
    @pulumi.getter
    def vendor(self) -> Optional[str]:
        return pulumi.get(self, "vendor")


@pulumi.output_type
class GetVaultExternalKeyManagerMetadataSummaryOauthMetadataSummaryResult(dict):
    def __init__(__self__, *,
                 client_app_id: Optional[str] = None,
                 idcs_account_name_url: Optional[str] = None):
        if client_app_id is not None:
            pulumi.set(__self__, "client_app_id", client_app_id)
        if idcs_account_name_url is not None:
            pulumi.set(__self__, "idcs_account_name_url", idcs_account_name_url)

    @property
    @pulumi.getter(name="clientAppId")
    def client_app_id(self) -> Optional[str]:
        return pulumi.get(self, "client_app_id")

    @property
    @pulumi.getter(name="idcsAccountNameUrl")
    def idcs_account_name_url(self) -> Optional[str]:
        return pulumi.get(self, "idcs_account_name_url")


@pulumi.output_type
class GetVaultReplicaDetailResult(dict):
    def __init__(__self__, *,
                 replication_id: Optional[str] = None):
        if replication_id is not None:
            pulumi.set(__self__, "replication_id", replication_id)

    @property
    @pulumi.getter(name="replicationId")
    def replication_id(self) -> Optional[str]:
        return pulumi.get(self, "replication_id")


@pulumi.output_type
class GetVaultReplicasFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetVaultReplicasVaultReplicaResult(dict):
    def __init__(__self__, *,
                 crypto_endpoint: Optional[str] = None,
                 management_endpoint: Optional[str] = None,
                 region: Optional[str] = None,
                 status: Optional[str] = None):
        if crypto_endpoint is not None:
            pulumi.set(__self__, "crypto_endpoint", crypto_endpoint)
        if management_endpoint is not None:
            pulumi.set(__self__, "management_endpoint", management_endpoint)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="cryptoEndpoint")
    def crypto_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "crypto_endpoint")

    @property
    @pulumi.getter(name="managementEndpoint")
    def management_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "management_endpoint")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetVaultRestoreFromFileResult(dict):
    def __init__(__self__, *,
                 content_length: Optional[str] = None,
                 content_md5: Optional[str] = None,
                 restore_vault_from_file_details: Optional[str] = None):
        if content_length is not None:
            pulumi.set(__self__, "content_length", content_length)
        if content_md5 is not None:
            pulumi.set(__self__, "content_md5", content_md5)
        if restore_vault_from_file_details is not None:
            pulumi.set(__self__, "restore_vault_from_file_details", restore_vault_from_file_details)

    @property
    @pulumi.getter(name="contentLength")
    def content_length(self) -> Optional[str]:
        return pulumi.get(self, "content_length")

    @property
    @pulumi.getter(name="contentMd5")
    def content_md5(self) -> Optional[str]:
        return pulumi.get(self, "content_md5")

    @property
    @pulumi.getter(name="restoreVaultFromFileDetails")
    def restore_vault_from_file_details(self) -> Optional[str]:
        return pulumi.get(self, "restore_vault_from_file_details")


@pulumi.output_type
class GetVaultRestoreFromObjectStoreResult(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 destination: Optional[str] = None,
                 namespace: Optional[str] = None,
                 object: Optional[str] = None,
                 uri: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if object is not None:
            pulumi.set(__self__, "object", object)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> Optional[str]:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")


@pulumi.output_type
class GetVaultsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetVaultsVaultResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 crypto_endpoint: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 external_key_manager_metadata_summaries: Optional[Sequence['outputs.GetVaultsVaultExternalKeyManagerMetadataSummaryResult']] = None,
                 external_key_manager_metadatas: Optional[Sequence['outputs.GetVaultsVaultExternalKeyManagerMetadataResult']] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 is_primary: Optional[bool] = None,
                 management_endpoint: Optional[str] = None,
                 replica_details: Optional[Sequence['outputs.GetVaultsVaultReplicaDetailResult']] = None,
                 restore_from_files: Optional[Sequence['outputs.GetVaultsVaultRestoreFromFileResult']] = None,
                 restore_from_object_stores: Optional[Sequence['outputs.GetVaultsVaultRestoreFromObjectStoreResult']] = None,
                 restore_trigger: Optional[bool] = None,
                 restored_from_vault_id: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_of_deletion: Optional[str] = None,
                 vault_type: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if crypto_endpoint is not None:
            pulumi.set(__self__, "crypto_endpoint", crypto_endpoint)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if external_key_manager_metadata_summaries is not None:
            pulumi.set(__self__, "external_key_manager_metadata_summaries", external_key_manager_metadata_summaries)
        if external_key_manager_metadatas is not None:
            pulumi.set(__self__, "external_key_manager_metadatas", external_key_manager_metadatas)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_primary is not None:
            pulumi.set(__self__, "is_primary", is_primary)
        if management_endpoint is not None:
            pulumi.set(__self__, "management_endpoint", management_endpoint)
        if replica_details is not None:
            pulumi.set(__self__, "replica_details", replica_details)
        if restore_from_files is not None:
            pulumi.set(__self__, "restore_from_files", restore_from_files)
        if restore_from_object_stores is not None:
            pulumi.set(__self__, "restore_from_object_stores", restore_from_object_stores)
        if restore_trigger is not None:
            pulumi.set(__self__, "restore_trigger", restore_trigger)
        if restored_from_vault_id is not None:
            pulumi.set(__self__, "restored_from_vault_id", restored_from_vault_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_of_deletion is not None:
            pulumi.set(__self__, "time_of_deletion", time_of_deletion)
        if vault_type is not None:
            pulumi.set(__self__, "vault_type", vault_type)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="cryptoEndpoint")
    def crypto_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "crypto_endpoint")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="externalKeyManagerMetadataSummaries")
    def external_key_manager_metadata_summaries(self) -> Optional[Sequence['outputs.GetVaultsVaultExternalKeyManagerMetadataSummaryResult']]:
        return pulumi.get(self, "external_key_manager_metadata_summaries")

    @property
    @pulumi.getter(name="externalKeyManagerMetadatas")
    def external_key_manager_metadatas(self) -> Optional[Sequence['outputs.GetVaultsVaultExternalKeyManagerMetadataResult']]:
        return pulumi.get(self, "external_key_manager_metadatas")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isPrimary")
    def is_primary(self) -> Optional[bool]:
        return pulumi.get(self, "is_primary")

    @property
    @pulumi.getter(name="managementEndpoint")
    def management_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "management_endpoint")

    @property
    @pulumi.getter(name="replicaDetails")
    def replica_details(self) -> Optional[Sequence['outputs.GetVaultsVaultReplicaDetailResult']]:
        return pulumi.get(self, "replica_details")

    @property
    @pulumi.getter(name="restoreFromFiles")
    def restore_from_files(self) -> Optional[Sequence['outputs.GetVaultsVaultRestoreFromFileResult']]:
        return pulumi.get(self, "restore_from_files")

    @property
    @pulumi.getter(name="restoreFromObjectStores")
    def restore_from_object_stores(self) -> Optional[Sequence['outputs.GetVaultsVaultRestoreFromObjectStoreResult']]:
        return pulumi.get(self, "restore_from_object_stores")

    @property
    @pulumi.getter(name="restoreTrigger")
    def restore_trigger(self) -> Optional[bool]:
        return pulumi.get(self, "restore_trigger")

    @property
    @pulumi.getter(name="restoredFromVaultId")
    def restored_from_vault_id(self) -> Optional[str]:
        return pulumi.get(self, "restored_from_vault_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeOfDeletion")
    def time_of_deletion(self) -> Optional[str]:
        return pulumi.get(self, "time_of_deletion")

    @property
    @pulumi.getter(name="vaultType")
    def vault_type(self) -> Optional[str]:
        return pulumi.get(self, "vault_type")


@pulumi.output_type
class GetVaultsVaultExternalKeyManagerMetadataResult(dict):
    def __init__(__self__, *,
                 external_vault_endpoint_url: Optional[str] = None,
                 oauth_metadatas: Optional[Sequence['outputs.GetVaultsVaultExternalKeyManagerMetadataOauthMetadataResult']] = None,
                 private_endpoint_id: Optional[str] = None):
        if external_vault_endpoint_url is not None:
            pulumi.set(__self__, "external_vault_endpoint_url", external_vault_endpoint_url)
        if oauth_metadatas is not None:
            pulumi.set(__self__, "oauth_metadatas", oauth_metadatas)
        if private_endpoint_id is not None:
            pulumi.set(__self__, "private_endpoint_id", private_endpoint_id)

    @property
    @pulumi.getter(name="externalVaultEndpointUrl")
    def external_vault_endpoint_url(self) -> Optional[str]:
        return pulumi.get(self, "external_vault_endpoint_url")

    @property
    @pulumi.getter(name="oauthMetadatas")
    def oauth_metadatas(self) -> Optional[Sequence['outputs.GetVaultsVaultExternalKeyManagerMetadataOauthMetadataResult']]:
        return pulumi.get(self, "oauth_metadatas")

    @property
    @pulumi.getter(name="privateEndpointId")
    def private_endpoint_id(self) -> Optional[str]:
        return pulumi.get(self, "private_endpoint_id")


@pulumi.output_type
class GetVaultsVaultExternalKeyManagerMetadataOauthMetadataResult(dict):
    def __init__(__self__, *,
                 client_app_id: Optional[str] = None,
                 client_app_secret: Optional[str] = None,
                 idcs_account_name_url: Optional[str] = None):
        if client_app_id is not None:
            pulumi.set(__self__, "client_app_id", client_app_id)
        if client_app_secret is not None:
            pulumi.set(__self__, "client_app_secret", client_app_secret)
        if idcs_account_name_url is not None:
            pulumi.set(__self__, "idcs_account_name_url", idcs_account_name_url)

    @property
    @pulumi.getter(name="clientAppId")
    def client_app_id(self) -> Optional[str]:
        return pulumi.get(self, "client_app_id")

    @property
    @pulumi.getter(name="clientAppSecret")
    def client_app_secret(self) -> Optional[str]:
        return pulumi.get(self, "client_app_secret")

    @property
    @pulumi.getter(name="idcsAccountNameUrl")
    def idcs_account_name_url(self) -> Optional[str]:
        return pulumi.get(self, "idcs_account_name_url")


@pulumi.output_type
class GetVaultsVaultExternalKeyManagerMetadataSummaryResult(dict):
    def __init__(__self__, *,
                 external_vault_endpoint_url: Optional[str] = None,
                 oauth_metadata_summaries: Optional[Sequence['outputs.GetVaultsVaultExternalKeyManagerMetadataSummaryOauthMetadataSummaryResult']] = None,
                 private_endpoint_id: Optional[str] = None,
                 vendor: Optional[str] = None):
        if external_vault_endpoint_url is not None:
            pulumi.set(__self__, "external_vault_endpoint_url", external_vault_endpoint_url)
        if oauth_metadata_summaries is not None:
            pulumi.set(__self__, "oauth_metadata_summaries", oauth_metadata_summaries)
        if private_endpoint_id is not None:
            pulumi.set(__self__, "private_endpoint_id", private_endpoint_id)
        if vendor is not None:
            pulumi.set(__self__, "vendor", vendor)

    @property
    @pulumi.getter(name="externalVaultEndpointUrl")
    def external_vault_endpoint_url(self) -> Optional[str]:
        return pulumi.get(self, "external_vault_endpoint_url")

    @property
    @pulumi.getter(name="oauthMetadataSummaries")
    def oauth_metadata_summaries(self) -> Optional[Sequence['outputs.GetVaultsVaultExternalKeyManagerMetadataSummaryOauthMetadataSummaryResult']]:
        return pulumi.get(self, "oauth_metadata_summaries")

    @property
    @pulumi.getter(name="privateEndpointId")
    def private_endpoint_id(self) -> Optional[str]:
        return pulumi.get(self, "private_endpoint_id")

    @property
    @pulumi.getter
    def vendor(self) -> Optional[str]:
        return pulumi.get(self, "vendor")


@pulumi.output_type
class GetVaultsVaultExternalKeyManagerMetadataSummaryOauthMetadataSummaryResult(dict):
    def __init__(__self__, *,
                 client_app_id: Optional[str] = None,
                 idcs_account_name_url: Optional[str] = None):
        if client_app_id is not None:
            pulumi.set(__self__, "client_app_id", client_app_id)
        if idcs_account_name_url is not None:
            pulumi.set(__self__, "idcs_account_name_url", idcs_account_name_url)

    @property
    @pulumi.getter(name="clientAppId")
    def client_app_id(self) -> Optional[str]:
        return pulumi.get(self, "client_app_id")

    @property
    @pulumi.getter(name="idcsAccountNameUrl")
    def idcs_account_name_url(self) -> Optional[str]:
        return pulumi.get(self, "idcs_account_name_url")


@pulumi.output_type
class GetVaultsVaultReplicaDetailResult(dict):
    def __init__(__self__, *,
                 replication_id: Optional[str] = None):
        if replication_id is not None:
            pulumi.set(__self__, "replication_id", replication_id)

    @property
    @pulumi.getter(name="replicationId")
    def replication_id(self) -> Optional[str]:
        return pulumi.get(self, "replication_id")


@pulumi.output_type
class GetVaultsVaultRestoreFromFileResult(dict):
    def __init__(__self__, *,
                 content_length: Optional[str] = None,
                 content_md5: Optional[str] = None,
                 restore_vault_from_file_details: Optional[str] = None):
        if content_length is not None:
            pulumi.set(__self__, "content_length", content_length)
        if content_md5 is not None:
            pulumi.set(__self__, "content_md5", content_md5)
        if restore_vault_from_file_details is not None:
            pulumi.set(__self__, "restore_vault_from_file_details", restore_vault_from_file_details)

    @property
    @pulumi.getter(name="contentLength")
    def content_length(self) -> Optional[str]:
        return pulumi.get(self, "content_length")

    @property
    @pulumi.getter(name="contentMd5")
    def content_md5(self) -> Optional[str]:
        return pulumi.get(self, "content_md5")

    @property
    @pulumi.getter(name="restoreVaultFromFileDetails")
    def restore_vault_from_file_details(self) -> Optional[str]:
        return pulumi.get(self, "restore_vault_from_file_details")


@pulumi.output_type
class GetVaultsVaultRestoreFromObjectStoreResult(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 destination: Optional[str] = None,
                 namespace: Optional[str] = None,
                 object: Optional[str] = None,
                 uri: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if object is not None:
            pulumi.set(__self__, "object", object)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> Optional[str]:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")


