# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['VaultArgs', 'Vault']

@pulumi.input_type
class VaultArgs:
    def __init__(__self__, *,
                 compartment_id: pulumi.Input[str],
                 display_name: pulumi.Input[str],
                 vault_type: pulumi.Input[str],
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 external_key_manager_metadata: Optional[pulumi.Input['VaultExternalKeyManagerMetadataArgs']] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 restore_from_file: Optional[pulumi.Input['VaultRestoreFromFileArgs']] = None,
                 restore_from_object_store: Optional[pulumi.Input['VaultRestoreFromObjectStoreArgs']] = None,
                 restore_trigger: Optional[pulumi.Input[bool]] = None,
                 time_of_deletion: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Vault resource.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "vault_type", vault_type)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if external_key_manager_metadata is not None:
            pulumi.set(__self__, "external_key_manager_metadata", external_key_manager_metadata)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if restore_from_file is not None:
            pulumi.set(__self__, "restore_from_file", restore_from_file)
        if restore_from_object_store is not None:
            pulumi.set(__self__, "restore_from_object_store", restore_from_object_store)
        if restore_trigger is not None:
            pulumi.set(__self__, "restore_trigger", restore_trigger)
        if time_of_deletion is not None:
            pulumi.set(__self__, "time_of_deletion", time_of_deletion)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="vaultType")
    def vault_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "vault_type")

    @vault_type.setter
    def vault_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "vault_type", value)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "defined_tags")

    @defined_tags.setter
    def defined_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "defined_tags", value)

    @property
    @pulumi.getter(name="externalKeyManagerMetadata")
    def external_key_manager_metadata(self) -> Optional[pulumi.Input['VaultExternalKeyManagerMetadataArgs']]:
        return pulumi.get(self, "external_key_manager_metadata")

    @external_key_manager_metadata.setter
    def external_key_manager_metadata(self, value: Optional[pulumi.Input['VaultExternalKeyManagerMetadataArgs']]):
        pulumi.set(self, "external_key_manager_metadata", value)

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "freeform_tags")

    @freeform_tags.setter
    def freeform_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "freeform_tags", value)

    @property
    @pulumi.getter(name="restoreFromFile")
    def restore_from_file(self) -> Optional[pulumi.Input['VaultRestoreFromFileArgs']]:
        return pulumi.get(self, "restore_from_file")

    @restore_from_file.setter
    def restore_from_file(self, value: Optional[pulumi.Input['VaultRestoreFromFileArgs']]):
        pulumi.set(self, "restore_from_file", value)

    @property
    @pulumi.getter(name="restoreFromObjectStore")
    def restore_from_object_store(self) -> Optional[pulumi.Input['VaultRestoreFromObjectStoreArgs']]:
        return pulumi.get(self, "restore_from_object_store")

    @restore_from_object_store.setter
    def restore_from_object_store(self, value: Optional[pulumi.Input['VaultRestoreFromObjectStoreArgs']]):
        pulumi.set(self, "restore_from_object_store", value)

    @property
    @pulumi.getter(name="restoreTrigger")
    def restore_trigger(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "restore_trigger")

    @restore_trigger.setter
    def restore_trigger(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "restore_trigger", value)

    @property
    @pulumi.getter(name="timeOfDeletion")
    def time_of_deletion(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_of_deletion")

    @time_of_deletion.setter
    def time_of_deletion(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_of_deletion", value)


@pulumi.input_type
class _VaultState:
    def __init__(__self__, *,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 crypto_endpoint: Optional[pulumi.Input[str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 external_key_manager_metadata: Optional[pulumi.Input['VaultExternalKeyManagerMetadataArgs']] = None,
                 external_key_manager_metadata_summaries: Optional[pulumi.Input[Sequence[pulumi.Input['VaultExternalKeyManagerMetadataSummaryArgs']]]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 is_primary: Optional[pulumi.Input[bool]] = None,
                 management_endpoint: Optional[pulumi.Input[str]] = None,
                 replica_details: Optional[pulumi.Input[Sequence[pulumi.Input['VaultReplicaDetailArgs']]]] = None,
                 restore_from_file: Optional[pulumi.Input['VaultRestoreFromFileArgs']] = None,
                 restore_from_object_store: Optional[pulumi.Input['VaultRestoreFromObjectStoreArgs']] = None,
                 restore_trigger: Optional[pulumi.Input[bool]] = None,
                 restored_from_vault_id: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 time_created: Optional[pulumi.Input[str]] = None,
                 time_of_deletion: Optional[pulumi.Input[str]] = None,
                 vault_type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Vault resources.
        """
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if crypto_endpoint is not None:
            pulumi.set(__self__, "crypto_endpoint", crypto_endpoint)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if external_key_manager_metadata is not None:
            pulumi.set(__self__, "external_key_manager_metadata", external_key_manager_metadata)
        if external_key_manager_metadata_summaries is not None:
            pulumi.set(__self__, "external_key_manager_metadata_summaries", external_key_manager_metadata_summaries)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if is_primary is not None:
            pulumi.set(__self__, "is_primary", is_primary)
        if management_endpoint is not None:
            pulumi.set(__self__, "management_endpoint", management_endpoint)
        if replica_details is not None:
            pulumi.set(__self__, "replica_details", replica_details)
        if restore_from_file is not None:
            pulumi.set(__self__, "restore_from_file", restore_from_file)
        if restore_from_object_store is not None:
            pulumi.set(__self__, "restore_from_object_store", restore_from_object_store)
        if restore_trigger is not None:
            pulumi.set(__self__, "restore_trigger", restore_trigger)
        if restored_from_vault_id is not None:
            pulumi.set(__self__, "restored_from_vault_id", restored_from_vault_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_of_deletion is not None:
            pulumi.set(__self__, "time_of_deletion", time_of_deletion)
        if vault_type is not None:
            pulumi.set(__self__, "vault_type", vault_type)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter(name="cryptoEndpoint")
    def crypto_endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "crypto_endpoint")

    @crypto_endpoint.setter
    def crypto_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "crypto_endpoint", value)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "defined_tags")

    @defined_tags.setter
    def defined_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "defined_tags", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="externalKeyManagerMetadata")
    def external_key_manager_metadata(self) -> Optional[pulumi.Input['VaultExternalKeyManagerMetadataArgs']]:
        return pulumi.get(self, "external_key_manager_metadata")

    @external_key_manager_metadata.setter
    def external_key_manager_metadata(self, value: Optional[pulumi.Input['VaultExternalKeyManagerMetadataArgs']]):
        pulumi.set(self, "external_key_manager_metadata", value)

    @property
    @pulumi.getter(name="externalKeyManagerMetadataSummaries")
    def external_key_manager_metadata_summaries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VaultExternalKeyManagerMetadataSummaryArgs']]]]:
        return pulumi.get(self, "external_key_manager_metadata_summaries")

    @external_key_manager_metadata_summaries.setter
    def external_key_manager_metadata_summaries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VaultExternalKeyManagerMetadataSummaryArgs']]]]):
        pulumi.set(self, "external_key_manager_metadata_summaries", value)

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "freeform_tags")

    @freeform_tags.setter
    def freeform_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "freeform_tags", value)

    @property
    @pulumi.getter(name="isPrimary")
    def is_primary(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_primary")

    @is_primary.setter
    def is_primary(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_primary", value)

    @property
    @pulumi.getter(name="managementEndpoint")
    def management_endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "management_endpoint")

    @management_endpoint.setter
    def management_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "management_endpoint", value)

    @property
    @pulumi.getter(name="replicaDetails")
    def replica_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VaultReplicaDetailArgs']]]]:
        return pulumi.get(self, "replica_details")

    @replica_details.setter
    def replica_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VaultReplicaDetailArgs']]]]):
        pulumi.set(self, "replica_details", value)

    @property
    @pulumi.getter(name="restoreFromFile")
    def restore_from_file(self) -> Optional[pulumi.Input['VaultRestoreFromFileArgs']]:
        return pulumi.get(self, "restore_from_file")

    @restore_from_file.setter
    def restore_from_file(self, value: Optional[pulumi.Input['VaultRestoreFromFileArgs']]):
        pulumi.set(self, "restore_from_file", value)

    @property
    @pulumi.getter(name="restoreFromObjectStore")
    def restore_from_object_store(self) -> Optional[pulumi.Input['VaultRestoreFromObjectStoreArgs']]:
        return pulumi.get(self, "restore_from_object_store")

    @restore_from_object_store.setter
    def restore_from_object_store(self, value: Optional[pulumi.Input['VaultRestoreFromObjectStoreArgs']]):
        pulumi.set(self, "restore_from_object_store", value)

    @property
    @pulumi.getter(name="restoreTrigger")
    def restore_trigger(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "restore_trigger")

    @restore_trigger.setter
    def restore_trigger(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "restore_trigger", value)

    @property
    @pulumi.getter(name="restoredFromVaultId")
    def restored_from_vault_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "restored_from_vault_id")

    @restored_from_vault_id.setter
    def restored_from_vault_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "restored_from_vault_id", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_created")

    @time_created.setter
    def time_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_created", value)

    @property
    @pulumi.getter(name="timeOfDeletion")
    def time_of_deletion(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_of_deletion")

    @time_of_deletion.setter
    def time_of_deletion(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_of_deletion", value)

    @property
    @pulumi.getter(name="vaultType")
    def vault_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vault_type")

    @vault_type.setter
    def vault_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vault_type", value)


class Vault(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 external_key_manager_metadata: Optional[pulumi.Input[pulumi.InputType['VaultExternalKeyManagerMetadataArgs']]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 restore_from_file: Optional[pulumi.Input[pulumi.InputType['VaultRestoreFromFileArgs']]] = None,
                 restore_from_object_store: Optional[pulumi.Input[pulumi.InputType['VaultRestoreFromObjectStoreArgs']]] = None,
                 restore_trigger: Optional[pulumi.Input[bool]] = None,
                 time_of_deletion: Optional[pulumi.Input[str]] = None,
                 vault_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Vault resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VaultArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Vault resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param VaultArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VaultArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 external_key_manager_metadata: Optional[pulumi.Input[pulumi.InputType['VaultExternalKeyManagerMetadataArgs']]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 restore_from_file: Optional[pulumi.Input[pulumi.InputType['VaultRestoreFromFileArgs']]] = None,
                 restore_from_object_store: Optional[pulumi.Input[pulumi.InputType['VaultRestoreFromObjectStoreArgs']]] = None,
                 restore_trigger: Optional[pulumi.Input[bool]] = None,
                 time_of_deletion: Optional[pulumi.Input[str]] = None,
                 vault_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VaultArgs.__new__(VaultArgs)

            if compartment_id is None and not opts.urn:
                raise TypeError("Missing required property 'compartment_id'")
            __props__.__dict__["compartment_id"] = compartment_id
            __props__.__dict__["defined_tags"] = defined_tags
            if display_name is None and not opts.urn:
                raise TypeError("Missing required property 'display_name'")
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["external_key_manager_metadata"] = external_key_manager_metadata
            __props__.__dict__["freeform_tags"] = freeform_tags
            __props__.__dict__["restore_from_file"] = restore_from_file
            __props__.__dict__["restore_from_object_store"] = restore_from_object_store
            __props__.__dict__["restore_trigger"] = restore_trigger
            __props__.__dict__["time_of_deletion"] = time_of_deletion
            if vault_type is None and not opts.urn:
                raise TypeError("Missing required property 'vault_type'")
            __props__.__dict__["vault_type"] = vault_type
            __props__.__dict__["crypto_endpoint"] = None
            __props__.__dict__["external_key_manager_metadata_summaries"] = None
            __props__.__dict__["is_primary"] = None
            __props__.__dict__["management_endpoint"] = None
            __props__.__dict__["replica_details"] = None
            __props__.__dict__["restored_from_vault_id"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["time_created"] = None
        super(Vault, __self__).__init__(
            'oci:Kms/vault:Vault',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            compartment_id: Optional[pulumi.Input[str]] = None,
            crypto_endpoint: Optional[pulumi.Input[str]] = None,
            defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            external_key_manager_metadata: Optional[pulumi.Input[pulumi.InputType['VaultExternalKeyManagerMetadataArgs']]] = None,
            external_key_manager_metadata_summaries: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VaultExternalKeyManagerMetadataSummaryArgs']]]]] = None,
            freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            is_primary: Optional[pulumi.Input[bool]] = None,
            management_endpoint: Optional[pulumi.Input[str]] = None,
            replica_details: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VaultReplicaDetailArgs']]]]] = None,
            restore_from_file: Optional[pulumi.Input[pulumi.InputType['VaultRestoreFromFileArgs']]] = None,
            restore_from_object_store: Optional[pulumi.Input[pulumi.InputType['VaultRestoreFromObjectStoreArgs']]] = None,
            restore_trigger: Optional[pulumi.Input[bool]] = None,
            restored_from_vault_id: Optional[pulumi.Input[str]] = None,
            state: Optional[pulumi.Input[str]] = None,
            time_created: Optional[pulumi.Input[str]] = None,
            time_of_deletion: Optional[pulumi.Input[str]] = None,
            vault_type: Optional[pulumi.Input[str]] = None) -> 'Vault':
        """
        Get an existing Vault resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VaultState.__new__(_VaultState)

        __props__.__dict__["compartment_id"] = compartment_id
        __props__.__dict__["crypto_endpoint"] = crypto_endpoint
        __props__.__dict__["defined_tags"] = defined_tags
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["external_key_manager_metadata"] = external_key_manager_metadata
        __props__.__dict__["external_key_manager_metadata_summaries"] = external_key_manager_metadata_summaries
        __props__.__dict__["freeform_tags"] = freeform_tags
        __props__.__dict__["is_primary"] = is_primary
        __props__.__dict__["management_endpoint"] = management_endpoint
        __props__.__dict__["replica_details"] = replica_details
        __props__.__dict__["restore_from_file"] = restore_from_file
        __props__.__dict__["restore_from_object_store"] = restore_from_object_store
        __props__.__dict__["restore_trigger"] = restore_trigger
        __props__.__dict__["restored_from_vault_id"] = restored_from_vault_id
        __props__.__dict__["state"] = state
        __props__.__dict__["time_created"] = time_created
        __props__.__dict__["time_of_deletion"] = time_of_deletion
        __props__.__dict__["vault_type"] = vault_type
        return Vault(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="cryptoEndpoint")
    def crypto_endpoint(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "crypto_endpoint")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="externalKeyManagerMetadata")
    def external_key_manager_metadata(self) -> pulumi.Output[Optional['outputs.VaultExternalKeyManagerMetadata']]:
        return pulumi.get(self, "external_key_manager_metadata")

    @property
    @pulumi.getter(name="externalKeyManagerMetadataSummaries")
    def external_key_manager_metadata_summaries(self) -> pulumi.Output[Optional[Sequence['outputs.VaultExternalKeyManagerMetadataSummary']]]:
        return pulumi.get(self, "external_key_manager_metadata_summaries")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="isPrimary")
    def is_primary(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "is_primary")

    @property
    @pulumi.getter(name="managementEndpoint")
    def management_endpoint(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "management_endpoint")

    @property
    @pulumi.getter(name="replicaDetails")
    def replica_details(self) -> pulumi.Output[Optional[Sequence['outputs.VaultReplicaDetail']]]:
        return pulumi.get(self, "replica_details")

    @property
    @pulumi.getter(name="restoreFromFile")
    def restore_from_file(self) -> pulumi.Output[Optional['outputs.VaultRestoreFromFile']]:
        return pulumi.get(self, "restore_from_file")

    @property
    @pulumi.getter(name="restoreFromObjectStore")
    def restore_from_object_store(self) -> pulumi.Output[Optional['outputs.VaultRestoreFromObjectStore']]:
        return pulumi.get(self, "restore_from_object_store")

    @property
    @pulumi.getter(name="restoreTrigger")
    def restore_trigger(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "restore_trigger")

    @property
    @pulumi.getter(name="restoredFromVaultId")
    def restored_from_vault_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "restored_from_vault_id")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeOfDeletion")
    def time_of_deletion(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "time_of_deletion")

    @property
    @pulumi.getter(name="vaultType")
    def vault_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "vault_type")

