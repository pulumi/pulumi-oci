# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ProductLicenseImage',
    'GetLicenseRecordsFilterResult',
    'GetLicenseRecordsLicenseRecordCollectionResult',
    'GetLicenseRecordsLicenseRecordCollectionItemResult',
    'GetProductLicenseConsumersItemResult',
    'GetProductLicenseConsumersItemMissingProductResult',
    'GetProductLicenseImageResult',
    'GetProductLicensesFilterResult',
    'GetProductLicensesProductLicenseCollectionResult',
    'GetProductLicensesProductLicenseCollectionItemResult',
    'GetProductLicensesProductLicenseCollectionItemImageResult',
    'GetTopUtilizedProductLicensesItemResult',
    'GetTopUtilizedResourcesItemResult',
]

@pulumi.output_type
class ProductLicenseImage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "listingId":
            suggest = "listing_id"
        elif key == "packageVersion":
            suggest = "package_version"
        elif key == "listingName":
            suggest = "listing_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProductLicenseImage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProductLicenseImage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProductLicenseImage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 listing_id: str,
                 package_version: str,
                 id: Optional[str] = None,
                 listing_name: Optional[str] = None,
                 publisher: Optional[str] = None):
        pulumi.set(__self__, "listing_id", listing_id)
        pulumi.set(__self__, "package_version", package_version)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if listing_name is not None:
            pulumi.set(__self__, "listing_name", listing_name)
        if publisher is not None:
            pulumi.set(__self__, "publisher", publisher)

    @property
    @pulumi.getter(name="listingId")
    def listing_id(self) -> str:
        return pulumi.get(self, "listing_id")

    @property
    @pulumi.getter(name="packageVersion")
    def package_version(self) -> str:
        return pulumi.get(self, "package_version")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="listingName")
    def listing_name(self) -> Optional[str]:
        return pulumi.get(self, "listing_name")

    @property
    @pulumi.getter
    def publisher(self) -> Optional[str]:
        return pulumi.get(self, "publisher")


@pulumi.output_type
class GetLicenseRecordsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetLicenseRecordsLicenseRecordCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetLicenseRecordsLicenseRecordCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetLicenseRecordsLicenseRecordCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetLicenseRecordsLicenseRecordCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 expiration_date: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 is_perpetual: Optional[bool] = None,
                 is_unlimited: Optional[bool] = None,
                 license_count: Optional[int] = None,
                 license_unit: Optional[str] = None,
                 product_id: Optional[str] = None,
                 product_license: Optional[str] = None,
                 product_license_id: Optional[str] = None,
                 state: Optional[str] = None,
                 support_end_date: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if expiration_date is not None:
            pulumi.set(__self__, "expiration_date", expiration_date)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_perpetual is not None:
            pulumi.set(__self__, "is_perpetual", is_perpetual)
        if is_unlimited is not None:
            pulumi.set(__self__, "is_unlimited", is_unlimited)
        if license_count is not None:
            pulumi.set(__self__, "license_count", license_count)
        if license_unit is not None:
            pulumi.set(__self__, "license_unit", license_unit)
        if product_id is not None:
            pulumi.set(__self__, "product_id", product_id)
        if product_license is not None:
            pulumi.set(__self__, "product_license", product_license)
        if product_license_id is not None:
            pulumi.set(__self__, "product_license_id", product_license_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if support_end_date is not None:
            pulumi.set(__self__, "support_end_date", support_end_date)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="expirationDate")
    def expiration_date(self) -> Optional[str]:
        return pulumi.get(self, "expiration_date")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isPerpetual")
    def is_perpetual(self) -> Optional[bool]:
        return pulumi.get(self, "is_perpetual")

    @property
    @pulumi.getter(name="isUnlimited")
    def is_unlimited(self) -> Optional[bool]:
        return pulumi.get(self, "is_unlimited")

    @property
    @pulumi.getter(name="licenseCount")
    def license_count(self) -> Optional[int]:
        return pulumi.get(self, "license_count")

    @property
    @pulumi.getter(name="licenseUnit")
    def license_unit(self) -> Optional[str]:
        return pulumi.get(self, "license_unit")

    @property
    @pulumi.getter(name="productId")
    def product_id(self) -> Optional[str]:
        return pulumi.get(self, "product_id")

    @property
    @pulumi.getter(name="productLicense")
    def product_license(self) -> Optional[str]:
        return pulumi.get(self, "product_license")

    @property
    @pulumi.getter(name="productLicenseId")
    def product_license_id(self) -> Optional[str]:
        return pulumi.get(self, "product_license_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="supportEndDate")
    def support_end_date(self) -> Optional[str]:
        return pulumi.get(self, "support_end_date")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetProductLicenseConsumersItemResult(dict):
    def __init__(__self__, *,
                 are_all_options_available: Optional[bool] = None,
                 is_base_license_available: Optional[bool] = None,
                 license_unit_type: Optional[str] = None,
                 license_units_consumed: Optional[float] = None,
                 missing_products: Optional[Sequence['outputs.GetProductLicenseConsumersItemMissingProductResult']] = None,
                 product_name: Optional[str] = None,
                 resource_compartment_id: Optional[str] = None,
                 resource_compartment_name: Optional[str] = None,
                 resource_id: Optional[str] = None,
                 resource_name: Optional[str] = None,
                 resource_unit_count: Optional[float] = None,
                 resource_unit_type: Optional[str] = None):
        if are_all_options_available is not None:
            pulumi.set(__self__, "are_all_options_available", are_all_options_available)
        if is_base_license_available is not None:
            pulumi.set(__self__, "is_base_license_available", is_base_license_available)
        if license_unit_type is not None:
            pulumi.set(__self__, "license_unit_type", license_unit_type)
        if license_units_consumed is not None:
            pulumi.set(__self__, "license_units_consumed", license_units_consumed)
        if missing_products is not None:
            pulumi.set(__self__, "missing_products", missing_products)
        if product_name is not None:
            pulumi.set(__self__, "product_name", product_name)
        if resource_compartment_id is not None:
            pulumi.set(__self__, "resource_compartment_id", resource_compartment_id)
        if resource_compartment_name is not None:
            pulumi.set(__self__, "resource_compartment_name", resource_compartment_name)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if resource_unit_count is not None:
            pulumi.set(__self__, "resource_unit_count", resource_unit_count)
        if resource_unit_type is not None:
            pulumi.set(__self__, "resource_unit_type", resource_unit_type)

    @property
    @pulumi.getter(name="areAllOptionsAvailable")
    def are_all_options_available(self) -> Optional[bool]:
        return pulumi.get(self, "are_all_options_available")

    @property
    @pulumi.getter(name="isBaseLicenseAvailable")
    def is_base_license_available(self) -> Optional[bool]:
        return pulumi.get(self, "is_base_license_available")

    @property
    @pulumi.getter(name="licenseUnitType")
    def license_unit_type(self) -> Optional[str]:
        return pulumi.get(self, "license_unit_type")

    @property
    @pulumi.getter(name="licenseUnitsConsumed")
    def license_units_consumed(self) -> Optional[float]:
        return pulumi.get(self, "license_units_consumed")

    @property
    @pulumi.getter(name="missingProducts")
    def missing_products(self) -> Optional[Sequence['outputs.GetProductLicenseConsumersItemMissingProductResult']]:
        return pulumi.get(self, "missing_products")

    @property
    @pulumi.getter(name="productName")
    def product_name(self) -> Optional[str]:
        return pulumi.get(self, "product_name")

    @property
    @pulumi.getter(name="resourceCompartmentId")
    def resource_compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_compartment_id")

    @property
    @pulumi.getter(name="resourceCompartmentName")
    def resource_compartment_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_compartment_name")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_name")

    @property
    @pulumi.getter(name="resourceUnitCount")
    def resource_unit_count(self) -> Optional[float]:
        return pulumi.get(self, "resource_unit_count")

    @property
    @pulumi.getter(name="resourceUnitType")
    def resource_unit_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_unit_type")


@pulumi.output_type
class GetProductLicenseConsumersItemMissingProductResult(dict):
    def __init__(__self__, *,
                 category: Optional[str] = None,
                 count: Optional[float] = None,
                 name: Optional[str] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if count is not None:
            pulumi.set(__self__, "count", count)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def count(self) -> Optional[float]:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetProductLicenseImageResult(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 listing_id: Optional[str] = None,
                 listing_name: Optional[str] = None,
                 package_version: Optional[str] = None,
                 publisher: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if listing_id is not None:
            pulumi.set(__self__, "listing_id", listing_id)
        if listing_name is not None:
            pulumi.set(__self__, "listing_name", listing_name)
        if package_version is not None:
            pulumi.set(__self__, "package_version", package_version)
        if publisher is not None:
            pulumi.set(__self__, "publisher", publisher)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="listingId")
    def listing_id(self) -> Optional[str]:
        return pulumi.get(self, "listing_id")

    @property
    @pulumi.getter(name="listingName")
    def listing_name(self) -> Optional[str]:
        return pulumi.get(self, "listing_name")

    @property
    @pulumi.getter(name="packageVersion")
    def package_version(self) -> Optional[str]:
        return pulumi.get(self, "package_version")

    @property
    @pulumi.getter
    def publisher(self) -> Optional[str]:
        return pulumi.get(self, "publisher")


@pulumi.output_type
class GetProductLicensesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetProductLicensesProductLicenseCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetProductLicensesProductLicenseCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetProductLicensesProductLicenseCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetProductLicensesProductLicenseCollectionItemResult(dict):
    def __init__(__self__, *,
                 active_license_record_count: Optional[int] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 images: Optional[Sequence['outputs.GetProductLicensesProductLicenseCollectionItemImageResult']] = None,
                 is_over_subscribed: Optional[bool] = None,
                 is_unlimited: Optional[bool] = None,
                 is_vendor_oracle: Optional[bool] = None,
                 license_unit: Optional[str] = None,
                 state: Optional[str] = None,
                 status: Optional[str] = None,
                 status_description: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 total_active_license_unit_count: Optional[int] = None,
                 total_license_record_count: Optional[int] = None,
                 total_license_units_consumed: Optional[float] = None,
                 vendor_name: Optional[str] = None):
        if active_license_record_count is not None:
            pulumi.set(__self__, "active_license_record_count", active_license_record_count)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if is_over_subscribed is not None:
            pulumi.set(__self__, "is_over_subscribed", is_over_subscribed)
        if is_unlimited is not None:
            pulumi.set(__self__, "is_unlimited", is_unlimited)
        if is_vendor_oracle is not None:
            pulumi.set(__self__, "is_vendor_oracle", is_vendor_oracle)
        if license_unit is not None:
            pulumi.set(__self__, "license_unit", license_unit)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if status_description is not None:
            pulumi.set(__self__, "status_description", status_description)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if total_active_license_unit_count is not None:
            pulumi.set(__self__, "total_active_license_unit_count", total_active_license_unit_count)
        if total_license_record_count is not None:
            pulumi.set(__self__, "total_license_record_count", total_license_record_count)
        if total_license_units_consumed is not None:
            pulumi.set(__self__, "total_license_units_consumed", total_license_units_consumed)
        if vendor_name is not None:
            pulumi.set(__self__, "vendor_name", vendor_name)

    @property
    @pulumi.getter(name="activeLicenseRecordCount")
    def active_license_record_count(self) -> Optional[int]:
        return pulumi.get(self, "active_license_record_count")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence['outputs.GetProductLicensesProductLicenseCollectionItemImageResult']]:
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="isOverSubscribed")
    def is_over_subscribed(self) -> Optional[bool]:
        return pulumi.get(self, "is_over_subscribed")

    @property
    @pulumi.getter(name="isUnlimited")
    def is_unlimited(self) -> Optional[bool]:
        return pulumi.get(self, "is_unlimited")

    @property
    @pulumi.getter(name="isVendorOracle")
    def is_vendor_oracle(self) -> Optional[bool]:
        return pulumi.get(self, "is_vendor_oracle")

    @property
    @pulumi.getter(name="licenseUnit")
    def license_unit(self) -> Optional[str]:
        return pulumi.get(self, "license_unit")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusDescription")
    def status_description(self) -> Optional[str]:
        return pulumi.get(self, "status_description")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="totalActiveLicenseUnitCount")
    def total_active_license_unit_count(self) -> Optional[int]:
        return pulumi.get(self, "total_active_license_unit_count")

    @property
    @pulumi.getter(name="totalLicenseRecordCount")
    def total_license_record_count(self) -> Optional[int]:
        return pulumi.get(self, "total_license_record_count")

    @property
    @pulumi.getter(name="totalLicenseUnitsConsumed")
    def total_license_units_consumed(self) -> Optional[float]:
        return pulumi.get(self, "total_license_units_consumed")

    @property
    @pulumi.getter(name="vendorName")
    def vendor_name(self) -> Optional[str]:
        return pulumi.get(self, "vendor_name")


@pulumi.output_type
class GetProductLicensesProductLicenseCollectionItemImageResult(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 listing_id: Optional[str] = None,
                 listing_name: Optional[str] = None,
                 package_version: Optional[str] = None,
                 publisher: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if listing_id is not None:
            pulumi.set(__self__, "listing_id", listing_id)
        if listing_name is not None:
            pulumi.set(__self__, "listing_name", listing_name)
        if package_version is not None:
            pulumi.set(__self__, "package_version", package_version)
        if publisher is not None:
            pulumi.set(__self__, "publisher", publisher)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="listingId")
    def listing_id(self) -> Optional[str]:
        return pulumi.get(self, "listing_id")

    @property
    @pulumi.getter(name="listingName")
    def listing_name(self) -> Optional[str]:
        return pulumi.get(self, "listing_name")

    @property
    @pulumi.getter(name="packageVersion")
    def package_version(self) -> Optional[str]:
        return pulumi.get(self, "package_version")

    @property
    @pulumi.getter
    def publisher(self) -> Optional[str]:
        return pulumi.get(self, "publisher")


@pulumi.output_type
class GetTopUtilizedProductLicensesItemResult(dict):
    def __init__(__self__, *,
                 is_unlimited: Optional[bool] = None,
                 product_license_id: Optional[str] = None,
                 product_type: Optional[str] = None,
                 status: Optional[str] = None,
                 total_license_unit_count: Optional[int] = None,
                 total_units_consumed: Optional[float] = None,
                 unit_type: Optional[str] = None):
        if is_unlimited is not None:
            pulumi.set(__self__, "is_unlimited", is_unlimited)
        if product_license_id is not None:
            pulumi.set(__self__, "product_license_id", product_license_id)
        if product_type is not None:
            pulumi.set(__self__, "product_type", product_type)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if total_license_unit_count is not None:
            pulumi.set(__self__, "total_license_unit_count", total_license_unit_count)
        if total_units_consumed is not None:
            pulumi.set(__self__, "total_units_consumed", total_units_consumed)
        if unit_type is not None:
            pulumi.set(__self__, "unit_type", unit_type)

    @property
    @pulumi.getter(name="isUnlimited")
    def is_unlimited(self) -> Optional[bool]:
        return pulumi.get(self, "is_unlimited")

    @property
    @pulumi.getter(name="productLicenseId")
    def product_license_id(self) -> Optional[str]:
        return pulumi.get(self, "product_license_id")

    @property
    @pulumi.getter(name="productType")
    def product_type(self) -> Optional[str]:
        return pulumi.get(self, "product_type")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="totalLicenseUnitCount")
    def total_license_unit_count(self) -> Optional[int]:
        return pulumi.get(self, "total_license_unit_count")

    @property
    @pulumi.getter(name="totalUnitsConsumed")
    def total_units_consumed(self) -> Optional[float]:
        return pulumi.get(self, "total_units_consumed")

    @property
    @pulumi.getter(name="unitType")
    def unit_type(self) -> Optional[str]:
        return pulumi.get(self, "unit_type")


@pulumi.output_type
class GetTopUtilizedResourcesItemResult(dict):
    def __init__(__self__, *,
                 resource_compartment_id: Optional[str] = None,
                 resource_compartment_name: Optional[str] = None,
                 resource_id: Optional[str] = None,
                 resource_name: Optional[str] = None,
                 total_units: Optional[float] = None,
                 unit_type: Optional[str] = None):
        if resource_compartment_id is not None:
            pulumi.set(__self__, "resource_compartment_id", resource_compartment_id)
        if resource_compartment_name is not None:
            pulumi.set(__self__, "resource_compartment_name", resource_compartment_name)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if total_units is not None:
            pulumi.set(__self__, "total_units", total_units)
        if unit_type is not None:
            pulumi.set(__self__, "unit_type", unit_type)

    @property
    @pulumi.getter(name="resourceCompartmentId")
    def resource_compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_compartment_id")

    @property
    @pulumi.getter(name="resourceCompartmentName")
    def resource_compartment_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_compartment_name")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_name")

    @property
    @pulumi.getter(name="totalUnits")
    def total_units(self) -> Optional[float]:
        return pulumi.get(self, "total_units")

    @property
    @pulumi.getter(name="unitType")
    def unit_type(self) -> Optional[str]:
        return pulumi.get(self, "unit_type")


