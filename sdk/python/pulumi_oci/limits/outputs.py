# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'QuotaLock',
    'GetLimitDefinitionsFilterResult',
    'GetLimitDefinitionsLimitDefinitionResult',
    'GetLimitValuesFilterResult',
    'GetLimitValuesLimitValueResult',
    'GetQuotaLockResult',
    'GetQuotasFilterResult',
    'GetQuotasQuotaResult',
    'GetQuotasQuotaLockResult',
    'GetServicesFilterResult',
    'GetServicesServiceResult',
]

@pulumi.output_type
class QuotaLock(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "relatedResourceId":
            suggest = "related_resource_id"
        elif key == "timeCreated":
            suggest = "time_created"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in QuotaLock. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        QuotaLock.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        QuotaLock.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 message: Optional[str] = None,
                 related_resource_id: Optional[str] = None,
                 time_created: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if related_resource_id is not None:
            pulumi.set(__self__, "related_resource_id", related_resource_id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter(name="relatedResourceId")
    def related_resource_id(self) -> Optional[str]:
        return pulumi.get(self, "related_resource_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetLimitDefinitionsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetLimitDefinitionsLimitDefinitionResult(dict):
    def __init__(__self__, *,
                 are_quotas_supported: Optional[bool] = None,
                 description: Optional[str] = None,
                 is_deprecated: Optional[bool] = None,
                 is_dynamic: Optional[bool] = None,
                 is_eligible_for_limit_increase: Optional[bool] = None,
                 is_resource_availability_supported: Optional[bool] = None,
                 name: Optional[str] = None,
                 scope_type: Optional[str] = None,
                 service_name: Optional[str] = None):
        if are_quotas_supported is not None:
            pulumi.set(__self__, "are_quotas_supported", are_quotas_supported)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if is_deprecated is not None:
            pulumi.set(__self__, "is_deprecated", is_deprecated)
        if is_dynamic is not None:
            pulumi.set(__self__, "is_dynamic", is_dynamic)
        if is_eligible_for_limit_increase is not None:
            pulumi.set(__self__, "is_eligible_for_limit_increase", is_eligible_for_limit_increase)
        if is_resource_availability_supported is not None:
            pulumi.set(__self__, "is_resource_availability_supported", is_resource_availability_supported)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if scope_type is not None:
            pulumi.set(__self__, "scope_type", scope_type)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter(name="areQuotasSupported")
    def are_quotas_supported(self) -> Optional[bool]:
        return pulumi.get(self, "are_quotas_supported")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="isDeprecated")
    def is_deprecated(self) -> Optional[bool]:
        return pulumi.get(self, "is_deprecated")

    @property
    @pulumi.getter(name="isDynamic")
    def is_dynamic(self) -> Optional[bool]:
        return pulumi.get(self, "is_dynamic")

    @property
    @pulumi.getter(name="isEligibleForLimitIncrease")
    def is_eligible_for_limit_increase(self) -> Optional[bool]:
        return pulumi.get(self, "is_eligible_for_limit_increase")

    @property
    @pulumi.getter(name="isResourceAvailabilitySupported")
    def is_resource_availability_supported(self) -> Optional[bool]:
        return pulumi.get(self, "is_resource_availability_supported")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="scopeType")
    def scope_type(self) -> Optional[str]:
        return pulumi.get(self, "scope_type")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[str]:
        return pulumi.get(self, "service_name")


@pulumi.output_type
class GetLimitValuesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetLimitValuesLimitValueResult(dict):
    def __init__(__self__, *,
                 availability_domain: Optional[str] = None,
                 name: Optional[str] = None,
                 scope_type: Optional[str] = None,
                 value: Optional[str] = None):
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if scope_type is not None:
            pulumi.set(__self__, "scope_type", scope_type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="scopeType")
    def scope_type(self) -> Optional[str]:
        return pulumi.get(self, "scope_type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetQuotaLockResult(dict):
    def __init__(__self__, *,
                 message: Optional[str] = None,
                 related_resource_id: Optional[str] = None,
                 time_created: Optional[str] = None,
                 type: Optional[str] = None):
        if message is not None:
            pulumi.set(__self__, "message", message)
        if related_resource_id is not None:
            pulumi.set(__self__, "related_resource_id", related_resource_id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter(name="relatedResourceId")
    def related_resource_id(self) -> Optional[str]:
        return pulumi.get(self, "related_resource_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetQuotasFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetQuotasQuotaResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 is_lock_override: Optional[bool] = None,
                 locks: Optional[Sequence['outputs.GetQuotasQuotaLockResult']] = None,
                 name: Optional[str] = None,
                 state: Optional[str] = None,
                 statements: Optional[Sequence[str]] = None,
                 time_created: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_lock_override is not None:
            pulumi.set(__self__, "is_lock_override", is_lock_override)
        if locks is not None:
            pulumi.set(__self__, "locks", locks)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if statements is not None:
            pulumi.set(__self__, "statements", statements)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isLockOverride")
    def is_lock_override(self) -> Optional[bool]:
        return pulumi.get(self, "is_lock_override")

    @property
    @pulumi.getter
    def locks(self) -> Optional[Sequence['outputs.GetQuotasQuotaLockResult']]:
        return pulumi.get(self, "locks")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def statements(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "statements")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetQuotasQuotaLockResult(dict):
    def __init__(__self__, *,
                 message: Optional[str] = None,
                 related_resource_id: Optional[str] = None,
                 time_created: Optional[str] = None,
                 type: Optional[str] = None):
        if message is not None:
            pulumi.set(__self__, "message", message)
        if related_resource_id is not None:
            pulumi.set(__self__, "related_resource_id", related_resource_id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter(name="relatedResourceId")
    def related_resource_id(self) -> Optional[str]:
        return pulumi.get(self, "related_resource_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetServicesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetServicesServiceResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 name: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


