# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetNamespaceFieldUsageResult',
    'AwaitableGetNamespaceFieldUsageResult',
    'get_namespace_field_usage',
    'get_namespace_field_usage_output',
]

@pulumi.output_type
class GetNamespaceFieldUsageResult:
    """
    A collection of values returned by getNamespaceFieldUsage.
    """
    def __init__(__self__, dependent_parsers=None, dependent_sources=None, field_name=None, id=None, namespace=None):
        if dependent_parsers and not isinstance(dependent_parsers, list):
            raise TypeError("Expected argument 'dependent_parsers' to be a list")
        pulumi.set(__self__, "dependent_parsers", dependent_parsers)
        if dependent_sources and not isinstance(dependent_sources, list):
            raise TypeError("Expected argument 'dependent_sources' to be a list")
        pulumi.set(__self__, "dependent_sources", dependent_sources)
        if field_name and not isinstance(field_name, str):
            raise TypeError("Expected argument 'field_name' to be a str")
        pulumi.set(__self__, "field_name", field_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if namespace and not isinstance(namespace, str):
            raise TypeError("Expected argument 'namespace' to be a str")
        pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter(name="dependentParsers")
    def dependent_parsers(self) -> Sequence['outputs.GetNamespaceFieldUsageDependentParserResult']:
        """
        Parsers that depend on or use the field.
        """
        return pulumi.get(self, "dependent_parsers")

    @property
    @pulumi.getter(name="dependentSources")
    def dependent_sources(self) -> Sequence['outputs.GetNamespaceFieldUsageDependentSourceResult']:
        """
        Sources that depend on or use the field.
        """
        return pulumi.get(self, "dependent_sources")

    @property
    @pulumi.getter(name="fieldName")
    def field_name(self) -> builtins.str:
        return pulumi.get(self, "field_name")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def namespace(self) -> builtins.str:
        return pulumi.get(self, "namespace")


class AwaitableGetNamespaceFieldUsageResult(GetNamespaceFieldUsageResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNamespaceFieldUsageResult(
            dependent_parsers=self.dependent_parsers,
            dependent_sources=self.dependent_sources,
            field_name=self.field_name,
            id=self.id,
            namespace=self.namespace)


def get_namespace_field_usage(field_name: Optional[builtins.str] = None,
                              namespace: Optional[builtins.str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNamespaceFieldUsageResult:
    """
    This data source provides details about a specific Namespace Field Usage resource in Oracle Cloud Infrastructure Log Analytics service.

    Gets usage information about the field with the specified name.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_namespace_field_usage = oci.LogAnalytics.get_namespace_field_usage(field_name=namespace_field_usage_field_name,
        namespace=namespace_field_usage_namespace)
    ```


    :param builtins.str field_name: The field name.
    :param builtins.str namespace: The Logging Analytics namespace used for the request.
    """
    __args__ = dict()
    __args__['fieldName'] = field_name
    __args__['namespace'] = namespace
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:LogAnalytics/getNamespaceFieldUsage:getNamespaceFieldUsage', __args__, opts=opts, typ=GetNamespaceFieldUsageResult).value

    return AwaitableGetNamespaceFieldUsageResult(
        dependent_parsers=pulumi.get(__ret__, 'dependent_parsers'),
        dependent_sources=pulumi.get(__ret__, 'dependent_sources'),
        field_name=pulumi.get(__ret__, 'field_name'),
        id=pulumi.get(__ret__, 'id'),
        namespace=pulumi.get(__ret__, 'namespace'))
def get_namespace_field_usage_output(field_name: Optional[pulumi.Input[builtins.str]] = None,
                                     namespace: Optional[pulumi.Input[builtins.str]] = None,
                                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetNamespaceFieldUsageResult]:
    """
    This data source provides details about a specific Namespace Field Usage resource in Oracle Cloud Infrastructure Log Analytics service.

    Gets usage information about the field with the specified name.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_namespace_field_usage = oci.LogAnalytics.get_namespace_field_usage(field_name=namespace_field_usage_field_name,
        namespace=namespace_field_usage_namespace)
    ```


    :param builtins.str field_name: The field name.
    :param builtins.str namespace: The Logging Analytics namespace used for the request.
    """
    __args__ = dict()
    __args__['fieldName'] = field_name
    __args__['namespace'] = namespace
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('oci:LogAnalytics/getNamespaceFieldUsage:getNamespaceFieldUsage', __args__, opts=opts, typ=GetNamespaceFieldUsageResult)
    return __ret__.apply(lambda __response__: GetNamespaceFieldUsageResult(
        dependent_parsers=pulumi.get(__response__, 'dependent_parsers'),
        dependent_sources=pulumi.get(__response__, 'dependent_sources'),
        field_name=pulumi.get(__response__, 'field_name'),
        id=pulumi.get(__response__, 'id'),
        namespace=pulumi.get(__response__, 'namespace')))
