# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetNamespaceStorageOverlappingRecallsResult',
    'AwaitableGetNamespaceStorageOverlappingRecallsResult',
    'get_namespace_storage_overlapping_recalls',
    'get_namespace_storage_overlapping_recalls_output',
]

@pulumi.output_type
class GetNamespaceStorageOverlappingRecallsResult:
    """
    A collection of values returned by getNamespaceStorageOverlappingRecalls.
    """
    def __init__(__self__, filters=None, id=None, namespace=None, overlapping_recall_collections=None, time_data_ended=None, time_data_started=None):
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if namespace and not isinstance(namespace, str):
            raise TypeError("Expected argument 'namespace' to be a str")
        pulumi.set(__self__, "namespace", namespace)
        if overlapping_recall_collections and not isinstance(overlapping_recall_collections, list):
            raise TypeError("Expected argument 'overlapping_recall_collections' to be a list")
        pulumi.set(__self__, "overlapping_recall_collections", overlapping_recall_collections)
        if time_data_ended and not isinstance(time_data_ended, str):
            raise TypeError("Expected argument 'time_data_ended' to be a str")
        pulumi.set(__self__, "time_data_ended", time_data_ended)
        if time_data_started and not isinstance(time_data_started, str):
            raise TypeError("Expected argument 'time_data_started' to be a str")
        pulumi.set(__self__, "time_data_started", time_data_started)

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetNamespaceStorageOverlappingRecallsFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="overlappingRecallCollections")
    def overlapping_recall_collections(self) -> Sequence['outputs.GetNamespaceStorageOverlappingRecallsOverlappingRecallCollectionResult']:
        """
        The list of overlapping_recall_collection.
        """
        return pulumi.get(self, "overlapping_recall_collections")

    @property
    @pulumi.getter(name="timeDataEnded")
    def time_data_ended(self) -> Optional[str]:
        """
        This is the end of the time range of the archival data
        """
        return pulumi.get(self, "time_data_ended")

    @property
    @pulumi.getter(name="timeDataStarted")
    def time_data_started(self) -> Optional[str]:
        """
        This is the start of the time range of the archival data
        """
        return pulumi.get(self, "time_data_started")


class AwaitableGetNamespaceStorageOverlappingRecallsResult(GetNamespaceStorageOverlappingRecallsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNamespaceStorageOverlappingRecallsResult(
            filters=self.filters,
            id=self.id,
            namespace=self.namespace,
            overlapping_recall_collections=self.overlapping_recall_collections,
            time_data_ended=self.time_data_ended,
            time_data_started=self.time_data_started)


def get_namespace_storage_overlapping_recalls(filters: Optional[Sequence[pulumi.InputType['GetNamespaceStorageOverlappingRecallsFilterArgs']]] = None,
                                              namespace: Optional[str] = None,
                                              time_data_ended: Optional[str] = None,
                                              time_data_started: Optional[str] = None,
                                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNamespaceStorageOverlappingRecallsResult:
    """
    This data source provides the list of Namespace Storage Overlapping Recalls in Oracle Cloud Infrastructure Log Analytics service.

    This API gets the list of overlapping recalls made in the given timeframe

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_namespace_storage_overlapping_recalls = oci.LogAnalytics.get_namespace_storage_overlapping_recalls(namespace=var["namespace_storage_overlapping_recall_namespace"],
        time_data_ended=var["namespace_storage_overlapping_recall_time_data_ended"],
        time_data_started=var["namespace_storage_overlapping_recall_time_data_started"])
    ```


    :param str namespace: The Logging Analytics namespace used for the request.
    :param str time_data_ended: This is the end of the time range for recalled data
    :param str time_data_started: This is the start of the time range for recalled data
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['namespace'] = namespace
    __args__['timeDataEnded'] = time_data_ended
    __args__['timeDataStarted'] = time_data_started
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:LogAnalytics/getNamespaceStorageOverlappingRecalls:getNamespaceStorageOverlappingRecalls', __args__, opts=opts, typ=GetNamespaceStorageOverlappingRecallsResult).value

    return AwaitableGetNamespaceStorageOverlappingRecallsResult(
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        namespace=pulumi.get(__ret__, 'namespace'),
        overlapping_recall_collections=pulumi.get(__ret__, 'overlapping_recall_collections'),
        time_data_ended=pulumi.get(__ret__, 'time_data_ended'),
        time_data_started=pulumi.get(__ret__, 'time_data_started'))


@_utilities.lift_output_func(get_namespace_storage_overlapping_recalls)
def get_namespace_storage_overlapping_recalls_output(filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetNamespaceStorageOverlappingRecallsFilterArgs']]]]] = None,
                                                     namespace: Optional[pulumi.Input[str]] = None,
                                                     time_data_ended: Optional[pulumi.Input[Optional[str]]] = None,
                                                     time_data_started: Optional[pulumi.Input[Optional[str]]] = None,
                                                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetNamespaceStorageOverlappingRecallsResult]:
    """
    This data source provides the list of Namespace Storage Overlapping Recalls in Oracle Cloud Infrastructure Log Analytics service.

    This API gets the list of overlapping recalls made in the given timeframe

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_namespace_storage_overlapping_recalls = oci.LogAnalytics.get_namespace_storage_overlapping_recalls(namespace=var["namespace_storage_overlapping_recall_namespace"],
        time_data_ended=var["namespace_storage_overlapping_recall_time_data_ended"],
        time_data_started=var["namespace_storage_overlapping_recall_time_data_started"])
    ```


    :param str namespace: The Logging Analytics namespace used for the request.
    :param str time_data_ended: This is the end of the time range for recalled data
    :param str time_data_started: This is the start of the time range for recalled data
    """
    ...
