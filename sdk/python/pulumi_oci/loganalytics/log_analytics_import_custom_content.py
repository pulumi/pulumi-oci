# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['LogAnalyticsImportCustomContentArgs', 'LogAnalyticsImportCustomContent']

@pulumi.input_type
class LogAnalyticsImportCustomContentArgs:
    def __init__(__self__, *,
                 import_custom_content_file: pulumi.Input[_builtins.str],
                 namespace: pulumi.Input[_builtins.str],
                 expect: Optional[pulumi.Input[_builtins.str]] = None,
                 is_overwrite: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        The set of arguments for constructing a LogAnalyticsImportCustomContent resource.
        :param pulumi.Input[_builtins.str] import_custom_content_file: Path to the file to upload which contains the custom content.
        :param pulumi.Input[_builtins.str] namespace: The Logging Analytics namespace used for the request.
        :param pulumi.Input[_builtins.str] expect: A value of `100-continue` requests preliminary verification of the request method, path, and headers before the request body is sent. If no error results from such verification, the server will send a 100 (Continue) interim response to indicate readiness for the request body. The only allowed value for this parameter is "100-Continue" (case-insensitive).
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param pulumi.Input[_builtins.bool] is_overwrite: A flag indicating whether or not to overwrite existing content if a conflict is found during import content operation.
        """
        pulumi.set(__self__, "import_custom_content_file", import_custom_content_file)
        pulumi.set(__self__, "namespace", namespace)
        if expect is not None:
            pulumi.set(__self__, "expect", expect)
        if is_overwrite is not None:
            pulumi.set(__self__, "is_overwrite", is_overwrite)

    @_builtins.property
    @pulumi.getter(name="importCustomContentFile")
    def import_custom_content_file(self) -> pulumi.Input[_builtins.str]:
        """
        Path to the file to upload which contains the custom content.
        """
        return pulumi.get(self, "import_custom_content_file")

    @import_custom_content_file.setter
    def import_custom_content_file(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "import_custom_content_file", value)

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[_builtins.str]:
        """
        The Logging Analytics namespace used for the request.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "namespace", value)

    @_builtins.property
    @pulumi.getter
    def expect(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A value of `100-continue` requests preliminary verification of the request method, path, and headers before the request body is sent. If no error results from such verification, the server will send a 100 (Continue) interim response to indicate readiness for the request body. The only allowed value for this parameter is "100-Continue" (case-insensitive).


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "expect")

    @expect.setter
    def expect(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "expect", value)

    @_builtins.property
    @pulumi.getter(name="isOverwrite")
    def is_overwrite(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        A flag indicating whether or not to overwrite existing content if a conflict is found during import content operation.
        """
        return pulumi.get(self, "is_overwrite")

    @is_overwrite.setter
    def is_overwrite(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_overwrite", value)


@pulumi.input_type
class _LogAnalyticsImportCustomContentState:
    def __init__(__self__, *,
                 change_lists: Optional[pulumi.Input[Sequence[pulumi.Input['LogAnalyticsImportCustomContentChangeListArgs']]]] = None,
                 content_name: Optional[pulumi.Input[_builtins.str]] = None,
                 expect: Optional[pulumi.Input[_builtins.str]] = None,
                 field_names: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 import_custom_content_file: Optional[pulumi.Input[_builtins.str]] = None,
                 is_overwrite: Optional[pulumi.Input[_builtins.bool]] = None,
                 namespace: Optional[pulumi.Input[_builtins.str]] = None,
                 parser_names: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 source_names: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        Input properties used for looking up and filtering LogAnalyticsImportCustomContent resources.
        :param pulumi.Input[Sequence[pulumi.Input['LogAnalyticsImportCustomContentChangeListArgs']]] change_lists: LogAnalyticsImportCustomChangeList
        :param pulumi.Input[_builtins.str] content_name: The content name.
        :param pulumi.Input[_builtins.str] expect: A value of `100-continue` requests preliminary verification of the request method, path, and headers before the request body is sent. If no error results from such verification, the server will send a 100 (Continue) interim response to indicate readiness for the request body. The only allowed value for this parameter is "100-Continue" (case-insensitive).
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] field_names: The field names.
        :param pulumi.Input[_builtins.str] import_custom_content_file: Path to the file to upload which contains the custom content.
        :param pulumi.Input[_builtins.bool] is_overwrite: A flag indicating whether or not to overwrite existing content if a conflict is found during import content operation.
        :param pulumi.Input[_builtins.str] namespace: The Logging Analytics namespace used for the request.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] parser_names: The parser names.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] source_names: The source names.
        """
        if change_lists is not None:
            pulumi.set(__self__, "change_lists", change_lists)
        if content_name is not None:
            pulumi.set(__self__, "content_name", content_name)
        if expect is not None:
            pulumi.set(__self__, "expect", expect)
        if field_names is not None:
            pulumi.set(__self__, "field_names", field_names)
        if import_custom_content_file is not None:
            pulumi.set(__self__, "import_custom_content_file", import_custom_content_file)
        if is_overwrite is not None:
            pulumi.set(__self__, "is_overwrite", is_overwrite)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if parser_names is not None:
            pulumi.set(__self__, "parser_names", parser_names)
        if source_names is not None:
            pulumi.set(__self__, "source_names", source_names)

    @_builtins.property
    @pulumi.getter(name="changeLists")
    def change_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LogAnalyticsImportCustomContentChangeListArgs']]]]:
        """
        LogAnalyticsImportCustomChangeList
        """
        return pulumi.get(self, "change_lists")

    @change_lists.setter
    def change_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LogAnalyticsImportCustomContentChangeListArgs']]]]):
        pulumi.set(self, "change_lists", value)

    @_builtins.property
    @pulumi.getter(name="contentName")
    def content_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The content name.
        """
        return pulumi.get(self, "content_name")

    @content_name.setter
    def content_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "content_name", value)

    @_builtins.property
    @pulumi.getter
    def expect(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A value of `100-continue` requests preliminary verification of the request method, path, and headers before the request body is sent. If no error results from such verification, the server will send a 100 (Continue) interim response to indicate readiness for the request body. The only allowed value for this parameter is "100-Continue" (case-insensitive).


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "expect")

    @expect.setter
    def expect(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "expect", value)

    @_builtins.property
    @pulumi.getter(name="fieldNames")
    def field_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The field names.
        """
        return pulumi.get(self, "field_names")

    @field_names.setter
    def field_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "field_names", value)

    @_builtins.property
    @pulumi.getter(name="importCustomContentFile")
    def import_custom_content_file(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Path to the file to upload which contains the custom content.
        """
        return pulumi.get(self, "import_custom_content_file")

    @import_custom_content_file.setter
    def import_custom_content_file(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "import_custom_content_file", value)

    @_builtins.property
    @pulumi.getter(name="isOverwrite")
    def is_overwrite(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        A flag indicating whether or not to overwrite existing content if a conflict is found during import content operation.
        """
        return pulumi.get(self, "is_overwrite")

    @is_overwrite.setter
    def is_overwrite(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_overwrite", value)

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Logging Analytics namespace used for the request.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "namespace", value)

    @_builtins.property
    @pulumi.getter(name="parserNames")
    def parser_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The parser names.
        """
        return pulumi.get(self, "parser_names")

    @parser_names.setter
    def parser_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "parser_names", value)

    @_builtins.property
    @pulumi.getter(name="sourceNames")
    def source_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The source names.
        """
        return pulumi.get(self, "source_names")

    @source_names.setter
    def source_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "source_names", value)


@pulumi.type_token("oci:LogAnalytics/logAnalyticsImportCustomContent:LogAnalyticsImportCustomContent")
class LogAnalyticsImportCustomContent(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 expect: Optional[pulumi.Input[_builtins.str]] = None,
                 import_custom_content_file: Optional[pulumi.Input[_builtins.str]] = None,
                 is_overwrite: Optional[pulumi.Input[_builtins.bool]] = None,
                 namespace: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        This resource provides the Log Analytics Import Custom Content resource in Oracle Cloud Infrastructure Log Analytics service.

        Imports the specified custom content from the input in zip format.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_oci as oci

        test_log_analytics_import_custom_content = oci.loganalytics.LogAnalyticsImportCustomContent("test_log_analytics_import_custom_content",
            import_custom_content_file=log_analytics_import_custom_content_import_custom_content_file,
            namespace=log_analytics_import_custom_content_namespace,
            expect=log_analytics_import_custom_content_expect,
            is_overwrite=log_analytics_import_custom_content_is_overwrite)
        ```

        ## Import

        Import is not supported for LogAnalyticsImportCustomContent

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] expect: A value of `100-continue` requests preliminary verification of the request method, path, and headers before the request body is sent. If no error results from such verification, the server will send a 100 (Continue) interim response to indicate readiness for the request body. The only allowed value for this parameter is "100-Continue" (case-insensitive).
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param pulumi.Input[_builtins.str] import_custom_content_file: Path to the file to upload which contains the custom content.
        :param pulumi.Input[_builtins.bool] is_overwrite: A flag indicating whether or not to overwrite existing content if a conflict is found during import content operation.
        :param pulumi.Input[_builtins.str] namespace: The Logging Analytics namespace used for the request.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LogAnalyticsImportCustomContentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource provides the Log Analytics Import Custom Content resource in Oracle Cloud Infrastructure Log Analytics service.

        Imports the specified custom content from the input in zip format.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_oci as oci

        test_log_analytics_import_custom_content = oci.loganalytics.LogAnalyticsImportCustomContent("test_log_analytics_import_custom_content",
            import_custom_content_file=log_analytics_import_custom_content_import_custom_content_file,
            namespace=log_analytics_import_custom_content_namespace,
            expect=log_analytics_import_custom_content_expect,
            is_overwrite=log_analytics_import_custom_content_is_overwrite)
        ```

        ## Import

        Import is not supported for LogAnalyticsImportCustomContent

        :param str resource_name: The name of the resource.
        :param LogAnalyticsImportCustomContentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LogAnalyticsImportCustomContentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 expect: Optional[pulumi.Input[_builtins.str]] = None,
                 import_custom_content_file: Optional[pulumi.Input[_builtins.str]] = None,
                 is_overwrite: Optional[pulumi.Input[_builtins.bool]] = None,
                 namespace: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LogAnalyticsImportCustomContentArgs.__new__(LogAnalyticsImportCustomContentArgs)

            __props__.__dict__["expect"] = expect
            if import_custom_content_file is None and not opts.urn:
                raise TypeError("Missing required property 'import_custom_content_file'")
            __props__.__dict__["import_custom_content_file"] = import_custom_content_file
            __props__.__dict__["is_overwrite"] = is_overwrite
            if namespace is None and not opts.urn:
                raise TypeError("Missing required property 'namespace'")
            __props__.__dict__["namespace"] = namespace
            __props__.__dict__["change_lists"] = None
            __props__.__dict__["content_name"] = None
            __props__.__dict__["field_names"] = None
            __props__.__dict__["parser_names"] = None
            __props__.__dict__["source_names"] = None
        super(LogAnalyticsImportCustomContent, __self__).__init__(
            'oci:LogAnalytics/logAnalyticsImportCustomContent:LogAnalyticsImportCustomContent',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            change_lists: Optional[pulumi.Input[Sequence[pulumi.Input[Union['LogAnalyticsImportCustomContentChangeListArgs', 'LogAnalyticsImportCustomContentChangeListArgsDict']]]]] = None,
            content_name: Optional[pulumi.Input[_builtins.str]] = None,
            expect: Optional[pulumi.Input[_builtins.str]] = None,
            field_names: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            import_custom_content_file: Optional[pulumi.Input[_builtins.str]] = None,
            is_overwrite: Optional[pulumi.Input[_builtins.bool]] = None,
            namespace: Optional[pulumi.Input[_builtins.str]] = None,
            parser_names: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            source_names: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None) -> 'LogAnalyticsImportCustomContent':
        """
        Get an existing LogAnalyticsImportCustomContent resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['LogAnalyticsImportCustomContentChangeListArgs', 'LogAnalyticsImportCustomContentChangeListArgsDict']]]] change_lists: LogAnalyticsImportCustomChangeList
        :param pulumi.Input[_builtins.str] content_name: The content name.
        :param pulumi.Input[_builtins.str] expect: A value of `100-continue` requests preliminary verification of the request method, path, and headers before the request body is sent. If no error results from such verification, the server will send a 100 (Continue) interim response to indicate readiness for the request body. The only allowed value for this parameter is "100-Continue" (case-insensitive).
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] field_names: The field names.
        :param pulumi.Input[_builtins.str] import_custom_content_file: Path to the file to upload which contains the custom content.
        :param pulumi.Input[_builtins.bool] is_overwrite: A flag indicating whether or not to overwrite existing content if a conflict is found during import content operation.
        :param pulumi.Input[_builtins.str] namespace: The Logging Analytics namespace used for the request.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] parser_names: The parser names.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] source_names: The source names.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LogAnalyticsImportCustomContentState.__new__(_LogAnalyticsImportCustomContentState)

        __props__.__dict__["change_lists"] = change_lists
        __props__.__dict__["content_name"] = content_name
        __props__.__dict__["expect"] = expect
        __props__.__dict__["field_names"] = field_names
        __props__.__dict__["import_custom_content_file"] = import_custom_content_file
        __props__.__dict__["is_overwrite"] = is_overwrite
        __props__.__dict__["namespace"] = namespace
        __props__.__dict__["parser_names"] = parser_names
        __props__.__dict__["source_names"] = source_names
        return LogAnalyticsImportCustomContent(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="changeLists")
    def change_lists(self) -> pulumi.Output[Sequence['outputs.LogAnalyticsImportCustomContentChangeList']]:
        """
        LogAnalyticsImportCustomChangeList
        """
        return pulumi.get(self, "change_lists")

    @_builtins.property
    @pulumi.getter(name="contentName")
    def content_name(self) -> pulumi.Output[_builtins.str]:
        """
        The content name.
        """
        return pulumi.get(self, "content_name")

    @_builtins.property
    @pulumi.getter
    def expect(self) -> pulumi.Output[_builtins.str]:
        """
        A value of `100-continue` requests preliminary verification of the request method, path, and headers before the request body is sent. If no error results from such verification, the server will send a 100 (Continue) interim response to indicate readiness for the request body. The only allowed value for this parameter is "100-Continue" (case-insensitive).


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "expect")

    @_builtins.property
    @pulumi.getter(name="fieldNames")
    def field_names(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The field names.
        """
        return pulumi.get(self, "field_names")

    @_builtins.property
    @pulumi.getter(name="importCustomContentFile")
    def import_custom_content_file(self) -> pulumi.Output[_builtins.str]:
        """
        Path to the file to upload which contains the custom content.
        """
        return pulumi.get(self, "import_custom_content_file")

    @_builtins.property
    @pulumi.getter(name="isOverwrite")
    def is_overwrite(self) -> pulumi.Output[_builtins.bool]:
        """
        A flag indicating whether or not to overwrite existing content if a conflict is found during import content operation.
        """
        return pulumi.get(self, "is_overwrite")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> pulumi.Output[_builtins.str]:
        """
        The Logging Analytics namespace used for the request.
        """
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter(name="parserNames")
    def parser_names(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The parser names.
        """
        return pulumi.get(self, "parser_names")

    @_builtins.property
    @pulumi.getter(name="sourceNames")
    def source_names(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The source names.
        """
        return pulumi.get(self, "source_names")

