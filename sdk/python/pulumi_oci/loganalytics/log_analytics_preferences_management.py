# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['LogAnalyticsPreferencesManagementArgs', 'LogAnalyticsPreferencesManagement']

@pulumi.input_type
class LogAnalyticsPreferencesManagementArgs:
    def __init__(__self__, *,
                 namespace: pulumi.Input[str],
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['LogAnalyticsPreferencesManagementItemArgs']]]] = None):
        """
        The set of arguments for constructing a LogAnalyticsPreferencesManagement resource.
        :param pulumi.Input[str] namespace: The Logging Analytics namespace used for the request. 
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param pulumi.Input[Sequence[pulumi.Input['LogAnalyticsPreferencesManagementItemArgs']]] items: An array of tenant preference details.
        """
        pulumi.set(__self__, "namespace", namespace)
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        """
        The Logging Analytics namespace used for the request. 


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LogAnalyticsPreferencesManagementItemArgs']]]]:
        """
        An array of tenant preference details.
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LogAnalyticsPreferencesManagementItemArgs']]]]):
        pulumi.set(self, "items", value)


@pulumi.input_type
class _LogAnalyticsPreferencesManagementState:
    def __init__(__self__, *,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['LogAnalyticsPreferencesManagementItemArgs']]]] = None,
                 namespace: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering LogAnalyticsPreferencesManagement resources.
        :param pulumi.Input[Sequence[pulumi.Input['LogAnalyticsPreferencesManagementItemArgs']]] items: An array of tenant preference details.
        :param pulumi.Input[str] namespace: The Logging Analytics namespace used for the request. 
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        if items is not None:
            pulumi.set(__self__, "items", items)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LogAnalyticsPreferencesManagementItemArgs']]]]:
        """
        An array of tenant preference details.
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LogAnalyticsPreferencesManagementItemArgs']]]]):
        pulumi.set(self, "items", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        The Logging Analytics namespace used for the request. 


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


class LogAnalyticsPreferencesManagement(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LogAnalyticsPreferencesManagementItemArgs']]]]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        This resource provides the Log Analytics Preferences Management resource in Oracle Cloud Infrastructure Log Analytics service.

        Updates the tenant preferences such as DEFAULT_HOMEPAGE and collection properties.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_oci as oci

        test_log_analytics_preferences_management = oci.log_analytics.LogAnalyticsPreferencesManagement("testLogAnalyticsPreferencesManagement",
            namespace=var["log_analytics_preferences_management_namespace"],
            items=[oci.log_analytics.LogAnalyticsPreferencesManagementItemArgs(
                name=var["log_analytics_preferences_management_items_name"],
                value=var["log_analytics_preferences_management_items_value"],
            )])
        ```

        ## Import

        Import is not supported for LogAnalyticsPreferencesManagement

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LogAnalyticsPreferencesManagementItemArgs']]]] items: An array of tenant preference details.
        :param pulumi.Input[str] namespace: The Logging Analytics namespace used for the request. 
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LogAnalyticsPreferencesManagementArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource provides the Log Analytics Preferences Management resource in Oracle Cloud Infrastructure Log Analytics service.

        Updates the tenant preferences such as DEFAULT_HOMEPAGE and collection properties.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_oci as oci

        test_log_analytics_preferences_management = oci.log_analytics.LogAnalyticsPreferencesManagement("testLogAnalyticsPreferencesManagement",
            namespace=var["log_analytics_preferences_management_namespace"],
            items=[oci.log_analytics.LogAnalyticsPreferencesManagementItemArgs(
                name=var["log_analytics_preferences_management_items_name"],
                value=var["log_analytics_preferences_management_items_value"],
            )])
        ```

        ## Import

        Import is not supported for LogAnalyticsPreferencesManagement

        :param str resource_name: The name of the resource.
        :param LogAnalyticsPreferencesManagementArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LogAnalyticsPreferencesManagementArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LogAnalyticsPreferencesManagementItemArgs']]]]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LogAnalyticsPreferencesManagementArgs.__new__(LogAnalyticsPreferencesManagementArgs)

            __props__.__dict__["items"] = items
            if namespace is None and not opts.urn:
                raise TypeError("Missing required property 'namespace'")
            __props__.__dict__["namespace"] = namespace
        super(LogAnalyticsPreferencesManagement, __self__).__init__(
            'oci:LogAnalytics/logAnalyticsPreferencesManagement:LogAnalyticsPreferencesManagement',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            items: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LogAnalyticsPreferencesManagementItemArgs']]]]] = None,
            namespace: Optional[pulumi.Input[str]] = None) -> 'LogAnalyticsPreferencesManagement':
        """
        Get an existing LogAnalyticsPreferencesManagement resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LogAnalyticsPreferencesManagementItemArgs']]]] items: An array of tenant preference details.
        :param pulumi.Input[str] namespace: The Logging Analytics namespace used for the request. 
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LogAnalyticsPreferencesManagementState.__new__(_LogAnalyticsPreferencesManagementState)

        __props__.__dict__["items"] = items
        __props__.__dict__["namespace"] = namespace
        return LogAnalyticsPreferencesManagement(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def items(self) -> pulumi.Output[Optional[Sequence['outputs.LogAnalyticsPreferencesManagementItem']]]:
        """
        An array of tenant preference details.
        """
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Output[str]:
        """
        The Logging Analytics namespace used for the request. 


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "namespace")

