# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['NamespaceIngestTimeRulesManagementArgs', 'NamespaceIngestTimeRulesManagement']

@pulumi.input_type
class NamespaceIngestTimeRulesManagementArgs:
    def __init__(__self__, *,
                 enable_ingest_time_rule: pulumi.Input[bool],
                 ingest_time_rule_id: pulumi.Input[str],
                 namespace: pulumi.Input[str]):
        """
        The set of arguments for constructing a NamespaceIngestTimeRulesManagement resource.
        :param pulumi.Input[bool] enable_ingest_time_rule: (Updatable) A required field when set to `true` calls enable action and when set to `false` calls disable action.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param pulumi.Input[str] ingest_time_rule_id: Unique ocid of the ingest time rule.
        :param pulumi.Input[str] namespace: The Logging Analytics namespace used for the request.
        """
        NamespaceIngestTimeRulesManagementArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enable_ingest_time_rule=enable_ingest_time_rule,
            ingest_time_rule_id=ingest_time_rule_id,
            namespace=namespace,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enable_ingest_time_rule: pulumi.Input[bool],
             ingest_time_rule_id: pulumi.Input[str],
             namespace: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'enableIngestTimeRule' in kwargs:
            enable_ingest_time_rule = kwargs['enableIngestTimeRule']
        if 'ingestTimeRuleId' in kwargs:
            ingest_time_rule_id = kwargs['ingestTimeRuleId']

        _setter("enable_ingest_time_rule", enable_ingest_time_rule)
        _setter("ingest_time_rule_id", ingest_time_rule_id)
        _setter("namespace", namespace)

    @property
    @pulumi.getter(name="enableIngestTimeRule")
    def enable_ingest_time_rule(self) -> pulumi.Input[bool]:
        """
        (Updatable) A required field when set to `true` calls enable action and when set to `false` calls disable action.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "enable_ingest_time_rule")

    @enable_ingest_time_rule.setter
    def enable_ingest_time_rule(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable_ingest_time_rule", value)

    @property
    @pulumi.getter(name="ingestTimeRuleId")
    def ingest_time_rule_id(self) -> pulumi.Input[str]:
        """
        Unique ocid of the ingest time rule.
        """
        return pulumi.get(self, "ingest_time_rule_id")

    @ingest_time_rule_id.setter
    def ingest_time_rule_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "ingest_time_rule_id", value)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        """
        The Logging Analytics namespace used for the request.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class _NamespaceIngestTimeRulesManagementState:
    def __init__(__self__, *,
                 enable_ingest_time_rule: Optional[pulumi.Input[bool]] = None,
                 ingest_time_rule_id: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering NamespaceIngestTimeRulesManagement resources.
        :param pulumi.Input[bool] enable_ingest_time_rule: (Updatable) A required field when set to `true` calls enable action and when set to `false` calls disable action.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param pulumi.Input[str] ingest_time_rule_id: Unique ocid of the ingest time rule.
        :param pulumi.Input[str] namespace: The Logging Analytics namespace used for the request.
        """
        _NamespaceIngestTimeRulesManagementState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enable_ingest_time_rule=enable_ingest_time_rule,
            ingest_time_rule_id=ingest_time_rule_id,
            namespace=namespace,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enable_ingest_time_rule: Optional[pulumi.Input[bool]] = None,
             ingest_time_rule_id: Optional[pulumi.Input[str]] = None,
             namespace: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'enableIngestTimeRule' in kwargs:
            enable_ingest_time_rule = kwargs['enableIngestTimeRule']
        if 'ingestTimeRuleId' in kwargs:
            ingest_time_rule_id = kwargs['ingestTimeRuleId']

        if enable_ingest_time_rule is not None:
            _setter("enable_ingest_time_rule", enable_ingest_time_rule)
        if ingest_time_rule_id is not None:
            _setter("ingest_time_rule_id", ingest_time_rule_id)
        if namespace is not None:
            _setter("namespace", namespace)

    @property
    @pulumi.getter(name="enableIngestTimeRule")
    def enable_ingest_time_rule(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) A required field when set to `true` calls enable action and when set to `false` calls disable action.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "enable_ingest_time_rule")

    @enable_ingest_time_rule.setter
    def enable_ingest_time_rule(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_ingest_time_rule", value)

    @property
    @pulumi.getter(name="ingestTimeRuleId")
    def ingest_time_rule_id(self) -> Optional[pulumi.Input[str]]:
        """
        Unique ocid of the ingest time rule.
        """
        return pulumi.get(self, "ingest_time_rule_id")

    @ingest_time_rule_id.setter
    def ingest_time_rule_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ingest_time_rule_id", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        The Logging Analytics namespace used for the request.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


class NamespaceIngestTimeRulesManagement(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_ingest_time_rule: Optional[pulumi.Input[bool]] = None,
                 ingest_time_rule_id: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        This resource provides the Namespace Ingest Time Rules Management resource in Oracle Cloud Infrastructure Log Analytics service.

        Enables the specified ingest time rule.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_oci as oci

        test_namespace_ingest_time_rules_management = oci.log_analytics.NamespaceIngestTimeRulesManagement("testNamespaceIngestTimeRulesManagement",
            ingest_time_rule_id=oci_events_rule["test_rule"]["id"],
            namespace=var["namespace_ingest_time_rules_management_namespace"],
            enable_ingest_time_rule=var["enable_ingest_time_rule"])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] enable_ingest_time_rule: (Updatable) A required field when set to `true` calls enable action and when set to `false` calls disable action.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param pulumi.Input[str] ingest_time_rule_id: Unique ocid of the ingest time rule.
        :param pulumi.Input[str] namespace: The Logging Analytics namespace used for the request.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NamespaceIngestTimeRulesManagementArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource provides the Namespace Ingest Time Rules Management resource in Oracle Cloud Infrastructure Log Analytics service.

        Enables the specified ingest time rule.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_oci as oci

        test_namespace_ingest_time_rules_management = oci.log_analytics.NamespaceIngestTimeRulesManagement("testNamespaceIngestTimeRulesManagement",
            ingest_time_rule_id=oci_events_rule["test_rule"]["id"],
            namespace=var["namespace_ingest_time_rules_management_namespace"],
            enable_ingest_time_rule=var["enable_ingest_time_rule"])
        ```

        :param str resource_name: The name of the resource.
        :param NamespaceIngestTimeRulesManagementArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NamespaceIngestTimeRulesManagementArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            NamespaceIngestTimeRulesManagementArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_ingest_time_rule: Optional[pulumi.Input[bool]] = None,
                 ingest_time_rule_id: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NamespaceIngestTimeRulesManagementArgs.__new__(NamespaceIngestTimeRulesManagementArgs)

            if enable_ingest_time_rule is None and not opts.urn:
                raise TypeError("Missing required property 'enable_ingest_time_rule'")
            __props__.__dict__["enable_ingest_time_rule"] = enable_ingest_time_rule
            if ingest_time_rule_id is None and not opts.urn:
                raise TypeError("Missing required property 'ingest_time_rule_id'")
            __props__.__dict__["ingest_time_rule_id"] = ingest_time_rule_id
            if namespace is None and not opts.urn:
                raise TypeError("Missing required property 'namespace'")
            __props__.__dict__["namespace"] = namespace
        super(NamespaceIngestTimeRulesManagement, __self__).__init__(
            'oci:LogAnalytics/namespaceIngestTimeRulesManagement:NamespaceIngestTimeRulesManagement',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enable_ingest_time_rule: Optional[pulumi.Input[bool]] = None,
            ingest_time_rule_id: Optional[pulumi.Input[str]] = None,
            namespace: Optional[pulumi.Input[str]] = None) -> 'NamespaceIngestTimeRulesManagement':
        """
        Get an existing NamespaceIngestTimeRulesManagement resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] enable_ingest_time_rule: (Updatable) A required field when set to `true` calls enable action and when set to `false` calls disable action.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param pulumi.Input[str] ingest_time_rule_id: Unique ocid of the ingest time rule.
        :param pulumi.Input[str] namespace: The Logging Analytics namespace used for the request.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NamespaceIngestTimeRulesManagementState.__new__(_NamespaceIngestTimeRulesManagementState)

        __props__.__dict__["enable_ingest_time_rule"] = enable_ingest_time_rule
        __props__.__dict__["ingest_time_rule_id"] = ingest_time_rule_id
        __props__.__dict__["namespace"] = namespace
        return NamespaceIngestTimeRulesManagement(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="enableIngestTimeRule")
    def enable_ingest_time_rule(self) -> pulumi.Output[bool]:
        """
        (Updatable) A required field when set to `true` calls enable action and when set to `false` calls disable action.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "enable_ingest_time_rule")

    @property
    @pulumi.getter(name="ingestTimeRuleId")
    def ingest_time_rule_id(self) -> pulumi.Output[str]:
        """
        Unique ocid of the ingest time rule.
        """
        return pulumi.get(self, "ingest_time_rule_id")

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Output[str]:
        """
        The Logging Analytics namespace used for the request.
        """
        return pulumi.get(self, "namespace")

