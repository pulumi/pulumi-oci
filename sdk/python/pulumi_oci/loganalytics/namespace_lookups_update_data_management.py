# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['NamespaceLookupsUpdateDataManagementArgs', 'NamespaceLookupsUpdateDataManagement']

@pulumi.input_type
class NamespaceLookupsUpdateDataManagementArgs:
    def __init__(__self__, *,
                 lookup_name: pulumi.Input[builtins.str],
                 namespace: pulumi.Input[builtins.str],
                 update_lookup_file: pulumi.Input[builtins.str],
                 char_encoding: Optional[pulumi.Input[builtins.str]] = None,
                 expect: Optional[pulumi.Input[builtins.str]] = None,
                 is_force: Optional[pulumi.Input[builtins.bool]] = None):
        """
        The set of arguments for constructing a NamespaceLookupsUpdateDataManagement resource.
        :param pulumi.Input[builtins.str] lookup_name: The name of the lookup to operate on.
        :param pulumi.Input[builtins.str] namespace: The Logging Analytics namespace used for the request. 
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param pulumi.Input[builtins.str] char_encoding: The character encoding of the uploaded file.
        :param pulumi.Input[builtins.str] expect: A value of `100-continue` requests preliminary verification of the request method, path, and headers before the request body is sent. If no error results from such verification, the server will send a 100 (Continue) interim response to indicate readiness for the request body. The only allowed value for this parameter is "100-Continue" (case-insensitive).
        :param pulumi.Input[builtins.bool] is_force: is force
        """
        pulumi.set(__self__, "lookup_name", lookup_name)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "update_lookup_file", update_lookup_file)
        if char_encoding is not None:
            pulumi.set(__self__, "char_encoding", char_encoding)
        if expect is not None:
            pulumi.set(__self__, "expect", expect)
        if is_force is not None:
            pulumi.set(__self__, "is_force", is_force)

    @property
    @pulumi.getter(name="lookupName")
    def lookup_name(self) -> pulumi.Input[builtins.str]:
        """
        The name of the lookup to operate on.
        """
        return pulumi.get(self, "lookup_name")

    @lookup_name.setter
    def lookup_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "lookup_name", value)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[builtins.str]:
        """
        The Logging Analytics namespace used for the request. 


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="updateLookupFile")
    def update_lookup_file(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "update_lookup_file")

    @update_lookup_file.setter
    def update_lookup_file(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "update_lookup_file", value)

    @property
    @pulumi.getter(name="charEncoding")
    def char_encoding(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The character encoding of the uploaded file.
        """
        return pulumi.get(self, "char_encoding")

    @char_encoding.setter
    def char_encoding(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "char_encoding", value)

    @property
    @pulumi.getter
    def expect(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        A value of `100-continue` requests preliminary verification of the request method, path, and headers before the request body is sent. If no error results from such verification, the server will send a 100 (Continue) interim response to indicate readiness for the request body. The only allowed value for this parameter is "100-Continue" (case-insensitive).
        """
        return pulumi.get(self, "expect")

    @expect.setter
    def expect(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "expect", value)

    @property
    @pulumi.getter(name="isForce")
    def is_force(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        is force
        """
        return pulumi.get(self, "is_force")

    @is_force.setter
    def is_force(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_force", value)


@pulumi.input_type
class _NamespaceLookupsUpdateDataManagementState:
    def __init__(__self__, *,
                 char_encoding: Optional[pulumi.Input[builtins.str]] = None,
                 expect: Optional[pulumi.Input[builtins.str]] = None,
                 is_force: Optional[pulumi.Input[builtins.bool]] = None,
                 lookup_name: Optional[pulumi.Input[builtins.str]] = None,
                 namespace: Optional[pulumi.Input[builtins.str]] = None,
                 update_lookup_file: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering NamespaceLookupsUpdateDataManagement resources.
        :param pulumi.Input[builtins.str] char_encoding: The character encoding of the uploaded file.
        :param pulumi.Input[builtins.str] expect: A value of `100-continue` requests preliminary verification of the request method, path, and headers before the request body is sent. If no error results from such verification, the server will send a 100 (Continue) interim response to indicate readiness for the request body. The only allowed value for this parameter is "100-Continue" (case-insensitive).
        :param pulumi.Input[builtins.bool] is_force: is force
        :param pulumi.Input[builtins.str] lookup_name: The name of the lookup to operate on.
        :param pulumi.Input[builtins.str] namespace: The Logging Analytics namespace used for the request. 
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        if char_encoding is not None:
            pulumi.set(__self__, "char_encoding", char_encoding)
        if expect is not None:
            pulumi.set(__self__, "expect", expect)
        if is_force is not None:
            pulumi.set(__self__, "is_force", is_force)
        if lookup_name is not None:
            pulumi.set(__self__, "lookup_name", lookup_name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if update_lookup_file is not None:
            pulumi.set(__self__, "update_lookup_file", update_lookup_file)

    @property
    @pulumi.getter(name="charEncoding")
    def char_encoding(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The character encoding of the uploaded file.
        """
        return pulumi.get(self, "char_encoding")

    @char_encoding.setter
    def char_encoding(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "char_encoding", value)

    @property
    @pulumi.getter
    def expect(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        A value of `100-continue` requests preliminary verification of the request method, path, and headers before the request body is sent. If no error results from such verification, the server will send a 100 (Continue) interim response to indicate readiness for the request body. The only allowed value for this parameter is "100-Continue" (case-insensitive).
        """
        return pulumi.get(self, "expect")

    @expect.setter
    def expect(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "expect", value)

    @property
    @pulumi.getter(name="isForce")
    def is_force(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        is force
        """
        return pulumi.get(self, "is_force")

    @is_force.setter
    def is_force(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_force", value)

    @property
    @pulumi.getter(name="lookupName")
    def lookup_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the lookup to operate on.
        """
        return pulumi.get(self, "lookup_name")

    @lookup_name.setter
    def lookup_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "lookup_name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The Logging Analytics namespace used for the request. 


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="updateLookupFile")
    def update_lookup_file(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "update_lookup_file")

    @update_lookup_file.setter
    def update_lookup_file(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "update_lookup_file", value)


@pulumi.type_token("oci:LogAnalytics/namespaceLookupsUpdateDataManagement:NamespaceLookupsUpdateDataManagement")
class NamespaceLookupsUpdateDataManagement(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 char_encoding: Optional[pulumi.Input[builtins.str]] = None,
                 expect: Optional[pulumi.Input[builtins.str]] = None,
                 is_force: Optional[pulumi.Input[builtins.bool]] = None,
                 lookup_name: Optional[pulumi.Input[builtins.str]] = None,
                 namespace: Optional[pulumi.Input[builtins.str]] = None,
                 update_lookup_file: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        This resource provides the Namespace Lookups Update Data Management resource in Oracle Cloud Infrastructure Log Analytics service.

        Updates the lookup content. The csv file containing the content to be updated is passed in as binary data in the request.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] char_encoding: The character encoding of the uploaded file.
        :param pulumi.Input[builtins.str] expect: A value of `100-continue` requests preliminary verification of the request method, path, and headers before the request body is sent. If no error results from such verification, the server will send a 100 (Continue) interim response to indicate readiness for the request body. The only allowed value for this parameter is "100-Continue" (case-insensitive).
        :param pulumi.Input[builtins.bool] is_force: is force
        :param pulumi.Input[builtins.str] lookup_name: The name of the lookup to operate on.
        :param pulumi.Input[builtins.str] namespace: The Logging Analytics namespace used for the request. 
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NamespaceLookupsUpdateDataManagementArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource provides the Namespace Lookups Update Data Management resource in Oracle Cloud Infrastructure Log Analytics service.

        Updates the lookup content. The csv file containing the content to be updated is passed in as binary data in the request.

        :param str resource_name: The name of the resource.
        :param NamespaceLookupsUpdateDataManagementArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NamespaceLookupsUpdateDataManagementArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 char_encoding: Optional[pulumi.Input[builtins.str]] = None,
                 expect: Optional[pulumi.Input[builtins.str]] = None,
                 is_force: Optional[pulumi.Input[builtins.bool]] = None,
                 lookup_name: Optional[pulumi.Input[builtins.str]] = None,
                 namespace: Optional[pulumi.Input[builtins.str]] = None,
                 update_lookup_file: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NamespaceLookupsUpdateDataManagementArgs.__new__(NamespaceLookupsUpdateDataManagementArgs)

            __props__.__dict__["char_encoding"] = char_encoding
            __props__.__dict__["expect"] = expect
            __props__.__dict__["is_force"] = is_force
            if lookup_name is None and not opts.urn:
                raise TypeError("Missing required property 'lookup_name'")
            __props__.__dict__["lookup_name"] = lookup_name
            if namespace is None and not opts.urn:
                raise TypeError("Missing required property 'namespace'")
            __props__.__dict__["namespace"] = namespace
            if update_lookup_file is None and not opts.urn:
                raise TypeError("Missing required property 'update_lookup_file'")
            __props__.__dict__["update_lookup_file"] = update_lookup_file
        super(NamespaceLookupsUpdateDataManagement, __self__).__init__(
            'oci:LogAnalytics/namespaceLookupsUpdateDataManagement:NamespaceLookupsUpdateDataManagement',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            char_encoding: Optional[pulumi.Input[builtins.str]] = None,
            expect: Optional[pulumi.Input[builtins.str]] = None,
            is_force: Optional[pulumi.Input[builtins.bool]] = None,
            lookup_name: Optional[pulumi.Input[builtins.str]] = None,
            namespace: Optional[pulumi.Input[builtins.str]] = None,
            update_lookup_file: Optional[pulumi.Input[builtins.str]] = None) -> 'NamespaceLookupsUpdateDataManagement':
        """
        Get an existing NamespaceLookupsUpdateDataManagement resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] char_encoding: The character encoding of the uploaded file.
        :param pulumi.Input[builtins.str] expect: A value of `100-continue` requests preliminary verification of the request method, path, and headers before the request body is sent. If no error results from such verification, the server will send a 100 (Continue) interim response to indicate readiness for the request body. The only allowed value for this parameter is "100-Continue" (case-insensitive).
        :param pulumi.Input[builtins.bool] is_force: is force
        :param pulumi.Input[builtins.str] lookup_name: The name of the lookup to operate on.
        :param pulumi.Input[builtins.str] namespace: The Logging Analytics namespace used for the request. 
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NamespaceLookupsUpdateDataManagementState.__new__(_NamespaceLookupsUpdateDataManagementState)

        __props__.__dict__["char_encoding"] = char_encoding
        __props__.__dict__["expect"] = expect
        __props__.__dict__["is_force"] = is_force
        __props__.__dict__["lookup_name"] = lookup_name
        __props__.__dict__["namespace"] = namespace
        __props__.__dict__["update_lookup_file"] = update_lookup_file
        return NamespaceLookupsUpdateDataManagement(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="charEncoding")
    def char_encoding(self) -> pulumi.Output[builtins.str]:
        """
        The character encoding of the uploaded file.
        """
        return pulumi.get(self, "char_encoding")

    @property
    @pulumi.getter
    def expect(self) -> pulumi.Output[builtins.str]:
        """
        A value of `100-continue` requests preliminary verification of the request method, path, and headers before the request body is sent. If no error results from such verification, the server will send a 100 (Continue) interim response to indicate readiness for the request body. The only allowed value for this parameter is "100-Continue" (case-insensitive).
        """
        return pulumi.get(self, "expect")

    @property
    @pulumi.getter(name="isForce")
    def is_force(self) -> pulumi.Output[builtins.bool]:
        """
        is force
        """
        return pulumi.get(self, "is_force")

    @property
    @pulumi.getter(name="lookupName")
    def lookup_name(self) -> pulumi.Output[builtins.str]:
        """
        The name of the lookup to operate on.
        """
        return pulumi.get(self, "lookup_name")

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Output[builtins.str]:
        """
        The Logging Analytics namespace used for the request. 


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="updateLookupFile")
    def update_lookup_file(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "update_lookup_file")

