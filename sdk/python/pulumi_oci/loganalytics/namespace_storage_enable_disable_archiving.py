# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['NamespaceStorageEnableDisableArchivingArgs', 'NamespaceStorageEnableDisableArchiving']

@pulumi.input_type
class NamespaceStorageEnableDisableArchivingArgs:
    def __init__(__self__, *,
                 enable_archiving_tenant: pulumi.Input[builtins.bool],
                 namespace: pulumi.Input[builtins.str]):
        """
        The set of arguments for constructing a NamespaceStorageEnableDisableArchiving resource.
        :param pulumi.Input[builtins.bool] enable_archiving_tenant: (Updatable) A required field when set to `true` calls enable action and when set to `false` calls disable action.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param pulumi.Input[builtins.str] namespace: The Logging Analytics namespace used for the request.
        """
        pulumi.set(__self__, "enable_archiving_tenant", enable_archiving_tenant)
        pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter(name="enableArchivingTenant")
    def enable_archiving_tenant(self) -> pulumi.Input[builtins.bool]:
        """
        (Updatable) A required field when set to `true` calls enable action and when set to `false` calls disable action.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "enable_archiving_tenant")

    @enable_archiving_tenant.setter
    def enable_archiving_tenant(self, value: pulumi.Input[builtins.bool]):
        pulumi.set(self, "enable_archiving_tenant", value)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[builtins.str]:
        """
        The Logging Analytics namespace used for the request.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class _NamespaceStorageEnableDisableArchivingState:
    def __init__(__self__, *,
                 enable_archiving_tenant: Optional[pulumi.Input[builtins.bool]] = None,
                 message: Optional[pulumi.Input[builtins.str]] = None,
                 namespace: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering NamespaceStorageEnableDisableArchiving resources.
        :param pulumi.Input[builtins.bool] enable_archiving_tenant: (Updatable) A required field when set to `true` calls enable action and when set to `false` calls disable action.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param pulumi.Input[builtins.str] message: A human-readable success string.
        :param pulumi.Input[builtins.str] namespace: The Logging Analytics namespace used for the request.
        """
        if enable_archiving_tenant is not None:
            pulumi.set(__self__, "enable_archiving_tenant", enable_archiving_tenant)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter(name="enableArchivingTenant")
    def enable_archiving_tenant(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        (Updatable) A required field when set to `true` calls enable action and when set to `false` calls disable action.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "enable_archiving_tenant")

    @enable_archiving_tenant.setter
    def enable_archiving_tenant(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_archiving_tenant", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        A human-readable success string.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The Logging Analytics namespace used for the request.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "namespace", value)


@pulumi.type_token("oci:LogAnalytics/namespaceStorageEnableDisableArchiving:NamespaceStorageEnableDisableArchiving")
class NamespaceStorageEnableDisableArchiving(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_archiving_tenant: Optional[pulumi.Input[builtins.bool]] = None,
                 namespace: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        This resource provides the Namespace Storage Enable Disable Archiving resource in Oracle Cloud Infrastructure Log Analytics service.

        THis API enables archiving.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_oci as oci

        test_namespace_storage_enable_disable_archiving = oci.log_analytics.NamespaceStorageEnableDisableArchiving("test_namespace_storage_enable_disable_archiving",
            namespace=namespace_storage_enable_disable_archiving_namespace,
            enable_archiving_tenant=enable_archiving_tenant)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.bool] enable_archiving_tenant: (Updatable) A required field when set to `true` calls enable action and when set to `false` calls disable action.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param pulumi.Input[builtins.str] namespace: The Logging Analytics namespace used for the request.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NamespaceStorageEnableDisableArchivingArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource provides the Namespace Storage Enable Disable Archiving resource in Oracle Cloud Infrastructure Log Analytics service.

        THis API enables archiving.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_oci as oci

        test_namespace_storage_enable_disable_archiving = oci.log_analytics.NamespaceStorageEnableDisableArchiving("test_namespace_storage_enable_disable_archiving",
            namespace=namespace_storage_enable_disable_archiving_namespace,
            enable_archiving_tenant=enable_archiving_tenant)
        ```

        :param str resource_name: The name of the resource.
        :param NamespaceStorageEnableDisableArchivingArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NamespaceStorageEnableDisableArchivingArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_archiving_tenant: Optional[pulumi.Input[builtins.bool]] = None,
                 namespace: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NamespaceStorageEnableDisableArchivingArgs.__new__(NamespaceStorageEnableDisableArchivingArgs)

            if enable_archiving_tenant is None and not opts.urn:
                raise TypeError("Missing required property 'enable_archiving_tenant'")
            __props__.__dict__["enable_archiving_tenant"] = enable_archiving_tenant
            if namespace is None and not opts.urn:
                raise TypeError("Missing required property 'namespace'")
            __props__.__dict__["namespace"] = namespace
            __props__.__dict__["message"] = None
        super(NamespaceStorageEnableDisableArchiving, __self__).__init__(
            'oci:LogAnalytics/namespaceStorageEnableDisableArchiving:NamespaceStorageEnableDisableArchiving',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enable_archiving_tenant: Optional[pulumi.Input[builtins.bool]] = None,
            message: Optional[pulumi.Input[builtins.str]] = None,
            namespace: Optional[pulumi.Input[builtins.str]] = None) -> 'NamespaceStorageEnableDisableArchiving':
        """
        Get an existing NamespaceStorageEnableDisableArchiving resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.bool] enable_archiving_tenant: (Updatable) A required field when set to `true` calls enable action and when set to `false` calls disable action.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param pulumi.Input[builtins.str] message: A human-readable success string.
        :param pulumi.Input[builtins.str] namespace: The Logging Analytics namespace used for the request.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NamespaceStorageEnableDisableArchivingState.__new__(_NamespaceStorageEnableDisableArchivingState)

        __props__.__dict__["enable_archiving_tenant"] = enable_archiving_tenant
        __props__.__dict__["message"] = message
        __props__.__dict__["namespace"] = namespace
        return NamespaceStorageEnableDisableArchiving(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="enableArchivingTenant")
    def enable_archiving_tenant(self) -> pulumi.Output[builtins.bool]:
        """
        (Updatable) A required field when set to `true` calls enable action and when set to `false` calls disable action.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "enable_archiving_tenant")

    @property
    @pulumi.getter
    def message(self) -> pulumi.Output[builtins.str]:
        """
        A human-readable success string.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Output[builtins.str]:
        """
        The Logging Analytics namespace used for the request.
        """
        return pulumi.get(self, "namespace")

