# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetManagementAgentsResult',
    'AwaitableGetManagementAgentsResult',
    'get_management_agents',
    'get_management_agents_output',
]

@pulumi.output_type
class GetManagementAgentsResult:
    """
    A collection of values returned by getManagementAgents.
    """
    def __init__(__self__, availability_status=None, compartment_id=None, display_name=None, filters=None, host_id=None, id=None, install_type=None, is_customer_deployed=None, management_agents=None, platform_types=None, plugin_names=None, state=None, versions=None):
        if availability_status and not isinstance(availability_status, str):
            raise TypeError("Expected argument 'availability_status' to be a str")
        pulumi.set(__self__, "availability_status", availability_status)
        if compartment_id and not isinstance(compartment_id, str):
            raise TypeError("Expected argument 'compartment_id' to be a str")
        pulumi.set(__self__, "compartment_id", compartment_id)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if host_id and not isinstance(host_id, str):
            raise TypeError("Expected argument 'host_id' to be a str")
        pulumi.set(__self__, "host_id", host_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if install_type and not isinstance(install_type, str):
            raise TypeError("Expected argument 'install_type' to be a str")
        pulumi.set(__self__, "install_type", install_type)
        if is_customer_deployed and not isinstance(is_customer_deployed, bool):
            raise TypeError("Expected argument 'is_customer_deployed' to be a bool")
        pulumi.set(__self__, "is_customer_deployed", is_customer_deployed)
        if management_agents and not isinstance(management_agents, list):
            raise TypeError("Expected argument 'management_agents' to be a list")
        pulumi.set(__self__, "management_agents", management_agents)
        if platform_types and not isinstance(platform_types, list):
            raise TypeError("Expected argument 'platform_types' to be a list")
        pulumi.set(__self__, "platform_types", platform_types)
        if plugin_names and not isinstance(plugin_names, list):
            raise TypeError("Expected argument 'plugin_names' to be a list")
        pulumi.set(__self__, "plugin_names", plugin_names)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if versions and not isinstance(versions, list):
            raise TypeError("Expected argument 'versions' to be a list")
        pulumi.set(__self__, "versions", versions)

    @property
    @pulumi.getter(name="availabilityStatus")
    def availability_status(self) -> Optional[str]:
        """
        The current availability status of managementAgent
        """
        return pulumi.get(self, "availability_status")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        Compartment Identifier
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        Management Agent Name
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetManagementAgentsFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter(name="hostId")
    def host_id(self) -> Optional[str]:
        """
        Host resource ocid
        """
        return pulumi.get(self, "host_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="installType")
    def install_type(self) -> Optional[str]:
        """
        The install type, either AGENT or GATEWAY
        """
        return pulumi.get(self, "install_type")

    @property
    @pulumi.getter(name="isCustomerDeployed")
    def is_customer_deployed(self) -> Optional[bool]:
        """
        true, if the agent image is manually downloaded and installed. false, if the agent is deployed as a plugin in Oracle Cloud Agent.
        """
        return pulumi.get(self, "is_customer_deployed")

    @property
    @pulumi.getter(name="managementAgents")
    def management_agents(self) -> Sequence['outputs.GetManagementAgentsManagementAgentResult']:
        """
        The list of management_agents.
        """
        return pulumi.get(self, "management_agents")

    @property
    @pulumi.getter(name="platformTypes")
    def platform_types(self) -> Optional[Sequence[str]]:
        """
        Platform Type
        """
        return pulumi.get(self, "platform_types")

    @property
    @pulumi.getter(name="pluginNames")
    def plugin_names(self) -> Optional[Sequence[str]]:
        """
        Management Agent Plugin Name
        """
        return pulumi.get(self, "plugin_names")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        The current state of managementAgent
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def versions(self) -> Optional[Sequence[str]]:
        """
        Management Agent Version
        """
        return pulumi.get(self, "versions")


class AwaitableGetManagementAgentsResult(GetManagementAgentsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetManagementAgentsResult(
            availability_status=self.availability_status,
            compartment_id=self.compartment_id,
            display_name=self.display_name,
            filters=self.filters,
            host_id=self.host_id,
            id=self.id,
            install_type=self.install_type,
            is_customer_deployed=self.is_customer_deployed,
            management_agents=self.management_agents,
            platform_types=self.platform_types,
            plugin_names=self.plugin_names,
            state=self.state,
            versions=self.versions)


def get_management_agents(availability_status: Optional[str] = None,
                          compartment_id: Optional[str] = None,
                          display_name: Optional[str] = None,
                          filters: Optional[Sequence[pulumi.InputType['GetManagementAgentsFilterArgs']]] = None,
                          host_id: Optional[str] = None,
                          install_type: Optional[str] = None,
                          is_customer_deployed: Optional[bool] = None,
                          platform_types: Optional[Sequence[str]] = None,
                          plugin_names: Optional[Sequence[str]] = None,
                          state: Optional[str] = None,
                          versions: Optional[Sequence[str]] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetManagementAgentsResult:
    """
    This data source provides the list of Management Agents in Oracle Cloud Infrastructure Management Agent service.

    Returns a list of Management Agents.
    If no explicit page size limit is specified, it will default to 5000.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_management_agents = oci.ManagementAgent.get_management_agents(compartment_id=var["compartment_id"],
        availability_status=var["management_agent_availability_status"],
        display_name=var["management_agent_display_name"],
        host_id=oci_management_agent_host["test_host"]["id"],
        install_type=var["management_agent_install_type"],
        is_customer_deployed=var["management_agent_is_customer_deployed"],
        platform_types=var["management_agent_platform_type"],
        plugin_names=var["management_agent_plugin_name"],
        state=var["management_agent_state"],
        versions=var["management_agent_version"])
    ```


    :param str availability_status: Filter to return only Management Agents in the particular availability status.
    :param str compartment_id: The OCID of the compartment to which a request will be scoped.
    :param str display_name: Filter to return only Management Agents having the particular display name.
    :param str host_id: Filter to return only Management Agents having the particular agent host id.
    :param str install_type: A filter to return either agents or gateway types depending upon install type selected by user. By default both install type will be returned.
    :param bool is_customer_deployed: true, if the agent image is manually downloaded and installed. false, if the agent is deployed as a plugin in Oracle Cloud Agent.
    :param Sequence[str] platform_types: Filter to return only results having the particular platform type.
    :param Sequence[str] plugin_names: Filter to return only Management Agents having the particular Plugin installed. A special pluginName of 'None' can be provided and this will return only Management Agents having no plugin installed.
    :param str state: Filter to return only Management Agents in the particular lifecycle state.
    :param Sequence[str] versions: Filter to return only Management Agents having the particular agent version.
    """
    __args__ = dict()
    __args__['availabilityStatus'] = availability_status
    __args__['compartmentId'] = compartment_id
    __args__['displayName'] = display_name
    __args__['filters'] = filters
    __args__['hostId'] = host_id
    __args__['installType'] = install_type
    __args__['isCustomerDeployed'] = is_customer_deployed
    __args__['platformTypes'] = platform_types
    __args__['pluginNames'] = plugin_names
    __args__['state'] = state
    __args__['versions'] = versions
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('oci:ManagementAgent/getManagementAgents:getManagementAgents', __args__, opts=opts, typ=GetManagementAgentsResult).value

    return AwaitableGetManagementAgentsResult(
        availability_status=__ret__.availability_status,
        compartment_id=__ret__.compartment_id,
        display_name=__ret__.display_name,
        filters=__ret__.filters,
        host_id=__ret__.host_id,
        id=__ret__.id,
        install_type=__ret__.install_type,
        is_customer_deployed=__ret__.is_customer_deployed,
        management_agents=__ret__.management_agents,
        platform_types=__ret__.platform_types,
        plugin_names=__ret__.plugin_names,
        state=__ret__.state,
        versions=__ret__.versions)


@_utilities.lift_output_func(get_management_agents)
def get_management_agents_output(availability_status: Optional[pulumi.Input[Optional[str]]] = None,
                                 compartment_id: Optional[pulumi.Input[str]] = None,
                                 display_name: Optional[pulumi.Input[Optional[str]]] = None,
                                 filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetManagementAgentsFilterArgs']]]]] = None,
                                 host_id: Optional[pulumi.Input[Optional[str]]] = None,
                                 install_type: Optional[pulumi.Input[Optional[str]]] = None,
                                 is_customer_deployed: Optional[pulumi.Input[Optional[bool]]] = None,
                                 platform_types: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                 plugin_names: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                 state: Optional[pulumi.Input[Optional[str]]] = None,
                                 versions: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetManagementAgentsResult]:
    """
    This data source provides the list of Management Agents in Oracle Cloud Infrastructure Management Agent service.

    Returns a list of Management Agents.
    If no explicit page size limit is specified, it will default to 5000.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_management_agents = oci.ManagementAgent.get_management_agents(compartment_id=var["compartment_id"],
        availability_status=var["management_agent_availability_status"],
        display_name=var["management_agent_display_name"],
        host_id=oci_management_agent_host["test_host"]["id"],
        install_type=var["management_agent_install_type"],
        is_customer_deployed=var["management_agent_is_customer_deployed"],
        platform_types=var["management_agent_platform_type"],
        plugin_names=var["management_agent_plugin_name"],
        state=var["management_agent_state"],
        versions=var["management_agent_version"])
    ```


    :param str availability_status: Filter to return only Management Agents in the particular availability status.
    :param str compartment_id: The OCID of the compartment to which a request will be scoped.
    :param str display_name: Filter to return only Management Agents having the particular display name.
    :param str host_id: Filter to return only Management Agents having the particular agent host id.
    :param str install_type: A filter to return either agents or gateway types depending upon install type selected by user. By default both install type will be returned.
    :param bool is_customer_deployed: true, if the agent image is manually downloaded and installed. false, if the agent is deployed as a plugin in Oracle Cloud Agent.
    :param Sequence[str] platform_types: Filter to return only results having the particular platform type.
    :param Sequence[str] plugin_names: Filter to return only Management Agents having the particular Plugin installed. A special pluginName of 'None' can be provided and this will return only Management Agents having no plugin installed.
    :param str state: Filter to return only Management Agents in the particular lifecycle state.
    :param Sequence[str] versions: Filter to return only Management Agents having the particular agent version.
    """
    ...
