# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ManagementAgentManagementAgentProperty',
    'ManagementAgentPluginList',
    'GetManagementAgentAvailableHistoriesAvailabilityHistoryResult',
    'GetManagementAgentAvailableHistoriesFilterResult',
    'GetManagementAgentCountItemResult',
    'GetManagementAgentCountItemDimensionResult',
    'GetManagementAgentImagesFilterResult',
    'GetManagementAgentImagesManagementAgentImageResult',
    'GetManagementAgentImagesManagementAgentImageImageObjectStorageDetailResult',
    'GetManagementAgentInstallKeysFilterResult',
    'GetManagementAgentInstallKeysManagementAgentInstallKeyResult',
    'GetManagementAgentManagementAgentPropertyResult',
    'GetManagementAgentPluginCountItemResult',
    'GetManagementAgentPluginCountItemDimensionResult',
    'GetManagementAgentPluginListResult',
    'GetManagementAgentPluginsFilterResult',
    'GetManagementAgentPluginsManagementAgentPluginResult',
    'GetManagementAgentsFilterResult',
    'GetManagementAgentsManagementAgentResult',
    'GetManagementAgentsManagementAgentManagementAgentPropertyResult',
    'GetManagementAgentsManagementAgentPluginListResult',
]

@pulumi.output_type
class ManagementAgentManagementAgentProperty(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 units: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if units is not None:
            pulumi.set(__self__, "units", units)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def units(self) -> Optional[str]:
        return pulumi.get(self, "units")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class ManagementAgentPluginList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isEnabled":
            suggest = "is_enabled"
        elif key == "pluginDisplayName":
            suggest = "plugin_display_name"
        elif key == "pluginId":
            suggest = "plugin_id"
        elif key == "pluginName":
            suggest = "plugin_name"
        elif key == "pluginStatus":
            suggest = "plugin_status"
        elif key == "pluginStatusMessage":
            suggest = "plugin_status_message"
        elif key == "pluginVersion":
            suggest = "plugin_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagementAgentPluginList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagementAgentPluginList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagementAgentPluginList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_enabled: Optional[bool] = None,
                 plugin_display_name: Optional[str] = None,
                 plugin_id: Optional[str] = None,
                 plugin_name: Optional[str] = None,
                 plugin_status: Optional[str] = None,
                 plugin_status_message: Optional[str] = None,
                 plugin_version: Optional[str] = None):
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if plugin_display_name is not None:
            pulumi.set(__self__, "plugin_display_name", plugin_display_name)
        if plugin_id is not None:
            pulumi.set(__self__, "plugin_id", plugin_id)
        if plugin_name is not None:
            pulumi.set(__self__, "plugin_name", plugin_name)
        if plugin_status is not None:
            pulumi.set(__self__, "plugin_status", plugin_status)
        if plugin_status_message is not None:
            pulumi.set(__self__, "plugin_status_message", plugin_status_message)
        if plugin_version is not None:
            pulumi.set(__self__, "plugin_version", plugin_version)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="pluginDisplayName")
    def plugin_display_name(self) -> Optional[str]:
        return pulumi.get(self, "plugin_display_name")

    @property
    @pulumi.getter(name="pluginId")
    def plugin_id(self) -> Optional[str]:
        return pulumi.get(self, "plugin_id")

    @property
    @pulumi.getter(name="pluginName")
    def plugin_name(self) -> Optional[str]:
        return pulumi.get(self, "plugin_name")

    @property
    @pulumi.getter(name="pluginStatus")
    def plugin_status(self) -> Optional[str]:
        return pulumi.get(self, "plugin_status")

    @property
    @pulumi.getter(name="pluginStatusMessage")
    def plugin_status_message(self) -> Optional[str]:
        return pulumi.get(self, "plugin_status_message")

    @property
    @pulumi.getter(name="pluginVersion")
    def plugin_version(self) -> Optional[str]:
        return pulumi.get(self, "plugin_version")


@pulumi.output_type
class GetManagementAgentAvailableHistoriesAvailabilityHistoryResult(dict):
    def __init__(__self__, *,
                 availability_status: Optional[str] = None,
                 management_agent_id: Optional[str] = None,
                 time_availability_status_ended: Optional[str] = None,
                 time_availability_status_started: Optional[str] = None):
        if availability_status is not None:
            pulumi.set(__self__, "availability_status", availability_status)
        if management_agent_id is not None:
            pulumi.set(__self__, "management_agent_id", management_agent_id)
        if time_availability_status_ended is not None:
            pulumi.set(__self__, "time_availability_status_ended", time_availability_status_ended)
        if time_availability_status_started is not None:
            pulumi.set(__self__, "time_availability_status_started", time_availability_status_started)

    @property
    @pulumi.getter(name="availabilityStatus")
    def availability_status(self) -> Optional[str]:
        return pulumi.get(self, "availability_status")

    @property
    @pulumi.getter(name="managementAgentId")
    def management_agent_id(self) -> Optional[str]:
        return pulumi.get(self, "management_agent_id")

    @property
    @pulumi.getter(name="timeAvailabilityStatusEnded")
    def time_availability_status_ended(self) -> Optional[str]:
        return pulumi.get(self, "time_availability_status_ended")

    @property
    @pulumi.getter(name="timeAvailabilityStatusStarted")
    def time_availability_status_started(self) -> Optional[str]:
        return pulumi.get(self, "time_availability_status_started")


@pulumi.output_type
class GetManagementAgentAvailableHistoriesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagementAgentCountItemResult(dict):
    def __init__(__self__, *,
                 count: Optional[int] = None,
                 dimensions: Optional[Sequence['outputs.GetManagementAgentCountItemDimensionResult']] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)
        if dimensions is not None:
            pulumi.set(__self__, "dimensions", dimensions)

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[Sequence['outputs.GetManagementAgentCountItemDimensionResult']]:
        return pulumi.get(self, "dimensions")


@pulumi.output_type
class GetManagementAgentCountItemDimensionResult(dict):
    def __init__(__self__, *,
                 availability_status: Optional[str] = None,
                 has_plugins: Optional[bool] = None,
                 install_type: Optional[str] = None,
                 platform_type: Optional[str] = None,
                 version: Optional[str] = None):
        if availability_status is not None:
            pulumi.set(__self__, "availability_status", availability_status)
        if has_plugins is not None:
            pulumi.set(__self__, "has_plugins", has_plugins)
        if install_type is not None:
            pulumi.set(__self__, "install_type", install_type)
        if platform_type is not None:
            pulumi.set(__self__, "platform_type", platform_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="availabilityStatus")
    def availability_status(self) -> Optional[str]:
        return pulumi.get(self, "availability_status")

    @property
    @pulumi.getter(name="hasPlugins")
    def has_plugins(self) -> Optional[bool]:
        return pulumi.get(self, "has_plugins")

    @property
    @pulumi.getter(name="installType")
    def install_type(self) -> Optional[str]:
        return pulumi.get(self, "install_type")

    @property
    @pulumi.getter(name="platformType")
    def platform_type(self) -> Optional[str]:
        return pulumi.get(self, "platform_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetManagementAgentImagesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagementAgentImagesManagementAgentImageResult(dict):
    def __init__(__self__, *,
                 checksum: Optional[str] = None,
                 id: Optional[str] = None,
                 image_object_storage_details: Optional[Sequence['outputs.GetManagementAgentImagesManagementAgentImageImageObjectStorageDetailResult']] = None,
                 object_url: Optional[str] = None,
                 package_architecture_type: Optional[str] = None,
                 package_type: Optional[str] = None,
                 platform_name: Optional[str] = None,
                 platform_type: Optional[str] = None,
                 size: Optional[float] = None,
                 state: Optional[str] = None,
                 version: Optional[str] = None):
        if checksum is not None:
            pulumi.set(__self__, "checksum", checksum)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if image_object_storage_details is not None:
            pulumi.set(__self__, "image_object_storage_details", image_object_storage_details)
        if object_url is not None:
            pulumi.set(__self__, "object_url", object_url)
        if package_architecture_type is not None:
            pulumi.set(__self__, "package_architecture_type", package_architecture_type)
        if package_type is not None:
            pulumi.set(__self__, "package_type", package_type)
        if platform_name is not None:
            pulumi.set(__self__, "platform_name", platform_name)
        if platform_type is not None:
            pulumi.set(__self__, "platform_type", platform_type)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def checksum(self) -> Optional[str]:
        return pulumi.get(self, "checksum")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="imageObjectStorageDetails")
    def image_object_storage_details(self) -> Optional[Sequence['outputs.GetManagementAgentImagesManagementAgentImageImageObjectStorageDetailResult']]:
        return pulumi.get(self, "image_object_storage_details")

    @property
    @pulumi.getter(name="objectUrl")
    def object_url(self) -> Optional[str]:
        return pulumi.get(self, "object_url")

    @property
    @pulumi.getter(name="packageArchitectureType")
    def package_architecture_type(self) -> Optional[str]:
        return pulumi.get(self, "package_architecture_type")

    @property
    @pulumi.getter(name="packageType")
    def package_type(self) -> Optional[str]:
        return pulumi.get(self, "package_type")

    @property
    @pulumi.getter(name="platformName")
    def platform_name(self) -> Optional[str]:
        return pulumi.get(self, "platform_name")

    @property
    @pulumi.getter(name="platformType")
    def platform_type(self) -> Optional[str]:
        return pulumi.get(self, "platform_type")

    @property
    @pulumi.getter
    def size(self) -> Optional[float]:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetManagementAgentImagesManagementAgentImageImageObjectStorageDetailResult(dict):
    def __init__(__self__, *,
                 checksum: Optional[str] = None,
                 object: Optional[str] = None,
                 object_bucket: Optional[str] = None,
                 object_namespace: Optional[str] = None,
                 object_url: Optional[str] = None):
        if checksum is not None:
            pulumi.set(__self__, "checksum", checksum)
        if object is not None:
            pulumi.set(__self__, "object", object)
        if object_bucket is not None:
            pulumi.set(__self__, "object_bucket", object_bucket)
        if object_namespace is not None:
            pulumi.set(__self__, "object_namespace", object_namespace)
        if object_url is not None:
            pulumi.set(__self__, "object_url", object_url)

    @property
    @pulumi.getter
    def checksum(self) -> Optional[str]:
        return pulumi.get(self, "checksum")

    @property
    @pulumi.getter
    def object(self) -> Optional[str]:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter(name="objectBucket")
    def object_bucket(self) -> Optional[str]:
        return pulumi.get(self, "object_bucket")

    @property
    @pulumi.getter(name="objectNamespace")
    def object_namespace(self) -> Optional[str]:
        return pulumi.get(self, "object_namespace")

    @property
    @pulumi.getter(name="objectUrl")
    def object_url(self) -> Optional[str]:
        return pulumi.get(self, "object_url")


@pulumi.output_type
class GetManagementAgentInstallKeysFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagementAgentInstallKeysManagementAgentInstallKeyResult(dict):
    def __init__(__self__, *,
                 allowed_key_install_count: Optional[int] = None,
                 compartment_id: Optional[str] = None,
                 created_by_principal_id: Optional[str] = None,
                 current_key_install_count: Optional[int] = None,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None,
                 is_unlimited: Optional[bool] = None,
                 key: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_expires: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if allowed_key_install_count is not None:
            pulumi.set(__self__, "allowed_key_install_count", allowed_key_install_count)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if created_by_principal_id is not None:
            pulumi.set(__self__, "created_by_principal_id", created_by_principal_id)
        if current_key_install_count is not None:
            pulumi.set(__self__, "current_key_install_count", current_key_install_count)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_unlimited is not None:
            pulumi.set(__self__, "is_unlimited", is_unlimited)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_expires is not None:
            pulumi.set(__self__, "time_expires", time_expires)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="allowedKeyInstallCount")
    def allowed_key_install_count(self) -> Optional[int]:
        return pulumi.get(self, "allowed_key_install_count")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="createdByPrincipalId")
    def created_by_principal_id(self) -> Optional[str]:
        return pulumi.get(self, "created_by_principal_id")

    @property
    @pulumi.getter(name="currentKeyInstallCount")
    def current_key_install_count(self) -> Optional[int]:
        return pulumi.get(self, "current_key_install_count")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isUnlimited")
    def is_unlimited(self) -> Optional[bool]:
        return pulumi.get(self, "is_unlimited")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeExpires")
    def time_expires(self) -> Optional[str]:
        return pulumi.get(self, "time_expires")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetManagementAgentManagementAgentPropertyResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 units: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if units is not None:
            pulumi.set(__self__, "units", units)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def units(self) -> Optional[str]:
        return pulumi.get(self, "units")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetManagementAgentPluginCountItemResult(dict):
    def __init__(__self__, *,
                 count: Optional[int] = None,
                 dimensions: Optional[Sequence['outputs.GetManagementAgentPluginCountItemDimensionResult']] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)
        if dimensions is not None:
            pulumi.set(__self__, "dimensions", dimensions)

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[Sequence['outputs.GetManagementAgentPluginCountItemDimensionResult']]:
        return pulumi.get(self, "dimensions")


@pulumi.output_type
class GetManagementAgentPluginCountItemDimensionResult(dict):
    def __init__(__self__, *,
                 plugin_display_name: Optional[str] = None,
                 plugin_name: Optional[str] = None):
        if plugin_display_name is not None:
            pulumi.set(__self__, "plugin_display_name", plugin_display_name)
        if plugin_name is not None:
            pulumi.set(__self__, "plugin_name", plugin_name)

    @property
    @pulumi.getter(name="pluginDisplayName")
    def plugin_display_name(self) -> Optional[str]:
        return pulumi.get(self, "plugin_display_name")

    @property
    @pulumi.getter(name="pluginName")
    def plugin_name(self) -> Optional[str]:
        return pulumi.get(self, "plugin_name")


@pulumi.output_type
class GetManagementAgentPluginListResult(dict):
    def __init__(__self__, *,
                 is_enabled: Optional[bool] = None,
                 plugin_display_name: Optional[str] = None,
                 plugin_id: Optional[str] = None,
                 plugin_name: Optional[str] = None,
                 plugin_status: Optional[str] = None,
                 plugin_status_message: Optional[str] = None,
                 plugin_version: Optional[str] = None):
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if plugin_display_name is not None:
            pulumi.set(__self__, "plugin_display_name", plugin_display_name)
        if plugin_id is not None:
            pulumi.set(__self__, "plugin_id", plugin_id)
        if plugin_name is not None:
            pulumi.set(__self__, "plugin_name", plugin_name)
        if plugin_status is not None:
            pulumi.set(__self__, "plugin_status", plugin_status)
        if plugin_status_message is not None:
            pulumi.set(__self__, "plugin_status_message", plugin_status_message)
        if plugin_version is not None:
            pulumi.set(__self__, "plugin_version", plugin_version)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="pluginDisplayName")
    def plugin_display_name(self) -> Optional[str]:
        return pulumi.get(self, "plugin_display_name")

    @property
    @pulumi.getter(name="pluginId")
    def plugin_id(self) -> Optional[str]:
        return pulumi.get(self, "plugin_id")

    @property
    @pulumi.getter(name="pluginName")
    def plugin_name(self) -> Optional[str]:
        return pulumi.get(self, "plugin_name")

    @property
    @pulumi.getter(name="pluginStatus")
    def plugin_status(self) -> Optional[str]:
        return pulumi.get(self, "plugin_status")

    @property
    @pulumi.getter(name="pluginStatusMessage")
    def plugin_status_message(self) -> Optional[str]:
        return pulumi.get(self, "plugin_status_message")

    @property
    @pulumi.getter(name="pluginVersion")
    def plugin_version(self) -> Optional[str]:
        return pulumi.get(self, "plugin_version")


@pulumi.output_type
class GetManagementAgentPluginsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagementAgentPluginsManagementAgentPluginResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None,
                 is_console_deployable: Optional[bool] = None,
                 name: Optional[str] = None,
                 state: Optional[str] = None,
                 supported_platform_types: Optional[Sequence[str]] = None,
                 version: Optional[int] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_console_deployable is not None:
            pulumi.set(__self__, "is_console_deployable", is_console_deployable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if supported_platform_types is not None:
            pulumi.set(__self__, "supported_platform_types", supported_platform_types)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isConsoleDeployable")
    def is_console_deployable(self) -> Optional[bool]:
        return pulumi.get(self, "is_console_deployable")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="supportedPlatformTypes")
    def supported_platform_types(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "supported_platform_types")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetManagementAgentsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagementAgentsManagementAgentResult(dict):
    def __init__(__self__, *,
                 availability_status: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 deploy_plugins_ids: Optional[Sequence[str]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 host: Optional[str] = None,
                 host_id: Optional[str] = None,
                 id: Optional[str] = None,
                 install_key_id: Optional[str] = None,
                 install_path: Optional[str] = None,
                 install_type: Optional[str] = None,
                 is_agent_auto_upgradable: Optional[bool] = None,
                 is_customer_deployed: Optional[bool] = None,
                 lifecycle_details: Optional[str] = None,
                 managed_agent_id: Optional[str] = None,
                 management_agent_properties: Optional[Sequence['outputs.GetManagementAgentsManagementAgentManagementAgentPropertyResult']] = None,
                 platform_name: Optional[str] = None,
                 platform_type: Optional[str] = None,
                 platform_version: Optional[str] = None,
                 plugin_lists: Optional[Sequence['outputs.GetManagementAgentsManagementAgentPluginListResult']] = None,
                 resource_artifact_version: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_last_heartbeat: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 version: Optional[str] = None):
        if availability_status is not None:
            pulumi.set(__self__, "availability_status", availability_status)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if deploy_plugins_ids is not None:
            pulumi.set(__self__, "deploy_plugins_ids", deploy_plugins_ids)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if host_id is not None:
            pulumi.set(__self__, "host_id", host_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if install_key_id is not None:
            pulumi.set(__self__, "install_key_id", install_key_id)
        if install_path is not None:
            pulumi.set(__self__, "install_path", install_path)
        if install_type is not None:
            pulumi.set(__self__, "install_type", install_type)
        if is_agent_auto_upgradable is not None:
            pulumi.set(__self__, "is_agent_auto_upgradable", is_agent_auto_upgradable)
        if is_customer_deployed is not None:
            pulumi.set(__self__, "is_customer_deployed", is_customer_deployed)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if managed_agent_id is not None:
            pulumi.set(__self__, "managed_agent_id", managed_agent_id)
        if management_agent_properties is not None:
            pulumi.set(__self__, "management_agent_properties", management_agent_properties)
        if platform_name is not None:
            pulumi.set(__self__, "platform_name", platform_name)
        if platform_type is not None:
            pulumi.set(__self__, "platform_type", platform_type)
        if platform_version is not None:
            pulumi.set(__self__, "platform_version", platform_version)
        if plugin_lists is not None:
            pulumi.set(__self__, "plugin_lists", plugin_lists)
        if resource_artifact_version is not None:
            pulumi.set(__self__, "resource_artifact_version", resource_artifact_version)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_last_heartbeat is not None:
            pulumi.set(__self__, "time_last_heartbeat", time_last_heartbeat)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="availabilityStatus")
    def availability_status(self) -> Optional[str]:
        return pulumi.get(self, "availability_status")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="deployPluginsIds")
    def deploy_plugins_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "deploy_plugins_ids")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="hostId")
    def host_id(self) -> Optional[str]:
        return pulumi.get(self, "host_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="installKeyId")
    def install_key_id(self) -> Optional[str]:
        return pulumi.get(self, "install_key_id")

    @property
    @pulumi.getter(name="installPath")
    def install_path(self) -> Optional[str]:
        return pulumi.get(self, "install_path")

    @property
    @pulumi.getter(name="installType")
    def install_type(self) -> Optional[str]:
        return pulumi.get(self, "install_type")

    @property
    @pulumi.getter(name="isAgentAutoUpgradable")
    def is_agent_auto_upgradable(self) -> Optional[bool]:
        return pulumi.get(self, "is_agent_auto_upgradable")

    @property
    @pulumi.getter(name="isCustomerDeployed")
    def is_customer_deployed(self) -> Optional[bool]:
        return pulumi.get(self, "is_customer_deployed")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="managedAgentId")
    def managed_agent_id(self) -> Optional[str]:
        return pulumi.get(self, "managed_agent_id")

    @property
    @pulumi.getter(name="managementAgentProperties")
    def management_agent_properties(self) -> Optional[Sequence['outputs.GetManagementAgentsManagementAgentManagementAgentPropertyResult']]:
        return pulumi.get(self, "management_agent_properties")

    @property
    @pulumi.getter(name="platformName")
    def platform_name(self) -> Optional[str]:
        return pulumi.get(self, "platform_name")

    @property
    @pulumi.getter(name="platformType")
    def platform_type(self) -> Optional[str]:
        return pulumi.get(self, "platform_type")

    @property
    @pulumi.getter(name="platformVersion")
    def platform_version(self) -> Optional[str]:
        return pulumi.get(self, "platform_version")

    @property
    @pulumi.getter(name="pluginLists")
    def plugin_lists(self) -> Optional[Sequence['outputs.GetManagementAgentsManagementAgentPluginListResult']]:
        return pulumi.get(self, "plugin_lists")

    @property
    @pulumi.getter(name="resourceArtifactVersion")
    def resource_artifact_version(self) -> Optional[str]:
        return pulumi.get(self, "resource_artifact_version")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeLastHeartbeat")
    def time_last_heartbeat(self) -> Optional[str]:
        return pulumi.get(self, "time_last_heartbeat")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetManagementAgentsManagementAgentManagementAgentPropertyResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 units: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if units is not None:
            pulumi.set(__self__, "units", units)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def units(self) -> Optional[str]:
        return pulumi.get(self, "units")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetManagementAgentsManagementAgentPluginListResult(dict):
    def __init__(__self__, *,
                 is_enabled: Optional[bool] = None,
                 plugin_display_name: Optional[str] = None,
                 plugin_id: Optional[str] = None,
                 plugin_name: Optional[str] = None,
                 plugin_status: Optional[str] = None,
                 plugin_status_message: Optional[str] = None,
                 plugin_version: Optional[str] = None):
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if plugin_display_name is not None:
            pulumi.set(__self__, "plugin_display_name", plugin_display_name)
        if plugin_id is not None:
            pulumi.set(__self__, "plugin_id", plugin_id)
        if plugin_name is not None:
            pulumi.set(__self__, "plugin_name", plugin_name)
        if plugin_status is not None:
            pulumi.set(__self__, "plugin_status", plugin_status)
        if plugin_status_message is not None:
            pulumi.set(__self__, "plugin_status_message", plugin_status_message)
        if plugin_version is not None:
            pulumi.set(__self__, "plugin_version", plugin_version)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="pluginDisplayName")
    def plugin_display_name(self) -> Optional[str]:
        return pulumi.get(self, "plugin_display_name")

    @property
    @pulumi.getter(name="pluginId")
    def plugin_id(self) -> Optional[str]:
        return pulumi.get(self, "plugin_id")

    @property
    @pulumi.getter(name="pluginName")
    def plugin_name(self) -> Optional[str]:
        return pulumi.get(self, "plugin_name")

    @property
    @pulumi.getter(name="pluginStatus")
    def plugin_status(self) -> Optional[str]:
        return pulumi.get(self, "plugin_status")

    @property
    @pulumi.getter(name="pluginStatusMessage")
    def plugin_status_message(self) -> Optional[str]:
        return pulumi.get(self, "plugin_status_message")

    @property
    @pulumi.getter(name="pluginVersion")
    def plugin_version(self) -> Optional[str]:
        return pulumi.get(self, "plugin_version")


