# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'MediaAssetMediaAssetTagArgs',
    'MediaAssetMetadataArgs',
    'MediaWorkflowJobOutputArgs',
    'MediaWorkflowJobTaskLifecycleStateArgs',
    'MediaWorkflowTaskArgs',
    'StreamCdnConfigConfigArgs',
    'StreamPackagingConfigEncryptionArgs',
    'GetMediaAssetsFilterArgs',
    'GetMediaWorkflowConfigurationsFilterArgs',
    'GetMediaWorkflowJobFactsFilterArgs',
    'GetMediaWorkflowJobsFilterArgs',
    'GetMediaWorkflowsFilterArgs',
    'GetStreamCdnConfigsFilterArgs',
    'GetStreamDistributionChannelsFilterArgs',
    'GetStreamPackagingConfigsFilterArgs',
]

@pulumi.input_type
class MediaAssetMediaAssetTagArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str],
                 type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "value", value)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class MediaAssetMetadataArgs:
    def __init__(__self__, *,
                 metadata: pulumi.Input[str]):
        pulumi.set(__self__, "metadata", metadata)

    @property
    @pulumi.getter
    def metadata(self) -> pulumi.Input[str]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: pulumi.Input[str]):
        pulumi.set(self, "metadata", value)


@pulumi.input_type
class MediaWorkflowJobOutputArgs:
    def __init__(__self__, *,
                 asset_type: Optional[pulumi.Input[str]] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 object: Optional[pulumi.Input[str]] = None):
        if asset_type is not None:
            pulumi.set(__self__, "asset_type", asset_type)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if object is not None:
            pulumi.set(__self__, "object", object)

    @property
    @pulumi.getter(name="assetType")
    def asset_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "asset_type")

    @asset_type.setter
    def asset_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset_type", value)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def object(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object", value)


@pulumi.input_type
class MediaWorkflowJobTaskLifecycleStateArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 lifecycle_details: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lifecycle_details")

    @lifecycle_details.setter
    def lifecycle_details(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lifecycle_details", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class MediaWorkflowTaskArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 parameters: pulumi.Input[str],
                 type: pulumi.Input[str],
                 version: pulumi.Input[str],
                 enable_parameter_reference: Optional[pulumi.Input[str]] = None,
                 enable_when_referenced_parameter_equals: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 prerequisites: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "parameters", parameters)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)
        if enable_parameter_reference is not None:
            pulumi.set(__self__, "enable_parameter_reference", enable_parameter_reference)
        if enable_when_referenced_parameter_equals is not None:
            pulumi.set(__self__, "enable_when_referenced_parameter_equals", enable_when_referenced_parameter_equals)
        if prerequisites is not None:
            pulumi.set(__self__, "prerequisites", prerequisites)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def parameters(self) -> pulumi.Input[str]:
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: pulumi.Input[str]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def version(self) -> pulumi.Input[str]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[str]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter(name="enableParameterReference")
    def enable_parameter_reference(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "enable_parameter_reference")

    @enable_parameter_reference.setter
    def enable_parameter_reference(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enable_parameter_reference", value)

    @property
    @pulumi.getter(name="enableWhenReferencedParameterEquals")
    def enable_when_referenced_parameter_equals(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "enable_when_referenced_parameter_equals")

    @enable_when_referenced_parameter_equals.setter
    def enable_when_referenced_parameter_equals(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "enable_when_referenced_parameter_equals", value)

    @property
    @pulumi.getter
    def prerequisites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "prerequisites")

    @prerequisites.setter
    def prerequisites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "prerequisites", value)


@pulumi.input_type
class StreamCdnConfigConfigArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 edge_hostname: Optional[pulumi.Input[str]] = None,
                 edge_path_prefix: Optional[pulumi.Input[str]] = None,
                 edge_token_key: Optional[pulumi.Input[str]] = None,
                 edge_token_salt: Optional[pulumi.Input[str]] = None,
                 is_edge_token_auth: Optional[pulumi.Input[bool]] = None,
                 origin_auth_secret_key_a: Optional[pulumi.Input[str]] = None,
                 origin_auth_secret_key_b: Optional[pulumi.Input[str]] = None,
                 origin_auth_secret_key_nonce_a: Optional[pulumi.Input[str]] = None,
                 origin_auth_secret_key_nonce_b: Optional[pulumi.Input[str]] = None,
                 origin_auth_sign_encryption: Optional[pulumi.Input[str]] = None,
                 origin_auth_sign_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if edge_hostname is not None:
            pulumi.set(__self__, "edge_hostname", edge_hostname)
        if edge_path_prefix is not None:
            pulumi.set(__self__, "edge_path_prefix", edge_path_prefix)
        if edge_token_key is not None:
            pulumi.set(__self__, "edge_token_key", edge_token_key)
        if edge_token_salt is not None:
            pulumi.set(__self__, "edge_token_salt", edge_token_salt)
        if is_edge_token_auth is not None:
            pulumi.set(__self__, "is_edge_token_auth", is_edge_token_auth)
        if origin_auth_secret_key_a is not None:
            pulumi.set(__self__, "origin_auth_secret_key_a", origin_auth_secret_key_a)
        if origin_auth_secret_key_b is not None:
            pulumi.set(__self__, "origin_auth_secret_key_b", origin_auth_secret_key_b)
        if origin_auth_secret_key_nonce_a is not None:
            pulumi.set(__self__, "origin_auth_secret_key_nonce_a", origin_auth_secret_key_nonce_a)
        if origin_auth_secret_key_nonce_b is not None:
            pulumi.set(__self__, "origin_auth_secret_key_nonce_b", origin_auth_secret_key_nonce_b)
        if origin_auth_sign_encryption is not None:
            pulumi.set(__self__, "origin_auth_sign_encryption", origin_auth_sign_encryption)
        if origin_auth_sign_type is not None:
            pulumi.set(__self__, "origin_auth_sign_type", origin_auth_sign_type)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="edgeHostname")
    def edge_hostname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "edge_hostname")

    @edge_hostname.setter
    def edge_hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "edge_hostname", value)

    @property
    @pulumi.getter(name="edgePathPrefix")
    def edge_path_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "edge_path_prefix")

    @edge_path_prefix.setter
    def edge_path_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "edge_path_prefix", value)

    @property
    @pulumi.getter(name="edgeTokenKey")
    def edge_token_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "edge_token_key")

    @edge_token_key.setter
    def edge_token_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "edge_token_key", value)

    @property
    @pulumi.getter(name="edgeTokenSalt")
    def edge_token_salt(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "edge_token_salt")

    @edge_token_salt.setter
    def edge_token_salt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "edge_token_salt", value)

    @property
    @pulumi.getter(name="isEdgeTokenAuth")
    def is_edge_token_auth(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_edge_token_auth")

    @is_edge_token_auth.setter
    def is_edge_token_auth(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_edge_token_auth", value)

    @property
    @pulumi.getter(name="originAuthSecretKeyA")
    def origin_auth_secret_key_a(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "origin_auth_secret_key_a")

    @origin_auth_secret_key_a.setter
    def origin_auth_secret_key_a(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "origin_auth_secret_key_a", value)

    @property
    @pulumi.getter(name="originAuthSecretKeyB")
    def origin_auth_secret_key_b(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "origin_auth_secret_key_b")

    @origin_auth_secret_key_b.setter
    def origin_auth_secret_key_b(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "origin_auth_secret_key_b", value)

    @property
    @pulumi.getter(name="originAuthSecretKeyNonceA")
    def origin_auth_secret_key_nonce_a(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "origin_auth_secret_key_nonce_a")

    @origin_auth_secret_key_nonce_a.setter
    def origin_auth_secret_key_nonce_a(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "origin_auth_secret_key_nonce_a", value)

    @property
    @pulumi.getter(name="originAuthSecretKeyNonceB")
    def origin_auth_secret_key_nonce_b(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "origin_auth_secret_key_nonce_b")

    @origin_auth_secret_key_nonce_b.setter
    def origin_auth_secret_key_nonce_b(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "origin_auth_secret_key_nonce_b", value)

    @property
    @pulumi.getter(name="originAuthSignEncryption")
    def origin_auth_sign_encryption(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "origin_auth_sign_encryption")

    @origin_auth_sign_encryption.setter
    def origin_auth_sign_encryption(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "origin_auth_sign_encryption", value)

    @property
    @pulumi.getter(name="originAuthSignType")
    def origin_auth_sign_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "origin_auth_sign_type")

    @origin_auth_sign_type.setter
    def origin_auth_sign_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "origin_auth_sign_type", value)


@pulumi.input_type
class StreamPackagingConfigEncryptionArgs:
    def __init__(__self__, *,
                 algorithm: pulumi.Input[str],
                 kms_key_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "algorithm", algorithm)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter
    def algorithm(self) -> pulumi.Input[str]:
        return pulumi.get(self, "algorithm")

    @algorithm.setter
    def algorithm(self, value: pulumi.Input[str]):
        pulumi.set(self, "algorithm", value)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_id", value)


@pulumi.input_type
class GetMediaAssetsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class GetMediaWorkflowConfigurationsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class GetMediaWorkflowJobFactsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class GetMediaWorkflowJobsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class GetMediaWorkflowsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class GetStreamCdnConfigsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class GetStreamDistributionChannelsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class GetStreamPackagingConfigsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


