# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'MediaAssetMediaAssetTag',
    'MediaAssetMetadata',
    'MediaWorkflowJobOutput',
    'MediaWorkflowJobTaskLifecycleState',
    'MediaWorkflowTask',
    'StreamCdnConfigConfig',
    'StreamPackagingConfigEncryption',
    'GetMediaAssetMediaAssetTagResult',
    'GetMediaAssetMetadataResult',
    'GetMediaAssetsFilterResult',
    'GetMediaAssetsMediaAssetCollectionResult',
    'GetMediaAssetsMediaAssetCollectionItemResult',
    'GetMediaAssetsMediaAssetCollectionItemMediaAssetTagResult',
    'GetMediaAssetsMediaAssetCollectionItemMetadataResult',
    'GetMediaWorkflowConfigurationsFilterResult',
    'GetMediaWorkflowConfigurationsMediaWorkflowConfigurationCollectionResult',
    'GetMediaWorkflowConfigurationsMediaWorkflowConfigurationCollectionItemResult',
    'GetMediaWorkflowJobFactsFilterResult',
    'GetMediaWorkflowJobFactsMediaWorkflowJobFactCollectionResult',
    'GetMediaWorkflowJobFactsMediaWorkflowJobFactCollectionItemResult',
    'GetMediaWorkflowJobOutputResult',
    'GetMediaWorkflowJobTaskLifecycleStateResult',
    'GetMediaWorkflowJobsFilterResult',
    'GetMediaWorkflowJobsMediaWorkflowJobCollectionResult',
    'GetMediaWorkflowJobsMediaWorkflowJobCollectionItemResult',
    'GetMediaWorkflowJobsMediaWorkflowJobCollectionItemOutputResult',
    'GetMediaWorkflowJobsMediaWorkflowJobCollectionItemTaskLifecycleStateResult',
    'GetMediaWorkflowTaskResult',
    'GetMediaWorkflowTaskDeclarationItemResult',
    'GetMediaWorkflowsFilterResult',
    'GetMediaWorkflowsMediaWorkflowCollectionResult',
    'GetMediaWorkflowsMediaWorkflowCollectionItemResult',
    'GetMediaWorkflowsMediaWorkflowCollectionItemTaskResult',
    'GetStreamCdnConfigConfigResult',
    'GetStreamCdnConfigsFilterResult',
    'GetStreamCdnConfigsStreamCdnConfigCollectionResult',
    'GetStreamCdnConfigsStreamCdnConfigCollectionItemResult',
    'GetStreamCdnConfigsStreamCdnConfigCollectionItemConfigResult',
    'GetStreamDistributionChannelsFilterResult',
    'GetStreamDistributionChannelsStreamDistributionChannelCollectionResult',
    'GetStreamDistributionChannelsStreamDistributionChannelCollectionItemResult',
    'GetStreamPackagingConfigEncryptionResult',
    'GetStreamPackagingConfigsFilterResult',
    'GetStreamPackagingConfigsStreamPackagingConfigCollectionResult',
    'GetStreamPackagingConfigsStreamPackagingConfigCollectionItemResult',
    'GetStreamPackagingConfigsStreamPackagingConfigCollectionItemEncryptionResult',
    'GetSystemMediaWorkflowItemResult',
    'GetSystemMediaWorkflowItemTaskResult',
]

@pulumi.output_type
class MediaAssetMediaAssetTag(dict):
    def __init__(__self__, *,
                 value: str,
                 type: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class MediaAssetMetadata(dict):
    def __init__(__self__, *,
                 metadata: str):
        pulumi.set(__self__, "metadata", metadata)

    @property
    @pulumi.getter
    def metadata(self) -> str:
        return pulumi.get(self, "metadata")


@pulumi.output_type
class MediaWorkflowJobOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "assetType":
            suggest = "asset_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MediaWorkflowJobOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MediaWorkflowJobOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MediaWorkflowJobOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 asset_type: Optional[str] = None,
                 bucket: Optional[str] = None,
                 id: Optional[str] = None,
                 namespace: Optional[str] = None,
                 object: Optional[str] = None):
        if asset_type is not None:
            pulumi.set(__self__, "asset_type", asset_type)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if object is not None:
            pulumi.set(__self__, "object", object)

    @property
    @pulumi.getter(name="assetType")
    def asset_type(self) -> Optional[str]:
        return pulumi.get(self, "asset_type")

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> Optional[str]:
        return pulumi.get(self, "object")


@pulumi.output_type
class MediaWorkflowJobTaskLifecycleState(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lifecycleDetails":
            suggest = "lifecycle_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MediaWorkflowJobTaskLifecycleState. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MediaWorkflowJobTaskLifecycleState.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MediaWorkflowJobTaskLifecycleState.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 state: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")


@pulumi.output_type
class MediaWorkflowTask(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableParameterReference":
            suggest = "enable_parameter_reference"
        elif key == "enableWhenReferencedParameterEquals":
            suggest = "enable_when_referenced_parameter_equals"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MediaWorkflowTask. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MediaWorkflowTask.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MediaWorkflowTask.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 parameters: str,
                 type: str,
                 version: str,
                 enable_parameter_reference: Optional[str] = None,
                 enable_when_referenced_parameter_equals: Optional[Mapping[str, Any]] = None,
                 prerequisites: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "parameters", parameters)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)
        if enable_parameter_reference is not None:
            pulumi.set(__self__, "enable_parameter_reference", enable_parameter_reference)
        if enable_when_referenced_parameter_equals is not None:
            pulumi.set(__self__, "enable_when_referenced_parameter_equals", enable_when_referenced_parameter_equals)
        if prerequisites is not None:
            pulumi.set(__self__, "prerequisites", prerequisites)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def parameters(self) -> str:
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="enableParameterReference")
    def enable_parameter_reference(self) -> Optional[str]:
        return pulumi.get(self, "enable_parameter_reference")

    @property
    @pulumi.getter(name="enableWhenReferencedParameterEquals")
    def enable_when_referenced_parameter_equals(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "enable_when_referenced_parameter_equals")

    @property
    @pulumi.getter
    def prerequisites(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "prerequisites")


@pulumi.output_type
class StreamCdnConfigConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "edgeHostname":
            suggest = "edge_hostname"
        elif key == "edgePathPrefix":
            suggest = "edge_path_prefix"
        elif key == "edgeTokenKey":
            suggest = "edge_token_key"
        elif key == "edgeTokenSalt":
            suggest = "edge_token_salt"
        elif key == "isEdgeTokenAuth":
            suggest = "is_edge_token_auth"
        elif key == "originAuthSecretKeyA":
            suggest = "origin_auth_secret_key_a"
        elif key == "originAuthSecretKeyB":
            suggest = "origin_auth_secret_key_b"
        elif key == "originAuthSecretKeyNonceA":
            suggest = "origin_auth_secret_key_nonce_a"
        elif key == "originAuthSecretKeyNonceB":
            suggest = "origin_auth_secret_key_nonce_b"
        elif key == "originAuthSignEncryption":
            suggest = "origin_auth_sign_encryption"
        elif key == "originAuthSignType":
            suggest = "origin_auth_sign_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StreamCdnConfigConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StreamCdnConfigConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StreamCdnConfigConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 edge_hostname: Optional[str] = None,
                 edge_path_prefix: Optional[str] = None,
                 edge_token_key: Optional[str] = None,
                 edge_token_salt: Optional[str] = None,
                 is_edge_token_auth: Optional[bool] = None,
                 origin_auth_secret_key_a: Optional[str] = None,
                 origin_auth_secret_key_b: Optional[str] = None,
                 origin_auth_secret_key_nonce_a: Optional[str] = None,
                 origin_auth_secret_key_nonce_b: Optional[str] = None,
                 origin_auth_sign_encryption: Optional[str] = None,
                 origin_auth_sign_type: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if edge_hostname is not None:
            pulumi.set(__self__, "edge_hostname", edge_hostname)
        if edge_path_prefix is not None:
            pulumi.set(__self__, "edge_path_prefix", edge_path_prefix)
        if edge_token_key is not None:
            pulumi.set(__self__, "edge_token_key", edge_token_key)
        if edge_token_salt is not None:
            pulumi.set(__self__, "edge_token_salt", edge_token_salt)
        if is_edge_token_auth is not None:
            pulumi.set(__self__, "is_edge_token_auth", is_edge_token_auth)
        if origin_auth_secret_key_a is not None:
            pulumi.set(__self__, "origin_auth_secret_key_a", origin_auth_secret_key_a)
        if origin_auth_secret_key_b is not None:
            pulumi.set(__self__, "origin_auth_secret_key_b", origin_auth_secret_key_b)
        if origin_auth_secret_key_nonce_a is not None:
            pulumi.set(__self__, "origin_auth_secret_key_nonce_a", origin_auth_secret_key_nonce_a)
        if origin_auth_secret_key_nonce_b is not None:
            pulumi.set(__self__, "origin_auth_secret_key_nonce_b", origin_auth_secret_key_nonce_b)
        if origin_auth_sign_encryption is not None:
            pulumi.set(__self__, "origin_auth_sign_encryption", origin_auth_sign_encryption)
        if origin_auth_sign_type is not None:
            pulumi.set(__self__, "origin_auth_sign_type", origin_auth_sign_type)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="edgeHostname")
    def edge_hostname(self) -> Optional[str]:
        return pulumi.get(self, "edge_hostname")

    @property
    @pulumi.getter(name="edgePathPrefix")
    def edge_path_prefix(self) -> Optional[str]:
        return pulumi.get(self, "edge_path_prefix")

    @property
    @pulumi.getter(name="edgeTokenKey")
    def edge_token_key(self) -> Optional[str]:
        return pulumi.get(self, "edge_token_key")

    @property
    @pulumi.getter(name="edgeTokenSalt")
    def edge_token_salt(self) -> Optional[str]:
        return pulumi.get(self, "edge_token_salt")

    @property
    @pulumi.getter(name="isEdgeTokenAuth")
    def is_edge_token_auth(self) -> Optional[bool]:
        return pulumi.get(self, "is_edge_token_auth")

    @property
    @pulumi.getter(name="originAuthSecretKeyA")
    def origin_auth_secret_key_a(self) -> Optional[str]:
        return pulumi.get(self, "origin_auth_secret_key_a")

    @property
    @pulumi.getter(name="originAuthSecretKeyB")
    def origin_auth_secret_key_b(self) -> Optional[str]:
        return pulumi.get(self, "origin_auth_secret_key_b")

    @property
    @pulumi.getter(name="originAuthSecretKeyNonceA")
    def origin_auth_secret_key_nonce_a(self) -> Optional[str]:
        return pulumi.get(self, "origin_auth_secret_key_nonce_a")

    @property
    @pulumi.getter(name="originAuthSecretKeyNonceB")
    def origin_auth_secret_key_nonce_b(self) -> Optional[str]:
        return pulumi.get(self, "origin_auth_secret_key_nonce_b")

    @property
    @pulumi.getter(name="originAuthSignEncryption")
    def origin_auth_sign_encryption(self) -> Optional[str]:
        return pulumi.get(self, "origin_auth_sign_encryption")

    @property
    @pulumi.getter(name="originAuthSignType")
    def origin_auth_sign_type(self) -> Optional[str]:
        return pulumi.get(self, "origin_auth_sign_type")


@pulumi.output_type
class StreamPackagingConfigEncryption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "kmsKeyId":
            suggest = "kms_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StreamPackagingConfigEncryption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StreamPackagingConfigEncryption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StreamPackagingConfigEncryption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 algorithm: str,
                 kms_key_id: Optional[str] = None):
        pulumi.set(__self__, "algorithm", algorithm)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter
    def algorithm(self) -> str:
        return pulumi.get(self, "algorithm")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        return pulumi.get(self, "kms_key_id")


@pulumi.output_type
class GetMediaAssetMediaAssetTagResult(dict):
    def __init__(__self__, *,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetMediaAssetMetadataResult(dict):
    def __init__(__self__, *,
                 metadata: Optional[str] = None):
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[str]:
        return pulumi.get(self, "metadata")


@pulumi.output_type
class GetMediaAssetsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetMediaAssetsMediaAssetCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetMediaAssetsMediaAssetCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetMediaAssetsMediaAssetCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetMediaAssetsMediaAssetCollectionItemResult(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 master_media_asset_id: Optional[str] = None,
                 media_asset_tags: Optional[Sequence['outputs.GetMediaAssetsMediaAssetCollectionItemMediaAssetTagResult']] = None,
                 media_workflow_job_id: Optional[str] = None,
                 metadatas: Optional[Sequence['outputs.GetMediaAssetsMediaAssetCollectionItemMetadataResult']] = None,
                 namespace: Optional[str] = None,
                 object: Optional[str] = None,
                 object_etag: Optional[str] = None,
                 parent_media_asset_id: Optional[str] = None,
                 segment_range_end_index: Optional[str] = None,
                 segment_range_start_index: Optional[str] = None,
                 source_media_workflow_id: Optional[str] = None,
                 source_media_workflow_version: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 type: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if master_media_asset_id is not None:
            pulumi.set(__self__, "master_media_asset_id", master_media_asset_id)
        if media_asset_tags is not None:
            pulumi.set(__self__, "media_asset_tags", media_asset_tags)
        if media_workflow_job_id is not None:
            pulumi.set(__self__, "media_workflow_job_id", media_workflow_job_id)
        if metadatas is not None:
            pulumi.set(__self__, "metadatas", metadatas)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if object is not None:
            pulumi.set(__self__, "object", object)
        if object_etag is not None:
            pulumi.set(__self__, "object_etag", object_etag)
        if parent_media_asset_id is not None:
            pulumi.set(__self__, "parent_media_asset_id", parent_media_asset_id)
        if segment_range_end_index is not None:
            pulumi.set(__self__, "segment_range_end_index", segment_range_end_index)
        if segment_range_start_index is not None:
            pulumi.set(__self__, "segment_range_start_index", segment_range_start_index)
        if source_media_workflow_id is not None:
            pulumi.set(__self__, "source_media_workflow_id", source_media_workflow_id)
        if source_media_workflow_version is not None:
            pulumi.set(__self__, "source_media_workflow_version", source_media_workflow_version)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="masterMediaAssetId")
    def master_media_asset_id(self) -> Optional[str]:
        return pulumi.get(self, "master_media_asset_id")

    @property
    @pulumi.getter(name="mediaAssetTags")
    def media_asset_tags(self) -> Optional[Sequence['outputs.GetMediaAssetsMediaAssetCollectionItemMediaAssetTagResult']]:
        return pulumi.get(self, "media_asset_tags")

    @property
    @pulumi.getter(name="mediaWorkflowJobId")
    def media_workflow_job_id(self) -> Optional[str]:
        return pulumi.get(self, "media_workflow_job_id")

    @property
    @pulumi.getter
    def metadatas(self) -> Optional[Sequence['outputs.GetMediaAssetsMediaAssetCollectionItemMetadataResult']]:
        return pulumi.get(self, "metadatas")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> Optional[str]:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter(name="objectEtag")
    def object_etag(self) -> Optional[str]:
        return pulumi.get(self, "object_etag")

    @property
    @pulumi.getter(name="parentMediaAssetId")
    def parent_media_asset_id(self) -> Optional[str]:
        return pulumi.get(self, "parent_media_asset_id")

    @property
    @pulumi.getter(name="segmentRangeEndIndex")
    def segment_range_end_index(self) -> Optional[str]:
        return pulumi.get(self, "segment_range_end_index")

    @property
    @pulumi.getter(name="segmentRangeStartIndex")
    def segment_range_start_index(self) -> Optional[str]:
        return pulumi.get(self, "segment_range_start_index")

    @property
    @pulumi.getter(name="sourceMediaWorkflowId")
    def source_media_workflow_id(self) -> Optional[str]:
        return pulumi.get(self, "source_media_workflow_id")

    @property
    @pulumi.getter(name="sourceMediaWorkflowVersion")
    def source_media_workflow_version(self) -> Optional[str]:
        return pulumi.get(self, "source_media_workflow_version")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetMediaAssetsMediaAssetCollectionItemMediaAssetTagResult(dict):
    def __init__(__self__, *,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetMediaAssetsMediaAssetCollectionItemMetadataResult(dict):
    def __init__(__self__, *,
                 metadata: Optional[str] = None):
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[str]:
        return pulumi.get(self, "metadata")


@pulumi.output_type
class GetMediaWorkflowConfigurationsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetMediaWorkflowConfigurationsMediaWorkflowConfigurationCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetMediaWorkflowConfigurationsMediaWorkflowConfigurationCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetMediaWorkflowConfigurationsMediaWorkflowConfigurationCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetMediaWorkflowConfigurationsMediaWorkflowConfigurationCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecyle_details: Optional[str] = None,
                 parameters: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecyle_details is not None:
            pulumi.set(__self__, "lifecyle_details", lifecyle_details)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecyleDetails")
    def lifecyle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecyle_details")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[str]:
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetMediaWorkflowJobFactsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetMediaWorkflowJobFactsMediaWorkflowJobFactCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetMediaWorkflowJobFactsMediaWorkflowJobFactCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetMediaWorkflowJobFactsMediaWorkflowJobFactCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetMediaWorkflowJobFactsMediaWorkflowJobFactCollectionItemResult(dict):
    def __init__(__self__, *,
                 detail: Optional[str] = None,
                 key: Optional[str] = None,
                 media_workflow_job_id: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        if detail is not None:
            pulumi.set(__self__, "detail", detail)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if media_workflow_job_id is not None:
            pulumi.set(__self__, "media_workflow_job_id", media_workflow_job_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def detail(self) -> Optional[str]:
        return pulumi.get(self, "detail")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="mediaWorkflowJobId")
    def media_workflow_job_id(self) -> Optional[str]:
        return pulumi.get(self, "media_workflow_job_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetMediaWorkflowJobOutputResult(dict):
    def __init__(__self__, *,
                 asset_type: Optional[str] = None,
                 bucket: Optional[str] = None,
                 id: Optional[str] = None,
                 namespace: Optional[str] = None,
                 object: Optional[str] = None):
        if asset_type is not None:
            pulumi.set(__self__, "asset_type", asset_type)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if object is not None:
            pulumi.set(__self__, "object", object)

    @property
    @pulumi.getter(name="assetType")
    def asset_type(self) -> Optional[str]:
        return pulumi.get(self, "asset_type")

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> Optional[str]:
        return pulumi.get(self, "object")


@pulumi.output_type
class GetMediaWorkflowJobTaskLifecycleStateResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 state: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")


@pulumi.output_type
class GetMediaWorkflowJobsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetMediaWorkflowJobsMediaWorkflowJobCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetMediaWorkflowJobsMediaWorkflowJobCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetMediaWorkflowJobsMediaWorkflowJobCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetMediaWorkflowJobsMediaWorkflowJobCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 media_workflow_configuration_ids: Optional[Sequence[str]] = None,
                 media_workflow_id: Optional[str] = None,
                 media_workflow_name: Optional[str] = None,
                 outputs: Optional[Sequence['outputs.GetMediaWorkflowJobsMediaWorkflowJobCollectionItemOutputResult']] = None,
                 parameters: Optional[str] = None,
                 runnable: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 task_lifecycle_states: Optional[Sequence['outputs.GetMediaWorkflowJobsMediaWorkflowJobCollectionItemTaskLifecycleStateResult']] = None,
                 time_created: Optional[str] = None,
                 time_ended: Optional[str] = None,
                 time_started: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 workflow_identifier_type: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if media_workflow_configuration_ids is not None:
            pulumi.set(__self__, "media_workflow_configuration_ids", media_workflow_configuration_ids)
        if media_workflow_id is not None:
            pulumi.set(__self__, "media_workflow_id", media_workflow_id)
        if media_workflow_name is not None:
            pulumi.set(__self__, "media_workflow_name", media_workflow_name)
        if outputs is not None:
            pulumi.set(__self__, "outputs", outputs)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if runnable is not None:
            pulumi.set(__self__, "runnable", runnable)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if task_lifecycle_states is not None:
            pulumi.set(__self__, "task_lifecycle_states", task_lifecycle_states)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_ended is not None:
            pulumi.set(__self__, "time_ended", time_ended)
        if time_started is not None:
            pulumi.set(__self__, "time_started", time_started)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if workflow_identifier_type is not None:
            pulumi.set(__self__, "workflow_identifier_type", workflow_identifier_type)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="mediaWorkflowConfigurationIds")
    def media_workflow_configuration_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "media_workflow_configuration_ids")

    @property
    @pulumi.getter(name="mediaWorkflowId")
    def media_workflow_id(self) -> Optional[str]:
        return pulumi.get(self, "media_workflow_id")

    @property
    @pulumi.getter(name="mediaWorkflowName")
    def media_workflow_name(self) -> Optional[str]:
        return pulumi.get(self, "media_workflow_name")

    @property
    @pulumi.getter
    def outputs(self) -> Optional[Sequence['outputs.GetMediaWorkflowJobsMediaWorkflowJobCollectionItemOutputResult']]:
        return pulumi.get(self, "outputs")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[str]:
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter
    def runnable(self) -> Optional[str]:
        return pulumi.get(self, "runnable")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="taskLifecycleStates")
    def task_lifecycle_states(self) -> Optional[Sequence['outputs.GetMediaWorkflowJobsMediaWorkflowJobCollectionItemTaskLifecycleStateResult']]:
        return pulumi.get(self, "task_lifecycle_states")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeEnded")
    def time_ended(self) -> Optional[str]:
        return pulumi.get(self, "time_ended")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> Optional[str]:
        return pulumi.get(self, "time_started")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="workflowIdentifierType")
    def workflow_identifier_type(self) -> Optional[str]:
        return pulumi.get(self, "workflow_identifier_type")


@pulumi.output_type
class GetMediaWorkflowJobsMediaWorkflowJobCollectionItemOutputResult(dict):
    def __init__(__self__, *,
                 asset_type: Optional[str] = None,
                 bucket: Optional[str] = None,
                 id: Optional[str] = None,
                 namespace: Optional[str] = None,
                 object: Optional[str] = None):
        if asset_type is not None:
            pulumi.set(__self__, "asset_type", asset_type)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if object is not None:
            pulumi.set(__self__, "object", object)

    @property
    @pulumi.getter(name="assetType")
    def asset_type(self) -> Optional[str]:
        return pulumi.get(self, "asset_type")

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> Optional[str]:
        return pulumi.get(self, "object")


@pulumi.output_type
class GetMediaWorkflowJobsMediaWorkflowJobCollectionItemTaskLifecycleStateResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 state: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")


@pulumi.output_type
class GetMediaWorkflowTaskResult(dict):
    def __init__(__self__, *,
                 enable_parameter_reference: Optional[str] = None,
                 enable_when_referenced_parameter_equals: Optional[Mapping[str, Any]] = None,
                 key: Optional[str] = None,
                 parameters: Optional[str] = None,
                 prerequisites: Optional[Sequence[str]] = None,
                 type: Optional[str] = None,
                 version: Optional[str] = None):
        if enable_parameter_reference is not None:
            pulumi.set(__self__, "enable_parameter_reference", enable_parameter_reference)
        if enable_when_referenced_parameter_equals is not None:
            pulumi.set(__self__, "enable_when_referenced_parameter_equals", enable_when_referenced_parameter_equals)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if prerequisites is not None:
            pulumi.set(__self__, "prerequisites", prerequisites)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="enableParameterReference")
    def enable_parameter_reference(self) -> Optional[str]:
        return pulumi.get(self, "enable_parameter_reference")

    @property
    @pulumi.getter(name="enableWhenReferencedParameterEquals")
    def enable_when_referenced_parameter_equals(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "enable_when_referenced_parameter_equals")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[str]:
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter
    def prerequisites(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "prerequisites")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetMediaWorkflowTaskDeclarationItemResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 parameters_schema: Optional[str] = None,
                 parameters_schema_allowing_references: Optional[str] = None,
                 version: Optional[int] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parameters_schema is not None:
            pulumi.set(__self__, "parameters_schema", parameters_schema)
        if parameters_schema_allowing_references is not None:
            pulumi.set(__self__, "parameters_schema_allowing_references", parameters_schema_allowing_references)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="parametersSchema")
    def parameters_schema(self) -> Optional[str]:
        return pulumi.get(self, "parameters_schema")

    @property
    @pulumi.getter(name="parametersSchemaAllowingReferences")
    def parameters_schema_allowing_references(self) -> Optional[str]:
        return pulumi.get(self, "parameters_schema_allowing_references")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetMediaWorkflowsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetMediaWorkflowsMediaWorkflowCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetMediaWorkflowsMediaWorkflowCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetMediaWorkflowsMediaWorkflowCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetMediaWorkflowsMediaWorkflowCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecyle_details: Optional[str] = None,
                 media_workflow_configuration_ids: Optional[Sequence[str]] = None,
                 parameters: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 tasks: Optional[Sequence['outputs.GetMediaWorkflowsMediaWorkflowCollectionItemTaskResult']] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 version: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecyle_details is not None:
            pulumi.set(__self__, "lifecyle_details", lifecyle_details)
        if media_workflow_configuration_ids is not None:
            pulumi.set(__self__, "media_workflow_configuration_ids", media_workflow_configuration_ids)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if tasks is not None:
            pulumi.set(__self__, "tasks", tasks)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecyleDetails")
    def lifecyle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecyle_details")

    @property
    @pulumi.getter(name="mediaWorkflowConfigurationIds")
    def media_workflow_configuration_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "media_workflow_configuration_ids")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[str]:
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter
    def tasks(self) -> Optional[Sequence['outputs.GetMediaWorkflowsMediaWorkflowCollectionItemTaskResult']]:
        return pulumi.get(self, "tasks")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetMediaWorkflowsMediaWorkflowCollectionItemTaskResult(dict):
    def __init__(__self__, *,
                 enable_parameter_reference: Optional[str] = None,
                 enable_when_referenced_parameter_equals: Optional[Mapping[str, Any]] = None,
                 key: Optional[str] = None,
                 parameters: Optional[str] = None,
                 prerequisites: Optional[Sequence[str]] = None,
                 type: Optional[str] = None,
                 version: Optional[str] = None):
        if enable_parameter_reference is not None:
            pulumi.set(__self__, "enable_parameter_reference", enable_parameter_reference)
        if enable_when_referenced_parameter_equals is not None:
            pulumi.set(__self__, "enable_when_referenced_parameter_equals", enable_when_referenced_parameter_equals)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if prerequisites is not None:
            pulumi.set(__self__, "prerequisites", prerequisites)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="enableParameterReference")
    def enable_parameter_reference(self) -> Optional[str]:
        return pulumi.get(self, "enable_parameter_reference")

    @property
    @pulumi.getter(name="enableWhenReferencedParameterEquals")
    def enable_when_referenced_parameter_equals(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "enable_when_referenced_parameter_equals")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[str]:
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter
    def prerequisites(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "prerequisites")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetStreamCdnConfigConfigResult(dict):
    def __init__(__self__, *,
                 edge_hostname: Optional[str] = None,
                 edge_path_prefix: Optional[str] = None,
                 edge_token_key: Optional[str] = None,
                 edge_token_salt: Optional[str] = None,
                 is_edge_token_auth: Optional[bool] = None,
                 origin_auth_secret_key_a: Optional[str] = None,
                 origin_auth_secret_key_b: Optional[str] = None,
                 origin_auth_secret_key_nonce_a: Optional[str] = None,
                 origin_auth_secret_key_nonce_b: Optional[str] = None,
                 origin_auth_sign_encryption: Optional[str] = None,
                 origin_auth_sign_type: Optional[str] = None,
                 type: Optional[str] = None):
        if edge_hostname is not None:
            pulumi.set(__self__, "edge_hostname", edge_hostname)
        if edge_path_prefix is not None:
            pulumi.set(__self__, "edge_path_prefix", edge_path_prefix)
        if edge_token_key is not None:
            pulumi.set(__self__, "edge_token_key", edge_token_key)
        if edge_token_salt is not None:
            pulumi.set(__self__, "edge_token_salt", edge_token_salt)
        if is_edge_token_auth is not None:
            pulumi.set(__self__, "is_edge_token_auth", is_edge_token_auth)
        if origin_auth_secret_key_a is not None:
            pulumi.set(__self__, "origin_auth_secret_key_a", origin_auth_secret_key_a)
        if origin_auth_secret_key_b is not None:
            pulumi.set(__self__, "origin_auth_secret_key_b", origin_auth_secret_key_b)
        if origin_auth_secret_key_nonce_a is not None:
            pulumi.set(__self__, "origin_auth_secret_key_nonce_a", origin_auth_secret_key_nonce_a)
        if origin_auth_secret_key_nonce_b is not None:
            pulumi.set(__self__, "origin_auth_secret_key_nonce_b", origin_auth_secret_key_nonce_b)
        if origin_auth_sign_encryption is not None:
            pulumi.set(__self__, "origin_auth_sign_encryption", origin_auth_sign_encryption)
        if origin_auth_sign_type is not None:
            pulumi.set(__self__, "origin_auth_sign_type", origin_auth_sign_type)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="edgeHostname")
    def edge_hostname(self) -> Optional[str]:
        return pulumi.get(self, "edge_hostname")

    @property
    @pulumi.getter(name="edgePathPrefix")
    def edge_path_prefix(self) -> Optional[str]:
        return pulumi.get(self, "edge_path_prefix")

    @property
    @pulumi.getter(name="edgeTokenKey")
    def edge_token_key(self) -> Optional[str]:
        return pulumi.get(self, "edge_token_key")

    @property
    @pulumi.getter(name="edgeTokenSalt")
    def edge_token_salt(self) -> Optional[str]:
        return pulumi.get(self, "edge_token_salt")

    @property
    @pulumi.getter(name="isEdgeTokenAuth")
    def is_edge_token_auth(self) -> Optional[bool]:
        return pulumi.get(self, "is_edge_token_auth")

    @property
    @pulumi.getter(name="originAuthSecretKeyA")
    def origin_auth_secret_key_a(self) -> Optional[str]:
        return pulumi.get(self, "origin_auth_secret_key_a")

    @property
    @pulumi.getter(name="originAuthSecretKeyB")
    def origin_auth_secret_key_b(self) -> Optional[str]:
        return pulumi.get(self, "origin_auth_secret_key_b")

    @property
    @pulumi.getter(name="originAuthSecretKeyNonceA")
    def origin_auth_secret_key_nonce_a(self) -> Optional[str]:
        return pulumi.get(self, "origin_auth_secret_key_nonce_a")

    @property
    @pulumi.getter(name="originAuthSecretKeyNonceB")
    def origin_auth_secret_key_nonce_b(self) -> Optional[str]:
        return pulumi.get(self, "origin_auth_secret_key_nonce_b")

    @property
    @pulumi.getter(name="originAuthSignEncryption")
    def origin_auth_sign_encryption(self) -> Optional[str]:
        return pulumi.get(self, "origin_auth_sign_encryption")

    @property
    @pulumi.getter(name="originAuthSignType")
    def origin_auth_sign_type(self) -> Optional[str]:
        return pulumi.get(self, "origin_auth_sign_type")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetStreamCdnConfigsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetStreamCdnConfigsStreamCdnConfigCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetStreamCdnConfigsStreamCdnConfigCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetStreamCdnConfigsStreamCdnConfigCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetStreamCdnConfigsStreamCdnConfigCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 configs: Optional[Sequence['outputs.GetStreamCdnConfigsStreamCdnConfigCollectionItemConfigResult']] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 distribution_channel_id: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 is_enabled: Optional[bool] = None,
                 lifecyle_details: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if configs is not None:
            pulumi.set(__self__, "configs", configs)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if distribution_channel_id is not None:
            pulumi.set(__self__, "distribution_channel_id", distribution_channel_id)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if lifecyle_details is not None:
            pulumi.set(__self__, "lifecyle_details", lifecyle_details)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def configs(self) -> Optional[Sequence['outputs.GetStreamCdnConfigsStreamCdnConfigCollectionItemConfigResult']]:
        return pulumi.get(self, "configs")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="distributionChannelId")
    def distribution_channel_id(self) -> Optional[str]:
        return pulumi.get(self, "distribution_channel_id")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="lifecyleDetails")
    def lifecyle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecyle_details")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetStreamCdnConfigsStreamCdnConfigCollectionItemConfigResult(dict):
    def __init__(__self__, *,
                 edge_hostname: Optional[str] = None,
                 edge_path_prefix: Optional[str] = None,
                 edge_token_key: Optional[str] = None,
                 edge_token_salt: Optional[str] = None,
                 is_edge_token_auth: Optional[bool] = None,
                 origin_auth_secret_key_a: Optional[str] = None,
                 origin_auth_secret_key_b: Optional[str] = None,
                 origin_auth_secret_key_nonce_a: Optional[str] = None,
                 origin_auth_secret_key_nonce_b: Optional[str] = None,
                 origin_auth_sign_encryption: Optional[str] = None,
                 origin_auth_sign_type: Optional[str] = None,
                 type: Optional[str] = None):
        if edge_hostname is not None:
            pulumi.set(__self__, "edge_hostname", edge_hostname)
        if edge_path_prefix is not None:
            pulumi.set(__self__, "edge_path_prefix", edge_path_prefix)
        if edge_token_key is not None:
            pulumi.set(__self__, "edge_token_key", edge_token_key)
        if edge_token_salt is not None:
            pulumi.set(__self__, "edge_token_salt", edge_token_salt)
        if is_edge_token_auth is not None:
            pulumi.set(__self__, "is_edge_token_auth", is_edge_token_auth)
        if origin_auth_secret_key_a is not None:
            pulumi.set(__self__, "origin_auth_secret_key_a", origin_auth_secret_key_a)
        if origin_auth_secret_key_b is not None:
            pulumi.set(__self__, "origin_auth_secret_key_b", origin_auth_secret_key_b)
        if origin_auth_secret_key_nonce_a is not None:
            pulumi.set(__self__, "origin_auth_secret_key_nonce_a", origin_auth_secret_key_nonce_a)
        if origin_auth_secret_key_nonce_b is not None:
            pulumi.set(__self__, "origin_auth_secret_key_nonce_b", origin_auth_secret_key_nonce_b)
        if origin_auth_sign_encryption is not None:
            pulumi.set(__self__, "origin_auth_sign_encryption", origin_auth_sign_encryption)
        if origin_auth_sign_type is not None:
            pulumi.set(__self__, "origin_auth_sign_type", origin_auth_sign_type)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="edgeHostname")
    def edge_hostname(self) -> Optional[str]:
        return pulumi.get(self, "edge_hostname")

    @property
    @pulumi.getter(name="edgePathPrefix")
    def edge_path_prefix(self) -> Optional[str]:
        return pulumi.get(self, "edge_path_prefix")

    @property
    @pulumi.getter(name="edgeTokenKey")
    def edge_token_key(self) -> Optional[str]:
        return pulumi.get(self, "edge_token_key")

    @property
    @pulumi.getter(name="edgeTokenSalt")
    def edge_token_salt(self) -> Optional[str]:
        return pulumi.get(self, "edge_token_salt")

    @property
    @pulumi.getter(name="isEdgeTokenAuth")
    def is_edge_token_auth(self) -> Optional[bool]:
        return pulumi.get(self, "is_edge_token_auth")

    @property
    @pulumi.getter(name="originAuthSecretKeyA")
    def origin_auth_secret_key_a(self) -> Optional[str]:
        return pulumi.get(self, "origin_auth_secret_key_a")

    @property
    @pulumi.getter(name="originAuthSecretKeyB")
    def origin_auth_secret_key_b(self) -> Optional[str]:
        return pulumi.get(self, "origin_auth_secret_key_b")

    @property
    @pulumi.getter(name="originAuthSecretKeyNonceA")
    def origin_auth_secret_key_nonce_a(self) -> Optional[str]:
        return pulumi.get(self, "origin_auth_secret_key_nonce_a")

    @property
    @pulumi.getter(name="originAuthSecretKeyNonceB")
    def origin_auth_secret_key_nonce_b(self) -> Optional[str]:
        return pulumi.get(self, "origin_auth_secret_key_nonce_b")

    @property
    @pulumi.getter(name="originAuthSignEncryption")
    def origin_auth_sign_encryption(self) -> Optional[str]:
        return pulumi.get(self, "origin_auth_sign_encryption")

    @property
    @pulumi.getter(name="originAuthSignType")
    def origin_auth_sign_type(self) -> Optional[str]:
        return pulumi.get(self, "origin_auth_sign_type")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetStreamDistributionChannelsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetStreamDistributionChannelsStreamDistributionChannelCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetStreamDistributionChannelsStreamDistributionChannelCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetStreamDistributionChannelsStreamDistributionChannelCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetStreamDistributionChannelsStreamDistributionChannelCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 domain_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[str]:
        return pulumi.get(self, "domain_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetStreamPackagingConfigEncryptionResult(dict):
    def __init__(__self__, *,
                 algorithm: Optional[str] = None,
                 kms_key_id: Optional[str] = None):
        if algorithm is not None:
            pulumi.set(__self__, "algorithm", algorithm)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter
    def algorithm(self) -> Optional[str]:
        return pulumi.get(self, "algorithm")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        return pulumi.get(self, "kms_key_id")


@pulumi.output_type
class GetStreamPackagingConfigsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetStreamPackagingConfigsStreamPackagingConfigCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetStreamPackagingConfigsStreamPackagingConfigCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetStreamPackagingConfigsStreamPackagingConfigCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetStreamPackagingConfigsStreamPackagingConfigCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 distribution_channel_id: Optional[str] = None,
                 encryptions: Optional[Sequence['outputs.GetStreamPackagingConfigsStreamPackagingConfigCollectionItemEncryptionResult']] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 segment_time_in_seconds: Optional[int] = None,
                 state: Optional[str] = None,
                 stream_packaging_format: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if distribution_channel_id is not None:
            pulumi.set(__self__, "distribution_channel_id", distribution_channel_id)
        if encryptions is not None:
            pulumi.set(__self__, "encryptions", encryptions)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if segment_time_in_seconds is not None:
            pulumi.set(__self__, "segment_time_in_seconds", segment_time_in_seconds)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if stream_packaging_format is not None:
            pulumi.set(__self__, "stream_packaging_format", stream_packaging_format)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="distributionChannelId")
    def distribution_channel_id(self) -> Optional[str]:
        return pulumi.get(self, "distribution_channel_id")

    @property
    @pulumi.getter
    def encryptions(self) -> Optional[Sequence['outputs.GetStreamPackagingConfigsStreamPackagingConfigCollectionItemEncryptionResult']]:
        return pulumi.get(self, "encryptions")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="segmentTimeInSeconds")
    def segment_time_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "segment_time_in_seconds")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="streamPackagingFormat")
    def stream_packaging_format(self) -> Optional[str]:
        return pulumi.get(self, "stream_packaging_format")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetStreamPackagingConfigsStreamPackagingConfigCollectionItemEncryptionResult(dict):
    def __init__(__self__, *,
                 algorithm: Optional[str] = None,
                 kms_key_id: Optional[str] = None):
        if algorithm is not None:
            pulumi.set(__self__, "algorithm", algorithm)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter
    def algorithm(self) -> Optional[str]:
        return pulumi.get(self, "algorithm")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        return pulumi.get(self, "kms_key_id")


@pulumi.output_type
class GetSystemMediaWorkflowItemResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 name: Optional[str] = None,
                 parameters: Optional[str] = None,
                 tasks: Optional[Sequence['outputs.GetSystemMediaWorkflowItemTaskResult']] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if tasks is not None:
            pulumi.set(__self__, "tasks", tasks)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[str]:
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter
    def tasks(self) -> Optional[Sequence['outputs.GetSystemMediaWorkflowItemTaskResult']]:
        return pulumi.get(self, "tasks")


@pulumi.output_type
class GetSystemMediaWorkflowItemTaskResult(dict):
    def __init__(__self__, *,
                 parameters: str,
                 enable_parameter_reference: Optional[str] = None,
                 enable_when_referenced_parameter_equals: Optional[Mapping[str, Any]] = None,
                 key: Optional[str] = None,
                 prerequisites: Optional[Sequence[str]] = None,
                 type: Optional[str] = None,
                 version: Optional[str] = None):
        pulumi.set(__self__, "parameters", parameters)
        if enable_parameter_reference is not None:
            pulumi.set(__self__, "enable_parameter_reference", enable_parameter_reference)
        if enable_when_referenced_parameter_equals is not None:
            pulumi.set(__self__, "enable_when_referenced_parameter_equals", enable_when_referenced_parameter_equals)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if prerequisites is not None:
            pulumi.set(__self__, "prerequisites", prerequisites)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def parameters(self) -> str:
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="enableParameterReference")
    def enable_parameter_reference(self) -> Optional[str]:
        return pulumi.get(self, "enable_parameter_reference")

    @property
    @pulumi.getter(name="enableWhenReferencedParameterEquals")
    def enable_when_referenced_parameter_equals(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "enable_when_referenced_parameter_equals")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def prerequisites(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "prerequisites")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


