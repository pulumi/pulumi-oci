# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetCleanEnergyUsageResult',
    'AwaitableGetCleanEnergyUsageResult',
    'get_clean_energy_usage',
    'get_clean_energy_usage_output',
]

@pulumi.output_type
class GetCleanEnergyUsageResult:
    """
    A collection of values returned by getCleanEnergyUsage.
    """
    def __init__(__self__, ad=None, id=None, region=None, usage=None):
        if ad and not isinstance(ad, str):
            raise TypeError("Expected argument 'ad' to be a str")
        pulumi.set(__self__, "ad", ad)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if usage and not isinstance(usage, float):
            raise TypeError("Expected argument 'usage' to be a float")
        pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def ad(self) -> str:
        """
        The availability domain.
        """
        return pulumi.get(self, "ad")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        The region.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def usage(self) -> float:
        """
        The percentage of clean enery used.
        """
        return pulumi.get(self, "usage")


class AwaitableGetCleanEnergyUsageResult(GetCleanEnergyUsageResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCleanEnergyUsageResult(
            ad=self.ad,
            id=self.id,
            region=self.region,
            usage=self.usage)


def get_clean_energy_usage(region: Optional[str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCleanEnergyUsageResult:
    """
    This data source provides details about a specific Clean Energy Usage resource in Oracle Cloud Infrastructure Metering Computation service.

    Returns the clean energy usage summary by region.


    :param str region: The region.
    """
    __args__ = dict()
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:MeteringComputation/getCleanEnergyUsage:getCleanEnergyUsage', __args__, opts=opts, typ=GetCleanEnergyUsageResult).value

    return AwaitableGetCleanEnergyUsageResult(
        ad=pulumi.get(__ret__, 'ad'),
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'),
        usage=pulumi.get(__ret__, 'usage'))


@_utilities.lift_output_func(get_clean_energy_usage)
def get_clean_energy_usage_output(region: Optional[pulumi.Input[str]] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetCleanEnergyUsageResult]:
    """
    This data source provides details about a specific Clean Energy Usage resource in Oracle Cloud Infrastructure Metering Computation service.

    Returns the clean energy usage summary by region.


    :param str region: The region.
    """
    ...
