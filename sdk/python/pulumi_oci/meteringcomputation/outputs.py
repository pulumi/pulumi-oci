# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'CustomTableSavedCustomTable',
    'CustomTableSavedCustomTableGroupByTag',
    'QueryQueryDefinition',
    'QueryQueryDefinitionCostAnalysisUi',
    'QueryQueryDefinitionReportQuery',
    'QueryQueryDefinitionReportQueryForecast',
    'QueryQueryDefinitionReportQueryGroupByTag',
    'ScheduleQueryProperties',
    'ScheduleQueryPropertiesDateRange',
    'ScheduleQueryPropertiesGroupByTag',
    'ScheduleResultLocation',
    'UsageForecast',
    'UsageGroupByTag',
    'UsageItem',
    'UsageItemTag',
    'GetConfigurationItemResult',
    'GetCustomTableSavedCustomTableResult',
    'GetCustomTableSavedCustomTableGroupByTagResult',
    'GetCustomTablesCustomTableCollectionResult',
    'GetCustomTablesCustomTableCollectionItemResult',
    'GetCustomTablesCustomTableCollectionItemSavedCustomTableResult',
    'GetCustomTablesCustomTableCollectionItemSavedCustomTableGroupByTagResult',
    'GetCustomTablesFilterResult',
    'GetQueriesFilterResult',
    'GetQueriesQueryCollectionResult',
    'GetQueriesQueryCollectionItemResult',
    'GetQueriesQueryCollectionItemQueryDefinitionResult',
    'GetQueriesQueryCollectionItemQueryDefinitionCostAnalysisUiResult',
    'GetQueriesQueryCollectionItemQueryDefinitionReportQueryResult',
    'GetQueriesQueryCollectionItemQueryDefinitionReportQueryForecastResult',
    'GetQueriesQueryCollectionItemQueryDefinitionReportQueryGroupByTagResult',
    'GetQueryQueryDefinitionResult',
    'GetQueryQueryDefinitionCostAnalysisUiResult',
    'GetQueryQueryDefinitionReportQueryResult',
    'GetQueryQueryDefinitionReportQueryForecastResult',
    'GetQueryQueryDefinitionReportQueryGroupByTagResult',
    'GetScheduleQueryPropertyResult',
    'GetScheduleQueryPropertyDateRangeResult',
    'GetScheduleQueryPropertyGroupByTagResult',
    'GetScheduleResultLocationResult',
    'GetScheduledRunsFilterResult',
    'GetScheduledRunsScheduledRunCollectionResult',
    'GetScheduledRunsScheduledRunCollectionItemResult',
    'GetSchedulesFilterResult',
    'GetSchedulesScheduleCollectionResult',
    'GetSchedulesScheduleCollectionItemResult',
    'GetSchedulesScheduleCollectionItemQueryPropertyResult',
    'GetSchedulesScheduleCollectionItemQueryPropertyDateRangeResult',
    'GetSchedulesScheduleCollectionItemQueryPropertyGroupByTagResult',
    'GetSchedulesScheduleCollectionItemResultLocationResult',
]

@pulumi.output_type
class CustomTableSavedCustomTable(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "columnGroupBies":
            suggest = "column_group_bies"
        elif key == "compartmentDepth":
            suggest = "compartment_depth"
        elif key == "groupByTags":
            suggest = "group_by_tags"
        elif key == "rowGroupBies":
            suggest = "row_group_bies"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CustomTableSavedCustomTable. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CustomTableSavedCustomTable.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CustomTableSavedCustomTable.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: str,
                 column_group_bies: Optional[Sequence[str]] = None,
                 compartment_depth: Optional[float] = None,
                 group_by_tags: Optional[Sequence['outputs.CustomTableSavedCustomTableGroupByTag']] = None,
                 row_group_bies: Optional[Sequence[str]] = None,
                 version: Optional[float] = None):
        pulumi.set(__self__, "display_name", display_name)
        if column_group_bies is not None:
            pulumi.set(__self__, "column_group_bies", column_group_bies)
        if compartment_depth is not None:
            pulumi.set(__self__, "compartment_depth", compartment_depth)
        if group_by_tags is not None:
            pulumi.set(__self__, "group_by_tags", group_by_tags)
        if row_group_bies is not None:
            pulumi.set(__self__, "row_group_bies", row_group_bies)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="columnGroupBies")
    def column_group_bies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "column_group_bies")

    @property
    @pulumi.getter(name="compartmentDepth")
    def compartment_depth(self) -> Optional[float]:
        return pulumi.get(self, "compartment_depth")

    @property
    @pulumi.getter(name="groupByTags")
    def group_by_tags(self) -> Optional[Sequence['outputs.CustomTableSavedCustomTableGroupByTag']]:
        return pulumi.get(self, "group_by_tags")

    @property
    @pulumi.getter(name="rowGroupBies")
    def row_group_bies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "row_group_bies")

    @property
    @pulumi.getter
    def version(self) -> Optional[float]:
        return pulumi.get(self, "version")


@pulumi.output_type
class CustomTableSavedCustomTableGroupByTag(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 namespace: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class QueryQueryDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "costAnalysisUi":
            suggest = "cost_analysis_ui"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "reportQuery":
            suggest = "report_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in QueryQueryDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        QueryQueryDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        QueryQueryDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cost_analysis_ui: 'outputs.QueryQueryDefinitionCostAnalysisUi',
                 display_name: str,
                 report_query: 'outputs.QueryQueryDefinitionReportQuery',
                 version: float):
        pulumi.set(__self__, "cost_analysis_ui", cost_analysis_ui)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "report_query", report_query)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="costAnalysisUi")
    def cost_analysis_ui(self) -> 'outputs.QueryQueryDefinitionCostAnalysisUi':
        return pulumi.get(self, "cost_analysis_ui")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="reportQuery")
    def report_query(self) -> 'outputs.QueryQueryDefinitionReportQuery':
        return pulumi.get(self, "report_query")

    @property
    @pulumi.getter
    def version(self) -> float:
        return pulumi.get(self, "version")


@pulumi.output_type
class QueryQueryDefinitionCostAnalysisUi(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isCumulativeGraph":
            suggest = "is_cumulative_graph"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in QueryQueryDefinitionCostAnalysisUi. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        QueryQueryDefinitionCostAnalysisUi.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        QueryQueryDefinitionCostAnalysisUi.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 graph: Optional[str] = None,
                 is_cumulative_graph: Optional[bool] = None):
        if graph is not None:
            pulumi.set(__self__, "graph", graph)
        if is_cumulative_graph is not None:
            pulumi.set(__self__, "is_cumulative_graph", is_cumulative_graph)

    @property
    @pulumi.getter
    def graph(self) -> Optional[str]:
        return pulumi.get(self, "graph")

    @property
    @pulumi.getter(name="isCumulativeGraph")
    def is_cumulative_graph(self) -> Optional[bool]:
        return pulumi.get(self, "is_cumulative_graph")


@pulumi.output_type
class QueryQueryDefinitionReportQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tenantId":
            suggest = "tenant_id"
        elif key == "compartmentDepth":
            suggest = "compartment_depth"
        elif key == "dateRangeName":
            suggest = "date_range_name"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "groupByTags":
            suggest = "group_by_tags"
        elif key == "isAggregateByTime":
            suggest = "is_aggregate_by_time"
        elif key == "queryType":
            suggest = "query_type"
        elif key == "timeUsageEnded":
            suggest = "time_usage_ended"
        elif key == "timeUsageStarted":
            suggest = "time_usage_started"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in QueryQueryDefinitionReportQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        QueryQueryDefinitionReportQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        QueryQueryDefinitionReportQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 granularity: str,
                 tenant_id: str,
                 compartment_depth: Optional[float] = None,
                 date_range_name: Optional[str] = None,
                 filter: Optional[str] = None,
                 forecast: Optional['outputs.QueryQueryDefinitionReportQueryForecast'] = None,
                 group_bies: Optional[Sequence[str]] = None,
                 group_by_tags: Optional[Sequence['outputs.QueryQueryDefinitionReportQueryGroupByTag']] = None,
                 is_aggregate_by_time: Optional[bool] = None,
                 query_type: Optional[str] = None,
                 time_usage_ended: Optional[str] = None,
                 time_usage_started: Optional[str] = None):
        pulumi.set(__self__, "granularity", granularity)
        pulumi.set(__self__, "tenant_id", tenant_id)
        if compartment_depth is not None:
            pulumi.set(__self__, "compartment_depth", compartment_depth)
        if date_range_name is not None:
            pulumi.set(__self__, "date_range_name", date_range_name)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if forecast is not None:
            pulumi.set(__self__, "forecast", forecast)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if group_by_tags is not None:
            pulumi.set(__self__, "group_by_tags", group_by_tags)
        if is_aggregate_by_time is not None:
            pulumi.set(__self__, "is_aggregate_by_time", is_aggregate_by_time)
        if query_type is not None:
            pulumi.set(__self__, "query_type", query_type)
        if time_usage_ended is not None:
            pulumi.set(__self__, "time_usage_ended", time_usage_ended)
        if time_usage_started is not None:
            pulumi.set(__self__, "time_usage_started", time_usage_started)

    @property
    @pulumi.getter
    def granularity(self) -> str:
        return pulumi.get(self, "granularity")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter(name="compartmentDepth")
    def compartment_depth(self) -> Optional[float]:
        return pulumi.get(self, "compartment_depth")

    @property
    @pulumi.getter(name="dateRangeName")
    def date_range_name(self) -> Optional[str]:
        return pulumi.get(self, "date_range_name")

    @property
    @pulumi.getter
    def filter(self) -> Optional[str]:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def forecast(self) -> Optional['outputs.QueryQueryDefinitionReportQueryForecast']:
        return pulumi.get(self, "forecast")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="groupByTags")
    def group_by_tags(self) -> Optional[Sequence['outputs.QueryQueryDefinitionReportQueryGroupByTag']]:
        return pulumi.get(self, "group_by_tags")

    @property
    @pulumi.getter(name="isAggregateByTime")
    def is_aggregate_by_time(self) -> Optional[bool]:
        return pulumi.get(self, "is_aggregate_by_time")

    @property
    @pulumi.getter(name="queryType")
    def query_type(self) -> Optional[str]:
        return pulumi.get(self, "query_type")

    @property
    @pulumi.getter(name="timeUsageEnded")
    def time_usage_ended(self) -> Optional[str]:
        return pulumi.get(self, "time_usage_ended")

    @property
    @pulumi.getter(name="timeUsageStarted")
    def time_usage_started(self) -> Optional[str]:
        return pulumi.get(self, "time_usage_started")


@pulumi.output_type
class QueryQueryDefinitionReportQueryForecast(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "timeForecastEnded":
            suggest = "time_forecast_ended"
        elif key == "forecastType":
            suggest = "forecast_type"
        elif key == "timeForecastStarted":
            suggest = "time_forecast_started"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in QueryQueryDefinitionReportQueryForecast. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        QueryQueryDefinitionReportQueryForecast.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        QueryQueryDefinitionReportQueryForecast.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 time_forecast_ended: str,
                 forecast_type: Optional[str] = None,
                 time_forecast_started: Optional[str] = None):
        pulumi.set(__self__, "time_forecast_ended", time_forecast_ended)
        if forecast_type is not None:
            pulumi.set(__self__, "forecast_type", forecast_type)
        if time_forecast_started is not None:
            pulumi.set(__self__, "time_forecast_started", time_forecast_started)

    @property
    @pulumi.getter(name="timeForecastEnded")
    def time_forecast_ended(self) -> str:
        return pulumi.get(self, "time_forecast_ended")

    @property
    @pulumi.getter(name="forecastType")
    def forecast_type(self) -> Optional[str]:
        return pulumi.get(self, "forecast_type")

    @property
    @pulumi.getter(name="timeForecastStarted")
    def time_forecast_started(self) -> Optional[str]:
        return pulumi.get(self, "time_forecast_started")


@pulumi.output_type
class QueryQueryDefinitionReportQueryGroupByTag(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 namespace: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ScheduleQueryProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dateRange":
            suggest = "date_range"
        elif key == "compartmentDepth":
            suggest = "compartment_depth"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "groupByTags":
            suggest = "group_by_tags"
        elif key == "isAggregateByTime":
            suggest = "is_aggregate_by_time"
        elif key == "queryType":
            suggest = "query_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleQueryProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleQueryProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleQueryProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 date_range: 'outputs.ScheduleQueryPropertiesDateRange',
                 granularity: str,
                 compartment_depth: Optional[float] = None,
                 filter: Optional[str] = None,
                 group_bies: Optional[Sequence[str]] = None,
                 group_by_tags: Optional[Sequence['outputs.ScheduleQueryPropertiesGroupByTag']] = None,
                 is_aggregate_by_time: Optional[bool] = None,
                 query_type: Optional[str] = None):
        pulumi.set(__self__, "date_range", date_range)
        pulumi.set(__self__, "granularity", granularity)
        if compartment_depth is not None:
            pulumi.set(__self__, "compartment_depth", compartment_depth)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if group_by_tags is not None:
            pulumi.set(__self__, "group_by_tags", group_by_tags)
        if is_aggregate_by_time is not None:
            pulumi.set(__self__, "is_aggregate_by_time", is_aggregate_by_time)
        if query_type is not None:
            pulumi.set(__self__, "query_type", query_type)

    @property
    @pulumi.getter(name="dateRange")
    def date_range(self) -> 'outputs.ScheduleQueryPropertiesDateRange':
        return pulumi.get(self, "date_range")

    @property
    @pulumi.getter
    def granularity(self) -> str:
        return pulumi.get(self, "granularity")

    @property
    @pulumi.getter(name="compartmentDepth")
    def compartment_depth(self) -> Optional[float]:
        return pulumi.get(self, "compartment_depth")

    @property
    @pulumi.getter
    def filter(self) -> Optional[str]:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="groupByTags")
    def group_by_tags(self) -> Optional[Sequence['outputs.ScheduleQueryPropertiesGroupByTag']]:
        return pulumi.get(self, "group_by_tags")

    @property
    @pulumi.getter(name="isAggregateByTime")
    def is_aggregate_by_time(self) -> Optional[bool]:
        return pulumi.get(self, "is_aggregate_by_time")

    @property
    @pulumi.getter(name="queryType")
    def query_type(self) -> Optional[str]:
        return pulumi.get(self, "query_type")


@pulumi.output_type
class ScheduleQueryPropertiesDateRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dateRangeType":
            suggest = "date_range_type"
        elif key == "dynamicDateRangeType":
            suggest = "dynamic_date_range_type"
        elif key == "timeUsageEnded":
            suggest = "time_usage_ended"
        elif key == "timeUsageStarted":
            suggest = "time_usage_started"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleQueryPropertiesDateRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleQueryPropertiesDateRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleQueryPropertiesDateRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 date_range_type: str,
                 dynamic_date_range_type: Optional[str] = None,
                 time_usage_ended: Optional[str] = None,
                 time_usage_started: Optional[str] = None):
        pulumi.set(__self__, "date_range_type", date_range_type)
        if dynamic_date_range_type is not None:
            pulumi.set(__self__, "dynamic_date_range_type", dynamic_date_range_type)
        if time_usage_ended is not None:
            pulumi.set(__self__, "time_usage_ended", time_usage_ended)
        if time_usage_started is not None:
            pulumi.set(__self__, "time_usage_started", time_usage_started)

    @property
    @pulumi.getter(name="dateRangeType")
    def date_range_type(self) -> str:
        return pulumi.get(self, "date_range_type")

    @property
    @pulumi.getter(name="dynamicDateRangeType")
    def dynamic_date_range_type(self) -> Optional[str]:
        return pulumi.get(self, "dynamic_date_range_type")

    @property
    @pulumi.getter(name="timeUsageEnded")
    def time_usage_ended(self) -> Optional[str]:
        return pulumi.get(self, "time_usage_ended")

    @property
    @pulumi.getter(name="timeUsageStarted")
    def time_usage_started(self) -> Optional[str]:
        return pulumi.get(self, "time_usage_started")


@pulumi.output_type
class ScheduleQueryPropertiesGroupByTag(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 namespace: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ScheduleResultLocation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "locationType":
            suggest = "location_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleResultLocation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleResultLocation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleResultLocation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bucket: str,
                 location_type: str,
                 namespace: str,
                 region: str):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "location_type", location_type)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="locationType")
    def location_type(self) -> str:
        return pulumi.get(self, "location_type")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class UsageForecast(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "timeForecastEnded":
            suggest = "time_forecast_ended"
        elif key == "forecastType":
            suggest = "forecast_type"
        elif key == "timeForecastStarted":
            suggest = "time_forecast_started"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UsageForecast. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UsageForecast.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UsageForecast.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 time_forecast_ended: str,
                 forecast_type: Optional[str] = None,
                 time_forecast_started: Optional[str] = None):
        pulumi.set(__self__, "time_forecast_ended", time_forecast_ended)
        if forecast_type is not None:
            pulumi.set(__self__, "forecast_type", forecast_type)
        if time_forecast_started is not None:
            pulumi.set(__self__, "time_forecast_started", time_forecast_started)

    @property
    @pulumi.getter(name="timeForecastEnded")
    def time_forecast_ended(self) -> str:
        return pulumi.get(self, "time_forecast_ended")

    @property
    @pulumi.getter(name="forecastType")
    def forecast_type(self) -> Optional[str]:
        return pulumi.get(self, "forecast_type")

    @property
    @pulumi.getter(name="timeForecastStarted")
    def time_forecast_started(self) -> Optional[str]:
        return pulumi.get(self, "time_forecast_started")


@pulumi.output_type
class UsageGroupByTag(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 namespace: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class UsageItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compartmentId":
            suggest = "compartment_id"
        elif key == "compartmentName":
            suggest = "compartment_name"
        elif key == "compartmentPath":
            suggest = "compartment_path"
        elif key == "computedAmount":
            suggest = "computed_amount"
        elif key == "computedQuantity":
            suggest = "computed_quantity"
        elif key == "isForecast":
            suggest = "is_forecast"
        elif key == "listRate":
            suggest = "list_rate"
        elif key == "overagesFlag":
            suggest = "overages_flag"
        elif key == "resourceId":
            suggest = "resource_id"
        elif key == "resourceName":
            suggest = "resource_name"
        elif key == "skuName":
            suggest = "sku_name"
        elif key == "skuPartNumber":
            suggest = "sku_part_number"
        elif key == "subscriptionId":
            suggest = "subscription_id"
        elif key == "tenantId":
            suggest = "tenant_id"
        elif key == "tenantName":
            suggest = "tenant_name"
        elif key == "timeUsageEnded":
            suggest = "time_usage_ended"
        elif key == "timeUsageStarted":
            suggest = "time_usage_started"
        elif key == "unitPrice":
            suggest = "unit_price"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UsageItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UsageItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UsageItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ad: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 compartment_name: Optional[str] = None,
                 compartment_path: Optional[str] = None,
                 computed_amount: Optional[float] = None,
                 computed_quantity: Optional[float] = None,
                 currency: Optional[str] = None,
                 discount: Optional[float] = None,
                 is_forecast: Optional[bool] = None,
                 list_rate: Optional[float] = None,
                 overage: Optional[str] = None,
                 overages_flag: Optional[str] = None,
                 platform: Optional[str] = None,
                 region: Optional[str] = None,
                 resource_id: Optional[str] = None,
                 resource_name: Optional[str] = None,
                 service: Optional[str] = None,
                 shape: Optional[str] = None,
                 sku_name: Optional[str] = None,
                 sku_part_number: Optional[str] = None,
                 subscription_id: Optional[str] = None,
                 tags: Optional[Sequence['outputs.UsageItemTag']] = None,
                 tenant_id: Optional[str] = None,
                 tenant_name: Optional[str] = None,
                 time_usage_ended: Optional[str] = None,
                 time_usage_started: Optional[str] = None,
                 unit: Optional[str] = None,
                 unit_price: Optional[float] = None,
                 weight: Optional[float] = None):
        if ad is not None:
            pulumi.set(__self__, "ad", ad)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if compartment_name is not None:
            pulumi.set(__self__, "compartment_name", compartment_name)
        if compartment_path is not None:
            pulumi.set(__self__, "compartment_path", compartment_path)
        if computed_amount is not None:
            pulumi.set(__self__, "computed_amount", computed_amount)
        if computed_quantity is not None:
            pulumi.set(__self__, "computed_quantity", computed_quantity)
        if currency is not None:
            pulumi.set(__self__, "currency", currency)
        if discount is not None:
            pulumi.set(__self__, "discount", discount)
        if is_forecast is not None:
            pulumi.set(__self__, "is_forecast", is_forecast)
        if list_rate is not None:
            pulumi.set(__self__, "list_rate", list_rate)
        if overage is not None:
            pulumi.set(__self__, "overage", overage)
        if overages_flag is not None:
            pulumi.set(__self__, "overages_flag", overages_flag)
        if platform is not None:
            pulumi.set(__self__, "platform", platform)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if sku_name is not None:
            pulumi.set(__self__, "sku_name", sku_name)
        if sku_part_number is not None:
            pulumi.set(__self__, "sku_part_number", sku_part_number)
        if subscription_id is not None:
            pulumi.set(__self__, "subscription_id", subscription_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)
        if tenant_name is not None:
            pulumi.set(__self__, "tenant_name", tenant_name)
        if time_usage_ended is not None:
            pulumi.set(__self__, "time_usage_ended", time_usage_ended)
        if time_usage_started is not None:
            pulumi.set(__self__, "time_usage_started", time_usage_started)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)
        if unit_price is not None:
            pulumi.set(__self__, "unit_price", unit_price)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def ad(self) -> Optional[str]:
        return pulumi.get(self, "ad")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="compartmentName")
    def compartment_name(self) -> Optional[str]:
        return pulumi.get(self, "compartment_name")

    @property
    @pulumi.getter(name="compartmentPath")
    def compartment_path(self) -> Optional[str]:
        return pulumi.get(self, "compartment_path")

    @property
    @pulumi.getter(name="computedAmount")
    def computed_amount(self) -> Optional[float]:
        return pulumi.get(self, "computed_amount")

    @property
    @pulumi.getter(name="computedQuantity")
    def computed_quantity(self) -> Optional[float]:
        return pulumi.get(self, "computed_quantity")

    @property
    @pulumi.getter
    def currency(self) -> Optional[str]:
        return pulumi.get(self, "currency")

    @property
    @pulumi.getter
    def discount(self) -> Optional[float]:
        return pulumi.get(self, "discount")

    @property
    @pulumi.getter(name="isForecast")
    def is_forecast(self) -> Optional[bool]:
        return pulumi.get(self, "is_forecast")

    @property
    @pulumi.getter(name="listRate")
    def list_rate(self) -> Optional[float]:
        return pulumi.get(self, "list_rate")

    @property
    @pulumi.getter
    def overage(self) -> Optional[str]:
        return pulumi.get(self, "overage")

    @property
    @pulumi.getter(name="overagesFlag")
    def overages_flag(self) -> Optional[str]:
        return pulumi.get(self, "overages_flag")

    @property
    @pulumi.getter
    def platform(self) -> Optional[str]:
        return pulumi.get(self, "platform")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_name")

    @property
    @pulumi.getter
    def service(self) -> Optional[str]:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="skuName")
    def sku_name(self) -> Optional[str]:
        return pulumi.get(self, "sku_name")

    @property
    @pulumi.getter(name="skuPartNumber")
    def sku_part_number(self) -> Optional[str]:
        return pulumi.get(self, "sku_part_number")

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> Optional[str]:
        return pulumi.get(self, "subscription_id")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.UsageItemTag']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[str]:
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter(name="tenantName")
    def tenant_name(self) -> Optional[str]:
        return pulumi.get(self, "tenant_name")

    @property
    @pulumi.getter(name="timeUsageEnded")
    def time_usage_ended(self) -> Optional[str]:
        return pulumi.get(self, "time_usage_ended")

    @property
    @pulumi.getter(name="timeUsageStarted")
    def time_usage_started(self) -> Optional[str]:
        return pulumi.get(self, "time_usage_started")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter(name="unitPrice")
    def unit_price(self) -> Optional[float]:
        return pulumi.get(self, "unit_price")

    @property
    @pulumi.getter
    def weight(self) -> Optional[float]:
        return pulumi.get(self, "weight")


@pulumi.output_type
class UsageItemTag(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 namespace: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetConfigurationItemResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetCustomTableSavedCustomTableResult(dict):
    def __init__(__self__, *,
                 column_group_bies: Optional[Sequence[str]] = None,
                 compartment_depth: Optional[float] = None,
                 display_name: Optional[str] = None,
                 group_by_tags: Optional[Sequence['outputs.GetCustomTableSavedCustomTableGroupByTagResult']] = None,
                 row_group_bies: Optional[Sequence[str]] = None,
                 version: Optional[float] = None):
        if column_group_bies is not None:
            pulumi.set(__self__, "column_group_bies", column_group_bies)
        if compartment_depth is not None:
            pulumi.set(__self__, "compartment_depth", compartment_depth)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if group_by_tags is not None:
            pulumi.set(__self__, "group_by_tags", group_by_tags)
        if row_group_bies is not None:
            pulumi.set(__self__, "row_group_bies", row_group_bies)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="columnGroupBies")
    def column_group_bies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "column_group_bies")

    @property
    @pulumi.getter(name="compartmentDepth")
    def compartment_depth(self) -> Optional[float]:
        return pulumi.get(self, "compartment_depth")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="groupByTags")
    def group_by_tags(self) -> Optional[Sequence['outputs.GetCustomTableSavedCustomTableGroupByTagResult']]:
        return pulumi.get(self, "group_by_tags")

    @property
    @pulumi.getter(name="rowGroupBies")
    def row_group_bies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "row_group_bies")

    @property
    @pulumi.getter
    def version(self) -> Optional[float]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetCustomTableSavedCustomTableGroupByTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 namespace: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetCustomTablesCustomTableCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetCustomTablesCustomTableCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetCustomTablesCustomTableCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetCustomTablesCustomTableCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 id: Optional[str] = None,
                 saved_custom_tables: Optional[Sequence['outputs.GetCustomTablesCustomTableCollectionItemSavedCustomTableResult']] = None,
                 saved_report_id: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if saved_custom_tables is not None:
            pulumi.set(__self__, "saved_custom_tables", saved_custom_tables)
        if saved_report_id is not None:
            pulumi.set(__self__, "saved_report_id", saved_report_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="savedCustomTables")
    def saved_custom_tables(self) -> Optional[Sequence['outputs.GetCustomTablesCustomTableCollectionItemSavedCustomTableResult']]:
        return pulumi.get(self, "saved_custom_tables")

    @property
    @pulumi.getter(name="savedReportId")
    def saved_report_id(self) -> Optional[str]:
        return pulumi.get(self, "saved_report_id")


@pulumi.output_type
class GetCustomTablesCustomTableCollectionItemSavedCustomTableResult(dict):
    def __init__(__self__, *,
                 column_group_bies: Optional[Sequence[str]] = None,
                 compartment_depth: Optional[float] = None,
                 display_name: Optional[str] = None,
                 group_by_tags: Optional[Sequence['outputs.GetCustomTablesCustomTableCollectionItemSavedCustomTableGroupByTagResult']] = None,
                 row_group_bies: Optional[Sequence[str]] = None,
                 version: Optional[float] = None):
        if column_group_bies is not None:
            pulumi.set(__self__, "column_group_bies", column_group_bies)
        if compartment_depth is not None:
            pulumi.set(__self__, "compartment_depth", compartment_depth)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if group_by_tags is not None:
            pulumi.set(__self__, "group_by_tags", group_by_tags)
        if row_group_bies is not None:
            pulumi.set(__self__, "row_group_bies", row_group_bies)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="columnGroupBies")
    def column_group_bies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "column_group_bies")

    @property
    @pulumi.getter(name="compartmentDepth")
    def compartment_depth(self) -> Optional[float]:
        return pulumi.get(self, "compartment_depth")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="groupByTags")
    def group_by_tags(self) -> Optional[Sequence['outputs.GetCustomTablesCustomTableCollectionItemSavedCustomTableGroupByTagResult']]:
        return pulumi.get(self, "group_by_tags")

    @property
    @pulumi.getter(name="rowGroupBies")
    def row_group_bies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "row_group_bies")

    @property
    @pulumi.getter
    def version(self) -> Optional[float]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetCustomTablesCustomTableCollectionItemSavedCustomTableGroupByTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 namespace: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetCustomTablesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetQueriesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetQueriesQueryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetQueriesQueryCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetQueriesQueryCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetQueriesQueryCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 id: Optional[str] = None,
                 query_definitions: Optional[Sequence['outputs.GetQueriesQueryCollectionItemQueryDefinitionResult']] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if query_definitions is not None:
            pulumi.set(__self__, "query_definitions", query_definitions)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="queryDefinitions")
    def query_definitions(self) -> Optional[Sequence['outputs.GetQueriesQueryCollectionItemQueryDefinitionResult']]:
        return pulumi.get(self, "query_definitions")


@pulumi.output_type
class GetQueriesQueryCollectionItemQueryDefinitionResult(dict):
    def __init__(__self__, *,
                 cost_analysis_uis: Optional[Sequence['outputs.GetQueriesQueryCollectionItemQueryDefinitionCostAnalysisUiResult']] = None,
                 display_name: Optional[str] = None,
                 report_queries: Optional[Sequence['outputs.GetQueriesQueryCollectionItemQueryDefinitionReportQueryResult']] = None,
                 version: Optional[float] = None):
        if cost_analysis_uis is not None:
            pulumi.set(__self__, "cost_analysis_uis", cost_analysis_uis)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if report_queries is not None:
            pulumi.set(__self__, "report_queries", report_queries)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="costAnalysisUis")
    def cost_analysis_uis(self) -> Optional[Sequence['outputs.GetQueriesQueryCollectionItemQueryDefinitionCostAnalysisUiResult']]:
        return pulumi.get(self, "cost_analysis_uis")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="reportQueries")
    def report_queries(self) -> Optional[Sequence['outputs.GetQueriesQueryCollectionItemQueryDefinitionReportQueryResult']]:
        return pulumi.get(self, "report_queries")

    @property
    @pulumi.getter
    def version(self) -> Optional[float]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetQueriesQueryCollectionItemQueryDefinitionCostAnalysisUiResult(dict):
    def __init__(__self__, *,
                 graph: Optional[str] = None,
                 is_cumulative_graph: Optional[bool] = None):
        if graph is not None:
            pulumi.set(__self__, "graph", graph)
        if is_cumulative_graph is not None:
            pulumi.set(__self__, "is_cumulative_graph", is_cumulative_graph)

    @property
    @pulumi.getter
    def graph(self) -> Optional[str]:
        return pulumi.get(self, "graph")

    @property
    @pulumi.getter(name="isCumulativeGraph")
    def is_cumulative_graph(self) -> Optional[bool]:
        return pulumi.get(self, "is_cumulative_graph")


@pulumi.output_type
class GetQueriesQueryCollectionItemQueryDefinitionReportQueryResult(dict):
    def __init__(__self__, *,
                 compartment_depth: Optional[float] = None,
                 date_range_name: Optional[str] = None,
                 filter: Optional[str] = None,
                 forecasts: Optional[Sequence['outputs.GetQueriesQueryCollectionItemQueryDefinitionReportQueryForecastResult']] = None,
                 granularity: Optional[str] = None,
                 group_bies: Optional[Sequence[str]] = None,
                 group_by_tags: Optional[Sequence['outputs.GetQueriesQueryCollectionItemQueryDefinitionReportQueryGroupByTagResult']] = None,
                 is_aggregate_by_time: Optional[bool] = None,
                 query_type: Optional[str] = None,
                 tenant_id: Optional[str] = None,
                 time_usage_ended: Optional[str] = None,
                 time_usage_started: Optional[str] = None):
        if compartment_depth is not None:
            pulumi.set(__self__, "compartment_depth", compartment_depth)
        if date_range_name is not None:
            pulumi.set(__self__, "date_range_name", date_range_name)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if forecasts is not None:
            pulumi.set(__self__, "forecasts", forecasts)
        if granularity is not None:
            pulumi.set(__self__, "granularity", granularity)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if group_by_tags is not None:
            pulumi.set(__self__, "group_by_tags", group_by_tags)
        if is_aggregate_by_time is not None:
            pulumi.set(__self__, "is_aggregate_by_time", is_aggregate_by_time)
        if query_type is not None:
            pulumi.set(__self__, "query_type", query_type)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)
        if time_usage_ended is not None:
            pulumi.set(__self__, "time_usage_ended", time_usage_ended)
        if time_usage_started is not None:
            pulumi.set(__self__, "time_usage_started", time_usage_started)

    @property
    @pulumi.getter(name="compartmentDepth")
    def compartment_depth(self) -> Optional[float]:
        return pulumi.get(self, "compartment_depth")

    @property
    @pulumi.getter(name="dateRangeName")
    def date_range_name(self) -> Optional[str]:
        return pulumi.get(self, "date_range_name")

    @property
    @pulumi.getter
    def filter(self) -> Optional[str]:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def forecasts(self) -> Optional[Sequence['outputs.GetQueriesQueryCollectionItemQueryDefinitionReportQueryForecastResult']]:
        return pulumi.get(self, "forecasts")

    @property
    @pulumi.getter
    def granularity(self) -> Optional[str]:
        return pulumi.get(self, "granularity")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="groupByTags")
    def group_by_tags(self) -> Optional[Sequence['outputs.GetQueriesQueryCollectionItemQueryDefinitionReportQueryGroupByTagResult']]:
        return pulumi.get(self, "group_by_tags")

    @property
    @pulumi.getter(name="isAggregateByTime")
    def is_aggregate_by_time(self) -> Optional[bool]:
        return pulumi.get(self, "is_aggregate_by_time")

    @property
    @pulumi.getter(name="queryType")
    def query_type(self) -> Optional[str]:
        return pulumi.get(self, "query_type")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[str]:
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter(name="timeUsageEnded")
    def time_usage_ended(self) -> Optional[str]:
        return pulumi.get(self, "time_usage_ended")

    @property
    @pulumi.getter(name="timeUsageStarted")
    def time_usage_started(self) -> Optional[str]:
        return pulumi.get(self, "time_usage_started")


@pulumi.output_type
class GetQueriesQueryCollectionItemQueryDefinitionReportQueryForecastResult(dict):
    def __init__(__self__, *,
                 forecast_type: Optional[str] = None,
                 time_forecast_ended: Optional[str] = None,
                 time_forecast_started: Optional[str] = None):
        if forecast_type is not None:
            pulumi.set(__self__, "forecast_type", forecast_type)
        if time_forecast_ended is not None:
            pulumi.set(__self__, "time_forecast_ended", time_forecast_ended)
        if time_forecast_started is not None:
            pulumi.set(__self__, "time_forecast_started", time_forecast_started)

    @property
    @pulumi.getter(name="forecastType")
    def forecast_type(self) -> Optional[str]:
        return pulumi.get(self, "forecast_type")

    @property
    @pulumi.getter(name="timeForecastEnded")
    def time_forecast_ended(self) -> Optional[str]:
        return pulumi.get(self, "time_forecast_ended")

    @property
    @pulumi.getter(name="timeForecastStarted")
    def time_forecast_started(self) -> Optional[str]:
        return pulumi.get(self, "time_forecast_started")


@pulumi.output_type
class GetQueriesQueryCollectionItemQueryDefinitionReportQueryGroupByTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 namespace: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetQueryQueryDefinitionResult(dict):
    def __init__(__self__, *,
                 cost_analysis_uis: Optional[Sequence['outputs.GetQueryQueryDefinitionCostAnalysisUiResult']] = None,
                 display_name: Optional[str] = None,
                 report_queries: Optional[Sequence['outputs.GetQueryQueryDefinitionReportQueryResult']] = None,
                 version: Optional[float] = None):
        if cost_analysis_uis is not None:
            pulumi.set(__self__, "cost_analysis_uis", cost_analysis_uis)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if report_queries is not None:
            pulumi.set(__self__, "report_queries", report_queries)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="costAnalysisUis")
    def cost_analysis_uis(self) -> Optional[Sequence['outputs.GetQueryQueryDefinitionCostAnalysisUiResult']]:
        return pulumi.get(self, "cost_analysis_uis")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="reportQueries")
    def report_queries(self) -> Optional[Sequence['outputs.GetQueryQueryDefinitionReportQueryResult']]:
        return pulumi.get(self, "report_queries")

    @property
    @pulumi.getter
    def version(self) -> Optional[float]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetQueryQueryDefinitionCostAnalysisUiResult(dict):
    def __init__(__self__, *,
                 graph: Optional[str] = None,
                 is_cumulative_graph: Optional[bool] = None):
        if graph is not None:
            pulumi.set(__self__, "graph", graph)
        if is_cumulative_graph is not None:
            pulumi.set(__self__, "is_cumulative_graph", is_cumulative_graph)

    @property
    @pulumi.getter
    def graph(self) -> Optional[str]:
        return pulumi.get(self, "graph")

    @property
    @pulumi.getter(name="isCumulativeGraph")
    def is_cumulative_graph(self) -> Optional[bool]:
        return pulumi.get(self, "is_cumulative_graph")


@pulumi.output_type
class GetQueryQueryDefinitionReportQueryResult(dict):
    def __init__(__self__, *,
                 compartment_depth: Optional[float] = None,
                 date_range_name: Optional[str] = None,
                 filter: Optional[str] = None,
                 forecasts: Optional[Sequence['outputs.GetQueryQueryDefinitionReportQueryForecastResult']] = None,
                 granularity: Optional[str] = None,
                 group_bies: Optional[Sequence[str]] = None,
                 group_by_tags: Optional[Sequence['outputs.GetQueryQueryDefinitionReportQueryGroupByTagResult']] = None,
                 is_aggregate_by_time: Optional[bool] = None,
                 query_type: Optional[str] = None,
                 tenant_id: Optional[str] = None,
                 time_usage_ended: Optional[str] = None,
                 time_usage_started: Optional[str] = None):
        if compartment_depth is not None:
            pulumi.set(__self__, "compartment_depth", compartment_depth)
        if date_range_name is not None:
            pulumi.set(__self__, "date_range_name", date_range_name)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if forecasts is not None:
            pulumi.set(__self__, "forecasts", forecasts)
        if granularity is not None:
            pulumi.set(__self__, "granularity", granularity)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if group_by_tags is not None:
            pulumi.set(__self__, "group_by_tags", group_by_tags)
        if is_aggregate_by_time is not None:
            pulumi.set(__self__, "is_aggregate_by_time", is_aggregate_by_time)
        if query_type is not None:
            pulumi.set(__self__, "query_type", query_type)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)
        if time_usage_ended is not None:
            pulumi.set(__self__, "time_usage_ended", time_usage_ended)
        if time_usage_started is not None:
            pulumi.set(__self__, "time_usage_started", time_usage_started)

    @property
    @pulumi.getter(name="compartmentDepth")
    def compartment_depth(self) -> Optional[float]:
        return pulumi.get(self, "compartment_depth")

    @property
    @pulumi.getter(name="dateRangeName")
    def date_range_name(self) -> Optional[str]:
        return pulumi.get(self, "date_range_name")

    @property
    @pulumi.getter
    def filter(self) -> Optional[str]:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def forecasts(self) -> Optional[Sequence['outputs.GetQueryQueryDefinitionReportQueryForecastResult']]:
        return pulumi.get(self, "forecasts")

    @property
    @pulumi.getter
    def granularity(self) -> Optional[str]:
        return pulumi.get(self, "granularity")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="groupByTags")
    def group_by_tags(self) -> Optional[Sequence['outputs.GetQueryQueryDefinitionReportQueryGroupByTagResult']]:
        return pulumi.get(self, "group_by_tags")

    @property
    @pulumi.getter(name="isAggregateByTime")
    def is_aggregate_by_time(self) -> Optional[bool]:
        return pulumi.get(self, "is_aggregate_by_time")

    @property
    @pulumi.getter(name="queryType")
    def query_type(self) -> Optional[str]:
        return pulumi.get(self, "query_type")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[str]:
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter(name="timeUsageEnded")
    def time_usage_ended(self) -> Optional[str]:
        return pulumi.get(self, "time_usage_ended")

    @property
    @pulumi.getter(name="timeUsageStarted")
    def time_usage_started(self) -> Optional[str]:
        return pulumi.get(self, "time_usage_started")


@pulumi.output_type
class GetQueryQueryDefinitionReportQueryForecastResult(dict):
    def __init__(__self__, *,
                 forecast_type: Optional[str] = None,
                 time_forecast_ended: Optional[str] = None,
                 time_forecast_started: Optional[str] = None):
        if forecast_type is not None:
            pulumi.set(__self__, "forecast_type", forecast_type)
        if time_forecast_ended is not None:
            pulumi.set(__self__, "time_forecast_ended", time_forecast_ended)
        if time_forecast_started is not None:
            pulumi.set(__self__, "time_forecast_started", time_forecast_started)

    @property
    @pulumi.getter(name="forecastType")
    def forecast_type(self) -> Optional[str]:
        return pulumi.get(self, "forecast_type")

    @property
    @pulumi.getter(name="timeForecastEnded")
    def time_forecast_ended(self) -> Optional[str]:
        return pulumi.get(self, "time_forecast_ended")

    @property
    @pulumi.getter(name="timeForecastStarted")
    def time_forecast_started(self) -> Optional[str]:
        return pulumi.get(self, "time_forecast_started")


@pulumi.output_type
class GetQueryQueryDefinitionReportQueryGroupByTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 namespace: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetScheduleQueryPropertyResult(dict):
    def __init__(__self__, *,
                 compartment_depth: Optional[float] = None,
                 date_ranges: Optional[Sequence['outputs.GetScheduleQueryPropertyDateRangeResult']] = None,
                 filter: Optional[str] = None,
                 granularity: Optional[str] = None,
                 group_bies: Optional[Sequence[str]] = None,
                 group_by_tags: Optional[Sequence['outputs.GetScheduleQueryPropertyGroupByTagResult']] = None,
                 is_aggregate_by_time: Optional[bool] = None,
                 query_type: Optional[str] = None):
        if compartment_depth is not None:
            pulumi.set(__self__, "compartment_depth", compartment_depth)
        if date_ranges is not None:
            pulumi.set(__self__, "date_ranges", date_ranges)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if granularity is not None:
            pulumi.set(__self__, "granularity", granularity)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if group_by_tags is not None:
            pulumi.set(__self__, "group_by_tags", group_by_tags)
        if is_aggregate_by_time is not None:
            pulumi.set(__self__, "is_aggregate_by_time", is_aggregate_by_time)
        if query_type is not None:
            pulumi.set(__self__, "query_type", query_type)

    @property
    @pulumi.getter(name="compartmentDepth")
    def compartment_depth(self) -> Optional[float]:
        return pulumi.get(self, "compartment_depth")

    @property
    @pulumi.getter(name="dateRanges")
    def date_ranges(self) -> Optional[Sequence['outputs.GetScheduleQueryPropertyDateRangeResult']]:
        return pulumi.get(self, "date_ranges")

    @property
    @pulumi.getter
    def filter(self) -> Optional[str]:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def granularity(self) -> Optional[str]:
        return pulumi.get(self, "granularity")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="groupByTags")
    def group_by_tags(self) -> Optional[Sequence['outputs.GetScheduleQueryPropertyGroupByTagResult']]:
        return pulumi.get(self, "group_by_tags")

    @property
    @pulumi.getter(name="isAggregateByTime")
    def is_aggregate_by_time(self) -> Optional[bool]:
        return pulumi.get(self, "is_aggregate_by_time")

    @property
    @pulumi.getter(name="queryType")
    def query_type(self) -> Optional[str]:
        return pulumi.get(self, "query_type")


@pulumi.output_type
class GetScheduleQueryPropertyDateRangeResult(dict):
    def __init__(__self__, *,
                 date_range_type: Optional[str] = None,
                 dynamic_date_range_type: Optional[str] = None,
                 time_usage_ended: Optional[str] = None,
                 time_usage_started: Optional[str] = None):
        if date_range_type is not None:
            pulumi.set(__self__, "date_range_type", date_range_type)
        if dynamic_date_range_type is not None:
            pulumi.set(__self__, "dynamic_date_range_type", dynamic_date_range_type)
        if time_usage_ended is not None:
            pulumi.set(__self__, "time_usage_ended", time_usage_ended)
        if time_usage_started is not None:
            pulumi.set(__self__, "time_usage_started", time_usage_started)

    @property
    @pulumi.getter(name="dateRangeType")
    def date_range_type(self) -> Optional[str]:
        return pulumi.get(self, "date_range_type")

    @property
    @pulumi.getter(name="dynamicDateRangeType")
    def dynamic_date_range_type(self) -> Optional[str]:
        return pulumi.get(self, "dynamic_date_range_type")

    @property
    @pulumi.getter(name="timeUsageEnded")
    def time_usage_ended(self) -> Optional[str]:
        return pulumi.get(self, "time_usage_ended")

    @property
    @pulumi.getter(name="timeUsageStarted")
    def time_usage_started(self) -> Optional[str]:
        return pulumi.get(self, "time_usage_started")


@pulumi.output_type
class GetScheduleQueryPropertyGroupByTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 namespace: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetScheduleResultLocationResult(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 location_type: Optional[str] = None,
                 namespace: Optional[str] = None,
                 region: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if location_type is not None:
            pulumi.set(__self__, "location_type", location_type)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="locationType")
    def location_type(self) -> Optional[str]:
        return pulumi.get(self, "location_type")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")


@pulumi.output_type
class GetScheduledRunsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetScheduledRunsScheduledRunCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetScheduledRunsScheduledRunCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetScheduledRunsScheduledRunCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetScheduledRunsScheduledRunCollectionItemResult(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 schedule_id: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_finished: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if schedule_id is not None:
            pulumi.set(__self__, "schedule_id", schedule_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_finished is not None:
            pulumi.set(__self__, "time_finished", time_finished)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="scheduleId")
    def schedule_id(self) -> Optional[str]:
        return pulumi.get(self, "schedule_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeFinished")
    def time_finished(self) -> Optional[str]:
        return pulumi.get(self, "time_finished")


@pulumi.output_type
class GetSchedulesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSchedulesScheduleCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetSchedulesScheduleCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetSchedulesScheduleCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSchedulesScheduleCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 output_file_format: Optional[str] = None,
                 query_properties: Optional[Sequence['outputs.GetSchedulesScheduleCollectionItemQueryPropertyResult']] = None,
                 result_locations: Optional[Sequence['outputs.GetSchedulesScheduleCollectionItemResultLocationResult']] = None,
                 saved_report_id: Optional[str] = None,
                 schedule_recurrences: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_next_run: Optional[str] = None,
                 time_scheduled: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if output_file_format is not None:
            pulumi.set(__self__, "output_file_format", output_file_format)
        if query_properties is not None:
            pulumi.set(__self__, "query_properties", query_properties)
        if result_locations is not None:
            pulumi.set(__self__, "result_locations", result_locations)
        if saved_report_id is not None:
            pulumi.set(__self__, "saved_report_id", saved_report_id)
        if schedule_recurrences is not None:
            pulumi.set(__self__, "schedule_recurrences", schedule_recurrences)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_next_run is not None:
            pulumi.set(__self__, "time_next_run", time_next_run)
        if time_scheduled is not None:
            pulumi.set(__self__, "time_scheduled", time_scheduled)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="outputFileFormat")
    def output_file_format(self) -> Optional[str]:
        return pulumi.get(self, "output_file_format")

    @property
    @pulumi.getter(name="queryProperties")
    def query_properties(self) -> Optional[Sequence['outputs.GetSchedulesScheduleCollectionItemQueryPropertyResult']]:
        return pulumi.get(self, "query_properties")

    @property
    @pulumi.getter(name="resultLocations")
    def result_locations(self) -> Optional[Sequence['outputs.GetSchedulesScheduleCollectionItemResultLocationResult']]:
        return pulumi.get(self, "result_locations")

    @property
    @pulumi.getter(name="savedReportId")
    def saved_report_id(self) -> Optional[str]:
        return pulumi.get(self, "saved_report_id")

    @property
    @pulumi.getter(name="scheduleRecurrences")
    def schedule_recurrences(self) -> Optional[str]:
        return pulumi.get(self, "schedule_recurrences")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeNextRun")
    def time_next_run(self) -> Optional[str]:
        return pulumi.get(self, "time_next_run")

    @property
    @pulumi.getter(name="timeScheduled")
    def time_scheduled(self) -> Optional[str]:
        return pulumi.get(self, "time_scheduled")


@pulumi.output_type
class GetSchedulesScheduleCollectionItemQueryPropertyResult(dict):
    def __init__(__self__, *,
                 compartment_depth: Optional[float] = None,
                 date_ranges: Optional[Sequence['outputs.GetSchedulesScheduleCollectionItemQueryPropertyDateRangeResult']] = None,
                 filter: Optional[str] = None,
                 granularity: Optional[str] = None,
                 group_bies: Optional[Sequence[str]] = None,
                 group_by_tags: Optional[Sequence['outputs.GetSchedulesScheduleCollectionItemQueryPropertyGroupByTagResult']] = None,
                 is_aggregate_by_time: Optional[bool] = None,
                 query_type: Optional[str] = None):
        if compartment_depth is not None:
            pulumi.set(__self__, "compartment_depth", compartment_depth)
        if date_ranges is not None:
            pulumi.set(__self__, "date_ranges", date_ranges)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if granularity is not None:
            pulumi.set(__self__, "granularity", granularity)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if group_by_tags is not None:
            pulumi.set(__self__, "group_by_tags", group_by_tags)
        if is_aggregate_by_time is not None:
            pulumi.set(__self__, "is_aggregate_by_time", is_aggregate_by_time)
        if query_type is not None:
            pulumi.set(__self__, "query_type", query_type)

    @property
    @pulumi.getter(name="compartmentDepth")
    def compartment_depth(self) -> Optional[float]:
        return pulumi.get(self, "compartment_depth")

    @property
    @pulumi.getter(name="dateRanges")
    def date_ranges(self) -> Optional[Sequence['outputs.GetSchedulesScheduleCollectionItemQueryPropertyDateRangeResult']]:
        return pulumi.get(self, "date_ranges")

    @property
    @pulumi.getter
    def filter(self) -> Optional[str]:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def granularity(self) -> Optional[str]:
        return pulumi.get(self, "granularity")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="groupByTags")
    def group_by_tags(self) -> Optional[Sequence['outputs.GetSchedulesScheduleCollectionItemQueryPropertyGroupByTagResult']]:
        return pulumi.get(self, "group_by_tags")

    @property
    @pulumi.getter(name="isAggregateByTime")
    def is_aggregate_by_time(self) -> Optional[bool]:
        return pulumi.get(self, "is_aggregate_by_time")

    @property
    @pulumi.getter(name="queryType")
    def query_type(self) -> Optional[str]:
        return pulumi.get(self, "query_type")


@pulumi.output_type
class GetSchedulesScheduleCollectionItemQueryPropertyDateRangeResult(dict):
    def __init__(__self__, *,
                 date_range_type: Optional[str] = None,
                 dynamic_date_range_type: Optional[str] = None,
                 time_usage_ended: Optional[str] = None,
                 time_usage_started: Optional[str] = None):
        if date_range_type is not None:
            pulumi.set(__self__, "date_range_type", date_range_type)
        if dynamic_date_range_type is not None:
            pulumi.set(__self__, "dynamic_date_range_type", dynamic_date_range_type)
        if time_usage_ended is not None:
            pulumi.set(__self__, "time_usage_ended", time_usage_ended)
        if time_usage_started is not None:
            pulumi.set(__self__, "time_usage_started", time_usage_started)

    @property
    @pulumi.getter(name="dateRangeType")
    def date_range_type(self) -> Optional[str]:
        return pulumi.get(self, "date_range_type")

    @property
    @pulumi.getter(name="dynamicDateRangeType")
    def dynamic_date_range_type(self) -> Optional[str]:
        return pulumi.get(self, "dynamic_date_range_type")

    @property
    @pulumi.getter(name="timeUsageEnded")
    def time_usage_ended(self) -> Optional[str]:
        return pulumi.get(self, "time_usage_ended")

    @property
    @pulumi.getter(name="timeUsageStarted")
    def time_usage_started(self) -> Optional[str]:
        return pulumi.get(self, "time_usage_started")


@pulumi.output_type
class GetSchedulesScheduleCollectionItemQueryPropertyGroupByTagResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 namespace: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSchedulesScheduleCollectionItemResultLocationResult(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 location_type: Optional[str] = None,
                 namespace: Optional[str] = None,
                 region: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if location_type is not None:
            pulumi.set(__self__, "location_type", location_type)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="locationType")
    def location_type(self) -> Optional[str]:
        return pulumi.get(self, "location_type")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")


