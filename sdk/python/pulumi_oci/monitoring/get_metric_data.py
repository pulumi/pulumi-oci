# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetMetricDataResult',
    'AwaitableGetMetricDataResult',
    'get_metric_data',
    'get_metric_data_output',
]

@pulumi.output_type
class GetMetricDataResult:
    """
    A collection of values returned by getMetricData.
    """
    def __init__(__self__, compartment_id=None, compartment_id_in_subtree=None, end_time=None, filters=None, id=None, metric_datas=None, namespace=None, query=None, resolution=None, resource_group=None, start_time=None):
        if compartment_id and not isinstance(compartment_id, str):
            raise TypeError("Expected argument 'compartment_id' to be a str")
        pulumi.set(__self__, "compartment_id", compartment_id)
        if compartment_id_in_subtree and not isinstance(compartment_id_in_subtree, bool):
            raise TypeError("Expected argument 'compartment_id_in_subtree' to be a bool")
        pulumi.set(__self__, "compartment_id_in_subtree", compartment_id_in_subtree)
        if end_time and not isinstance(end_time, str):
            raise TypeError("Expected argument 'end_time' to be a str")
        pulumi.set(__self__, "end_time", end_time)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if metric_datas and not isinstance(metric_datas, list):
            raise TypeError("Expected argument 'metric_datas' to be a list")
        pulumi.set(__self__, "metric_datas", metric_datas)
        if namespace and not isinstance(namespace, str):
            raise TypeError("Expected argument 'namespace' to be a str")
        pulumi.set(__self__, "namespace", namespace)
        if query and not isinstance(query, str):
            raise TypeError("Expected argument 'query' to be a str")
        pulumi.set(__self__, "query", query)
        if resolution and not isinstance(resolution, str):
            raise TypeError("Expected argument 'resolution' to be a str")
        pulumi.set(__self__, "resolution", resolution)
        if resource_group and not isinstance(resource_group, str):
            raise TypeError("Expected argument 'resource_group' to be a str")
        pulumi.set(__self__, "resource_group", resource_group)
        if start_time and not isinstance(start_time, str):
            raise TypeError("Expected argument 'start_time' to be a str")
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="compartmentIdInSubtree")
    def compartment_id_in_subtree(self) -> Optional[bool]:
        return pulumi.get(self, "compartment_id_in_subtree")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[str]:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetMetricDataFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="metricDatas")
    def metric_datas(self) -> Optional[Sequence['outputs.GetMetricDataMetricDataResult']]:
        return pulumi.get(self, "metric_datas")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def query(self) -> str:
        return pulumi.get(self, "query")

    @property
    @pulumi.getter
    def resolution(self) -> Optional[str]:
        return pulumi.get(self, "resolution")

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[str]:
        return pulumi.get(self, "resource_group")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[str]:
        return pulumi.get(self, "start_time")


class AwaitableGetMetricDataResult(GetMetricDataResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMetricDataResult(
            compartment_id=self.compartment_id,
            compartment_id_in_subtree=self.compartment_id_in_subtree,
            end_time=self.end_time,
            filters=self.filters,
            id=self.id,
            metric_datas=self.metric_datas,
            namespace=self.namespace,
            query=self.query,
            resolution=self.resolution,
            resource_group=self.resource_group,
            start_time=self.start_time)


def get_metric_data(compartment_id: Optional[str] = None,
                    compartment_id_in_subtree: Optional[bool] = None,
                    end_time: Optional[str] = None,
                    filters: Optional[Sequence[pulumi.InputType['GetMetricDataFilterArgs']]] = None,
                    namespace: Optional[str] = None,
                    query: Optional[str] = None,
                    resolution: Optional[str] = None,
                    resource_group: Optional[str] = None,
                    start_time: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMetricDataResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['compartmentId'] = compartment_id
    __args__['compartmentIdInSubtree'] = compartment_id_in_subtree
    __args__['endTime'] = end_time
    __args__['filters'] = filters
    __args__['namespace'] = namespace
    __args__['query'] = query
    __args__['resolution'] = resolution
    __args__['resourceGroup'] = resource_group
    __args__['startTime'] = start_time
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:Monitoring/getMetricData:getMetricData', __args__, opts=opts, typ=GetMetricDataResult).value

    return AwaitableGetMetricDataResult(
        compartment_id=pulumi.get(__ret__, 'compartment_id'),
        compartment_id_in_subtree=pulumi.get(__ret__, 'compartment_id_in_subtree'),
        end_time=pulumi.get(__ret__, 'end_time'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        metric_datas=pulumi.get(__ret__, 'metric_datas'),
        namespace=pulumi.get(__ret__, 'namespace'),
        query=pulumi.get(__ret__, 'query'),
        resolution=pulumi.get(__ret__, 'resolution'),
        resource_group=pulumi.get(__ret__, 'resource_group'),
        start_time=pulumi.get(__ret__, 'start_time'))


@_utilities.lift_output_func(get_metric_data)
def get_metric_data_output(compartment_id: Optional[pulumi.Input[str]] = None,
                           compartment_id_in_subtree: Optional[pulumi.Input[Optional[bool]]] = None,
                           end_time: Optional[pulumi.Input[Optional[str]]] = None,
                           filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetMetricDataFilterArgs']]]]] = None,
                           namespace: Optional[pulumi.Input[str]] = None,
                           query: Optional[pulumi.Input[str]] = None,
                           resolution: Optional[pulumi.Input[Optional[str]]] = None,
                           resource_group: Optional[pulumi.Input[Optional[str]]] = None,
                           start_time: Optional[pulumi.Input[Optional[str]]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetMetricDataResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
