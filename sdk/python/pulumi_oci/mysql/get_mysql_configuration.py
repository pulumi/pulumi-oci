# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetMysqlConfigurationResult',
    'AwaitableGetMysqlConfigurationResult',
    'get_mysql_configuration',
    'get_mysql_configuration_output',
]

@pulumi.output_type
class GetMysqlConfigurationResult:
    """
    A collection of values returned by getMysqlConfiguration.
    """
    def __init__(__self__, compartment_id=None, configuration_id=None, defined_tags=None, description=None, display_name=None, freeform_tags=None, id=None, init_variables=None, parent_configuration_id=None, shape_name=None, state=None, time_created=None, time_updated=None, type=None, variables=None):
        if compartment_id and not isinstance(compartment_id, str):
            raise TypeError("Expected argument 'compartment_id' to be a str")
        pulumi.set(__self__, "compartment_id", compartment_id)
        if configuration_id and not isinstance(configuration_id, str):
            raise TypeError("Expected argument 'configuration_id' to be a str")
        pulumi.set(__self__, "configuration_id", configuration_id)
        if defined_tags and not isinstance(defined_tags, dict):
            raise TypeError("Expected argument 'defined_tags' to be a dict")
        pulumi.set(__self__, "defined_tags", defined_tags)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if freeform_tags and not isinstance(freeform_tags, dict):
            raise TypeError("Expected argument 'freeform_tags' to be a dict")
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if init_variables and not isinstance(init_variables, list):
            raise TypeError("Expected argument 'init_variables' to be a list")
        pulumi.set(__self__, "init_variables", init_variables)
        if parent_configuration_id and not isinstance(parent_configuration_id, str):
            raise TypeError("Expected argument 'parent_configuration_id' to be a str")
        pulumi.set(__self__, "parent_configuration_id", parent_configuration_id)
        if shape_name and not isinstance(shape_name, str):
            raise TypeError("Expected argument 'shape_name' to be a str")
        pulumi.set(__self__, "shape_name", shape_name)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if time_created and not isinstance(time_created, str):
            raise TypeError("Expected argument 'time_created' to be a str")
        pulumi.set(__self__, "time_created", time_created)
        if time_updated and not isinstance(time_updated, str):
            raise TypeError("Expected argument 'time_updated' to be a str")
        pulumi.set(__self__, "time_updated", time_updated)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if variables and not isinstance(variables, list):
            raise TypeError("Expected argument 'variables' to be a list")
        pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        OCID of the Compartment the Configuration exists in.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="configurationId")
    def configuration_id(self) -> str:
        return pulumi.get(self, "configuration_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        User-provided data about the Configuration.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The display name of the Configuration.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The OCID of the Configuration.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="initVariables")
    def init_variables(self) -> Sequence['outputs.GetMysqlConfigurationInitVariableResult']:
        """
        User-defined service variables set only at DB system initialization. These variables cannot be changed later at runtime.
        """
        return pulumi.get(self, "init_variables")

    @property
    @pulumi.getter(name="parentConfigurationId")
    def parent_configuration_id(self) -> str:
        """
        The OCID of the Configuration from which this Configuration is "derived". This is entirely a metadata relationship. There is no relation between the values in this Configuration and its parent.
        """
        return pulumi.get(self, "parent_configuration_id")

    @property
    @pulumi.getter(name="shapeName")
    def shape_name(self) -> str:
        """
        The name of the associated Shape.
        """
        return pulumi.get(self, "shape_name")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The current state of the Configuration.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time the Configuration was created, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The date and time the Configuration was last updated, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The Configuration type, DEFAULT or CUSTOM.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def variables(self) -> Sequence['outputs.GetMysqlConfigurationVariableResult']:
        """
        User-defined service variables.
        """
        return pulumi.get(self, "variables")


class AwaitableGetMysqlConfigurationResult(GetMysqlConfigurationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMysqlConfigurationResult(
            compartment_id=self.compartment_id,
            configuration_id=self.configuration_id,
            defined_tags=self.defined_tags,
            description=self.description,
            display_name=self.display_name,
            freeform_tags=self.freeform_tags,
            id=self.id,
            init_variables=self.init_variables,
            parent_configuration_id=self.parent_configuration_id,
            shape_name=self.shape_name,
            state=self.state,
            time_created=self.time_created,
            time_updated=self.time_updated,
            type=self.type,
            variables=self.variables)


def get_mysql_configuration(configuration_id: Optional[str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMysqlConfigurationResult:
    """
    This data source provides details about a specific Mysql Configuration resource in Oracle Cloud Infrastructure MySQL Database service.

    Get the full details of the specified Configuration, including the list of MySQL Variables and their values.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_mysql_configuration = oci.Mysql.get_mysql_configuration(configuration_id=var["mysql_configuration_id"])
    ```


    :param str configuration_id: The OCID of the Configuration.
    """
    __args__ = dict()
    __args__['configurationId'] = configuration_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:Mysql/getMysqlConfiguration:getMysqlConfiguration', __args__, opts=opts, typ=GetMysqlConfigurationResult).value

    return AwaitableGetMysqlConfigurationResult(
        compartment_id=pulumi.get(__ret__, 'compartment_id'),
        configuration_id=pulumi.get(__ret__, 'configuration_id'),
        defined_tags=pulumi.get(__ret__, 'defined_tags'),
        description=pulumi.get(__ret__, 'description'),
        display_name=pulumi.get(__ret__, 'display_name'),
        freeform_tags=pulumi.get(__ret__, 'freeform_tags'),
        id=pulumi.get(__ret__, 'id'),
        init_variables=pulumi.get(__ret__, 'init_variables'),
        parent_configuration_id=pulumi.get(__ret__, 'parent_configuration_id'),
        shape_name=pulumi.get(__ret__, 'shape_name'),
        state=pulumi.get(__ret__, 'state'),
        time_created=pulumi.get(__ret__, 'time_created'),
        time_updated=pulumi.get(__ret__, 'time_updated'),
        type=pulumi.get(__ret__, 'type'),
        variables=pulumi.get(__ret__, 'variables'))


@_utilities.lift_output_func(get_mysql_configuration)
def get_mysql_configuration_output(configuration_id: Optional[pulumi.Input[str]] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetMysqlConfigurationResult]:
    """
    This data source provides details about a specific Mysql Configuration resource in Oracle Cloud Infrastructure MySQL Database service.

    Get the full details of the specified Configuration, including the list of MySQL Variables and their values.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_mysql_configuration = oci.Mysql.get_mysql_configuration(configuration_id=var["mysql_configuration_id"])
    ```


    :param str configuration_id: The OCID of the Configuration.
    """
    ...
