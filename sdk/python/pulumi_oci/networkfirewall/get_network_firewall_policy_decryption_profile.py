# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetNetworkFirewallPolicyDecryptionProfileResult',
    'AwaitableGetNetworkFirewallPolicyDecryptionProfileResult',
    'get_network_firewall_policy_decryption_profile',
    'get_network_firewall_policy_decryption_profile_output',
]

@pulumi.output_type
class GetNetworkFirewallPolicyDecryptionProfileResult:
    """
    A collection of values returned by getNetworkFirewallPolicyDecryptionProfile.
    """
    def __init__(__self__, are_certificate_extensions_restricted=None, id=None, is_auto_include_alt_name=None, is_expired_certificate_blocked=None, is_out_of_capacity_blocked=None, is_revocation_status_timeout_blocked=None, is_unknown_revocation_status_blocked=None, is_unsupported_cipher_blocked=None, is_unsupported_version_blocked=None, is_untrusted_issuer_blocked=None, name=None, network_firewall_policy_id=None, parent_resource_id=None, type=None):
        if are_certificate_extensions_restricted and not isinstance(are_certificate_extensions_restricted, bool):
            raise TypeError("Expected argument 'are_certificate_extensions_restricted' to be a bool")
        pulumi.set(__self__, "are_certificate_extensions_restricted", are_certificate_extensions_restricted)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_auto_include_alt_name and not isinstance(is_auto_include_alt_name, bool):
            raise TypeError("Expected argument 'is_auto_include_alt_name' to be a bool")
        pulumi.set(__self__, "is_auto_include_alt_name", is_auto_include_alt_name)
        if is_expired_certificate_blocked and not isinstance(is_expired_certificate_blocked, bool):
            raise TypeError("Expected argument 'is_expired_certificate_blocked' to be a bool")
        pulumi.set(__self__, "is_expired_certificate_blocked", is_expired_certificate_blocked)
        if is_out_of_capacity_blocked and not isinstance(is_out_of_capacity_blocked, bool):
            raise TypeError("Expected argument 'is_out_of_capacity_blocked' to be a bool")
        pulumi.set(__self__, "is_out_of_capacity_blocked", is_out_of_capacity_blocked)
        if is_revocation_status_timeout_blocked and not isinstance(is_revocation_status_timeout_blocked, bool):
            raise TypeError("Expected argument 'is_revocation_status_timeout_blocked' to be a bool")
        pulumi.set(__self__, "is_revocation_status_timeout_blocked", is_revocation_status_timeout_blocked)
        if is_unknown_revocation_status_blocked and not isinstance(is_unknown_revocation_status_blocked, bool):
            raise TypeError("Expected argument 'is_unknown_revocation_status_blocked' to be a bool")
        pulumi.set(__self__, "is_unknown_revocation_status_blocked", is_unknown_revocation_status_blocked)
        if is_unsupported_cipher_blocked and not isinstance(is_unsupported_cipher_blocked, bool):
            raise TypeError("Expected argument 'is_unsupported_cipher_blocked' to be a bool")
        pulumi.set(__self__, "is_unsupported_cipher_blocked", is_unsupported_cipher_blocked)
        if is_unsupported_version_blocked and not isinstance(is_unsupported_version_blocked, bool):
            raise TypeError("Expected argument 'is_unsupported_version_blocked' to be a bool")
        pulumi.set(__self__, "is_unsupported_version_blocked", is_unsupported_version_blocked)
        if is_untrusted_issuer_blocked and not isinstance(is_untrusted_issuer_blocked, bool):
            raise TypeError("Expected argument 'is_untrusted_issuer_blocked' to be a bool")
        pulumi.set(__self__, "is_untrusted_issuer_blocked", is_untrusted_issuer_blocked)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if network_firewall_policy_id and not isinstance(network_firewall_policy_id, str):
            raise TypeError("Expected argument 'network_firewall_policy_id' to be a str")
        pulumi.set(__self__, "network_firewall_policy_id", network_firewall_policy_id)
        if parent_resource_id and not isinstance(parent_resource_id, str):
            raise TypeError("Expected argument 'parent_resource_id' to be a str")
        pulumi.set(__self__, "parent_resource_id", parent_resource_id)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="areCertificateExtensionsRestricted")
    def are_certificate_extensions_restricted(self) -> bool:
        """
        Whether to block sessions if the server's certificate uses extensions other than key usage and/or extended key usage.
        """
        return pulumi.get(self, "are_certificate_extensions_restricted")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isAutoIncludeAltName")
    def is_auto_include_alt_name(self) -> bool:
        """
        Whether to automatically append SAN to impersonating certificate if server certificate is missing SAN.
        """
        return pulumi.get(self, "is_auto_include_alt_name")

    @property
    @pulumi.getter(name="isExpiredCertificateBlocked")
    def is_expired_certificate_blocked(self) -> bool:
        """
        Whether to block sessions if server's certificate is expired.
        """
        return pulumi.get(self, "is_expired_certificate_blocked")

    @property
    @pulumi.getter(name="isOutOfCapacityBlocked")
    def is_out_of_capacity_blocked(self) -> bool:
        """
        Whether to block sessions if the firewall is temporarily unable to decrypt their traffic.
        """
        return pulumi.get(self, "is_out_of_capacity_blocked")

    @property
    @pulumi.getter(name="isRevocationStatusTimeoutBlocked")
    def is_revocation_status_timeout_blocked(self) -> bool:
        """
        Whether to block sessions if the revocation status check for server's certificate does not succeed within the maximum allowed time (defaulting to 5 seconds).
        """
        return pulumi.get(self, "is_revocation_status_timeout_blocked")

    @property
    @pulumi.getter(name="isUnknownRevocationStatusBlocked")
    def is_unknown_revocation_status_blocked(self) -> bool:
        """
        Whether to block sessions if the revocation status check for server's certificate results in "unknown".
        """
        return pulumi.get(self, "is_unknown_revocation_status_blocked")

    @property
    @pulumi.getter(name="isUnsupportedCipherBlocked")
    def is_unsupported_cipher_blocked(self) -> bool:
        """
        Whether to block sessions if SSL cipher suite is not supported.
        """
        return pulumi.get(self, "is_unsupported_cipher_blocked")

    @property
    @pulumi.getter(name="isUnsupportedVersionBlocked")
    def is_unsupported_version_blocked(self) -> bool:
        """
        Whether to block sessions if SSL version is not supported.
        """
        return pulumi.get(self, "is_unsupported_version_blocked")

    @property
    @pulumi.getter(name="isUntrustedIssuerBlocked")
    def is_untrusted_issuer_blocked(self) -> bool:
        """
        Whether to block sessions if server's certificate is issued by an untrusted certificate authority (CA).
        """
        return pulumi.get(self, "is_untrusted_issuer_blocked")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Unique Name of the decryption profile.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkFirewallPolicyId")
    def network_firewall_policy_id(self) -> str:
        return pulumi.get(self, "network_firewall_policy_id")

    @property
    @pulumi.getter(name="parentResourceId")
    def parent_resource_id(self) -> str:
        """
        OCID of the Network Firewall Policy this decryption profile belongs to.
        """
        return pulumi.get(self, "parent_resource_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Describes the type of Decryption Profile SslForwardProxy or SslInboundInspection.
        """
        return pulumi.get(self, "type")


class AwaitableGetNetworkFirewallPolicyDecryptionProfileResult(GetNetworkFirewallPolicyDecryptionProfileResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNetworkFirewallPolicyDecryptionProfileResult(
            are_certificate_extensions_restricted=self.are_certificate_extensions_restricted,
            id=self.id,
            is_auto_include_alt_name=self.is_auto_include_alt_name,
            is_expired_certificate_blocked=self.is_expired_certificate_blocked,
            is_out_of_capacity_blocked=self.is_out_of_capacity_blocked,
            is_revocation_status_timeout_blocked=self.is_revocation_status_timeout_blocked,
            is_unknown_revocation_status_blocked=self.is_unknown_revocation_status_blocked,
            is_unsupported_cipher_blocked=self.is_unsupported_cipher_blocked,
            is_unsupported_version_blocked=self.is_unsupported_version_blocked,
            is_untrusted_issuer_blocked=self.is_untrusted_issuer_blocked,
            name=self.name,
            network_firewall_policy_id=self.network_firewall_policy_id,
            parent_resource_id=self.parent_resource_id,
            type=self.type)


def get_network_firewall_policy_decryption_profile(name: Optional[str] = None,
                                                   network_firewall_policy_id: Optional[str] = None,
                                                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNetworkFirewallPolicyDecryptionProfileResult:
    """
    This data source provides details about a specific Network Firewall Policy Decryption Profile resource in Oracle Cloud Infrastructure Network Firewall service.

    Get Decryption Profile by the given name in the context of network firewall policy.


    :param str name: Unique Name of the decryption profile.
    :param str network_firewall_policy_id: Unique Network Firewall Policy identifier
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['networkFirewallPolicyId'] = network_firewall_policy_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:NetworkFirewall/getNetworkFirewallPolicyDecryptionProfile:getNetworkFirewallPolicyDecryptionProfile', __args__, opts=opts, typ=GetNetworkFirewallPolicyDecryptionProfileResult).value

    return AwaitableGetNetworkFirewallPolicyDecryptionProfileResult(
        are_certificate_extensions_restricted=pulumi.get(__ret__, 'are_certificate_extensions_restricted'),
        id=pulumi.get(__ret__, 'id'),
        is_auto_include_alt_name=pulumi.get(__ret__, 'is_auto_include_alt_name'),
        is_expired_certificate_blocked=pulumi.get(__ret__, 'is_expired_certificate_blocked'),
        is_out_of_capacity_blocked=pulumi.get(__ret__, 'is_out_of_capacity_blocked'),
        is_revocation_status_timeout_blocked=pulumi.get(__ret__, 'is_revocation_status_timeout_blocked'),
        is_unknown_revocation_status_blocked=pulumi.get(__ret__, 'is_unknown_revocation_status_blocked'),
        is_unsupported_cipher_blocked=pulumi.get(__ret__, 'is_unsupported_cipher_blocked'),
        is_unsupported_version_blocked=pulumi.get(__ret__, 'is_unsupported_version_blocked'),
        is_untrusted_issuer_blocked=pulumi.get(__ret__, 'is_untrusted_issuer_blocked'),
        name=pulumi.get(__ret__, 'name'),
        network_firewall_policy_id=pulumi.get(__ret__, 'network_firewall_policy_id'),
        parent_resource_id=pulumi.get(__ret__, 'parent_resource_id'),
        type=pulumi.get(__ret__, 'type'))


@_utilities.lift_output_func(get_network_firewall_policy_decryption_profile)
def get_network_firewall_policy_decryption_profile_output(name: Optional[pulumi.Input[str]] = None,
                                                          network_firewall_policy_id: Optional[pulumi.Input[str]] = None,
                                                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetNetworkFirewallPolicyDecryptionProfileResult]:
    """
    This data source provides details about a specific Network Firewall Policy Decryption Profile resource in Oracle Cloud Infrastructure Network Firewall service.

    Get Decryption Profile by the given name in the context of network firewall policy.


    :param str name: Unique Name of the decryption profile.
    :param str network_firewall_policy_id: Unique Network Firewall Policy identifier
    """
    ...
