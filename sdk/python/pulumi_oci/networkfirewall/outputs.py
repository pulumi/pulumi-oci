# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'NetworkFirewallPolicyDecryptionRuleCondition',
    'NetworkFirewallPolicyDecryptionRulePosition',
    'NetworkFirewallPolicySecurityRuleCondition',
    'NetworkFirewallPolicySecurityRulePosition',
    'NetworkFirewallPolicyServicePortRange',
    'NetworkFirewallPolicyUrlListUrl',
    'GetNetworkFirewallPoliciesFilterResult',
    'GetNetworkFirewallPoliciesNetworkFirewallPolicySummaryCollectionResult',
    'GetNetworkFirewallPoliciesNetworkFirewallPolicySummaryCollectionItemResult',
    'GetNetworkFirewallPolicyAddressListsAddressListSummaryCollectionResult',
    'GetNetworkFirewallPolicyAddressListsAddressListSummaryCollectionItemResult',
    'GetNetworkFirewallPolicyAddressListsFilterResult',
    'GetNetworkFirewallPolicyApplicationGroupsApplicationGroupSummaryCollectionResult',
    'GetNetworkFirewallPolicyApplicationGroupsApplicationGroupSummaryCollectionItemResult',
    'GetNetworkFirewallPolicyApplicationGroupsFilterResult',
    'GetNetworkFirewallPolicyApplicationsApplicationSummaryCollectionResult',
    'GetNetworkFirewallPolicyApplicationsApplicationSummaryCollectionItemResult',
    'GetNetworkFirewallPolicyApplicationsFilterResult',
    'GetNetworkFirewallPolicyDecryptionProfilesDecryptionProfileSummaryCollectionResult',
    'GetNetworkFirewallPolicyDecryptionProfilesDecryptionProfileSummaryCollectionItemResult',
    'GetNetworkFirewallPolicyDecryptionProfilesFilterResult',
    'GetNetworkFirewallPolicyDecryptionRuleConditionResult',
    'GetNetworkFirewallPolicyDecryptionRulePositionResult',
    'GetNetworkFirewallPolicyDecryptionRulesDecryptionRuleSummaryCollectionResult',
    'GetNetworkFirewallPolicyDecryptionRulesDecryptionRuleSummaryCollectionItemResult',
    'GetNetworkFirewallPolicyDecryptionRulesDecryptionRuleSummaryCollectionItemConditionResult',
    'GetNetworkFirewallPolicyDecryptionRulesDecryptionRuleSummaryCollectionItemPositionResult',
    'GetNetworkFirewallPolicyDecryptionRulesFilterResult',
    'GetNetworkFirewallPolicyMappedSecretsMappedSecretSummaryCollectionResult',
    'GetNetworkFirewallPolicyMappedSecretsMappedSecretSummaryCollectionItemResult',
    'GetNetworkFirewallPolicySecurityRuleConditionResult',
    'GetNetworkFirewallPolicySecurityRulePositionResult',
    'GetNetworkFirewallPolicySecurityRulesFilterResult',
    'GetNetworkFirewallPolicySecurityRulesSecurityRuleSummaryCollectionResult',
    'GetNetworkFirewallPolicySecurityRulesSecurityRuleSummaryCollectionItemResult',
    'GetNetworkFirewallPolicySecurityRulesSecurityRuleSummaryCollectionItemConditionResult',
    'GetNetworkFirewallPolicySecurityRulesSecurityRuleSummaryCollectionItemPositionResult',
    'GetNetworkFirewallPolicyServiceListsFilterResult',
    'GetNetworkFirewallPolicyServiceListsServiceListSummaryCollectionResult',
    'GetNetworkFirewallPolicyServiceListsServiceListSummaryCollectionItemResult',
    'GetNetworkFirewallPolicyServicePortRangeResult',
    'GetNetworkFirewallPolicyServicesFilterResult',
    'GetNetworkFirewallPolicyServicesServiceSummaryCollectionResult',
    'GetNetworkFirewallPolicyServicesServiceSummaryCollectionItemResult',
    'GetNetworkFirewallPolicyServicesServiceSummaryCollectionItemPortRangeResult',
    'GetNetworkFirewallPolicyUrlListUrlResult',
    'GetNetworkFirewallPolicyUrlListsFilterResult',
    'GetNetworkFirewallPolicyUrlListsUrlListSummaryCollectionResult',
    'GetNetworkFirewallPolicyUrlListsUrlListSummaryCollectionItemResult',
    'GetNetworkFirewallPolicyUrlListsUrlListSummaryCollectionItemUrlResult',
    'GetNetworkFirewallsFilterResult',
    'GetNetworkFirewallsNetworkFirewallCollectionResult',
    'GetNetworkFirewallsNetworkFirewallCollectionItemResult',
]

@pulumi.output_type
class NetworkFirewallPolicyDecryptionRuleCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationAddresses":
            suggest = "destination_addresses"
        elif key == "sourceAddresses":
            suggest = "source_addresses"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkFirewallPolicyDecryptionRuleCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkFirewallPolicyDecryptionRuleCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkFirewallPolicyDecryptionRuleCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_addresses: Optional[Sequence[str]] = None,
                 source_addresses: Optional[Sequence[str]] = None):
        if destination_addresses is not None:
            pulumi.set(__self__, "destination_addresses", destination_addresses)
        if source_addresses is not None:
            pulumi.set(__self__, "source_addresses", source_addresses)

    @property
    @pulumi.getter(name="destinationAddresses")
    def destination_addresses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "destination_addresses")

    @property
    @pulumi.getter(name="sourceAddresses")
    def source_addresses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "source_addresses")


@pulumi.output_type
class NetworkFirewallPolicyDecryptionRulePosition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "afterRule":
            suggest = "after_rule"
        elif key == "beforeRule":
            suggest = "before_rule"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkFirewallPolicyDecryptionRulePosition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkFirewallPolicyDecryptionRulePosition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkFirewallPolicyDecryptionRulePosition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 after_rule: Optional[str] = None,
                 before_rule: Optional[str] = None):
        if after_rule is not None:
            pulumi.set(__self__, "after_rule", after_rule)
        if before_rule is not None:
            pulumi.set(__self__, "before_rule", before_rule)

    @property
    @pulumi.getter(name="afterRule")
    def after_rule(self) -> Optional[str]:
        return pulumi.get(self, "after_rule")

    @property
    @pulumi.getter(name="beforeRule")
    def before_rule(self) -> Optional[str]:
        return pulumi.get(self, "before_rule")


@pulumi.output_type
class NetworkFirewallPolicySecurityRuleCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationAddresses":
            suggest = "destination_addresses"
        elif key == "sourceAddresses":
            suggest = "source_addresses"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkFirewallPolicySecurityRuleCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkFirewallPolicySecurityRuleCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkFirewallPolicySecurityRuleCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 applications: Sequence[str],
                 destination_addresses: Sequence[str],
                 services: Sequence[str],
                 source_addresses: Sequence[str],
                 urls: Sequence[str]):
        pulumi.set(__self__, "applications", applications)
        pulumi.set(__self__, "destination_addresses", destination_addresses)
        pulumi.set(__self__, "services", services)
        pulumi.set(__self__, "source_addresses", source_addresses)
        pulumi.set(__self__, "urls", urls)

    @property
    @pulumi.getter
    def applications(self) -> Sequence[str]:
        return pulumi.get(self, "applications")

    @property
    @pulumi.getter(name="destinationAddresses")
    def destination_addresses(self) -> Sequence[str]:
        return pulumi.get(self, "destination_addresses")

    @property
    @pulumi.getter
    def services(self) -> Sequence[str]:
        return pulumi.get(self, "services")

    @property
    @pulumi.getter(name="sourceAddresses")
    def source_addresses(self) -> Sequence[str]:
        return pulumi.get(self, "source_addresses")

    @property
    @pulumi.getter
    def urls(self) -> Sequence[str]:
        return pulumi.get(self, "urls")


@pulumi.output_type
class NetworkFirewallPolicySecurityRulePosition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "afterRule":
            suggest = "after_rule"
        elif key == "beforeRule":
            suggest = "before_rule"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkFirewallPolicySecurityRulePosition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkFirewallPolicySecurityRulePosition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkFirewallPolicySecurityRulePosition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 after_rule: Optional[str] = None,
                 before_rule: Optional[str] = None):
        if after_rule is not None:
            pulumi.set(__self__, "after_rule", after_rule)
        if before_rule is not None:
            pulumi.set(__self__, "before_rule", before_rule)

    @property
    @pulumi.getter(name="afterRule")
    def after_rule(self) -> Optional[str]:
        return pulumi.get(self, "after_rule")

    @property
    @pulumi.getter(name="beforeRule")
    def before_rule(self) -> Optional[str]:
        return pulumi.get(self, "before_rule")


@pulumi.output_type
class NetworkFirewallPolicyServicePortRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "minimumPort":
            suggest = "minimum_port"
        elif key == "maximumPort":
            suggest = "maximum_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkFirewallPolicyServicePortRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkFirewallPolicyServicePortRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkFirewallPolicyServicePortRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 minimum_port: int,
                 maximum_port: Optional[int] = None):
        pulumi.set(__self__, "minimum_port", minimum_port)
        if maximum_port is not None:
            pulumi.set(__self__, "maximum_port", maximum_port)

    @property
    @pulumi.getter(name="minimumPort")
    def minimum_port(self) -> int:
        return pulumi.get(self, "minimum_port")

    @property
    @pulumi.getter(name="maximumPort")
    def maximum_port(self) -> Optional[int]:
        return pulumi.get(self, "maximum_port")


@pulumi.output_type
class NetworkFirewallPolicyUrlListUrl(dict):
    def __init__(__self__, *,
                 pattern: str,
                 type: str):
        pulumi.set(__self__, "pattern", pattern)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def pattern(self) -> str:
        return pulumi.get(self, "pattern")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetNetworkFirewallPoliciesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetNetworkFirewallPoliciesNetworkFirewallPolicySummaryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetNetworkFirewallPoliciesNetworkFirewallPolicySummaryCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetNetworkFirewallPoliciesNetworkFirewallPolicySummaryCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetNetworkFirewallPoliciesNetworkFirewallPolicySummaryCollectionItemResult(dict):
    def __init__(__self__, *,
                 attached_network_firewall_count: Optional[int] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if attached_network_firewall_count is not None:
            pulumi.set(__self__, "attached_network_firewall_count", attached_network_firewall_count)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="attachedNetworkFirewallCount")
    def attached_network_firewall_count(self) -> Optional[int]:
        return pulumi.get(self, "attached_network_firewall_count")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetNetworkFirewallPolicyAddressListsAddressListSummaryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetNetworkFirewallPolicyAddressListsAddressListSummaryCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetNetworkFirewallPolicyAddressListsAddressListSummaryCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetNetworkFirewallPolicyAddressListsAddressListSummaryCollectionItemResult(dict):
    def __init__(__self__, *,
                 addresses: Sequence[str],
                 name: str,
                 network_firewall_policy_id: str,
                 type: str,
                 parent_resource_id: Optional[str] = None,
                 total_addresses: Optional[int] = None):
        pulumi.set(__self__, "addresses", addresses)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network_firewall_policy_id", network_firewall_policy_id)
        pulumi.set(__self__, "type", type)
        if parent_resource_id is not None:
            pulumi.set(__self__, "parent_resource_id", parent_resource_id)
        if total_addresses is not None:
            pulumi.set(__self__, "total_addresses", total_addresses)

    @property
    @pulumi.getter
    def addresses(self) -> Sequence[str]:
        return pulumi.get(self, "addresses")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkFirewallPolicyId")
    def network_firewall_policy_id(self) -> str:
        return pulumi.get(self, "network_firewall_policy_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="parentResourceId")
    def parent_resource_id(self) -> Optional[str]:
        return pulumi.get(self, "parent_resource_id")

    @property
    @pulumi.getter(name="totalAddresses")
    def total_addresses(self) -> Optional[int]:
        return pulumi.get(self, "total_addresses")


@pulumi.output_type
class GetNetworkFirewallPolicyAddressListsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetNetworkFirewallPolicyApplicationGroupsApplicationGroupSummaryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetNetworkFirewallPolicyApplicationGroupsApplicationGroupSummaryCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetNetworkFirewallPolicyApplicationGroupsApplicationGroupSummaryCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetNetworkFirewallPolicyApplicationGroupsApplicationGroupSummaryCollectionItemResult(dict):
    def __init__(__self__, *,
                 apps: Sequence[str],
                 name: str,
                 network_firewall_policy_id: str,
                 parent_resource_id: Optional[str] = None,
                 total_apps: Optional[int] = None):
        pulumi.set(__self__, "apps", apps)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network_firewall_policy_id", network_firewall_policy_id)
        if parent_resource_id is not None:
            pulumi.set(__self__, "parent_resource_id", parent_resource_id)
        if total_apps is not None:
            pulumi.set(__self__, "total_apps", total_apps)

    @property
    @pulumi.getter
    def apps(self) -> Sequence[str]:
        return pulumi.get(self, "apps")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkFirewallPolicyId")
    def network_firewall_policy_id(self) -> str:
        return pulumi.get(self, "network_firewall_policy_id")

    @property
    @pulumi.getter(name="parentResourceId")
    def parent_resource_id(self) -> Optional[str]:
        return pulumi.get(self, "parent_resource_id")

    @property
    @pulumi.getter(name="totalApps")
    def total_apps(self) -> Optional[int]:
        return pulumi.get(self, "total_apps")


@pulumi.output_type
class GetNetworkFirewallPolicyApplicationGroupsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetNetworkFirewallPolicyApplicationsApplicationSummaryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetNetworkFirewallPolicyApplicationsApplicationSummaryCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetNetworkFirewallPolicyApplicationsApplicationSummaryCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetNetworkFirewallPolicyApplicationsApplicationSummaryCollectionItemResult(dict):
    def __init__(__self__, *,
                 icmp_type: int,
                 name: str,
                 network_firewall_policy_id: str,
                 type: str,
                 icmp_code: Optional[int] = None,
                 parent_resource_id: Optional[str] = None):
        pulumi.set(__self__, "icmp_type", icmp_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network_firewall_policy_id", network_firewall_policy_id)
        pulumi.set(__self__, "type", type)
        if icmp_code is not None:
            pulumi.set(__self__, "icmp_code", icmp_code)
        if parent_resource_id is not None:
            pulumi.set(__self__, "parent_resource_id", parent_resource_id)

    @property
    @pulumi.getter(name="icmpType")
    def icmp_type(self) -> int:
        return pulumi.get(self, "icmp_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkFirewallPolicyId")
    def network_firewall_policy_id(self) -> str:
        return pulumi.get(self, "network_firewall_policy_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="icmpCode")
    def icmp_code(self) -> Optional[int]:
        return pulumi.get(self, "icmp_code")

    @property
    @pulumi.getter(name="parentResourceId")
    def parent_resource_id(self) -> Optional[str]:
        return pulumi.get(self, "parent_resource_id")


@pulumi.output_type
class GetNetworkFirewallPolicyApplicationsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetNetworkFirewallPolicyDecryptionProfilesDecryptionProfileSummaryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetNetworkFirewallPolicyDecryptionProfilesDecryptionProfileSummaryCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetNetworkFirewallPolicyDecryptionProfilesDecryptionProfileSummaryCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetNetworkFirewallPolicyDecryptionProfilesDecryptionProfileSummaryCollectionItemResult(dict):
    def __init__(__self__, *,
                 name: str,
                 network_firewall_policy_id: str,
                 type: str,
                 are_certificate_extensions_restricted: Optional[bool] = None,
                 is_auto_include_alt_name: Optional[bool] = None,
                 is_expired_certificate_blocked: Optional[bool] = None,
                 is_out_of_capacity_blocked: Optional[bool] = None,
                 is_revocation_status_timeout_blocked: Optional[bool] = None,
                 is_unknown_revocation_status_blocked: Optional[bool] = None,
                 is_unsupported_cipher_blocked: Optional[bool] = None,
                 is_unsupported_version_blocked: Optional[bool] = None,
                 is_untrusted_issuer_blocked: Optional[bool] = None,
                 parent_resource_id: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network_firewall_policy_id", network_firewall_policy_id)
        pulumi.set(__self__, "type", type)
        if are_certificate_extensions_restricted is not None:
            pulumi.set(__self__, "are_certificate_extensions_restricted", are_certificate_extensions_restricted)
        if is_auto_include_alt_name is not None:
            pulumi.set(__self__, "is_auto_include_alt_name", is_auto_include_alt_name)
        if is_expired_certificate_blocked is not None:
            pulumi.set(__self__, "is_expired_certificate_blocked", is_expired_certificate_blocked)
        if is_out_of_capacity_blocked is not None:
            pulumi.set(__self__, "is_out_of_capacity_blocked", is_out_of_capacity_blocked)
        if is_revocation_status_timeout_blocked is not None:
            pulumi.set(__self__, "is_revocation_status_timeout_blocked", is_revocation_status_timeout_blocked)
        if is_unknown_revocation_status_blocked is not None:
            pulumi.set(__self__, "is_unknown_revocation_status_blocked", is_unknown_revocation_status_blocked)
        if is_unsupported_cipher_blocked is not None:
            pulumi.set(__self__, "is_unsupported_cipher_blocked", is_unsupported_cipher_blocked)
        if is_unsupported_version_blocked is not None:
            pulumi.set(__self__, "is_unsupported_version_blocked", is_unsupported_version_blocked)
        if is_untrusted_issuer_blocked is not None:
            pulumi.set(__self__, "is_untrusted_issuer_blocked", is_untrusted_issuer_blocked)
        if parent_resource_id is not None:
            pulumi.set(__self__, "parent_resource_id", parent_resource_id)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkFirewallPolicyId")
    def network_firewall_policy_id(self) -> str:
        return pulumi.get(self, "network_firewall_policy_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="areCertificateExtensionsRestricted")
    def are_certificate_extensions_restricted(self) -> Optional[bool]:
        return pulumi.get(self, "are_certificate_extensions_restricted")

    @property
    @pulumi.getter(name="isAutoIncludeAltName")
    def is_auto_include_alt_name(self) -> Optional[bool]:
        return pulumi.get(self, "is_auto_include_alt_name")

    @property
    @pulumi.getter(name="isExpiredCertificateBlocked")
    def is_expired_certificate_blocked(self) -> Optional[bool]:
        return pulumi.get(self, "is_expired_certificate_blocked")

    @property
    @pulumi.getter(name="isOutOfCapacityBlocked")
    def is_out_of_capacity_blocked(self) -> Optional[bool]:
        return pulumi.get(self, "is_out_of_capacity_blocked")

    @property
    @pulumi.getter(name="isRevocationStatusTimeoutBlocked")
    def is_revocation_status_timeout_blocked(self) -> Optional[bool]:
        return pulumi.get(self, "is_revocation_status_timeout_blocked")

    @property
    @pulumi.getter(name="isUnknownRevocationStatusBlocked")
    def is_unknown_revocation_status_blocked(self) -> Optional[bool]:
        return pulumi.get(self, "is_unknown_revocation_status_blocked")

    @property
    @pulumi.getter(name="isUnsupportedCipherBlocked")
    def is_unsupported_cipher_blocked(self) -> Optional[bool]:
        return pulumi.get(self, "is_unsupported_cipher_blocked")

    @property
    @pulumi.getter(name="isUnsupportedVersionBlocked")
    def is_unsupported_version_blocked(self) -> Optional[bool]:
        return pulumi.get(self, "is_unsupported_version_blocked")

    @property
    @pulumi.getter(name="isUntrustedIssuerBlocked")
    def is_untrusted_issuer_blocked(self) -> Optional[bool]:
        return pulumi.get(self, "is_untrusted_issuer_blocked")

    @property
    @pulumi.getter(name="parentResourceId")
    def parent_resource_id(self) -> Optional[str]:
        return pulumi.get(self, "parent_resource_id")


@pulumi.output_type
class GetNetworkFirewallPolicyDecryptionProfilesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetNetworkFirewallPolicyDecryptionRuleConditionResult(dict):
    def __init__(__self__, *,
                 destination_addresses: Optional[Sequence[str]] = None,
                 source_addresses: Optional[Sequence[str]] = None):
        if destination_addresses is not None:
            pulumi.set(__self__, "destination_addresses", destination_addresses)
        if source_addresses is not None:
            pulumi.set(__self__, "source_addresses", source_addresses)

    @property
    @pulumi.getter(name="destinationAddresses")
    def destination_addresses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "destination_addresses")

    @property
    @pulumi.getter(name="sourceAddresses")
    def source_addresses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "source_addresses")


@pulumi.output_type
class GetNetworkFirewallPolicyDecryptionRulePositionResult(dict):
    def __init__(__self__, *,
                 after_rule: Optional[str] = None,
                 before_rule: Optional[str] = None):
        if after_rule is not None:
            pulumi.set(__self__, "after_rule", after_rule)
        if before_rule is not None:
            pulumi.set(__self__, "before_rule", before_rule)

    @property
    @pulumi.getter(name="afterRule")
    def after_rule(self) -> Optional[str]:
        return pulumi.get(self, "after_rule")

    @property
    @pulumi.getter(name="beforeRule")
    def before_rule(self) -> Optional[str]:
        return pulumi.get(self, "before_rule")


@pulumi.output_type
class GetNetworkFirewallPolicyDecryptionRulesDecryptionRuleSummaryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetNetworkFirewallPolicyDecryptionRulesDecryptionRuleSummaryCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetNetworkFirewallPolicyDecryptionRulesDecryptionRuleSummaryCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetNetworkFirewallPolicyDecryptionRulesDecryptionRuleSummaryCollectionItemResult(dict):
    def __init__(__self__, *,
                 action: str,
                 condition: 'outputs.GetNetworkFirewallPolicyDecryptionRulesDecryptionRuleSummaryCollectionItemConditionResult',
                 name: str,
                 network_firewall_policy_id: str,
                 decryption_profile: Optional[str] = None,
                 parent_resource_id: Optional[str] = None,
                 position: Optional['outputs.GetNetworkFirewallPolicyDecryptionRulesDecryptionRuleSummaryCollectionItemPositionResult'] = None,
                 priority_order: Optional[str] = None,
                 secret: Optional[str] = None):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network_firewall_policy_id", network_firewall_policy_id)
        if decryption_profile is not None:
            pulumi.set(__self__, "decryption_profile", decryption_profile)
        if parent_resource_id is not None:
            pulumi.set(__self__, "parent_resource_id", parent_resource_id)
        if position is not None:
            pulumi.set(__self__, "position", position)
        if priority_order is not None:
            pulumi.set(__self__, "priority_order", priority_order)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def condition(self) -> 'outputs.GetNetworkFirewallPolicyDecryptionRulesDecryptionRuleSummaryCollectionItemConditionResult':
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkFirewallPolicyId")
    def network_firewall_policy_id(self) -> str:
        return pulumi.get(self, "network_firewall_policy_id")

    @property
    @pulumi.getter(name="decryptionProfile")
    def decryption_profile(self) -> Optional[str]:
        return pulumi.get(self, "decryption_profile")

    @property
    @pulumi.getter(name="parentResourceId")
    def parent_resource_id(self) -> Optional[str]:
        return pulumi.get(self, "parent_resource_id")

    @property
    @pulumi.getter
    def position(self) -> Optional['outputs.GetNetworkFirewallPolicyDecryptionRulesDecryptionRuleSummaryCollectionItemPositionResult']:
        return pulumi.get(self, "position")

    @property
    @pulumi.getter(name="priorityOrder")
    def priority_order(self) -> Optional[str]:
        return pulumi.get(self, "priority_order")

    @property
    @pulumi.getter
    def secret(self) -> Optional[str]:
        return pulumi.get(self, "secret")


@pulumi.output_type
class GetNetworkFirewallPolicyDecryptionRulesDecryptionRuleSummaryCollectionItemConditionResult(dict):
    def __init__(__self__, *,
                 destination_addresses: Optional[Sequence[str]] = None,
                 source_addresses: Optional[Sequence[str]] = None):
        if destination_addresses is not None:
            pulumi.set(__self__, "destination_addresses", destination_addresses)
        if source_addresses is not None:
            pulumi.set(__self__, "source_addresses", source_addresses)

    @property
    @pulumi.getter(name="destinationAddresses")
    def destination_addresses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "destination_addresses")

    @property
    @pulumi.getter(name="sourceAddresses")
    def source_addresses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "source_addresses")


@pulumi.output_type
class GetNetworkFirewallPolicyDecryptionRulesDecryptionRuleSummaryCollectionItemPositionResult(dict):
    def __init__(__self__, *,
                 after_rule: Optional[str] = None,
                 before_rule: Optional[str] = None):
        if after_rule is not None:
            pulumi.set(__self__, "after_rule", after_rule)
        if before_rule is not None:
            pulumi.set(__self__, "before_rule", before_rule)

    @property
    @pulumi.getter(name="afterRule")
    def after_rule(self) -> Optional[str]:
        return pulumi.get(self, "after_rule")

    @property
    @pulumi.getter(name="beforeRule")
    def before_rule(self) -> Optional[str]:
        return pulumi.get(self, "before_rule")


@pulumi.output_type
class GetNetworkFirewallPolicyDecryptionRulesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetNetworkFirewallPolicyMappedSecretsMappedSecretSummaryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetNetworkFirewallPolicyMappedSecretsMappedSecretSummaryCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetNetworkFirewallPolicyMappedSecretsMappedSecretSummaryCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetNetworkFirewallPolicyMappedSecretsMappedSecretSummaryCollectionItemResult(dict):
    def __init__(__self__, *,
                 name: str,
                 network_firewall_policy_id: str,
                 source: str,
                 type: str,
                 vault_secret_id: str,
                 version_number: int,
                 parent_resource_id: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network_firewall_policy_id", network_firewall_policy_id)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vault_secret_id", vault_secret_id)
        pulumi.set(__self__, "version_number", version_number)
        if parent_resource_id is not None:
            pulumi.set(__self__, "parent_resource_id", parent_resource_id)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkFirewallPolicyId")
    def network_firewall_policy_id(self) -> str:
        return pulumi.get(self, "network_firewall_policy_id")

    @property
    @pulumi.getter
    def source(self) -> str:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vaultSecretId")
    def vault_secret_id(self) -> str:
        return pulumi.get(self, "vault_secret_id")

    @property
    @pulumi.getter(name="versionNumber")
    def version_number(self) -> int:
        return pulumi.get(self, "version_number")

    @property
    @pulumi.getter(name="parentResourceId")
    def parent_resource_id(self) -> Optional[str]:
        return pulumi.get(self, "parent_resource_id")


@pulumi.output_type
class GetNetworkFirewallPolicySecurityRuleConditionResult(dict):
    def __init__(__self__, *,
                 applications: Optional[Sequence[str]] = None,
                 destination_addresses: Optional[Sequence[str]] = None,
                 services: Optional[Sequence[str]] = None,
                 source_addresses: Optional[Sequence[str]] = None,
                 urls: Optional[Sequence[str]] = None):
        if applications is not None:
            pulumi.set(__self__, "applications", applications)
        if destination_addresses is not None:
            pulumi.set(__self__, "destination_addresses", destination_addresses)
        if services is not None:
            pulumi.set(__self__, "services", services)
        if source_addresses is not None:
            pulumi.set(__self__, "source_addresses", source_addresses)
        if urls is not None:
            pulumi.set(__self__, "urls", urls)

    @property
    @pulumi.getter
    def applications(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "applications")

    @property
    @pulumi.getter(name="destinationAddresses")
    def destination_addresses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "destination_addresses")

    @property
    @pulumi.getter
    def services(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "services")

    @property
    @pulumi.getter(name="sourceAddresses")
    def source_addresses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "source_addresses")

    @property
    @pulumi.getter
    def urls(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "urls")


@pulumi.output_type
class GetNetworkFirewallPolicySecurityRulePositionResult(dict):
    def __init__(__self__, *,
                 after_rule: Optional[str] = None,
                 before_rule: Optional[str] = None):
        if after_rule is not None:
            pulumi.set(__self__, "after_rule", after_rule)
        if before_rule is not None:
            pulumi.set(__self__, "before_rule", before_rule)

    @property
    @pulumi.getter(name="afterRule")
    def after_rule(self) -> Optional[str]:
        return pulumi.get(self, "after_rule")

    @property
    @pulumi.getter(name="beforeRule")
    def before_rule(self) -> Optional[str]:
        return pulumi.get(self, "before_rule")


@pulumi.output_type
class GetNetworkFirewallPolicySecurityRulesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetNetworkFirewallPolicySecurityRulesSecurityRuleSummaryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetNetworkFirewallPolicySecurityRulesSecurityRuleSummaryCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetNetworkFirewallPolicySecurityRulesSecurityRuleSummaryCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetNetworkFirewallPolicySecurityRulesSecurityRuleSummaryCollectionItemResult(dict):
    def __init__(__self__, *,
                 action: str,
                 condition: 'outputs.GetNetworkFirewallPolicySecurityRulesSecurityRuleSummaryCollectionItemConditionResult',
                 name: str,
                 network_firewall_policy_id: str,
                 inspection: Optional[str] = None,
                 parent_resource_id: Optional[str] = None,
                 positions: Optional[Sequence['outputs.GetNetworkFirewallPolicySecurityRulesSecurityRuleSummaryCollectionItemPositionResult']] = None,
                 priority_order: Optional[str] = None):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network_firewall_policy_id", network_firewall_policy_id)
        if inspection is not None:
            pulumi.set(__self__, "inspection", inspection)
        if parent_resource_id is not None:
            pulumi.set(__self__, "parent_resource_id", parent_resource_id)
        if positions is not None:
            pulumi.set(__self__, "positions", positions)
        if priority_order is not None:
            pulumi.set(__self__, "priority_order", priority_order)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def condition(self) -> 'outputs.GetNetworkFirewallPolicySecurityRulesSecurityRuleSummaryCollectionItemConditionResult':
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkFirewallPolicyId")
    def network_firewall_policy_id(self) -> str:
        return pulumi.get(self, "network_firewall_policy_id")

    @property
    @pulumi.getter
    def inspection(self) -> Optional[str]:
        return pulumi.get(self, "inspection")

    @property
    @pulumi.getter(name="parentResourceId")
    def parent_resource_id(self) -> Optional[str]:
        return pulumi.get(self, "parent_resource_id")

    @property
    @pulumi.getter
    def positions(self) -> Optional[Sequence['outputs.GetNetworkFirewallPolicySecurityRulesSecurityRuleSummaryCollectionItemPositionResult']]:
        return pulumi.get(self, "positions")

    @property
    @pulumi.getter(name="priorityOrder")
    def priority_order(self) -> Optional[str]:
        return pulumi.get(self, "priority_order")


@pulumi.output_type
class GetNetworkFirewallPolicySecurityRulesSecurityRuleSummaryCollectionItemConditionResult(dict):
    def __init__(__self__, *,
                 applications: Sequence[str],
                 destination_addresses: Sequence[str],
                 services: Sequence[str],
                 source_addresses: Sequence[str],
                 urls: Sequence[str]):
        pulumi.set(__self__, "applications", applications)
        pulumi.set(__self__, "destination_addresses", destination_addresses)
        pulumi.set(__self__, "services", services)
        pulumi.set(__self__, "source_addresses", source_addresses)
        pulumi.set(__self__, "urls", urls)

    @property
    @pulumi.getter
    def applications(self) -> Sequence[str]:
        return pulumi.get(self, "applications")

    @property
    @pulumi.getter(name="destinationAddresses")
    def destination_addresses(self) -> Sequence[str]:
        return pulumi.get(self, "destination_addresses")

    @property
    @pulumi.getter
    def services(self) -> Sequence[str]:
        return pulumi.get(self, "services")

    @property
    @pulumi.getter(name="sourceAddresses")
    def source_addresses(self) -> Sequence[str]:
        return pulumi.get(self, "source_addresses")

    @property
    @pulumi.getter
    def urls(self) -> Sequence[str]:
        return pulumi.get(self, "urls")


@pulumi.output_type
class GetNetworkFirewallPolicySecurityRulesSecurityRuleSummaryCollectionItemPositionResult(dict):
    def __init__(__self__, *,
                 after_rule: Optional[str] = None,
                 before_rule: Optional[str] = None):
        if after_rule is not None:
            pulumi.set(__self__, "after_rule", after_rule)
        if before_rule is not None:
            pulumi.set(__self__, "before_rule", before_rule)

    @property
    @pulumi.getter(name="afterRule")
    def after_rule(self) -> Optional[str]:
        return pulumi.get(self, "after_rule")

    @property
    @pulumi.getter(name="beforeRule")
    def before_rule(self) -> Optional[str]:
        return pulumi.get(self, "before_rule")


@pulumi.output_type
class GetNetworkFirewallPolicyServiceListsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetNetworkFirewallPolicyServiceListsServiceListSummaryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetNetworkFirewallPolicyServiceListsServiceListSummaryCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetNetworkFirewallPolicyServiceListsServiceListSummaryCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetNetworkFirewallPolicyServiceListsServiceListSummaryCollectionItemResult(dict):
    def __init__(__self__, *,
                 name: str,
                 network_firewall_policy_id: str,
                 services: Sequence[str],
                 parent_resource_id: Optional[str] = None,
                 total_services: Optional[int] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network_firewall_policy_id", network_firewall_policy_id)
        pulumi.set(__self__, "services", services)
        if parent_resource_id is not None:
            pulumi.set(__self__, "parent_resource_id", parent_resource_id)
        if total_services is not None:
            pulumi.set(__self__, "total_services", total_services)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkFirewallPolicyId")
    def network_firewall_policy_id(self) -> str:
        return pulumi.get(self, "network_firewall_policy_id")

    @property
    @pulumi.getter
    def services(self) -> Sequence[str]:
        return pulumi.get(self, "services")

    @property
    @pulumi.getter(name="parentResourceId")
    def parent_resource_id(self) -> Optional[str]:
        return pulumi.get(self, "parent_resource_id")

    @property
    @pulumi.getter(name="totalServices")
    def total_services(self) -> Optional[int]:
        return pulumi.get(self, "total_services")


@pulumi.output_type
class GetNetworkFirewallPolicyServicePortRangeResult(dict):
    def __init__(__self__, *,
                 maximum_port: Optional[int] = None,
                 minimum_port: Optional[int] = None):
        if maximum_port is not None:
            pulumi.set(__self__, "maximum_port", maximum_port)
        if minimum_port is not None:
            pulumi.set(__self__, "minimum_port", minimum_port)

    @property
    @pulumi.getter(name="maximumPort")
    def maximum_port(self) -> Optional[int]:
        return pulumi.get(self, "maximum_port")

    @property
    @pulumi.getter(name="minimumPort")
    def minimum_port(self) -> Optional[int]:
        return pulumi.get(self, "minimum_port")


@pulumi.output_type
class GetNetworkFirewallPolicyServicesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetNetworkFirewallPolicyServicesServiceSummaryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetNetworkFirewallPolicyServicesServiceSummaryCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetNetworkFirewallPolicyServicesServiceSummaryCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetNetworkFirewallPolicyServicesServiceSummaryCollectionItemResult(dict):
    def __init__(__self__, *,
                 name: str,
                 network_firewall_policy_id: str,
                 port_ranges: Sequence['outputs.GetNetworkFirewallPolicyServicesServiceSummaryCollectionItemPortRangeResult'],
                 type: str,
                 parent_resource_id: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network_firewall_policy_id", network_firewall_policy_id)
        pulumi.set(__self__, "port_ranges", port_ranges)
        pulumi.set(__self__, "type", type)
        if parent_resource_id is not None:
            pulumi.set(__self__, "parent_resource_id", parent_resource_id)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkFirewallPolicyId")
    def network_firewall_policy_id(self) -> str:
        return pulumi.get(self, "network_firewall_policy_id")

    @property
    @pulumi.getter(name="portRanges")
    def port_ranges(self) -> Sequence['outputs.GetNetworkFirewallPolicyServicesServiceSummaryCollectionItemPortRangeResult']:
        return pulumi.get(self, "port_ranges")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="parentResourceId")
    def parent_resource_id(self) -> Optional[str]:
        return pulumi.get(self, "parent_resource_id")


@pulumi.output_type
class GetNetworkFirewallPolicyServicesServiceSummaryCollectionItemPortRangeResult(dict):
    def __init__(__self__, *,
                 minimum_port: int,
                 maximum_port: Optional[int] = None):
        pulumi.set(__self__, "minimum_port", minimum_port)
        if maximum_port is not None:
            pulumi.set(__self__, "maximum_port", maximum_port)

    @property
    @pulumi.getter(name="minimumPort")
    def minimum_port(self) -> int:
        return pulumi.get(self, "minimum_port")

    @property
    @pulumi.getter(name="maximumPort")
    def maximum_port(self) -> Optional[int]:
        return pulumi.get(self, "maximum_port")


@pulumi.output_type
class GetNetworkFirewallPolicyUrlListUrlResult(dict):
    def __init__(__self__, *,
                 pattern: Optional[str] = None,
                 type: Optional[str] = None):
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[str]:
        return pulumi.get(self, "pattern")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetNetworkFirewallPolicyUrlListsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetNetworkFirewallPolicyUrlListsUrlListSummaryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetNetworkFirewallPolicyUrlListsUrlListSummaryCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetNetworkFirewallPolicyUrlListsUrlListSummaryCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetNetworkFirewallPolicyUrlListsUrlListSummaryCollectionItemResult(dict):
    def __init__(__self__, *,
                 name: str,
                 network_firewall_policy_id: str,
                 urls: Sequence['outputs.GetNetworkFirewallPolicyUrlListsUrlListSummaryCollectionItemUrlResult'],
                 parent_resource_id: Optional[str] = None,
                 total_urls: Optional[int] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network_firewall_policy_id", network_firewall_policy_id)
        pulumi.set(__self__, "urls", urls)
        if parent_resource_id is not None:
            pulumi.set(__self__, "parent_resource_id", parent_resource_id)
        if total_urls is not None:
            pulumi.set(__self__, "total_urls", total_urls)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkFirewallPolicyId")
    def network_firewall_policy_id(self) -> str:
        return pulumi.get(self, "network_firewall_policy_id")

    @property
    @pulumi.getter
    def urls(self) -> Sequence['outputs.GetNetworkFirewallPolicyUrlListsUrlListSummaryCollectionItemUrlResult']:
        return pulumi.get(self, "urls")

    @property
    @pulumi.getter(name="parentResourceId")
    def parent_resource_id(self) -> Optional[str]:
        return pulumi.get(self, "parent_resource_id")

    @property
    @pulumi.getter(name="totalUrls")
    def total_urls(self) -> Optional[int]:
        return pulumi.get(self, "total_urls")


@pulumi.output_type
class GetNetworkFirewallPolicyUrlListsUrlListSummaryCollectionItemUrlResult(dict):
    def __init__(__self__, *,
                 pattern: str,
                 type: str):
        pulumi.set(__self__, "pattern", pattern)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def pattern(self) -> str:
        return pulumi.get(self, "pattern")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetNetworkFirewallsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetNetworkFirewallsNetworkFirewallCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetNetworkFirewallsNetworkFirewallCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetNetworkFirewallsNetworkFirewallCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetNetworkFirewallsNetworkFirewallCollectionItemResult(dict):
    def __init__(__self__, *,
                 availability_domain: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 ipv4address: Optional[str] = None,
                 ipv6address: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 network_firewall_policy_id: Optional[str] = None,
                 network_security_group_ids: Optional[Sequence[str]] = None,
                 state: Optional[str] = None,
                 subnet_id: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ipv4address is not None:
            pulumi.set(__self__, "ipv4address", ipv4address)
        if ipv6address is not None:
            pulumi.set(__self__, "ipv6address", ipv6address)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if network_firewall_policy_id is not None:
            pulumi.set(__self__, "network_firewall_policy_id", network_firewall_policy_id)
        if network_security_group_ids is not None:
            pulumi.set(__self__, "network_security_group_ids", network_security_group_ids)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ipv4address(self) -> Optional[str]:
        return pulumi.get(self, "ipv4address")

    @property
    @pulumi.getter
    def ipv6address(self) -> Optional[str]:
        return pulumi.get(self, "ipv6address")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="networkFirewallPolicyId")
    def network_firewall_policy_id(self) -> Optional[str]:
        return pulumi.get(self, "network_firewall_policy_id")

    @property
    @pulumi.getter(name="networkSecurityGroupIds")
    def network_security_group_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "network_security_group_ids")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


