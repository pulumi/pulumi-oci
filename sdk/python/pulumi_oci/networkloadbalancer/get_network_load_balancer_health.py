# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetNetworkLoadBalancerHealthResult',
    'AwaitableGetNetworkLoadBalancerHealthResult',
    'get_network_load_balancer_health',
    'get_network_load_balancer_health_output',
]

@pulumi.output_type
class GetNetworkLoadBalancerHealthResult:
    """
    A collection of values returned by getNetworkLoadBalancerHealth.
    """
    def __init__(__self__, critical_state_backend_set_names=None, id=None, network_load_balancer_id=None, status=None, total_backend_set_count=None, unknown_state_backend_set_names=None, warning_state_backend_set_names=None):
        if critical_state_backend_set_names and not isinstance(critical_state_backend_set_names, list):
            raise TypeError("Expected argument 'critical_state_backend_set_names' to be a list")
        pulumi.set(__self__, "critical_state_backend_set_names", critical_state_backend_set_names)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if network_load_balancer_id and not isinstance(network_load_balancer_id, str):
            raise TypeError("Expected argument 'network_load_balancer_id' to be a str")
        pulumi.set(__self__, "network_load_balancer_id", network_load_balancer_id)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if total_backend_set_count and not isinstance(total_backend_set_count, int):
            raise TypeError("Expected argument 'total_backend_set_count' to be a int")
        pulumi.set(__self__, "total_backend_set_count", total_backend_set_count)
        if unknown_state_backend_set_names and not isinstance(unknown_state_backend_set_names, list):
            raise TypeError("Expected argument 'unknown_state_backend_set_names' to be a list")
        pulumi.set(__self__, "unknown_state_backend_set_names", unknown_state_backend_set_names)
        if warning_state_backend_set_names and not isinstance(warning_state_backend_set_names, list):
            raise TypeError("Expected argument 'warning_state_backend_set_names' to be a list")
        pulumi.set(__self__, "warning_state_backend_set_names", warning_state_backend_set_names)

    @property
    @pulumi.getter(name="criticalStateBackendSetNames")
    def critical_state_backend_set_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "critical_state_backend_set_names")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="networkLoadBalancerId")
    def network_load_balancer_id(self) -> str:
        return pulumi.get(self, "network_load_balancer_id")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="totalBackendSetCount")
    def total_backend_set_count(self) -> Optional[int]:
        return pulumi.get(self, "total_backend_set_count")

    @property
    @pulumi.getter(name="unknownStateBackendSetNames")
    def unknown_state_backend_set_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "unknown_state_backend_set_names")

    @property
    @pulumi.getter(name="warningStateBackendSetNames")
    def warning_state_backend_set_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "warning_state_backend_set_names")


class AwaitableGetNetworkLoadBalancerHealthResult(GetNetworkLoadBalancerHealthResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNetworkLoadBalancerHealthResult(
            critical_state_backend_set_names=self.critical_state_backend_set_names,
            id=self.id,
            network_load_balancer_id=self.network_load_balancer_id,
            status=self.status,
            total_backend_set_count=self.total_backend_set_count,
            unknown_state_backend_set_names=self.unknown_state_backend_set_names,
            warning_state_backend_set_names=self.warning_state_backend_set_names)


def get_network_load_balancer_health(network_load_balancer_id: Optional[str] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNetworkLoadBalancerHealthResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['networkLoadBalancerId'] = network_load_balancer_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:NetworkLoadBalancer/getNetworkLoadBalancerHealth:getNetworkLoadBalancerHealth', __args__, opts=opts, typ=GetNetworkLoadBalancerHealthResult).value

    return AwaitableGetNetworkLoadBalancerHealthResult(
        critical_state_backend_set_names=pulumi.get(__ret__, 'critical_state_backend_set_names'),
        id=pulumi.get(__ret__, 'id'),
        network_load_balancer_id=pulumi.get(__ret__, 'network_load_balancer_id'),
        status=pulumi.get(__ret__, 'status'),
        total_backend_set_count=pulumi.get(__ret__, 'total_backend_set_count'),
        unknown_state_backend_set_names=pulumi.get(__ret__, 'unknown_state_backend_set_names'),
        warning_state_backend_set_names=pulumi.get(__ret__, 'warning_state_backend_set_names'))


@_utilities.lift_output_func(get_network_load_balancer_health)
def get_network_load_balancer_health_output(network_load_balancer_id: Optional[pulumi.Input[str]] = None,
                                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetNetworkLoadBalancerHealthResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
