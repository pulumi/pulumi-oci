# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetNetworkLoadBalancersProtocolsResult',
    'AwaitableGetNetworkLoadBalancersProtocolsResult',
    'get_network_load_balancers_protocols',
    'get_network_load_balancers_protocols_output',
]

@pulumi.output_type
class GetNetworkLoadBalancersProtocolsResult:
    """
    A collection of values returned by getNetworkLoadBalancersProtocols.
    """
    def __init__(__self__, filters=None, id=None, network_load_balancers_protocol_collections=None):
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if network_load_balancers_protocol_collections and not isinstance(network_load_balancers_protocol_collections, list):
            raise TypeError("Expected argument 'network_load_balancers_protocol_collections' to be a list")
        pulumi.set(__self__, "network_load_balancers_protocol_collections", network_load_balancers_protocol_collections)

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetNetworkLoadBalancersProtocolsFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="networkLoadBalancersProtocolCollections")
    def network_load_balancers_protocol_collections(self) -> Optional[Sequence['outputs.GetNetworkLoadBalancersProtocolsNetworkLoadBalancersProtocolCollectionResult']]:
        return pulumi.get(self, "network_load_balancers_protocol_collections")


class AwaitableGetNetworkLoadBalancersProtocolsResult(GetNetworkLoadBalancersProtocolsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNetworkLoadBalancersProtocolsResult(
            filters=self.filters,
            id=self.id,
            network_load_balancers_protocol_collections=self.network_load_balancers_protocol_collections)


def get_network_load_balancers_protocols(filters: Optional[Sequence[pulumi.InputType['GetNetworkLoadBalancersProtocolsFilterArgs']]] = None,
                                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNetworkLoadBalancersProtocolsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['filters'] = filters
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:NetworkLoadBalancer/getNetworkLoadBalancersProtocols:getNetworkLoadBalancersProtocols', __args__, opts=opts, typ=GetNetworkLoadBalancersProtocolsResult).value

    return AwaitableGetNetworkLoadBalancersProtocolsResult(
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        network_load_balancers_protocol_collections=pulumi.get(__ret__, 'network_load_balancers_protocol_collections'))


@_utilities.lift_output_func(get_network_load_balancers_protocols)
def get_network_load_balancers_protocols_output(filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetNetworkLoadBalancersProtocolsFilterArgs']]]]] = None,
                                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetNetworkLoadBalancersProtocolsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
