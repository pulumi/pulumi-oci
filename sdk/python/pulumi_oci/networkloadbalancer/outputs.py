# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'BackendSetBackend',
    'BackendSetHealthChecker',
    'NetworkLoadBalancerIpAddress',
    'NetworkLoadBalancerIpAddressReservedIp',
    'NetworkLoadBalancerReservedIp',
    'NetworkLoadBalancersBackendSetsUnifiedBackend',
    'NetworkLoadBalancersBackendSetsUnifiedHealthChecker',
    'GetBackendHealthHealthCheckResultResult',
    'GetBackendSetBackendResult',
    'GetBackendSetHealthCheckerResult',
    'GetBackendSetsBackendSetCollectionResult',
    'GetBackendSetsBackendSetCollectionItemResult',
    'GetBackendSetsBackendSetCollectionItemBackendResult',
    'GetBackendSetsBackendSetCollectionItemHealthCheckerResult',
    'GetBackendSetsFilterResult',
    'GetBackendsBackendCollectionResult',
    'GetBackendsBackendCollectionItemResult',
    'GetBackendsFilterResult',
    'GetListenersFilterResult',
    'GetListenersListenerCollectionResult',
    'GetListenersListenerCollectionItemResult',
    'GetNetworkLoadBalancerIpAddressResult',
    'GetNetworkLoadBalancerIpAddressReservedIpResult',
    'GetNetworkLoadBalancerReservedIpResult',
    'GetNetworkLoadBalancersFilterResult',
    'GetNetworkLoadBalancersNetworkLoadBalancerCollectionResult',
    'GetNetworkLoadBalancersNetworkLoadBalancerCollectionItemResult',
    'GetNetworkLoadBalancersNetworkLoadBalancerCollectionItemIpAddressResult',
    'GetNetworkLoadBalancersNetworkLoadBalancerCollectionItemIpAddressReservedIpResult',
    'GetNetworkLoadBalancersNetworkLoadBalancerCollectionItemReservedIpResult',
    'GetNetworkLoadBalancersPoliciesFilterResult',
    'GetNetworkLoadBalancersPoliciesNetworkLoadBalancersPolicyCollectionResult',
    'GetNetworkLoadBalancersProtocolsFilterResult',
    'GetNetworkLoadBalancersProtocolsNetworkLoadBalancersProtocolCollectionResult',
]

@pulumi.output_type
class BackendSetBackend(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddress":
            suggest = "ip_address"
        elif key == "isBackup":
            suggest = "is_backup"
        elif key == "isDrain":
            suggest = "is_drain"
        elif key == "isOffline":
            suggest = "is_offline"
        elif key == "targetId":
            suggest = "target_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BackendSetBackend. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BackendSetBackend.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BackendSetBackend.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 port: int,
                 ip_address: Optional[str] = None,
                 is_backup: Optional[bool] = None,
                 is_drain: Optional[bool] = None,
                 is_offline: Optional[bool] = None,
                 name: Optional[str] = None,
                 target_id: Optional[str] = None,
                 weight: Optional[int] = None):
        pulumi.set(__self__, "port", port)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if is_backup is not None:
            pulumi.set(__self__, "is_backup", is_backup)
        if is_drain is not None:
            pulumi.set(__self__, "is_drain", is_drain)
        if is_offline is not None:
            pulumi.set(__self__, "is_offline", is_offline)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="isBackup")
    def is_backup(self) -> Optional[bool]:
        return pulumi.get(self, "is_backup")

    @property
    @pulumi.getter(name="isDrain")
    def is_drain(self) -> Optional[bool]:
        return pulumi.get(self, "is_drain")

    @property
    @pulumi.getter(name="isOffline")
    def is_offline(self) -> Optional[bool]:
        return pulumi.get(self, "is_offline")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[str]:
        return pulumi.get(self, "target_id")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        return pulumi.get(self, "weight")


@pulumi.output_type
class BackendSetHealthChecker(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "intervalInMillis":
            suggest = "interval_in_millis"
        elif key == "requestData":
            suggest = "request_data"
        elif key == "responseBodyRegex":
            suggest = "response_body_regex"
        elif key == "responseData":
            suggest = "response_data"
        elif key == "returnCode":
            suggest = "return_code"
        elif key == "timeoutInMillis":
            suggest = "timeout_in_millis"
        elif key == "urlPath":
            suggest = "url_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BackendSetHealthChecker. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BackendSetHealthChecker.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BackendSetHealthChecker.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 protocol: str,
                 interval_in_millis: Optional[int] = None,
                 port: Optional[int] = None,
                 request_data: Optional[str] = None,
                 response_body_regex: Optional[str] = None,
                 response_data: Optional[str] = None,
                 retries: Optional[int] = None,
                 return_code: Optional[int] = None,
                 timeout_in_millis: Optional[int] = None,
                 url_path: Optional[str] = None):
        pulumi.set(__self__, "protocol", protocol)
        if interval_in_millis is not None:
            pulumi.set(__self__, "interval_in_millis", interval_in_millis)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if request_data is not None:
            pulumi.set(__self__, "request_data", request_data)
        if response_body_regex is not None:
            pulumi.set(__self__, "response_body_regex", response_body_regex)
        if response_data is not None:
            pulumi.set(__self__, "response_data", response_data)
        if retries is not None:
            pulumi.set(__self__, "retries", retries)
        if return_code is not None:
            pulumi.set(__self__, "return_code", return_code)
        if timeout_in_millis is not None:
            pulumi.set(__self__, "timeout_in_millis", timeout_in_millis)
        if url_path is not None:
            pulumi.set(__self__, "url_path", url_path)

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="intervalInMillis")
    def interval_in_millis(self) -> Optional[int]:
        return pulumi.get(self, "interval_in_millis")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="requestData")
    def request_data(self) -> Optional[str]:
        return pulumi.get(self, "request_data")

    @property
    @pulumi.getter(name="responseBodyRegex")
    def response_body_regex(self) -> Optional[str]:
        return pulumi.get(self, "response_body_regex")

    @property
    @pulumi.getter(name="responseData")
    def response_data(self) -> Optional[str]:
        return pulumi.get(self, "response_data")

    @property
    @pulumi.getter
    def retries(self) -> Optional[int]:
        return pulumi.get(self, "retries")

    @property
    @pulumi.getter(name="returnCode")
    def return_code(self) -> Optional[int]:
        return pulumi.get(self, "return_code")

    @property
    @pulumi.getter(name="timeoutInMillis")
    def timeout_in_millis(self) -> Optional[int]:
        return pulumi.get(self, "timeout_in_millis")

    @property
    @pulumi.getter(name="urlPath")
    def url_path(self) -> Optional[str]:
        return pulumi.get(self, "url_path")


@pulumi.output_type
class NetworkLoadBalancerIpAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddress":
            suggest = "ip_address"
        elif key == "ipVersion":
            suggest = "ip_version"
        elif key == "isPublic":
            suggest = "is_public"
        elif key == "reservedIps":
            suggest = "reserved_ips"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkLoadBalancerIpAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkLoadBalancerIpAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkLoadBalancerIpAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_address: Optional[str] = None,
                 ip_version: Optional[str] = None,
                 is_public: Optional[bool] = None,
                 reserved_ips: Optional[Sequence['outputs.NetworkLoadBalancerIpAddressReservedIp']] = None):
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if is_public is not None:
            pulumi.set(__self__, "is_public", is_public)
        if reserved_ips is not None:
            pulumi.set(__self__, "reserved_ips", reserved_ips)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[str]:
        return pulumi.get(self, "ip_version")

    @property
    @pulumi.getter(name="isPublic")
    def is_public(self) -> Optional[bool]:
        return pulumi.get(self, "is_public")

    @property
    @pulumi.getter(name="reservedIps")
    def reserved_ips(self) -> Optional[Sequence['outputs.NetworkLoadBalancerIpAddressReservedIp']]:
        return pulumi.get(self, "reserved_ips")


@pulumi.output_type
class NetworkLoadBalancerIpAddressReservedIp(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class NetworkLoadBalancerReservedIp(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class NetworkLoadBalancersBackendSetsUnifiedBackend(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddress":
            suggest = "ip_address"
        elif key == "isBackup":
            suggest = "is_backup"
        elif key == "isDrain":
            suggest = "is_drain"
        elif key == "isOffline":
            suggest = "is_offline"
        elif key == "targetId":
            suggest = "target_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkLoadBalancersBackendSetsUnifiedBackend. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkLoadBalancersBackendSetsUnifiedBackend.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkLoadBalancersBackendSetsUnifiedBackend.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 port: int,
                 ip_address: Optional[str] = None,
                 is_backup: Optional[bool] = None,
                 is_drain: Optional[bool] = None,
                 is_offline: Optional[bool] = None,
                 name: Optional[str] = None,
                 target_id: Optional[str] = None,
                 weight: Optional[int] = None):
        pulumi.set(__self__, "port", port)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if is_backup is not None:
            pulumi.set(__self__, "is_backup", is_backup)
        if is_drain is not None:
            pulumi.set(__self__, "is_drain", is_drain)
        if is_offline is not None:
            pulumi.set(__self__, "is_offline", is_offline)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="isBackup")
    def is_backup(self) -> Optional[bool]:
        return pulumi.get(self, "is_backup")

    @property
    @pulumi.getter(name="isDrain")
    def is_drain(self) -> Optional[bool]:
        return pulumi.get(self, "is_drain")

    @property
    @pulumi.getter(name="isOffline")
    def is_offline(self) -> Optional[bool]:
        return pulumi.get(self, "is_offline")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[str]:
        return pulumi.get(self, "target_id")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        return pulumi.get(self, "weight")


@pulumi.output_type
class NetworkLoadBalancersBackendSetsUnifiedHealthChecker(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "intervalInMillis":
            suggest = "interval_in_millis"
        elif key == "requestData":
            suggest = "request_data"
        elif key == "responseBodyRegex":
            suggest = "response_body_regex"
        elif key == "responseData":
            suggest = "response_data"
        elif key == "returnCode":
            suggest = "return_code"
        elif key == "timeoutInMillis":
            suggest = "timeout_in_millis"
        elif key == "urlPath":
            suggest = "url_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkLoadBalancersBackendSetsUnifiedHealthChecker. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkLoadBalancersBackendSetsUnifiedHealthChecker.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkLoadBalancersBackendSetsUnifiedHealthChecker.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 protocol: str,
                 interval_in_millis: Optional[int] = None,
                 port: Optional[int] = None,
                 request_data: Optional[str] = None,
                 response_body_regex: Optional[str] = None,
                 response_data: Optional[str] = None,
                 retries: Optional[int] = None,
                 return_code: Optional[int] = None,
                 timeout_in_millis: Optional[int] = None,
                 url_path: Optional[str] = None):
        pulumi.set(__self__, "protocol", protocol)
        if interval_in_millis is not None:
            pulumi.set(__self__, "interval_in_millis", interval_in_millis)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if request_data is not None:
            pulumi.set(__self__, "request_data", request_data)
        if response_body_regex is not None:
            pulumi.set(__self__, "response_body_regex", response_body_regex)
        if response_data is not None:
            pulumi.set(__self__, "response_data", response_data)
        if retries is not None:
            pulumi.set(__self__, "retries", retries)
        if return_code is not None:
            pulumi.set(__self__, "return_code", return_code)
        if timeout_in_millis is not None:
            pulumi.set(__self__, "timeout_in_millis", timeout_in_millis)
        if url_path is not None:
            pulumi.set(__self__, "url_path", url_path)

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="intervalInMillis")
    def interval_in_millis(self) -> Optional[int]:
        return pulumi.get(self, "interval_in_millis")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="requestData")
    def request_data(self) -> Optional[str]:
        return pulumi.get(self, "request_data")

    @property
    @pulumi.getter(name="responseBodyRegex")
    def response_body_regex(self) -> Optional[str]:
        return pulumi.get(self, "response_body_regex")

    @property
    @pulumi.getter(name="responseData")
    def response_data(self) -> Optional[str]:
        return pulumi.get(self, "response_data")

    @property
    @pulumi.getter
    def retries(self) -> Optional[int]:
        return pulumi.get(self, "retries")

    @property
    @pulumi.getter(name="returnCode")
    def return_code(self) -> Optional[int]:
        return pulumi.get(self, "return_code")

    @property
    @pulumi.getter(name="timeoutInMillis")
    def timeout_in_millis(self) -> Optional[int]:
        return pulumi.get(self, "timeout_in_millis")

    @property
    @pulumi.getter(name="urlPath")
    def url_path(self) -> Optional[str]:
        return pulumi.get(self, "url_path")


@pulumi.output_type
class GetBackendHealthHealthCheckResultResult(dict):
    def __init__(__self__, *,
                 health_check_status: Optional[str] = None,
                 timestamp: Optional[str] = None):
        if health_check_status is not None:
            pulumi.set(__self__, "health_check_status", health_check_status)
        if timestamp is not None:
            pulumi.set(__self__, "timestamp", timestamp)

    @property
    @pulumi.getter(name="healthCheckStatus")
    def health_check_status(self) -> Optional[str]:
        return pulumi.get(self, "health_check_status")

    @property
    @pulumi.getter
    def timestamp(self) -> Optional[str]:
        return pulumi.get(self, "timestamp")


@pulumi.output_type
class GetBackendSetBackendResult(dict):
    def __init__(__self__, *,
                 ip_address: Optional[str] = None,
                 is_backup: Optional[bool] = None,
                 is_drain: Optional[bool] = None,
                 is_offline: Optional[bool] = None,
                 name: Optional[str] = None,
                 port: Optional[int] = None,
                 target_id: Optional[str] = None,
                 weight: Optional[int] = None):
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if is_backup is not None:
            pulumi.set(__self__, "is_backup", is_backup)
        if is_drain is not None:
            pulumi.set(__self__, "is_drain", is_drain)
        if is_offline is not None:
            pulumi.set(__self__, "is_offline", is_offline)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="isBackup")
    def is_backup(self) -> Optional[bool]:
        return pulumi.get(self, "is_backup")

    @property
    @pulumi.getter(name="isDrain")
    def is_drain(self) -> Optional[bool]:
        return pulumi.get(self, "is_drain")

    @property
    @pulumi.getter(name="isOffline")
    def is_offline(self) -> Optional[bool]:
        return pulumi.get(self, "is_offline")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[str]:
        return pulumi.get(self, "target_id")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetBackendSetHealthCheckerResult(dict):
    def __init__(__self__, *,
                 interval_in_millis: Optional[int] = None,
                 port: Optional[int] = None,
                 protocol: Optional[str] = None,
                 request_data: Optional[str] = None,
                 response_body_regex: Optional[str] = None,
                 response_data: Optional[str] = None,
                 retries: Optional[int] = None,
                 return_code: Optional[int] = None,
                 timeout_in_millis: Optional[int] = None,
                 url_path: Optional[str] = None):
        if interval_in_millis is not None:
            pulumi.set(__self__, "interval_in_millis", interval_in_millis)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if request_data is not None:
            pulumi.set(__self__, "request_data", request_data)
        if response_body_regex is not None:
            pulumi.set(__self__, "response_body_regex", response_body_regex)
        if response_data is not None:
            pulumi.set(__self__, "response_data", response_data)
        if retries is not None:
            pulumi.set(__self__, "retries", retries)
        if return_code is not None:
            pulumi.set(__self__, "return_code", return_code)
        if timeout_in_millis is not None:
            pulumi.set(__self__, "timeout_in_millis", timeout_in_millis)
        if url_path is not None:
            pulumi.set(__self__, "url_path", url_path)

    @property
    @pulumi.getter(name="intervalInMillis")
    def interval_in_millis(self) -> Optional[int]:
        return pulumi.get(self, "interval_in_millis")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="requestData")
    def request_data(self) -> Optional[str]:
        return pulumi.get(self, "request_data")

    @property
    @pulumi.getter(name="responseBodyRegex")
    def response_body_regex(self) -> Optional[str]:
        return pulumi.get(self, "response_body_regex")

    @property
    @pulumi.getter(name="responseData")
    def response_data(self) -> Optional[str]:
        return pulumi.get(self, "response_data")

    @property
    @pulumi.getter
    def retries(self) -> Optional[int]:
        return pulumi.get(self, "retries")

    @property
    @pulumi.getter(name="returnCode")
    def return_code(self) -> Optional[int]:
        return pulumi.get(self, "return_code")

    @property
    @pulumi.getter(name="timeoutInMillis")
    def timeout_in_millis(self) -> Optional[int]:
        return pulumi.get(self, "timeout_in_millis")

    @property
    @pulumi.getter(name="urlPath")
    def url_path(self) -> Optional[str]:
        return pulumi.get(self, "url_path")


@pulumi.output_type
class GetBackendSetsBackendSetCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetBackendSetsBackendSetCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetBackendSetsBackendSetCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetBackendSetsBackendSetCollectionItemResult(dict):
    def __init__(__self__, *,
                 backends: Optional[Sequence['outputs.GetBackendSetsBackendSetCollectionItemBackendResult']] = None,
                 health_checkers: Optional[Sequence['outputs.GetBackendSetsBackendSetCollectionItemHealthCheckerResult']] = None,
                 id: Optional[str] = None,
                 ip_version: Optional[str] = None,
                 is_preserve_source: Optional[bool] = None,
                 name: Optional[str] = None,
                 network_load_balancer_id: Optional[str] = None,
                 policy: Optional[str] = None):
        if backends is not None:
            pulumi.set(__self__, "backends", backends)
        if health_checkers is not None:
            pulumi.set(__self__, "health_checkers", health_checkers)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if is_preserve_source is not None:
            pulumi.set(__self__, "is_preserve_source", is_preserve_source)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_load_balancer_id is not None:
            pulumi.set(__self__, "network_load_balancer_id", network_load_balancer_id)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)

    @property
    @pulumi.getter
    def backends(self) -> Optional[Sequence['outputs.GetBackendSetsBackendSetCollectionItemBackendResult']]:
        return pulumi.get(self, "backends")

    @property
    @pulumi.getter(name="healthCheckers")
    def health_checkers(self) -> Optional[Sequence['outputs.GetBackendSetsBackendSetCollectionItemHealthCheckerResult']]:
        return pulumi.get(self, "health_checkers")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[str]:
        return pulumi.get(self, "ip_version")

    @property
    @pulumi.getter(name="isPreserveSource")
    def is_preserve_source(self) -> Optional[bool]:
        return pulumi.get(self, "is_preserve_source")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkLoadBalancerId")
    def network_load_balancer_id(self) -> Optional[str]:
        return pulumi.get(self, "network_load_balancer_id")

    @property
    @pulumi.getter
    def policy(self) -> Optional[str]:
        return pulumi.get(self, "policy")


@pulumi.output_type
class GetBackendSetsBackendSetCollectionItemBackendResult(dict):
    def __init__(__self__, *,
                 ip_address: Optional[str] = None,
                 is_backup: Optional[bool] = None,
                 is_drain: Optional[bool] = None,
                 is_offline: Optional[bool] = None,
                 name: Optional[str] = None,
                 port: Optional[int] = None,
                 target_id: Optional[str] = None,
                 weight: Optional[int] = None):
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if is_backup is not None:
            pulumi.set(__self__, "is_backup", is_backup)
        if is_drain is not None:
            pulumi.set(__self__, "is_drain", is_drain)
        if is_offline is not None:
            pulumi.set(__self__, "is_offline", is_offline)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="isBackup")
    def is_backup(self) -> Optional[bool]:
        return pulumi.get(self, "is_backup")

    @property
    @pulumi.getter(name="isDrain")
    def is_drain(self) -> Optional[bool]:
        return pulumi.get(self, "is_drain")

    @property
    @pulumi.getter(name="isOffline")
    def is_offline(self) -> Optional[bool]:
        return pulumi.get(self, "is_offline")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[str]:
        return pulumi.get(self, "target_id")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetBackendSetsBackendSetCollectionItemHealthCheckerResult(dict):
    def __init__(__self__, *,
                 interval_in_millis: Optional[int] = None,
                 port: Optional[int] = None,
                 protocol: Optional[str] = None,
                 request_data: Optional[str] = None,
                 response_body_regex: Optional[str] = None,
                 response_data: Optional[str] = None,
                 retries: Optional[int] = None,
                 return_code: Optional[int] = None,
                 timeout_in_millis: Optional[int] = None,
                 url_path: Optional[str] = None):
        if interval_in_millis is not None:
            pulumi.set(__self__, "interval_in_millis", interval_in_millis)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if request_data is not None:
            pulumi.set(__self__, "request_data", request_data)
        if response_body_regex is not None:
            pulumi.set(__self__, "response_body_regex", response_body_regex)
        if response_data is not None:
            pulumi.set(__self__, "response_data", response_data)
        if retries is not None:
            pulumi.set(__self__, "retries", retries)
        if return_code is not None:
            pulumi.set(__self__, "return_code", return_code)
        if timeout_in_millis is not None:
            pulumi.set(__self__, "timeout_in_millis", timeout_in_millis)
        if url_path is not None:
            pulumi.set(__self__, "url_path", url_path)

    @property
    @pulumi.getter(name="intervalInMillis")
    def interval_in_millis(self) -> Optional[int]:
        return pulumi.get(self, "interval_in_millis")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="requestData")
    def request_data(self) -> Optional[str]:
        return pulumi.get(self, "request_data")

    @property
    @pulumi.getter(name="responseBodyRegex")
    def response_body_regex(self) -> Optional[str]:
        return pulumi.get(self, "response_body_regex")

    @property
    @pulumi.getter(name="responseData")
    def response_data(self) -> Optional[str]:
        return pulumi.get(self, "response_data")

    @property
    @pulumi.getter
    def retries(self) -> Optional[int]:
        return pulumi.get(self, "retries")

    @property
    @pulumi.getter(name="returnCode")
    def return_code(self) -> Optional[int]:
        return pulumi.get(self, "return_code")

    @property
    @pulumi.getter(name="timeoutInMillis")
    def timeout_in_millis(self) -> Optional[int]:
        return pulumi.get(self, "timeout_in_millis")

    @property
    @pulumi.getter(name="urlPath")
    def url_path(self) -> Optional[str]:
        return pulumi.get(self, "url_path")


@pulumi.output_type
class GetBackendSetsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetBackendsBackendCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetBackendsBackendCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetBackendsBackendCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetBackendsBackendCollectionItemResult(dict):
    def __init__(__self__, *,
                 backend_set_name: Optional[str] = None,
                 id: Optional[str] = None,
                 ip_address: Optional[str] = None,
                 is_backup: Optional[bool] = None,
                 is_drain: Optional[bool] = None,
                 is_offline: Optional[bool] = None,
                 name: Optional[str] = None,
                 network_load_balancer_id: Optional[str] = None,
                 port: Optional[int] = None,
                 target_id: Optional[str] = None,
                 weight: Optional[int] = None):
        if backend_set_name is not None:
            pulumi.set(__self__, "backend_set_name", backend_set_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if is_backup is not None:
            pulumi.set(__self__, "is_backup", is_backup)
        if is_drain is not None:
            pulumi.set(__self__, "is_drain", is_drain)
        if is_offline is not None:
            pulumi.set(__self__, "is_offline", is_offline)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_load_balancer_id is not None:
            pulumi.set(__self__, "network_load_balancer_id", network_load_balancer_id)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="backendSetName")
    def backend_set_name(self) -> Optional[str]:
        return pulumi.get(self, "backend_set_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="isBackup")
    def is_backup(self) -> Optional[bool]:
        return pulumi.get(self, "is_backup")

    @property
    @pulumi.getter(name="isDrain")
    def is_drain(self) -> Optional[bool]:
        return pulumi.get(self, "is_drain")

    @property
    @pulumi.getter(name="isOffline")
    def is_offline(self) -> Optional[bool]:
        return pulumi.get(self, "is_offline")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkLoadBalancerId")
    def network_load_balancer_id(self) -> Optional[str]:
        return pulumi.get(self, "network_load_balancer_id")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[str]:
        return pulumi.get(self, "target_id")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetBackendsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetListenersFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetListenersListenerCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetListenersListenerCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetListenersListenerCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetListenersListenerCollectionItemResult(dict):
    def __init__(__self__, *,
                 default_backend_set_name: Optional[str] = None,
                 id: Optional[str] = None,
                 ip_version: Optional[str] = None,
                 name: Optional[str] = None,
                 network_load_balancer_id: Optional[str] = None,
                 port: Optional[int] = None,
                 protocol: Optional[str] = None):
        if default_backend_set_name is not None:
            pulumi.set(__self__, "default_backend_set_name", default_backend_set_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_load_balancer_id is not None:
            pulumi.set(__self__, "network_load_balancer_id", network_load_balancer_id)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="defaultBackendSetName")
    def default_backend_set_name(self) -> Optional[str]:
        return pulumi.get(self, "default_backend_set_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[str]:
        return pulumi.get(self, "ip_version")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkLoadBalancerId")
    def network_load_balancer_id(self) -> Optional[str]:
        return pulumi.get(self, "network_load_balancer_id")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")


@pulumi.output_type
class GetNetworkLoadBalancerIpAddressResult(dict):
    def __init__(__self__, *,
                 ip_address: Optional[str] = None,
                 ip_version: Optional[str] = None,
                 is_public: Optional[bool] = None,
                 reserved_ips: Optional[Sequence['outputs.GetNetworkLoadBalancerIpAddressReservedIpResult']] = None):
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if is_public is not None:
            pulumi.set(__self__, "is_public", is_public)
        if reserved_ips is not None:
            pulumi.set(__self__, "reserved_ips", reserved_ips)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[str]:
        return pulumi.get(self, "ip_version")

    @property
    @pulumi.getter(name="isPublic")
    def is_public(self) -> Optional[bool]:
        return pulumi.get(self, "is_public")

    @property
    @pulumi.getter(name="reservedIps")
    def reserved_ips(self) -> Optional[Sequence['outputs.GetNetworkLoadBalancerIpAddressReservedIpResult']]:
        return pulumi.get(self, "reserved_ips")


@pulumi.output_type
class GetNetworkLoadBalancerIpAddressReservedIpResult(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetNetworkLoadBalancerReservedIpResult(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetNetworkLoadBalancersFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetNetworkLoadBalancersNetworkLoadBalancerCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetNetworkLoadBalancersNetworkLoadBalancerCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetNetworkLoadBalancersNetworkLoadBalancerCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetNetworkLoadBalancersNetworkLoadBalancerCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 ip_addresses: Optional[Sequence['outputs.GetNetworkLoadBalancersNetworkLoadBalancerCollectionItemIpAddressResult']] = None,
                 is_preserve_source_destination: Optional[bool] = None,
                 is_private: Optional[bool] = None,
                 lifecycle_details: Optional[str] = None,
                 network_security_group_ids: Optional[Sequence[str]] = None,
                 nlb_ip_version: Optional[str] = None,
                 reserved_ips: Optional[Sequence['outputs.GetNetworkLoadBalancersNetworkLoadBalancerCollectionItemReservedIpResult']] = None,
                 state: Optional[str] = None,
                 subnet_id: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip_addresses is not None:
            pulumi.set(__self__, "ip_addresses", ip_addresses)
        if is_preserve_source_destination is not None:
            pulumi.set(__self__, "is_preserve_source_destination", is_preserve_source_destination)
        if is_private is not None:
            pulumi.set(__self__, "is_private", is_private)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if network_security_group_ids is not None:
            pulumi.set(__self__, "network_security_group_ids", network_security_group_ids)
        if nlb_ip_version is not None:
            pulumi.set(__self__, "nlb_ip_version", nlb_ip_version)
        if reserved_ips is not None:
            pulumi.set(__self__, "reserved_ips", reserved_ips)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Optional[Sequence['outputs.GetNetworkLoadBalancersNetworkLoadBalancerCollectionItemIpAddressResult']]:
        return pulumi.get(self, "ip_addresses")

    @property
    @pulumi.getter(name="isPreserveSourceDestination")
    def is_preserve_source_destination(self) -> Optional[bool]:
        return pulumi.get(self, "is_preserve_source_destination")

    @property
    @pulumi.getter(name="isPrivate")
    def is_private(self) -> Optional[bool]:
        return pulumi.get(self, "is_private")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="networkSecurityGroupIds")
    def network_security_group_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "network_security_group_ids")

    @property
    @pulumi.getter(name="nlbIpVersion")
    def nlb_ip_version(self) -> Optional[str]:
        return pulumi.get(self, "nlb_ip_version")

    @property
    @pulumi.getter(name="reservedIps")
    def reserved_ips(self) -> Optional[Sequence['outputs.GetNetworkLoadBalancersNetworkLoadBalancerCollectionItemReservedIpResult']]:
        return pulumi.get(self, "reserved_ips")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetNetworkLoadBalancersNetworkLoadBalancerCollectionItemIpAddressResult(dict):
    def __init__(__self__, *,
                 ip_address: Optional[str] = None,
                 ip_version: Optional[str] = None,
                 is_public: Optional[bool] = None,
                 reserved_ips: Optional[Sequence['outputs.GetNetworkLoadBalancersNetworkLoadBalancerCollectionItemIpAddressReservedIpResult']] = None):
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if is_public is not None:
            pulumi.set(__self__, "is_public", is_public)
        if reserved_ips is not None:
            pulumi.set(__self__, "reserved_ips", reserved_ips)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[str]:
        return pulumi.get(self, "ip_version")

    @property
    @pulumi.getter(name="isPublic")
    def is_public(self) -> Optional[bool]:
        return pulumi.get(self, "is_public")

    @property
    @pulumi.getter(name="reservedIps")
    def reserved_ips(self) -> Optional[Sequence['outputs.GetNetworkLoadBalancersNetworkLoadBalancerCollectionItemIpAddressReservedIpResult']]:
        return pulumi.get(self, "reserved_ips")


@pulumi.output_type
class GetNetworkLoadBalancersNetworkLoadBalancerCollectionItemIpAddressReservedIpResult(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetNetworkLoadBalancersNetworkLoadBalancerCollectionItemReservedIpResult(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetNetworkLoadBalancersPoliciesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetNetworkLoadBalancersPoliciesNetworkLoadBalancersPolicyCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence[str]] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetNetworkLoadBalancersProtocolsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetNetworkLoadBalancersProtocolsNetworkLoadBalancersProtocolCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence[str]] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "items")


