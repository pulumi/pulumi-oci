# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'IndexKey',
    'TableReplica',
    'TableSchema',
    'TableSchemaColumn',
    'TableSchemaIdentity',
    'TableTableLimits',
    'GetIndexKeyResult',
    'GetIndexesFilterResult',
    'GetIndexesIndexCollectionResult',
    'GetIndexesIndexCollectionKeyResult',
    'GetTableReplicaResult',
    'GetTableSchemaResult',
    'GetTableSchemaColumnResult',
    'GetTableSchemaIdentityResult',
    'GetTableTableLimitResult',
    'GetTablesFilterResult',
    'GetTablesTableCollectionResult',
    'GetTablesTableCollectionReplicaResult',
    'GetTablesTableCollectionSchemaResult',
    'GetTablesTableCollectionSchemaColumnResult',
    'GetTablesTableCollectionSchemaIdentityResult',
    'GetTablesTableCollectionTableLimitResult',
]

@pulumi.output_type
class IndexKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "columnName":
            suggest = "column_name"
        elif key == "jsonFieldType":
            suggest = "json_field_type"
        elif key == "jsonPath":
            suggest = "json_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IndexKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IndexKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IndexKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column_name: str,
                 json_field_type: Optional[str] = None,
                 json_path: Optional[str] = None):
        pulumi.set(__self__, "column_name", column_name)
        if json_field_type is not None:
            pulumi.set(__self__, "json_field_type", json_field_type)
        if json_path is not None:
            pulumi.set(__self__, "json_path", json_path)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> str:
        return pulumi.get(self, "column_name")

    @property
    @pulumi.getter(name="jsonFieldType")
    def json_field_type(self) -> Optional[str]:
        return pulumi.get(self, "json_field_type")

    @property
    @pulumi.getter(name="jsonPath")
    def json_path(self) -> Optional[str]:
        return pulumi.get(self, "json_path")


@pulumi.output_type
class TableReplica(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "capacityMode":
            suggest = "capacity_mode"
        elif key == "lifecycleDetails":
            suggest = "lifecycle_details"
        elif key == "maxWriteUnits":
            suggest = "max_write_units"
        elif key == "tableId":
            suggest = "table_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TableReplica. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TableReplica.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TableReplica.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 capacity_mode: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 max_write_units: Optional[int] = None,
                 region: Optional[str] = None,
                 state: Optional[str] = None,
                 table_id: Optional[str] = None):
        if capacity_mode is not None:
            pulumi.set(__self__, "capacity_mode", capacity_mode)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if max_write_units is not None:
            pulumi.set(__self__, "max_write_units", max_write_units)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if table_id is not None:
            pulumi.set(__self__, "table_id", table_id)

    @property
    @pulumi.getter(name="capacityMode")
    def capacity_mode(self) -> Optional[str]:
        return pulumi.get(self, "capacity_mode")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="maxWriteUnits")
    def max_write_units(self) -> Optional[int]:
        return pulumi.get(self, "max_write_units")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="tableId")
    def table_id(self) -> Optional[str]:
        return pulumi.get(self, "table_id")


@pulumi.output_type
class TableSchema(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "primaryKeys":
            suggest = "primary_keys"
        elif key == "shardKeys":
            suggest = "shard_keys"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TableSchema. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TableSchema.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TableSchema.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 columns: Optional[Sequence['outputs.TableSchemaColumn']] = None,
                 identities: Optional[Sequence['outputs.TableSchemaIdentity']] = None,
                 primary_keys: Optional[Sequence[str]] = None,
                 shard_keys: Optional[Sequence[str]] = None,
                 ttl: Optional[int] = None):
        if columns is not None:
            pulumi.set(__self__, "columns", columns)
        if identities is not None:
            pulumi.set(__self__, "identities", identities)
        if primary_keys is not None:
            pulumi.set(__self__, "primary_keys", primary_keys)
        if shard_keys is not None:
            pulumi.set(__self__, "shard_keys", shard_keys)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter
    def columns(self) -> Optional[Sequence['outputs.TableSchemaColumn']]:
        return pulumi.get(self, "columns")

    @property
    @pulumi.getter
    def identities(self) -> Optional[Sequence['outputs.TableSchemaIdentity']]:
        return pulumi.get(self, "identities")

    @property
    @pulumi.getter(name="primaryKeys")
    def primary_keys(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "primary_keys")

    @property
    @pulumi.getter(name="shardKeys")
    def shard_keys(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "shard_keys")

    @property
    @pulumi.getter
    def ttl(self) -> Optional[int]:
        return pulumi.get(self, "ttl")


@pulumi.output_type
class TableSchemaColumn(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultValue":
            suggest = "default_value"
        elif key == "isAsUuid":
            suggest = "is_as_uuid"
        elif key == "isGenerated":
            suggest = "is_generated"
        elif key == "isNullable":
            suggest = "is_nullable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TableSchemaColumn. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TableSchemaColumn.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TableSchemaColumn.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_value: Optional[str] = None,
                 is_as_uuid: Optional[bool] = None,
                 is_generated: Optional[bool] = None,
                 is_nullable: Optional[bool] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if is_as_uuid is not None:
            pulumi.set(__self__, "is_as_uuid", is_as_uuid)
        if is_generated is not None:
            pulumi.set(__self__, "is_generated", is_generated)
        if is_nullable is not None:
            pulumi.set(__self__, "is_nullable", is_nullable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[str]:
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter(name="isAsUuid")
    def is_as_uuid(self) -> Optional[bool]:
        return pulumi.get(self, "is_as_uuid")

    @property
    @pulumi.getter(name="isGenerated")
    def is_generated(self) -> Optional[bool]:
        return pulumi.get(self, "is_generated")

    @property
    @pulumi.getter(name="isNullable")
    def is_nullable(self) -> Optional[bool]:
        return pulumi.get(self, "is_nullable")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class TableSchemaIdentity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "columnName":
            suggest = "column_name"
        elif key == "isAlways":
            suggest = "is_always"
        elif key == "isNull":
            suggest = "is_null"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TableSchemaIdentity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TableSchemaIdentity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TableSchemaIdentity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column_name: Optional[str] = None,
                 is_always: Optional[bool] = None,
                 is_null: Optional[bool] = None):
        if column_name is not None:
            pulumi.set(__self__, "column_name", column_name)
        if is_always is not None:
            pulumi.set(__self__, "is_always", is_always)
        if is_null is not None:
            pulumi.set(__self__, "is_null", is_null)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> Optional[str]:
        return pulumi.get(self, "column_name")

    @property
    @pulumi.getter(name="isAlways")
    def is_always(self) -> Optional[bool]:
        return pulumi.get(self, "is_always")

    @property
    @pulumi.getter(name="isNull")
    def is_null(self) -> Optional[bool]:
        return pulumi.get(self, "is_null")


@pulumi.output_type
class TableTableLimits(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxReadUnits":
            suggest = "max_read_units"
        elif key == "maxStorageInGbs":
            suggest = "max_storage_in_gbs"
        elif key == "maxWriteUnits":
            suggest = "max_write_units"
        elif key == "capacityMode":
            suggest = "capacity_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TableTableLimits. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TableTableLimits.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TableTableLimits.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_read_units: int,
                 max_storage_in_gbs: int,
                 max_write_units: int,
                 capacity_mode: Optional[str] = None):
        pulumi.set(__self__, "max_read_units", max_read_units)
        pulumi.set(__self__, "max_storage_in_gbs", max_storage_in_gbs)
        pulumi.set(__self__, "max_write_units", max_write_units)
        if capacity_mode is not None:
            pulumi.set(__self__, "capacity_mode", capacity_mode)

    @property
    @pulumi.getter(name="maxReadUnits")
    def max_read_units(self) -> int:
        return pulumi.get(self, "max_read_units")

    @property
    @pulumi.getter(name="maxStorageInGbs")
    def max_storage_in_gbs(self) -> int:
        return pulumi.get(self, "max_storage_in_gbs")

    @property
    @pulumi.getter(name="maxWriteUnits")
    def max_write_units(self) -> int:
        return pulumi.get(self, "max_write_units")

    @property
    @pulumi.getter(name="capacityMode")
    def capacity_mode(self) -> Optional[str]:
        return pulumi.get(self, "capacity_mode")


@pulumi.output_type
class GetIndexKeyResult(dict):
    def __init__(__self__, *,
                 column_name: Optional[str] = None,
                 json_field_type: Optional[str] = None,
                 json_path: Optional[str] = None):
        if column_name is not None:
            pulumi.set(__self__, "column_name", column_name)
        if json_field_type is not None:
            pulumi.set(__self__, "json_field_type", json_field_type)
        if json_path is not None:
            pulumi.set(__self__, "json_path", json_path)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> Optional[str]:
        return pulumi.get(self, "column_name")

    @property
    @pulumi.getter(name="jsonFieldType")
    def json_field_type(self) -> Optional[str]:
        return pulumi.get(self, "json_field_type")

    @property
    @pulumi.getter(name="jsonPath")
    def json_path(self) -> Optional[str]:
        return pulumi.get(self, "json_path")


@pulumi.output_type
class GetIndexesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetIndexesIndexCollectionResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 id: Optional[str] = None,
                 is_if_not_exists: Optional[bool] = None,
                 keys: Optional[Sequence['outputs.GetIndexesIndexCollectionKeyResult']] = None,
                 lifecycle_details: Optional[str] = None,
                 name: Optional[str] = None,
                 state: Optional[str] = None,
                 table_id: Optional[str] = None,
                 table_name: Optional[str] = None,
                 table_name_or_id: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_if_not_exists is not None:
            pulumi.set(__self__, "is_if_not_exists", is_if_not_exists)
        if keys is not None:
            pulumi.set(__self__, "keys", keys)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if table_id is not None:
            pulumi.set(__self__, "table_id", table_id)
        if table_name is not None:
            pulumi.set(__self__, "table_name", table_name)
        if table_name_or_id is not None:
            pulumi.set(__self__, "table_name_or_id", table_name_or_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isIfNotExists")
    def is_if_not_exists(self) -> Optional[bool]:
        return pulumi.get(self, "is_if_not_exists")

    @property
    @pulumi.getter
    def keys(self) -> Optional[Sequence['outputs.GetIndexesIndexCollectionKeyResult']]:
        return pulumi.get(self, "keys")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="tableId")
    def table_id(self) -> Optional[str]:
        return pulumi.get(self, "table_id")

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> Optional[str]:
        return pulumi.get(self, "table_name")

    @property
    @pulumi.getter(name="tableNameOrId")
    def table_name_or_id(self) -> Optional[str]:
        return pulumi.get(self, "table_name_or_id")


@pulumi.output_type
class GetIndexesIndexCollectionKeyResult(dict):
    def __init__(__self__, *,
                 column_name: Optional[str] = None,
                 json_field_type: Optional[str] = None,
                 json_path: Optional[str] = None):
        if column_name is not None:
            pulumi.set(__self__, "column_name", column_name)
        if json_field_type is not None:
            pulumi.set(__self__, "json_field_type", json_field_type)
        if json_path is not None:
            pulumi.set(__self__, "json_path", json_path)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> Optional[str]:
        return pulumi.get(self, "column_name")

    @property
    @pulumi.getter(name="jsonFieldType")
    def json_field_type(self) -> Optional[str]:
        return pulumi.get(self, "json_field_type")

    @property
    @pulumi.getter(name="jsonPath")
    def json_path(self) -> Optional[str]:
        return pulumi.get(self, "json_path")


@pulumi.output_type
class GetTableReplicaResult(dict):
    def __init__(__self__, *,
                 capacity_mode: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 max_write_units: Optional[int] = None,
                 region: Optional[str] = None,
                 state: Optional[str] = None,
                 table_id: Optional[str] = None):
        if capacity_mode is not None:
            pulumi.set(__self__, "capacity_mode", capacity_mode)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if max_write_units is not None:
            pulumi.set(__self__, "max_write_units", max_write_units)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if table_id is not None:
            pulumi.set(__self__, "table_id", table_id)

    @property
    @pulumi.getter(name="capacityMode")
    def capacity_mode(self) -> Optional[str]:
        return pulumi.get(self, "capacity_mode")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="maxWriteUnits")
    def max_write_units(self) -> Optional[int]:
        return pulumi.get(self, "max_write_units")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="tableId")
    def table_id(self) -> Optional[str]:
        return pulumi.get(self, "table_id")


@pulumi.output_type
class GetTableSchemaResult(dict):
    def __init__(__self__, *,
                 columns: Optional[Sequence['outputs.GetTableSchemaColumnResult']] = None,
                 identities: Optional[Sequence['outputs.GetTableSchemaIdentityResult']] = None,
                 primary_keys: Optional[Sequence[str]] = None,
                 shard_keys: Optional[Sequence[str]] = None,
                 ttl: Optional[int] = None):
        if columns is not None:
            pulumi.set(__self__, "columns", columns)
        if identities is not None:
            pulumi.set(__self__, "identities", identities)
        if primary_keys is not None:
            pulumi.set(__self__, "primary_keys", primary_keys)
        if shard_keys is not None:
            pulumi.set(__self__, "shard_keys", shard_keys)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter
    def columns(self) -> Optional[Sequence['outputs.GetTableSchemaColumnResult']]:
        return pulumi.get(self, "columns")

    @property
    @pulumi.getter
    def identities(self) -> Optional[Sequence['outputs.GetTableSchemaIdentityResult']]:
        return pulumi.get(self, "identities")

    @property
    @pulumi.getter(name="primaryKeys")
    def primary_keys(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "primary_keys")

    @property
    @pulumi.getter(name="shardKeys")
    def shard_keys(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "shard_keys")

    @property
    @pulumi.getter
    def ttl(self) -> Optional[int]:
        return pulumi.get(self, "ttl")


@pulumi.output_type
class GetTableSchemaColumnResult(dict):
    def __init__(__self__, *,
                 default_value: Optional[str] = None,
                 is_as_uuid: Optional[bool] = None,
                 is_generated: Optional[bool] = None,
                 is_nullable: Optional[bool] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if is_as_uuid is not None:
            pulumi.set(__self__, "is_as_uuid", is_as_uuid)
        if is_generated is not None:
            pulumi.set(__self__, "is_generated", is_generated)
        if is_nullable is not None:
            pulumi.set(__self__, "is_nullable", is_nullable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[str]:
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter(name="isAsUuid")
    def is_as_uuid(self) -> Optional[bool]:
        return pulumi.get(self, "is_as_uuid")

    @property
    @pulumi.getter(name="isGenerated")
    def is_generated(self) -> Optional[bool]:
        return pulumi.get(self, "is_generated")

    @property
    @pulumi.getter(name="isNullable")
    def is_nullable(self) -> Optional[bool]:
        return pulumi.get(self, "is_nullable")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetTableSchemaIdentityResult(dict):
    def __init__(__self__, *,
                 column_name: Optional[str] = None,
                 is_always: Optional[bool] = None,
                 is_null: Optional[bool] = None):
        if column_name is not None:
            pulumi.set(__self__, "column_name", column_name)
        if is_always is not None:
            pulumi.set(__self__, "is_always", is_always)
        if is_null is not None:
            pulumi.set(__self__, "is_null", is_null)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> Optional[str]:
        return pulumi.get(self, "column_name")

    @property
    @pulumi.getter(name="isAlways")
    def is_always(self) -> Optional[bool]:
        return pulumi.get(self, "is_always")

    @property
    @pulumi.getter(name="isNull")
    def is_null(self) -> Optional[bool]:
        return pulumi.get(self, "is_null")


@pulumi.output_type
class GetTableTableLimitResult(dict):
    def __init__(__self__, *,
                 capacity_mode: Optional[str] = None,
                 max_read_units: Optional[int] = None,
                 max_storage_in_gbs: Optional[int] = None,
                 max_write_units: Optional[int] = None):
        if capacity_mode is not None:
            pulumi.set(__self__, "capacity_mode", capacity_mode)
        if max_read_units is not None:
            pulumi.set(__self__, "max_read_units", max_read_units)
        if max_storage_in_gbs is not None:
            pulumi.set(__self__, "max_storage_in_gbs", max_storage_in_gbs)
        if max_write_units is not None:
            pulumi.set(__self__, "max_write_units", max_write_units)

    @property
    @pulumi.getter(name="capacityMode")
    def capacity_mode(self) -> Optional[str]:
        return pulumi.get(self, "capacity_mode")

    @property
    @pulumi.getter(name="maxReadUnits")
    def max_read_units(self) -> Optional[int]:
        return pulumi.get(self, "max_read_units")

    @property
    @pulumi.getter(name="maxStorageInGbs")
    def max_storage_in_gbs(self) -> Optional[int]:
        return pulumi.get(self, "max_storage_in_gbs")

    @property
    @pulumi.getter(name="maxWriteUnits")
    def max_write_units(self) -> Optional[int]:
        return pulumi.get(self, "max_write_units")


@pulumi.output_type
class GetTablesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetTablesTableCollectionResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 ddl_statement: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 is_auto_reclaimable: Optional[bool] = None,
                 is_multi_region: Optional[bool] = None,
                 lifecycle_details: Optional[str] = None,
                 local_replica_initialization_in_percent: Optional[int] = None,
                 name: Optional[str] = None,
                 replicas: Optional[Sequence['outputs.GetTablesTableCollectionReplicaResult']] = None,
                 schema_state: Optional[str] = None,
                 schemas: Optional[Sequence['outputs.GetTablesTableCollectionSchemaResult']] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 table_limits: Optional[Sequence['outputs.GetTablesTableCollectionTableLimitResult']] = None,
                 time_created: Optional[str] = None,
                 time_of_expiration: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if ddl_statement is not None:
            pulumi.set(__self__, "ddl_statement", ddl_statement)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_auto_reclaimable is not None:
            pulumi.set(__self__, "is_auto_reclaimable", is_auto_reclaimable)
        if is_multi_region is not None:
            pulumi.set(__self__, "is_multi_region", is_multi_region)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if local_replica_initialization_in_percent is not None:
            pulumi.set(__self__, "local_replica_initialization_in_percent", local_replica_initialization_in_percent)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if schema_state is not None:
            pulumi.set(__self__, "schema_state", schema_state)
        if schemas is not None:
            pulumi.set(__self__, "schemas", schemas)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if table_limits is not None:
            pulumi.set(__self__, "table_limits", table_limits)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_of_expiration is not None:
            pulumi.set(__self__, "time_of_expiration", time_of_expiration)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="ddlStatement")
    def ddl_statement(self) -> Optional[str]:
        return pulumi.get(self, "ddl_statement")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isAutoReclaimable")
    def is_auto_reclaimable(self) -> Optional[bool]:
        return pulumi.get(self, "is_auto_reclaimable")

    @property
    @pulumi.getter(name="isMultiRegion")
    def is_multi_region(self) -> Optional[bool]:
        return pulumi.get(self, "is_multi_region")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="localReplicaInitializationInPercent")
    def local_replica_initialization_in_percent(self) -> Optional[int]:
        return pulumi.get(self, "local_replica_initialization_in_percent")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def replicas(self) -> Optional[Sequence['outputs.GetTablesTableCollectionReplicaResult']]:
        return pulumi.get(self, "replicas")

    @property
    @pulumi.getter(name="schemaState")
    def schema_state(self) -> Optional[str]:
        return pulumi.get(self, "schema_state")

    @property
    @pulumi.getter
    def schemas(self) -> Optional[Sequence['outputs.GetTablesTableCollectionSchemaResult']]:
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="tableLimits")
    def table_limits(self) -> Optional[Sequence['outputs.GetTablesTableCollectionTableLimitResult']]:
        return pulumi.get(self, "table_limits")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeOfExpiration")
    def time_of_expiration(self) -> Optional[str]:
        return pulumi.get(self, "time_of_expiration")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetTablesTableCollectionReplicaResult(dict):
    def __init__(__self__, *,
                 capacity_mode: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 max_write_units: Optional[int] = None,
                 region: Optional[str] = None,
                 state: Optional[str] = None,
                 table_id: Optional[str] = None):
        if capacity_mode is not None:
            pulumi.set(__self__, "capacity_mode", capacity_mode)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if max_write_units is not None:
            pulumi.set(__self__, "max_write_units", max_write_units)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if table_id is not None:
            pulumi.set(__self__, "table_id", table_id)

    @property
    @pulumi.getter(name="capacityMode")
    def capacity_mode(self) -> Optional[str]:
        return pulumi.get(self, "capacity_mode")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="maxWriteUnits")
    def max_write_units(self) -> Optional[int]:
        return pulumi.get(self, "max_write_units")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="tableId")
    def table_id(self) -> Optional[str]:
        return pulumi.get(self, "table_id")


@pulumi.output_type
class GetTablesTableCollectionSchemaResult(dict):
    def __init__(__self__, *,
                 columns: Optional[Sequence['outputs.GetTablesTableCollectionSchemaColumnResult']] = None,
                 identities: Optional[Sequence['outputs.GetTablesTableCollectionSchemaIdentityResult']] = None,
                 primary_keys: Optional[Sequence[str]] = None,
                 shard_keys: Optional[Sequence[str]] = None,
                 ttl: Optional[int] = None):
        if columns is not None:
            pulumi.set(__self__, "columns", columns)
        if identities is not None:
            pulumi.set(__self__, "identities", identities)
        if primary_keys is not None:
            pulumi.set(__self__, "primary_keys", primary_keys)
        if shard_keys is not None:
            pulumi.set(__self__, "shard_keys", shard_keys)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter
    def columns(self) -> Optional[Sequence['outputs.GetTablesTableCollectionSchemaColumnResult']]:
        return pulumi.get(self, "columns")

    @property
    @pulumi.getter
    def identities(self) -> Optional[Sequence['outputs.GetTablesTableCollectionSchemaIdentityResult']]:
        return pulumi.get(self, "identities")

    @property
    @pulumi.getter(name="primaryKeys")
    def primary_keys(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "primary_keys")

    @property
    @pulumi.getter(name="shardKeys")
    def shard_keys(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "shard_keys")

    @property
    @pulumi.getter
    def ttl(self) -> Optional[int]:
        return pulumi.get(self, "ttl")


@pulumi.output_type
class GetTablesTableCollectionSchemaColumnResult(dict):
    def __init__(__self__, *,
                 default_value: Optional[str] = None,
                 is_as_uuid: Optional[bool] = None,
                 is_generated: Optional[bool] = None,
                 is_nullable: Optional[bool] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if is_as_uuid is not None:
            pulumi.set(__self__, "is_as_uuid", is_as_uuid)
        if is_generated is not None:
            pulumi.set(__self__, "is_generated", is_generated)
        if is_nullable is not None:
            pulumi.set(__self__, "is_nullable", is_nullable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[str]:
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter(name="isAsUuid")
    def is_as_uuid(self) -> Optional[bool]:
        return pulumi.get(self, "is_as_uuid")

    @property
    @pulumi.getter(name="isGenerated")
    def is_generated(self) -> Optional[bool]:
        return pulumi.get(self, "is_generated")

    @property
    @pulumi.getter(name="isNullable")
    def is_nullable(self) -> Optional[bool]:
        return pulumi.get(self, "is_nullable")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetTablesTableCollectionSchemaIdentityResult(dict):
    def __init__(__self__, *,
                 column_name: Optional[str] = None,
                 is_always: Optional[bool] = None,
                 is_null: Optional[bool] = None):
        if column_name is not None:
            pulumi.set(__self__, "column_name", column_name)
        if is_always is not None:
            pulumi.set(__self__, "is_always", is_always)
        if is_null is not None:
            pulumi.set(__self__, "is_null", is_null)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> Optional[str]:
        return pulumi.get(self, "column_name")

    @property
    @pulumi.getter(name="isAlways")
    def is_always(self) -> Optional[bool]:
        return pulumi.get(self, "is_always")

    @property
    @pulumi.getter(name="isNull")
    def is_null(self) -> Optional[bool]:
        return pulumi.get(self, "is_null")


@pulumi.output_type
class GetTablesTableCollectionTableLimitResult(dict):
    def __init__(__self__, *,
                 capacity_mode: Optional[str] = None,
                 max_read_units: Optional[int] = None,
                 max_storage_in_gbs: Optional[int] = None,
                 max_write_units: Optional[int] = None):
        if capacity_mode is not None:
            pulumi.set(__self__, "capacity_mode", capacity_mode)
        if max_read_units is not None:
            pulumi.set(__self__, "max_read_units", max_read_units)
        if max_storage_in_gbs is not None:
            pulumi.set(__self__, "max_storage_in_gbs", max_storage_in_gbs)
        if max_write_units is not None:
            pulumi.set(__self__, "max_write_units", max_write_units)

    @property
    @pulumi.getter(name="capacityMode")
    def capacity_mode(self) -> Optional[str]:
        return pulumi.get(self, "capacity_mode")

    @property
    @pulumi.getter(name="maxReadUnits")
    def max_read_units(self) -> Optional[int]:
        return pulumi.get(self, "max_read_units")

    @property
    @pulumi.getter(name="maxStorageInGbs")
    def max_storage_in_gbs(self) -> Optional[int]:
        return pulumi.get(self, "max_storage_in_gbs")

    @property
    @pulumi.getter(name="maxWriteUnits")
    def max_write_units(self) -> Optional[int]:
        return pulumi.get(self, "max_write_units")


