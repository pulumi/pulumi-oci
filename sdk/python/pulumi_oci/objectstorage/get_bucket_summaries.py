# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetBucketSummariesResult',
    'AwaitableGetBucketSummariesResult',
    'get_bucket_summaries',
    'get_bucket_summaries_output',
]

@pulumi.output_type
class GetBucketSummariesResult:
    """
    A collection of values returned by getBucketSummaries.
    """
    def __init__(__self__, bucket_summaries=None, compartment_id=None, filters=None, id=None, namespace=None):
        if bucket_summaries and not isinstance(bucket_summaries, list):
            raise TypeError("Expected argument 'bucket_summaries' to be a list")
        pulumi.set(__self__, "bucket_summaries", bucket_summaries)
        if compartment_id and not isinstance(compartment_id, str):
            raise TypeError("Expected argument 'compartment_id' to be a str")
        pulumi.set(__self__, "compartment_id", compartment_id)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if namespace and not isinstance(namespace, str):
            raise TypeError("Expected argument 'namespace' to be a str")
        pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter(name="bucketSummaries")
    def bucket_summaries(self) -> Optional[Sequence['outputs.GetBucketSummariesBucketSummaryResult']]:
        return pulumi.get(self, "bucket_summaries")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetBucketSummariesFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        return pulumi.get(self, "namespace")


class AwaitableGetBucketSummariesResult(GetBucketSummariesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBucketSummariesResult(
            bucket_summaries=self.bucket_summaries,
            compartment_id=self.compartment_id,
            filters=self.filters,
            id=self.id,
            namespace=self.namespace)


def get_bucket_summaries(compartment_id: Optional[str] = None,
                         filters: Optional[Sequence[pulumi.InputType['GetBucketSummariesFilterArgs']]] = None,
                         namespace: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBucketSummariesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['compartmentId'] = compartment_id
    __args__['filters'] = filters
    __args__['namespace'] = namespace
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:ObjectStorage/getBucketSummaries:getBucketSummaries', __args__, opts=opts, typ=GetBucketSummariesResult).value

    return AwaitableGetBucketSummariesResult(
        bucket_summaries=pulumi.get(__ret__, 'bucket_summaries'),
        compartment_id=pulumi.get(__ret__, 'compartment_id'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        namespace=pulumi.get(__ret__, 'namespace'))


@_utilities.lift_output_func(get_bucket_summaries)
def get_bucket_summaries_output(compartment_id: Optional[pulumi.Input[str]] = None,
                                filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetBucketSummariesFilterArgs']]]]] = None,
                                namespace: Optional[pulumi.Input[str]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetBucketSummariesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
