# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'BucketRetentionRule',
    'BucketRetentionRuleDuration',
    'ObjectLifecyclePolicyRule',
    'ObjectLifecyclePolicyRuleObjectNameFilter',
    'StorageObjectSourceUriDetails',
    'GetBucketRetentionRuleResult',
    'GetBucketRetentionRuleDurationResult',
    'GetBucketSummariesBucketSummaryResult',
    'GetBucketSummariesBucketSummaryRetentionRuleResult',
    'GetBucketSummariesBucketSummaryRetentionRuleDurationResult',
    'GetBucketSummariesFilterResult',
    'GetObjectLifecyclePolicyRuleResult',
    'GetObjectLifecyclePolicyRuleObjectNameFilterResult',
    'GetObjectVersionsFilterResult',
    'GetObjectVersionsItemResult',
    'GetObjectsFilterResult',
    'GetObjectsObjectResult',
    'GetPreauthrequestsFilterResult',
    'GetPreauthrequestsPreauthenticatedRequestResult',
    'GetReplicationPoliciesFilterResult',
    'GetReplicationPoliciesReplicationPolicyResult',
    'GetReplicationSourcesFilterResult',
    'GetReplicationSourcesReplicationSourceResult',
]

@pulumi.output_type
class BucketRetentionRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "retentionRuleId":
            suggest = "retention_rule_id"
        elif key == "timeCreated":
            suggest = "time_created"
        elif key == "timeModified":
            suggest = "time_modified"
        elif key == "timeRuleLocked":
            suggest = "time_rule_locked"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BucketRetentionRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BucketRetentionRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BucketRetentionRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: str,
                 duration: Optional['outputs.BucketRetentionRuleDuration'] = None,
                 retention_rule_id: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_modified: Optional[str] = None,
                 time_rule_locked: Optional[str] = None):
        pulumi.set(__self__, "display_name", display_name)
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if retention_rule_id is not None:
            pulumi.set(__self__, "retention_rule_id", retention_rule_id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_modified is not None:
            pulumi.set(__self__, "time_modified", time_modified)
        if time_rule_locked is not None:
            pulumi.set(__self__, "time_rule_locked", time_rule_locked)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def duration(self) -> Optional['outputs.BucketRetentionRuleDuration']:
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter(name="retentionRuleId")
    def retention_rule_id(self) -> Optional[str]:
        return pulumi.get(self, "retention_rule_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeModified")
    def time_modified(self) -> Optional[str]:
        return pulumi.get(self, "time_modified")

    @property
    @pulumi.getter(name="timeRuleLocked")
    def time_rule_locked(self) -> Optional[str]:
        return pulumi.get(self, "time_rule_locked")


@pulumi.output_type
class BucketRetentionRuleDuration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "timeAmount":
            suggest = "time_amount"
        elif key == "timeUnit":
            suggest = "time_unit"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BucketRetentionRuleDuration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BucketRetentionRuleDuration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BucketRetentionRuleDuration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 time_amount: str,
                 time_unit: str):
        pulumi.set(__self__, "time_amount", time_amount)
        pulumi.set(__self__, "time_unit", time_unit)

    @property
    @pulumi.getter(name="timeAmount")
    def time_amount(self) -> str:
        return pulumi.get(self, "time_amount")

    @property
    @pulumi.getter(name="timeUnit")
    def time_unit(self) -> str:
        return pulumi.get(self, "time_unit")


@pulumi.output_type
class ObjectLifecyclePolicyRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isEnabled":
            suggest = "is_enabled"
        elif key == "timeAmount":
            suggest = "time_amount"
        elif key == "timeUnit":
            suggest = "time_unit"
        elif key == "objectNameFilter":
            suggest = "object_name_filter"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ObjectLifecyclePolicyRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ObjectLifecyclePolicyRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ObjectLifecyclePolicyRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: str,
                 is_enabled: bool,
                 name: str,
                 time_amount: str,
                 time_unit: str,
                 object_name_filter: Optional['outputs.ObjectLifecyclePolicyRuleObjectNameFilter'] = None,
                 target: Optional[str] = None):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "is_enabled", is_enabled)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "time_amount", time_amount)
        pulumi.set(__self__, "time_unit", time_unit)
        if object_name_filter is not None:
            pulumi.set(__self__, "object_name_filter", object_name_filter)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="timeAmount")
    def time_amount(self) -> str:
        return pulumi.get(self, "time_amount")

    @property
    @pulumi.getter(name="timeUnit")
    def time_unit(self) -> str:
        return pulumi.get(self, "time_unit")

    @property
    @pulumi.getter(name="objectNameFilter")
    def object_name_filter(self) -> Optional['outputs.ObjectLifecyclePolicyRuleObjectNameFilter']:
        return pulumi.get(self, "object_name_filter")

    @property
    @pulumi.getter
    def target(self) -> Optional[str]:
        return pulumi.get(self, "target")


@pulumi.output_type
class ObjectLifecyclePolicyRuleObjectNameFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exclusionPatterns":
            suggest = "exclusion_patterns"
        elif key == "inclusionPatterns":
            suggest = "inclusion_patterns"
        elif key == "inclusionPrefixes":
            suggest = "inclusion_prefixes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ObjectLifecyclePolicyRuleObjectNameFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ObjectLifecyclePolicyRuleObjectNameFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ObjectLifecyclePolicyRuleObjectNameFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exclusion_patterns: Optional[Sequence[str]] = None,
                 inclusion_patterns: Optional[Sequence[str]] = None,
                 inclusion_prefixes: Optional[Sequence[str]] = None):
        if exclusion_patterns is not None:
            pulumi.set(__self__, "exclusion_patterns", exclusion_patterns)
        if inclusion_patterns is not None:
            pulumi.set(__self__, "inclusion_patterns", inclusion_patterns)
        if inclusion_prefixes is not None:
            pulumi.set(__self__, "inclusion_prefixes", inclusion_prefixes)

    @property
    @pulumi.getter(name="exclusionPatterns")
    def exclusion_patterns(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exclusion_patterns")

    @property
    @pulumi.getter(name="inclusionPatterns")
    def inclusion_patterns(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "inclusion_patterns")

    @property
    @pulumi.getter(name="inclusionPrefixes")
    def inclusion_prefixes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "inclusion_prefixes")


@pulumi.output_type
class StorageObjectSourceUriDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationObjectIfMatchEtag":
            suggest = "destination_object_if_match_etag"
        elif key == "destinationObjectIfNoneMatchEtag":
            suggest = "destination_object_if_none_match_etag"
        elif key == "sourceObjectIfMatchEtag":
            suggest = "source_object_if_match_etag"
        elif key == "sourceVersionId":
            suggest = "source_version_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StorageObjectSourceUriDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StorageObjectSourceUriDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StorageObjectSourceUriDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bucket: str,
                 namespace: str,
                 object: str,
                 region: str,
                 destination_object_if_match_etag: Optional[str] = None,
                 destination_object_if_none_match_etag: Optional[str] = None,
                 source_object_if_match_etag: Optional[str] = None,
                 source_version_id: Optional[str] = None):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)
        if destination_object_if_match_etag is not None:
            pulumi.set(__self__, "destination_object_if_match_etag", destination_object_if_match_etag)
        if destination_object_if_none_match_etag is not None:
            pulumi.set(__self__, "destination_object_if_none_match_etag", destination_object_if_none_match_etag)
        if source_object_if_match_etag is not None:
            pulumi.set(__self__, "source_object_if_match_etag", source_object_if_match_etag)
        if source_version_id is not None:
            pulumi.set(__self__, "source_version_id", source_version_id)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> str:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="destinationObjectIfMatchEtag")
    def destination_object_if_match_etag(self) -> Optional[str]:
        return pulumi.get(self, "destination_object_if_match_etag")

    @property
    @pulumi.getter(name="destinationObjectIfNoneMatchEtag")
    def destination_object_if_none_match_etag(self) -> Optional[str]:
        return pulumi.get(self, "destination_object_if_none_match_etag")

    @property
    @pulumi.getter(name="sourceObjectIfMatchEtag")
    def source_object_if_match_etag(self) -> Optional[str]:
        return pulumi.get(self, "source_object_if_match_etag")

    @property
    @pulumi.getter(name="sourceVersionId")
    def source_version_id(self) -> Optional[str]:
        return pulumi.get(self, "source_version_id")


@pulumi.output_type
class GetBucketRetentionRuleResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 durations: Optional[Sequence['outputs.GetBucketRetentionRuleDurationResult']] = None,
                 retention_rule_id: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_modified: Optional[str] = None,
                 time_rule_locked: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if durations is not None:
            pulumi.set(__self__, "durations", durations)
        if retention_rule_id is not None:
            pulumi.set(__self__, "retention_rule_id", retention_rule_id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_modified is not None:
            pulumi.set(__self__, "time_modified", time_modified)
        if time_rule_locked is not None:
            pulumi.set(__self__, "time_rule_locked", time_rule_locked)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def durations(self) -> Optional[Sequence['outputs.GetBucketRetentionRuleDurationResult']]:
        return pulumi.get(self, "durations")

    @property
    @pulumi.getter(name="retentionRuleId")
    def retention_rule_id(self) -> Optional[str]:
        return pulumi.get(self, "retention_rule_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeModified")
    def time_modified(self) -> Optional[str]:
        return pulumi.get(self, "time_modified")

    @property
    @pulumi.getter(name="timeRuleLocked")
    def time_rule_locked(self) -> Optional[str]:
        return pulumi.get(self, "time_rule_locked")


@pulumi.output_type
class GetBucketRetentionRuleDurationResult(dict):
    def __init__(__self__, *,
                 time_amount: Optional[str] = None,
                 time_unit: Optional[str] = None):
        if time_amount is not None:
            pulumi.set(__self__, "time_amount", time_amount)
        if time_unit is not None:
            pulumi.set(__self__, "time_unit", time_unit)

    @property
    @pulumi.getter(name="timeAmount")
    def time_amount(self) -> Optional[str]:
        return pulumi.get(self, "time_amount")

    @property
    @pulumi.getter(name="timeUnit")
    def time_unit(self) -> Optional[str]:
        return pulumi.get(self, "time_unit")


@pulumi.output_type
class GetBucketSummariesBucketSummaryResult(dict):
    def __init__(__self__, *,
                 access_type: Optional[str] = None,
                 approximate_count: Optional[str] = None,
                 approximate_size: Optional[str] = None,
                 auto_tiering: Optional[str] = None,
                 bucket_id: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 created_by: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 etag: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 is_read_only: Optional[bool] = None,
                 kms_key_id: Optional[str] = None,
                 metadata: Optional[Mapping[str, Any]] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 object_events_enabled: Optional[bool] = None,
                 object_lifecycle_policy_etag: Optional[str] = None,
                 replication_enabled: Optional[bool] = None,
                 retention_rules: Optional[Sequence['outputs.GetBucketSummariesBucketSummaryRetentionRuleResult']] = None,
                 storage_tier: Optional[str] = None,
                 time_created: Optional[str] = None,
                 versioning: Optional[str] = None):
        if access_type is not None:
            pulumi.set(__self__, "access_type", access_type)
        if approximate_count is not None:
            pulumi.set(__self__, "approximate_count", approximate_count)
        if approximate_size is not None:
            pulumi.set(__self__, "approximate_size", approximate_size)
        if auto_tiering is not None:
            pulumi.set(__self__, "auto_tiering", auto_tiering)
        if bucket_id is not None:
            pulumi.set(__self__, "bucket_id", bucket_id)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if etag is not None:
            pulumi.set(__self__, "etag", etag)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_read_only is not None:
            pulumi.set(__self__, "is_read_only", is_read_only)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if object_events_enabled is not None:
            pulumi.set(__self__, "object_events_enabled", object_events_enabled)
        if object_lifecycle_policy_etag is not None:
            pulumi.set(__self__, "object_lifecycle_policy_etag", object_lifecycle_policy_etag)
        if replication_enabled is not None:
            pulumi.set(__self__, "replication_enabled", replication_enabled)
        if retention_rules is not None:
            pulumi.set(__self__, "retention_rules", retention_rules)
        if storage_tier is not None:
            pulumi.set(__self__, "storage_tier", storage_tier)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if versioning is not None:
            pulumi.set(__self__, "versioning", versioning)

    @property
    @pulumi.getter(name="accessType")
    def access_type(self) -> Optional[str]:
        return pulumi.get(self, "access_type")

    @property
    @pulumi.getter(name="approximateCount")
    def approximate_count(self) -> Optional[str]:
        return pulumi.get(self, "approximate_count")

    @property
    @pulumi.getter(name="approximateSize")
    def approximate_size(self) -> Optional[str]:
        return pulumi.get(self, "approximate_size")

    @property
    @pulumi.getter(name="autoTiering")
    def auto_tiering(self) -> Optional[str]:
        return pulumi.get(self, "auto_tiering")

    @property
    @pulumi.getter(name="bucketId")
    def bucket_id(self) -> Optional[str]:
        return pulumi.get(self, "bucket_id")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def etag(self) -> Optional[str]:
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isReadOnly")
    def is_read_only(self) -> Optional[bool]:
        return pulumi.get(self, "is_read_only")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter
    def metadata(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="objectEventsEnabled")
    def object_events_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "object_events_enabled")

    @property
    @pulumi.getter(name="objectLifecyclePolicyEtag")
    def object_lifecycle_policy_etag(self) -> Optional[str]:
        return pulumi.get(self, "object_lifecycle_policy_etag")

    @property
    @pulumi.getter(name="replicationEnabled")
    def replication_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "replication_enabled")

    @property
    @pulumi.getter(name="retentionRules")
    def retention_rules(self) -> Optional[Sequence['outputs.GetBucketSummariesBucketSummaryRetentionRuleResult']]:
        return pulumi.get(self, "retention_rules")

    @property
    @pulumi.getter(name="storageTier")
    def storage_tier(self) -> Optional[str]:
        return pulumi.get(self, "storage_tier")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter
    def versioning(self) -> Optional[str]:
        return pulumi.get(self, "versioning")


@pulumi.output_type
class GetBucketSummariesBucketSummaryRetentionRuleResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 durations: Optional[Sequence['outputs.GetBucketSummariesBucketSummaryRetentionRuleDurationResult']] = None,
                 retention_rule_id: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_modified: Optional[str] = None,
                 time_rule_locked: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if durations is not None:
            pulumi.set(__self__, "durations", durations)
        if retention_rule_id is not None:
            pulumi.set(__self__, "retention_rule_id", retention_rule_id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_modified is not None:
            pulumi.set(__self__, "time_modified", time_modified)
        if time_rule_locked is not None:
            pulumi.set(__self__, "time_rule_locked", time_rule_locked)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def durations(self) -> Optional[Sequence['outputs.GetBucketSummariesBucketSummaryRetentionRuleDurationResult']]:
        return pulumi.get(self, "durations")

    @property
    @pulumi.getter(name="retentionRuleId")
    def retention_rule_id(self) -> Optional[str]:
        return pulumi.get(self, "retention_rule_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeModified")
    def time_modified(self) -> Optional[str]:
        return pulumi.get(self, "time_modified")

    @property
    @pulumi.getter(name="timeRuleLocked")
    def time_rule_locked(self) -> Optional[str]:
        return pulumi.get(self, "time_rule_locked")


@pulumi.output_type
class GetBucketSummariesBucketSummaryRetentionRuleDurationResult(dict):
    def __init__(__self__, *,
                 time_amount: Optional[str] = None,
                 time_unit: Optional[str] = None):
        if time_amount is not None:
            pulumi.set(__self__, "time_amount", time_amount)
        if time_unit is not None:
            pulumi.set(__self__, "time_unit", time_unit)

    @property
    @pulumi.getter(name="timeAmount")
    def time_amount(self) -> Optional[str]:
        return pulumi.get(self, "time_amount")

    @property
    @pulumi.getter(name="timeUnit")
    def time_unit(self) -> Optional[str]:
        return pulumi.get(self, "time_unit")


@pulumi.output_type
class GetBucketSummariesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetObjectLifecyclePolicyRuleResult(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 is_enabled: Optional[bool] = None,
                 name: Optional[str] = None,
                 object_name_filters: Optional[Sequence['outputs.GetObjectLifecyclePolicyRuleObjectNameFilterResult']] = None,
                 target: Optional[str] = None,
                 time_amount: Optional[str] = None,
                 time_unit: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if object_name_filters is not None:
            pulumi.set(__self__, "object_name_filters", object_name_filters)
        if target is not None:
            pulumi.set(__self__, "target", target)
        if time_amount is not None:
            pulumi.set(__self__, "time_amount", time_amount)
        if time_unit is not None:
            pulumi.set(__self__, "time_unit", time_unit)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="objectNameFilters")
    def object_name_filters(self) -> Optional[Sequence['outputs.GetObjectLifecyclePolicyRuleObjectNameFilterResult']]:
        return pulumi.get(self, "object_name_filters")

    @property
    @pulumi.getter
    def target(self) -> Optional[str]:
        return pulumi.get(self, "target")

    @property
    @pulumi.getter(name="timeAmount")
    def time_amount(self) -> Optional[str]:
        return pulumi.get(self, "time_amount")

    @property
    @pulumi.getter(name="timeUnit")
    def time_unit(self) -> Optional[str]:
        return pulumi.get(self, "time_unit")


@pulumi.output_type
class GetObjectLifecyclePolicyRuleObjectNameFilterResult(dict):
    def __init__(__self__, *,
                 exclusion_patterns: Optional[Sequence[str]] = None,
                 inclusion_patterns: Optional[Sequence[str]] = None,
                 inclusion_prefixes: Optional[Sequence[str]] = None):
        if exclusion_patterns is not None:
            pulumi.set(__self__, "exclusion_patterns", exclusion_patterns)
        if inclusion_patterns is not None:
            pulumi.set(__self__, "inclusion_patterns", inclusion_patterns)
        if inclusion_prefixes is not None:
            pulumi.set(__self__, "inclusion_prefixes", inclusion_prefixes)

    @property
    @pulumi.getter(name="exclusionPatterns")
    def exclusion_patterns(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exclusion_patterns")

    @property
    @pulumi.getter(name="inclusionPatterns")
    def inclusion_patterns(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "inclusion_patterns")

    @property
    @pulumi.getter(name="inclusionPrefixes")
    def inclusion_prefixes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "inclusion_prefixes")


@pulumi.output_type
class GetObjectVersionsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetObjectVersionsItemResult(dict):
    def __init__(__self__, *,
                 archival_state: Optional[str] = None,
                 etag: Optional[str] = None,
                 is_delete_marker: Optional[bool] = None,
                 md5: Optional[str] = None,
                 name: Optional[str] = None,
                 size: Optional[str] = None,
                 storage_tier: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_modified: Optional[str] = None,
                 version_id: Optional[str] = None):
        if archival_state is not None:
            pulumi.set(__self__, "archival_state", archival_state)
        if etag is not None:
            pulumi.set(__self__, "etag", etag)
        if is_delete_marker is not None:
            pulumi.set(__self__, "is_delete_marker", is_delete_marker)
        if md5 is not None:
            pulumi.set(__self__, "md5", md5)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if storage_tier is not None:
            pulumi.set(__self__, "storage_tier", storage_tier)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_modified is not None:
            pulumi.set(__self__, "time_modified", time_modified)
        if version_id is not None:
            pulumi.set(__self__, "version_id", version_id)

    @property
    @pulumi.getter(name="archivalState")
    def archival_state(self) -> Optional[str]:
        return pulumi.get(self, "archival_state")

    @property
    @pulumi.getter
    def etag(self) -> Optional[str]:
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter(name="isDeleteMarker")
    def is_delete_marker(self) -> Optional[bool]:
        return pulumi.get(self, "is_delete_marker")

    @property
    @pulumi.getter
    def md5(self) -> Optional[str]:
        return pulumi.get(self, "md5")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def size(self) -> Optional[str]:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="storageTier")
    def storage_tier(self) -> Optional[str]:
        return pulumi.get(self, "storage_tier")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeModified")
    def time_modified(self) -> Optional[str]:
        return pulumi.get(self, "time_modified")

    @property
    @pulumi.getter(name="versionId")
    def version_id(self) -> Optional[str]:
        return pulumi.get(self, "version_id")


@pulumi.output_type
class GetObjectsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetObjectsObjectResult(dict):
    def __init__(__self__, *,
                 archival_state: Optional[str] = None,
                 etag: Optional[str] = None,
                 md5: Optional[str] = None,
                 name: Optional[str] = None,
                 size: Optional[str] = None,
                 storage_tier: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_modified: Optional[str] = None):
        if archival_state is not None:
            pulumi.set(__self__, "archival_state", archival_state)
        if etag is not None:
            pulumi.set(__self__, "etag", etag)
        if md5 is not None:
            pulumi.set(__self__, "md5", md5)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if storage_tier is not None:
            pulumi.set(__self__, "storage_tier", storage_tier)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_modified is not None:
            pulumi.set(__self__, "time_modified", time_modified)

    @property
    @pulumi.getter(name="archivalState")
    def archival_state(self) -> Optional[str]:
        return pulumi.get(self, "archival_state")

    @property
    @pulumi.getter
    def etag(self) -> Optional[str]:
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter
    def md5(self) -> Optional[str]:
        return pulumi.get(self, "md5")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def size(self) -> Optional[str]:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="storageTier")
    def storage_tier(self) -> Optional[str]:
        return pulumi.get(self, "storage_tier")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeModified")
    def time_modified(self) -> Optional[str]:
        return pulumi.get(self, "time_modified")


@pulumi.output_type
class GetPreauthrequestsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetPreauthrequestsPreauthenticatedRequestResult(dict):
    def __init__(__self__, *,
                 access_type: Optional[str] = None,
                 access_uri: Optional[str] = None,
                 bucket: Optional[str] = None,
                 bucket_listing_action: Optional[str] = None,
                 full_path: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 object: Optional[str] = None,
                 object_name: Optional[str] = None,
                 par_id: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_expires: Optional[str] = None):
        if access_type is not None:
            pulumi.set(__self__, "access_type", access_type)
        if access_uri is not None:
            pulumi.set(__self__, "access_uri", access_uri)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if bucket_listing_action is not None:
            pulumi.set(__self__, "bucket_listing_action", bucket_listing_action)
        if full_path is not None:
            pulumi.set(__self__, "full_path", full_path)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if object is not None:
            pulumi.set(__self__, "object", object)
        if object_name is not None:
            pulumi.set(__self__, "object_name", object_name)
        if par_id is not None:
            pulumi.set(__self__, "par_id", par_id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_expires is not None:
            pulumi.set(__self__, "time_expires", time_expires)

    @property
    @pulumi.getter(name="accessType")
    def access_type(self) -> Optional[str]:
        return pulumi.get(self, "access_type")

    @property
    @pulumi.getter(name="accessUri")
    def access_uri(self) -> Optional[str]:
        return pulumi.get(self, "access_uri")

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="bucketListingAction")
    def bucket_listing_action(self) -> Optional[str]:
        return pulumi.get(self, "bucket_listing_action")

    @property
    @pulumi.getter(name="fullPath")
    def full_path(self) -> Optional[str]:
        return pulumi.get(self, "full_path")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> Optional[str]:
        warnings.warn("""The 'object' field has been deprecated. Please use 'object_name' instead.""", DeprecationWarning)
        pulumi.log.warn("""object is deprecated: The 'object' field has been deprecated. Please use 'object_name' instead.""")

        return pulumi.get(self, "object")

    @property
    @pulumi.getter(name="objectName")
    def object_name(self) -> Optional[str]:
        return pulumi.get(self, "object_name")

    @property
    @pulumi.getter(name="parId")
    def par_id(self) -> Optional[str]:
        return pulumi.get(self, "par_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeExpires")
    def time_expires(self) -> Optional[str]:
        return pulumi.get(self, "time_expires")


@pulumi.output_type
class GetReplicationPoliciesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetReplicationPoliciesReplicationPolicyResult(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 delete_object_in_destination_bucket: Optional[str] = None,
                 destination_bucket_name: Optional[str] = None,
                 destination_region_name: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 status: Optional[str] = None,
                 status_message: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_last_sync: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if delete_object_in_destination_bucket is not None:
            pulumi.set(__self__, "delete_object_in_destination_bucket", delete_object_in_destination_bucket)
        if destination_bucket_name is not None:
            pulumi.set(__self__, "destination_bucket_name", destination_bucket_name)
        if destination_region_name is not None:
            pulumi.set(__self__, "destination_region_name", destination_region_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if status_message is not None:
            pulumi.set(__self__, "status_message", status_message)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_last_sync is not None:
            pulumi.set(__self__, "time_last_sync", time_last_sync)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="deleteObjectInDestinationBucket")
    def delete_object_in_destination_bucket(self) -> Optional[str]:
        warnings.warn("""The 'delete_object_in_destination_bucket' field has been deprecated. It is no longer supported.""", DeprecationWarning)
        pulumi.log.warn("""delete_object_in_destination_bucket is deprecated: The 'delete_object_in_destination_bucket' field has been deprecated. It is no longer supported.""")

        return pulumi.get(self, "delete_object_in_destination_bucket")

    @property
    @pulumi.getter(name="destinationBucketName")
    def destination_bucket_name(self) -> Optional[str]:
        return pulumi.get(self, "destination_bucket_name")

    @property
    @pulumi.getter(name="destinationRegionName")
    def destination_region_name(self) -> Optional[str]:
        return pulumi.get(self, "destination_region_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusMessage")
    def status_message(self) -> Optional[str]:
        return pulumi.get(self, "status_message")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeLastSync")
    def time_last_sync(self) -> Optional[str]:
        return pulumi.get(self, "time_last_sync")


@pulumi.output_type
class GetReplicationSourcesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetReplicationSourcesReplicationSourceResult(dict):
    def __init__(__self__, *,
                 policy_name: Optional[str] = None,
                 source_bucket_name: Optional[str] = None,
                 source_region_name: Optional[str] = None):
        if policy_name is not None:
            pulumi.set(__self__, "policy_name", policy_name)
        if source_bucket_name is not None:
            pulumi.set(__self__, "source_bucket_name", source_bucket_name)
        if source_region_name is not None:
            pulumi.set(__self__, "source_region_name", source_region_name)

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[str]:
        return pulumi.get(self, "policy_name")

    @property
    @pulumi.getter(name="sourceBucketName")
    def source_bucket_name(self) -> Optional[str]:
        return pulumi.get(self, "source_bucket_name")

    @property
    @pulumi.getter(name="sourceRegionName")
    def source_region_name(self) -> Optional[str]:
        return pulumi.get(self, "source_region_name")


