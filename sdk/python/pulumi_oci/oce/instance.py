# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['InstanceArgs', 'Instance']

@pulumi.input_type
class InstanceArgs:
    def __init__(__self__, *,
                 admin_email: pulumi.Input[str],
                 compartment_id: pulumi.Input[str],
                 idcs_access_token: pulumi.Input[str],
                 object_storage_namespace: pulumi.Input[str],
                 tenancy_id: pulumi.Input[str],
                 tenancy_name: pulumi.Input[str],
                 add_on_features: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dr_region: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 instance_access_type: Optional[pulumi.Input[str]] = None,
                 instance_license_type: Optional[pulumi.Input[str]] = None,
                 instance_usage_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 upgrade_schedule: Optional[pulumi.Input[str]] = None,
                 waf_primary_domain: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Instance resource.
        :param pulumi.Input[str] admin_email: Admin Email for Notification
        :param pulumi.Input[str] compartment_id: (Updatable) Compartment Identifier
        :param pulumi.Input[str] idcs_access_token: Identity Cloud Service access token identifying a stripe and service administrator user
        :param pulumi.Input[str] object_storage_namespace: Object Storage Namespace of Tenancy
        :param pulumi.Input[str] tenancy_id: Tenancy Identifier
        :param pulumi.Input[str] tenancy_name: Tenancy Name
        :param pulumi.Input[Sequence[pulumi.Input[str]]] add_on_features: (Updatable) a list of add-on features for the ocm instance
        :param pulumi.Input[Mapping[str, Any]] defined_tags: (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"foo-namespace.bar-key": "value"}`
        :param pulumi.Input[str] description: (Updatable) OceInstance description
        :param pulumi.Input[str] dr_region: (Updatable) disaster recovery paired ragion name
        :param pulumi.Input[Mapping[str, Any]] freeform_tags: (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param pulumi.Input[str] instance_access_type: Flag indicating whether the instance access is private or public
        :param pulumi.Input[str] instance_license_type: (Updatable) Flag indicating whether the instance license is new cloud or bring your own license
        :param pulumi.Input[str] instance_usage_type: (Updatable) Instance type based on its usage
        :param pulumi.Input[str] name: OceInstance Name
        :param pulumi.Input[str] upgrade_schedule: Upgrade schedule type representing service to be upgraded immediately whenever latest version is released or delay upgrade of the service to previous released version
        :param pulumi.Input[str] waf_primary_domain: (Updatable) Web Application Firewall(WAF) primary domain
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        InstanceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            admin_email=admin_email,
            compartment_id=compartment_id,
            idcs_access_token=idcs_access_token,
            object_storage_namespace=object_storage_namespace,
            tenancy_id=tenancy_id,
            tenancy_name=tenancy_name,
            add_on_features=add_on_features,
            defined_tags=defined_tags,
            description=description,
            dr_region=dr_region,
            freeform_tags=freeform_tags,
            instance_access_type=instance_access_type,
            instance_license_type=instance_license_type,
            instance_usage_type=instance_usage_type,
            name=name,
            upgrade_schedule=upgrade_schedule,
            waf_primary_domain=waf_primary_domain,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             admin_email: pulumi.Input[str],
             compartment_id: pulumi.Input[str],
             idcs_access_token: pulumi.Input[str],
             object_storage_namespace: pulumi.Input[str],
             tenancy_id: pulumi.Input[str],
             tenancy_name: pulumi.Input[str],
             add_on_features: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             description: Optional[pulumi.Input[str]] = None,
             dr_region: Optional[pulumi.Input[str]] = None,
             freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             instance_access_type: Optional[pulumi.Input[str]] = None,
             instance_license_type: Optional[pulumi.Input[str]] = None,
             instance_usage_type: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             upgrade_schedule: Optional[pulumi.Input[str]] = None,
             waf_primary_domain: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'adminEmail' in kwargs:
            admin_email = kwargs['adminEmail']
        if 'compartmentId' in kwargs:
            compartment_id = kwargs['compartmentId']
        if 'idcsAccessToken' in kwargs:
            idcs_access_token = kwargs['idcsAccessToken']
        if 'objectStorageNamespace' in kwargs:
            object_storage_namespace = kwargs['objectStorageNamespace']
        if 'tenancyId' in kwargs:
            tenancy_id = kwargs['tenancyId']
        if 'tenancyName' in kwargs:
            tenancy_name = kwargs['tenancyName']
        if 'addOnFeatures' in kwargs:
            add_on_features = kwargs['addOnFeatures']
        if 'definedTags' in kwargs:
            defined_tags = kwargs['definedTags']
        if 'drRegion' in kwargs:
            dr_region = kwargs['drRegion']
        if 'freeformTags' in kwargs:
            freeform_tags = kwargs['freeformTags']
        if 'instanceAccessType' in kwargs:
            instance_access_type = kwargs['instanceAccessType']
        if 'instanceLicenseType' in kwargs:
            instance_license_type = kwargs['instanceLicenseType']
        if 'instanceUsageType' in kwargs:
            instance_usage_type = kwargs['instanceUsageType']
        if 'upgradeSchedule' in kwargs:
            upgrade_schedule = kwargs['upgradeSchedule']
        if 'wafPrimaryDomain' in kwargs:
            waf_primary_domain = kwargs['wafPrimaryDomain']

        _setter("admin_email", admin_email)
        _setter("compartment_id", compartment_id)
        _setter("idcs_access_token", idcs_access_token)
        _setter("object_storage_namespace", object_storage_namespace)
        _setter("tenancy_id", tenancy_id)
        _setter("tenancy_name", tenancy_name)
        if add_on_features is not None:
            _setter("add_on_features", add_on_features)
        if defined_tags is not None:
            _setter("defined_tags", defined_tags)
        if description is not None:
            _setter("description", description)
        if dr_region is not None:
            _setter("dr_region", dr_region)
        if freeform_tags is not None:
            _setter("freeform_tags", freeform_tags)
        if instance_access_type is not None:
            _setter("instance_access_type", instance_access_type)
        if instance_license_type is not None:
            _setter("instance_license_type", instance_license_type)
        if instance_usage_type is not None:
            _setter("instance_usage_type", instance_usage_type)
        if name is not None:
            _setter("name", name)
        if upgrade_schedule is not None:
            _setter("upgrade_schedule", upgrade_schedule)
        if waf_primary_domain is not None:
            _setter("waf_primary_domain", waf_primary_domain)

    @property
    @pulumi.getter(name="adminEmail")
    def admin_email(self) -> pulumi.Input[str]:
        """
        Admin Email for Notification
        """
        return pulumi.get(self, "admin_email")

    @admin_email.setter
    def admin_email(self, value: pulumi.Input[str]):
        pulumi.set(self, "admin_email", value)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Input[str]:
        """
        (Updatable) Compartment Identifier
        """
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter(name="idcsAccessToken")
    def idcs_access_token(self) -> pulumi.Input[str]:
        """
        Identity Cloud Service access token identifying a stripe and service administrator user
        """
        return pulumi.get(self, "idcs_access_token")

    @idcs_access_token.setter
    def idcs_access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "idcs_access_token", value)

    @property
    @pulumi.getter(name="objectStorageNamespace")
    def object_storage_namespace(self) -> pulumi.Input[str]:
        """
        Object Storage Namespace of Tenancy
        """
        return pulumi.get(self, "object_storage_namespace")

    @object_storage_namespace.setter
    def object_storage_namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "object_storage_namespace", value)

    @property
    @pulumi.getter(name="tenancyId")
    def tenancy_id(self) -> pulumi.Input[str]:
        """
        Tenancy Identifier
        """
        return pulumi.get(self, "tenancy_id")

    @tenancy_id.setter
    def tenancy_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "tenancy_id", value)

    @property
    @pulumi.getter(name="tenancyName")
    def tenancy_name(self) -> pulumi.Input[str]:
        """
        Tenancy Name
        """
        return pulumi.get(self, "tenancy_name")

    @tenancy_name.setter
    def tenancy_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "tenancy_name", value)

    @property
    @pulumi.getter(name="addOnFeatures")
    def add_on_features(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) a list of add-on features for the ocm instance
        """
        return pulumi.get(self, "add_on_features")

    @add_on_features.setter
    def add_on_features(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "add_on_features", value)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @defined_tags.setter
    def defined_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "defined_tags", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) OceInstance description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="drRegion")
    def dr_region(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) disaster recovery paired ragion name
        """
        return pulumi.get(self, "dr_region")

    @dr_region.setter
    def dr_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dr_region", value)

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @freeform_tags.setter
    def freeform_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "freeform_tags", value)

    @property
    @pulumi.getter(name="instanceAccessType")
    def instance_access_type(self) -> Optional[pulumi.Input[str]]:
        """
        Flag indicating whether the instance access is private or public
        """
        return pulumi.get(self, "instance_access_type")

    @instance_access_type.setter
    def instance_access_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_access_type", value)

    @property
    @pulumi.getter(name="instanceLicenseType")
    def instance_license_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Flag indicating whether the instance license is new cloud or bring your own license
        """
        return pulumi.get(self, "instance_license_type")

    @instance_license_type.setter
    def instance_license_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_license_type", value)

    @property
    @pulumi.getter(name="instanceUsageType")
    def instance_usage_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Instance type based on its usage
        """
        return pulumi.get(self, "instance_usage_type")

    @instance_usage_type.setter
    def instance_usage_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_usage_type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        OceInstance Name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="upgradeSchedule")
    def upgrade_schedule(self) -> Optional[pulumi.Input[str]]:
        """
        Upgrade schedule type representing service to be upgraded immediately whenever latest version is released or delay upgrade of the service to previous released version
        """
        return pulumi.get(self, "upgrade_schedule")

    @upgrade_schedule.setter
    def upgrade_schedule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upgrade_schedule", value)

    @property
    @pulumi.getter(name="wafPrimaryDomain")
    def waf_primary_domain(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Web Application Firewall(WAF) primary domain


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "waf_primary_domain")

    @waf_primary_domain.setter
    def waf_primary_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "waf_primary_domain", value)


@pulumi.input_type
class _InstanceState:
    def __init__(__self__, *,
                 add_on_features: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 admin_email: Optional[pulumi.Input[str]] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dr_region: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 guid: Optional[pulumi.Input[str]] = None,
                 idcs_access_token: Optional[pulumi.Input[str]] = None,
                 idcs_tenancy: Optional[pulumi.Input[str]] = None,
                 instance_access_type: Optional[pulumi.Input[str]] = None,
                 instance_license_type: Optional[pulumi.Input[str]] = None,
                 instance_usage_type: Optional[pulumi.Input[str]] = None,
                 lifecycle_details: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 object_storage_namespace: Optional[pulumi.Input[str]] = None,
                 service: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 state_message: Optional[pulumi.Input[str]] = None,
                 system_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 tenancy_id: Optional[pulumi.Input[str]] = None,
                 tenancy_name: Optional[pulumi.Input[str]] = None,
                 time_created: Optional[pulumi.Input[str]] = None,
                 time_updated: Optional[pulumi.Input[str]] = None,
                 upgrade_schedule: Optional[pulumi.Input[str]] = None,
                 waf_primary_domain: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Instance resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] add_on_features: (Updatable) a list of add-on features for the ocm instance
        :param pulumi.Input[str] admin_email: Admin Email for Notification
        :param pulumi.Input[str] compartment_id: (Updatable) Compartment Identifier
        :param pulumi.Input[Mapping[str, Any]] defined_tags: (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"foo-namespace.bar-key": "value"}`
        :param pulumi.Input[str] description: (Updatable) OceInstance description
        :param pulumi.Input[str] dr_region: (Updatable) disaster recovery paired ragion name
        :param pulumi.Input[Mapping[str, Any]] freeform_tags: (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param pulumi.Input[str] guid: Unique GUID identifier that is immutable on creation
        :param pulumi.Input[str] idcs_access_token: Identity Cloud Service access token identifying a stripe and service administrator user
        :param pulumi.Input[str] idcs_tenancy: IDCS Tenancy Identifier
        :param pulumi.Input[str] instance_access_type: Flag indicating whether the instance access is private or public
        :param pulumi.Input[str] instance_license_type: (Updatable) Flag indicating whether the instance license is new cloud or bring your own license
        :param pulumi.Input[str] instance_usage_type: (Updatable) Instance type based on its usage
        :param pulumi.Input[str] lifecycle_details: Details of the current state of the instance lifecycle
        :param pulumi.Input[str] name: OceInstance Name
        :param pulumi.Input[str] object_storage_namespace: Object Storage Namespace of Tenancy
        :param pulumi.Input[Mapping[str, Any]] service: SERVICE data. Example: `{"service": {"IDCS": "value"}}`
        :param pulumi.Input[str] state: The current state of the instance lifecycle.
        :param pulumi.Input[str] state_message: An message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param pulumi.Input[Mapping[str, Any]] system_tags: Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param pulumi.Input[str] tenancy_id: Tenancy Identifier
        :param pulumi.Input[str] tenancy_name: Tenancy Name
        :param pulumi.Input[str] time_created: The time the the OceInstance was created. An RFC3339 formatted datetime string
        :param pulumi.Input[str] time_updated: The time the OceInstance was updated. An RFC3339 formatted datetime string
        :param pulumi.Input[str] upgrade_schedule: Upgrade schedule type representing service to be upgraded immediately whenever latest version is released or delay upgrade of the service to previous released version
        :param pulumi.Input[str] waf_primary_domain: (Updatable) Web Application Firewall(WAF) primary domain
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        _InstanceState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            add_on_features=add_on_features,
            admin_email=admin_email,
            compartment_id=compartment_id,
            defined_tags=defined_tags,
            description=description,
            dr_region=dr_region,
            freeform_tags=freeform_tags,
            guid=guid,
            idcs_access_token=idcs_access_token,
            idcs_tenancy=idcs_tenancy,
            instance_access_type=instance_access_type,
            instance_license_type=instance_license_type,
            instance_usage_type=instance_usage_type,
            lifecycle_details=lifecycle_details,
            name=name,
            object_storage_namespace=object_storage_namespace,
            service=service,
            state=state,
            state_message=state_message,
            system_tags=system_tags,
            tenancy_id=tenancy_id,
            tenancy_name=tenancy_name,
            time_created=time_created,
            time_updated=time_updated,
            upgrade_schedule=upgrade_schedule,
            waf_primary_domain=waf_primary_domain,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             add_on_features: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             admin_email: Optional[pulumi.Input[str]] = None,
             compartment_id: Optional[pulumi.Input[str]] = None,
             defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             description: Optional[pulumi.Input[str]] = None,
             dr_region: Optional[pulumi.Input[str]] = None,
             freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             guid: Optional[pulumi.Input[str]] = None,
             idcs_access_token: Optional[pulumi.Input[str]] = None,
             idcs_tenancy: Optional[pulumi.Input[str]] = None,
             instance_access_type: Optional[pulumi.Input[str]] = None,
             instance_license_type: Optional[pulumi.Input[str]] = None,
             instance_usage_type: Optional[pulumi.Input[str]] = None,
             lifecycle_details: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             object_storage_namespace: Optional[pulumi.Input[str]] = None,
             service: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             state: Optional[pulumi.Input[str]] = None,
             state_message: Optional[pulumi.Input[str]] = None,
             system_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             tenancy_id: Optional[pulumi.Input[str]] = None,
             tenancy_name: Optional[pulumi.Input[str]] = None,
             time_created: Optional[pulumi.Input[str]] = None,
             time_updated: Optional[pulumi.Input[str]] = None,
             upgrade_schedule: Optional[pulumi.Input[str]] = None,
             waf_primary_domain: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'addOnFeatures' in kwargs:
            add_on_features = kwargs['addOnFeatures']
        if 'adminEmail' in kwargs:
            admin_email = kwargs['adminEmail']
        if 'compartmentId' in kwargs:
            compartment_id = kwargs['compartmentId']
        if 'definedTags' in kwargs:
            defined_tags = kwargs['definedTags']
        if 'drRegion' in kwargs:
            dr_region = kwargs['drRegion']
        if 'freeformTags' in kwargs:
            freeform_tags = kwargs['freeformTags']
        if 'idcsAccessToken' in kwargs:
            idcs_access_token = kwargs['idcsAccessToken']
        if 'idcsTenancy' in kwargs:
            idcs_tenancy = kwargs['idcsTenancy']
        if 'instanceAccessType' in kwargs:
            instance_access_type = kwargs['instanceAccessType']
        if 'instanceLicenseType' in kwargs:
            instance_license_type = kwargs['instanceLicenseType']
        if 'instanceUsageType' in kwargs:
            instance_usage_type = kwargs['instanceUsageType']
        if 'lifecycleDetails' in kwargs:
            lifecycle_details = kwargs['lifecycleDetails']
        if 'objectStorageNamespace' in kwargs:
            object_storage_namespace = kwargs['objectStorageNamespace']
        if 'stateMessage' in kwargs:
            state_message = kwargs['stateMessage']
        if 'systemTags' in kwargs:
            system_tags = kwargs['systemTags']
        if 'tenancyId' in kwargs:
            tenancy_id = kwargs['tenancyId']
        if 'tenancyName' in kwargs:
            tenancy_name = kwargs['tenancyName']
        if 'timeCreated' in kwargs:
            time_created = kwargs['timeCreated']
        if 'timeUpdated' in kwargs:
            time_updated = kwargs['timeUpdated']
        if 'upgradeSchedule' in kwargs:
            upgrade_schedule = kwargs['upgradeSchedule']
        if 'wafPrimaryDomain' in kwargs:
            waf_primary_domain = kwargs['wafPrimaryDomain']

        if add_on_features is not None:
            _setter("add_on_features", add_on_features)
        if admin_email is not None:
            _setter("admin_email", admin_email)
        if compartment_id is not None:
            _setter("compartment_id", compartment_id)
        if defined_tags is not None:
            _setter("defined_tags", defined_tags)
        if description is not None:
            _setter("description", description)
        if dr_region is not None:
            _setter("dr_region", dr_region)
        if freeform_tags is not None:
            _setter("freeform_tags", freeform_tags)
        if guid is not None:
            _setter("guid", guid)
        if idcs_access_token is not None:
            _setter("idcs_access_token", idcs_access_token)
        if idcs_tenancy is not None:
            _setter("idcs_tenancy", idcs_tenancy)
        if instance_access_type is not None:
            _setter("instance_access_type", instance_access_type)
        if instance_license_type is not None:
            _setter("instance_license_type", instance_license_type)
        if instance_usage_type is not None:
            _setter("instance_usage_type", instance_usage_type)
        if lifecycle_details is not None:
            _setter("lifecycle_details", lifecycle_details)
        if name is not None:
            _setter("name", name)
        if object_storage_namespace is not None:
            _setter("object_storage_namespace", object_storage_namespace)
        if service is not None:
            _setter("service", service)
        if state is not None:
            _setter("state", state)
        if state_message is not None:
            _setter("state_message", state_message)
        if system_tags is not None:
            _setter("system_tags", system_tags)
        if tenancy_id is not None:
            _setter("tenancy_id", tenancy_id)
        if tenancy_name is not None:
            _setter("tenancy_name", tenancy_name)
        if time_created is not None:
            _setter("time_created", time_created)
        if time_updated is not None:
            _setter("time_updated", time_updated)
        if upgrade_schedule is not None:
            _setter("upgrade_schedule", upgrade_schedule)
        if waf_primary_domain is not None:
            _setter("waf_primary_domain", waf_primary_domain)

    @property
    @pulumi.getter(name="addOnFeatures")
    def add_on_features(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) a list of add-on features for the ocm instance
        """
        return pulumi.get(self, "add_on_features")

    @add_on_features.setter
    def add_on_features(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "add_on_features", value)

    @property
    @pulumi.getter(name="adminEmail")
    def admin_email(self) -> Optional[pulumi.Input[str]]:
        """
        Admin Email for Notification
        """
        return pulumi.get(self, "admin_email")

    @admin_email.setter
    def admin_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_email", value)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Compartment Identifier
        """
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @defined_tags.setter
    def defined_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "defined_tags", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) OceInstance description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="drRegion")
    def dr_region(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) disaster recovery paired ragion name
        """
        return pulumi.get(self, "dr_region")

    @dr_region.setter
    def dr_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dr_region", value)

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @freeform_tags.setter
    def freeform_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "freeform_tags", value)

    @property
    @pulumi.getter
    def guid(self) -> Optional[pulumi.Input[str]]:
        """
        Unique GUID identifier that is immutable on creation
        """
        return pulumi.get(self, "guid")

    @guid.setter
    def guid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "guid", value)

    @property
    @pulumi.getter(name="idcsAccessToken")
    def idcs_access_token(self) -> Optional[pulumi.Input[str]]:
        """
        Identity Cloud Service access token identifying a stripe and service administrator user
        """
        return pulumi.get(self, "idcs_access_token")

    @idcs_access_token.setter
    def idcs_access_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idcs_access_token", value)

    @property
    @pulumi.getter(name="idcsTenancy")
    def idcs_tenancy(self) -> Optional[pulumi.Input[str]]:
        """
        IDCS Tenancy Identifier
        """
        return pulumi.get(self, "idcs_tenancy")

    @idcs_tenancy.setter
    def idcs_tenancy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idcs_tenancy", value)

    @property
    @pulumi.getter(name="instanceAccessType")
    def instance_access_type(self) -> Optional[pulumi.Input[str]]:
        """
        Flag indicating whether the instance access is private or public
        """
        return pulumi.get(self, "instance_access_type")

    @instance_access_type.setter
    def instance_access_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_access_type", value)

    @property
    @pulumi.getter(name="instanceLicenseType")
    def instance_license_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Flag indicating whether the instance license is new cloud or bring your own license
        """
        return pulumi.get(self, "instance_license_type")

    @instance_license_type.setter
    def instance_license_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_license_type", value)

    @property
    @pulumi.getter(name="instanceUsageType")
    def instance_usage_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Instance type based on its usage
        """
        return pulumi.get(self, "instance_usage_type")

    @instance_usage_type.setter
    def instance_usage_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_usage_type", value)

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[pulumi.Input[str]]:
        """
        Details of the current state of the instance lifecycle
        """
        return pulumi.get(self, "lifecycle_details")

    @lifecycle_details.setter
    def lifecycle_details(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lifecycle_details", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        OceInstance Name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="objectStorageNamespace")
    def object_storage_namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Object Storage Namespace of Tenancy
        """
        return pulumi.get(self, "object_storage_namespace")

    @object_storage_namespace.setter
    def object_storage_namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_storage_namespace", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        SERVICE data. Example: `{"service": {"IDCS": "value"}}`
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        The current state of the instance lifecycle.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="stateMessage")
    def state_message(self) -> Optional[pulumi.Input[str]]:
        """
        An message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "state_message")

    @state_message.setter
    def state_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state_message", value)

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @system_tags.setter
    def system_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "system_tags", value)

    @property
    @pulumi.getter(name="tenancyId")
    def tenancy_id(self) -> Optional[pulumi.Input[str]]:
        """
        Tenancy Identifier
        """
        return pulumi.get(self, "tenancy_id")

    @tenancy_id.setter
    def tenancy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenancy_id", value)

    @property
    @pulumi.getter(name="tenancyName")
    def tenancy_name(self) -> Optional[pulumi.Input[str]]:
        """
        Tenancy Name
        """
        return pulumi.get(self, "tenancy_name")

    @tenancy_name.setter
    def tenancy_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenancy_name", value)

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[pulumi.Input[str]]:
        """
        The time the the OceInstance was created. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_created")

    @time_created.setter
    def time_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_created", value)

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[pulumi.Input[str]]:
        """
        The time the OceInstance was updated. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_updated")

    @time_updated.setter
    def time_updated(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_updated", value)

    @property
    @pulumi.getter(name="upgradeSchedule")
    def upgrade_schedule(self) -> Optional[pulumi.Input[str]]:
        """
        Upgrade schedule type representing service to be upgraded immediately whenever latest version is released or delay upgrade of the service to previous released version
        """
        return pulumi.get(self, "upgrade_schedule")

    @upgrade_schedule.setter
    def upgrade_schedule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upgrade_schedule", value)

    @property
    @pulumi.getter(name="wafPrimaryDomain")
    def waf_primary_domain(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Web Application Firewall(WAF) primary domain


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "waf_primary_domain")

    @waf_primary_domain.setter
    def waf_primary_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "waf_primary_domain", value)


class Instance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 add_on_features: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 admin_email: Optional[pulumi.Input[str]] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dr_region: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 idcs_access_token: Optional[pulumi.Input[str]] = None,
                 instance_access_type: Optional[pulumi.Input[str]] = None,
                 instance_license_type: Optional[pulumi.Input[str]] = None,
                 instance_usage_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 object_storage_namespace: Optional[pulumi.Input[str]] = None,
                 tenancy_id: Optional[pulumi.Input[str]] = None,
                 tenancy_name: Optional[pulumi.Input[str]] = None,
                 upgrade_schedule: Optional[pulumi.Input[str]] = None,
                 waf_primary_domain: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        This resource provides the Oce Instance resource in Oracle Cloud Infrastructure Content and Experience service.

        Creates a new OceInstance.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_oci as oci

        test_oce_instance = oci.oce.Instance("testOceInstance",
            admin_email=var["oce_instance_admin_email"],
            compartment_id=var["compartment_id"],
            idcs_access_token=var["oce_instance_idcs_access_token"],
            object_storage_namespace=var["oce_instance_object_storage_namespace"],
            tenancy_id=oci_identity_tenancy["test_tenancy"]["id"],
            tenancy_name=oci_identity_tenancy["test_tenancy"]["name"],
            add_on_features=var["oce_instance_add_on_features"],
            defined_tags={
                "foo-namespace.bar-key": "value",
            },
            description=var["oce_instance_description"],
            dr_region=var["oce_instance_dr_region"],
            freeform_tags={
                "bar-key": "value",
            },
            instance_access_type=var["oce_instance_instance_access_type"],
            instance_license_type=var["oce_instance_instance_license_type"],
            instance_usage_type=var["oce_instance_instance_usage_type"],
            upgrade_schedule=var["oce_instance_upgrade_schedule"],
            waf_primary_domain=var["oce_instance_waf_primary_domain"])
        ```

        ## Import

        OceInstances can be imported using the `id`, e.g.

        ```sh
         $ pulumi import oci:Oce/instance:Instance test_oce_instance "id"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] add_on_features: (Updatable) a list of add-on features for the ocm instance
        :param pulumi.Input[str] admin_email: Admin Email for Notification
        :param pulumi.Input[str] compartment_id: (Updatable) Compartment Identifier
        :param pulumi.Input[Mapping[str, Any]] defined_tags: (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"foo-namespace.bar-key": "value"}`
        :param pulumi.Input[str] description: (Updatable) OceInstance description
        :param pulumi.Input[str] dr_region: (Updatable) disaster recovery paired ragion name
        :param pulumi.Input[Mapping[str, Any]] freeform_tags: (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param pulumi.Input[str] idcs_access_token: Identity Cloud Service access token identifying a stripe and service administrator user
        :param pulumi.Input[str] instance_access_type: Flag indicating whether the instance access is private or public
        :param pulumi.Input[str] instance_license_type: (Updatable) Flag indicating whether the instance license is new cloud or bring your own license
        :param pulumi.Input[str] instance_usage_type: (Updatable) Instance type based on its usage
        :param pulumi.Input[str] name: OceInstance Name
        :param pulumi.Input[str] object_storage_namespace: Object Storage Namespace of Tenancy
        :param pulumi.Input[str] tenancy_id: Tenancy Identifier
        :param pulumi.Input[str] tenancy_name: Tenancy Name
        :param pulumi.Input[str] upgrade_schedule: Upgrade schedule type representing service to be upgraded immediately whenever latest version is released or delay upgrade of the service to previous released version
        :param pulumi.Input[str] waf_primary_domain: (Updatable) Web Application Firewall(WAF) primary domain
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource provides the Oce Instance resource in Oracle Cloud Infrastructure Content and Experience service.

        Creates a new OceInstance.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_oci as oci

        test_oce_instance = oci.oce.Instance("testOceInstance",
            admin_email=var["oce_instance_admin_email"],
            compartment_id=var["compartment_id"],
            idcs_access_token=var["oce_instance_idcs_access_token"],
            object_storage_namespace=var["oce_instance_object_storage_namespace"],
            tenancy_id=oci_identity_tenancy["test_tenancy"]["id"],
            tenancy_name=oci_identity_tenancy["test_tenancy"]["name"],
            add_on_features=var["oce_instance_add_on_features"],
            defined_tags={
                "foo-namespace.bar-key": "value",
            },
            description=var["oce_instance_description"],
            dr_region=var["oce_instance_dr_region"],
            freeform_tags={
                "bar-key": "value",
            },
            instance_access_type=var["oce_instance_instance_access_type"],
            instance_license_type=var["oce_instance_instance_license_type"],
            instance_usage_type=var["oce_instance_instance_usage_type"],
            upgrade_schedule=var["oce_instance_upgrade_schedule"],
            waf_primary_domain=var["oce_instance_waf_primary_domain"])
        ```

        ## Import

        OceInstances can be imported using the `id`, e.g.

        ```sh
         $ pulumi import oci:Oce/instance:Instance test_oce_instance "id"
        ```

        :param str resource_name: The name of the resource.
        :param InstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            InstanceArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 add_on_features: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 admin_email: Optional[pulumi.Input[str]] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dr_region: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 idcs_access_token: Optional[pulumi.Input[str]] = None,
                 instance_access_type: Optional[pulumi.Input[str]] = None,
                 instance_license_type: Optional[pulumi.Input[str]] = None,
                 instance_usage_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 object_storage_namespace: Optional[pulumi.Input[str]] = None,
                 tenancy_id: Optional[pulumi.Input[str]] = None,
                 tenancy_name: Optional[pulumi.Input[str]] = None,
                 upgrade_schedule: Optional[pulumi.Input[str]] = None,
                 waf_primary_domain: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InstanceArgs.__new__(InstanceArgs)

            __props__.__dict__["add_on_features"] = add_on_features
            if admin_email is None and not opts.urn:
                raise TypeError("Missing required property 'admin_email'")
            __props__.__dict__["admin_email"] = admin_email
            if compartment_id is None and not opts.urn:
                raise TypeError("Missing required property 'compartment_id'")
            __props__.__dict__["compartment_id"] = compartment_id
            __props__.__dict__["defined_tags"] = defined_tags
            __props__.__dict__["description"] = description
            __props__.__dict__["dr_region"] = dr_region
            __props__.__dict__["freeform_tags"] = freeform_tags
            if idcs_access_token is None and not opts.urn:
                raise TypeError("Missing required property 'idcs_access_token'")
            __props__.__dict__["idcs_access_token"] = None if idcs_access_token is None else pulumi.Output.secret(idcs_access_token)
            __props__.__dict__["instance_access_type"] = instance_access_type
            __props__.__dict__["instance_license_type"] = instance_license_type
            __props__.__dict__["instance_usage_type"] = instance_usage_type
            __props__.__dict__["name"] = name
            if object_storage_namespace is None and not opts.urn:
                raise TypeError("Missing required property 'object_storage_namespace'")
            __props__.__dict__["object_storage_namespace"] = object_storage_namespace
            if tenancy_id is None and not opts.urn:
                raise TypeError("Missing required property 'tenancy_id'")
            __props__.__dict__["tenancy_id"] = tenancy_id
            if tenancy_name is None and not opts.urn:
                raise TypeError("Missing required property 'tenancy_name'")
            __props__.__dict__["tenancy_name"] = tenancy_name
            __props__.__dict__["upgrade_schedule"] = upgrade_schedule
            __props__.__dict__["waf_primary_domain"] = waf_primary_domain
            __props__.__dict__["guid"] = None
            __props__.__dict__["idcs_tenancy"] = None
            __props__.__dict__["lifecycle_details"] = None
            __props__.__dict__["service"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["state_message"] = None
            __props__.__dict__["system_tags"] = None
            __props__.__dict__["time_created"] = None
            __props__.__dict__["time_updated"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["idcsAccessToken"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Instance, __self__).__init__(
            'oci:Oce/instance:Instance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            add_on_features: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            admin_email: Optional[pulumi.Input[str]] = None,
            compartment_id: Optional[pulumi.Input[str]] = None,
            defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            description: Optional[pulumi.Input[str]] = None,
            dr_region: Optional[pulumi.Input[str]] = None,
            freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            guid: Optional[pulumi.Input[str]] = None,
            idcs_access_token: Optional[pulumi.Input[str]] = None,
            idcs_tenancy: Optional[pulumi.Input[str]] = None,
            instance_access_type: Optional[pulumi.Input[str]] = None,
            instance_license_type: Optional[pulumi.Input[str]] = None,
            instance_usage_type: Optional[pulumi.Input[str]] = None,
            lifecycle_details: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            object_storage_namespace: Optional[pulumi.Input[str]] = None,
            service: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            state: Optional[pulumi.Input[str]] = None,
            state_message: Optional[pulumi.Input[str]] = None,
            system_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            tenancy_id: Optional[pulumi.Input[str]] = None,
            tenancy_name: Optional[pulumi.Input[str]] = None,
            time_created: Optional[pulumi.Input[str]] = None,
            time_updated: Optional[pulumi.Input[str]] = None,
            upgrade_schedule: Optional[pulumi.Input[str]] = None,
            waf_primary_domain: Optional[pulumi.Input[str]] = None) -> 'Instance':
        """
        Get an existing Instance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] add_on_features: (Updatable) a list of add-on features for the ocm instance
        :param pulumi.Input[str] admin_email: Admin Email for Notification
        :param pulumi.Input[str] compartment_id: (Updatable) Compartment Identifier
        :param pulumi.Input[Mapping[str, Any]] defined_tags: (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"foo-namespace.bar-key": "value"}`
        :param pulumi.Input[str] description: (Updatable) OceInstance description
        :param pulumi.Input[str] dr_region: (Updatable) disaster recovery paired ragion name
        :param pulumi.Input[Mapping[str, Any]] freeform_tags: (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param pulumi.Input[str] guid: Unique GUID identifier that is immutable on creation
        :param pulumi.Input[str] idcs_access_token: Identity Cloud Service access token identifying a stripe and service administrator user
        :param pulumi.Input[str] idcs_tenancy: IDCS Tenancy Identifier
        :param pulumi.Input[str] instance_access_type: Flag indicating whether the instance access is private or public
        :param pulumi.Input[str] instance_license_type: (Updatable) Flag indicating whether the instance license is new cloud or bring your own license
        :param pulumi.Input[str] instance_usage_type: (Updatable) Instance type based on its usage
        :param pulumi.Input[str] lifecycle_details: Details of the current state of the instance lifecycle
        :param pulumi.Input[str] name: OceInstance Name
        :param pulumi.Input[str] object_storage_namespace: Object Storage Namespace of Tenancy
        :param pulumi.Input[Mapping[str, Any]] service: SERVICE data. Example: `{"service": {"IDCS": "value"}}`
        :param pulumi.Input[str] state: The current state of the instance lifecycle.
        :param pulumi.Input[str] state_message: An message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param pulumi.Input[Mapping[str, Any]] system_tags: Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param pulumi.Input[str] tenancy_id: Tenancy Identifier
        :param pulumi.Input[str] tenancy_name: Tenancy Name
        :param pulumi.Input[str] time_created: The time the the OceInstance was created. An RFC3339 formatted datetime string
        :param pulumi.Input[str] time_updated: The time the OceInstance was updated. An RFC3339 formatted datetime string
        :param pulumi.Input[str] upgrade_schedule: Upgrade schedule type representing service to be upgraded immediately whenever latest version is released or delay upgrade of the service to previous released version
        :param pulumi.Input[str] waf_primary_domain: (Updatable) Web Application Firewall(WAF) primary domain
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InstanceState.__new__(_InstanceState)

        __props__.__dict__["add_on_features"] = add_on_features
        __props__.__dict__["admin_email"] = admin_email
        __props__.__dict__["compartment_id"] = compartment_id
        __props__.__dict__["defined_tags"] = defined_tags
        __props__.__dict__["description"] = description
        __props__.__dict__["dr_region"] = dr_region
        __props__.__dict__["freeform_tags"] = freeform_tags
        __props__.__dict__["guid"] = guid
        __props__.__dict__["idcs_access_token"] = idcs_access_token
        __props__.__dict__["idcs_tenancy"] = idcs_tenancy
        __props__.__dict__["instance_access_type"] = instance_access_type
        __props__.__dict__["instance_license_type"] = instance_license_type
        __props__.__dict__["instance_usage_type"] = instance_usage_type
        __props__.__dict__["lifecycle_details"] = lifecycle_details
        __props__.__dict__["name"] = name
        __props__.__dict__["object_storage_namespace"] = object_storage_namespace
        __props__.__dict__["service"] = service
        __props__.__dict__["state"] = state
        __props__.__dict__["state_message"] = state_message
        __props__.__dict__["system_tags"] = system_tags
        __props__.__dict__["tenancy_id"] = tenancy_id
        __props__.__dict__["tenancy_name"] = tenancy_name
        __props__.__dict__["time_created"] = time_created
        __props__.__dict__["time_updated"] = time_updated
        __props__.__dict__["upgrade_schedule"] = upgrade_schedule
        __props__.__dict__["waf_primary_domain"] = waf_primary_domain
        return Instance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="addOnFeatures")
    def add_on_features(self) -> pulumi.Output[Sequence[str]]:
        """
        (Updatable) a list of add-on features for the ocm instance
        """
        return pulumi.get(self, "add_on_features")

    @property
    @pulumi.getter(name="adminEmail")
    def admin_email(self) -> pulumi.Output[str]:
        """
        Admin Email for Notification
        """
        return pulumi.get(self, "admin_email")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Output[str]:
        """
        (Updatable) Compartment Identifier
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> pulumi.Output[Mapping[str, Any]]:
        """
        (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        (Updatable) OceInstance description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="drRegion")
    def dr_region(self) -> pulumi.Output[str]:
        """
        (Updatable) disaster recovery paired ragion name
        """
        return pulumi.get(self, "dr_region")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> pulumi.Output[Mapping[str, Any]]:
        """
        (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def guid(self) -> pulumi.Output[str]:
        """
        Unique GUID identifier that is immutable on creation
        """
        return pulumi.get(self, "guid")

    @property
    @pulumi.getter(name="idcsAccessToken")
    def idcs_access_token(self) -> pulumi.Output[str]:
        """
        Identity Cloud Service access token identifying a stripe and service administrator user
        """
        return pulumi.get(self, "idcs_access_token")

    @property
    @pulumi.getter(name="idcsTenancy")
    def idcs_tenancy(self) -> pulumi.Output[str]:
        """
        IDCS Tenancy Identifier
        """
        return pulumi.get(self, "idcs_tenancy")

    @property
    @pulumi.getter(name="instanceAccessType")
    def instance_access_type(self) -> pulumi.Output[str]:
        """
        Flag indicating whether the instance access is private or public
        """
        return pulumi.get(self, "instance_access_type")

    @property
    @pulumi.getter(name="instanceLicenseType")
    def instance_license_type(self) -> pulumi.Output[str]:
        """
        (Updatable) Flag indicating whether the instance license is new cloud or bring your own license
        """
        return pulumi.get(self, "instance_license_type")

    @property
    @pulumi.getter(name="instanceUsageType")
    def instance_usage_type(self) -> pulumi.Output[str]:
        """
        (Updatable) Instance type based on its usage
        """
        return pulumi.get(self, "instance_usage_type")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> pulumi.Output[str]:
        """
        Details of the current state of the instance lifecycle
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        OceInstance Name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="objectStorageNamespace")
    def object_storage_namespace(self) -> pulumi.Output[str]:
        """
        Object Storage Namespace of Tenancy
        """
        return pulumi.get(self, "object_storage_namespace")

    @property
    @pulumi.getter
    def service(self) -> pulumi.Output[Mapping[str, Any]]:
        """
        SERVICE data. Example: `{"service": {"IDCS": "value"}}`
        """
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        The current state of the instance lifecycle.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="stateMessage")
    def state_message(self) -> pulumi.Output[str]:
        """
        An message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "state_message")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> pulumi.Output[Mapping[str, Any]]:
        """
        Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="tenancyId")
    def tenancy_id(self) -> pulumi.Output[str]:
        """
        Tenancy Identifier
        """
        return pulumi.get(self, "tenancy_id")

    @property
    @pulumi.getter(name="tenancyName")
    def tenancy_name(self) -> pulumi.Output[str]:
        """
        Tenancy Name
        """
        return pulumi.get(self, "tenancy_name")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> pulumi.Output[str]:
        """
        The time the the OceInstance was created. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> pulumi.Output[str]:
        """
        The time the OceInstance was updated. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="upgradeSchedule")
    def upgrade_schedule(self) -> pulumi.Output[str]:
        """
        Upgrade schedule type representing service to be upgraded immediately whenever latest version is released or delay upgrade of the service to previous released version
        """
        return pulumi.get(self, "upgrade_schedule")

    @property
    @pulumi.getter(name="wafPrimaryDomain")
    def waf_primary_domain(self) -> pulumi.Output[str]:
        """
        (Updatable) Web Application Firewall(WAF) primary domain


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "waf_primary_domain")

