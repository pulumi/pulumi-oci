# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetApiaccesscontrolApiMetadataByEntityTypesResult',
    'AwaitableGetApiaccesscontrolApiMetadataByEntityTypesResult',
    'get_apiaccesscontrol_api_metadata_by_entity_types',
    'get_apiaccesscontrol_api_metadata_by_entity_types_output',
]

@pulumi.output_type
class GetApiaccesscontrolApiMetadataByEntityTypesResult:
    """
    A collection of values returned by getApiaccesscontrolApiMetadataByEntityTypes.
    """
    def __init__(__self__, api_metadata_by_entity_type_collections=None, compartment_id=None, display_name=None, filters=None, id=None, resource_type=None, state=None):
        if api_metadata_by_entity_type_collections and not isinstance(api_metadata_by_entity_type_collections, list):
            raise TypeError("Expected argument 'api_metadata_by_entity_type_collections' to be a list")
        pulumi.set(__self__, "api_metadata_by_entity_type_collections", api_metadata_by_entity_type_collections)
        if compartment_id and not isinstance(compartment_id, str):
            raise TypeError("Expected argument 'compartment_id' to be a str")
        pulumi.set(__self__, "compartment_id", compartment_id)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="apiMetadataByEntityTypeCollections")
    def api_metadata_by_entity_type_collections(self) -> Sequence['outputs.GetApiaccesscontrolApiMetadataByEntityTypesApiMetadataByEntityTypeCollectionResult']:
        """
        The list of api_metadata_by_entity_type_collection.
        """
        return pulumi.get(self, "api_metadata_by_entity_type_collections")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[builtins.str]:
        """
        Name of the Api.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetApiaccesscontrolApiMetadataByEntityTypesFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def state(self) -> Optional[builtins.str]:
        """
        The current state of the ApiMetadata.
        """
        return pulumi.get(self, "state")


class AwaitableGetApiaccesscontrolApiMetadataByEntityTypesResult(GetApiaccesscontrolApiMetadataByEntityTypesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetApiaccesscontrolApiMetadataByEntityTypesResult(
            api_metadata_by_entity_type_collections=self.api_metadata_by_entity_type_collections,
            compartment_id=self.compartment_id,
            display_name=self.display_name,
            filters=self.filters,
            id=self.id,
            resource_type=self.resource_type,
            state=self.state)


def get_apiaccesscontrol_api_metadata_by_entity_types(compartment_id: Optional[builtins.str] = None,
                                                      display_name: Optional[builtins.str] = None,
                                                      filters: Optional[Sequence[Union['GetApiaccesscontrolApiMetadataByEntityTypesFilterArgs', 'GetApiaccesscontrolApiMetadataByEntityTypesFilterArgsDict']]] = None,
                                                      resource_type: Optional[builtins.str] = None,
                                                      state: Optional[builtins.str] = None,
                                                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetApiaccesscontrolApiMetadataByEntityTypesResult:
    """
    This data source provides the list of Api Metadata By Entity Types in Oracle Cloud Infrastructure Apiaccesscontrol service.

    Gets a list of ApiMetadata Grouped By Entity Types.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_api_metadata_by_entity_types = oci.oci.get_apiaccesscontrol_api_metadata_by_entity_types(compartment_id=compartment_id,
        display_name=api_metadata_by_entity_type_display_name,
        resource_type=api_metadata_by_entity_type_resource_type,
        state=api_metadata_by_entity_type_state)
    ```


    :param builtins.str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
    :param builtins.str display_name: A filter to return only resources that match the given display name exactly.
    :param builtins.str resource_type: A filter to return only lists of resources that match the entire given service type.
    :param builtins.str state: A filter to return only resources that match the given lifecycle state. The state value is case-insensitive.
    """
    __args__ = dict()
    __args__['compartmentId'] = compartment_id
    __args__['displayName'] = display_name
    __args__['filters'] = filters
    __args__['resourceType'] = resource_type
    __args__['state'] = state
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:oci/getApiaccesscontrolApiMetadataByEntityTypes:getApiaccesscontrolApiMetadataByEntityTypes', __args__, opts=opts, typ=GetApiaccesscontrolApiMetadataByEntityTypesResult).value

    return AwaitableGetApiaccesscontrolApiMetadataByEntityTypesResult(
        api_metadata_by_entity_type_collections=pulumi.get(__ret__, 'api_metadata_by_entity_type_collections'),
        compartment_id=pulumi.get(__ret__, 'compartment_id'),
        display_name=pulumi.get(__ret__, 'display_name'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        state=pulumi.get(__ret__, 'state'))
def get_apiaccesscontrol_api_metadata_by_entity_types_output(compartment_id: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                                                             display_name: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                                                             filters: Optional[pulumi.Input[Optional[Sequence[Union['GetApiaccesscontrolApiMetadataByEntityTypesFilterArgs', 'GetApiaccesscontrolApiMetadataByEntityTypesFilterArgsDict']]]]] = None,
                                                             resource_type: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                                                             state: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                                                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetApiaccesscontrolApiMetadataByEntityTypesResult]:
    """
    This data source provides the list of Api Metadata By Entity Types in Oracle Cloud Infrastructure Apiaccesscontrol service.

    Gets a list of ApiMetadata Grouped By Entity Types.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_api_metadata_by_entity_types = oci.oci.get_apiaccesscontrol_api_metadata_by_entity_types(compartment_id=compartment_id,
        display_name=api_metadata_by_entity_type_display_name,
        resource_type=api_metadata_by_entity_type_resource_type,
        state=api_metadata_by_entity_type_state)
    ```


    :param builtins.str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
    :param builtins.str display_name: A filter to return only resources that match the given display name exactly.
    :param builtins.str resource_type: A filter to return only lists of resources that match the entire given service type.
    :param builtins.str state: A filter to return only resources that match the given lifecycle state. The state value is case-insensitive.
    """
    __args__ = dict()
    __args__['compartmentId'] = compartment_id
    __args__['displayName'] = display_name
    __args__['filters'] = filters
    __args__['resourceType'] = resource_type
    __args__['state'] = state
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('oci:oci/getApiaccesscontrolApiMetadataByEntityTypes:getApiaccesscontrolApiMetadataByEntityTypes', __args__, opts=opts, typ=GetApiaccesscontrolApiMetadataByEntityTypesResult)
    return __ret__.apply(lambda __response__: GetApiaccesscontrolApiMetadataByEntityTypesResult(
        api_metadata_by_entity_type_collections=pulumi.get(__response__, 'api_metadata_by_entity_type_collections'),
        compartment_id=pulumi.get(__response__, 'compartment_id'),
        display_name=pulumi.get(__response__, 'display_name'),
        filters=pulumi.get(__response__, 'filters'),
        id=pulumi.get(__response__, 'id'),
        resource_type=pulumi.get(__response__, 'resource_type'),
        state=pulumi.get(__response__, 'state')))
