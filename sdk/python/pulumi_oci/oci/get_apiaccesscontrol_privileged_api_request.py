# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetApiaccesscontrolPrivilegedApiRequestResult',
    'AwaitableGetApiaccesscontrolPrivilegedApiRequestResult',
    'get_apiaccesscontrol_privileged_api_request',
    'get_apiaccesscontrol_privileged_api_request_output',
]

@pulumi.output_type
class GetApiaccesscontrolPrivilegedApiRequestResult:
    """
    A collection of values returned by getApiaccesscontrolPrivilegedApiRequest.
    """
    def __init__(__self__, approver_details=None, closure_comment=None, compartment_id=None, defined_tags=None, display_name=None, duration_in_hrs=None, entity_type=None, freeform_tags=None, id=None, lifecycle_details=None, notification_topic_id=None, number_of_approvers_required=None, privileged_api_control_id=None, privileged_api_control_name=None, privileged_api_request_id=None, privileged_operation_lists=None, reason_detail=None, reason_summary=None, request_id=None, requested_bies=None, resource_id=None, resource_name=None, resource_type=None, severity=None, state=None, state_details=None, sub_resource_name_lists=None, system_tags=None, ticket_numbers=None, time_created=None, time_requested_for_future_access=None, time_updated=None):
        if approver_details and not isinstance(approver_details, list):
            raise TypeError("Expected argument 'approver_details' to be a list")
        pulumi.set(__self__, "approver_details", approver_details)
        if closure_comment and not isinstance(closure_comment, str):
            raise TypeError("Expected argument 'closure_comment' to be a str")
        pulumi.set(__self__, "closure_comment", closure_comment)
        if compartment_id and not isinstance(compartment_id, str):
            raise TypeError("Expected argument 'compartment_id' to be a str")
        pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags and not isinstance(defined_tags, dict):
            raise TypeError("Expected argument 'defined_tags' to be a dict")
        pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if duration_in_hrs and not isinstance(duration_in_hrs, int):
            raise TypeError("Expected argument 'duration_in_hrs' to be a int")
        pulumi.set(__self__, "duration_in_hrs", duration_in_hrs)
        if entity_type and not isinstance(entity_type, str):
            raise TypeError("Expected argument 'entity_type' to be a str")
        pulumi.set(__self__, "entity_type", entity_type)
        if freeform_tags and not isinstance(freeform_tags, dict):
            raise TypeError("Expected argument 'freeform_tags' to be a dict")
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if lifecycle_details and not isinstance(lifecycle_details, str):
            raise TypeError("Expected argument 'lifecycle_details' to be a str")
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if notification_topic_id and not isinstance(notification_topic_id, str):
            raise TypeError("Expected argument 'notification_topic_id' to be a str")
        pulumi.set(__self__, "notification_topic_id", notification_topic_id)
        if number_of_approvers_required and not isinstance(number_of_approvers_required, int):
            raise TypeError("Expected argument 'number_of_approvers_required' to be a int")
        pulumi.set(__self__, "number_of_approvers_required", number_of_approvers_required)
        if privileged_api_control_id and not isinstance(privileged_api_control_id, str):
            raise TypeError("Expected argument 'privileged_api_control_id' to be a str")
        pulumi.set(__self__, "privileged_api_control_id", privileged_api_control_id)
        if privileged_api_control_name and not isinstance(privileged_api_control_name, str):
            raise TypeError("Expected argument 'privileged_api_control_name' to be a str")
        pulumi.set(__self__, "privileged_api_control_name", privileged_api_control_name)
        if privileged_api_request_id and not isinstance(privileged_api_request_id, str):
            raise TypeError("Expected argument 'privileged_api_request_id' to be a str")
        pulumi.set(__self__, "privileged_api_request_id", privileged_api_request_id)
        if privileged_operation_lists and not isinstance(privileged_operation_lists, list):
            raise TypeError("Expected argument 'privileged_operation_lists' to be a list")
        pulumi.set(__self__, "privileged_operation_lists", privileged_operation_lists)
        if reason_detail and not isinstance(reason_detail, str):
            raise TypeError("Expected argument 'reason_detail' to be a str")
        pulumi.set(__self__, "reason_detail", reason_detail)
        if reason_summary and not isinstance(reason_summary, str):
            raise TypeError("Expected argument 'reason_summary' to be a str")
        pulumi.set(__self__, "reason_summary", reason_summary)
        if request_id and not isinstance(request_id, str):
            raise TypeError("Expected argument 'request_id' to be a str")
        pulumi.set(__self__, "request_id", request_id)
        if requested_bies and not isinstance(requested_bies, list):
            raise TypeError("Expected argument 'requested_bies' to be a list")
        pulumi.set(__self__, "requested_bies", requested_bies)
        if resource_id and not isinstance(resource_id, str):
            raise TypeError("Expected argument 'resource_id' to be a str")
        pulumi.set(__self__, "resource_id", resource_id)
        if resource_name and not isinstance(resource_name, str):
            raise TypeError("Expected argument 'resource_name' to be a str")
        pulumi.set(__self__, "resource_name", resource_name)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if severity and not isinstance(severity, str):
            raise TypeError("Expected argument 'severity' to be a str")
        pulumi.set(__self__, "severity", severity)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if state_details and not isinstance(state_details, str):
            raise TypeError("Expected argument 'state_details' to be a str")
        pulumi.set(__self__, "state_details", state_details)
        if sub_resource_name_lists and not isinstance(sub_resource_name_lists, list):
            raise TypeError("Expected argument 'sub_resource_name_lists' to be a list")
        pulumi.set(__self__, "sub_resource_name_lists", sub_resource_name_lists)
        if system_tags and not isinstance(system_tags, dict):
            raise TypeError("Expected argument 'system_tags' to be a dict")
        pulumi.set(__self__, "system_tags", system_tags)
        if ticket_numbers and not isinstance(ticket_numbers, list):
            raise TypeError("Expected argument 'ticket_numbers' to be a list")
        pulumi.set(__self__, "ticket_numbers", ticket_numbers)
        if time_created and not isinstance(time_created, str):
            raise TypeError("Expected argument 'time_created' to be a str")
        pulumi.set(__self__, "time_created", time_created)
        if time_requested_for_future_access and not isinstance(time_requested_for_future_access, str):
            raise TypeError("Expected argument 'time_requested_for_future_access' to be a str")
        pulumi.set(__self__, "time_requested_for_future_access", time_requested_for_future_access)
        if time_updated and not isinstance(time_updated, str):
            raise TypeError("Expected argument 'time_updated' to be a str")
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="approverDetails")
    def approver_details(self) -> Sequence['outputs.GetApiaccesscontrolPrivilegedApiRequestApproverDetailResult']:
        """
        Contains the approver details who have approved the privilegedApi Request during the initial request.
        """
        return pulumi.get(self, "approver_details")

    @property
    @pulumi.getter(name="closureComment")
    def closure_comment(self) -> builtins.str:
        """
        The comment entered by the operator while closing the request.
        """
        return pulumi.get(self, "closure_comment")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        The OCID of the compartment that contains the access request.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        Name of the privilegedApi control. The name must be unique.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="durationInHrs")
    def duration_in_hrs(self) -> builtins.int:
        """
        Duration in hours for which access is sought on the target resource.
        """
        return pulumi.get(self, "duration_in_hrs")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> builtins.str:
        """
        entityType of resource for which the AccessRequest is applicable
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The OCID of the privilegedApi request.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> builtins.str:
        """
        more in detail about the lifeCycleState.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="notificationTopicId")
    def notification_topic_id(self) -> builtins.str:
        """
        The OCID of the Oracle Cloud Infrastructure Notification topic to publish messages related to this privileged api request.
        """
        return pulumi.get(self, "notification_topic_id")

    @property
    @pulumi.getter(name="numberOfApproversRequired")
    def number_of_approvers_required(self) -> builtins.int:
        """
        Number of approvers required to approve an privilegedApi request.
        """
        return pulumi.get(self, "number_of_approvers_required")

    @property
    @pulumi.getter(name="privilegedApiControlId")
    def privileged_api_control_id(self) -> builtins.str:
        """
        The OCID of the privilegedApi control governing the target resource.
        """
        return pulumi.get(self, "privileged_api_control_id")

    @property
    @pulumi.getter(name="privilegedApiControlName")
    def privileged_api_control_name(self) -> builtins.str:
        """
        Name of the privilegedApi control governing the target resource.
        """
        return pulumi.get(self, "privileged_api_control_name")

    @property
    @pulumi.getter(name="privilegedApiRequestId")
    def privileged_api_request_id(self) -> builtins.str:
        return pulumi.get(self, "privileged_api_request_id")

    @property
    @pulumi.getter(name="privilegedOperationLists")
    def privileged_operation_lists(self) -> Sequence['outputs.GetApiaccesscontrolPrivilegedApiRequestPrivilegedOperationListResult']:
        """
        List of api names, attributes for which approval is sought by the user.
        """
        return pulumi.get(self, "privileged_operation_lists")

    @property
    @pulumi.getter(name="reasonDetail")
    def reason_detail(self) -> builtins.str:
        """
        Reason in Detail for which the operator is requesting access on the target resource.
        """
        return pulumi.get(self, "reason_detail")

    @property
    @pulumi.getter(name="reasonSummary")
    def reason_summary(self) -> builtins.str:
        """
        Summary comment by the operator creating the access request.
        """
        return pulumi.get(self, "reason_summary")

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> builtins.str:
        """
        This is an automatic identifier generated by the system which is easier for human comprehension.
        """
        return pulumi.get(self, "request_id")

    @property
    @pulumi.getter(name="requestedBies")
    def requested_bies(self) -> Sequence[builtins.str]:
        """
        List of Users who has created this privilegedApiRequest.
        """
        return pulumi.get(self, "requested_bies")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> builtins.str:
        """
        The OCID of the target resource associated with the access request. The operator raises an access request to get approval to access the target resource.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> builtins.str:
        """
        resourceName for which the PrivilegedApiRequest is applicable
        """
        return pulumi.get(self, "resource_name")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> builtins.str:
        """
        resourceType for which the AccessRequest is applicable
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def severity(self) -> builtins.str:
        """
        Priority assigned to the access request by the operator
        """
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        The current state of the PrivilegedApiRequest.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="stateDetails")
    def state_details(self) -> builtins.str:
        """
        A message that describes the current state of the PrivilegedApiControl in more detail. For example, can be used to provide actionable information for a resource in the Failed state.
        """
        return pulumi.get(self, "state_details")

    @property
    @pulumi.getter(name="subResourceNameLists")
    def sub_resource_name_lists(self) -> Sequence[builtins.str]:
        """
        The subresource names requested for approval.
        """
        return pulumi.get(self, "sub_resource_name_lists")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace.  Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="ticketNumbers")
    def ticket_numbers(self) -> Sequence[builtins.str]:
        """
        A list of ticket numbers related to this Privileged Api Access Request, e.g. Service Request (SR) number and JIRA ticket number.
        """
        return pulumi.get(self, "ticket_numbers")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        Time when the privilegedApi request was created in [RFC 3339](https://tools.ietf.org/html/rfc3339)timestamp format. Example: '2020-05-22T21:10:29.600Z'
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeRequestedForFutureAccess")
    def time_requested_for_future_access(self) -> builtins.str:
        """
        Time in future when the user for the privilegedApi request needs to be created in [RFC 3339](https://tools.ietf.org/html/rfc3339)timestamp format. Example: '2020-05-22T21:10:29.600Z'
        """
        return pulumi.get(self, "time_requested_for_future_access")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> builtins.str:
        """
        Time when the privilegedApi request was last modified in [RFC 3339](https://tools.ietf.org/html/rfc3339)timestamp format. Example: '2020-05-22T21:10:29.600Z'
        """
        return pulumi.get(self, "time_updated")


class AwaitableGetApiaccesscontrolPrivilegedApiRequestResult(GetApiaccesscontrolPrivilegedApiRequestResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetApiaccesscontrolPrivilegedApiRequestResult(
            approver_details=self.approver_details,
            closure_comment=self.closure_comment,
            compartment_id=self.compartment_id,
            defined_tags=self.defined_tags,
            display_name=self.display_name,
            duration_in_hrs=self.duration_in_hrs,
            entity_type=self.entity_type,
            freeform_tags=self.freeform_tags,
            id=self.id,
            lifecycle_details=self.lifecycle_details,
            notification_topic_id=self.notification_topic_id,
            number_of_approvers_required=self.number_of_approvers_required,
            privileged_api_control_id=self.privileged_api_control_id,
            privileged_api_control_name=self.privileged_api_control_name,
            privileged_api_request_id=self.privileged_api_request_id,
            privileged_operation_lists=self.privileged_operation_lists,
            reason_detail=self.reason_detail,
            reason_summary=self.reason_summary,
            request_id=self.request_id,
            requested_bies=self.requested_bies,
            resource_id=self.resource_id,
            resource_name=self.resource_name,
            resource_type=self.resource_type,
            severity=self.severity,
            state=self.state,
            state_details=self.state_details,
            sub_resource_name_lists=self.sub_resource_name_lists,
            system_tags=self.system_tags,
            ticket_numbers=self.ticket_numbers,
            time_created=self.time_created,
            time_requested_for_future_access=self.time_requested_for_future_access,
            time_updated=self.time_updated)


def get_apiaccesscontrol_privileged_api_request(privileged_api_request_id: Optional[builtins.str] = None,
                                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetApiaccesscontrolPrivilegedApiRequestResult:
    """
    This data source provides details about a specific Privileged Api Request resource in Oracle Cloud Infrastructure Apiaccesscontrol service.

    Gets information about a PrivilegedApiRequest.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_privileged_api_request = oci.oci.get_apiaccesscontrol_privileged_api_request(privileged_api_request_id=test_privileged_api_request_oci_apiaccesscontrol_privileged_api_request["id"])
    ```


    :param builtins.str privileged_api_request_id: unique PrivilegedApiRequest identifier
    """
    __args__ = dict()
    __args__['privilegedApiRequestId'] = privileged_api_request_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:oci/getApiaccesscontrolPrivilegedApiRequest:getApiaccesscontrolPrivilegedApiRequest', __args__, opts=opts, typ=GetApiaccesscontrolPrivilegedApiRequestResult).value

    return AwaitableGetApiaccesscontrolPrivilegedApiRequestResult(
        approver_details=pulumi.get(__ret__, 'approver_details'),
        closure_comment=pulumi.get(__ret__, 'closure_comment'),
        compartment_id=pulumi.get(__ret__, 'compartment_id'),
        defined_tags=pulumi.get(__ret__, 'defined_tags'),
        display_name=pulumi.get(__ret__, 'display_name'),
        duration_in_hrs=pulumi.get(__ret__, 'duration_in_hrs'),
        entity_type=pulumi.get(__ret__, 'entity_type'),
        freeform_tags=pulumi.get(__ret__, 'freeform_tags'),
        id=pulumi.get(__ret__, 'id'),
        lifecycle_details=pulumi.get(__ret__, 'lifecycle_details'),
        notification_topic_id=pulumi.get(__ret__, 'notification_topic_id'),
        number_of_approvers_required=pulumi.get(__ret__, 'number_of_approvers_required'),
        privileged_api_control_id=pulumi.get(__ret__, 'privileged_api_control_id'),
        privileged_api_control_name=pulumi.get(__ret__, 'privileged_api_control_name'),
        privileged_api_request_id=pulumi.get(__ret__, 'privileged_api_request_id'),
        privileged_operation_lists=pulumi.get(__ret__, 'privileged_operation_lists'),
        reason_detail=pulumi.get(__ret__, 'reason_detail'),
        reason_summary=pulumi.get(__ret__, 'reason_summary'),
        request_id=pulumi.get(__ret__, 'request_id'),
        requested_bies=pulumi.get(__ret__, 'requested_bies'),
        resource_id=pulumi.get(__ret__, 'resource_id'),
        resource_name=pulumi.get(__ret__, 'resource_name'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        severity=pulumi.get(__ret__, 'severity'),
        state=pulumi.get(__ret__, 'state'),
        state_details=pulumi.get(__ret__, 'state_details'),
        sub_resource_name_lists=pulumi.get(__ret__, 'sub_resource_name_lists'),
        system_tags=pulumi.get(__ret__, 'system_tags'),
        ticket_numbers=pulumi.get(__ret__, 'ticket_numbers'),
        time_created=pulumi.get(__ret__, 'time_created'),
        time_requested_for_future_access=pulumi.get(__ret__, 'time_requested_for_future_access'),
        time_updated=pulumi.get(__ret__, 'time_updated'))
def get_apiaccesscontrol_privileged_api_request_output(privileged_api_request_id: Optional[pulumi.Input[builtins.str]] = None,
                                                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetApiaccesscontrolPrivilegedApiRequestResult]:
    """
    This data source provides details about a specific Privileged Api Request resource in Oracle Cloud Infrastructure Apiaccesscontrol service.

    Gets information about a PrivilegedApiRequest.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_privileged_api_request = oci.oci.get_apiaccesscontrol_privileged_api_request(privileged_api_request_id=test_privileged_api_request_oci_apiaccesscontrol_privileged_api_request["id"])
    ```


    :param builtins.str privileged_api_request_id: unique PrivilegedApiRequest identifier
    """
    __args__ = dict()
    __args__['privilegedApiRequestId'] = privileged_api_request_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('oci:oci/getApiaccesscontrolPrivilegedApiRequest:getApiaccesscontrolPrivilegedApiRequest', __args__, opts=opts, typ=GetApiaccesscontrolPrivilegedApiRequestResult)
    return __ret__.apply(lambda __response__: GetApiaccesscontrolPrivilegedApiRequestResult(
        approver_details=pulumi.get(__response__, 'approver_details'),
        closure_comment=pulumi.get(__response__, 'closure_comment'),
        compartment_id=pulumi.get(__response__, 'compartment_id'),
        defined_tags=pulumi.get(__response__, 'defined_tags'),
        display_name=pulumi.get(__response__, 'display_name'),
        duration_in_hrs=pulumi.get(__response__, 'duration_in_hrs'),
        entity_type=pulumi.get(__response__, 'entity_type'),
        freeform_tags=pulumi.get(__response__, 'freeform_tags'),
        id=pulumi.get(__response__, 'id'),
        lifecycle_details=pulumi.get(__response__, 'lifecycle_details'),
        notification_topic_id=pulumi.get(__response__, 'notification_topic_id'),
        number_of_approvers_required=pulumi.get(__response__, 'number_of_approvers_required'),
        privileged_api_control_id=pulumi.get(__response__, 'privileged_api_control_id'),
        privileged_api_control_name=pulumi.get(__response__, 'privileged_api_control_name'),
        privileged_api_request_id=pulumi.get(__response__, 'privileged_api_request_id'),
        privileged_operation_lists=pulumi.get(__response__, 'privileged_operation_lists'),
        reason_detail=pulumi.get(__response__, 'reason_detail'),
        reason_summary=pulumi.get(__response__, 'reason_summary'),
        request_id=pulumi.get(__response__, 'request_id'),
        requested_bies=pulumi.get(__response__, 'requested_bies'),
        resource_id=pulumi.get(__response__, 'resource_id'),
        resource_name=pulumi.get(__response__, 'resource_name'),
        resource_type=pulumi.get(__response__, 'resource_type'),
        severity=pulumi.get(__response__, 'severity'),
        state=pulumi.get(__response__, 'state'),
        state_details=pulumi.get(__response__, 'state_details'),
        sub_resource_name_lists=pulumi.get(__response__, 'sub_resource_name_lists'),
        system_tags=pulumi.get(__response__, 'system_tags'),
        ticket_numbers=pulumi.get(__response__, 'ticket_numbers'),
        time_created=pulumi.get(__response__, 'time_created'),
        time_requested_for_future_access=pulumi.get(__response__, 'time_requested_for_future_access'),
        time_updated=pulumi.get(__response__, 'time_updated')))
