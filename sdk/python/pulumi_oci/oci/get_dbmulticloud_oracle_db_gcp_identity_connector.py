# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetDbmulticloudOracleDbGcpIdentityConnectorResult',
    'AwaitableGetDbmulticloudOracleDbGcpIdentityConnectorResult',
    'get_dbmulticloud_oracle_db_gcp_identity_connector',
    'get_dbmulticloud_oracle_db_gcp_identity_connector_output',
]

@pulumi.output_type
class GetDbmulticloudOracleDbGcpIdentityConnectorResult:
    """
    A collection of values returned by getDbmulticloudOracleDbGcpIdentityConnector.
    """
    def __init__(__self__, compartment_id=None, defined_tags=None, display_name=None, freeform_tags=None, gcp_identity_connectivity_status=None, gcp_location=None, gcp_nodes=None, gcp_resource_service_agent_id=None, gcp_workload_identity_pool_id=None, gcp_workload_identity_provider_id=None, id=None, issuer_url=None, lifecycle_state_details=None, oracle_db_gcp_identity_connector_id=None, project_id=None, resource_id=None, state=None, system_tags=None, time_created=None, time_updated=None):
        if compartment_id and not isinstance(compartment_id, str):
            raise TypeError("Expected argument 'compartment_id' to be a str")
        pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags and not isinstance(defined_tags, dict):
            raise TypeError("Expected argument 'defined_tags' to be a dict")
        pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if freeform_tags and not isinstance(freeform_tags, dict):
            raise TypeError("Expected argument 'freeform_tags' to be a dict")
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        if gcp_identity_connectivity_status and not isinstance(gcp_identity_connectivity_status, str):
            raise TypeError("Expected argument 'gcp_identity_connectivity_status' to be a str")
        pulumi.set(__self__, "gcp_identity_connectivity_status", gcp_identity_connectivity_status)
        if gcp_location and not isinstance(gcp_location, str):
            raise TypeError("Expected argument 'gcp_location' to be a str")
        pulumi.set(__self__, "gcp_location", gcp_location)
        if gcp_nodes and not isinstance(gcp_nodes, list):
            raise TypeError("Expected argument 'gcp_nodes' to be a list")
        pulumi.set(__self__, "gcp_nodes", gcp_nodes)
        if gcp_resource_service_agent_id and not isinstance(gcp_resource_service_agent_id, str):
            raise TypeError("Expected argument 'gcp_resource_service_agent_id' to be a str")
        pulumi.set(__self__, "gcp_resource_service_agent_id", gcp_resource_service_agent_id)
        if gcp_workload_identity_pool_id and not isinstance(gcp_workload_identity_pool_id, str):
            raise TypeError("Expected argument 'gcp_workload_identity_pool_id' to be a str")
        pulumi.set(__self__, "gcp_workload_identity_pool_id", gcp_workload_identity_pool_id)
        if gcp_workload_identity_provider_id and not isinstance(gcp_workload_identity_provider_id, str):
            raise TypeError("Expected argument 'gcp_workload_identity_provider_id' to be a str")
        pulumi.set(__self__, "gcp_workload_identity_provider_id", gcp_workload_identity_provider_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if issuer_url and not isinstance(issuer_url, str):
            raise TypeError("Expected argument 'issuer_url' to be a str")
        pulumi.set(__self__, "issuer_url", issuer_url)
        if lifecycle_state_details and not isinstance(lifecycle_state_details, str):
            raise TypeError("Expected argument 'lifecycle_state_details' to be a str")
        pulumi.set(__self__, "lifecycle_state_details", lifecycle_state_details)
        if oracle_db_gcp_identity_connector_id and not isinstance(oracle_db_gcp_identity_connector_id, str):
            raise TypeError("Expected argument 'oracle_db_gcp_identity_connector_id' to be a str")
        pulumi.set(__self__, "oracle_db_gcp_identity_connector_id", oracle_db_gcp_identity_connector_id)
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        pulumi.set(__self__, "project_id", project_id)
        if resource_id and not isinstance(resource_id, str):
            raise TypeError("Expected argument 'resource_id' to be a str")
        pulumi.set(__self__, "resource_id", resource_id)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if system_tags and not isinstance(system_tags, dict):
            raise TypeError("Expected argument 'system_tags' to be a dict")
        pulumi.set(__self__, "system_tags", system_tags)
        if time_created and not isinstance(time_created, str):
            raise TypeError("Expected argument 'time_created' to be a str")
        pulumi.set(__self__, "time_created", time_created)
        if time_updated and not isinstance(time_updated, str):
            raise TypeError("Expected argument 'time_updated' to be a str")
        pulumi.set(__self__, "time_updated", time_updated)

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the Oracle DB GCP Identity Connector resource.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, _builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        Oracle DB GCP Identity Connector resource name.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, _builtins.str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @_builtins.property
    @pulumi.getter(name="gcpIdentityConnectivityStatus")
    def gcp_identity_connectivity_status(self) -> _builtins.str:
        """
        The current Connectivity status of GCP Identity Connector resource.
        """
        return pulumi.get(self, "gcp_identity_connectivity_status")

    @_builtins.property
    @pulumi.getter(name="gcpLocation")
    def gcp_location(self) -> _builtins.str:
        """
        GCP Location.
        """
        return pulumi.get(self, "gcp_location")

    @_builtins.property
    @pulumi.getter(name="gcpNodes")
    def gcp_nodes(self) -> Sequence['outputs.GetDbmulticloudOracleDbGcpIdentityConnectorGcpNodeResult']:
        """
        List of All VMs where GCP Identity Connector is configured for this VMCluster.
        """
        return pulumi.get(self, "gcp_nodes")

    @_builtins.property
    @pulumi.getter(name="gcpResourceServiceAgentId")
    def gcp_resource_service_agent_id(self) -> _builtins.str:
        """
        The ID of the GCP resource service agent.
        """
        return pulumi.get(self, "gcp_resource_service_agent_id")

    @_builtins.property
    @pulumi.getter(name="gcpWorkloadIdentityPoolId")
    def gcp_workload_identity_pool_id(self) -> _builtins.str:
        """
        The ID of the cloud GCP Workload Identity Pool.
        """
        return pulumi.get(self, "gcp_workload_identity_pool_id")

    @_builtins.property
    @pulumi.getter(name="gcpWorkloadIdentityProviderId")
    def gcp_workload_identity_provider_id(self) -> _builtins.str:
        """
        The ID of the GCP Workload Identity Provider.
        """
        return pulumi.get(self, "gcp_workload_identity_provider_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle DB GCP Identity Connector resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="issuerUrl")
    def issuer_url(self) -> _builtins.str:
        """
        OIDC token issuer Url.
        """
        return pulumi.get(self, "issuer_url")

    @_builtins.property
    @pulumi.getter(name="lifecycleStateDetails")
    def lifecycle_state_details(self) -> _builtins.str:
        """
        Description of the current lifecycle state in more detail.
        """
        return pulumi.get(self, "lifecycle_state_details")

    @_builtins.property
    @pulumi.getter(name="oracleDbGcpIdentityConnectorId")
    def oracle_db_gcp_identity_connector_id(self) -> _builtins.str:
        return pulumi.get(self, "oracle_db_gcp_identity_connector_id")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        Project id of the customer project.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> _builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the GCP VM Cluster resource.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The current lifecycle state of the GCP Identity Connector resource.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, _builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace.  Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @_builtins.property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> _builtins.str:
        """
        Time when the Oracle DB GCP Identity Connector resource was created expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format, e.g. '2020-05-22T21:10:29.600Z'
        """
        return pulumi.get(self, "time_created")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> _builtins.str:
        """
        Time when the Oracle DB GCP Identity Connector resource was last modified expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format, e.g. '2020-05-22T21:10:29.600Z'
        """
        return pulumi.get(self, "time_updated")


class AwaitableGetDbmulticloudOracleDbGcpIdentityConnectorResult(GetDbmulticloudOracleDbGcpIdentityConnectorResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDbmulticloudOracleDbGcpIdentityConnectorResult(
            compartment_id=self.compartment_id,
            defined_tags=self.defined_tags,
            display_name=self.display_name,
            freeform_tags=self.freeform_tags,
            gcp_identity_connectivity_status=self.gcp_identity_connectivity_status,
            gcp_location=self.gcp_location,
            gcp_nodes=self.gcp_nodes,
            gcp_resource_service_agent_id=self.gcp_resource_service_agent_id,
            gcp_workload_identity_pool_id=self.gcp_workload_identity_pool_id,
            gcp_workload_identity_provider_id=self.gcp_workload_identity_provider_id,
            id=self.id,
            issuer_url=self.issuer_url,
            lifecycle_state_details=self.lifecycle_state_details,
            oracle_db_gcp_identity_connector_id=self.oracle_db_gcp_identity_connector_id,
            project_id=self.project_id,
            resource_id=self.resource_id,
            state=self.state,
            system_tags=self.system_tags,
            time_created=self.time_created,
            time_updated=self.time_updated)


def get_dbmulticloud_oracle_db_gcp_identity_connector(oracle_db_gcp_identity_connector_id: Optional[_builtins.str] = None,
                                                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDbmulticloudOracleDbGcpIdentityConnectorResult:
    """
    This data source provides details about a specific Oracle Db Gcp Identity Connector resource in Oracle Cloud Infrastructure Dbmulticloud service.

    Retrieves the Oracle DB GCP Identity Connector for a specified resource [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_oracle_db_gcp_identity_connector = oci.oci.get_dbmulticloud_oracle_db_gcp_identity_connector(oracle_db_gcp_identity_connector_id=test_oracle_db_gcp_identity_connector_oci_dbmulticloud_oracle_db_gcp_identity_connector["id"])
    ```


    :param _builtins.str oracle_db_gcp_identity_connector_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle DB GCP Identity Configuration Resource.
    """
    __args__ = dict()
    __args__['oracleDbGcpIdentityConnectorId'] = oracle_db_gcp_identity_connector_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:oci/getDbmulticloudOracleDbGcpIdentityConnector:getDbmulticloudOracleDbGcpIdentityConnector', __args__, opts=opts, typ=GetDbmulticloudOracleDbGcpIdentityConnectorResult).value

    return AwaitableGetDbmulticloudOracleDbGcpIdentityConnectorResult(
        compartment_id=pulumi.get(__ret__, 'compartment_id'),
        defined_tags=pulumi.get(__ret__, 'defined_tags'),
        display_name=pulumi.get(__ret__, 'display_name'),
        freeform_tags=pulumi.get(__ret__, 'freeform_tags'),
        gcp_identity_connectivity_status=pulumi.get(__ret__, 'gcp_identity_connectivity_status'),
        gcp_location=pulumi.get(__ret__, 'gcp_location'),
        gcp_nodes=pulumi.get(__ret__, 'gcp_nodes'),
        gcp_resource_service_agent_id=pulumi.get(__ret__, 'gcp_resource_service_agent_id'),
        gcp_workload_identity_pool_id=pulumi.get(__ret__, 'gcp_workload_identity_pool_id'),
        gcp_workload_identity_provider_id=pulumi.get(__ret__, 'gcp_workload_identity_provider_id'),
        id=pulumi.get(__ret__, 'id'),
        issuer_url=pulumi.get(__ret__, 'issuer_url'),
        lifecycle_state_details=pulumi.get(__ret__, 'lifecycle_state_details'),
        oracle_db_gcp_identity_connector_id=pulumi.get(__ret__, 'oracle_db_gcp_identity_connector_id'),
        project_id=pulumi.get(__ret__, 'project_id'),
        resource_id=pulumi.get(__ret__, 'resource_id'),
        state=pulumi.get(__ret__, 'state'),
        system_tags=pulumi.get(__ret__, 'system_tags'),
        time_created=pulumi.get(__ret__, 'time_created'),
        time_updated=pulumi.get(__ret__, 'time_updated'))
def get_dbmulticloud_oracle_db_gcp_identity_connector_output(oracle_db_gcp_identity_connector_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDbmulticloudOracleDbGcpIdentityConnectorResult]:
    """
    This data source provides details about a specific Oracle Db Gcp Identity Connector resource in Oracle Cloud Infrastructure Dbmulticloud service.

    Retrieves the Oracle DB GCP Identity Connector for a specified resource [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_oracle_db_gcp_identity_connector = oci.oci.get_dbmulticloud_oracle_db_gcp_identity_connector(oracle_db_gcp_identity_connector_id=test_oracle_db_gcp_identity_connector_oci_dbmulticloud_oracle_db_gcp_identity_connector["id"])
    ```


    :param _builtins.str oracle_db_gcp_identity_connector_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle DB GCP Identity Configuration Resource.
    """
    __args__ = dict()
    __args__['oracleDbGcpIdentityConnectorId'] = oracle_db_gcp_identity_connector_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('oci:oci/getDbmulticloudOracleDbGcpIdentityConnector:getDbmulticloudOracleDbGcpIdentityConnector', __args__, opts=opts, typ=GetDbmulticloudOracleDbGcpIdentityConnectorResult)
    return __ret__.apply(lambda __response__: GetDbmulticloudOracleDbGcpIdentityConnectorResult(
        compartment_id=pulumi.get(__response__, 'compartment_id'),
        defined_tags=pulumi.get(__response__, 'defined_tags'),
        display_name=pulumi.get(__response__, 'display_name'),
        freeform_tags=pulumi.get(__response__, 'freeform_tags'),
        gcp_identity_connectivity_status=pulumi.get(__response__, 'gcp_identity_connectivity_status'),
        gcp_location=pulumi.get(__response__, 'gcp_location'),
        gcp_nodes=pulumi.get(__response__, 'gcp_nodes'),
        gcp_resource_service_agent_id=pulumi.get(__response__, 'gcp_resource_service_agent_id'),
        gcp_workload_identity_pool_id=pulumi.get(__response__, 'gcp_workload_identity_pool_id'),
        gcp_workload_identity_provider_id=pulumi.get(__response__, 'gcp_workload_identity_provider_id'),
        id=pulumi.get(__response__, 'id'),
        issuer_url=pulumi.get(__response__, 'issuer_url'),
        lifecycle_state_details=pulumi.get(__response__, 'lifecycle_state_details'),
        oracle_db_gcp_identity_connector_id=pulumi.get(__response__, 'oracle_db_gcp_identity_connector_id'),
        project_id=pulumi.get(__response__, 'project_id'),
        resource_id=pulumi.get(__response__, 'resource_id'),
        state=pulumi.get(__response__, 'state'),
        system_tags=pulumi.get(__response__, 'system_tags'),
        time_created=pulumi.get(__response__, 'time_created'),
        time_updated=pulumi.get(__response__, 'time_updated')))
