# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetManagedKafkaKafkaClusterConfigVersionsResult',
    'AwaitableGetManagedKafkaKafkaClusterConfigVersionsResult',
    'get_managed_kafka_kafka_cluster_config_versions',
    'get_managed_kafka_kafka_cluster_config_versions_output',
]

@pulumi.output_type
class GetManagedKafkaKafkaClusterConfigVersionsResult:
    """
    A collection of values returned by getManagedKafkaKafkaClusterConfigVersions.
    """
    def __init__(__self__, filters=None, id=None, kafka_cluster_config_id=None, kafka_cluster_config_version_collections=None):
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if kafka_cluster_config_id and not isinstance(kafka_cluster_config_id, str):
            raise TypeError("Expected argument 'kafka_cluster_config_id' to be a str")
        pulumi.set(__self__, "kafka_cluster_config_id", kafka_cluster_config_id)
        if kafka_cluster_config_version_collections and not isinstance(kafka_cluster_config_version_collections, list):
            raise TypeError("Expected argument 'kafka_cluster_config_version_collections' to be a list")
        pulumi.set(__self__, "kafka_cluster_config_version_collections", kafka_cluster_config_version_collections)

    @_builtins.property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetManagedKafkaKafkaClusterConfigVersionsFilterResult']]:
        return pulumi.get(self, "filters")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="kafkaClusterConfigId")
    def kafka_cluster_config_id(self) -> _builtins.str:
        return pulumi.get(self, "kafka_cluster_config_id")

    @_builtins.property
    @pulumi.getter(name="kafkaClusterConfigVersionCollections")
    def kafka_cluster_config_version_collections(self) -> Sequence['outputs.GetManagedKafkaKafkaClusterConfigVersionsKafkaClusterConfigVersionCollectionResult']:
        """
        The list of kafka_cluster_config_version_collection.
        """
        return pulumi.get(self, "kafka_cluster_config_version_collections")


class AwaitableGetManagedKafkaKafkaClusterConfigVersionsResult(GetManagedKafkaKafkaClusterConfigVersionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetManagedKafkaKafkaClusterConfigVersionsResult(
            filters=self.filters,
            id=self.id,
            kafka_cluster_config_id=self.kafka_cluster_config_id,
            kafka_cluster_config_version_collections=self.kafka_cluster_config_version_collections)


def get_managed_kafka_kafka_cluster_config_versions(filters: Optional[Sequence[Union['GetManagedKafkaKafkaClusterConfigVersionsFilterArgs', 'GetManagedKafkaKafkaClusterConfigVersionsFilterArgsDict']]] = None,
                                                    kafka_cluster_config_id: Optional[_builtins.str] = None,
                                                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetManagedKafkaKafkaClusterConfigVersionsResult:
    """
    This data source provides the list of Kafka Cluster Config Versions in Oracle Cloud Infrastructure Managed Kafka service.

    Gets a list of KafkaClusterConfig Versions.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_kafka_cluster_config_versions = oci.oci.get_managed_kafka_kafka_cluster_config_versions(kafka_cluster_config_id=test_kafka_cluster_config["id"])
    ```


    :param _builtins.str kafka_cluster_config_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the KafkaClusterConfig.
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['kafkaClusterConfigId'] = kafka_cluster_config_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:oci/getManagedKafkaKafkaClusterConfigVersions:getManagedKafkaKafkaClusterConfigVersions', __args__, opts=opts, typ=GetManagedKafkaKafkaClusterConfigVersionsResult).value

    return AwaitableGetManagedKafkaKafkaClusterConfigVersionsResult(
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        kafka_cluster_config_id=pulumi.get(__ret__, 'kafka_cluster_config_id'),
        kafka_cluster_config_version_collections=pulumi.get(__ret__, 'kafka_cluster_config_version_collections'))
def get_managed_kafka_kafka_cluster_config_versions_output(filters: Optional[pulumi.Input[Optional[Sequence[Union['GetManagedKafkaKafkaClusterConfigVersionsFilterArgs', 'GetManagedKafkaKafkaClusterConfigVersionsFilterArgsDict']]]]] = None,
                                                           kafka_cluster_config_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetManagedKafkaKafkaClusterConfigVersionsResult]:
    """
    This data source provides the list of Kafka Cluster Config Versions in Oracle Cloud Infrastructure Managed Kafka service.

    Gets a list of KafkaClusterConfig Versions.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_kafka_cluster_config_versions = oci.oci.get_managed_kafka_kafka_cluster_config_versions(kafka_cluster_config_id=test_kafka_cluster_config["id"])
    ```


    :param _builtins.str kafka_cluster_config_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the KafkaClusterConfig.
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['kafkaClusterConfigId'] = kafka_cluster_config_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('oci:oci/getManagedKafkaKafkaClusterConfigVersions:getManagedKafkaKafkaClusterConfigVersions', __args__, opts=opts, typ=GetManagedKafkaKafkaClusterConfigVersionsResult)
    return __ret__.apply(lambda __response__: GetManagedKafkaKafkaClusterConfigVersionsResult(
        filters=pulumi.get(__response__, 'filters'),
        id=pulumi.get(__response__, 'id'),
        kafka_cluster_config_id=pulumi.get(__response__, 'kafka_cluster_config_id'),
        kafka_cluster_config_version_collections=pulumi.get(__response__, 'kafka_cluster_config_version_collections')))
