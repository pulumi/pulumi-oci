# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'SddcDatastore',
    'SddcHcxOnPremLicense',
    'SddcUpgradeLicense',
    'SddcVsphereUpgradeObject',
    'GetExsiHostsEsxiHostCollectionResult',
    'GetExsiHostsFilterResult',
    'GetSddcDatastoreResult',
    'GetSddcHcxOnPremLicenseResult',
    'GetSddcUpgradeLicenseResult',
    'GetSddcVsphereUpgradeObjectResult',
    'GetSddcsFilterResult',
    'GetSddcsSddcCollectionResult',
    'GetSddcsSddcCollectionDatastoreResult',
    'GetSddcsSddcCollectionHcxOnPremLicenseResult',
    'GetSddcsSddcCollectionUpgradeLicenseResult',
    'GetSddcsSddcCollectionVsphereUpgradeObjectResult',
    'GetSupportedHostShapesFilterResult',
    'GetSupportedHostShapesItemResult',
    'GetSupportedSkusFilterResult',
    'GetSupportedSkusItemResult',
    'GetSupportedVmwareSoftwareVersionsFilterResult',
    'GetSupportedVmwareSoftwareVersionsItemResult',
]

@pulumi.output_type
class SddcDatastore(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockVolumeIds":
            suggest = "block_volume_ids"
        elif key == "datastoreType":
            suggest = "datastore_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SddcDatastore. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SddcDatastore.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SddcDatastore.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 block_volume_ids: Sequence[str],
                 datastore_type: str,
                 capacity: Optional[float] = None):
        pulumi.set(__self__, "block_volume_ids", block_volume_ids)
        pulumi.set(__self__, "datastore_type", datastore_type)
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)

    @property
    @pulumi.getter(name="blockVolumeIds")
    def block_volume_ids(self) -> Sequence[str]:
        return pulumi.get(self, "block_volume_ids")

    @property
    @pulumi.getter(name="datastoreType")
    def datastore_type(self) -> str:
        return pulumi.get(self, "datastore_type")

    @property
    @pulumi.getter
    def capacity(self) -> Optional[float]:
        return pulumi.get(self, "capacity")


@pulumi.output_type
class SddcHcxOnPremLicense(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "activationKey":
            suggest = "activation_key"
        elif key == "systemName":
            suggest = "system_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SddcHcxOnPremLicense. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SddcHcxOnPremLicense.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SddcHcxOnPremLicense.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 activation_key: Optional[str] = None,
                 status: Optional[str] = None,
                 system_name: Optional[str] = None):
        if activation_key is not None:
            pulumi.set(__self__, "activation_key", activation_key)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if system_name is not None:
            pulumi.set(__self__, "system_name", system_name)

    @property
    @pulumi.getter(name="activationKey")
    def activation_key(self) -> Optional[str]:
        return pulumi.get(self, "activation_key")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="systemName")
    def system_name(self) -> Optional[str]:
        return pulumi.get(self, "system_name")


@pulumi.output_type
class SddcUpgradeLicense(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "licenseKey":
            suggest = "license_key"
        elif key == "licenseType":
            suggest = "license_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SddcUpgradeLicense. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SddcUpgradeLicense.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SddcUpgradeLicense.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 license_key: Optional[str] = None,
                 license_type: Optional[str] = None):
        if license_key is not None:
            pulumi.set(__self__, "license_key", license_key)
        if license_type is not None:
            pulumi.set(__self__, "license_type", license_type)

    @property
    @pulumi.getter(name="licenseKey")
    def license_key(self) -> Optional[str]:
        return pulumi.get(self, "license_key")

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> Optional[str]:
        return pulumi.get(self, "license_type")


@pulumi.output_type
class SddcVsphereUpgradeObject(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "downloadLink":
            suggest = "download_link"
        elif key == "linkDescription":
            suggest = "link_description"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SddcVsphereUpgradeObject. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SddcVsphereUpgradeObject.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SddcVsphereUpgradeObject.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 download_link: Optional[str] = None,
                 link_description: Optional[str] = None):
        if download_link is not None:
            pulumi.set(__self__, "download_link", download_link)
        if link_description is not None:
            pulumi.set(__self__, "link_description", link_description)

    @property
    @pulumi.getter(name="downloadLink")
    def download_link(self) -> Optional[str]:
        return pulumi.get(self, "download_link")

    @property
    @pulumi.getter(name="linkDescription")
    def link_description(self) -> Optional[str]:
        return pulumi.get(self, "link_description")


@pulumi.output_type
class GetExsiHostsEsxiHostCollectionResult(dict):
    def __init__(__self__, *,
                 billing_contract_end_date: Optional[str] = None,
                 billing_donor_host_id: Optional[str] = None,
                 capacity_reservation_id: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 compute_availability_domain: Optional[str] = None,
                 compute_instance_id: Optional[str] = None,
                 current_sku: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 failed_esxi_host_id: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 grace_period_end_date: Optional[str] = None,
                 host_ocpu_count: Optional[float] = None,
                 host_shape_name: Optional[str] = None,
                 id: Optional[str] = None,
                 is_billing_continuation_in_progress: Optional[bool] = None,
                 is_billing_swapping_in_progress: Optional[bool] = None,
                 next_sku: Optional[str] = None,
                 non_upgraded_esxi_host_id: Optional[str] = None,
                 replacement_esxi_host_id: Optional[str] = None,
                 sddc_id: Optional[str] = None,
                 state: Optional[str] = None,
                 swap_billing_host_id: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 upgraded_replacement_esxi_host_id: Optional[str] = None,
                 vmware_software_version: Optional[str] = None):
        if billing_contract_end_date is not None:
            pulumi.set(__self__, "billing_contract_end_date", billing_contract_end_date)
        if billing_donor_host_id is not None:
            pulumi.set(__self__, "billing_donor_host_id", billing_donor_host_id)
        if capacity_reservation_id is not None:
            pulumi.set(__self__, "capacity_reservation_id", capacity_reservation_id)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if compute_availability_domain is not None:
            pulumi.set(__self__, "compute_availability_domain", compute_availability_domain)
        if compute_instance_id is not None:
            pulumi.set(__self__, "compute_instance_id", compute_instance_id)
        if current_sku is not None:
            pulumi.set(__self__, "current_sku", current_sku)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if failed_esxi_host_id is not None:
            pulumi.set(__self__, "failed_esxi_host_id", failed_esxi_host_id)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if grace_period_end_date is not None:
            pulumi.set(__self__, "grace_period_end_date", grace_period_end_date)
        if host_ocpu_count is not None:
            pulumi.set(__self__, "host_ocpu_count", host_ocpu_count)
        if host_shape_name is not None:
            pulumi.set(__self__, "host_shape_name", host_shape_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_billing_continuation_in_progress is not None:
            pulumi.set(__self__, "is_billing_continuation_in_progress", is_billing_continuation_in_progress)
        if is_billing_swapping_in_progress is not None:
            pulumi.set(__self__, "is_billing_swapping_in_progress", is_billing_swapping_in_progress)
        if next_sku is not None:
            pulumi.set(__self__, "next_sku", next_sku)
        if non_upgraded_esxi_host_id is not None:
            pulumi.set(__self__, "non_upgraded_esxi_host_id", non_upgraded_esxi_host_id)
        if replacement_esxi_host_id is not None:
            pulumi.set(__self__, "replacement_esxi_host_id", replacement_esxi_host_id)
        if sddc_id is not None:
            pulumi.set(__self__, "sddc_id", sddc_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if swap_billing_host_id is not None:
            pulumi.set(__self__, "swap_billing_host_id", swap_billing_host_id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if upgraded_replacement_esxi_host_id is not None:
            pulumi.set(__self__, "upgraded_replacement_esxi_host_id", upgraded_replacement_esxi_host_id)
        if vmware_software_version is not None:
            pulumi.set(__self__, "vmware_software_version", vmware_software_version)

    @property
    @pulumi.getter(name="billingContractEndDate")
    def billing_contract_end_date(self) -> Optional[str]:
        return pulumi.get(self, "billing_contract_end_date")

    @property
    @pulumi.getter(name="billingDonorHostId")
    def billing_donor_host_id(self) -> Optional[str]:
        warnings.warn("""This 'billing_donor_host_id' argument has been deprecated and will be computed only.""", DeprecationWarning)
        pulumi.log.warn("""billing_donor_host_id is deprecated: This 'billing_donor_host_id' argument has been deprecated and will be computed only.""")

        return pulumi.get(self, "billing_donor_host_id")

    @property
    @pulumi.getter(name="capacityReservationId")
    def capacity_reservation_id(self) -> Optional[str]:
        return pulumi.get(self, "capacity_reservation_id")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="computeAvailabilityDomain")
    def compute_availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "compute_availability_domain")

    @property
    @pulumi.getter(name="computeInstanceId")
    def compute_instance_id(self) -> Optional[str]:
        return pulumi.get(self, "compute_instance_id")

    @property
    @pulumi.getter(name="currentSku")
    def current_sku(self) -> Optional[str]:
        warnings.warn("""The 'current_sku' field has been deprecated. It is no longer supported.""", DeprecationWarning)
        pulumi.log.warn("""current_sku is deprecated: The 'current_sku' field has been deprecated. It is no longer supported.""")

        return pulumi.get(self, "current_sku")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="failedEsxiHostId")
    def failed_esxi_host_id(self) -> Optional[str]:
        warnings.warn("""This 'failed_esxi_host_id' argument has been deprecated and will be computed only.""", DeprecationWarning)
        pulumi.log.warn("""failed_esxi_host_id is deprecated: This 'failed_esxi_host_id' argument has been deprecated and will be computed only.""")

        return pulumi.get(self, "failed_esxi_host_id")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="gracePeriodEndDate")
    def grace_period_end_date(self) -> Optional[str]:
        return pulumi.get(self, "grace_period_end_date")

    @property
    @pulumi.getter(name="hostOcpuCount")
    def host_ocpu_count(self) -> Optional[float]:
        return pulumi.get(self, "host_ocpu_count")

    @property
    @pulumi.getter(name="hostShapeName")
    def host_shape_name(self) -> Optional[str]:
        return pulumi.get(self, "host_shape_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isBillingContinuationInProgress")
    def is_billing_continuation_in_progress(self) -> Optional[bool]:
        return pulumi.get(self, "is_billing_continuation_in_progress")

    @property
    @pulumi.getter(name="isBillingSwappingInProgress")
    def is_billing_swapping_in_progress(self) -> Optional[bool]:
        return pulumi.get(self, "is_billing_swapping_in_progress")

    @property
    @pulumi.getter(name="nextSku")
    def next_sku(self) -> Optional[str]:
        warnings.warn("""The 'next_sku' field has been deprecated. It is no longer supported.""", DeprecationWarning)
        pulumi.log.warn("""next_sku is deprecated: The 'next_sku' field has been deprecated. It is no longer supported.""")

        return pulumi.get(self, "next_sku")

    @property
    @pulumi.getter(name="nonUpgradedEsxiHostId")
    def non_upgraded_esxi_host_id(self) -> Optional[str]:
        warnings.warn("""This 'non_upgraded_esxi_host_id' argument has been deprecated and will be computed only.""", DeprecationWarning)
        pulumi.log.warn("""non_upgraded_esxi_host_id is deprecated: This 'non_upgraded_esxi_host_id' argument has been deprecated and will be computed only.""")

        return pulumi.get(self, "non_upgraded_esxi_host_id")

    @property
    @pulumi.getter(name="replacementEsxiHostId")
    def replacement_esxi_host_id(self) -> Optional[str]:
        return pulumi.get(self, "replacement_esxi_host_id")

    @property
    @pulumi.getter(name="sddcId")
    def sddc_id(self) -> Optional[str]:
        warnings.warn("""The 'sddc_id' field has been deprecated. Please use 'cluster_id' instead.""", DeprecationWarning)
        pulumi.log.warn("""sddc_id is deprecated: The 'sddc_id' field has been deprecated. Please use 'cluster_id' instead.""")

        return pulumi.get(self, "sddc_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="swapBillingHostId")
    def swap_billing_host_id(self) -> Optional[str]:
        return pulumi.get(self, "swap_billing_host_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="upgradedReplacementEsxiHostId")
    def upgraded_replacement_esxi_host_id(self) -> Optional[str]:
        return pulumi.get(self, "upgraded_replacement_esxi_host_id")

    @property
    @pulumi.getter(name="vmwareSoftwareVersion")
    def vmware_software_version(self) -> Optional[str]:
        return pulumi.get(self, "vmware_software_version")


@pulumi.output_type
class GetExsiHostsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSddcDatastoreResult(dict):
    def __init__(__self__, *,
                 block_volume_ids: Optional[Sequence[str]] = None,
                 capacity: Optional[float] = None,
                 datastore_type: Optional[str] = None):
        if block_volume_ids is not None:
            pulumi.set(__self__, "block_volume_ids", block_volume_ids)
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if datastore_type is not None:
            pulumi.set(__self__, "datastore_type", datastore_type)

    @property
    @pulumi.getter(name="blockVolumeIds")
    def block_volume_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "block_volume_ids")

    @property
    @pulumi.getter
    def capacity(self) -> Optional[float]:
        return pulumi.get(self, "capacity")

    @property
    @pulumi.getter(name="datastoreType")
    def datastore_type(self) -> Optional[str]:
        return pulumi.get(self, "datastore_type")


@pulumi.output_type
class GetSddcHcxOnPremLicenseResult(dict):
    def __init__(__self__, *,
                 activation_key: Optional[str] = None,
                 status: Optional[str] = None,
                 system_name: Optional[str] = None):
        if activation_key is not None:
            pulumi.set(__self__, "activation_key", activation_key)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if system_name is not None:
            pulumi.set(__self__, "system_name", system_name)

    @property
    @pulumi.getter(name="activationKey")
    def activation_key(self) -> Optional[str]:
        return pulumi.get(self, "activation_key")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="systemName")
    def system_name(self) -> Optional[str]:
        return pulumi.get(self, "system_name")


@pulumi.output_type
class GetSddcUpgradeLicenseResult(dict):
    def __init__(__self__, *,
                 license_key: Optional[str] = None,
                 license_type: Optional[str] = None):
        if license_key is not None:
            pulumi.set(__self__, "license_key", license_key)
        if license_type is not None:
            pulumi.set(__self__, "license_type", license_type)

    @property
    @pulumi.getter(name="licenseKey")
    def license_key(self) -> Optional[str]:
        return pulumi.get(self, "license_key")

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> Optional[str]:
        return pulumi.get(self, "license_type")


@pulumi.output_type
class GetSddcVsphereUpgradeObjectResult(dict):
    def __init__(__self__, *,
                 download_link: Optional[str] = None,
                 link_description: Optional[str] = None):
        if download_link is not None:
            pulumi.set(__self__, "download_link", download_link)
        if link_description is not None:
            pulumi.set(__self__, "link_description", link_description)

    @property
    @pulumi.getter(name="downloadLink")
    def download_link(self) -> Optional[str]:
        return pulumi.get(self, "download_link")

    @property
    @pulumi.getter(name="linkDescription")
    def link_description(self) -> Optional[str]:
        return pulumi.get(self, "link_description")


@pulumi.output_type
class GetSddcsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSddcsSddcCollectionResult(dict):
    def __init__(__self__, *,
                 actual_esxi_hosts_count: Optional[int] = None,
                 capacity_reservation_id: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 compute_availability_domain: Optional[str] = None,
                 datastores: Optional[Sequence['outputs.GetSddcsSddcCollectionDatastoreResult']] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 esxi_hosts_count: Optional[int] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 hcx_action: Optional[str] = None,
                 hcx_fqdn: Optional[str] = None,
                 hcx_initial_password: Optional[str] = None,
                 hcx_on_prem_key: Optional[str] = None,
                 hcx_on_prem_licenses: Optional[Sequence['outputs.GetSddcsSddcCollectionHcxOnPremLicenseResult']] = None,
                 hcx_private_ip_id: Optional[str] = None,
                 hcx_vlan_id: Optional[str] = None,
                 id: Optional[str] = None,
                 initial_host_ocpu_count: Optional[float] = None,
                 initial_host_shape_name: Optional[str] = None,
                 initial_sku: Optional[str] = None,
                 instance_display_name_prefix: Optional[str] = None,
                 is_hcx_enabled: Optional[bool] = None,
                 is_hcx_enterprise_enabled: Optional[bool] = None,
                 is_hcx_pending_downgrade: Optional[bool] = None,
                 is_shielded_instance_enabled: Optional[bool] = None,
                 is_single_host_sddc: Optional[bool] = None,
                 nsx_edge_uplink1vlan_id: Optional[str] = None,
                 nsx_edge_uplink2vlan_id: Optional[str] = None,
                 nsx_edge_uplink_ip_id: Optional[str] = None,
                 nsx_edge_vtep_vlan_id: Optional[str] = None,
                 nsx_manager_fqdn: Optional[str] = None,
                 nsx_manager_initial_password: Optional[str] = None,
                 nsx_manager_private_ip_id: Optional[str] = None,
                 nsx_manager_username: Optional[str] = None,
                 nsx_overlay_segment_name: Optional[str] = None,
                 nsx_vtep_vlan_id: Optional[str] = None,
                 provisioning_subnet_id: Optional[str] = None,
                 provisioning_vlan_id: Optional[str] = None,
                 refresh_hcx_license_status: Optional[bool] = None,
                 replication_vlan_id: Optional[str] = None,
                 reserving_hcx_on_premise_license_keys: Optional[Sequence[str]] = None,
                 ssh_authorized_keys: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_hcx_billing_cycle_end: Optional[str] = None,
                 time_hcx_license_status_updated: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 upgrade_licenses: Optional[Sequence['outputs.GetSddcsSddcCollectionUpgradeLicenseResult']] = None,
                 vcenter_fqdn: Optional[str] = None,
                 vcenter_initial_password: Optional[str] = None,
                 vcenter_private_ip_id: Optional[str] = None,
                 vcenter_username: Optional[str] = None,
                 vmotion_vlan_id: Optional[str] = None,
                 vmware_software_version: Optional[str] = None,
                 vsan_vlan_id: Optional[str] = None,
                 vsphere_upgrade_guide: Optional[str] = None,
                 vsphere_upgrade_objects: Optional[Sequence['outputs.GetSddcsSddcCollectionVsphereUpgradeObjectResult']] = None,
                 vsphere_vlan_id: Optional[str] = None,
                 workload_network_cidr: Optional[str] = None):
        if actual_esxi_hosts_count is not None:
            pulumi.set(__self__, "actual_esxi_hosts_count", actual_esxi_hosts_count)
        if capacity_reservation_id is not None:
            pulumi.set(__self__, "capacity_reservation_id", capacity_reservation_id)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if compute_availability_domain is not None:
            pulumi.set(__self__, "compute_availability_domain", compute_availability_domain)
        if datastores is not None:
            pulumi.set(__self__, "datastores", datastores)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if esxi_hosts_count is not None:
            pulumi.set(__self__, "esxi_hosts_count", esxi_hosts_count)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if hcx_action is not None:
            pulumi.set(__self__, "hcx_action", hcx_action)
        if hcx_fqdn is not None:
            pulumi.set(__self__, "hcx_fqdn", hcx_fqdn)
        if hcx_initial_password is not None:
            pulumi.set(__self__, "hcx_initial_password", hcx_initial_password)
        if hcx_on_prem_key is not None:
            pulumi.set(__self__, "hcx_on_prem_key", hcx_on_prem_key)
        if hcx_on_prem_licenses is not None:
            pulumi.set(__self__, "hcx_on_prem_licenses", hcx_on_prem_licenses)
        if hcx_private_ip_id is not None:
            pulumi.set(__self__, "hcx_private_ip_id", hcx_private_ip_id)
        if hcx_vlan_id is not None:
            pulumi.set(__self__, "hcx_vlan_id", hcx_vlan_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if initial_host_ocpu_count is not None:
            pulumi.set(__self__, "initial_host_ocpu_count", initial_host_ocpu_count)
        if initial_host_shape_name is not None:
            pulumi.set(__self__, "initial_host_shape_name", initial_host_shape_name)
        if initial_sku is not None:
            pulumi.set(__self__, "initial_sku", initial_sku)
        if instance_display_name_prefix is not None:
            pulumi.set(__self__, "instance_display_name_prefix", instance_display_name_prefix)
        if is_hcx_enabled is not None:
            pulumi.set(__self__, "is_hcx_enabled", is_hcx_enabled)
        if is_hcx_enterprise_enabled is not None:
            pulumi.set(__self__, "is_hcx_enterprise_enabled", is_hcx_enterprise_enabled)
        if is_hcx_pending_downgrade is not None:
            pulumi.set(__self__, "is_hcx_pending_downgrade", is_hcx_pending_downgrade)
        if is_shielded_instance_enabled is not None:
            pulumi.set(__self__, "is_shielded_instance_enabled", is_shielded_instance_enabled)
        if is_single_host_sddc is not None:
            pulumi.set(__self__, "is_single_host_sddc", is_single_host_sddc)
        if nsx_edge_uplink1vlan_id is not None:
            pulumi.set(__self__, "nsx_edge_uplink1vlan_id", nsx_edge_uplink1vlan_id)
        if nsx_edge_uplink2vlan_id is not None:
            pulumi.set(__self__, "nsx_edge_uplink2vlan_id", nsx_edge_uplink2vlan_id)
        if nsx_edge_uplink_ip_id is not None:
            pulumi.set(__self__, "nsx_edge_uplink_ip_id", nsx_edge_uplink_ip_id)
        if nsx_edge_vtep_vlan_id is not None:
            pulumi.set(__self__, "nsx_edge_vtep_vlan_id", nsx_edge_vtep_vlan_id)
        if nsx_manager_fqdn is not None:
            pulumi.set(__self__, "nsx_manager_fqdn", nsx_manager_fqdn)
        if nsx_manager_initial_password is not None:
            pulumi.set(__self__, "nsx_manager_initial_password", nsx_manager_initial_password)
        if nsx_manager_private_ip_id is not None:
            pulumi.set(__self__, "nsx_manager_private_ip_id", nsx_manager_private_ip_id)
        if nsx_manager_username is not None:
            pulumi.set(__self__, "nsx_manager_username", nsx_manager_username)
        if nsx_overlay_segment_name is not None:
            pulumi.set(__self__, "nsx_overlay_segment_name", nsx_overlay_segment_name)
        if nsx_vtep_vlan_id is not None:
            pulumi.set(__self__, "nsx_vtep_vlan_id", nsx_vtep_vlan_id)
        if provisioning_subnet_id is not None:
            pulumi.set(__self__, "provisioning_subnet_id", provisioning_subnet_id)
        if provisioning_vlan_id is not None:
            pulumi.set(__self__, "provisioning_vlan_id", provisioning_vlan_id)
        if refresh_hcx_license_status is not None:
            pulumi.set(__self__, "refresh_hcx_license_status", refresh_hcx_license_status)
        if replication_vlan_id is not None:
            pulumi.set(__self__, "replication_vlan_id", replication_vlan_id)
        if reserving_hcx_on_premise_license_keys is not None:
            pulumi.set(__self__, "reserving_hcx_on_premise_license_keys", reserving_hcx_on_premise_license_keys)
        if ssh_authorized_keys is not None:
            pulumi.set(__self__, "ssh_authorized_keys", ssh_authorized_keys)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_hcx_billing_cycle_end is not None:
            pulumi.set(__self__, "time_hcx_billing_cycle_end", time_hcx_billing_cycle_end)
        if time_hcx_license_status_updated is not None:
            pulumi.set(__self__, "time_hcx_license_status_updated", time_hcx_license_status_updated)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if upgrade_licenses is not None:
            pulumi.set(__self__, "upgrade_licenses", upgrade_licenses)
        if vcenter_fqdn is not None:
            pulumi.set(__self__, "vcenter_fqdn", vcenter_fqdn)
        if vcenter_initial_password is not None:
            pulumi.set(__self__, "vcenter_initial_password", vcenter_initial_password)
        if vcenter_private_ip_id is not None:
            pulumi.set(__self__, "vcenter_private_ip_id", vcenter_private_ip_id)
        if vcenter_username is not None:
            pulumi.set(__self__, "vcenter_username", vcenter_username)
        if vmotion_vlan_id is not None:
            pulumi.set(__self__, "vmotion_vlan_id", vmotion_vlan_id)
        if vmware_software_version is not None:
            pulumi.set(__self__, "vmware_software_version", vmware_software_version)
        if vsan_vlan_id is not None:
            pulumi.set(__self__, "vsan_vlan_id", vsan_vlan_id)
        if vsphere_upgrade_guide is not None:
            pulumi.set(__self__, "vsphere_upgrade_guide", vsphere_upgrade_guide)
        if vsphere_upgrade_objects is not None:
            pulumi.set(__self__, "vsphere_upgrade_objects", vsphere_upgrade_objects)
        if vsphere_vlan_id is not None:
            pulumi.set(__self__, "vsphere_vlan_id", vsphere_vlan_id)
        if workload_network_cidr is not None:
            pulumi.set(__self__, "workload_network_cidr", workload_network_cidr)

    @property
    @pulumi.getter(name="actualEsxiHostsCount")
    def actual_esxi_hosts_count(self) -> Optional[int]:
        warnings.warn("""The 'actual_esxi_hosts_count' field has been deprecated. Please use 'initial_configuration' instead.""", DeprecationWarning)
        pulumi.log.warn("""actual_esxi_hosts_count is deprecated: The 'actual_esxi_hosts_count' field has been deprecated. Please use 'initial_configuration' instead.""")

        return pulumi.get(self, "actual_esxi_hosts_count")

    @property
    @pulumi.getter(name="capacityReservationId")
    def capacity_reservation_id(self) -> Optional[str]:
        warnings.warn("""The 'capacity_reservation_id' field has been deprecated. Please use 'initial_configuration' instead.""", DeprecationWarning)
        pulumi.log.warn("""capacity_reservation_id is deprecated: The 'capacity_reservation_id' field has been deprecated. Please use 'initial_configuration' instead.""")

        return pulumi.get(self, "capacity_reservation_id")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="computeAvailabilityDomain")
    def compute_availability_domain(self) -> Optional[str]:
        warnings.warn("""The 'compute_availability_domain' field has been deprecated. Please use 'initial_configuration' instead.""", DeprecationWarning)
        pulumi.log.warn("""compute_availability_domain is deprecated: The 'compute_availability_domain' field has been deprecated. Please use 'initial_configuration' instead.""")

        return pulumi.get(self, "compute_availability_domain")

    @property
    @pulumi.getter
    def datastores(self) -> Optional[Sequence['outputs.GetSddcsSddcCollectionDatastoreResult']]:
        warnings.warn("""The 'datastores' field has been deprecated. Please use 'initial_configuration' instead.""", DeprecationWarning)
        pulumi.log.warn("""datastores is deprecated: The 'datastores' field has been deprecated. Please use 'initial_configuration' instead.""")

        return pulumi.get(self, "datastores")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="esxiHostsCount")
    def esxi_hosts_count(self) -> Optional[int]:
        warnings.warn("""The 'esxi_hosts_count' field has been deprecated. Please use 'initial_configuration' instead.""", DeprecationWarning)
        pulumi.log.warn("""esxi_hosts_count is deprecated: The 'esxi_hosts_count' field has been deprecated. Please use 'initial_configuration' instead.""")

        return pulumi.get(self, "esxi_hosts_count")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="hcxAction")
    def hcx_action(self) -> Optional[str]:
        return pulumi.get(self, "hcx_action")

    @property
    @pulumi.getter(name="hcxFqdn")
    def hcx_fqdn(self) -> Optional[str]:
        return pulumi.get(self, "hcx_fqdn")

    @property
    @pulumi.getter(name="hcxInitialPassword")
    def hcx_initial_password(self) -> Optional[str]:
        warnings.warn("""The 'hcx_initial_password' field has been deprecated. Please use the 'ocvp_sddc_password' data source instead.""", DeprecationWarning)
        pulumi.log.warn("""hcx_initial_password is deprecated: The 'hcx_initial_password' field has been deprecated. Please use the 'ocvp_sddc_password' data source instead.""")

        return pulumi.get(self, "hcx_initial_password")

    @property
    @pulumi.getter(name="hcxOnPremKey")
    def hcx_on_prem_key(self) -> Optional[str]:
        warnings.warn("""The 'hcx_on_prem_key' field has been deprecated and may be removed in a future version. Do not use this field.""", DeprecationWarning)
        pulumi.log.warn("""hcx_on_prem_key is deprecated: The 'hcx_on_prem_key' field has been deprecated and may be removed in a future version. Do not use this field.""")

        return pulumi.get(self, "hcx_on_prem_key")

    @property
    @pulumi.getter(name="hcxOnPremLicenses")
    def hcx_on_prem_licenses(self) -> Optional[Sequence['outputs.GetSddcsSddcCollectionHcxOnPremLicenseResult']]:
        return pulumi.get(self, "hcx_on_prem_licenses")

    @property
    @pulumi.getter(name="hcxPrivateIpId")
    def hcx_private_ip_id(self) -> Optional[str]:
        return pulumi.get(self, "hcx_private_ip_id")

    @property
    @pulumi.getter(name="hcxVlanId")
    def hcx_vlan_id(self) -> Optional[str]:
        warnings.warn("""The 'hcx_vlan_id' field has been deprecated. Please use 'initial_configuration' instead.""", DeprecationWarning)
        pulumi.log.warn("""hcx_vlan_id is deprecated: The 'hcx_vlan_id' field has been deprecated. Please use 'initial_configuration' instead.""")

        return pulumi.get(self, "hcx_vlan_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="initialHostOcpuCount")
    def initial_host_ocpu_count(self) -> Optional[float]:
        warnings.warn("""The 'initial_host_ocpu_count' field has been deprecated. Please use 'initial_configuration' instead.""", DeprecationWarning)
        pulumi.log.warn("""initial_host_ocpu_count is deprecated: The 'initial_host_ocpu_count' field has been deprecated. Please use 'initial_configuration' instead.""")

        return pulumi.get(self, "initial_host_ocpu_count")

    @property
    @pulumi.getter(name="initialHostShapeName")
    def initial_host_shape_name(self) -> Optional[str]:
        warnings.warn("""The 'initial_host_shape_name' field has been deprecated. Please use 'initial_configuration' instead.""", DeprecationWarning)
        pulumi.log.warn("""initial_host_shape_name is deprecated: The 'initial_host_shape_name' field has been deprecated. Please use 'initial_configuration' instead.""")

        return pulumi.get(self, "initial_host_shape_name")

    @property
    @pulumi.getter(name="initialSku")
    def initial_sku(self) -> Optional[str]:
        warnings.warn("""The 'initial_sku' field has been deprecated. Please use 'initial_configuration' instead.""", DeprecationWarning)
        pulumi.log.warn("""initial_sku is deprecated: The 'initial_sku' field has been deprecated. Please use 'initial_configuration' instead.""")

        return pulumi.get(self, "initial_sku")

    @property
    @pulumi.getter(name="instanceDisplayNamePrefix")
    def instance_display_name_prefix(self) -> Optional[str]:
        warnings.warn("""The 'instance_display_name_prefix' field has been deprecated. Please use 'initial_configuration' instead.""", DeprecationWarning)
        pulumi.log.warn("""instance_display_name_prefix is deprecated: The 'instance_display_name_prefix' field has been deprecated. Please use 'initial_configuration' instead.""")

        return pulumi.get(self, "instance_display_name_prefix")

    @property
    @pulumi.getter(name="isHcxEnabled")
    def is_hcx_enabled(self) -> Optional[bool]:
        warnings.warn("""The 'is_hcx_enabled' field has been deprecated. Please use 'hcx_mode' instead.""", DeprecationWarning)
        pulumi.log.warn("""is_hcx_enabled is deprecated: The 'is_hcx_enabled' field has been deprecated. Please use 'hcx_mode' instead.""")

        return pulumi.get(self, "is_hcx_enabled")

    @property
    @pulumi.getter(name="isHcxEnterpriseEnabled")
    def is_hcx_enterprise_enabled(self) -> Optional[bool]:
        warnings.warn("""The 'is_hcx_enabled' field has been deprecated. Please use 'actual_hcx_mode' instead.""", DeprecationWarning)
        pulumi.log.warn("""is_hcx_enterprise_enabled is deprecated: The 'is_hcx_enabled' field has been deprecated. Please use 'actual_hcx_mode' instead.""")

        return pulumi.get(self, "is_hcx_enterprise_enabled")

    @property
    @pulumi.getter(name="isHcxPendingDowngrade")
    def is_hcx_pending_downgrade(self) -> Optional[bool]:
        return pulumi.get(self, "is_hcx_pending_downgrade")

    @property
    @pulumi.getter(name="isShieldedInstanceEnabled")
    def is_shielded_instance_enabled(self) -> Optional[bool]:
        warnings.warn("""The 'is_shielded_instance_enabled' field has been deprecated. Please use 'initial_configuration' instead.""", DeprecationWarning)
        pulumi.log.warn("""is_shielded_instance_enabled is deprecated: The 'is_shielded_instance_enabled' field has been deprecated. Please use 'initial_configuration' instead.""")

        return pulumi.get(self, "is_shielded_instance_enabled")

    @property
    @pulumi.getter(name="isSingleHostSddc")
    def is_single_host_sddc(self) -> Optional[bool]:
        return pulumi.get(self, "is_single_host_sddc")

    @property
    @pulumi.getter(name="nsxEdgeUplink1vlanId")
    def nsx_edge_uplink1vlan_id(self) -> Optional[str]:
        warnings.warn("""The 'nsx_edge_uplink1vlan_id' field has been deprecated. Please use 'initial_configuration' instead.""", DeprecationWarning)
        pulumi.log.warn("""nsx_edge_uplink1vlan_id is deprecated: The 'nsx_edge_uplink1vlan_id' field has been deprecated. Please use 'initial_configuration' instead.""")

        return pulumi.get(self, "nsx_edge_uplink1vlan_id")

    @property
    @pulumi.getter(name="nsxEdgeUplink2vlanId")
    def nsx_edge_uplink2vlan_id(self) -> Optional[str]:
        warnings.warn("""The 'nsx_edge_uplink2vlan_id' field has been deprecated. Please use 'initial_configuration' instead.""", DeprecationWarning)
        pulumi.log.warn("""nsx_edge_uplink2vlan_id is deprecated: The 'nsx_edge_uplink2vlan_id' field has been deprecated. Please use 'initial_configuration' instead.""")

        return pulumi.get(self, "nsx_edge_uplink2vlan_id")

    @property
    @pulumi.getter(name="nsxEdgeUplinkIpId")
    def nsx_edge_uplink_ip_id(self) -> Optional[str]:
        return pulumi.get(self, "nsx_edge_uplink_ip_id")

    @property
    @pulumi.getter(name="nsxEdgeVtepVlanId")
    def nsx_edge_vtep_vlan_id(self) -> Optional[str]:
        warnings.warn("""The 'nsx_edge_vtep_vlan_id' field has been deprecated. Please use 'initial_configuration' instead.""", DeprecationWarning)
        pulumi.log.warn("""nsx_edge_vtep_vlan_id is deprecated: The 'nsx_edge_vtep_vlan_id' field has been deprecated. Please use 'initial_configuration' instead.""")

        return pulumi.get(self, "nsx_edge_vtep_vlan_id")

    @property
    @pulumi.getter(name="nsxManagerFqdn")
    def nsx_manager_fqdn(self) -> Optional[str]:
        return pulumi.get(self, "nsx_manager_fqdn")

    @property
    @pulumi.getter(name="nsxManagerInitialPassword")
    def nsx_manager_initial_password(self) -> Optional[str]:
        warnings.warn("""The 'nsx_manager_initial_password' field has been deprecated. Please use the 'ocvp_sddc_password' data source instead.""", DeprecationWarning)
        pulumi.log.warn("""nsx_manager_initial_password is deprecated: The 'nsx_manager_initial_password' field has been deprecated. Please use the 'ocvp_sddc_password' data source instead.""")

        return pulumi.get(self, "nsx_manager_initial_password")

    @property
    @pulumi.getter(name="nsxManagerPrivateIpId")
    def nsx_manager_private_ip_id(self) -> Optional[str]:
        return pulumi.get(self, "nsx_manager_private_ip_id")

    @property
    @pulumi.getter(name="nsxManagerUsername")
    def nsx_manager_username(self) -> Optional[str]:
        return pulumi.get(self, "nsx_manager_username")

    @property
    @pulumi.getter(name="nsxOverlaySegmentName")
    def nsx_overlay_segment_name(self) -> Optional[str]:
        warnings.warn("""The 'nsx_overlay_segment_name' field has been deprecated and may be removed in a future version. Do not use this field.""", DeprecationWarning)
        pulumi.log.warn("""nsx_overlay_segment_name is deprecated: The 'nsx_overlay_segment_name' field has been deprecated and may be removed in a future version. Do not use this field.""")

        return pulumi.get(self, "nsx_overlay_segment_name")

    @property
    @pulumi.getter(name="nsxVtepVlanId")
    def nsx_vtep_vlan_id(self) -> Optional[str]:
        warnings.warn("""The 'nsx_vtep_vlan_id' field has been deprecated. Please use 'initial_configuration' instead.""", DeprecationWarning)
        pulumi.log.warn("""nsx_vtep_vlan_id is deprecated: The 'nsx_vtep_vlan_id' field has been deprecated. Please use 'initial_configuration' instead.""")

        return pulumi.get(self, "nsx_vtep_vlan_id")

    @property
    @pulumi.getter(name="provisioningSubnetId")
    def provisioning_subnet_id(self) -> Optional[str]:
        warnings.warn("""The 'provisioning_subnet_id' field has been deprecated. Please use 'initial_configuration' instead.""", DeprecationWarning)
        pulumi.log.warn("""provisioning_subnet_id is deprecated: The 'provisioning_subnet_id' field has been deprecated. Please use 'initial_configuration' instead.""")

        return pulumi.get(self, "provisioning_subnet_id")

    @property
    @pulumi.getter(name="provisioningVlanId")
    def provisioning_vlan_id(self) -> Optional[str]:
        warnings.warn("""The 'provisioning_vlan_id' field has been deprecated. Please use 'initial_configuration' instead.""", DeprecationWarning)
        pulumi.log.warn("""provisioning_vlan_id is deprecated: The 'provisioning_vlan_id' field has been deprecated. Please use 'initial_configuration' instead.""")

        return pulumi.get(self, "provisioning_vlan_id")

    @property
    @pulumi.getter(name="refreshHcxLicenseStatus")
    def refresh_hcx_license_status(self) -> Optional[bool]:
        return pulumi.get(self, "refresh_hcx_license_status")

    @property
    @pulumi.getter(name="replicationVlanId")
    def replication_vlan_id(self) -> Optional[str]:
        warnings.warn("""The 'replication_vlan_id' field has been deprecated. Please use 'initial_configuration' instead.""", DeprecationWarning)
        pulumi.log.warn("""replication_vlan_id is deprecated: The 'replication_vlan_id' field has been deprecated. Please use 'initial_configuration' instead.""")

        return pulumi.get(self, "replication_vlan_id")

    @property
    @pulumi.getter(name="reservingHcxOnPremiseLicenseKeys")
    def reserving_hcx_on_premise_license_keys(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "reserving_hcx_on_premise_license_keys")

    @property
    @pulumi.getter(name="sshAuthorizedKeys")
    def ssh_authorized_keys(self) -> Optional[str]:
        return pulumi.get(self, "ssh_authorized_keys")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeHcxBillingCycleEnd")
    def time_hcx_billing_cycle_end(self) -> Optional[str]:
        return pulumi.get(self, "time_hcx_billing_cycle_end")

    @property
    @pulumi.getter(name="timeHcxLicenseStatusUpdated")
    def time_hcx_license_status_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_hcx_license_status_updated")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="upgradeLicenses")
    def upgrade_licenses(self) -> Optional[Sequence['outputs.GetSddcsSddcCollectionUpgradeLicenseResult']]:
        warnings.warn("""The 'upgrade_licenses' field has been deprecated. Please use the 'ocvp_cluster_resource' resource instead.""", DeprecationWarning)
        pulumi.log.warn("""upgrade_licenses is deprecated: The 'upgrade_licenses' field has been deprecated. Please use the 'ocvp_cluster_resource' resource instead.""")

        return pulumi.get(self, "upgrade_licenses")

    @property
    @pulumi.getter(name="vcenterFqdn")
    def vcenter_fqdn(self) -> Optional[str]:
        return pulumi.get(self, "vcenter_fqdn")

    @property
    @pulumi.getter(name="vcenterInitialPassword")
    def vcenter_initial_password(self) -> Optional[str]:
        warnings.warn("""The 'vcenter_initial_password' field has been deprecated. Please use the 'ocvp_sddc_password' data source instead.""", DeprecationWarning)
        pulumi.log.warn("""vcenter_initial_password is deprecated: The 'vcenter_initial_password' field has been deprecated. Please use the 'ocvp_sddc_password' data source instead.""")

        return pulumi.get(self, "vcenter_initial_password")

    @property
    @pulumi.getter(name="vcenterPrivateIpId")
    def vcenter_private_ip_id(self) -> Optional[str]:
        return pulumi.get(self, "vcenter_private_ip_id")

    @property
    @pulumi.getter(name="vcenterUsername")
    def vcenter_username(self) -> Optional[str]:
        return pulumi.get(self, "vcenter_username")

    @property
    @pulumi.getter(name="vmotionVlanId")
    def vmotion_vlan_id(self) -> Optional[str]:
        warnings.warn("""The 'vmotion_vlan_id' field has been deprecated. Please use 'initial_configuration' instead.""", DeprecationWarning)
        pulumi.log.warn("""vmotion_vlan_id is deprecated: The 'vmotion_vlan_id' field has been deprecated. Please use 'initial_configuration' instead.""")

        return pulumi.get(self, "vmotion_vlan_id")

    @property
    @pulumi.getter(name="vmwareSoftwareVersion")
    def vmware_software_version(self) -> Optional[str]:
        return pulumi.get(self, "vmware_software_version")

    @property
    @pulumi.getter(name="vsanVlanId")
    def vsan_vlan_id(self) -> Optional[str]:
        warnings.warn("""The 'vsan_vlan_id' field has been deprecated. Please use 'initial_configuration' instead.""", DeprecationWarning)
        pulumi.log.warn("""vsan_vlan_id is deprecated: The 'vsan_vlan_id' field has been deprecated. Please use 'initial_configuration' instead.""")

        return pulumi.get(self, "vsan_vlan_id")

    @property
    @pulumi.getter(name="vsphereUpgradeGuide")
    def vsphere_upgrade_guide(self) -> Optional[str]:
        warnings.warn("""The 'vsphere_upgrade_guide' field has been deprecated and may be removed in a future version. Do not use this field.""", DeprecationWarning)
        pulumi.log.warn("""vsphere_upgrade_guide is deprecated: The 'vsphere_upgrade_guide' field has been deprecated and may be removed in a future version. Do not use this field.""")

        return pulumi.get(self, "vsphere_upgrade_guide")

    @property
    @pulumi.getter(name="vsphereUpgradeObjects")
    def vsphere_upgrade_objects(self) -> Optional[Sequence['outputs.GetSddcsSddcCollectionVsphereUpgradeObjectResult']]:
        warnings.warn("""The 'upgrade_licenses' field has been deprecated. Please use the 'ocvp_cluster_resource' resource instead.""", DeprecationWarning)
        pulumi.log.warn("""vsphere_upgrade_objects is deprecated: The 'upgrade_licenses' field has been deprecated. Please use the 'ocvp_cluster_resource' resource instead.""")

        return pulumi.get(self, "vsphere_upgrade_objects")

    @property
    @pulumi.getter(name="vsphereVlanId")
    def vsphere_vlan_id(self) -> Optional[str]:
        warnings.warn("""The 'vsphere_vlan_id' field has been deprecated. Please use 'initial_configuration' instead.""", DeprecationWarning)
        pulumi.log.warn("""vsphere_vlan_id is deprecated: The 'vsphere_vlan_id' field has been deprecated. Please use 'initial_configuration' instead.""")

        return pulumi.get(self, "vsphere_vlan_id")

    @property
    @pulumi.getter(name="workloadNetworkCidr")
    def workload_network_cidr(self) -> Optional[str]:
        warnings.warn("""The 'workload_network_cidr' field has been deprecated. Please use 'initial_configuration' instead.""", DeprecationWarning)
        pulumi.log.warn("""workload_network_cidr is deprecated: The 'workload_network_cidr' field has been deprecated. Please use 'initial_configuration' instead.""")

        return pulumi.get(self, "workload_network_cidr")


@pulumi.output_type
class GetSddcsSddcCollectionDatastoreResult(dict):
    def __init__(__self__, *,
                 block_volume_ids: Optional[Sequence[str]] = None,
                 capacity: Optional[float] = None,
                 datastore_type: Optional[str] = None):
        if block_volume_ids is not None:
            pulumi.set(__self__, "block_volume_ids", block_volume_ids)
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if datastore_type is not None:
            pulumi.set(__self__, "datastore_type", datastore_type)

    @property
    @pulumi.getter(name="blockVolumeIds")
    def block_volume_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "block_volume_ids")

    @property
    @pulumi.getter
    def capacity(self) -> Optional[float]:
        return pulumi.get(self, "capacity")

    @property
    @pulumi.getter(name="datastoreType")
    def datastore_type(self) -> Optional[str]:
        return pulumi.get(self, "datastore_type")


@pulumi.output_type
class GetSddcsSddcCollectionHcxOnPremLicenseResult(dict):
    def __init__(__self__, *,
                 activation_key: Optional[str] = None,
                 status: Optional[str] = None,
                 system_name: Optional[str] = None):
        if activation_key is not None:
            pulumi.set(__self__, "activation_key", activation_key)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if system_name is not None:
            pulumi.set(__self__, "system_name", system_name)

    @property
    @pulumi.getter(name="activationKey")
    def activation_key(self) -> Optional[str]:
        return pulumi.get(self, "activation_key")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="systemName")
    def system_name(self) -> Optional[str]:
        return pulumi.get(self, "system_name")


@pulumi.output_type
class GetSddcsSddcCollectionUpgradeLicenseResult(dict):
    def __init__(__self__, *,
                 license_key: Optional[str] = None,
                 license_type: Optional[str] = None):
        if license_key is not None:
            pulumi.set(__self__, "license_key", license_key)
        if license_type is not None:
            pulumi.set(__self__, "license_type", license_type)

    @property
    @pulumi.getter(name="licenseKey")
    def license_key(self) -> Optional[str]:
        return pulumi.get(self, "license_key")

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> Optional[str]:
        return pulumi.get(self, "license_type")


@pulumi.output_type
class GetSddcsSddcCollectionVsphereUpgradeObjectResult(dict):
    def __init__(__self__, *,
                 download_link: Optional[str] = None,
                 link_description: Optional[str] = None):
        if download_link is not None:
            pulumi.set(__self__, "download_link", download_link)
        if link_description is not None:
            pulumi.set(__self__, "link_description", link_description)

    @property
    @pulumi.getter(name="downloadLink")
    def download_link(self) -> Optional[str]:
        return pulumi.get(self, "download_link")

    @property
    @pulumi.getter(name="linkDescription")
    def link_description(self) -> Optional[str]:
        return pulumi.get(self, "link_description")


@pulumi.output_type
class GetSupportedHostShapesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSupportedHostShapesItemResult(dict):
    def __init__(__self__, *,
                 default_ocpu_count: Optional[float] = None,
                 description: Optional[str] = None,
                 is_support_monthly_sku: Optional[bool] = None,
                 is_support_shielded_instances: Optional[bool] = None,
                 name: Optional[str] = None,
                 shape_family: Optional[str] = None,
                 supported_ocpu_counts: Optional[Sequence[float]] = None,
                 supported_operations: Optional[Sequence[str]] = None,
                 supported_sddc_types: Optional[Sequence[str]] = None,
                 supported_vmware_software_versions: Optional[Sequence[str]] = None):
        if default_ocpu_count is not None:
            pulumi.set(__self__, "default_ocpu_count", default_ocpu_count)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if is_support_monthly_sku is not None:
            pulumi.set(__self__, "is_support_monthly_sku", is_support_monthly_sku)
        if is_support_shielded_instances is not None:
            pulumi.set(__self__, "is_support_shielded_instances", is_support_shielded_instances)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if shape_family is not None:
            pulumi.set(__self__, "shape_family", shape_family)
        if supported_ocpu_counts is not None:
            pulumi.set(__self__, "supported_ocpu_counts", supported_ocpu_counts)
        if supported_operations is not None:
            pulumi.set(__self__, "supported_operations", supported_operations)
        if supported_sddc_types is not None:
            pulumi.set(__self__, "supported_sddc_types", supported_sddc_types)
        if supported_vmware_software_versions is not None:
            pulumi.set(__self__, "supported_vmware_software_versions", supported_vmware_software_versions)

    @property
    @pulumi.getter(name="defaultOcpuCount")
    def default_ocpu_count(self) -> Optional[float]:
        return pulumi.get(self, "default_ocpu_count")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="isSupportMonthlySku")
    def is_support_monthly_sku(self) -> Optional[bool]:
        return pulumi.get(self, "is_support_monthly_sku")

    @property
    @pulumi.getter(name="isSupportShieldedInstances")
    def is_support_shielded_instances(self) -> Optional[bool]:
        return pulumi.get(self, "is_support_shielded_instances")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="shapeFamily")
    def shape_family(self) -> Optional[str]:
        return pulumi.get(self, "shape_family")

    @property
    @pulumi.getter(name="supportedOcpuCounts")
    def supported_ocpu_counts(self) -> Optional[Sequence[float]]:
        return pulumi.get(self, "supported_ocpu_counts")

    @property
    @pulumi.getter(name="supportedOperations")
    def supported_operations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "supported_operations")

    @property
    @pulumi.getter(name="supportedSddcTypes")
    def supported_sddc_types(self) -> Optional[Sequence[str]]:
        warnings.warn("""The 'supported_sddc_types' field has been deprecated. Please use 'is_single_host_sddc_supported' instead.""", DeprecationWarning)
        pulumi.log.warn("""supported_sddc_types is deprecated: The 'supported_sddc_types' field has been deprecated. Please use 'is_single_host_sddc_supported' instead.""")

        return pulumi.get(self, "supported_sddc_types")

    @property
    @pulumi.getter(name="supportedVmwareSoftwareVersions")
    def supported_vmware_software_versions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "supported_vmware_software_versions")


@pulumi.output_type
class GetSupportedSkusFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSupportedSkusItemResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSupportedVmwareSoftwareVersionsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSupportedVmwareSoftwareVersionsItemResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 version: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


