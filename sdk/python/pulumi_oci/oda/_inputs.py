# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'OdaInstanceRestrictedOperationArgs',
    'OdaPrivateEndpointScanProxyScanListenerInfoArgs',
    'GetOdaInstancesFilterArgs',
    'GetOdaPrivateEndpointAttachmentsFilterArgs',
    'GetOdaPrivateEndpointScanProxiesFilterArgs',
    'GetOdaPrivateEndpointsFilterArgs',
]

@pulumi.input_type
class OdaInstanceRestrictedOperationArgs:
    def __init__(__self__, *,
                 operation_name: Optional[pulumi.Input[str]] = None,
                 restricting_service: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] operation_name: Name of the restricted operation.
        :param pulumi.Input[str] restricting_service: Name of the service restricting the operation.
        """
        OdaInstanceRestrictedOperationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operation_name=operation_name,
            restricting_service=restricting_service,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operation_name: Optional[pulumi.Input[str]] = None,
             restricting_service: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'operationName' in kwargs:
            operation_name = kwargs['operationName']
        if 'restrictingService' in kwargs:
            restricting_service = kwargs['restrictingService']

        if operation_name is not None:
            _setter("operation_name", operation_name)
        if restricting_service is not None:
            _setter("restricting_service", restricting_service)

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the restricted operation.
        """
        return pulumi.get(self, "operation_name")

    @operation_name.setter
    def operation_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operation_name", value)

    @property
    @pulumi.getter(name="restrictingService")
    def restricting_service(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the service restricting the operation.
        """
        return pulumi.get(self, "restricting_service")

    @restricting_service.setter
    def restricting_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "restricting_service", value)


@pulumi.input_type
class OdaPrivateEndpointScanProxyScanListenerInfoArgs:
    def __init__(__self__, *,
                 scan_listener_fqdn: Optional[pulumi.Input[str]] = None,
                 scan_listener_ip: Optional[pulumi.Input[str]] = None,
                 scan_listener_port: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] scan_listener_fqdn: FQDN of the customer's Real Application Cluster (RAC)'s SCAN listeners.
        :param pulumi.Input[str] scan_listener_ip: A SCAN listener's IP of the customer's Real Application Cluster (RAC).
        :param pulumi.Input[int] scan_listener_port: The port that customer's Real Application Cluster (RAC)'s SCAN listeners are listening on.
        """
        OdaPrivateEndpointScanProxyScanListenerInfoArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            scan_listener_fqdn=scan_listener_fqdn,
            scan_listener_ip=scan_listener_ip,
            scan_listener_port=scan_listener_port,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             scan_listener_fqdn: Optional[pulumi.Input[str]] = None,
             scan_listener_ip: Optional[pulumi.Input[str]] = None,
             scan_listener_port: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'scanListenerFqdn' in kwargs:
            scan_listener_fqdn = kwargs['scanListenerFqdn']
        if 'scanListenerIp' in kwargs:
            scan_listener_ip = kwargs['scanListenerIp']
        if 'scanListenerPort' in kwargs:
            scan_listener_port = kwargs['scanListenerPort']

        if scan_listener_fqdn is not None:
            _setter("scan_listener_fqdn", scan_listener_fqdn)
        if scan_listener_ip is not None:
            _setter("scan_listener_ip", scan_listener_ip)
        if scan_listener_port is not None:
            _setter("scan_listener_port", scan_listener_port)

    @property
    @pulumi.getter(name="scanListenerFqdn")
    def scan_listener_fqdn(self) -> Optional[pulumi.Input[str]]:
        """
        FQDN of the customer's Real Application Cluster (RAC)'s SCAN listeners.
        """
        return pulumi.get(self, "scan_listener_fqdn")

    @scan_listener_fqdn.setter
    def scan_listener_fqdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scan_listener_fqdn", value)

    @property
    @pulumi.getter(name="scanListenerIp")
    def scan_listener_ip(self) -> Optional[pulumi.Input[str]]:
        """
        A SCAN listener's IP of the customer's Real Application Cluster (RAC).
        """
        return pulumi.get(self, "scan_listener_ip")

    @scan_listener_ip.setter
    def scan_listener_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scan_listener_ip", value)

    @property
    @pulumi.getter(name="scanListenerPort")
    def scan_listener_port(self) -> Optional[pulumi.Input[int]]:
        """
        The port that customer's Real Application Cluster (RAC)'s SCAN listeners are listening on.
        """
        return pulumi.get(self, "scan_listener_port")

    @scan_listener_port.setter
    def scan_listener_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "scan_listener_port", value)


@pulumi.input_type
class GetOdaInstancesFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        GetOdaInstancesFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class GetOdaPrivateEndpointAttachmentsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        GetOdaPrivateEndpointAttachmentsFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class GetOdaPrivateEndpointScanProxiesFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        GetOdaPrivateEndpointScanProxiesFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class GetOdaPrivateEndpointsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        GetOdaPrivateEndpointsFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


