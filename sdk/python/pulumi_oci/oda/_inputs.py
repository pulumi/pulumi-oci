# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'OdaInstanceRestrictedOperationArgs',
    'OdaInstanceRestrictedOperationArgsDict',
    'OdaPrivateEndpointScanProxyScanListenerInfoArgs',
    'OdaPrivateEndpointScanProxyScanListenerInfoArgsDict',
    'GetOdaInstancesFilterArgs',
    'GetOdaInstancesFilterArgsDict',
    'GetOdaPrivateEndpointAttachmentsFilterArgs',
    'GetOdaPrivateEndpointAttachmentsFilterArgsDict',
    'GetOdaPrivateEndpointScanProxiesFilterArgs',
    'GetOdaPrivateEndpointScanProxiesFilterArgsDict',
    'GetOdaPrivateEndpointsFilterArgs',
    'GetOdaPrivateEndpointsFilterArgsDict',
]

MYPY = False

if not MYPY:
    class OdaInstanceRestrictedOperationArgsDict(TypedDict):
        operation_name: NotRequired[pulumi.Input[builtins.str]]
        """
        Name of the restricted operation.
        """
        restricting_service: NotRequired[pulumi.Input[builtins.str]]
        """
        Name of the service restricting the operation.
        """
elif False:
    OdaInstanceRestrictedOperationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OdaInstanceRestrictedOperationArgs:
    def __init__(__self__, *,
                 operation_name: Optional[pulumi.Input[builtins.str]] = None,
                 restricting_service: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] operation_name: Name of the restricted operation.
        :param pulumi.Input[builtins.str] restricting_service: Name of the service restricting the operation.
        """
        if operation_name is not None:
            pulumi.set(__self__, "operation_name", operation_name)
        if restricting_service is not None:
            pulumi.set(__self__, "restricting_service", restricting_service)

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Name of the restricted operation.
        """
        return pulumi.get(self, "operation_name")

    @operation_name.setter
    def operation_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "operation_name", value)

    @property
    @pulumi.getter(name="restrictingService")
    def restricting_service(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Name of the service restricting the operation.
        """
        return pulumi.get(self, "restricting_service")

    @restricting_service.setter
    def restricting_service(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "restricting_service", value)


if not MYPY:
    class OdaPrivateEndpointScanProxyScanListenerInfoArgsDict(TypedDict):
        scan_listener_fqdn: NotRequired[pulumi.Input[builtins.str]]
        """
        FQDN of the customer's Real Application Cluster (RAC)'s SCAN listeners.
        """
        scan_listener_ip: NotRequired[pulumi.Input[builtins.str]]
        """
        A SCAN listener's IP of the customer's Real Application Cluster (RAC).
        """
        scan_listener_port: NotRequired[pulumi.Input[builtins.int]]
        """
        The port that customer's Real Application Cluster (RAC)'s SCAN listeners are listening on.
        """
elif False:
    OdaPrivateEndpointScanProxyScanListenerInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OdaPrivateEndpointScanProxyScanListenerInfoArgs:
    def __init__(__self__, *,
                 scan_listener_fqdn: Optional[pulumi.Input[builtins.str]] = None,
                 scan_listener_ip: Optional[pulumi.Input[builtins.str]] = None,
                 scan_listener_port: Optional[pulumi.Input[builtins.int]] = None):
        """
        :param pulumi.Input[builtins.str] scan_listener_fqdn: FQDN of the customer's Real Application Cluster (RAC)'s SCAN listeners.
        :param pulumi.Input[builtins.str] scan_listener_ip: A SCAN listener's IP of the customer's Real Application Cluster (RAC).
        :param pulumi.Input[builtins.int] scan_listener_port: The port that customer's Real Application Cluster (RAC)'s SCAN listeners are listening on.
        """
        if scan_listener_fqdn is not None:
            pulumi.set(__self__, "scan_listener_fqdn", scan_listener_fqdn)
        if scan_listener_ip is not None:
            pulumi.set(__self__, "scan_listener_ip", scan_listener_ip)
        if scan_listener_port is not None:
            pulumi.set(__self__, "scan_listener_port", scan_listener_port)

    @property
    @pulumi.getter(name="scanListenerFqdn")
    def scan_listener_fqdn(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        FQDN of the customer's Real Application Cluster (RAC)'s SCAN listeners.
        """
        return pulumi.get(self, "scan_listener_fqdn")

    @scan_listener_fqdn.setter
    def scan_listener_fqdn(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "scan_listener_fqdn", value)

    @property
    @pulumi.getter(name="scanListenerIp")
    def scan_listener_ip(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        A SCAN listener's IP of the customer's Real Application Cluster (RAC).
        """
        return pulumi.get(self, "scan_listener_ip")

    @scan_listener_ip.setter
    def scan_listener_ip(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "scan_listener_ip", value)

    @property
    @pulumi.getter(name="scanListenerPort")
    def scan_listener_port(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The port that customer's Real Application Cluster (RAC)'s SCAN listeners are listening on.
        """
        return pulumi.get(self, "scan_listener_port")

    @scan_listener_port.setter
    def scan_listener_port(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "scan_listener_port", value)


if not MYPY:
    class GetOdaInstancesFilterArgsDict(TypedDict):
        name: builtins.str
        values: Sequence[builtins.str]
        regex: NotRequired[builtins.bool]
elif False:
    GetOdaInstancesFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetOdaInstancesFilterArgs:
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: builtins.str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[builtins.str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[builtins.bool]):
        pulumi.set(self, "regex", value)


if not MYPY:
    class GetOdaPrivateEndpointAttachmentsFilterArgsDict(TypedDict):
        name: builtins.str
        values: Sequence[builtins.str]
        regex: NotRequired[builtins.bool]
elif False:
    GetOdaPrivateEndpointAttachmentsFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetOdaPrivateEndpointAttachmentsFilterArgs:
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: builtins.str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[builtins.str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[builtins.bool]):
        pulumi.set(self, "regex", value)


if not MYPY:
    class GetOdaPrivateEndpointScanProxiesFilterArgsDict(TypedDict):
        name: builtins.str
        values: Sequence[builtins.str]
        regex: NotRequired[builtins.bool]
elif False:
    GetOdaPrivateEndpointScanProxiesFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetOdaPrivateEndpointScanProxiesFilterArgs:
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: builtins.str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[builtins.str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[builtins.bool]):
        pulumi.set(self, "regex", value)


if not MYPY:
    class GetOdaPrivateEndpointsFilterArgsDict(TypedDict):
        name: builtins.str
        values: Sequence[builtins.str]
        regex: NotRequired[builtins.bool]
elif False:
    GetOdaPrivateEndpointsFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetOdaPrivateEndpointsFilterArgs:
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: builtins.str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[builtins.str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[builtins.bool]):
        pulumi.set(self, "regex", value)


