# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetOdaInstanceResult',
    'AwaitableGetOdaInstanceResult',
    'get_oda_instance',
    'get_oda_instance_output',
]

@pulumi.output_type
class GetOdaInstanceResult:
    """
    A collection of values returned by getOdaInstance.
    """
    def __init__(__self__, compartment_id=None, connector_url=None, defined_tags=None, description=None, display_name=None, freeform_tags=None, id=None, lifecycle_sub_state=None, oda_instance_id=None, shape_name=None, state=None, state_message=None, time_created=None, time_updated=None, web_app_url=None):
        if compartment_id and not isinstance(compartment_id, str):
            raise TypeError("Expected argument 'compartment_id' to be a str")
        pulumi.set(__self__, "compartment_id", compartment_id)
        if connector_url and not isinstance(connector_url, str):
            raise TypeError("Expected argument 'connector_url' to be a str")
        pulumi.set(__self__, "connector_url", connector_url)
        if defined_tags and not isinstance(defined_tags, dict):
            raise TypeError("Expected argument 'defined_tags' to be a dict")
        pulumi.set(__self__, "defined_tags", defined_tags)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if freeform_tags and not isinstance(freeform_tags, dict):
            raise TypeError("Expected argument 'freeform_tags' to be a dict")
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if lifecycle_sub_state and not isinstance(lifecycle_sub_state, str):
            raise TypeError("Expected argument 'lifecycle_sub_state' to be a str")
        pulumi.set(__self__, "lifecycle_sub_state", lifecycle_sub_state)
        if oda_instance_id and not isinstance(oda_instance_id, str):
            raise TypeError("Expected argument 'oda_instance_id' to be a str")
        pulumi.set(__self__, "oda_instance_id", oda_instance_id)
        if shape_name and not isinstance(shape_name, str):
            raise TypeError("Expected argument 'shape_name' to be a str")
        pulumi.set(__self__, "shape_name", shape_name)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if state_message and not isinstance(state_message, str):
            raise TypeError("Expected argument 'state_message' to be a str")
        pulumi.set(__self__, "state_message", state_message)
        if time_created and not isinstance(time_created, str):
            raise TypeError("Expected argument 'time_created' to be a str")
        pulumi.set(__self__, "time_created", time_created)
        if time_updated and not isinstance(time_updated, str):
            raise TypeError("Expected argument 'time_updated' to be a str")
        pulumi.set(__self__, "time_updated", time_updated)
        if web_app_url and not isinstance(web_app_url, str):
            raise TypeError("Expected argument 'web_app_url' to be a str")
        pulumi.set(__self__, "web_app_url", web_app_url)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        Identifier of the compartment that the instance belongs to.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="connectorUrl")
    def connector_url(self) -> str:
        """
        URL for the connector's endpoint.
        """
        return pulumi.get(self, "connector_url")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description of the Digital Assistant instance.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        User-defined name for the Digital Assistant instance. Avoid entering confidential information. You can change this value.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Unique immutable identifier that was assigned when the instance was created.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleSubState")
    def lifecycle_sub_state(self) -> str:
        """
        The current sub-state of the Digital Assistant instance.
        """
        return pulumi.get(self, "lifecycle_sub_state")

    @property
    @pulumi.getter(name="odaInstanceId")
    def oda_instance_id(self) -> str:
        return pulumi.get(self, "oda_instance_id")

    @property
    @pulumi.getter(name="shapeName")
    def shape_name(self) -> str:
        """
        Shape or size of the instance.
        """
        return pulumi.get(self, "shape_name")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The current state of the Digital Assistant instance.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="stateMessage")
    def state_message(self) -> str:
        """
        A message that describes the current state in more detail. For example, actionable information about an instance that's in the `FAILED` state.
        """
        return pulumi.get(self, "state_message")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        When the Digital Assistant instance was created. A date-time string as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339), section 14.29.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        When the Digital Assistance instance was last updated. A date-time string as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339), section 14.29.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="webAppUrl")
    def web_app_url(self) -> str:
        """
        URL for the Digital Assistant web application that's associated with the instance.
        """
        return pulumi.get(self, "web_app_url")


class AwaitableGetOdaInstanceResult(GetOdaInstanceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetOdaInstanceResult(
            compartment_id=self.compartment_id,
            connector_url=self.connector_url,
            defined_tags=self.defined_tags,
            description=self.description,
            display_name=self.display_name,
            freeform_tags=self.freeform_tags,
            id=self.id,
            lifecycle_sub_state=self.lifecycle_sub_state,
            oda_instance_id=self.oda_instance_id,
            shape_name=self.shape_name,
            state=self.state,
            state_message=self.state_message,
            time_created=self.time_created,
            time_updated=self.time_updated,
            web_app_url=self.web_app_url)


def get_oda_instance(oda_instance_id: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetOdaInstanceResult:
    """
    This data source provides details about a specific Oda Instance resource in Oracle Cloud Infrastructure Digital Assistant service.

    Gets the specified Digital Assistant instance.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_oda_instance = oci.Oda.get_oda_instance(oda_instance_id=oci_oda_oda_instance["test_oda_instance"]["id"])
    ```


    :param str oda_instance_id: Unique Digital Assistant instance identifier.
    """
    __args__ = dict()
    __args__['odaInstanceId'] = oda_instance_id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('oci:Oda/getOdaInstance:getOdaInstance', __args__, opts=opts, typ=GetOdaInstanceResult).value

    return AwaitableGetOdaInstanceResult(
        compartment_id=__ret__.compartment_id,
        connector_url=__ret__.connector_url,
        defined_tags=__ret__.defined_tags,
        description=__ret__.description,
        display_name=__ret__.display_name,
        freeform_tags=__ret__.freeform_tags,
        id=__ret__.id,
        lifecycle_sub_state=__ret__.lifecycle_sub_state,
        oda_instance_id=__ret__.oda_instance_id,
        shape_name=__ret__.shape_name,
        state=__ret__.state,
        state_message=__ret__.state_message,
        time_created=__ret__.time_created,
        time_updated=__ret__.time_updated,
        web_app_url=__ret__.web_app_url)


@_utilities.lift_output_func(get_oda_instance)
def get_oda_instance_output(oda_instance_id: Optional[pulumi.Input[str]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetOdaInstanceResult]:
    """
    This data source provides details about a specific Oda Instance resource in Oracle Cloud Infrastructure Digital Assistant service.

    Gets the specified Digital Assistant instance.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_oda_instance = oci.Oda.get_oda_instance(oda_instance_id=oci_oda_oda_instance["test_oda_instance"]["id"])
    ```


    :param str oda_instance_id: Unique Digital Assistant instance identifier.
    """
    ...
