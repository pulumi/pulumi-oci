# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['OdaInstanceArgs', 'OdaInstance']

@pulumi.input_type
class OdaInstanceArgs:
    def __init__(__self__, *,
                 compartment_id: pulumi.Input[str],
                 shape_name: pulumi.Input[str],
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 identity_domain: Optional[pulumi.Input[str]] = None,
                 is_role_based_access: Optional[pulumi.Input[bool]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a OdaInstance resource.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "shape_name", shape_name)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if identity_domain is not None:
            pulumi.set(__self__, "identity_domain", identity_domain)
        if is_role_based_access is not None:
            pulumi.set(__self__, "is_role_based_access", is_role_based_access)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter(name="shapeName")
    def shape_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "shape_name")

    @shape_name.setter
    def shape_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "shape_name", value)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "defined_tags")

    @defined_tags.setter
    def defined_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "defined_tags", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "freeform_tags")

    @freeform_tags.setter
    def freeform_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "freeform_tags", value)

    @property
    @pulumi.getter(name="identityDomain")
    def identity_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "identity_domain")

    @identity_domain.setter
    def identity_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_domain", value)

    @property
    @pulumi.getter(name="isRoleBasedAccess")
    def is_role_based_access(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_role_based_access")

    @is_role_based_access.setter
    def is_role_based_access(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_role_based_access", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class _OdaInstanceState:
    def __init__(__self__, *,
                 attachment_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 attachment_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 connector_url: Optional[pulumi.Input[str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 identity_app_console_url: Optional[pulumi.Input[str]] = None,
                 identity_app_guid: Optional[pulumi.Input[str]] = None,
                 identity_domain: Optional[pulumi.Input[str]] = None,
                 imported_package_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 imported_package_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 is_role_based_access: Optional[pulumi.Input[bool]] = None,
                 lifecycle_sub_state: Optional[pulumi.Input[str]] = None,
                 restricted_operations: Optional[pulumi.Input[Sequence[pulumi.Input['OdaInstanceRestrictedOperationArgs']]]] = None,
                 shape_name: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 state_message: Optional[pulumi.Input[str]] = None,
                 time_created: Optional[pulumi.Input[str]] = None,
                 time_updated: Optional[pulumi.Input[str]] = None,
                 web_app_url: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering OdaInstance resources.
        """
        if attachment_ids is not None:
            pulumi.set(__self__, "attachment_ids", attachment_ids)
        if attachment_types is not None:
            pulumi.set(__self__, "attachment_types", attachment_types)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if connector_url is not None:
            pulumi.set(__self__, "connector_url", connector_url)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if identity_app_console_url is not None:
            pulumi.set(__self__, "identity_app_console_url", identity_app_console_url)
        if identity_app_guid is not None:
            pulumi.set(__self__, "identity_app_guid", identity_app_guid)
        if identity_domain is not None:
            pulumi.set(__self__, "identity_domain", identity_domain)
        if imported_package_ids is not None:
            pulumi.set(__self__, "imported_package_ids", imported_package_ids)
        if imported_package_names is not None:
            pulumi.set(__self__, "imported_package_names", imported_package_names)
        if is_role_based_access is not None:
            pulumi.set(__self__, "is_role_based_access", is_role_based_access)
        if lifecycle_sub_state is not None:
            pulumi.set(__self__, "lifecycle_sub_state", lifecycle_sub_state)
        if restricted_operations is not None:
            pulumi.set(__self__, "restricted_operations", restricted_operations)
        if shape_name is not None:
            pulumi.set(__self__, "shape_name", shape_name)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if state_message is not None:
            pulumi.set(__self__, "state_message", state_message)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if web_app_url is not None:
            pulumi.set(__self__, "web_app_url", web_app_url)

    @property
    @pulumi.getter(name="attachmentIds")
    def attachment_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "attachment_ids")

    @attachment_ids.setter
    def attachment_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "attachment_ids", value)

    @property
    @pulumi.getter(name="attachmentTypes")
    def attachment_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "attachment_types")

    @attachment_types.setter
    def attachment_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "attachment_types", value)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter(name="connectorUrl")
    def connector_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connector_url")

    @connector_url.setter
    def connector_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connector_url", value)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "defined_tags")

    @defined_tags.setter
    def defined_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "defined_tags", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "freeform_tags")

    @freeform_tags.setter
    def freeform_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "freeform_tags", value)

    @property
    @pulumi.getter(name="identityAppConsoleUrl")
    def identity_app_console_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "identity_app_console_url")

    @identity_app_console_url.setter
    def identity_app_console_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_app_console_url", value)

    @property
    @pulumi.getter(name="identityAppGuid")
    def identity_app_guid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "identity_app_guid")

    @identity_app_guid.setter
    def identity_app_guid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_app_guid", value)

    @property
    @pulumi.getter(name="identityDomain")
    def identity_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "identity_domain")

    @identity_domain.setter
    def identity_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_domain", value)

    @property
    @pulumi.getter(name="importedPackageIds")
    def imported_package_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "imported_package_ids")

    @imported_package_ids.setter
    def imported_package_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "imported_package_ids", value)

    @property
    @pulumi.getter(name="importedPackageNames")
    def imported_package_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "imported_package_names")

    @imported_package_names.setter
    def imported_package_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "imported_package_names", value)

    @property
    @pulumi.getter(name="isRoleBasedAccess")
    def is_role_based_access(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_role_based_access")

    @is_role_based_access.setter
    def is_role_based_access(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_role_based_access", value)

    @property
    @pulumi.getter(name="lifecycleSubState")
    def lifecycle_sub_state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lifecycle_sub_state")

    @lifecycle_sub_state.setter
    def lifecycle_sub_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lifecycle_sub_state", value)

    @property
    @pulumi.getter(name="restrictedOperations")
    def restricted_operations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OdaInstanceRestrictedOperationArgs']]]]:
        return pulumi.get(self, "restricted_operations")

    @restricted_operations.setter
    def restricted_operations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OdaInstanceRestrictedOperationArgs']]]]):
        pulumi.set(self, "restricted_operations", value)

    @property
    @pulumi.getter(name="shapeName")
    def shape_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "shape_name")

    @shape_name.setter
    def shape_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shape_name", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="stateMessage")
    def state_message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state_message")

    @state_message.setter
    def state_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state_message", value)

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_created")

    @time_created.setter
    def time_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_created", value)

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_updated")

    @time_updated.setter
    def time_updated(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_updated", value)

    @property
    @pulumi.getter(name="webAppUrl")
    def web_app_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_app_url")

    @web_app_url.setter
    def web_app_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_app_url", value)


class OdaInstance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 identity_domain: Optional[pulumi.Input[str]] = None,
                 is_role_based_access: Optional[pulumi.Input[bool]] = None,
                 shape_name: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a OdaInstance resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: OdaInstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a OdaInstance resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param OdaInstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OdaInstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 identity_domain: Optional[pulumi.Input[str]] = None,
                 is_role_based_access: Optional[pulumi.Input[bool]] = None,
                 shape_name: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OdaInstanceArgs.__new__(OdaInstanceArgs)

            if compartment_id is None and not opts.urn:
                raise TypeError("Missing required property 'compartment_id'")
            __props__.__dict__["compartment_id"] = compartment_id
            __props__.__dict__["defined_tags"] = defined_tags
            __props__.__dict__["description"] = description
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["freeform_tags"] = freeform_tags
            __props__.__dict__["identity_domain"] = identity_domain
            __props__.__dict__["is_role_based_access"] = is_role_based_access
            if shape_name is None and not opts.urn:
                raise TypeError("Missing required property 'shape_name'")
            __props__.__dict__["shape_name"] = shape_name
            __props__.__dict__["state"] = state
            __props__.__dict__["attachment_ids"] = None
            __props__.__dict__["attachment_types"] = None
            __props__.__dict__["connector_url"] = None
            __props__.__dict__["identity_app_console_url"] = None
            __props__.__dict__["identity_app_guid"] = None
            __props__.__dict__["imported_package_ids"] = None
            __props__.__dict__["imported_package_names"] = None
            __props__.__dict__["lifecycle_sub_state"] = None
            __props__.__dict__["restricted_operations"] = None
            __props__.__dict__["state_message"] = None
            __props__.__dict__["time_created"] = None
            __props__.__dict__["time_updated"] = None
            __props__.__dict__["web_app_url"] = None
        super(OdaInstance, __self__).__init__(
            'oci:Oda/odaInstance:OdaInstance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            attachment_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            attachment_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            compartment_id: Optional[pulumi.Input[str]] = None,
            connector_url: Optional[pulumi.Input[str]] = None,
            defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            description: Optional[pulumi.Input[str]] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            identity_app_console_url: Optional[pulumi.Input[str]] = None,
            identity_app_guid: Optional[pulumi.Input[str]] = None,
            identity_domain: Optional[pulumi.Input[str]] = None,
            imported_package_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            imported_package_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            is_role_based_access: Optional[pulumi.Input[bool]] = None,
            lifecycle_sub_state: Optional[pulumi.Input[str]] = None,
            restricted_operations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OdaInstanceRestrictedOperationArgs']]]]] = None,
            shape_name: Optional[pulumi.Input[str]] = None,
            state: Optional[pulumi.Input[str]] = None,
            state_message: Optional[pulumi.Input[str]] = None,
            time_created: Optional[pulumi.Input[str]] = None,
            time_updated: Optional[pulumi.Input[str]] = None,
            web_app_url: Optional[pulumi.Input[str]] = None) -> 'OdaInstance':
        """
        Get an existing OdaInstance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _OdaInstanceState.__new__(_OdaInstanceState)

        __props__.__dict__["attachment_ids"] = attachment_ids
        __props__.__dict__["attachment_types"] = attachment_types
        __props__.__dict__["compartment_id"] = compartment_id
        __props__.__dict__["connector_url"] = connector_url
        __props__.__dict__["defined_tags"] = defined_tags
        __props__.__dict__["description"] = description
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["freeform_tags"] = freeform_tags
        __props__.__dict__["identity_app_console_url"] = identity_app_console_url
        __props__.__dict__["identity_app_guid"] = identity_app_guid
        __props__.__dict__["identity_domain"] = identity_domain
        __props__.__dict__["imported_package_ids"] = imported_package_ids
        __props__.__dict__["imported_package_names"] = imported_package_names
        __props__.__dict__["is_role_based_access"] = is_role_based_access
        __props__.__dict__["lifecycle_sub_state"] = lifecycle_sub_state
        __props__.__dict__["restricted_operations"] = restricted_operations
        __props__.__dict__["shape_name"] = shape_name
        __props__.__dict__["state"] = state
        __props__.__dict__["state_message"] = state_message
        __props__.__dict__["time_created"] = time_created
        __props__.__dict__["time_updated"] = time_updated
        __props__.__dict__["web_app_url"] = web_app_url
        return OdaInstance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="attachmentIds")
    def attachment_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "attachment_ids")

    @property
    @pulumi.getter(name="attachmentTypes")
    def attachment_types(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "attachment_types")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="connectorUrl")
    def connector_url(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "connector_url")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="identityAppConsoleUrl")
    def identity_app_console_url(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "identity_app_console_url")

    @property
    @pulumi.getter(name="identityAppGuid")
    def identity_app_guid(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "identity_app_guid")

    @property
    @pulumi.getter(name="identityDomain")
    def identity_domain(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "identity_domain")

    @property
    @pulumi.getter(name="importedPackageIds")
    def imported_package_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "imported_package_ids")

    @property
    @pulumi.getter(name="importedPackageNames")
    def imported_package_names(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "imported_package_names")

    @property
    @pulumi.getter(name="isRoleBasedAccess")
    def is_role_based_access(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "is_role_based_access")

    @property
    @pulumi.getter(name="lifecycleSubState")
    def lifecycle_sub_state(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "lifecycle_sub_state")

    @property
    @pulumi.getter(name="restrictedOperations")
    def restricted_operations(self) -> pulumi.Output[Optional[Sequence['outputs.OdaInstanceRestrictedOperation']]]:
        return pulumi.get(self, "restricted_operations")

    @property
    @pulumi.getter(name="shapeName")
    def shape_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "shape_name")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="stateMessage")
    def state_message(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "state_message")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="webAppUrl")
    def web_app_url(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "web_app_url")

