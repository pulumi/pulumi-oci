# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'OdaInstanceRestrictedOperation',
    'OdaPrivateEndpointScanProxyScanListenerInfo',
    'GetOdaInstanceRestrictedOperationResult',
    'GetOdaInstancesFilterResult',
    'GetOdaInstancesOdaInstanceResult',
    'GetOdaInstancesOdaInstanceRestrictedOperationResult',
    'GetOdaPrivateEndpointAttachmentsFilterResult',
    'GetOdaPrivateEndpointAttachmentsOdaPrivateEndpointAttachmentCollectionResult',
    'GetOdaPrivateEndpointAttachmentsOdaPrivateEndpointAttachmentCollectionItemResult',
    'GetOdaPrivateEndpointScanProxiesFilterResult',
    'GetOdaPrivateEndpointScanProxiesOdaPrivateEndpointScanProxyCollectionResult',
    'GetOdaPrivateEndpointScanProxiesOdaPrivateEndpointScanProxyCollectionItemResult',
    'GetOdaPrivateEndpointScanProxiesOdaPrivateEndpointScanProxyCollectionItemScanListenerInfoResult',
    'GetOdaPrivateEndpointScanProxyScanListenerInfoResult',
    'GetOdaPrivateEndpointsFilterResult',
    'GetOdaPrivateEndpointsOdaPrivateEndpointCollectionResult',
    'GetOdaPrivateEndpointsOdaPrivateEndpointCollectionItemResult',
]

@pulumi.output_type
class OdaInstanceRestrictedOperation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "operationName":
            suggest = "operation_name"
        elif key == "restrictingService":
            suggest = "restricting_service"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OdaInstanceRestrictedOperation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OdaInstanceRestrictedOperation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OdaInstanceRestrictedOperation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 operation_name: Optional[str] = None,
                 restricting_service: Optional[str] = None):
        if operation_name is not None:
            pulumi.set(__self__, "operation_name", operation_name)
        if restricting_service is not None:
            pulumi.set(__self__, "restricting_service", restricting_service)

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> Optional[str]:
        return pulumi.get(self, "operation_name")

    @property
    @pulumi.getter(name="restrictingService")
    def restricting_service(self) -> Optional[str]:
        return pulumi.get(self, "restricting_service")


@pulumi.output_type
class OdaPrivateEndpointScanProxyScanListenerInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "scanListenerFqdn":
            suggest = "scan_listener_fqdn"
        elif key == "scanListenerIp":
            suggest = "scan_listener_ip"
        elif key == "scanListenerPort":
            suggest = "scan_listener_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OdaPrivateEndpointScanProxyScanListenerInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OdaPrivateEndpointScanProxyScanListenerInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OdaPrivateEndpointScanProxyScanListenerInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 scan_listener_fqdn: Optional[str] = None,
                 scan_listener_ip: Optional[str] = None,
                 scan_listener_port: Optional[int] = None):
        if scan_listener_fqdn is not None:
            pulumi.set(__self__, "scan_listener_fqdn", scan_listener_fqdn)
        if scan_listener_ip is not None:
            pulumi.set(__self__, "scan_listener_ip", scan_listener_ip)
        if scan_listener_port is not None:
            pulumi.set(__self__, "scan_listener_port", scan_listener_port)

    @property
    @pulumi.getter(name="scanListenerFqdn")
    def scan_listener_fqdn(self) -> Optional[str]:
        return pulumi.get(self, "scan_listener_fqdn")

    @property
    @pulumi.getter(name="scanListenerIp")
    def scan_listener_ip(self) -> Optional[str]:
        return pulumi.get(self, "scan_listener_ip")

    @property
    @pulumi.getter(name="scanListenerPort")
    def scan_listener_port(self) -> Optional[int]:
        return pulumi.get(self, "scan_listener_port")


@pulumi.output_type
class GetOdaInstanceRestrictedOperationResult(dict):
    def __init__(__self__, *,
                 operation_name: Optional[str] = None,
                 restricting_service: Optional[str] = None):
        if operation_name is not None:
            pulumi.set(__self__, "operation_name", operation_name)
        if restricting_service is not None:
            pulumi.set(__self__, "restricting_service", restricting_service)

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> Optional[str]:
        return pulumi.get(self, "operation_name")

    @property
    @pulumi.getter(name="restrictingService")
    def restricting_service(self) -> Optional[str]:
        return pulumi.get(self, "restricting_service")


@pulumi.output_type
class GetOdaInstancesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetOdaInstancesOdaInstanceResult(dict):
    def __init__(__self__, *,
                 attachment_ids: Optional[Sequence[str]] = None,
                 attachment_types: Optional[Sequence[str]] = None,
                 compartment_id: Optional[str] = None,
                 connector_url: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 identity_app_console_url: Optional[str] = None,
                 identity_app_guid: Optional[str] = None,
                 identity_domain: Optional[str] = None,
                 imported_package_ids: Optional[Sequence[str]] = None,
                 imported_package_names: Optional[Sequence[str]] = None,
                 is_role_based_access: Optional[bool] = None,
                 lifecycle_sub_state: Optional[str] = None,
                 restricted_operations: Optional[Sequence['outputs.GetOdaInstancesOdaInstanceRestrictedOperationResult']] = None,
                 shape_name: Optional[str] = None,
                 state: Optional[str] = None,
                 state_message: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 web_app_url: Optional[str] = None):
        if attachment_ids is not None:
            pulumi.set(__self__, "attachment_ids", attachment_ids)
        if attachment_types is not None:
            pulumi.set(__self__, "attachment_types", attachment_types)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if connector_url is not None:
            pulumi.set(__self__, "connector_url", connector_url)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if identity_app_console_url is not None:
            pulumi.set(__self__, "identity_app_console_url", identity_app_console_url)
        if identity_app_guid is not None:
            pulumi.set(__self__, "identity_app_guid", identity_app_guid)
        if identity_domain is not None:
            pulumi.set(__self__, "identity_domain", identity_domain)
        if imported_package_ids is not None:
            pulumi.set(__self__, "imported_package_ids", imported_package_ids)
        if imported_package_names is not None:
            pulumi.set(__self__, "imported_package_names", imported_package_names)
        if is_role_based_access is not None:
            pulumi.set(__self__, "is_role_based_access", is_role_based_access)
        if lifecycle_sub_state is not None:
            pulumi.set(__self__, "lifecycle_sub_state", lifecycle_sub_state)
        if restricted_operations is not None:
            pulumi.set(__self__, "restricted_operations", restricted_operations)
        if shape_name is not None:
            pulumi.set(__self__, "shape_name", shape_name)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if state_message is not None:
            pulumi.set(__self__, "state_message", state_message)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if web_app_url is not None:
            pulumi.set(__self__, "web_app_url", web_app_url)

    @property
    @pulumi.getter(name="attachmentIds")
    def attachment_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "attachment_ids")

    @property
    @pulumi.getter(name="attachmentTypes")
    def attachment_types(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "attachment_types")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="connectorUrl")
    def connector_url(self) -> Optional[str]:
        return pulumi.get(self, "connector_url")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="identityAppConsoleUrl")
    def identity_app_console_url(self) -> Optional[str]:
        return pulumi.get(self, "identity_app_console_url")

    @property
    @pulumi.getter(name="identityAppGuid")
    def identity_app_guid(self) -> Optional[str]:
        return pulumi.get(self, "identity_app_guid")

    @property
    @pulumi.getter(name="identityDomain")
    def identity_domain(self) -> Optional[str]:
        return pulumi.get(self, "identity_domain")

    @property
    @pulumi.getter(name="importedPackageIds")
    def imported_package_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "imported_package_ids")

    @property
    @pulumi.getter(name="importedPackageNames")
    def imported_package_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "imported_package_names")

    @property
    @pulumi.getter(name="isRoleBasedAccess")
    def is_role_based_access(self) -> Optional[bool]:
        return pulumi.get(self, "is_role_based_access")

    @property
    @pulumi.getter(name="lifecycleSubState")
    def lifecycle_sub_state(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_sub_state")

    @property
    @pulumi.getter(name="restrictedOperations")
    def restricted_operations(self) -> Optional[Sequence['outputs.GetOdaInstancesOdaInstanceRestrictedOperationResult']]:
        return pulumi.get(self, "restricted_operations")

    @property
    @pulumi.getter(name="shapeName")
    def shape_name(self) -> Optional[str]:
        return pulumi.get(self, "shape_name")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="stateMessage")
    def state_message(self) -> Optional[str]:
        return pulumi.get(self, "state_message")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="webAppUrl")
    def web_app_url(self) -> Optional[str]:
        return pulumi.get(self, "web_app_url")


@pulumi.output_type
class GetOdaInstancesOdaInstanceRestrictedOperationResult(dict):
    def __init__(__self__, *,
                 operation_name: Optional[str] = None,
                 restricting_service: Optional[str] = None):
        if operation_name is not None:
            pulumi.set(__self__, "operation_name", operation_name)
        if restricting_service is not None:
            pulumi.set(__self__, "restricting_service", restricting_service)

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> Optional[str]:
        return pulumi.get(self, "operation_name")

    @property
    @pulumi.getter(name="restrictingService")
    def restricting_service(self) -> Optional[str]:
        return pulumi.get(self, "restricting_service")


@pulumi.output_type
class GetOdaPrivateEndpointAttachmentsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetOdaPrivateEndpointAttachmentsOdaPrivateEndpointAttachmentCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetOdaPrivateEndpointAttachmentsOdaPrivateEndpointAttachmentCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetOdaPrivateEndpointAttachmentsOdaPrivateEndpointAttachmentCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetOdaPrivateEndpointAttachmentsOdaPrivateEndpointAttachmentCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 id: Optional[str] = None,
                 oda_instance_id: Optional[str] = None,
                 oda_private_endpoint_id: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if oda_instance_id is not None:
            pulumi.set(__self__, "oda_instance_id", oda_instance_id)
        if oda_private_endpoint_id is not None:
            pulumi.set(__self__, "oda_private_endpoint_id", oda_private_endpoint_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="odaInstanceId")
    def oda_instance_id(self) -> Optional[str]:
        return pulumi.get(self, "oda_instance_id")

    @property
    @pulumi.getter(name="odaPrivateEndpointId")
    def oda_private_endpoint_id(self) -> Optional[str]:
        return pulumi.get(self, "oda_private_endpoint_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetOdaPrivateEndpointScanProxiesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetOdaPrivateEndpointScanProxiesOdaPrivateEndpointScanProxyCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetOdaPrivateEndpointScanProxiesOdaPrivateEndpointScanProxyCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetOdaPrivateEndpointScanProxiesOdaPrivateEndpointScanProxyCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetOdaPrivateEndpointScanProxiesOdaPrivateEndpointScanProxyCollectionItemResult(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 oda_private_endpoint_id: Optional[str] = None,
                 protocol: Optional[str] = None,
                 scan_listener_infos: Optional[Sequence['outputs.GetOdaPrivateEndpointScanProxiesOdaPrivateEndpointScanProxyCollectionItemScanListenerInfoResult']] = None,
                 scan_listener_type: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if oda_private_endpoint_id is not None:
            pulumi.set(__self__, "oda_private_endpoint_id", oda_private_endpoint_id)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if scan_listener_infos is not None:
            pulumi.set(__self__, "scan_listener_infos", scan_listener_infos)
        if scan_listener_type is not None:
            pulumi.set(__self__, "scan_listener_type", scan_listener_type)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="odaPrivateEndpointId")
    def oda_private_endpoint_id(self) -> Optional[str]:
        return pulumi.get(self, "oda_private_endpoint_id")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="scanListenerInfos")
    def scan_listener_infos(self) -> Optional[Sequence['outputs.GetOdaPrivateEndpointScanProxiesOdaPrivateEndpointScanProxyCollectionItemScanListenerInfoResult']]:
        return pulumi.get(self, "scan_listener_infos")

    @property
    @pulumi.getter(name="scanListenerType")
    def scan_listener_type(self) -> Optional[str]:
        return pulumi.get(self, "scan_listener_type")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetOdaPrivateEndpointScanProxiesOdaPrivateEndpointScanProxyCollectionItemScanListenerInfoResult(dict):
    def __init__(__self__, *,
                 scan_listener_fqdn: Optional[str] = None,
                 scan_listener_ip: Optional[str] = None,
                 scan_listener_port: Optional[int] = None):
        if scan_listener_fqdn is not None:
            pulumi.set(__self__, "scan_listener_fqdn", scan_listener_fqdn)
        if scan_listener_ip is not None:
            pulumi.set(__self__, "scan_listener_ip", scan_listener_ip)
        if scan_listener_port is not None:
            pulumi.set(__self__, "scan_listener_port", scan_listener_port)

    @property
    @pulumi.getter(name="scanListenerFqdn")
    def scan_listener_fqdn(self) -> Optional[str]:
        return pulumi.get(self, "scan_listener_fqdn")

    @property
    @pulumi.getter(name="scanListenerIp")
    def scan_listener_ip(self) -> Optional[str]:
        return pulumi.get(self, "scan_listener_ip")

    @property
    @pulumi.getter(name="scanListenerPort")
    def scan_listener_port(self) -> Optional[int]:
        return pulumi.get(self, "scan_listener_port")


@pulumi.output_type
class GetOdaPrivateEndpointScanProxyScanListenerInfoResult(dict):
    def __init__(__self__, *,
                 scan_listener_fqdn: Optional[str] = None,
                 scan_listener_ip: Optional[str] = None,
                 scan_listener_port: Optional[int] = None):
        if scan_listener_fqdn is not None:
            pulumi.set(__self__, "scan_listener_fqdn", scan_listener_fqdn)
        if scan_listener_ip is not None:
            pulumi.set(__self__, "scan_listener_ip", scan_listener_ip)
        if scan_listener_port is not None:
            pulumi.set(__self__, "scan_listener_port", scan_listener_port)

    @property
    @pulumi.getter(name="scanListenerFqdn")
    def scan_listener_fqdn(self) -> Optional[str]:
        return pulumi.get(self, "scan_listener_fqdn")

    @property
    @pulumi.getter(name="scanListenerIp")
    def scan_listener_ip(self) -> Optional[str]:
        return pulumi.get(self, "scan_listener_ip")

    @property
    @pulumi.getter(name="scanListenerPort")
    def scan_listener_port(self) -> Optional[int]:
        return pulumi.get(self, "scan_listener_port")


@pulumi.output_type
class GetOdaPrivateEndpointsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetOdaPrivateEndpointsOdaPrivateEndpointCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetOdaPrivateEndpointsOdaPrivateEndpointCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetOdaPrivateEndpointsOdaPrivateEndpointCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetOdaPrivateEndpointsOdaPrivateEndpointCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 nsg_ids: Optional[Sequence[str]] = None,
                 state: Optional[str] = None,
                 subnet_id: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if nsg_ids is not None:
            pulumi.set(__self__, "nsg_ids", nsg_ids)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "nsg_ids")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


