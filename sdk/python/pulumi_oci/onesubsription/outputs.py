# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetAggregatedComputedUsagesAggregatedComputedUsageResult',
    'GetAggregatedComputedUsagesAggregatedComputedUsageAggregatedComputedUsageResult',
    'GetAggregatedComputedUsagesAggregatedComputedUsageAggregatedComputedUsageProductResult',
    'GetAggregatedComputedUsagesAggregatedComputedUsageParentProductResult',
    'GetAggregatedComputedUsagesFilterResult',
    'GetBillingSchedulesBillingScheduleResult',
    'GetBillingSchedulesBillingScheduleProductResult',
    'GetBillingSchedulesFilterResult',
    'GetCommitmentsCommitmentResult',
    'GetCommitmentsFilterResult',
    'GetComputedUsageParentProductResult',
    'GetComputedUsageProductResult',
    'GetComputedUsagesComputedUsageResult',
    'GetComputedUsagesComputedUsageParentProductResult',
    'GetComputedUsagesComputedUsageProductResult',
    'GetComputedUsagesFilterResult',
    'GetInvoiceLineComputedUsagesFilterResult',
    'GetInvoiceLineComputedUsagesInvoicelineComputedUsageResult',
    'GetInvoiceLineComputedUsagesInvoicelineComputedUsageParentProductResult',
    'GetInvoiceLineComputedUsagesInvoicelineComputedUsageProductResult',
    'GetInvoicesFilterResult',
    'GetInvoicesInvoiceResult',
    'GetInvoicesInvoiceBillToAddressResult',
    'GetInvoicesInvoiceBillToAddressLocationResult',
    'GetInvoicesInvoiceBillToContactResult',
    'GetInvoicesInvoiceBillToCustomerResult',
    'GetInvoicesInvoiceCurrencyResult',
    'GetInvoicesInvoiceInvoiceLineResult',
    'GetInvoicesInvoiceInvoiceLineProductResult',
    'GetInvoicesInvoiceOrganizationResult',
    'GetInvoicesInvoicePaymentTermResult',
    'GetOrganizationSubscriptionsFilterResult',
    'GetOrganizationSubscriptionsOrganizationSubscriptionResult',
    'GetOrganizationSubscriptionsOrganizationSubscriptionCurrencyResult',
    'GetRatecardsFilterResult',
    'GetRatecardsRateCardResult',
    'GetRatecardsRateCardCurrencyResult',
    'GetRatecardsRateCardProductResult',
    'GetRatecardsRateCardRateCardTierResult',
    'GetSubscribedServiceBillToAddressResult',
    'GetSubscribedServiceBillToAddressLocationResult',
    'GetSubscribedServiceBillToContactResult',
    'GetSubscribedServiceBillToCustomerResult',
    'GetSubscribedServiceCommitmentServiceResult',
    'GetSubscribedServiceEndUserAddressResult',
    'GetSubscribedServiceEndUserAddressLocationResult',
    'GetSubscribedServiceEndUserContactResult',
    'GetSubscribedServiceEndUserCustomerResult',
    'GetSubscribedServicePaymentTermResult',
    'GetSubscribedServiceProductResult',
    'GetSubscribedServiceRateCardResult',
    'GetSubscribedServiceRateCardCurrencyResult',
    'GetSubscribedServiceRateCardProductResult',
    'GetSubscribedServiceRateCardRateCardTierResult',
    'GetSubscribedServiceResellerAddressResult',
    'GetSubscribedServiceResellerAddressLocationResult',
    'GetSubscribedServiceResellerContactResult',
    'GetSubscribedServiceResellerCustomerResult',
    'GetSubscribedServiceServiceToAddressResult',
    'GetSubscribedServiceServiceToAddressLocationResult',
    'GetSubscribedServiceServiceToContactResult',
    'GetSubscribedServiceServiceToCustomerResult',
    'GetSubscribedServiceSoldToContactResult',
    'GetSubscribedServiceSoldToCustomerResult',
    'GetSubscribedServicesFilterResult',
    'GetSubscribedServicesSubscribedServiceResult',
    'GetSubscribedServicesSubscribedServiceBillToAddressResult',
    'GetSubscribedServicesSubscribedServiceBillToAddressLocationResult',
    'GetSubscribedServicesSubscribedServiceBillToContactResult',
    'GetSubscribedServicesSubscribedServiceBillToCustomerResult',
    'GetSubscribedServicesSubscribedServiceCommitmentServiceResult',
    'GetSubscribedServicesSubscribedServiceEndUserAddressResult',
    'GetSubscribedServicesSubscribedServiceEndUserAddressLocationResult',
    'GetSubscribedServicesSubscribedServiceEndUserContactResult',
    'GetSubscribedServicesSubscribedServiceEndUserCustomerResult',
    'GetSubscribedServicesSubscribedServicePaymentTermResult',
    'GetSubscribedServicesSubscribedServiceProductResult',
    'GetSubscribedServicesSubscribedServiceRateCardResult',
    'GetSubscribedServicesSubscribedServiceRateCardCurrencyResult',
    'GetSubscribedServicesSubscribedServiceRateCardProductResult',
    'GetSubscribedServicesSubscribedServiceRateCardRateCardTierResult',
    'GetSubscribedServicesSubscribedServiceResellerAddressResult',
    'GetSubscribedServicesSubscribedServiceResellerAddressLocationResult',
    'GetSubscribedServicesSubscribedServiceResellerContactResult',
    'GetSubscribedServicesSubscribedServiceResellerCustomerResult',
    'GetSubscribedServicesSubscribedServiceServiceToAddressResult',
    'GetSubscribedServicesSubscribedServiceServiceToAddressLocationResult',
    'GetSubscribedServicesSubscribedServiceServiceToContactResult',
    'GetSubscribedServicesSubscribedServiceServiceToCustomerResult',
    'GetSubscribedServicesSubscribedServiceSoldToContactResult',
    'GetSubscribedServicesSubscribedServiceSoldToCustomerResult',
    'GetSubscriptionsFilterResult',
    'GetSubscriptionsSubscriptionResult',
    'GetSubscriptionsSubscriptionCurrencyResult',
    'GetSubscriptionsSubscriptionSubscribedServiceResult',
    'GetSubscriptionsSubscriptionSubscribedServiceCommitmentServiceResult',
    'GetSubscriptionsSubscriptionSubscribedServiceProductResult',
]

@pulumi.output_type
class GetAggregatedComputedUsagesAggregatedComputedUsageResult(dict):
    def __init__(__self__, *,
                 aggregated_computed_usages: Optional[Sequence['outputs.GetAggregatedComputedUsagesAggregatedComputedUsageAggregatedComputedUsageResult']] = None,
                 currency_code: Optional[str] = None,
                 parent_products: Optional[Sequence['outputs.GetAggregatedComputedUsagesAggregatedComputedUsageParentProductResult']] = None,
                 parent_subscribed_service_id: Optional[str] = None,
                 plan_number: Optional[str] = None,
                 pricing_model: Optional[str] = None,
                 rate_card_id: Optional[str] = None,
                 subscription_id: Optional[str] = None,
                 time_end: Optional[str] = None,
                 time_start: Optional[str] = None):
        if aggregated_computed_usages is not None:
            pulumi.set(__self__, "aggregated_computed_usages", aggregated_computed_usages)
        if currency_code is not None:
            pulumi.set(__self__, "currency_code", currency_code)
        if parent_products is not None:
            pulumi.set(__self__, "parent_products", parent_products)
        if parent_subscribed_service_id is not None:
            pulumi.set(__self__, "parent_subscribed_service_id", parent_subscribed_service_id)
        if plan_number is not None:
            pulumi.set(__self__, "plan_number", plan_number)
        if pricing_model is not None:
            pulumi.set(__self__, "pricing_model", pricing_model)
        if rate_card_id is not None:
            pulumi.set(__self__, "rate_card_id", rate_card_id)
        if subscription_id is not None:
            pulumi.set(__self__, "subscription_id", subscription_id)
        if time_end is not None:
            pulumi.set(__self__, "time_end", time_end)
        if time_start is not None:
            pulumi.set(__self__, "time_start", time_start)

    @property
    @pulumi.getter(name="aggregatedComputedUsages")
    def aggregated_computed_usages(self) -> Optional[Sequence['outputs.GetAggregatedComputedUsagesAggregatedComputedUsageAggregatedComputedUsageResult']]:
        return pulumi.get(self, "aggregated_computed_usages")

    @property
    @pulumi.getter(name="currencyCode")
    def currency_code(self) -> Optional[str]:
        return pulumi.get(self, "currency_code")

    @property
    @pulumi.getter(name="parentProducts")
    def parent_products(self) -> Optional[Sequence['outputs.GetAggregatedComputedUsagesAggregatedComputedUsageParentProductResult']]:
        return pulumi.get(self, "parent_products")

    @property
    @pulumi.getter(name="parentSubscribedServiceId")
    def parent_subscribed_service_id(self) -> Optional[str]:
        return pulumi.get(self, "parent_subscribed_service_id")

    @property
    @pulumi.getter(name="planNumber")
    def plan_number(self) -> Optional[str]:
        return pulumi.get(self, "plan_number")

    @property
    @pulumi.getter(name="pricingModel")
    def pricing_model(self) -> Optional[str]:
        return pulumi.get(self, "pricing_model")

    @property
    @pulumi.getter(name="rateCardId")
    def rate_card_id(self) -> Optional[str]:
        return pulumi.get(self, "rate_card_id")

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> Optional[str]:
        return pulumi.get(self, "subscription_id")

    @property
    @pulumi.getter(name="timeEnd")
    def time_end(self) -> Optional[str]:
        return pulumi.get(self, "time_end")

    @property
    @pulumi.getter(name="timeStart")
    def time_start(self) -> Optional[str]:
        return pulumi.get(self, "time_start")


@pulumi.output_type
class GetAggregatedComputedUsagesAggregatedComputedUsageAggregatedComputedUsageResult(dict):
    def __init__(__self__, *,
                 cost: Optional[str] = None,
                 cost_unrounded: Optional[str] = None,
                 data_center: Optional[str] = None,
                 net_unit_price: Optional[str] = None,
                 products: Optional[Sequence['outputs.GetAggregatedComputedUsagesAggregatedComputedUsageAggregatedComputedUsageProductResult']] = None,
                 quantity: Optional[str] = None,
                 time_metered_on: Optional[str] = None,
                 type: Optional[str] = None):
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if cost_unrounded is not None:
            pulumi.set(__self__, "cost_unrounded", cost_unrounded)
        if data_center is not None:
            pulumi.set(__self__, "data_center", data_center)
        if net_unit_price is not None:
            pulumi.set(__self__, "net_unit_price", net_unit_price)
        if products is not None:
            pulumi.set(__self__, "products", products)
        if quantity is not None:
            pulumi.set(__self__, "quantity", quantity)
        if time_metered_on is not None:
            pulumi.set(__self__, "time_metered_on", time_metered_on)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def cost(self) -> Optional[str]:
        return pulumi.get(self, "cost")

    @property
    @pulumi.getter(name="costUnrounded")
    def cost_unrounded(self) -> Optional[str]:
        return pulumi.get(self, "cost_unrounded")

    @property
    @pulumi.getter(name="dataCenter")
    def data_center(self) -> Optional[str]:
        return pulumi.get(self, "data_center")

    @property
    @pulumi.getter(name="netUnitPrice")
    def net_unit_price(self) -> Optional[str]:
        return pulumi.get(self, "net_unit_price")

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence['outputs.GetAggregatedComputedUsagesAggregatedComputedUsageAggregatedComputedUsageProductResult']]:
        return pulumi.get(self, "products")

    @property
    @pulumi.getter
    def quantity(self) -> Optional[str]:
        return pulumi.get(self, "quantity")

    @property
    @pulumi.getter(name="timeMeteredOn")
    def time_metered_on(self) -> Optional[str]:
        return pulumi.get(self, "time_metered_on")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetAggregatedComputedUsagesAggregatedComputedUsageAggregatedComputedUsageProductResult(dict):
    def __init__(__self__, *,
                 billing_category: Optional[str] = None,
                 name: Optional[str] = None,
                 part_number: Optional[str] = None,
                 product_category: Optional[str] = None,
                 provisioning_group: Optional[str] = None,
                 ucm_rate_card_part_type: Optional[str] = None,
                 unit_of_measure: Optional[str] = None):
        if billing_category is not None:
            pulumi.set(__self__, "billing_category", billing_category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if part_number is not None:
            pulumi.set(__self__, "part_number", part_number)
        if product_category is not None:
            pulumi.set(__self__, "product_category", product_category)
        if provisioning_group is not None:
            pulumi.set(__self__, "provisioning_group", provisioning_group)
        if ucm_rate_card_part_type is not None:
            pulumi.set(__self__, "ucm_rate_card_part_type", ucm_rate_card_part_type)
        if unit_of_measure is not None:
            pulumi.set(__self__, "unit_of_measure", unit_of_measure)

    @property
    @pulumi.getter(name="billingCategory")
    def billing_category(self) -> Optional[str]:
        return pulumi.get(self, "billing_category")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="partNumber")
    def part_number(self) -> Optional[str]:
        return pulumi.get(self, "part_number")

    @property
    @pulumi.getter(name="productCategory")
    def product_category(self) -> Optional[str]:
        return pulumi.get(self, "product_category")

    @property
    @pulumi.getter(name="provisioningGroup")
    def provisioning_group(self) -> Optional[str]:
        return pulumi.get(self, "provisioning_group")

    @property
    @pulumi.getter(name="ucmRateCardPartType")
    def ucm_rate_card_part_type(self) -> Optional[str]:
        return pulumi.get(self, "ucm_rate_card_part_type")

    @property
    @pulumi.getter(name="unitOfMeasure")
    def unit_of_measure(self) -> Optional[str]:
        return pulumi.get(self, "unit_of_measure")


@pulumi.output_type
class GetAggregatedComputedUsagesAggregatedComputedUsageParentProductResult(dict):
    def __init__(__self__, *,
                 billing_category: Optional[str] = None,
                 name: Optional[str] = None,
                 part_number: Optional[str] = None,
                 product_category: Optional[str] = None,
                 provisioning_group: Optional[str] = None,
                 ucm_rate_card_part_type: Optional[str] = None,
                 unit_of_measure: Optional[str] = None):
        if billing_category is not None:
            pulumi.set(__self__, "billing_category", billing_category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if part_number is not None:
            pulumi.set(__self__, "part_number", part_number)
        if product_category is not None:
            pulumi.set(__self__, "product_category", product_category)
        if provisioning_group is not None:
            pulumi.set(__self__, "provisioning_group", provisioning_group)
        if ucm_rate_card_part_type is not None:
            pulumi.set(__self__, "ucm_rate_card_part_type", ucm_rate_card_part_type)
        if unit_of_measure is not None:
            pulumi.set(__self__, "unit_of_measure", unit_of_measure)

    @property
    @pulumi.getter(name="billingCategory")
    def billing_category(self) -> Optional[str]:
        return pulumi.get(self, "billing_category")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="partNumber")
    def part_number(self) -> Optional[str]:
        return pulumi.get(self, "part_number")

    @property
    @pulumi.getter(name="productCategory")
    def product_category(self) -> Optional[str]:
        return pulumi.get(self, "product_category")

    @property
    @pulumi.getter(name="provisioningGroup")
    def provisioning_group(self) -> Optional[str]:
        return pulumi.get(self, "provisioning_group")

    @property
    @pulumi.getter(name="ucmRateCardPartType")
    def ucm_rate_card_part_type(self) -> Optional[str]:
        return pulumi.get(self, "ucm_rate_card_part_type")

    @property
    @pulumi.getter(name="unitOfMeasure")
    def unit_of_measure(self) -> Optional[str]:
        return pulumi.get(self, "unit_of_measure")


@pulumi.output_type
class GetAggregatedComputedUsagesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetBillingSchedulesBillingScheduleResult(dict):
    def __init__(__self__, *,
                 amount: Optional[str] = None,
                 ar_customer_transaction_id: Optional[str] = None,
                 ar_invoice_number: Optional[str] = None,
                 billing_frequency: Optional[str] = None,
                 invoice_status: Optional[str] = None,
                 net_unit_price: Optional[str] = None,
                 order_number: Optional[str] = None,
                 products: Optional[Sequence['outputs.GetBillingSchedulesBillingScheduleProductResult']] = None,
                 quantity: Optional[str] = None,
                 subscribed_service_id: Optional[str] = None,
                 time_end: Optional[str] = None,
                 time_invoicing: Optional[str] = None,
                 time_start: Optional[str] = None):
        if amount is not None:
            pulumi.set(__self__, "amount", amount)
        if ar_customer_transaction_id is not None:
            pulumi.set(__self__, "ar_customer_transaction_id", ar_customer_transaction_id)
        if ar_invoice_number is not None:
            pulumi.set(__self__, "ar_invoice_number", ar_invoice_number)
        if billing_frequency is not None:
            pulumi.set(__self__, "billing_frequency", billing_frequency)
        if invoice_status is not None:
            pulumi.set(__self__, "invoice_status", invoice_status)
        if net_unit_price is not None:
            pulumi.set(__self__, "net_unit_price", net_unit_price)
        if order_number is not None:
            pulumi.set(__self__, "order_number", order_number)
        if products is not None:
            pulumi.set(__self__, "products", products)
        if quantity is not None:
            pulumi.set(__self__, "quantity", quantity)
        if subscribed_service_id is not None:
            pulumi.set(__self__, "subscribed_service_id", subscribed_service_id)
        if time_end is not None:
            pulumi.set(__self__, "time_end", time_end)
        if time_invoicing is not None:
            pulumi.set(__self__, "time_invoicing", time_invoicing)
        if time_start is not None:
            pulumi.set(__self__, "time_start", time_start)

    @property
    @pulumi.getter
    def amount(self) -> Optional[str]:
        return pulumi.get(self, "amount")

    @property
    @pulumi.getter(name="arCustomerTransactionId")
    def ar_customer_transaction_id(self) -> Optional[str]:
        return pulumi.get(self, "ar_customer_transaction_id")

    @property
    @pulumi.getter(name="arInvoiceNumber")
    def ar_invoice_number(self) -> Optional[str]:
        return pulumi.get(self, "ar_invoice_number")

    @property
    @pulumi.getter(name="billingFrequency")
    def billing_frequency(self) -> Optional[str]:
        return pulumi.get(self, "billing_frequency")

    @property
    @pulumi.getter(name="invoiceStatus")
    def invoice_status(self) -> Optional[str]:
        return pulumi.get(self, "invoice_status")

    @property
    @pulumi.getter(name="netUnitPrice")
    def net_unit_price(self) -> Optional[str]:
        return pulumi.get(self, "net_unit_price")

    @property
    @pulumi.getter(name="orderNumber")
    def order_number(self) -> Optional[str]:
        return pulumi.get(self, "order_number")

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence['outputs.GetBillingSchedulesBillingScheduleProductResult']]:
        return pulumi.get(self, "products")

    @property
    @pulumi.getter
    def quantity(self) -> Optional[str]:
        return pulumi.get(self, "quantity")

    @property
    @pulumi.getter(name="subscribedServiceId")
    def subscribed_service_id(self) -> Optional[str]:
        return pulumi.get(self, "subscribed_service_id")

    @property
    @pulumi.getter(name="timeEnd")
    def time_end(self) -> Optional[str]:
        return pulumi.get(self, "time_end")

    @property
    @pulumi.getter(name="timeInvoicing")
    def time_invoicing(self) -> Optional[str]:
        return pulumi.get(self, "time_invoicing")

    @property
    @pulumi.getter(name="timeStart")
    def time_start(self) -> Optional[str]:
        return pulumi.get(self, "time_start")


@pulumi.output_type
class GetBillingSchedulesBillingScheduleProductResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 part_number: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if part_number is not None:
            pulumi.set(__self__, "part_number", part_number)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="partNumber")
    def part_number(self) -> Optional[str]:
        return pulumi.get(self, "part_number")


@pulumi.output_type
class GetBillingSchedulesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetCommitmentsCommitmentResult(dict):
    def __init__(__self__, *,
                 available_amount: Optional[str] = None,
                 funded_allocation_value: Optional[str] = None,
                 id: Optional[str] = None,
                 quantity: Optional[str] = None,
                 subscribed_service_id: Optional[str] = None,
                 time_end: Optional[str] = None,
                 time_start: Optional[str] = None,
                 used_amount: Optional[str] = None):
        if available_amount is not None:
            pulumi.set(__self__, "available_amount", available_amount)
        if funded_allocation_value is not None:
            pulumi.set(__self__, "funded_allocation_value", funded_allocation_value)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if quantity is not None:
            pulumi.set(__self__, "quantity", quantity)
        if subscribed_service_id is not None:
            pulumi.set(__self__, "subscribed_service_id", subscribed_service_id)
        if time_end is not None:
            pulumi.set(__self__, "time_end", time_end)
        if time_start is not None:
            pulumi.set(__self__, "time_start", time_start)
        if used_amount is not None:
            pulumi.set(__self__, "used_amount", used_amount)

    @property
    @pulumi.getter(name="availableAmount")
    def available_amount(self) -> Optional[str]:
        return pulumi.get(self, "available_amount")

    @property
    @pulumi.getter(name="fundedAllocationValue")
    def funded_allocation_value(self) -> Optional[str]:
        return pulumi.get(self, "funded_allocation_value")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def quantity(self) -> Optional[str]:
        return pulumi.get(self, "quantity")

    @property
    @pulumi.getter(name="subscribedServiceId")
    def subscribed_service_id(self) -> Optional[str]:
        return pulumi.get(self, "subscribed_service_id")

    @property
    @pulumi.getter(name="timeEnd")
    def time_end(self) -> Optional[str]:
        return pulumi.get(self, "time_end")

    @property
    @pulumi.getter(name="timeStart")
    def time_start(self) -> Optional[str]:
        return pulumi.get(self, "time_start")

    @property
    @pulumi.getter(name="usedAmount")
    def used_amount(self) -> Optional[str]:
        return pulumi.get(self, "used_amount")


@pulumi.output_type
class GetCommitmentsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetComputedUsageParentProductResult(dict):
    def __init__(__self__, *,
                 billing_category: Optional[str] = None,
                 name: Optional[str] = None,
                 part_number: Optional[str] = None,
                 product_category: Optional[str] = None,
                 provisioning_group: Optional[str] = None,
                 ucm_rate_card_part_type: Optional[str] = None,
                 unit_of_measure: Optional[str] = None):
        if billing_category is not None:
            pulumi.set(__self__, "billing_category", billing_category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if part_number is not None:
            pulumi.set(__self__, "part_number", part_number)
        if product_category is not None:
            pulumi.set(__self__, "product_category", product_category)
        if provisioning_group is not None:
            pulumi.set(__self__, "provisioning_group", provisioning_group)
        if ucm_rate_card_part_type is not None:
            pulumi.set(__self__, "ucm_rate_card_part_type", ucm_rate_card_part_type)
        if unit_of_measure is not None:
            pulumi.set(__self__, "unit_of_measure", unit_of_measure)

    @property
    @pulumi.getter(name="billingCategory")
    def billing_category(self) -> Optional[str]:
        return pulumi.get(self, "billing_category")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="partNumber")
    def part_number(self) -> Optional[str]:
        return pulumi.get(self, "part_number")

    @property
    @pulumi.getter(name="productCategory")
    def product_category(self) -> Optional[str]:
        return pulumi.get(self, "product_category")

    @property
    @pulumi.getter(name="provisioningGroup")
    def provisioning_group(self) -> Optional[str]:
        return pulumi.get(self, "provisioning_group")

    @property
    @pulumi.getter(name="ucmRateCardPartType")
    def ucm_rate_card_part_type(self) -> Optional[str]:
        return pulumi.get(self, "ucm_rate_card_part_type")

    @property
    @pulumi.getter(name="unitOfMeasure")
    def unit_of_measure(self) -> Optional[str]:
        return pulumi.get(self, "unit_of_measure")


@pulumi.output_type
class GetComputedUsageProductResult(dict):
    def __init__(__self__, *,
                 billing_category: Optional[str] = None,
                 name: Optional[str] = None,
                 part_number: Optional[str] = None,
                 product_category: Optional[str] = None,
                 provisioning_group: Optional[str] = None,
                 ucm_rate_card_part_type: Optional[str] = None,
                 unit_of_measure: Optional[str] = None):
        if billing_category is not None:
            pulumi.set(__self__, "billing_category", billing_category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if part_number is not None:
            pulumi.set(__self__, "part_number", part_number)
        if product_category is not None:
            pulumi.set(__self__, "product_category", product_category)
        if provisioning_group is not None:
            pulumi.set(__self__, "provisioning_group", provisioning_group)
        if ucm_rate_card_part_type is not None:
            pulumi.set(__self__, "ucm_rate_card_part_type", ucm_rate_card_part_type)
        if unit_of_measure is not None:
            pulumi.set(__self__, "unit_of_measure", unit_of_measure)

    @property
    @pulumi.getter(name="billingCategory")
    def billing_category(self) -> Optional[str]:
        return pulumi.get(self, "billing_category")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="partNumber")
    def part_number(self) -> Optional[str]:
        return pulumi.get(self, "part_number")

    @property
    @pulumi.getter(name="productCategory")
    def product_category(self) -> Optional[str]:
        return pulumi.get(self, "product_category")

    @property
    @pulumi.getter(name="provisioningGroup")
    def provisioning_group(self) -> Optional[str]:
        return pulumi.get(self, "provisioning_group")

    @property
    @pulumi.getter(name="ucmRateCardPartType")
    def ucm_rate_card_part_type(self) -> Optional[str]:
        return pulumi.get(self, "ucm_rate_card_part_type")

    @property
    @pulumi.getter(name="unitOfMeasure")
    def unit_of_measure(self) -> Optional[str]:
        return pulumi.get(self, "unit_of_measure")


@pulumi.output_type
class GetComputedUsagesComputedUsageResult(dict):
    def __init__(__self__, *,
                 commitment_service_id: Optional[str] = None,
                 compute_source: Optional[str] = None,
                 computed_usage_id: Optional[str] = None,
                 cost: Optional[str] = None,
                 cost_rounded: Optional[str] = None,
                 currency_code: Optional[str] = None,
                 data_center: Optional[str] = None,
                 id: Optional[str] = None,
                 is_invoiced: Optional[bool] = None,
                 mqs_message_id: Optional[str] = None,
                 net_unit_price: Optional[str] = None,
                 original_usage_number: Optional[str] = None,
                 parent_products: Optional[Sequence['outputs.GetComputedUsagesComputedUsageParentProductResult']] = None,
                 parent_subscribed_service_id: Optional[str] = None,
                 plan_number: Optional[str] = None,
                 products: Optional[Sequence['outputs.GetComputedUsagesComputedUsageProductResult']] = None,
                 quantity: Optional[str] = None,
                 rate_card_id: Optional[str] = None,
                 rate_card_tierd_id: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_metered_on: Optional[str] = None,
                 time_of_arrival: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 type: Optional[str] = None,
                 unit_of_measure: Optional[str] = None,
                 usage_number: Optional[str] = None):
        if commitment_service_id is not None:
            pulumi.set(__self__, "commitment_service_id", commitment_service_id)
        if compute_source is not None:
            pulumi.set(__self__, "compute_source", compute_source)
        if computed_usage_id is not None:
            pulumi.set(__self__, "computed_usage_id", computed_usage_id)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if cost_rounded is not None:
            pulumi.set(__self__, "cost_rounded", cost_rounded)
        if currency_code is not None:
            pulumi.set(__self__, "currency_code", currency_code)
        if data_center is not None:
            pulumi.set(__self__, "data_center", data_center)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_invoiced is not None:
            pulumi.set(__self__, "is_invoiced", is_invoiced)
        if mqs_message_id is not None:
            pulumi.set(__self__, "mqs_message_id", mqs_message_id)
        if net_unit_price is not None:
            pulumi.set(__self__, "net_unit_price", net_unit_price)
        if original_usage_number is not None:
            pulumi.set(__self__, "original_usage_number", original_usage_number)
        if parent_products is not None:
            pulumi.set(__self__, "parent_products", parent_products)
        if parent_subscribed_service_id is not None:
            pulumi.set(__self__, "parent_subscribed_service_id", parent_subscribed_service_id)
        if plan_number is not None:
            pulumi.set(__self__, "plan_number", plan_number)
        if products is not None:
            pulumi.set(__self__, "products", products)
        if quantity is not None:
            pulumi.set(__self__, "quantity", quantity)
        if rate_card_id is not None:
            pulumi.set(__self__, "rate_card_id", rate_card_id)
        if rate_card_tierd_id is not None:
            pulumi.set(__self__, "rate_card_tierd_id", rate_card_tierd_id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_metered_on is not None:
            pulumi.set(__self__, "time_metered_on", time_metered_on)
        if time_of_arrival is not None:
            pulumi.set(__self__, "time_of_arrival", time_of_arrival)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit_of_measure is not None:
            pulumi.set(__self__, "unit_of_measure", unit_of_measure)
        if usage_number is not None:
            pulumi.set(__self__, "usage_number", usage_number)

    @property
    @pulumi.getter(name="commitmentServiceId")
    def commitment_service_id(self) -> Optional[str]:
        return pulumi.get(self, "commitment_service_id")

    @property
    @pulumi.getter(name="computeSource")
    def compute_source(self) -> Optional[str]:
        return pulumi.get(self, "compute_source")

    @property
    @pulumi.getter(name="computedUsageId")
    def computed_usage_id(self) -> Optional[str]:
        return pulumi.get(self, "computed_usage_id")

    @property
    @pulumi.getter
    def cost(self) -> Optional[str]:
        return pulumi.get(self, "cost")

    @property
    @pulumi.getter(name="costRounded")
    def cost_rounded(self) -> Optional[str]:
        return pulumi.get(self, "cost_rounded")

    @property
    @pulumi.getter(name="currencyCode")
    def currency_code(self) -> Optional[str]:
        return pulumi.get(self, "currency_code")

    @property
    @pulumi.getter(name="dataCenter")
    def data_center(self) -> Optional[str]:
        return pulumi.get(self, "data_center")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isInvoiced")
    def is_invoiced(self) -> Optional[bool]:
        return pulumi.get(self, "is_invoiced")

    @property
    @pulumi.getter(name="mqsMessageId")
    def mqs_message_id(self) -> Optional[str]:
        return pulumi.get(self, "mqs_message_id")

    @property
    @pulumi.getter(name="netUnitPrice")
    def net_unit_price(self) -> Optional[str]:
        return pulumi.get(self, "net_unit_price")

    @property
    @pulumi.getter(name="originalUsageNumber")
    def original_usage_number(self) -> Optional[str]:
        return pulumi.get(self, "original_usage_number")

    @property
    @pulumi.getter(name="parentProducts")
    def parent_products(self) -> Optional[Sequence['outputs.GetComputedUsagesComputedUsageParentProductResult']]:
        return pulumi.get(self, "parent_products")

    @property
    @pulumi.getter(name="parentSubscribedServiceId")
    def parent_subscribed_service_id(self) -> Optional[str]:
        return pulumi.get(self, "parent_subscribed_service_id")

    @property
    @pulumi.getter(name="planNumber")
    def plan_number(self) -> Optional[str]:
        return pulumi.get(self, "plan_number")

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence['outputs.GetComputedUsagesComputedUsageProductResult']]:
        return pulumi.get(self, "products")

    @property
    @pulumi.getter
    def quantity(self) -> Optional[str]:
        return pulumi.get(self, "quantity")

    @property
    @pulumi.getter(name="rateCardId")
    def rate_card_id(self) -> Optional[str]:
        return pulumi.get(self, "rate_card_id")

    @property
    @pulumi.getter(name="rateCardTierdId")
    def rate_card_tierd_id(self) -> Optional[str]:
        return pulumi.get(self, "rate_card_tierd_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeMeteredOn")
    def time_metered_on(self) -> Optional[str]:
        return pulumi.get(self, "time_metered_on")

    @property
    @pulumi.getter(name="timeOfArrival")
    def time_of_arrival(self) -> Optional[str]:
        return pulumi.get(self, "time_of_arrival")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="unitOfMeasure")
    def unit_of_measure(self) -> Optional[str]:
        return pulumi.get(self, "unit_of_measure")

    @property
    @pulumi.getter(name="usageNumber")
    def usage_number(self) -> Optional[str]:
        return pulumi.get(self, "usage_number")


@pulumi.output_type
class GetComputedUsagesComputedUsageParentProductResult(dict):
    def __init__(__self__, *,
                 billing_category: Optional[str] = None,
                 name: Optional[str] = None,
                 part_number: Optional[str] = None,
                 product_category: Optional[str] = None,
                 provisioning_group: Optional[str] = None,
                 ucm_rate_card_part_type: Optional[str] = None,
                 unit_of_measure: Optional[str] = None):
        if billing_category is not None:
            pulumi.set(__self__, "billing_category", billing_category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if part_number is not None:
            pulumi.set(__self__, "part_number", part_number)
        if product_category is not None:
            pulumi.set(__self__, "product_category", product_category)
        if provisioning_group is not None:
            pulumi.set(__self__, "provisioning_group", provisioning_group)
        if ucm_rate_card_part_type is not None:
            pulumi.set(__self__, "ucm_rate_card_part_type", ucm_rate_card_part_type)
        if unit_of_measure is not None:
            pulumi.set(__self__, "unit_of_measure", unit_of_measure)

    @property
    @pulumi.getter(name="billingCategory")
    def billing_category(self) -> Optional[str]:
        return pulumi.get(self, "billing_category")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="partNumber")
    def part_number(self) -> Optional[str]:
        return pulumi.get(self, "part_number")

    @property
    @pulumi.getter(name="productCategory")
    def product_category(self) -> Optional[str]:
        return pulumi.get(self, "product_category")

    @property
    @pulumi.getter(name="provisioningGroup")
    def provisioning_group(self) -> Optional[str]:
        return pulumi.get(self, "provisioning_group")

    @property
    @pulumi.getter(name="ucmRateCardPartType")
    def ucm_rate_card_part_type(self) -> Optional[str]:
        return pulumi.get(self, "ucm_rate_card_part_type")

    @property
    @pulumi.getter(name="unitOfMeasure")
    def unit_of_measure(self) -> Optional[str]:
        return pulumi.get(self, "unit_of_measure")


@pulumi.output_type
class GetComputedUsagesComputedUsageProductResult(dict):
    def __init__(__self__, *,
                 billing_category: Optional[str] = None,
                 name: Optional[str] = None,
                 part_number: Optional[str] = None,
                 product_category: Optional[str] = None,
                 provisioning_group: Optional[str] = None,
                 ucm_rate_card_part_type: Optional[str] = None,
                 unit_of_measure: Optional[str] = None):
        if billing_category is not None:
            pulumi.set(__self__, "billing_category", billing_category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if part_number is not None:
            pulumi.set(__self__, "part_number", part_number)
        if product_category is not None:
            pulumi.set(__self__, "product_category", product_category)
        if provisioning_group is not None:
            pulumi.set(__self__, "provisioning_group", provisioning_group)
        if ucm_rate_card_part_type is not None:
            pulumi.set(__self__, "ucm_rate_card_part_type", ucm_rate_card_part_type)
        if unit_of_measure is not None:
            pulumi.set(__self__, "unit_of_measure", unit_of_measure)

    @property
    @pulumi.getter(name="billingCategory")
    def billing_category(self) -> Optional[str]:
        return pulumi.get(self, "billing_category")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="partNumber")
    def part_number(self) -> Optional[str]:
        return pulumi.get(self, "part_number")

    @property
    @pulumi.getter(name="productCategory")
    def product_category(self) -> Optional[str]:
        return pulumi.get(self, "product_category")

    @property
    @pulumi.getter(name="provisioningGroup")
    def provisioning_group(self) -> Optional[str]:
        return pulumi.get(self, "provisioning_group")

    @property
    @pulumi.getter(name="ucmRateCardPartType")
    def ucm_rate_card_part_type(self) -> Optional[str]:
        return pulumi.get(self, "ucm_rate_card_part_type")

    @property
    @pulumi.getter(name="unitOfMeasure")
    def unit_of_measure(self) -> Optional[str]:
        return pulumi.get(self, "unit_of_measure")


@pulumi.output_type
class GetComputedUsagesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetInvoiceLineComputedUsagesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetInvoiceLineComputedUsagesInvoicelineComputedUsageResult(dict):
    def __init__(__self__, *,
                 cost: Optional[float] = None,
                 cost_rounded: Optional[float] = None,
                 net_unit_price: Optional[float] = None,
                 parent_products: Optional[Sequence['outputs.GetInvoiceLineComputedUsagesInvoicelineComputedUsageParentProductResult']] = None,
                 products: Optional[Sequence['outputs.GetInvoiceLineComputedUsagesInvoicelineComputedUsageProductResult']] = None,
                 quantity: Optional[float] = None,
                 time_metered_on: Optional[str] = None,
                 type: Optional[str] = None):
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if cost_rounded is not None:
            pulumi.set(__self__, "cost_rounded", cost_rounded)
        if net_unit_price is not None:
            pulumi.set(__self__, "net_unit_price", net_unit_price)
        if parent_products is not None:
            pulumi.set(__self__, "parent_products", parent_products)
        if products is not None:
            pulumi.set(__self__, "products", products)
        if quantity is not None:
            pulumi.set(__self__, "quantity", quantity)
        if time_metered_on is not None:
            pulumi.set(__self__, "time_metered_on", time_metered_on)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def cost(self) -> Optional[float]:
        return pulumi.get(self, "cost")

    @property
    @pulumi.getter(name="costRounded")
    def cost_rounded(self) -> Optional[float]:
        return pulumi.get(self, "cost_rounded")

    @property
    @pulumi.getter(name="netUnitPrice")
    def net_unit_price(self) -> Optional[float]:
        return pulumi.get(self, "net_unit_price")

    @property
    @pulumi.getter(name="parentProducts")
    def parent_products(self) -> Optional[Sequence['outputs.GetInvoiceLineComputedUsagesInvoicelineComputedUsageParentProductResult']]:
        return pulumi.get(self, "parent_products")

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence['outputs.GetInvoiceLineComputedUsagesInvoicelineComputedUsageProductResult']]:
        return pulumi.get(self, "products")

    @property
    @pulumi.getter
    def quantity(self) -> Optional[float]:
        return pulumi.get(self, "quantity")

    @property
    @pulumi.getter(name="timeMeteredOn")
    def time_metered_on(self) -> Optional[str]:
        return pulumi.get(self, "time_metered_on")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetInvoiceLineComputedUsagesInvoicelineComputedUsageParentProductResult(dict):
    def __init__(__self__, *,
                 billing_category: Optional[str] = None,
                 name: Optional[str] = None,
                 part_number: Optional[str] = None,
                 product_category: Optional[str] = None,
                 ucm_rate_card_part_type: Optional[str] = None,
                 unit_of_measure: Optional[str] = None):
        if billing_category is not None:
            pulumi.set(__self__, "billing_category", billing_category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if part_number is not None:
            pulumi.set(__self__, "part_number", part_number)
        if product_category is not None:
            pulumi.set(__self__, "product_category", product_category)
        if ucm_rate_card_part_type is not None:
            pulumi.set(__self__, "ucm_rate_card_part_type", ucm_rate_card_part_type)
        if unit_of_measure is not None:
            pulumi.set(__self__, "unit_of_measure", unit_of_measure)

    @property
    @pulumi.getter(name="billingCategory")
    def billing_category(self) -> Optional[str]:
        return pulumi.get(self, "billing_category")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="partNumber")
    def part_number(self) -> Optional[str]:
        return pulumi.get(self, "part_number")

    @property
    @pulumi.getter(name="productCategory")
    def product_category(self) -> Optional[str]:
        return pulumi.get(self, "product_category")

    @property
    @pulumi.getter(name="ucmRateCardPartType")
    def ucm_rate_card_part_type(self) -> Optional[str]:
        return pulumi.get(self, "ucm_rate_card_part_type")

    @property
    @pulumi.getter(name="unitOfMeasure")
    def unit_of_measure(self) -> Optional[str]:
        return pulumi.get(self, "unit_of_measure")


@pulumi.output_type
class GetInvoiceLineComputedUsagesInvoicelineComputedUsageProductResult(dict):
    def __init__(__self__, *,
                 billing_category: Optional[str] = None,
                 name: Optional[str] = None,
                 part_number: Optional[str] = None,
                 product_category: Optional[str] = None,
                 ucm_rate_card_part_type: Optional[str] = None,
                 unit_of_measure: Optional[str] = None):
        if billing_category is not None:
            pulumi.set(__self__, "billing_category", billing_category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if part_number is not None:
            pulumi.set(__self__, "part_number", part_number)
        if product_category is not None:
            pulumi.set(__self__, "product_category", product_category)
        if ucm_rate_card_part_type is not None:
            pulumi.set(__self__, "ucm_rate_card_part_type", ucm_rate_card_part_type)
        if unit_of_measure is not None:
            pulumi.set(__self__, "unit_of_measure", unit_of_measure)

    @property
    @pulumi.getter(name="billingCategory")
    def billing_category(self) -> Optional[str]:
        return pulumi.get(self, "billing_category")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="partNumber")
    def part_number(self) -> Optional[str]:
        return pulumi.get(self, "part_number")

    @property
    @pulumi.getter(name="productCategory")
    def product_category(self) -> Optional[str]:
        return pulumi.get(self, "product_category")

    @property
    @pulumi.getter(name="ucmRateCardPartType")
    def ucm_rate_card_part_type(self) -> Optional[str]:
        return pulumi.get(self, "ucm_rate_card_part_type")

    @property
    @pulumi.getter(name="unitOfMeasure")
    def unit_of_measure(self) -> Optional[str]:
        return pulumi.get(self, "unit_of_measure")


@pulumi.output_type
class GetInvoicesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetInvoicesInvoiceResult(dict):
    def __init__(__self__, *,
                 ar_invoices: Optional[str] = None,
                 bill_to_addresses: Optional[Sequence['outputs.GetInvoicesInvoiceBillToAddressResult']] = None,
                 bill_to_contacts: Optional[Sequence['outputs.GetInvoicesInvoiceBillToContactResult']] = None,
                 bill_to_customers: Optional[Sequence['outputs.GetInvoicesInvoiceBillToCustomerResult']] = None,
                 created_by: Optional[str] = None,
                 currencies: Optional[Sequence['outputs.GetInvoicesInvoiceCurrencyResult']] = None,
                 invoice_lines: Optional[Sequence['outputs.GetInvoicesInvoiceInvoiceLineResult']] = None,
                 organizations: Optional[Sequence['outputs.GetInvoicesInvoiceOrganizationResult']] = None,
                 payment_method: Optional[str] = None,
                 payment_terms: Optional[Sequence['outputs.GetInvoicesInvoicePaymentTermResult']] = None,
                 receipt_method: Optional[str] = None,
                 spm_invoice_number: Optional[str] = None,
                 status: Optional[str] = None,
                 subscription_number: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_invoice_date: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 type: Optional[str] = None,
                 updated_by: Optional[str] = None):
        if ar_invoices is not None:
            pulumi.set(__self__, "ar_invoices", ar_invoices)
        if bill_to_addresses is not None:
            pulumi.set(__self__, "bill_to_addresses", bill_to_addresses)
        if bill_to_contacts is not None:
            pulumi.set(__self__, "bill_to_contacts", bill_to_contacts)
        if bill_to_customers is not None:
            pulumi.set(__self__, "bill_to_customers", bill_to_customers)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if currencies is not None:
            pulumi.set(__self__, "currencies", currencies)
        if invoice_lines is not None:
            pulumi.set(__self__, "invoice_lines", invoice_lines)
        if organizations is not None:
            pulumi.set(__self__, "organizations", organizations)
        if payment_method is not None:
            pulumi.set(__self__, "payment_method", payment_method)
        if payment_terms is not None:
            pulumi.set(__self__, "payment_terms", payment_terms)
        if receipt_method is not None:
            pulumi.set(__self__, "receipt_method", receipt_method)
        if spm_invoice_number is not None:
            pulumi.set(__self__, "spm_invoice_number", spm_invoice_number)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if subscription_number is not None:
            pulumi.set(__self__, "subscription_number", subscription_number)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_invoice_date is not None:
            pulumi.set(__self__, "time_invoice_date", time_invoice_date)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)

    @property
    @pulumi.getter(name="arInvoices")
    def ar_invoices(self) -> Optional[str]:
        return pulumi.get(self, "ar_invoices")

    @property
    @pulumi.getter(name="billToAddresses")
    def bill_to_addresses(self) -> Optional[Sequence['outputs.GetInvoicesInvoiceBillToAddressResult']]:
        return pulumi.get(self, "bill_to_addresses")

    @property
    @pulumi.getter(name="billToContacts")
    def bill_to_contacts(self) -> Optional[Sequence['outputs.GetInvoicesInvoiceBillToContactResult']]:
        return pulumi.get(self, "bill_to_contacts")

    @property
    @pulumi.getter(name="billToCustomers")
    def bill_to_customers(self) -> Optional[Sequence['outputs.GetInvoicesInvoiceBillToCustomerResult']]:
        return pulumi.get(self, "bill_to_customers")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter
    def currencies(self) -> Optional[Sequence['outputs.GetInvoicesInvoiceCurrencyResult']]:
        return pulumi.get(self, "currencies")

    @property
    @pulumi.getter(name="invoiceLines")
    def invoice_lines(self) -> Optional[Sequence['outputs.GetInvoicesInvoiceInvoiceLineResult']]:
        return pulumi.get(self, "invoice_lines")

    @property
    @pulumi.getter
    def organizations(self) -> Optional[Sequence['outputs.GetInvoicesInvoiceOrganizationResult']]:
        return pulumi.get(self, "organizations")

    @property
    @pulumi.getter(name="paymentMethod")
    def payment_method(self) -> Optional[str]:
        return pulumi.get(self, "payment_method")

    @property
    @pulumi.getter(name="paymentTerms")
    def payment_terms(self) -> Optional[Sequence['outputs.GetInvoicesInvoicePaymentTermResult']]:
        return pulumi.get(self, "payment_terms")

    @property
    @pulumi.getter(name="receiptMethod")
    def receipt_method(self) -> Optional[str]:
        return pulumi.get(self, "receipt_method")

    @property
    @pulumi.getter(name="spmInvoiceNumber")
    def spm_invoice_number(self) -> Optional[str]:
        return pulumi.get(self, "spm_invoice_number")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subscriptionNumber")
    def subscription_number(self) -> Optional[str]:
        return pulumi.get(self, "subscription_number")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeInvoiceDate")
    def time_invoice_date(self) -> Optional[str]:
        return pulumi.get(self, "time_invoice_date")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[str]:
        return pulumi.get(self, "updated_by")


@pulumi.output_type
class GetInvoicesInvoiceBillToAddressResult(dict):
    def __init__(__self__, *,
                 bill_site_use_id: Optional[str] = None,
                 is_bill_to: Optional[bool] = None,
                 is_ship_to: Optional[bool] = None,
                 locations: Optional[Sequence['outputs.GetInvoicesInvoiceBillToAddressLocationResult']] = None,
                 name: Optional[str] = None,
                 phone: Optional[str] = None,
                 service2site_use_id: Optional[str] = None,
                 tca_cust_acct_site_id: Optional[str] = None,
                 tca_party_site_number: Optional[str] = None):
        if bill_site_use_id is not None:
            pulumi.set(__self__, "bill_site_use_id", bill_site_use_id)
        if is_bill_to is not None:
            pulumi.set(__self__, "is_bill_to", is_bill_to)
        if is_ship_to is not None:
            pulumi.set(__self__, "is_ship_to", is_ship_to)
        if locations is not None:
            pulumi.set(__self__, "locations", locations)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if phone is not None:
            pulumi.set(__self__, "phone", phone)
        if service2site_use_id is not None:
            pulumi.set(__self__, "service2site_use_id", service2site_use_id)
        if tca_cust_acct_site_id is not None:
            pulumi.set(__self__, "tca_cust_acct_site_id", tca_cust_acct_site_id)
        if tca_party_site_number is not None:
            pulumi.set(__self__, "tca_party_site_number", tca_party_site_number)

    @property
    @pulumi.getter(name="billSiteUseId")
    def bill_site_use_id(self) -> Optional[str]:
        return pulumi.get(self, "bill_site_use_id")

    @property
    @pulumi.getter(name="isBillTo")
    def is_bill_to(self) -> Optional[bool]:
        return pulumi.get(self, "is_bill_to")

    @property
    @pulumi.getter(name="isShipTo")
    def is_ship_to(self) -> Optional[bool]:
        return pulumi.get(self, "is_ship_to")

    @property
    @pulumi.getter
    def locations(self) -> Optional[Sequence['outputs.GetInvoicesInvoiceBillToAddressLocationResult']]:
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def phone(self) -> Optional[str]:
        return pulumi.get(self, "phone")

    @property
    @pulumi.getter(name="service2siteUseId")
    def service2site_use_id(self) -> Optional[str]:
        return pulumi.get(self, "service2site_use_id")

    @property
    @pulumi.getter(name="tcaCustAcctSiteId")
    def tca_cust_acct_site_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_cust_acct_site_id")

    @property
    @pulumi.getter(name="tcaPartySiteNumber")
    def tca_party_site_number(self) -> Optional[str]:
        return pulumi.get(self, "tca_party_site_number")


@pulumi.output_type
class GetInvoicesInvoiceBillToAddressLocationResult(dict):
    def __init__(__self__, *,
                 address1: Optional[str] = None,
                 address2: Optional[str] = None,
                 city: Optional[str] = None,
                 country: Optional[str] = None,
                 postal_code: Optional[str] = None,
                 region: Optional[str] = None,
                 tca_location_id: Optional[str] = None):
        if address1 is not None:
            pulumi.set(__self__, "address1", address1)
        if address2 is not None:
            pulumi.set(__self__, "address2", address2)
        if city is not None:
            pulumi.set(__self__, "city", city)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if postal_code is not None:
            pulumi.set(__self__, "postal_code", postal_code)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if tca_location_id is not None:
            pulumi.set(__self__, "tca_location_id", tca_location_id)

    @property
    @pulumi.getter
    def address1(self) -> Optional[str]:
        return pulumi.get(self, "address1")

    @property
    @pulumi.getter
    def address2(self) -> Optional[str]:
        return pulumi.get(self, "address2")

    @property
    @pulumi.getter
    def city(self) -> Optional[str]:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> Optional[str]:
        return pulumi.get(self, "postal_code")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="tcaLocationId")
    def tca_location_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_location_id")


@pulumi.output_type
class GetInvoicesInvoiceBillToContactResult(dict):
    def __init__(__self__, *,
                 email: Optional[str] = None,
                 first_name: Optional[str] = None,
                 last_name: Optional[str] = None,
                 name: Optional[str] = None,
                 tca_contact_id: Optional[str] = None,
                 tca_cust_accnt_site_id: Optional[str] = None,
                 tca_party_id: Optional[str] = None,
                 user_name: Optional[str] = None):
        if email is not None:
            pulumi.set(__self__, "email", email)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tca_contact_id is not None:
            pulumi.set(__self__, "tca_contact_id", tca_contact_id)
        if tca_cust_accnt_site_id is not None:
            pulumi.set(__self__, "tca_cust_accnt_site_id", tca_cust_accnt_site_id)
        if tca_party_id is not None:
            pulumi.set(__self__, "tca_party_id", tca_party_id)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[str]:
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[str]:
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="tcaContactId")
    def tca_contact_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_contact_id")

    @property
    @pulumi.getter(name="tcaCustAccntSiteId")
    def tca_cust_accnt_site_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_cust_accnt_site_id")

    @property
    @pulumi.getter(name="tcaPartyId")
    def tca_party_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_party_id")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        return pulumi.get(self, "user_name")


@pulumi.output_type
class GetInvoicesInvoiceBillToCustomerResult(dict):
    def __init__(__self__, *,
                 customer_chain_type: Optional[str] = None,
                 is_chain_customer: Optional[bool] = None,
                 is_public_sector: Optional[bool] = None,
                 name: Optional[str] = None,
                 name_phonetic: Optional[str] = None,
                 tca_customer_account_id: Optional[str] = None,
                 tca_customer_account_number: Optional[str] = None,
                 tca_party_id: Optional[str] = None,
                 tca_party_number: Optional[str] = None):
        if customer_chain_type is not None:
            pulumi.set(__self__, "customer_chain_type", customer_chain_type)
        if is_chain_customer is not None:
            pulumi.set(__self__, "is_chain_customer", is_chain_customer)
        if is_public_sector is not None:
            pulumi.set(__self__, "is_public_sector", is_public_sector)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_phonetic is not None:
            pulumi.set(__self__, "name_phonetic", name_phonetic)
        if tca_customer_account_id is not None:
            pulumi.set(__self__, "tca_customer_account_id", tca_customer_account_id)
        if tca_customer_account_number is not None:
            pulumi.set(__self__, "tca_customer_account_number", tca_customer_account_number)
        if tca_party_id is not None:
            pulumi.set(__self__, "tca_party_id", tca_party_id)
        if tca_party_number is not None:
            pulumi.set(__self__, "tca_party_number", tca_party_number)

    @property
    @pulumi.getter(name="customerChainType")
    def customer_chain_type(self) -> Optional[str]:
        return pulumi.get(self, "customer_chain_type")

    @property
    @pulumi.getter(name="isChainCustomer")
    def is_chain_customer(self) -> Optional[bool]:
        return pulumi.get(self, "is_chain_customer")

    @property
    @pulumi.getter(name="isPublicSector")
    def is_public_sector(self) -> Optional[bool]:
        return pulumi.get(self, "is_public_sector")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="namePhonetic")
    def name_phonetic(self) -> Optional[str]:
        return pulumi.get(self, "name_phonetic")

    @property
    @pulumi.getter(name="tcaCustomerAccountId")
    def tca_customer_account_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_customer_account_id")

    @property
    @pulumi.getter(name="tcaCustomerAccountNumber")
    def tca_customer_account_number(self) -> Optional[str]:
        return pulumi.get(self, "tca_customer_account_number")

    @property
    @pulumi.getter(name="tcaPartyId")
    def tca_party_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_party_id")

    @property
    @pulumi.getter(name="tcaPartyNumber")
    def tca_party_number(self) -> Optional[str]:
        return pulumi.get(self, "tca_party_number")


@pulumi.output_type
class GetInvoicesInvoiceCurrencyResult(dict):
    def __init__(__self__, *,
                 iso_code: Optional[str] = None,
                 name: Optional[str] = None,
                 std_precision: Optional[str] = None):
        if iso_code is not None:
            pulumi.set(__self__, "iso_code", iso_code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if std_precision is not None:
            pulumi.set(__self__, "std_precision", std_precision)

    @property
    @pulumi.getter(name="isoCode")
    def iso_code(self) -> Optional[str]:
        return pulumi.get(self, "iso_code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="stdPrecision")
    def std_precision(self) -> Optional[str]:
        return pulumi.get(self, "std_precision")


@pulumi.output_type
class GetInvoicesInvoiceInvoiceLineResult(dict):
    def __init__(__self__, *,
                 ar_invoice_number: Optional[str] = None,
                 data_center: Optional[str] = None,
                 id: Optional[str] = None,
                 products: Optional[Sequence['outputs.GetInvoicesInvoiceInvoiceLineProductResult']] = None,
                 time_end: Optional[str] = None,
                 time_start: Optional[str] = None):
        if ar_invoice_number is not None:
            pulumi.set(__self__, "ar_invoice_number", ar_invoice_number)
        if data_center is not None:
            pulumi.set(__self__, "data_center", data_center)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if products is not None:
            pulumi.set(__self__, "products", products)
        if time_end is not None:
            pulumi.set(__self__, "time_end", time_end)
        if time_start is not None:
            pulumi.set(__self__, "time_start", time_start)

    @property
    @pulumi.getter(name="arInvoiceNumber")
    def ar_invoice_number(self) -> Optional[str]:
        return pulumi.get(self, "ar_invoice_number")

    @property
    @pulumi.getter(name="dataCenter")
    def data_center(self) -> Optional[str]:
        return pulumi.get(self, "data_center")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence['outputs.GetInvoicesInvoiceInvoiceLineProductResult']]:
        return pulumi.get(self, "products")

    @property
    @pulumi.getter(name="timeEnd")
    def time_end(self) -> Optional[str]:
        return pulumi.get(self, "time_end")

    @property
    @pulumi.getter(name="timeStart")
    def time_start(self) -> Optional[str]:
        return pulumi.get(self, "time_start")


@pulumi.output_type
class GetInvoicesInvoiceInvoiceLineProductResult(dict):
    def __init__(__self__, *,
                 billing_category: Optional[str] = None,
                 name: Optional[str] = None,
                 part_number: Optional[str] = None,
                 product_category: Optional[str] = None,
                 ucm_rate_card_part_type: Optional[str] = None,
                 unit_of_measure: Optional[str] = None):
        if billing_category is not None:
            pulumi.set(__self__, "billing_category", billing_category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if part_number is not None:
            pulumi.set(__self__, "part_number", part_number)
        if product_category is not None:
            pulumi.set(__self__, "product_category", product_category)
        if ucm_rate_card_part_type is not None:
            pulumi.set(__self__, "ucm_rate_card_part_type", ucm_rate_card_part_type)
        if unit_of_measure is not None:
            pulumi.set(__self__, "unit_of_measure", unit_of_measure)

    @property
    @pulumi.getter(name="billingCategory")
    def billing_category(self) -> Optional[str]:
        return pulumi.get(self, "billing_category")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="partNumber")
    def part_number(self) -> Optional[str]:
        return pulumi.get(self, "part_number")

    @property
    @pulumi.getter(name="productCategory")
    def product_category(self) -> Optional[str]:
        return pulumi.get(self, "product_category")

    @property
    @pulumi.getter(name="ucmRateCardPartType")
    def ucm_rate_card_part_type(self) -> Optional[str]:
        return pulumi.get(self, "ucm_rate_card_part_type")

    @property
    @pulumi.getter(name="unitOfMeasure")
    def unit_of_measure(self) -> Optional[str]:
        return pulumi.get(self, "unit_of_measure")


@pulumi.output_type
class GetInvoicesInvoiceOrganizationResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 number: Optional[float] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if number is not None:
            pulumi.set(__self__, "number", number)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def number(self) -> Optional[float]:
        return pulumi.get(self, "number")


@pulumi.output_type
class GetInvoicesInvoicePaymentTermResult(dict):
    def __init__(__self__, *,
                 created_by: Optional[str] = None,
                 description: Optional[str] = None,
                 is_active: Optional[bool] = None,
                 name: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 updated_by: Optional[str] = None,
                 value: Optional[str] = None):
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if is_active is not None:
            pulumi.set(__self__, "is_active", is_active)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> Optional[bool]:
        return pulumi.get(self, "is_active")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[str]:
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetOrganizationSubscriptionsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetOrganizationSubscriptionsOrganizationSubscriptionResult(dict):
    def __init__(__self__, *,
                 currencies: Optional[Sequence['outputs.GetOrganizationSubscriptionsOrganizationSubscriptionCurrencyResult']] = None,
                 id: Optional[str] = None,
                 service_name: Optional[str] = None,
                 status: Optional[str] = None,
                 time_end: Optional[str] = None,
                 time_start: Optional[str] = None,
                 total_value: Optional[str] = None,
                 type: Optional[str] = None):
        if currencies is not None:
            pulumi.set(__self__, "currencies", currencies)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if time_end is not None:
            pulumi.set(__self__, "time_end", time_end)
        if time_start is not None:
            pulumi.set(__self__, "time_start", time_start)
        if total_value is not None:
            pulumi.set(__self__, "total_value", total_value)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def currencies(self) -> Optional[Sequence['outputs.GetOrganizationSubscriptionsOrganizationSubscriptionCurrencyResult']]:
        return pulumi.get(self, "currencies")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[str]:
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="timeEnd")
    def time_end(self) -> Optional[str]:
        return pulumi.get(self, "time_end")

    @property
    @pulumi.getter(name="timeStart")
    def time_start(self) -> Optional[str]:
        return pulumi.get(self, "time_start")

    @property
    @pulumi.getter(name="totalValue")
    def total_value(self) -> Optional[str]:
        return pulumi.get(self, "total_value")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetOrganizationSubscriptionsOrganizationSubscriptionCurrencyResult(dict):
    def __init__(__self__, *,
                 iso_code: Optional[str] = None,
                 name: Optional[str] = None,
                 std_precision: Optional[str] = None):
        if iso_code is not None:
            pulumi.set(__self__, "iso_code", iso_code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if std_precision is not None:
            pulumi.set(__self__, "std_precision", std_precision)

    @property
    @pulumi.getter(name="isoCode")
    def iso_code(self) -> Optional[str]:
        return pulumi.get(self, "iso_code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="stdPrecision")
    def std_precision(self) -> Optional[str]:
        return pulumi.get(self, "std_precision")


@pulumi.output_type
class GetRatecardsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetRatecardsRateCardResult(dict):
    def __init__(__self__, *,
                 currencies: Optional[Sequence['outputs.GetRatecardsRateCardCurrencyResult']] = None,
                 discretionary_discount_percentage: Optional[str] = None,
                 is_tier: Optional[bool] = None,
                 net_unit_price: Optional[str] = None,
                 overage_price: Optional[str] = None,
                 products: Optional[Sequence['outputs.GetRatecardsRateCardProductResult']] = None,
                 rate_card_tiers: Optional[Sequence['outputs.GetRatecardsRateCardRateCardTierResult']] = None,
                 subscribed_service_id: Optional[str] = None,
                 time_end: Optional[str] = None,
                 time_start: Optional[str] = None):
        if currencies is not None:
            pulumi.set(__self__, "currencies", currencies)
        if discretionary_discount_percentage is not None:
            pulumi.set(__self__, "discretionary_discount_percentage", discretionary_discount_percentage)
        if is_tier is not None:
            pulumi.set(__self__, "is_tier", is_tier)
        if net_unit_price is not None:
            pulumi.set(__self__, "net_unit_price", net_unit_price)
        if overage_price is not None:
            pulumi.set(__self__, "overage_price", overage_price)
        if products is not None:
            pulumi.set(__self__, "products", products)
        if rate_card_tiers is not None:
            pulumi.set(__self__, "rate_card_tiers", rate_card_tiers)
        if subscribed_service_id is not None:
            pulumi.set(__self__, "subscribed_service_id", subscribed_service_id)
        if time_end is not None:
            pulumi.set(__self__, "time_end", time_end)
        if time_start is not None:
            pulumi.set(__self__, "time_start", time_start)

    @property
    @pulumi.getter
    def currencies(self) -> Optional[Sequence['outputs.GetRatecardsRateCardCurrencyResult']]:
        return pulumi.get(self, "currencies")

    @property
    @pulumi.getter(name="discretionaryDiscountPercentage")
    def discretionary_discount_percentage(self) -> Optional[str]:
        return pulumi.get(self, "discretionary_discount_percentage")

    @property
    @pulumi.getter(name="isTier")
    def is_tier(self) -> Optional[bool]:
        return pulumi.get(self, "is_tier")

    @property
    @pulumi.getter(name="netUnitPrice")
    def net_unit_price(self) -> Optional[str]:
        return pulumi.get(self, "net_unit_price")

    @property
    @pulumi.getter(name="overagePrice")
    def overage_price(self) -> Optional[str]:
        return pulumi.get(self, "overage_price")

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence['outputs.GetRatecardsRateCardProductResult']]:
        return pulumi.get(self, "products")

    @property
    @pulumi.getter(name="rateCardTiers")
    def rate_card_tiers(self) -> Optional[Sequence['outputs.GetRatecardsRateCardRateCardTierResult']]:
        return pulumi.get(self, "rate_card_tiers")

    @property
    @pulumi.getter(name="subscribedServiceId")
    def subscribed_service_id(self) -> Optional[str]:
        return pulumi.get(self, "subscribed_service_id")

    @property
    @pulumi.getter(name="timeEnd")
    def time_end(self) -> Optional[str]:
        return pulumi.get(self, "time_end")

    @property
    @pulumi.getter(name="timeStart")
    def time_start(self) -> Optional[str]:
        return pulumi.get(self, "time_start")


@pulumi.output_type
class GetRatecardsRateCardCurrencyResult(dict):
    def __init__(__self__, *,
                 iso_code: Optional[str] = None,
                 name: Optional[str] = None,
                 std_precision: Optional[str] = None):
        if iso_code is not None:
            pulumi.set(__self__, "iso_code", iso_code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if std_precision is not None:
            pulumi.set(__self__, "std_precision", std_precision)

    @property
    @pulumi.getter(name="isoCode")
    def iso_code(self) -> Optional[str]:
        return pulumi.get(self, "iso_code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="stdPrecision")
    def std_precision(self) -> Optional[str]:
        return pulumi.get(self, "std_precision")


@pulumi.output_type
class GetRatecardsRateCardProductResult(dict):
    def __init__(__self__, *,
                 billing_category: Optional[str] = None,
                 name: Optional[str] = None,
                 part_number: Optional[str] = None,
                 product_category: Optional[str] = None,
                 ucm_rate_card_part_type: Optional[str] = None,
                 unit_of_measure: Optional[str] = None):
        if billing_category is not None:
            pulumi.set(__self__, "billing_category", billing_category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if part_number is not None:
            pulumi.set(__self__, "part_number", part_number)
        if product_category is not None:
            pulumi.set(__self__, "product_category", product_category)
        if ucm_rate_card_part_type is not None:
            pulumi.set(__self__, "ucm_rate_card_part_type", ucm_rate_card_part_type)
        if unit_of_measure is not None:
            pulumi.set(__self__, "unit_of_measure", unit_of_measure)

    @property
    @pulumi.getter(name="billingCategory")
    def billing_category(self) -> Optional[str]:
        return pulumi.get(self, "billing_category")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="partNumber")
    def part_number(self) -> Optional[str]:
        return pulumi.get(self, "part_number")

    @property
    @pulumi.getter(name="productCategory")
    def product_category(self) -> Optional[str]:
        return pulumi.get(self, "product_category")

    @property
    @pulumi.getter(name="ucmRateCardPartType")
    def ucm_rate_card_part_type(self) -> Optional[str]:
        return pulumi.get(self, "ucm_rate_card_part_type")

    @property
    @pulumi.getter(name="unitOfMeasure")
    def unit_of_measure(self) -> Optional[str]:
        return pulumi.get(self, "unit_of_measure")


@pulumi.output_type
class GetRatecardsRateCardRateCardTierResult(dict):
    def __init__(__self__, *,
                 net_unit_price: Optional[str] = None,
                 overage_price: Optional[str] = None,
                 up_to_quantity: Optional[str] = None):
        if net_unit_price is not None:
            pulumi.set(__self__, "net_unit_price", net_unit_price)
        if overage_price is not None:
            pulumi.set(__self__, "overage_price", overage_price)
        if up_to_quantity is not None:
            pulumi.set(__self__, "up_to_quantity", up_to_quantity)

    @property
    @pulumi.getter(name="netUnitPrice")
    def net_unit_price(self) -> Optional[str]:
        return pulumi.get(self, "net_unit_price")

    @property
    @pulumi.getter(name="overagePrice")
    def overage_price(self) -> Optional[str]:
        return pulumi.get(self, "overage_price")

    @property
    @pulumi.getter(name="upToQuantity")
    def up_to_quantity(self) -> Optional[str]:
        return pulumi.get(self, "up_to_quantity")


@pulumi.output_type
class GetSubscribedServiceBillToAddressResult(dict):
    def __init__(__self__, *,
                 bill_site_use_id: Optional[str] = None,
                 is_bill_to: Optional[bool] = None,
                 is_ship_to: Optional[bool] = None,
                 locations: Optional[Sequence['outputs.GetSubscribedServiceBillToAddressLocationResult']] = None,
                 name: Optional[str] = None,
                 phone: Optional[str] = None,
                 service2site_use_id: Optional[str] = None,
                 tca_cust_acct_site_id: Optional[str] = None,
                 tca_party_site_number: Optional[str] = None):
        if bill_site_use_id is not None:
            pulumi.set(__self__, "bill_site_use_id", bill_site_use_id)
        if is_bill_to is not None:
            pulumi.set(__self__, "is_bill_to", is_bill_to)
        if is_ship_to is not None:
            pulumi.set(__self__, "is_ship_to", is_ship_to)
        if locations is not None:
            pulumi.set(__self__, "locations", locations)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if phone is not None:
            pulumi.set(__self__, "phone", phone)
        if service2site_use_id is not None:
            pulumi.set(__self__, "service2site_use_id", service2site_use_id)
        if tca_cust_acct_site_id is not None:
            pulumi.set(__self__, "tca_cust_acct_site_id", tca_cust_acct_site_id)
        if tca_party_site_number is not None:
            pulumi.set(__self__, "tca_party_site_number", tca_party_site_number)

    @property
    @pulumi.getter(name="billSiteUseId")
    def bill_site_use_id(self) -> Optional[str]:
        return pulumi.get(self, "bill_site_use_id")

    @property
    @pulumi.getter(name="isBillTo")
    def is_bill_to(self) -> Optional[bool]:
        return pulumi.get(self, "is_bill_to")

    @property
    @pulumi.getter(name="isShipTo")
    def is_ship_to(self) -> Optional[bool]:
        return pulumi.get(self, "is_ship_to")

    @property
    @pulumi.getter
    def locations(self) -> Optional[Sequence['outputs.GetSubscribedServiceBillToAddressLocationResult']]:
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def phone(self) -> Optional[str]:
        return pulumi.get(self, "phone")

    @property
    @pulumi.getter(name="service2siteUseId")
    def service2site_use_id(self) -> Optional[str]:
        return pulumi.get(self, "service2site_use_id")

    @property
    @pulumi.getter(name="tcaCustAcctSiteId")
    def tca_cust_acct_site_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_cust_acct_site_id")

    @property
    @pulumi.getter(name="tcaPartySiteNumber")
    def tca_party_site_number(self) -> Optional[str]:
        return pulumi.get(self, "tca_party_site_number")


@pulumi.output_type
class GetSubscribedServiceBillToAddressLocationResult(dict):
    def __init__(__self__, *,
                 address1: Optional[str] = None,
                 address2: Optional[str] = None,
                 city: Optional[str] = None,
                 country: Optional[str] = None,
                 postal_code: Optional[str] = None,
                 region: Optional[str] = None,
                 tca_location_id: Optional[str] = None):
        if address1 is not None:
            pulumi.set(__self__, "address1", address1)
        if address2 is not None:
            pulumi.set(__self__, "address2", address2)
        if city is not None:
            pulumi.set(__self__, "city", city)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if postal_code is not None:
            pulumi.set(__self__, "postal_code", postal_code)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if tca_location_id is not None:
            pulumi.set(__self__, "tca_location_id", tca_location_id)

    @property
    @pulumi.getter
    def address1(self) -> Optional[str]:
        return pulumi.get(self, "address1")

    @property
    @pulumi.getter
    def address2(self) -> Optional[str]:
        return pulumi.get(self, "address2")

    @property
    @pulumi.getter
    def city(self) -> Optional[str]:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> Optional[str]:
        return pulumi.get(self, "postal_code")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="tcaLocationId")
    def tca_location_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_location_id")


@pulumi.output_type
class GetSubscribedServiceBillToContactResult(dict):
    def __init__(__self__, *,
                 email: Optional[str] = None,
                 first_name: Optional[str] = None,
                 last_name: Optional[str] = None,
                 name: Optional[str] = None,
                 tca_contact_id: Optional[str] = None,
                 tca_cust_accnt_site_id: Optional[str] = None,
                 tca_party_id: Optional[str] = None,
                 username: Optional[str] = None):
        if email is not None:
            pulumi.set(__self__, "email", email)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tca_contact_id is not None:
            pulumi.set(__self__, "tca_contact_id", tca_contact_id)
        if tca_cust_accnt_site_id is not None:
            pulumi.set(__self__, "tca_cust_accnt_site_id", tca_cust_accnt_site_id)
        if tca_party_id is not None:
            pulumi.set(__self__, "tca_party_id", tca_party_id)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[str]:
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[str]:
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="tcaContactId")
    def tca_contact_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_contact_id")

    @property
    @pulumi.getter(name="tcaCustAccntSiteId")
    def tca_cust_accnt_site_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_cust_accnt_site_id")

    @property
    @pulumi.getter(name="tcaPartyId")
    def tca_party_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_party_id")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetSubscribedServiceBillToCustomerResult(dict):
    def __init__(__self__, *,
                 customer_chain_type: Optional[str] = None,
                 is_chain_customer: Optional[bool] = None,
                 is_public_sector: Optional[bool] = None,
                 name: Optional[str] = None,
                 name_phonetic: Optional[str] = None,
                 tca_cust_account_number: Optional[str] = None,
                 tca_customer_account_id: Optional[str] = None,
                 tca_party_id: Optional[str] = None,
                 tca_party_number: Optional[str] = None):
        if customer_chain_type is not None:
            pulumi.set(__self__, "customer_chain_type", customer_chain_type)
        if is_chain_customer is not None:
            pulumi.set(__self__, "is_chain_customer", is_chain_customer)
        if is_public_sector is not None:
            pulumi.set(__self__, "is_public_sector", is_public_sector)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_phonetic is not None:
            pulumi.set(__self__, "name_phonetic", name_phonetic)
        if tca_cust_account_number is not None:
            pulumi.set(__self__, "tca_cust_account_number", tca_cust_account_number)
        if tca_customer_account_id is not None:
            pulumi.set(__self__, "tca_customer_account_id", tca_customer_account_id)
        if tca_party_id is not None:
            pulumi.set(__self__, "tca_party_id", tca_party_id)
        if tca_party_number is not None:
            pulumi.set(__self__, "tca_party_number", tca_party_number)

    @property
    @pulumi.getter(name="customerChainType")
    def customer_chain_type(self) -> Optional[str]:
        return pulumi.get(self, "customer_chain_type")

    @property
    @pulumi.getter(name="isChainCustomer")
    def is_chain_customer(self) -> Optional[bool]:
        return pulumi.get(self, "is_chain_customer")

    @property
    @pulumi.getter(name="isPublicSector")
    def is_public_sector(self) -> Optional[bool]:
        return pulumi.get(self, "is_public_sector")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="namePhonetic")
    def name_phonetic(self) -> Optional[str]:
        return pulumi.get(self, "name_phonetic")

    @property
    @pulumi.getter(name="tcaCustAccountNumber")
    def tca_cust_account_number(self) -> Optional[str]:
        return pulumi.get(self, "tca_cust_account_number")

    @property
    @pulumi.getter(name="tcaCustomerAccountId")
    def tca_customer_account_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_customer_account_id")

    @property
    @pulumi.getter(name="tcaPartyId")
    def tca_party_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_party_id")

    @property
    @pulumi.getter(name="tcaPartyNumber")
    def tca_party_number(self) -> Optional[str]:
        return pulumi.get(self, "tca_party_number")


@pulumi.output_type
class GetSubscribedServiceCommitmentServiceResult(dict):
    def __init__(__self__, *,
                 available_amount: Optional[str] = None,
                 funded_allocation_value: Optional[str] = None,
                 line_net_amount: Optional[str] = None,
                 quantity: Optional[str] = None,
                 time_end: Optional[str] = None,
                 time_start: Optional[str] = None):
        if available_amount is not None:
            pulumi.set(__self__, "available_amount", available_amount)
        if funded_allocation_value is not None:
            pulumi.set(__self__, "funded_allocation_value", funded_allocation_value)
        if line_net_amount is not None:
            pulumi.set(__self__, "line_net_amount", line_net_amount)
        if quantity is not None:
            pulumi.set(__self__, "quantity", quantity)
        if time_end is not None:
            pulumi.set(__self__, "time_end", time_end)
        if time_start is not None:
            pulumi.set(__self__, "time_start", time_start)

    @property
    @pulumi.getter(name="availableAmount")
    def available_amount(self) -> Optional[str]:
        return pulumi.get(self, "available_amount")

    @property
    @pulumi.getter(name="fundedAllocationValue")
    def funded_allocation_value(self) -> Optional[str]:
        return pulumi.get(self, "funded_allocation_value")

    @property
    @pulumi.getter(name="lineNetAmount")
    def line_net_amount(self) -> Optional[str]:
        return pulumi.get(self, "line_net_amount")

    @property
    @pulumi.getter
    def quantity(self) -> Optional[str]:
        return pulumi.get(self, "quantity")

    @property
    @pulumi.getter(name="timeEnd")
    def time_end(self) -> Optional[str]:
        return pulumi.get(self, "time_end")

    @property
    @pulumi.getter(name="timeStart")
    def time_start(self) -> Optional[str]:
        return pulumi.get(self, "time_start")


@pulumi.output_type
class GetSubscribedServiceEndUserAddressResult(dict):
    def __init__(__self__, *,
                 bill_site_use_id: Optional[str] = None,
                 is_bill_to: Optional[bool] = None,
                 is_ship_to: Optional[bool] = None,
                 locations: Optional[Sequence['outputs.GetSubscribedServiceEndUserAddressLocationResult']] = None,
                 name: Optional[str] = None,
                 phone: Optional[str] = None,
                 service2site_use_id: Optional[str] = None,
                 tca_cust_acct_site_id: Optional[str] = None,
                 tca_party_site_number: Optional[str] = None):
        if bill_site_use_id is not None:
            pulumi.set(__self__, "bill_site_use_id", bill_site_use_id)
        if is_bill_to is not None:
            pulumi.set(__self__, "is_bill_to", is_bill_to)
        if is_ship_to is not None:
            pulumi.set(__self__, "is_ship_to", is_ship_to)
        if locations is not None:
            pulumi.set(__self__, "locations", locations)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if phone is not None:
            pulumi.set(__self__, "phone", phone)
        if service2site_use_id is not None:
            pulumi.set(__self__, "service2site_use_id", service2site_use_id)
        if tca_cust_acct_site_id is not None:
            pulumi.set(__self__, "tca_cust_acct_site_id", tca_cust_acct_site_id)
        if tca_party_site_number is not None:
            pulumi.set(__self__, "tca_party_site_number", tca_party_site_number)

    @property
    @pulumi.getter(name="billSiteUseId")
    def bill_site_use_id(self) -> Optional[str]:
        return pulumi.get(self, "bill_site_use_id")

    @property
    @pulumi.getter(name="isBillTo")
    def is_bill_to(self) -> Optional[bool]:
        return pulumi.get(self, "is_bill_to")

    @property
    @pulumi.getter(name="isShipTo")
    def is_ship_to(self) -> Optional[bool]:
        return pulumi.get(self, "is_ship_to")

    @property
    @pulumi.getter
    def locations(self) -> Optional[Sequence['outputs.GetSubscribedServiceEndUserAddressLocationResult']]:
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def phone(self) -> Optional[str]:
        return pulumi.get(self, "phone")

    @property
    @pulumi.getter(name="service2siteUseId")
    def service2site_use_id(self) -> Optional[str]:
        return pulumi.get(self, "service2site_use_id")

    @property
    @pulumi.getter(name="tcaCustAcctSiteId")
    def tca_cust_acct_site_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_cust_acct_site_id")

    @property
    @pulumi.getter(name="tcaPartySiteNumber")
    def tca_party_site_number(self) -> Optional[str]:
        return pulumi.get(self, "tca_party_site_number")


@pulumi.output_type
class GetSubscribedServiceEndUserAddressLocationResult(dict):
    def __init__(__self__, *,
                 address1: Optional[str] = None,
                 address2: Optional[str] = None,
                 city: Optional[str] = None,
                 country: Optional[str] = None,
                 postal_code: Optional[str] = None,
                 region: Optional[str] = None,
                 tca_location_id: Optional[str] = None):
        if address1 is not None:
            pulumi.set(__self__, "address1", address1)
        if address2 is not None:
            pulumi.set(__self__, "address2", address2)
        if city is not None:
            pulumi.set(__self__, "city", city)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if postal_code is not None:
            pulumi.set(__self__, "postal_code", postal_code)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if tca_location_id is not None:
            pulumi.set(__self__, "tca_location_id", tca_location_id)

    @property
    @pulumi.getter
    def address1(self) -> Optional[str]:
        return pulumi.get(self, "address1")

    @property
    @pulumi.getter
    def address2(self) -> Optional[str]:
        return pulumi.get(self, "address2")

    @property
    @pulumi.getter
    def city(self) -> Optional[str]:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> Optional[str]:
        return pulumi.get(self, "postal_code")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="tcaLocationId")
    def tca_location_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_location_id")


@pulumi.output_type
class GetSubscribedServiceEndUserContactResult(dict):
    def __init__(__self__, *,
                 email: Optional[str] = None,
                 first_name: Optional[str] = None,
                 last_name: Optional[str] = None,
                 name: Optional[str] = None,
                 tca_contact_id: Optional[str] = None,
                 tca_cust_accnt_site_id: Optional[str] = None,
                 tca_party_id: Optional[str] = None,
                 username: Optional[str] = None):
        if email is not None:
            pulumi.set(__self__, "email", email)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tca_contact_id is not None:
            pulumi.set(__self__, "tca_contact_id", tca_contact_id)
        if tca_cust_accnt_site_id is not None:
            pulumi.set(__self__, "tca_cust_accnt_site_id", tca_cust_accnt_site_id)
        if tca_party_id is not None:
            pulumi.set(__self__, "tca_party_id", tca_party_id)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[str]:
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[str]:
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="tcaContactId")
    def tca_contact_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_contact_id")

    @property
    @pulumi.getter(name="tcaCustAccntSiteId")
    def tca_cust_accnt_site_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_cust_accnt_site_id")

    @property
    @pulumi.getter(name="tcaPartyId")
    def tca_party_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_party_id")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetSubscribedServiceEndUserCustomerResult(dict):
    def __init__(__self__, *,
                 customer_chain_type: Optional[str] = None,
                 is_chain_customer: Optional[bool] = None,
                 is_public_sector: Optional[bool] = None,
                 name: Optional[str] = None,
                 name_phonetic: Optional[str] = None,
                 tca_cust_account_number: Optional[str] = None,
                 tca_customer_account_id: Optional[str] = None,
                 tca_party_id: Optional[str] = None,
                 tca_party_number: Optional[str] = None):
        if customer_chain_type is not None:
            pulumi.set(__self__, "customer_chain_type", customer_chain_type)
        if is_chain_customer is not None:
            pulumi.set(__self__, "is_chain_customer", is_chain_customer)
        if is_public_sector is not None:
            pulumi.set(__self__, "is_public_sector", is_public_sector)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_phonetic is not None:
            pulumi.set(__self__, "name_phonetic", name_phonetic)
        if tca_cust_account_number is not None:
            pulumi.set(__self__, "tca_cust_account_number", tca_cust_account_number)
        if tca_customer_account_id is not None:
            pulumi.set(__self__, "tca_customer_account_id", tca_customer_account_id)
        if tca_party_id is not None:
            pulumi.set(__self__, "tca_party_id", tca_party_id)
        if tca_party_number is not None:
            pulumi.set(__self__, "tca_party_number", tca_party_number)

    @property
    @pulumi.getter(name="customerChainType")
    def customer_chain_type(self) -> Optional[str]:
        return pulumi.get(self, "customer_chain_type")

    @property
    @pulumi.getter(name="isChainCustomer")
    def is_chain_customer(self) -> Optional[bool]:
        return pulumi.get(self, "is_chain_customer")

    @property
    @pulumi.getter(name="isPublicSector")
    def is_public_sector(self) -> Optional[bool]:
        return pulumi.get(self, "is_public_sector")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="namePhonetic")
    def name_phonetic(self) -> Optional[str]:
        return pulumi.get(self, "name_phonetic")

    @property
    @pulumi.getter(name="tcaCustAccountNumber")
    def tca_cust_account_number(self) -> Optional[str]:
        return pulumi.get(self, "tca_cust_account_number")

    @property
    @pulumi.getter(name="tcaCustomerAccountId")
    def tca_customer_account_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_customer_account_id")

    @property
    @pulumi.getter(name="tcaPartyId")
    def tca_party_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_party_id")

    @property
    @pulumi.getter(name="tcaPartyNumber")
    def tca_party_number(self) -> Optional[str]:
        return pulumi.get(self, "tca_party_number")


@pulumi.output_type
class GetSubscribedServicePaymentTermResult(dict):
    def __init__(__self__, *,
                 created_by: Optional[str] = None,
                 description: Optional[str] = None,
                 is_active: Optional[bool] = None,
                 name: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 updated_by: Optional[str] = None,
                 value: Optional[str] = None):
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if is_active is not None:
            pulumi.set(__self__, "is_active", is_active)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> Optional[bool]:
        return pulumi.get(self, "is_active")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[str]:
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSubscribedServiceProductResult(dict):
    def __init__(__self__, *,
                 billing_category: Optional[str] = None,
                 name: Optional[str] = None,
                 part_number: Optional[str] = None,
                 product_category: Optional[str] = None,
                 ucm_rate_card_part_type: Optional[str] = None,
                 unit_of_measure: Optional[str] = None):
        if billing_category is not None:
            pulumi.set(__self__, "billing_category", billing_category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if part_number is not None:
            pulumi.set(__self__, "part_number", part_number)
        if product_category is not None:
            pulumi.set(__self__, "product_category", product_category)
        if ucm_rate_card_part_type is not None:
            pulumi.set(__self__, "ucm_rate_card_part_type", ucm_rate_card_part_type)
        if unit_of_measure is not None:
            pulumi.set(__self__, "unit_of_measure", unit_of_measure)

    @property
    @pulumi.getter(name="billingCategory")
    def billing_category(self) -> Optional[str]:
        return pulumi.get(self, "billing_category")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="partNumber")
    def part_number(self) -> Optional[str]:
        return pulumi.get(self, "part_number")

    @property
    @pulumi.getter(name="productCategory")
    def product_category(self) -> Optional[str]:
        return pulumi.get(self, "product_category")

    @property
    @pulumi.getter(name="ucmRateCardPartType")
    def ucm_rate_card_part_type(self) -> Optional[str]:
        return pulumi.get(self, "ucm_rate_card_part_type")

    @property
    @pulumi.getter(name="unitOfMeasure")
    def unit_of_measure(self) -> Optional[str]:
        return pulumi.get(self, "unit_of_measure")


@pulumi.output_type
class GetSubscribedServiceRateCardResult(dict):
    def __init__(__self__, *,
                 currencies: Optional[Sequence['outputs.GetSubscribedServiceRateCardCurrencyResult']] = None,
                 discretionary_discount_percentage: Optional[str] = None,
                 is_tier: Optional[bool] = None,
                 net_unit_price: Optional[str] = None,
                 overage_price: Optional[str] = None,
                 products: Optional[Sequence['outputs.GetSubscribedServiceRateCardProductResult']] = None,
                 rate_card_tiers: Optional[Sequence['outputs.GetSubscribedServiceRateCardRateCardTierResult']] = None,
                 subscribed_service_id: Optional[str] = None,
                 time_end: Optional[str] = None,
                 time_start: Optional[str] = None):
        if currencies is not None:
            pulumi.set(__self__, "currencies", currencies)
        if discretionary_discount_percentage is not None:
            pulumi.set(__self__, "discretionary_discount_percentage", discretionary_discount_percentage)
        if is_tier is not None:
            pulumi.set(__self__, "is_tier", is_tier)
        if net_unit_price is not None:
            pulumi.set(__self__, "net_unit_price", net_unit_price)
        if overage_price is not None:
            pulumi.set(__self__, "overage_price", overage_price)
        if products is not None:
            pulumi.set(__self__, "products", products)
        if rate_card_tiers is not None:
            pulumi.set(__self__, "rate_card_tiers", rate_card_tiers)
        if subscribed_service_id is not None:
            pulumi.set(__self__, "subscribed_service_id", subscribed_service_id)
        if time_end is not None:
            pulumi.set(__self__, "time_end", time_end)
        if time_start is not None:
            pulumi.set(__self__, "time_start", time_start)

    @property
    @pulumi.getter
    def currencies(self) -> Optional[Sequence['outputs.GetSubscribedServiceRateCardCurrencyResult']]:
        return pulumi.get(self, "currencies")

    @property
    @pulumi.getter(name="discretionaryDiscountPercentage")
    def discretionary_discount_percentage(self) -> Optional[str]:
        return pulumi.get(self, "discretionary_discount_percentage")

    @property
    @pulumi.getter(name="isTier")
    def is_tier(self) -> Optional[bool]:
        return pulumi.get(self, "is_tier")

    @property
    @pulumi.getter(name="netUnitPrice")
    def net_unit_price(self) -> Optional[str]:
        return pulumi.get(self, "net_unit_price")

    @property
    @pulumi.getter(name="overagePrice")
    def overage_price(self) -> Optional[str]:
        return pulumi.get(self, "overage_price")

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence['outputs.GetSubscribedServiceRateCardProductResult']]:
        return pulumi.get(self, "products")

    @property
    @pulumi.getter(name="rateCardTiers")
    def rate_card_tiers(self) -> Optional[Sequence['outputs.GetSubscribedServiceRateCardRateCardTierResult']]:
        return pulumi.get(self, "rate_card_tiers")

    @property
    @pulumi.getter(name="subscribedServiceId")
    def subscribed_service_id(self) -> Optional[str]:
        return pulumi.get(self, "subscribed_service_id")

    @property
    @pulumi.getter(name="timeEnd")
    def time_end(self) -> Optional[str]:
        return pulumi.get(self, "time_end")

    @property
    @pulumi.getter(name="timeStart")
    def time_start(self) -> Optional[str]:
        return pulumi.get(self, "time_start")


@pulumi.output_type
class GetSubscribedServiceRateCardCurrencyResult(dict):
    def __init__(__self__, *,
                 iso_code: Optional[str] = None,
                 name: Optional[str] = None,
                 std_precision: Optional[str] = None):
        if iso_code is not None:
            pulumi.set(__self__, "iso_code", iso_code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if std_precision is not None:
            pulumi.set(__self__, "std_precision", std_precision)

    @property
    @pulumi.getter(name="isoCode")
    def iso_code(self) -> Optional[str]:
        return pulumi.get(self, "iso_code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="stdPrecision")
    def std_precision(self) -> Optional[str]:
        return pulumi.get(self, "std_precision")


@pulumi.output_type
class GetSubscribedServiceRateCardProductResult(dict):
    def __init__(__self__, *,
                 billing_category: Optional[str] = None,
                 name: Optional[str] = None,
                 part_number: Optional[str] = None,
                 product_category: Optional[str] = None,
                 ucm_rate_card_part_type: Optional[str] = None,
                 unit_of_measure: Optional[str] = None):
        if billing_category is not None:
            pulumi.set(__self__, "billing_category", billing_category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if part_number is not None:
            pulumi.set(__self__, "part_number", part_number)
        if product_category is not None:
            pulumi.set(__self__, "product_category", product_category)
        if ucm_rate_card_part_type is not None:
            pulumi.set(__self__, "ucm_rate_card_part_type", ucm_rate_card_part_type)
        if unit_of_measure is not None:
            pulumi.set(__self__, "unit_of_measure", unit_of_measure)

    @property
    @pulumi.getter(name="billingCategory")
    def billing_category(self) -> Optional[str]:
        return pulumi.get(self, "billing_category")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="partNumber")
    def part_number(self) -> Optional[str]:
        return pulumi.get(self, "part_number")

    @property
    @pulumi.getter(name="productCategory")
    def product_category(self) -> Optional[str]:
        return pulumi.get(self, "product_category")

    @property
    @pulumi.getter(name="ucmRateCardPartType")
    def ucm_rate_card_part_type(self) -> Optional[str]:
        return pulumi.get(self, "ucm_rate_card_part_type")

    @property
    @pulumi.getter(name="unitOfMeasure")
    def unit_of_measure(self) -> Optional[str]:
        return pulumi.get(self, "unit_of_measure")


@pulumi.output_type
class GetSubscribedServiceRateCardRateCardTierResult(dict):
    def __init__(__self__, *,
                 net_unit_price: Optional[str] = None,
                 overage_price: Optional[str] = None,
                 up_to_quantity: Optional[str] = None):
        if net_unit_price is not None:
            pulumi.set(__self__, "net_unit_price", net_unit_price)
        if overage_price is not None:
            pulumi.set(__self__, "overage_price", overage_price)
        if up_to_quantity is not None:
            pulumi.set(__self__, "up_to_quantity", up_to_quantity)

    @property
    @pulumi.getter(name="netUnitPrice")
    def net_unit_price(self) -> Optional[str]:
        return pulumi.get(self, "net_unit_price")

    @property
    @pulumi.getter(name="overagePrice")
    def overage_price(self) -> Optional[str]:
        return pulumi.get(self, "overage_price")

    @property
    @pulumi.getter(name="upToQuantity")
    def up_to_quantity(self) -> Optional[str]:
        return pulumi.get(self, "up_to_quantity")


@pulumi.output_type
class GetSubscribedServiceResellerAddressResult(dict):
    def __init__(__self__, *,
                 bill_site_use_id: Optional[str] = None,
                 is_bill_to: Optional[bool] = None,
                 is_ship_to: Optional[bool] = None,
                 locations: Optional[Sequence['outputs.GetSubscribedServiceResellerAddressLocationResult']] = None,
                 name: Optional[str] = None,
                 phone: Optional[str] = None,
                 service2site_use_id: Optional[str] = None,
                 tca_cust_acct_site_id: Optional[str] = None,
                 tca_party_site_number: Optional[str] = None):
        if bill_site_use_id is not None:
            pulumi.set(__self__, "bill_site_use_id", bill_site_use_id)
        if is_bill_to is not None:
            pulumi.set(__self__, "is_bill_to", is_bill_to)
        if is_ship_to is not None:
            pulumi.set(__self__, "is_ship_to", is_ship_to)
        if locations is not None:
            pulumi.set(__self__, "locations", locations)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if phone is not None:
            pulumi.set(__self__, "phone", phone)
        if service2site_use_id is not None:
            pulumi.set(__self__, "service2site_use_id", service2site_use_id)
        if tca_cust_acct_site_id is not None:
            pulumi.set(__self__, "tca_cust_acct_site_id", tca_cust_acct_site_id)
        if tca_party_site_number is not None:
            pulumi.set(__self__, "tca_party_site_number", tca_party_site_number)

    @property
    @pulumi.getter(name="billSiteUseId")
    def bill_site_use_id(self) -> Optional[str]:
        return pulumi.get(self, "bill_site_use_id")

    @property
    @pulumi.getter(name="isBillTo")
    def is_bill_to(self) -> Optional[bool]:
        return pulumi.get(self, "is_bill_to")

    @property
    @pulumi.getter(name="isShipTo")
    def is_ship_to(self) -> Optional[bool]:
        return pulumi.get(self, "is_ship_to")

    @property
    @pulumi.getter
    def locations(self) -> Optional[Sequence['outputs.GetSubscribedServiceResellerAddressLocationResult']]:
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def phone(self) -> Optional[str]:
        return pulumi.get(self, "phone")

    @property
    @pulumi.getter(name="service2siteUseId")
    def service2site_use_id(self) -> Optional[str]:
        return pulumi.get(self, "service2site_use_id")

    @property
    @pulumi.getter(name="tcaCustAcctSiteId")
    def tca_cust_acct_site_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_cust_acct_site_id")

    @property
    @pulumi.getter(name="tcaPartySiteNumber")
    def tca_party_site_number(self) -> Optional[str]:
        return pulumi.get(self, "tca_party_site_number")


@pulumi.output_type
class GetSubscribedServiceResellerAddressLocationResult(dict):
    def __init__(__self__, *,
                 address1: Optional[str] = None,
                 address2: Optional[str] = None,
                 city: Optional[str] = None,
                 country: Optional[str] = None,
                 postal_code: Optional[str] = None,
                 region: Optional[str] = None,
                 tca_location_id: Optional[str] = None):
        if address1 is not None:
            pulumi.set(__self__, "address1", address1)
        if address2 is not None:
            pulumi.set(__self__, "address2", address2)
        if city is not None:
            pulumi.set(__self__, "city", city)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if postal_code is not None:
            pulumi.set(__self__, "postal_code", postal_code)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if tca_location_id is not None:
            pulumi.set(__self__, "tca_location_id", tca_location_id)

    @property
    @pulumi.getter
    def address1(self) -> Optional[str]:
        return pulumi.get(self, "address1")

    @property
    @pulumi.getter
    def address2(self) -> Optional[str]:
        return pulumi.get(self, "address2")

    @property
    @pulumi.getter
    def city(self) -> Optional[str]:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> Optional[str]:
        return pulumi.get(self, "postal_code")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="tcaLocationId")
    def tca_location_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_location_id")


@pulumi.output_type
class GetSubscribedServiceResellerContactResult(dict):
    def __init__(__self__, *,
                 email: Optional[str] = None,
                 first_name: Optional[str] = None,
                 last_name: Optional[str] = None,
                 name: Optional[str] = None,
                 tca_contact_id: Optional[str] = None,
                 tca_cust_accnt_site_id: Optional[str] = None,
                 tca_party_id: Optional[str] = None,
                 username: Optional[str] = None):
        if email is not None:
            pulumi.set(__self__, "email", email)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tca_contact_id is not None:
            pulumi.set(__self__, "tca_contact_id", tca_contact_id)
        if tca_cust_accnt_site_id is not None:
            pulumi.set(__self__, "tca_cust_accnt_site_id", tca_cust_accnt_site_id)
        if tca_party_id is not None:
            pulumi.set(__self__, "tca_party_id", tca_party_id)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[str]:
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[str]:
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="tcaContactId")
    def tca_contact_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_contact_id")

    @property
    @pulumi.getter(name="tcaCustAccntSiteId")
    def tca_cust_accnt_site_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_cust_accnt_site_id")

    @property
    @pulumi.getter(name="tcaPartyId")
    def tca_party_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_party_id")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetSubscribedServiceResellerCustomerResult(dict):
    def __init__(__self__, *,
                 customer_chain_type: Optional[str] = None,
                 is_chain_customer: Optional[bool] = None,
                 is_public_sector: Optional[bool] = None,
                 name: Optional[str] = None,
                 name_phonetic: Optional[str] = None,
                 tca_cust_account_number: Optional[str] = None,
                 tca_customer_account_id: Optional[str] = None,
                 tca_party_id: Optional[str] = None,
                 tca_party_number: Optional[str] = None):
        if customer_chain_type is not None:
            pulumi.set(__self__, "customer_chain_type", customer_chain_type)
        if is_chain_customer is not None:
            pulumi.set(__self__, "is_chain_customer", is_chain_customer)
        if is_public_sector is not None:
            pulumi.set(__self__, "is_public_sector", is_public_sector)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_phonetic is not None:
            pulumi.set(__self__, "name_phonetic", name_phonetic)
        if tca_cust_account_number is not None:
            pulumi.set(__self__, "tca_cust_account_number", tca_cust_account_number)
        if tca_customer_account_id is not None:
            pulumi.set(__self__, "tca_customer_account_id", tca_customer_account_id)
        if tca_party_id is not None:
            pulumi.set(__self__, "tca_party_id", tca_party_id)
        if tca_party_number is not None:
            pulumi.set(__self__, "tca_party_number", tca_party_number)

    @property
    @pulumi.getter(name="customerChainType")
    def customer_chain_type(self) -> Optional[str]:
        return pulumi.get(self, "customer_chain_type")

    @property
    @pulumi.getter(name="isChainCustomer")
    def is_chain_customer(self) -> Optional[bool]:
        return pulumi.get(self, "is_chain_customer")

    @property
    @pulumi.getter(name="isPublicSector")
    def is_public_sector(self) -> Optional[bool]:
        return pulumi.get(self, "is_public_sector")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="namePhonetic")
    def name_phonetic(self) -> Optional[str]:
        return pulumi.get(self, "name_phonetic")

    @property
    @pulumi.getter(name="tcaCustAccountNumber")
    def tca_cust_account_number(self) -> Optional[str]:
        return pulumi.get(self, "tca_cust_account_number")

    @property
    @pulumi.getter(name="tcaCustomerAccountId")
    def tca_customer_account_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_customer_account_id")

    @property
    @pulumi.getter(name="tcaPartyId")
    def tca_party_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_party_id")

    @property
    @pulumi.getter(name="tcaPartyNumber")
    def tca_party_number(self) -> Optional[str]:
        return pulumi.get(self, "tca_party_number")


@pulumi.output_type
class GetSubscribedServiceServiceToAddressResult(dict):
    def __init__(__self__, *,
                 bill_site_use_id: Optional[str] = None,
                 is_bill_to: Optional[bool] = None,
                 is_ship_to: Optional[bool] = None,
                 locations: Optional[Sequence['outputs.GetSubscribedServiceServiceToAddressLocationResult']] = None,
                 name: Optional[str] = None,
                 phone: Optional[str] = None,
                 service2site_use_id: Optional[str] = None,
                 tca_cust_acct_site_id: Optional[str] = None,
                 tca_party_site_number: Optional[str] = None):
        if bill_site_use_id is not None:
            pulumi.set(__self__, "bill_site_use_id", bill_site_use_id)
        if is_bill_to is not None:
            pulumi.set(__self__, "is_bill_to", is_bill_to)
        if is_ship_to is not None:
            pulumi.set(__self__, "is_ship_to", is_ship_to)
        if locations is not None:
            pulumi.set(__self__, "locations", locations)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if phone is not None:
            pulumi.set(__self__, "phone", phone)
        if service2site_use_id is not None:
            pulumi.set(__self__, "service2site_use_id", service2site_use_id)
        if tca_cust_acct_site_id is not None:
            pulumi.set(__self__, "tca_cust_acct_site_id", tca_cust_acct_site_id)
        if tca_party_site_number is not None:
            pulumi.set(__self__, "tca_party_site_number", tca_party_site_number)

    @property
    @pulumi.getter(name="billSiteUseId")
    def bill_site_use_id(self) -> Optional[str]:
        return pulumi.get(self, "bill_site_use_id")

    @property
    @pulumi.getter(name="isBillTo")
    def is_bill_to(self) -> Optional[bool]:
        return pulumi.get(self, "is_bill_to")

    @property
    @pulumi.getter(name="isShipTo")
    def is_ship_to(self) -> Optional[bool]:
        return pulumi.get(self, "is_ship_to")

    @property
    @pulumi.getter
    def locations(self) -> Optional[Sequence['outputs.GetSubscribedServiceServiceToAddressLocationResult']]:
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def phone(self) -> Optional[str]:
        return pulumi.get(self, "phone")

    @property
    @pulumi.getter(name="service2siteUseId")
    def service2site_use_id(self) -> Optional[str]:
        return pulumi.get(self, "service2site_use_id")

    @property
    @pulumi.getter(name="tcaCustAcctSiteId")
    def tca_cust_acct_site_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_cust_acct_site_id")

    @property
    @pulumi.getter(name="tcaPartySiteNumber")
    def tca_party_site_number(self) -> Optional[str]:
        return pulumi.get(self, "tca_party_site_number")


@pulumi.output_type
class GetSubscribedServiceServiceToAddressLocationResult(dict):
    def __init__(__self__, *,
                 address1: Optional[str] = None,
                 address2: Optional[str] = None,
                 city: Optional[str] = None,
                 country: Optional[str] = None,
                 postal_code: Optional[str] = None,
                 region: Optional[str] = None,
                 tca_location_id: Optional[str] = None):
        if address1 is not None:
            pulumi.set(__self__, "address1", address1)
        if address2 is not None:
            pulumi.set(__self__, "address2", address2)
        if city is not None:
            pulumi.set(__self__, "city", city)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if postal_code is not None:
            pulumi.set(__self__, "postal_code", postal_code)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if tca_location_id is not None:
            pulumi.set(__self__, "tca_location_id", tca_location_id)

    @property
    @pulumi.getter
    def address1(self) -> Optional[str]:
        return pulumi.get(self, "address1")

    @property
    @pulumi.getter
    def address2(self) -> Optional[str]:
        return pulumi.get(self, "address2")

    @property
    @pulumi.getter
    def city(self) -> Optional[str]:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> Optional[str]:
        return pulumi.get(self, "postal_code")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="tcaLocationId")
    def tca_location_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_location_id")


@pulumi.output_type
class GetSubscribedServiceServiceToContactResult(dict):
    def __init__(__self__, *,
                 email: Optional[str] = None,
                 first_name: Optional[str] = None,
                 last_name: Optional[str] = None,
                 name: Optional[str] = None,
                 tca_contact_id: Optional[str] = None,
                 tca_cust_accnt_site_id: Optional[str] = None,
                 tca_party_id: Optional[str] = None,
                 username: Optional[str] = None):
        if email is not None:
            pulumi.set(__self__, "email", email)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tca_contact_id is not None:
            pulumi.set(__self__, "tca_contact_id", tca_contact_id)
        if tca_cust_accnt_site_id is not None:
            pulumi.set(__self__, "tca_cust_accnt_site_id", tca_cust_accnt_site_id)
        if tca_party_id is not None:
            pulumi.set(__self__, "tca_party_id", tca_party_id)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[str]:
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[str]:
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="tcaContactId")
    def tca_contact_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_contact_id")

    @property
    @pulumi.getter(name="tcaCustAccntSiteId")
    def tca_cust_accnt_site_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_cust_accnt_site_id")

    @property
    @pulumi.getter(name="tcaPartyId")
    def tca_party_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_party_id")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetSubscribedServiceServiceToCustomerResult(dict):
    def __init__(__self__, *,
                 customer_chain_type: Optional[str] = None,
                 is_chain_customer: Optional[bool] = None,
                 is_public_sector: Optional[bool] = None,
                 name: Optional[str] = None,
                 name_phonetic: Optional[str] = None,
                 tca_cust_account_number: Optional[str] = None,
                 tca_customer_account_id: Optional[str] = None,
                 tca_party_id: Optional[str] = None,
                 tca_party_number: Optional[str] = None):
        if customer_chain_type is not None:
            pulumi.set(__self__, "customer_chain_type", customer_chain_type)
        if is_chain_customer is not None:
            pulumi.set(__self__, "is_chain_customer", is_chain_customer)
        if is_public_sector is not None:
            pulumi.set(__self__, "is_public_sector", is_public_sector)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_phonetic is not None:
            pulumi.set(__self__, "name_phonetic", name_phonetic)
        if tca_cust_account_number is not None:
            pulumi.set(__self__, "tca_cust_account_number", tca_cust_account_number)
        if tca_customer_account_id is not None:
            pulumi.set(__self__, "tca_customer_account_id", tca_customer_account_id)
        if tca_party_id is not None:
            pulumi.set(__self__, "tca_party_id", tca_party_id)
        if tca_party_number is not None:
            pulumi.set(__self__, "tca_party_number", tca_party_number)

    @property
    @pulumi.getter(name="customerChainType")
    def customer_chain_type(self) -> Optional[str]:
        return pulumi.get(self, "customer_chain_type")

    @property
    @pulumi.getter(name="isChainCustomer")
    def is_chain_customer(self) -> Optional[bool]:
        return pulumi.get(self, "is_chain_customer")

    @property
    @pulumi.getter(name="isPublicSector")
    def is_public_sector(self) -> Optional[bool]:
        return pulumi.get(self, "is_public_sector")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="namePhonetic")
    def name_phonetic(self) -> Optional[str]:
        return pulumi.get(self, "name_phonetic")

    @property
    @pulumi.getter(name="tcaCustAccountNumber")
    def tca_cust_account_number(self) -> Optional[str]:
        return pulumi.get(self, "tca_cust_account_number")

    @property
    @pulumi.getter(name="tcaCustomerAccountId")
    def tca_customer_account_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_customer_account_id")

    @property
    @pulumi.getter(name="tcaPartyId")
    def tca_party_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_party_id")

    @property
    @pulumi.getter(name="tcaPartyNumber")
    def tca_party_number(self) -> Optional[str]:
        return pulumi.get(self, "tca_party_number")


@pulumi.output_type
class GetSubscribedServiceSoldToContactResult(dict):
    def __init__(__self__, *,
                 email: Optional[str] = None,
                 first_name: Optional[str] = None,
                 last_name: Optional[str] = None,
                 name: Optional[str] = None,
                 tca_contact_id: Optional[str] = None,
                 tca_cust_accnt_site_id: Optional[str] = None,
                 tca_party_id: Optional[str] = None,
                 username: Optional[str] = None):
        if email is not None:
            pulumi.set(__self__, "email", email)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tca_contact_id is not None:
            pulumi.set(__self__, "tca_contact_id", tca_contact_id)
        if tca_cust_accnt_site_id is not None:
            pulumi.set(__self__, "tca_cust_accnt_site_id", tca_cust_accnt_site_id)
        if tca_party_id is not None:
            pulumi.set(__self__, "tca_party_id", tca_party_id)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[str]:
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[str]:
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="tcaContactId")
    def tca_contact_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_contact_id")

    @property
    @pulumi.getter(name="tcaCustAccntSiteId")
    def tca_cust_accnt_site_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_cust_accnt_site_id")

    @property
    @pulumi.getter(name="tcaPartyId")
    def tca_party_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_party_id")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetSubscribedServiceSoldToCustomerResult(dict):
    def __init__(__self__, *,
                 customer_chain_type: Optional[str] = None,
                 is_chain_customer: Optional[bool] = None,
                 is_public_sector: Optional[bool] = None,
                 name: Optional[str] = None,
                 name_phonetic: Optional[str] = None,
                 tca_cust_account_number: Optional[str] = None,
                 tca_customer_account_id: Optional[str] = None,
                 tca_party_id: Optional[str] = None,
                 tca_party_number: Optional[str] = None):
        if customer_chain_type is not None:
            pulumi.set(__self__, "customer_chain_type", customer_chain_type)
        if is_chain_customer is not None:
            pulumi.set(__self__, "is_chain_customer", is_chain_customer)
        if is_public_sector is not None:
            pulumi.set(__self__, "is_public_sector", is_public_sector)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_phonetic is not None:
            pulumi.set(__self__, "name_phonetic", name_phonetic)
        if tca_cust_account_number is not None:
            pulumi.set(__self__, "tca_cust_account_number", tca_cust_account_number)
        if tca_customer_account_id is not None:
            pulumi.set(__self__, "tca_customer_account_id", tca_customer_account_id)
        if tca_party_id is not None:
            pulumi.set(__self__, "tca_party_id", tca_party_id)
        if tca_party_number is not None:
            pulumi.set(__self__, "tca_party_number", tca_party_number)

    @property
    @pulumi.getter(name="customerChainType")
    def customer_chain_type(self) -> Optional[str]:
        return pulumi.get(self, "customer_chain_type")

    @property
    @pulumi.getter(name="isChainCustomer")
    def is_chain_customer(self) -> Optional[bool]:
        return pulumi.get(self, "is_chain_customer")

    @property
    @pulumi.getter(name="isPublicSector")
    def is_public_sector(self) -> Optional[bool]:
        return pulumi.get(self, "is_public_sector")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="namePhonetic")
    def name_phonetic(self) -> Optional[str]:
        return pulumi.get(self, "name_phonetic")

    @property
    @pulumi.getter(name="tcaCustAccountNumber")
    def tca_cust_account_number(self) -> Optional[str]:
        return pulumi.get(self, "tca_cust_account_number")

    @property
    @pulumi.getter(name="tcaCustomerAccountId")
    def tca_customer_account_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_customer_account_id")

    @property
    @pulumi.getter(name="tcaPartyId")
    def tca_party_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_party_id")

    @property
    @pulumi.getter(name="tcaPartyNumber")
    def tca_party_number(self) -> Optional[str]:
        return pulumi.get(self, "tca_party_number")


@pulumi.output_type
class GetSubscribedServicesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSubscribedServicesSubscribedServiceResult(dict):
    def __init__(__self__, *,
                 admin_email: Optional[str] = None,
                 agreement_id: Optional[str] = None,
                 agreement_name: Optional[str] = None,
                 agreement_type: Optional[str] = None,
                 available_amount: Optional[str] = None,
                 bill_to_addresses: Optional[Sequence['outputs.GetSubscribedServicesSubscribedServiceBillToAddressResult']] = None,
                 bill_to_contacts: Optional[Sequence['outputs.GetSubscribedServicesSubscribedServiceBillToContactResult']] = None,
                 bill_to_customers: Optional[Sequence['outputs.GetSubscribedServicesSubscribedServiceBillToCustomerResult']] = None,
                 billing_frequency: Optional[str] = None,
                 booking_opty_number: Optional[str] = None,
                 buyer_email: Optional[str] = None,
                 commitment_schedule_id: Optional[str] = None,
                 commitment_services: Optional[Sequence['outputs.GetSubscribedServicesSubscribedServiceCommitmentServiceResult']] = None,
                 created_by: Optional[str] = None,
                 credit_percentage: Optional[str] = None,
                 csi: Optional[str] = None,
                 customer_transaction_reference: Optional[str] = None,
                 data_center: Optional[str] = None,
                 data_center_region: Optional[str] = None,
                 eligible_to_renew: Optional[str] = None,
                 end_user_addresses: Optional[Sequence['outputs.GetSubscribedServicesSubscribedServiceEndUserAddressResult']] = None,
                 end_user_contacts: Optional[Sequence['outputs.GetSubscribedServicesSubscribedServiceEndUserContactResult']] = None,
                 end_user_customers: Optional[Sequence['outputs.GetSubscribedServicesSubscribedServiceEndUserCustomerResult']] = None,
                 fulfillment_set: Optional[str] = None,
                 funded_allocation_value: Optional[str] = None,
                 id: Optional[str] = None,
                 is_allowance: Optional[bool] = None,
                 is_cap_to_price_list: Optional[bool] = None,
                 is_credit_enabled: Optional[bool] = None,
                 is_having_usage: Optional[bool] = None,
                 is_intent_to_pay: Optional[bool] = None,
                 is_payg: Optional[bool] = None,
                 is_single_rate_card: Optional[bool] = None,
                 is_variable_commitment: Optional[bool] = None,
                 line_net_amount: Optional[str] = None,
                 major_set: Optional[str] = None,
                 net_unit_price: Optional[str] = None,
                 operation_type: Optional[str] = None,
                 order_header_id: Optional[str] = None,
                 order_line_id: Optional[str] = None,
                 order_line_number: Optional[int] = None,
                 order_number: Optional[str] = None,
                 order_type: Optional[str] = None,
                 original_promo_amount: Optional[str] = None,
                 overage_bill_to: Optional[str] = None,
                 overage_discount_percentage: Optional[str] = None,
                 overage_policy: Optional[str] = None,
                 partner_credit_amount: Optional[str] = None,
                 partner_transaction_type: Optional[str] = None,
                 payg_policy: Optional[str] = None,
                 payment_method: Optional[str] = None,
                 payment_number: Optional[str] = None,
                 payment_terms: Optional[Sequence['outputs.GetSubscribedServicesSubscribedServicePaymentTermResult']] = None,
                 price_period: Optional[str] = None,
                 pricing_model: Optional[str] = None,
                 products: Optional[Sequence['outputs.GetSubscribedServicesSubscribedServiceProductResult']] = None,
                 program_type: Optional[str] = None,
                 promo_order_line_id: Optional[str] = None,
                 promo_type: Optional[str] = None,
                 promotion_pricing_type: Optional[str] = None,
                 provisioning_source: Optional[str] = None,
                 quantity: Optional[str] = None,
                 rate_card_discount_percentage: Optional[str] = None,
                 rate_cards: Optional[Sequence['outputs.GetSubscribedServicesSubscribedServiceRateCardResult']] = None,
                 ratecard_type: Optional[str] = None,
                 renewal_opty_id: Optional[str] = None,
                 renewal_opty_number: Optional[str] = None,
                 renewal_opty_type: Optional[str] = None,
                 renewed_subscribed_service_id: Optional[str] = None,
                 reseller_addresses: Optional[Sequence['outputs.GetSubscribedServicesSubscribedServiceResellerAddressResult']] = None,
                 reseller_contacts: Optional[Sequence['outputs.GetSubscribedServicesSubscribedServiceResellerContactResult']] = None,
                 reseller_customers: Optional[Sequence['outputs.GetSubscribedServicesSubscribedServiceResellerCustomerResult']] = None,
                 revenue_line_id: Optional[str] = None,
                 revenue_line_number: Optional[str] = None,
                 revised_arr_in_lc: Optional[str] = None,
                 revised_arr_in_sc: Optional[str] = None,
                 sales_account_party_id: Optional[str] = None,
                 sales_channel: Optional[str] = None,
                 serial_number: Optional[str] = None,
                 service_to_addresses: Optional[Sequence['outputs.GetSubscribedServicesSubscribedServiceServiceToAddressResult']] = None,
                 service_to_contacts: Optional[Sequence['outputs.GetSubscribedServicesSubscribedServiceServiceToContactResult']] = None,
                 service_to_customers: Optional[Sequence['outputs.GetSubscribedServicesSubscribedServiceServiceToCustomerResult']] = None,
                 sold_to_contacts: Optional[Sequence['outputs.GetSubscribedServicesSubscribedServiceSoldToContactResult']] = None,
                 sold_to_customers: Optional[Sequence['outputs.GetSubscribedServicesSubscribedServiceSoldToCustomerResult']] = None,
                 start_date_type: Optional[str] = None,
                 status: Optional[str] = None,
                 subscription_id: Optional[str] = None,
                 subscription_source: Optional[str] = None,
                 system_arr_in_lc: Optional[str] = None,
                 system_arr_in_sc: Optional[str] = None,
                 system_atr_arr_in_lc: Optional[str] = None,
                 system_atr_arr_in_sc: Optional[str] = None,
                 term_value: Optional[str] = None,
                 term_value_uom: Optional[str] = None,
                 time_agreement_end: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_customer_config: Optional[str] = None,
                 time_end: Optional[str] = None,
                 time_majorset_end: Optional[str] = None,
                 time_majorset_start: Optional[str] = None,
                 time_payment_expiry: Optional[str] = None,
                 time_provisioned: Optional[str] = None,
                 time_service_configuration_email_sent: Optional[str] = None,
                 time_start: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 time_welcome_email_sent: Optional[str] = None,
                 total_value: Optional[str] = None,
                 transaction_extension_id: Optional[str] = None,
                 type: Optional[str] = None,
                 updated_by: Optional[str] = None,
                 used_amount: Optional[str] = None):
        if admin_email is not None:
            pulumi.set(__self__, "admin_email", admin_email)
        if agreement_id is not None:
            pulumi.set(__self__, "agreement_id", agreement_id)
        if agreement_name is not None:
            pulumi.set(__self__, "agreement_name", agreement_name)
        if agreement_type is not None:
            pulumi.set(__self__, "agreement_type", agreement_type)
        if available_amount is not None:
            pulumi.set(__self__, "available_amount", available_amount)
        if bill_to_addresses is not None:
            pulumi.set(__self__, "bill_to_addresses", bill_to_addresses)
        if bill_to_contacts is not None:
            pulumi.set(__self__, "bill_to_contacts", bill_to_contacts)
        if bill_to_customers is not None:
            pulumi.set(__self__, "bill_to_customers", bill_to_customers)
        if billing_frequency is not None:
            pulumi.set(__self__, "billing_frequency", billing_frequency)
        if booking_opty_number is not None:
            pulumi.set(__self__, "booking_opty_number", booking_opty_number)
        if buyer_email is not None:
            pulumi.set(__self__, "buyer_email", buyer_email)
        if commitment_schedule_id is not None:
            pulumi.set(__self__, "commitment_schedule_id", commitment_schedule_id)
        if commitment_services is not None:
            pulumi.set(__self__, "commitment_services", commitment_services)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if credit_percentage is not None:
            pulumi.set(__self__, "credit_percentage", credit_percentage)
        if csi is not None:
            pulumi.set(__self__, "csi", csi)
        if customer_transaction_reference is not None:
            pulumi.set(__self__, "customer_transaction_reference", customer_transaction_reference)
        if data_center is not None:
            pulumi.set(__self__, "data_center", data_center)
        if data_center_region is not None:
            pulumi.set(__self__, "data_center_region", data_center_region)
        if eligible_to_renew is not None:
            pulumi.set(__self__, "eligible_to_renew", eligible_to_renew)
        if end_user_addresses is not None:
            pulumi.set(__self__, "end_user_addresses", end_user_addresses)
        if end_user_contacts is not None:
            pulumi.set(__self__, "end_user_contacts", end_user_contacts)
        if end_user_customers is not None:
            pulumi.set(__self__, "end_user_customers", end_user_customers)
        if fulfillment_set is not None:
            pulumi.set(__self__, "fulfillment_set", fulfillment_set)
        if funded_allocation_value is not None:
            pulumi.set(__self__, "funded_allocation_value", funded_allocation_value)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_allowance is not None:
            pulumi.set(__self__, "is_allowance", is_allowance)
        if is_cap_to_price_list is not None:
            pulumi.set(__self__, "is_cap_to_price_list", is_cap_to_price_list)
        if is_credit_enabled is not None:
            pulumi.set(__self__, "is_credit_enabled", is_credit_enabled)
        if is_having_usage is not None:
            pulumi.set(__self__, "is_having_usage", is_having_usage)
        if is_intent_to_pay is not None:
            pulumi.set(__self__, "is_intent_to_pay", is_intent_to_pay)
        if is_payg is not None:
            pulumi.set(__self__, "is_payg", is_payg)
        if is_single_rate_card is not None:
            pulumi.set(__self__, "is_single_rate_card", is_single_rate_card)
        if is_variable_commitment is not None:
            pulumi.set(__self__, "is_variable_commitment", is_variable_commitment)
        if line_net_amount is not None:
            pulumi.set(__self__, "line_net_amount", line_net_amount)
        if major_set is not None:
            pulumi.set(__self__, "major_set", major_set)
        if net_unit_price is not None:
            pulumi.set(__self__, "net_unit_price", net_unit_price)
        if operation_type is not None:
            pulumi.set(__self__, "operation_type", operation_type)
        if order_header_id is not None:
            pulumi.set(__self__, "order_header_id", order_header_id)
        if order_line_id is not None:
            pulumi.set(__self__, "order_line_id", order_line_id)
        if order_line_number is not None:
            pulumi.set(__self__, "order_line_number", order_line_number)
        if order_number is not None:
            pulumi.set(__self__, "order_number", order_number)
        if order_type is not None:
            pulumi.set(__self__, "order_type", order_type)
        if original_promo_amount is not None:
            pulumi.set(__self__, "original_promo_amount", original_promo_amount)
        if overage_bill_to is not None:
            pulumi.set(__self__, "overage_bill_to", overage_bill_to)
        if overage_discount_percentage is not None:
            pulumi.set(__self__, "overage_discount_percentage", overage_discount_percentage)
        if overage_policy is not None:
            pulumi.set(__self__, "overage_policy", overage_policy)
        if partner_credit_amount is not None:
            pulumi.set(__self__, "partner_credit_amount", partner_credit_amount)
        if partner_transaction_type is not None:
            pulumi.set(__self__, "partner_transaction_type", partner_transaction_type)
        if payg_policy is not None:
            pulumi.set(__self__, "payg_policy", payg_policy)
        if payment_method is not None:
            pulumi.set(__self__, "payment_method", payment_method)
        if payment_number is not None:
            pulumi.set(__self__, "payment_number", payment_number)
        if payment_terms is not None:
            pulumi.set(__self__, "payment_terms", payment_terms)
        if price_period is not None:
            pulumi.set(__self__, "price_period", price_period)
        if pricing_model is not None:
            pulumi.set(__self__, "pricing_model", pricing_model)
        if products is not None:
            pulumi.set(__self__, "products", products)
        if program_type is not None:
            pulumi.set(__self__, "program_type", program_type)
        if promo_order_line_id is not None:
            pulumi.set(__self__, "promo_order_line_id", promo_order_line_id)
        if promo_type is not None:
            pulumi.set(__self__, "promo_type", promo_type)
        if promotion_pricing_type is not None:
            pulumi.set(__self__, "promotion_pricing_type", promotion_pricing_type)
        if provisioning_source is not None:
            pulumi.set(__self__, "provisioning_source", provisioning_source)
        if quantity is not None:
            pulumi.set(__self__, "quantity", quantity)
        if rate_card_discount_percentage is not None:
            pulumi.set(__self__, "rate_card_discount_percentage", rate_card_discount_percentage)
        if rate_cards is not None:
            pulumi.set(__self__, "rate_cards", rate_cards)
        if ratecard_type is not None:
            pulumi.set(__self__, "ratecard_type", ratecard_type)
        if renewal_opty_id is not None:
            pulumi.set(__self__, "renewal_opty_id", renewal_opty_id)
        if renewal_opty_number is not None:
            pulumi.set(__self__, "renewal_opty_number", renewal_opty_number)
        if renewal_opty_type is not None:
            pulumi.set(__self__, "renewal_opty_type", renewal_opty_type)
        if renewed_subscribed_service_id is not None:
            pulumi.set(__self__, "renewed_subscribed_service_id", renewed_subscribed_service_id)
        if reseller_addresses is not None:
            pulumi.set(__self__, "reseller_addresses", reseller_addresses)
        if reseller_contacts is not None:
            pulumi.set(__self__, "reseller_contacts", reseller_contacts)
        if reseller_customers is not None:
            pulumi.set(__self__, "reseller_customers", reseller_customers)
        if revenue_line_id is not None:
            pulumi.set(__self__, "revenue_line_id", revenue_line_id)
        if revenue_line_number is not None:
            pulumi.set(__self__, "revenue_line_number", revenue_line_number)
        if revised_arr_in_lc is not None:
            pulumi.set(__self__, "revised_arr_in_lc", revised_arr_in_lc)
        if revised_arr_in_sc is not None:
            pulumi.set(__self__, "revised_arr_in_sc", revised_arr_in_sc)
        if sales_account_party_id is not None:
            pulumi.set(__self__, "sales_account_party_id", sales_account_party_id)
        if sales_channel is not None:
            pulumi.set(__self__, "sales_channel", sales_channel)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)
        if service_to_addresses is not None:
            pulumi.set(__self__, "service_to_addresses", service_to_addresses)
        if service_to_contacts is not None:
            pulumi.set(__self__, "service_to_contacts", service_to_contacts)
        if service_to_customers is not None:
            pulumi.set(__self__, "service_to_customers", service_to_customers)
        if sold_to_contacts is not None:
            pulumi.set(__self__, "sold_to_contacts", sold_to_contacts)
        if sold_to_customers is not None:
            pulumi.set(__self__, "sold_to_customers", sold_to_customers)
        if start_date_type is not None:
            pulumi.set(__self__, "start_date_type", start_date_type)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if subscription_id is not None:
            pulumi.set(__self__, "subscription_id", subscription_id)
        if subscription_source is not None:
            pulumi.set(__self__, "subscription_source", subscription_source)
        if system_arr_in_lc is not None:
            pulumi.set(__self__, "system_arr_in_lc", system_arr_in_lc)
        if system_arr_in_sc is not None:
            pulumi.set(__self__, "system_arr_in_sc", system_arr_in_sc)
        if system_atr_arr_in_lc is not None:
            pulumi.set(__self__, "system_atr_arr_in_lc", system_atr_arr_in_lc)
        if system_atr_arr_in_sc is not None:
            pulumi.set(__self__, "system_atr_arr_in_sc", system_atr_arr_in_sc)
        if term_value is not None:
            pulumi.set(__self__, "term_value", term_value)
        if term_value_uom is not None:
            pulumi.set(__self__, "term_value_uom", term_value_uom)
        if time_agreement_end is not None:
            pulumi.set(__self__, "time_agreement_end", time_agreement_end)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_customer_config is not None:
            pulumi.set(__self__, "time_customer_config", time_customer_config)
        if time_end is not None:
            pulumi.set(__self__, "time_end", time_end)
        if time_majorset_end is not None:
            pulumi.set(__self__, "time_majorset_end", time_majorset_end)
        if time_majorset_start is not None:
            pulumi.set(__self__, "time_majorset_start", time_majorset_start)
        if time_payment_expiry is not None:
            pulumi.set(__self__, "time_payment_expiry", time_payment_expiry)
        if time_provisioned is not None:
            pulumi.set(__self__, "time_provisioned", time_provisioned)
        if time_service_configuration_email_sent is not None:
            pulumi.set(__self__, "time_service_configuration_email_sent", time_service_configuration_email_sent)
        if time_start is not None:
            pulumi.set(__self__, "time_start", time_start)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if time_welcome_email_sent is not None:
            pulumi.set(__self__, "time_welcome_email_sent", time_welcome_email_sent)
        if total_value is not None:
            pulumi.set(__self__, "total_value", total_value)
        if transaction_extension_id is not None:
            pulumi.set(__self__, "transaction_extension_id", transaction_extension_id)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if used_amount is not None:
            pulumi.set(__self__, "used_amount", used_amount)

    @property
    @pulumi.getter(name="adminEmail")
    def admin_email(self) -> Optional[str]:
        return pulumi.get(self, "admin_email")

    @property
    @pulumi.getter(name="agreementId")
    def agreement_id(self) -> Optional[str]:
        return pulumi.get(self, "agreement_id")

    @property
    @pulumi.getter(name="agreementName")
    def agreement_name(self) -> Optional[str]:
        return pulumi.get(self, "agreement_name")

    @property
    @pulumi.getter(name="agreementType")
    def agreement_type(self) -> Optional[str]:
        return pulumi.get(self, "agreement_type")

    @property
    @pulumi.getter(name="availableAmount")
    def available_amount(self) -> Optional[str]:
        return pulumi.get(self, "available_amount")

    @property
    @pulumi.getter(name="billToAddresses")
    def bill_to_addresses(self) -> Optional[Sequence['outputs.GetSubscribedServicesSubscribedServiceBillToAddressResult']]:
        return pulumi.get(self, "bill_to_addresses")

    @property
    @pulumi.getter(name="billToContacts")
    def bill_to_contacts(self) -> Optional[Sequence['outputs.GetSubscribedServicesSubscribedServiceBillToContactResult']]:
        return pulumi.get(self, "bill_to_contacts")

    @property
    @pulumi.getter(name="billToCustomers")
    def bill_to_customers(self) -> Optional[Sequence['outputs.GetSubscribedServicesSubscribedServiceBillToCustomerResult']]:
        return pulumi.get(self, "bill_to_customers")

    @property
    @pulumi.getter(name="billingFrequency")
    def billing_frequency(self) -> Optional[str]:
        return pulumi.get(self, "billing_frequency")

    @property
    @pulumi.getter(name="bookingOptyNumber")
    def booking_opty_number(self) -> Optional[str]:
        return pulumi.get(self, "booking_opty_number")

    @property
    @pulumi.getter(name="buyerEmail")
    def buyer_email(self) -> Optional[str]:
        return pulumi.get(self, "buyer_email")

    @property
    @pulumi.getter(name="commitmentScheduleId")
    def commitment_schedule_id(self) -> Optional[str]:
        return pulumi.get(self, "commitment_schedule_id")

    @property
    @pulumi.getter(name="commitmentServices")
    def commitment_services(self) -> Optional[Sequence['outputs.GetSubscribedServicesSubscribedServiceCommitmentServiceResult']]:
        return pulumi.get(self, "commitment_services")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="creditPercentage")
    def credit_percentage(self) -> Optional[str]:
        return pulumi.get(self, "credit_percentage")

    @property
    @pulumi.getter
    def csi(self) -> Optional[str]:
        return pulumi.get(self, "csi")

    @property
    @pulumi.getter(name="customerTransactionReference")
    def customer_transaction_reference(self) -> Optional[str]:
        return pulumi.get(self, "customer_transaction_reference")

    @property
    @pulumi.getter(name="dataCenter")
    def data_center(self) -> Optional[str]:
        return pulumi.get(self, "data_center")

    @property
    @pulumi.getter(name="dataCenterRegion")
    def data_center_region(self) -> Optional[str]:
        return pulumi.get(self, "data_center_region")

    @property
    @pulumi.getter(name="eligibleToRenew")
    def eligible_to_renew(self) -> Optional[str]:
        return pulumi.get(self, "eligible_to_renew")

    @property
    @pulumi.getter(name="endUserAddresses")
    def end_user_addresses(self) -> Optional[Sequence['outputs.GetSubscribedServicesSubscribedServiceEndUserAddressResult']]:
        return pulumi.get(self, "end_user_addresses")

    @property
    @pulumi.getter(name="endUserContacts")
    def end_user_contacts(self) -> Optional[Sequence['outputs.GetSubscribedServicesSubscribedServiceEndUserContactResult']]:
        return pulumi.get(self, "end_user_contacts")

    @property
    @pulumi.getter(name="endUserCustomers")
    def end_user_customers(self) -> Optional[Sequence['outputs.GetSubscribedServicesSubscribedServiceEndUserCustomerResult']]:
        return pulumi.get(self, "end_user_customers")

    @property
    @pulumi.getter(name="fulfillmentSet")
    def fulfillment_set(self) -> Optional[str]:
        return pulumi.get(self, "fulfillment_set")

    @property
    @pulumi.getter(name="fundedAllocationValue")
    def funded_allocation_value(self) -> Optional[str]:
        return pulumi.get(self, "funded_allocation_value")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isAllowance")
    def is_allowance(self) -> Optional[bool]:
        return pulumi.get(self, "is_allowance")

    @property
    @pulumi.getter(name="isCapToPriceList")
    def is_cap_to_price_list(self) -> Optional[bool]:
        return pulumi.get(self, "is_cap_to_price_list")

    @property
    @pulumi.getter(name="isCreditEnabled")
    def is_credit_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_credit_enabled")

    @property
    @pulumi.getter(name="isHavingUsage")
    def is_having_usage(self) -> Optional[bool]:
        return pulumi.get(self, "is_having_usage")

    @property
    @pulumi.getter(name="isIntentToPay")
    def is_intent_to_pay(self) -> Optional[bool]:
        return pulumi.get(self, "is_intent_to_pay")

    @property
    @pulumi.getter(name="isPayg")
    def is_payg(self) -> Optional[bool]:
        return pulumi.get(self, "is_payg")

    @property
    @pulumi.getter(name="isSingleRateCard")
    def is_single_rate_card(self) -> Optional[bool]:
        return pulumi.get(self, "is_single_rate_card")

    @property
    @pulumi.getter(name="isVariableCommitment")
    def is_variable_commitment(self) -> Optional[bool]:
        return pulumi.get(self, "is_variable_commitment")

    @property
    @pulumi.getter(name="lineNetAmount")
    def line_net_amount(self) -> Optional[str]:
        return pulumi.get(self, "line_net_amount")

    @property
    @pulumi.getter(name="majorSet")
    def major_set(self) -> Optional[str]:
        return pulumi.get(self, "major_set")

    @property
    @pulumi.getter(name="netUnitPrice")
    def net_unit_price(self) -> Optional[str]:
        return pulumi.get(self, "net_unit_price")

    @property
    @pulumi.getter(name="operationType")
    def operation_type(self) -> Optional[str]:
        return pulumi.get(self, "operation_type")

    @property
    @pulumi.getter(name="orderHeaderId")
    def order_header_id(self) -> Optional[str]:
        return pulumi.get(self, "order_header_id")

    @property
    @pulumi.getter(name="orderLineId")
    def order_line_id(self) -> Optional[str]:
        return pulumi.get(self, "order_line_id")

    @property
    @pulumi.getter(name="orderLineNumber")
    def order_line_number(self) -> Optional[int]:
        return pulumi.get(self, "order_line_number")

    @property
    @pulumi.getter(name="orderNumber")
    def order_number(self) -> Optional[str]:
        return pulumi.get(self, "order_number")

    @property
    @pulumi.getter(name="orderType")
    def order_type(self) -> Optional[str]:
        return pulumi.get(self, "order_type")

    @property
    @pulumi.getter(name="originalPromoAmount")
    def original_promo_amount(self) -> Optional[str]:
        return pulumi.get(self, "original_promo_amount")

    @property
    @pulumi.getter(name="overageBillTo")
    def overage_bill_to(self) -> Optional[str]:
        return pulumi.get(self, "overage_bill_to")

    @property
    @pulumi.getter(name="overageDiscountPercentage")
    def overage_discount_percentage(self) -> Optional[str]:
        return pulumi.get(self, "overage_discount_percentage")

    @property
    @pulumi.getter(name="overagePolicy")
    def overage_policy(self) -> Optional[str]:
        return pulumi.get(self, "overage_policy")

    @property
    @pulumi.getter(name="partnerCreditAmount")
    def partner_credit_amount(self) -> Optional[str]:
        return pulumi.get(self, "partner_credit_amount")

    @property
    @pulumi.getter(name="partnerTransactionType")
    def partner_transaction_type(self) -> Optional[str]:
        return pulumi.get(self, "partner_transaction_type")

    @property
    @pulumi.getter(name="paygPolicy")
    def payg_policy(self) -> Optional[str]:
        return pulumi.get(self, "payg_policy")

    @property
    @pulumi.getter(name="paymentMethod")
    def payment_method(self) -> Optional[str]:
        return pulumi.get(self, "payment_method")

    @property
    @pulumi.getter(name="paymentNumber")
    def payment_number(self) -> Optional[str]:
        return pulumi.get(self, "payment_number")

    @property
    @pulumi.getter(name="paymentTerms")
    def payment_terms(self) -> Optional[Sequence['outputs.GetSubscribedServicesSubscribedServicePaymentTermResult']]:
        return pulumi.get(self, "payment_terms")

    @property
    @pulumi.getter(name="pricePeriod")
    def price_period(self) -> Optional[str]:
        return pulumi.get(self, "price_period")

    @property
    @pulumi.getter(name="pricingModel")
    def pricing_model(self) -> Optional[str]:
        return pulumi.get(self, "pricing_model")

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence['outputs.GetSubscribedServicesSubscribedServiceProductResult']]:
        return pulumi.get(self, "products")

    @property
    @pulumi.getter(name="programType")
    def program_type(self) -> Optional[str]:
        return pulumi.get(self, "program_type")

    @property
    @pulumi.getter(name="promoOrderLineId")
    def promo_order_line_id(self) -> Optional[str]:
        return pulumi.get(self, "promo_order_line_id")

    @property
    @pulumi.getter(name="promoType")
    def promo_type(self) -> Optional[str]:
        return pulumi.get(self, "promo_type")

    @property
    @pulumi.getter(name="promotionPricingType")
    def promotion_pricing_type(self) -> Optional[str]:
        return pulumi.get(self, "promotion_pricing_type")

    @property
    @pulumi.getter(name="provisioningSource")
    def provisioning_source(self) -> Optional[str]:
        return pulumi.get(self, "provisioning_source")

    @property
    @pulumi.getter
    def quantity(self) -> Optional[str]:
        return pulumi.get(self, "quantity")

    @property
    @pulumi.getter(name="rateCardDiscountPercentage")
    def rate_card_discount_percentage(self) -> Optional[str]:
        return pulumi.get(self, "rate_card_discount_percentage")

    @property
    @pulumi.getter(name="rateCards")
    def rate_cards(self) -> Optional[Sequence['outputs.GetSubscribedServicesSubscribedServiceRateCardResult']]:
        return pulumi.get(self, "rate_cards")

    @property
    @pulumi.getter(name="ratecardType")
    def ratecard_type(self) -> Optional[str]:
        return pulumi.get(self, "ratecard_type")

    @property
    @pulumi.getter(name="renewalOptyId")
    def renewal_opty_id(self) -> Optional[str]:
        return pulumi.get(self, "renewal_opty_id")

    @property
    @pulumi.getter(name="renewalOptyNumber")
    def renewal_opty_number(self) -> Optional[str]:
        return pulumi.get(self, "renewal_opty_number")

    @property
    @pulumi.getter(name="renewalOptyType")
    def renewal_opty_type(self) -> Optional[str]:
        return pulumi.get(self, "renewal_opty_type")

    @property
    @pulumi.getter(name="renewedSubscribedServiceId")
    def renewed_subscribed_service_id(self) -> Optional[str]:
        return pulumi.get(self, "renewed_subscribed_service_id")

    @property
    @pulumi.getter(name="resellerAddresses")
    def reseller_addresses(self) -> Optional[Sequence['outputs.GetSubscribedServicesSubscribedServiceResellerAddressResult']]:
        return pulumi.get(self, "reseller_addresses")

    @property
    @pulumi.getter(name="resellerContacts")
    def reseller_contacts(self) -> Optional[Sequence['outputs.GetSubscribedServicesSubscribedServiceResellerContactResult']]:
        return pulumi.get(self, "reseller_contacts")

    @property
    @pulumi.getter(name="resellerCustomers")
    def reseller_customers(self) -> Optional[Sequence['outputs.GetSubscribedServicesSubscribedServiceResellerCustomerResult']]:
        return pulumi.get(self, "reseller_customers")

    @property
    @pulumi.getter(name="revenueLineId")
    def revenue_line_id(self) -> Optional[str]:
        return pulumi.get(self, "revenue_line_id")

    @property
    @pulumi.getter(name="revenueLineNumber")
    def revenue_line_number(self) -> Optional[str]:
        return pulumi.get(self, "revenue_line_number")

    @property
    @pulumi.getter(name="revisedArrInLc")
    def revised_arr_in_lc(self) -> Optional[str]:
        return pulumi.get(self, "revised_arr_in_lc")

    @property
    @pulumi.getter(name="revisedArrInSc")
    def revised_arr_in_sc(self) -> Optional[str]:
        return pulumi.get(self, "revised_arr_in_sc")

    @property
    @pulumi.getter(name="salesAccountPartyId")
    def sales_account_party_id(self) -> Optional[str]:
        return pulumi.get(self, "sales_account_party_id")

    @property
    @pulumi.getter(name="salesChannel")
    def sales_channel(self) -> Optional[str]:
        return pulumi.get(self, "sales_channel")

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[str]:
        return pulumi.get(self, "serial_number")

    @property
    @pulumi.getter(name="serviceToAddresses")
    def service_to_addresses(self) -> Optional[Sequence['outputs.GetSubscribedServicesSubscribedServiceServiceToAddressResult']]:
        return pulumi.get(self, "service_to_addresses")

    @property
    @pulumi.getter(name="serviceToContacts")
    def service_to_contacts(self) -> Optional[Sequence['outputs.GetSubscribedServicesSubscribedServiceServiceToContactResult']]:
        return pulumi.get(self, "service_to_contacts")

    @property
    @pulumi.getter(name="serviceToCustomers")
    def service_to_customers(self) -> Optional[Sequence['outputs.GetSubscribedServicesSubscribedServiceServiceToCustomerResult']]:
        return pulumi.get(self, "service_to_customers")

    @property
    @pulumi.getter(name="soldToContacts")
    def sold_to_contacts(self) -> Optional[Sequence['outputs.GetSubscribedServicesSubscribedServiceSoldToContactResult']]:
        return pulumi.get(self, "sold_to_contacts")

    @property
    @pulumi.getter(name="soldToCustomers")
    def sold_to_customers(self) -> Optional[Sequence['outputs.GetSubscribedServicesSubscribedServiceSoldToCustomerResult']]:
        return pulumi.get(self, "sold_to_customers")

    @property
    @pulumi.getter(name="startDateType")
    def start_date_type(self) -> Optional[str]:
        return pulumi.get(self, "start_date_type")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> Optional[str]:
        return pulumi.get(self, "subscription_id")

    @property
    @pulumi.getter(name="subscriptionSource")
    def subscription_source(self) -> Optional[str]:
        return pulumi.get(self, "subscription_source")

    @property
    @pulumi.getter(name="systemArrInLc")
    def system_arr_in_lc(self) -> Optional[str]:
        return pulumi.get(self, "system_arr_in_lc")

    @property
    @pulumi.getter(name="systemArrInSc")
    def system_arr_in_sc(self) -> Optional[str]:
        return pulumi.get(self, "system_arr_in_sc")

    @property
    @pulumi.getter(name="systemAtrArrInLc")
    def system_atr_arr_in_lc(self) -> Optional[str]:
        return pulumi.get(self, "system_atr_arr_in_lc")

    @property
    @pulumi.getter(name="systemAtrArrInSc")
    def system_atr_arr_in_sc(self) -> Optional[str]:
        return pulumi.get(self, "system_atr_arr_in_sc")

    @property
    @pulumi.getter(name="termValue")
    def term_value(self) -> Optional[str]:
        return pulumi.get(self, "term_value")

    @property
    @pulumi.getter(name="termValueUom")
    def term_value_uom(self) -> Optional[str]:
        return pulumi.get(self, "term_value_uom")

    @property
    @pulumi.getter(name="timeAgreementEnd")
    def time_agreement_end(self) -> Optional[str]:
        return pulumi.get(self, "time_agreement_end")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeCustomerConfig")
    def time_customer_config(self) -> Optional[str]:
        return pulumi.get(self, "time_customer_config")

    @property
    @pulumi.getter(name="timeEnd")
    def time_end(self) -> Optional[str]:
        return pulumi.get(self, "time_end")

    @property
    @pulumi.getter(name="timeMajorsetEnd")
    def time_majorset_end(self) -> Optional[str]:
        return pulumi.get(self, "time_majorset_end")

    @property
    @pulumi.getter(name="timeMajorsetStart")
    def time_majorset_start(self) -> Optional[str]:
        return pulumi.get(self, "time_majorset_start")

    @property
    @pulumi.getter(name="timePaymentExpiry")
    def time_payment_expiry(self) -> Optional[str]:
        return pulumi.get(self, "time_payment_expiry")

    @property
    @pulumi.getter(name="timeProvisioned")
    def time_provisioned(self) -> Optional[str]:
        return pulumi.get(self, "time_provisioned")

    @property
    @pulumi.getter(name="timeServiceConfigurationEmailSent")
    def time_service_configuration_email_sent(self) -> Optional[str]:
        return pulumi.get(self, "time_service_configuration_email_sent")

    @property
    @pulumi.getter(name="timeStart")
    def time_start(self) -> Optional[str]:
        return pulumi.get(self, "time_start")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="timeWelcomeEmailSent")
    def time_welcome_email_sent(self) -> Optional[str]:
        return pulumi.get(self, "time_welcome_email_sent")

    @property
    @pulumi.getter(name="totalValue")
    def total_value(self) -> Optional[str]:
        return pulumi.get(self, "total_value")

    @property
    @pulumi.getter(name="transactionExtensionId")
    def transaction_extension_id(self) -> Optional[str]:
        return pulumi.get(self, "transaction_extension_id")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[str]:
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="usedAmount")
    def used_amount(self) -> Optional[str]:
        return pulumi.get(self, "used_amount")


@pulumi.output_type
class GetSubscribedServicesSubscribedServiceBillToAddressResult(dict):
    def __init__(__self__, *,
                 bill_site_use_id: Optional[str] = None,
                 is_bill_to: Optional[bool] = None,
                 is_ship_to: Optional[bool] = None,
                 locations: Optional[Sequence['outputs.GetSubscribedServicesSubscribedServiceBillToAddressLocationResult']] = None,
                 name: Optional[str] = None,
                 phone: Optional[str] = None,
                 service2site_use_id: Optional[str] = None,
                 tca_cust_acct_site_id: Optional[str] = None,
                 tca_party_site_number: Optional[str] = None):
        if bill_site_use_id is not None:
            pulumi.set(__self__, "bill_site_use_id", bill_site_use_id)
        if is_bill_to is not None:
            pulumi.set(__self__, "is_bill_to", is_bill_to)
        if is_ship_to is not None:
            pulumi.set(__self__, "is_ship_to", is_ship_to)
        if locations is not None:
            pulumi.set(__self__, "locations", locations)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if phone is not None:
            pulumi.set(__self__, "phone", phone)
        if service2site_use_id is not None:
            pulumi.set(__self__, "service2site_use_id", service2site_use_id)
        if tca_cust_acct_site_id is not None:
            pulumi.set(__self__, "tca_cust_acct_site_id", tca_cust_acct_site_id)
        if tca_party_site_number is not None:
            pulumi.set(__self__, "tca_party_site_number", tca_party_site_number)

    @property
    @pulumi.getter(name="billSiteUseId")
    def bill_site_use_id(self) -> Optional[str]:
        return pulumi.get(self, "bill_site_use_id")

    @property
    @pulumi.getter(name="isBillTo")
    def is_bill_to(self) -> Optional[bool]:
        return pulumi.get(self, "is_bill_to")

    @property
    @pulumi.getter(name="isShipTo")
    def is_ship_to(self) -> Optional[bool]:
        return pulumi.get(self, "is_ship_to")

    @property
    @pulumi.getter
    def locations(self) -> Optional[Sequence['outputs.GetSubscribedServicesSubscribedServiceBillToAddressLocationResult']]:
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def phone(self) -> Optional[str]:
        return pulumi.get(self, "phone")

    @property
    @pulumi.getter(name="service2siteUseId")
    def service2site_use_id(self) -> Optional[str]:
        return pulumi.get(self, "service2site_use_id")

    @property
    @pulumi.getter(name="tcaCustAcctSiteId")
    def tca_cust_acct_site_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_cust_acct_site_id")

    @property
    @pulumi.getter(name="tcaPartySiteNumber")
    def tca_party_site_number(self) -> Optional[str]:
        return pulumi.get(self, "tca_party_site_number")


@pulumi.output_type
class GetSubscribedServicesSubscribedServiceBillToAddressLocationResult(dict):
    def __init__(__self__, *,
                 address1: Optional[str] = None,
                 address2: Optional[str] = None,
                 city: Optional[str] = None,
                 country: Optional[str] = None,
                 postal_code: Optional[str] = None,
                 region: Optional[str] = None,
                 tca_location_id: Optional[str] = None):
        if address1 is not None:
            pulumi.set(__self__, "address1", address1)
        if address2 is not None:
            pulumi.set(__self__, "address2", address2)
        if city is not None:
            pulumi.set(__self__, "city", city)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if postal_code is not None:
            pulumi.set(__self__, "postal_code", postal_code)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if tca_location_id is not None:
            pulumi.set(__self__, "tca_location_id", tca_location_id)

    @property
    @pulumi.getter
    def address1(self) -> Optional[str]:
        return pulumi.get(self, "address1")

    @property
    @pulumi.getter
    def address2(self) -> Optional[str]:
        return pulumi.get(self, "address2")

    @property
    @pulumi.getter
    def city(self) -> Optional[str]:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> Optional[str]:
        return pulumi.get(self, "postal_code")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="tcaLocationId")
    def tca_location_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_location_id")


@pulumi.output_type
class GetSubscribedServicesSubscribedServiceBillToContactResult(dict):
    def __init__(__self__, *,
                 email: Optional[str] = None,
                 first_name: Optional[str] = None,
                 last_name: Optional[str] = None,
                 name: Optional[str] = None,
                 tca_contact_id: Optional[str] = None,
                 tca_cust_accnt_site_id: Optional[str] = None,
                 tca_party_id: Optional[str] = None,
                 username: Optional[str] = None):
        if email is not None:
            pulumi.set(__self__, "email", email)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tca_contact_id is not None:
            pulumi.set(__self__, "tca_contact_id", tca_contact_id)
        if tca_cust_accnt_site_id is not None:
            pulumi.set(__self__, "tca_cust_accnt_site_id", tca_cust_accnt_site_id)
        if tca_party_id is not None:
            pulumi.set(__self__, "tca_party_id", tca_party_id)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[str]:
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[str]:
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="tcaContactId")
    def tca_contact_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_contact_id")

    @property
    @pulumi.getter(name="tcaCustAccntSiteId")
    def tca_cust_accnt_site_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_cust_accnt_site_id")

    @property
    @pulumi.getter(name="tcaPartyId")
    def tca_party_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_party_id")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetSubscribedServicesSubscribedServiceBillToCustomerResult(dict):
    def __init__(__self__, *,
                 customer_chain_type: Optional[str] = None,
                 is_chain_customer: Optional[bool] = None,
                 is_public_sector: Optional[bool] = None,
                 name: Optional[str] = None,
                 name_phonetic: Optional[str] = None,
                 tca_cust_account_number: Optional[str] = None,
                 tca_customer_account_id: Optional[str] = None,
                 tca_party_id: Optional[str] = None,
                 tca_party_number: Optional[str] = None):
        if customer_chain_type is not None:
            pulumi.set(__self__, "customer_chain_type", customer_chain_type)
        if is_chain_customer is not None:
            pulumi.set(__self__, "is_chain_customer", is_chain_customer)
        if is_public_sector is not None:
            pulumi.set(__self__, "is_public_sector", is_public_sector)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_phonetic is not None:
            pulumi.set(__self__, "name_phonetic", name_phonetic)
        if tca_cust_account_number is not None:
            pulumi.set(__self__, "tca_cust_account_number", tca_cust_account_number)
        if tca_customer_account_id is not None:
            pulumi.set(__self__, "tca_customer_account_id", tca_customer_account_id)
        if tca_party_id is not None:
            pulumi.set(__self__, "tca_party_id", tca_party_id)
        if tca_party_number is not None:
            pulumi.set(__self__, "tca_party_number", tca_party_number)

    @property
    @pulumi.getter(name="customerChainType")
    def customer_chain_type(self) -> Optional[str]:
        return pulumi.get(self, "customer_chain_type")

    @property
    @pulumi.getter(name="isChainCustomer")
    def is_chain_customer(self) -> Optional[bool]:
        return pulumi.get(self, "is_chain_customer")

    @property
    @pulumi.getter(name="isPublicSector")
    def is_public_sector(self) -> Optional[bool]:
        return pulumi.get(self, "is_public_sector")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="namePhonetic")
    def name_phonetic(self) -> Optional[str]:
        return pulumi.get(self, "name_phonetic")

    @property
    @pulumi.getter(name="tcaCustAccountNumber")
    def tca_cust_account_number(self) -> Optional[str]:
        return pulumi.get(self, "tca_cust_account_number")

    @property
    @pulumi.getter(name="tcaCustomerAccountId")
    def tca_customer_account_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_customer_account_id")

    @property
    @pulumi.getter(name="tcaPartyId")
    def tca_party_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_party_id")

    @property
    @pulumi.getter(name="tcaPartyNumber")
    def tca_party_number(self) -> Optional[str]:
        return pulumi.get(self, "tca_party_number")


@pulumi.output_type
class GetSubscribedServicesSubscribedServiceCommitmentServiceResult(dict):
    def __init__(__self__, *,
                 available_amount: Optional[str] = None,
                 funded_allocation_value: Optional[str] = None,
                 line_net_amount: Optional[str] = None,
                 quantity: Optional[str] = None,
                 time_end: Optional[str] = None,
                 time_start: Optional[str] = None):
        if available_amount is not None:
            pulumi.set(__self__, "available_amount", available_amount)
        if funded_allocation_value is not None:
            pulumi.set(__self__, "funded_allocation_value", funded_allocation_value)
        if line_net_amount is not None:
            pulumi.set(__self__, "line_net_amount", line_net_amount)
        if quantity is not None:
            pulumi.set(__self__, "quantity", quantity)
        if time_end is not None:
            pulumi.set(__self__, "time_end", time_end)
        if time_start is not None:
            pulumi.set(__self__, "time_start", time_start)

    @property
    @pulumi.getter(name="availableAmount")
    def available_amount(self) -> Optional[str]:
        return pulumi.get(self, "available_amount")

    @property
    @pulumi.getter(name="fundedAllocationValue")
    def funded_allocation_value(self) -> Optional[str]:
        return pulumi.get(self, "funded_allocation_value")

    @property
    @pulumi.getter(name="lineNetAmount")
    def line_net_amount(self) -> Optional[str]:
        return pulumi.get(self, "line_net_amount")

    @property
    @pulumi.getter
    def quantity(self) -> Optional[str]:
        return pulumi.get(self, "quantity")

    @property
    @pulumi.getter(name="timeEnd")
    def time_end(self) -> Optional[str]:
        return pulumi.get(self, "time_end")

    @property
    @pulumi.getter(name="timeStart")
    def time_start(self) -> Optional[str]:
        return pulumi.get(self, "time_start")


@pulumi.output_type
class GetSubscribedServicesSubscribedServiceEndUserAddressResult(dict):
    def __init__(__self__, *,
                 bill_site_use_id: Optional[str] = None,
                 is_bill_to: Optional[bool] = None,
                 is_ship_to: Optional[bool] = None,
                 locations: Optional[Sequence['outputs.GetSubscribedServicesSubscribedServiceEndUserAddressLocationResult']] = None,
                 name: Optional[str] = None,
                 phone: Optional[str] = None,
                 service2site_use_id: Optional[str] = None,
                 tca_cust_acct_site_id: Optional[str] = None,
                 tca_party_site_number: Optional[str] = None):
        if bill_site_use_id is not None:
            pulumi.set(__self__, "bill_site_use_id", bill_site_use_id)
        if is_bill_to is not None:
            pulumi.set(__self__, "is_bill_to", is_bill_to)
        if is_ship_to is not None:
            pulumi.set(__self__, "is_ship_to", is_ship_to)
        if locations is not None:
            pulumi.set(__self__, "locations", locations)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if phone is not None:
            pulumi.set(__self__, "phone", phone)
        if service2site_use_id is not None:
            pulumi.set(__self__, "service2site_use_id", service2site_use_id)
        if tca_cust_acct_site_id is not None:
            pulumi.set(__self__, "tca_cust_acct_site_id", tca_cust_acct_site_id)
        if tca_party_site_number is not None:
            pulumi.set(__self__, "tca_party_site_number", tca_party_site_number)

    @property
    @pulumi.getter(name="billSiteUseId")
    def bill_site_use_id(self) -> Optional[str]:
        return pulumi.get(self, "bill_site_use_id")

    @property
    @pulumi.getter(name="isBillTo")
    def is_bill_to(self) -> Optional[bool]:
        return pulumi.get(self, "is_bill_to")

    @property
    @pulumi.getter(name="isShipTo")
    def is_ship_to(self) -> Optional[bool]:
        return pulumi.get(self, "is_ship_to")

    @property
    @pulumi.getter
    def locations(self) -> Optional[Sequence['outputs.GetSubscribedServicesSubscribedServiceEndUserAddressLocationResult']]:
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def phone(self) -> Optional[str]:
        return pulumi.get(self, "phone")

    @property
    @pulumi.getter(name="service2siteUseId")
    def service2site_use_id(self) -> Optional[str]:
        return pulumi.get(self, "service2site_use_id")

    @property
    @pulumi.getter(name="tcaCustAcctSiteId")
    def tca_cust_acct_site_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_cust_acct_site_id")

    @property
    @pulumi.getter(name="tcaPartySiteNumber")
    def tca_party_site_number(self) -> Optional[str]:
        return pulumi.get(self, "tca_party_site_number")


@pulumi.output_type
class GetSubscribedServicesSubscribedServiceEndUserAddressLocationResult(dict):
    def __init__(__self__, *,
                 address1: Optional[str] = None,
                 address2: Optional[str] = None,
                 city: Optional[str] = None,
                 country: Optional[str] = None,
                 postal_code: Optional[str] = None,
                 region: Optional[str] = None,
                 tca_location_id: Optional[str] = None):
        if address1 is not None:
            pulumi.set(__self__, "address1", address1)
        if address2 is not None:
            pulumi.set(__self__, "address2", address2)
        if city is not None:
            pulumi.set(__self__, "city", city)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if postal_code is not None:
            pulumi.set(__self__, "postal_code", postal_code)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if tca_location_id is not None:
            pulumi.set(__self__, "tca_location_id", tca_location_id)

    @property
    @pulumi.getter
    def address1(self) -> Optional[str]:
        return pulumi.get(self, "address1")

    @property
    @pulumi.getter
    def address2(self) -> Optional[str]:
        return pulumi.get(self, "address2")

    @property
    @pulumi.getter
    def city(self) -> Optional[str]:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> Optional[str]:
        return pulumi.get(self, "postal_code")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="tcaLocationId")
    def tca_location_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_location_id")


@pulumi.output_type
class GetSubscribedServicesSubscribedServiceEndUserContactResult(dict):
    def __init__(__self__, *,
                 email: Optional[str] = None,
                 first_name: Optional[str] = None,
                 last_name: Optional[str] = None,
                 name: Optional[str] = None,
                 tca_contact_id: Optional[str] = None,
                 tca_cust_accnt_site_id: Optional[str] = None,
                 tca_party_id: Optional[str] = None,
                 username: Optional[str] = None):
        if email is not None:
            pulumi.set(__self__, "email", email)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tca_contact_id is not None:
            pulumi.set(__self__, "tca_contact_id", tca_contact_id)
        if tca_cust_accnt_site_id is not None:
            pulumi.set(__self__, "tca_cust_accnt_site_id", tca_cust_accnt_site_id)
        if tca_party_id is not None:
            pulumi.set(__self__, "tca_party_id", tca_party_id)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[str]:
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[str]:
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="tcaContactId")
    def tca_contact_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_contact_id")

    @property
    @pulumi.getter(name="tcaCustAccntSiteId")
    def tca_cust_accnt_site_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_cust_accnt_site_id")

    @property
    @pulumi.getter(name="tcaPartyId")
    def tca_party_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_party_id")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetSubscribedServicesSubscribedServiceEndUserCustomerResult(dict):
    def __init__(__self__, *,
                 customer_chain_type: Optional[str] = None,
                 is_chain_customer: Optional[bool] = None,
                 is_public_sector: Optional[bool] = None,
                 name: Optional[str] = None,
                 name_phonetic: Optional[str] = None,
                 tca_cust_account_number: Optional[str] = None,
                 tca_customer_account_id: Optional[str] = None,
                 tca_party_id: Optional[str] = None,
                 tca_party_number: Optional[str] = None):
        if customer_chain_type is not None:
            pulumi.set(__self__, "customer_chain_type", customer_chain_type)
        if is_chain_customer is not None:
            pulumi.set(__self__, "is_chain_customer", is_chain_customer)
        if is_public_sector is not None:
            pulumi.set(__self__, "is_public_sector", is_public_sector)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_phonetic is not None:
            pulumi.set(__self__, "name_phonetic", name_phonetic)
        if tca_cust_account_number is not None:
            pulumi.set(__self__, "tca_cust_account_number", tca_cust_account_number)
        if tca_customer_account_id is not None:
            pulumi.set(__self__, "tca_customer_account_id", tca_customer_account_id)
        if tca_party_id is not None:
            pulumi.set(__self__, "tca_party_id", tca_party_id)
        if tca_party_number is not None:
            pulumi.set(__self__, "tca_party_number", tca_party_number)

    @property
    @pulumi.getter(name="customerChainType")
    def customer_chain_type(self) -> Optional[str]:
        return pulumi.get(self, "customer_chain_type")

    @property
    @pulumi.getter(name="isChainCustomer")
    def is_chain_customer(self) -> Optional[bool]:
        return pulumi.get(self, "is_chain_customer")

    @property
    @pulumi.getter(name="isPublicSector")
    def is_public_sector(self) -> Optional[bool]:
        return pulumi.get(self, "is_public_sector")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="namePhonetic")
    def name_phonetic(self) -> Optional[str]:
        return pulumi.get(self, "name_phonetic")

    @property
    @pulumi.getter(name="tcaCustAccountNumber")
    def tca_cust_account_number(self) -> Optional[str]:
        return pulumi.get(self, "tca_cust_account_number")

    @property
    @pulumi.getter(name="tcaCustomerAccountId")
    def tca_customer_account_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_customer_account_id")

    @property
    @pulumi.getter(name="tcaPartyId")
    def tca_party_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_party_id")

    @property
    @pulumi.getter(name="tcaPartyNumber")
    def tca_party_number(self) -> Optional[str]:
        return pulumi.get(self, "tca_party_number")


@pulumi.output_type
class GetSubscribedServicesSubscribedServicePaymentTermResult(dict):
    def __init__(__self__, *,
                 created_by: Optional[str] = None,
                 description: Optional[str] = None,
                 is_active: Optional[bool] = None,
                 name: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 updated_by: Optional[str] = None,
                 value: Optional[str] = None):
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if is_active is not None:
            pulumi.set(__self__, "is_active", is_active)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> Optional[bool]:
        return pulumi.get(self, "is_active")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[str]:
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSubscribedServicesSubscribedServiceProductResult(dict):
    def __init__(__self__, *,
                 billing_category: Optional[str] = None,
                 name: Optional[str] = None,
                 part_number: Optional[str] = None,
                 product_category: Optional[str] = None,
                 ucm_rate_card_part_type: Optional[str] = None,
                 unit_of_measure: Optional[str] = None):
        if billing_category is not None:
            pulumi.set(__self__, "billing_category", billing_category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if part_number is not None:
            pulumi.set(__self__, "part_number", part_number)
        if product_category is not None:
            pulumi.set(__self__, "product_category", product_category)
        if ucm_rate_card_part_type is not None:
            pulumi.set(__self__, "ucm_rate_card_part_type", ucm_rate_card_part_type)
        if unit_of_measure is not None:
            pulumi.set(__self__, "unit_of_measure", unit_of_measure)

    @property
    @pulumi.getter(name="billingCategory")
    def billing_category(self) -> Optional[str]:
        return pulumi.get(self, "billing_category")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="partNumber")
    def part_number(self) -> Optional[str]:
        return pulumi.get(self, "part_number")

    @property
    @pulumi.getter(name="productCategory")
    def product_category(self) -> Optional[str]:
        return pulumi.get(self, "product_category")

    @property
    @pulumi.getter(name="ucmRateCardPartType")
    def ucm_rate_card_part_type(self) -> Optional[str]:
        return pulumi.get(self, "ucm_rate_card_part_type")

    @property
    @pulumi.getter(name="unitOfMeasure")
    def unit_of_measure(self) -> Optional[str]:
        return pulumi.get(self, "unit_of_measure")


@pulumi.output_type
class GetSubscribedServicesSubscribedServiceRateCardResult(dict):
    def __init__(__self__, *,
                 currencies: Optional[Sequence['outputs.GetSubscribedServicesSubscribedServiceRateCardCurrencyResult']] = None,
                 discretionary_discount_percentage: Optional[str] = None,
                 is_tier: Optional[bool] = None,
                 net_unit_price: Optional[str] = None,
                 overage_price: Optional[str] = None,
                 products: Optional[Sequence['outputs.GetSubscribedServicesSubscribedServiceRateCardProductResult']] = None,
                 rate_card_tiers: Optional[Sequence['outputs.GetSubscribedServicesSubscribedServiceRateCardRateCardTierResult']] = None,
                 subscribed_service_id: Optional[str] = None,
                 time_end: Optional[str] = None,
                 time_start: Optional[str] = None):
        if currencies is not None:
            pulumi.set(__self__, "currencies", currencies)
        if discretionary_discount_percentage is not None:
            pulumi.set(__self__, "discretionary_discount_percentage", discretionary_discount_percentage)
        if is_tier is not None:
            pulumi.set(__self__, "is_tier", is_tier)
        if net_unit_price is not None:
            pulumi.set(__self__, "net_unit_price", net_unit_price)
        if overage_price is not None:
            pulumi.set(__self__, "overage_price", overage_price)
        if products is not None:
            pulumi.set(__self__, "products", products)
        if rate_card_tiers is not None:
            pulumi.set(__self__, "rate_card_tiers", rate_card_tiers)
        if subscribed_service_id is not None:
            pulumi.set(__self__, "subscribed_service_id", subscribed_service_id)
        if time_end is not None:
            pulumi.set(__self__, "time_end", time_end)
        if time_start is not None:
            pulumi.set(__self__, "time_start", time_start)

    @property
    @pulumi.getter
    def currencies(self) -> Optional[Sequence['outputs.GetSubscribedServicesSubscribedServiceRateCardCurrencyResult']]:
        return pulumi.get(self, "currencies")

    @property
    @pulumi.getter(name="discretionaryDiscountPercentage")
    def discretionary_discount_percentage(self) -> Optional[str]:
        return pulumi.get(self, "discretionary_discount_percentage")

    @property
    @pulumi.getter(name="isTier")
    def is_tier(self) -> Optional[bool]:
        return pulumi.get(self, "is_tier")

    @property
    @pulumi.getter(name="netUnitPrice")
    def net_unit_price(self) -> Optional[str]:
        return pulumi.get(self, "net_unit_price")

    @property
    @pulumi.getter(name="overagePrice")
    def overage_price(self) -> Optional[str]:
        return pulumi.get(self, "overage_price")

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence['outputs.GetSubscribedServicesSubscribedServiceRateCardProductResult']]:
        return pulumi.get(self, "products")

    @property
    @pulumi.getter(name="rateCardTiers")
    def rate_card_tiers(self) -> Optional[Sequence['outputs.GetSubscribedServicesSubscribedServiceRateCardRateCardTierResult']]:
        return pulumi.get(self, "rate_card_tiers")

    @property
    @pulumi.getter(name="subscribedServiceId")
    def subscribed_service_id(self) -> Optional[str]:
        return pulumi.get(self, "subscribed_service_id")

    @property
    @pulumi.getter(name="timeEnd")
    def time_end(self) -> Optional[str]:
        return pulumi.get(self, "time_end")

    @property
    @pulumi.getter(name="timeStart")
    def time_start(self) -> Optional[str]:
        return pulumi.get(self, "time_start")


@pulumi.output_type
class GetSubscribedServicesSubscribedServiceRateCardCurrencyResult(dict):
    def __init__(__self__, *,
                 iso_code: Optional[str] = None,
                 name: Optional[str] = None,
                 std_precision: Optional[str] = None):
        if iso_code is not None:
            pulumi.set(__self__, "iso_code", iso_code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if std_precision is not None:
            pulumi.set(__self__, "std_precision", std_precision)

    @property
    @pulumi.getter(name="isoCode")
    def iso_code(self) -> Optional[str]:
        return pulumi.get(self, "iso_code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="stdPrecision")
    def std_precision(self) -> Optional[str]:
        return pulumi.get(self, "std_precision")


@pulumi.output_type
class GetSubscribedServicesSubscribedServiceRateCardProductResult(dict):
    def __init__(__self__, *,
                 billing_category: Optional[str] = None,
                 name: Optional[str] = None,
                 part_number: Optional[str] = None,
                 product_category: Optional[str] = None,
                 ucm_rate_card_part_type: Optional[str] = None,
                 unit_of_measure: Optional[str] = None):
        if billing_category is not None:
            pulumi.set(__self__, "billing_category", billing_category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if part_number is not None:
            pulumi.set(__self__, "part_number", part_number)
        if product_category is not None:
            pulumi.set(__self__, "product_category", product_category)
        if ucm_rate_card_part_type is not None:
            pulumi.set(__self__, "ucm_rate_card_part_type", ucm_rate_card_part_type)
        if unit_of_measure is not None:
            pulumi.set(__self__, "unit_of_measure", unit_of_measure)

    @property
    @pulumi.getter(name="billingCategory")
    def billing_category(self) -> Optional[str]:
        return pulumi.get(self, "billing_category")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="partNumber")
    def part_number(self) -> Optional[str]:
        return pulumi.get(self, "part_number")

    @property
    @pulumi.getter(name="productCategory")
    def product_category(self) -> Optional[str]:
        return pulumi.get(self, "product_category")

    @property
    @pulumi.getter(name="ucmRateCardPartType")
    def ucm_rate_card_part_type(self) -> Optional[str]:
        return pulumi.get(self, "ucm_rate_card_part_type")

    @property
    @pulumi.getter(name="unitOfMeasure")
    def unit_of_measure(self) -> Optional[str]:
        return pulumi.get(self, "unit_of_measure")


@pulumi.output_type
class GetSubscribedServicesSubscribedServiceRateCardRateCardTierResult(dict):
    def __init__(__self__, *,
                 net_unit_price: Optional[str] = None,
                 overage_price: Optional[str] = None,
                 up_to_quantity: Optional[str] = None):
        if net_unit_price is not None:
            pulumi.set(__self__, "net_unit_price", net_unit_price)
        if overage_price is not None:
            pulumi.set(__self__, "overage_price", overage_price)
        if up_to_quantity is not None:
            pulumi.set(__self__, "up_to_quantity", up_to_quantity)

    @property
    @pulumi.getter(name="netUnitPrice")
    def net_unit_price(self) -> Optional[str]:
        return pulumi.get(self, "net_unit_price")

    @property
    @pulumi.getter(name="overagePrice")
    def overage_price(self) -> Optional[str]:
        return pulumi.get(self, "overage_price")

    @property
    @pulumi.getter(name="upToQuantity")
    def up_to_quantity(self) -> Optional[str]:
        return pulumi.get(self, "up_to_quantity")


@pulumi.output_type
class GetSubscribedServicesSubscribedServiceResellerAddressResult(dict):
    def __init__(__self__, *,
                 bill_site_use_id: Optional[str] = None,
                 is_bill_to: Optional[bool] = None,
                 is_ship_to: Optional[bool] = None,
                 locations: Optional[Sequence['outputs.GetSubscribedServicesSubscribedServiceResellerAddressLocationResult']] = None,
                 name: Optional[str] = None,
                 phone: Optional[str] = None,
                 service2site_use_id: Optional[str] = None,
                 tca_cust_acct_site_id: Optional[str] = None,
                 tca_party_site_number: Optional[str] = None):
        if bill_site_use_id is not None:
            pulumi.set(__self__, "bill_site_use_id", bill_site_use_id)
        if is_bill_to is not None:
            pulumi.set(__self__, "is_bill_to", is_bill_to)
        if is_ship_to is not None:
            pulumi.set(__self__, "is_ship_to", is_ship_to)
        if locations is not None:
            pulumi.set(__self__, "locations", locations)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if phone is not None:
            pulumi.set(__self__, "phone", phone)
        if service2site_use_id is not None:
            pulumi.set(__self__, "service2site_use_id", service2site_use_id)
        if tca_cust_acct_site_id is not None:
            pulumi.set(__self__, "tca_cust_acct_site_id", tca_cust_acct_site_id)
        if tca_party_site_number is not None:
            pulumi.set(__self__, "tca_party_site_number", tca_party_site_number)

    @property
    @pulumi.getter(name="billSiteUseId")
    def bill_site_use_id(self) -> Optional[str]:
        return pulumi.get(self, "bill_site_use_id")

    @property
    @pulumi.getter(name="isBillTo")
    def is_bill_to(self) -> Optional[bool]:
        return pulumi.get(self, "is_bill_to")

    @property
    @pulumi.getter(name="isShipTo")
    def is_ship_to(self) -> Optional[bool]:
        return pulumi.get(self, "is_ship_to")

    @property
    @pulumi.getter
    def locations(self) -> Optional[Sequence['outputs.GetSubscribedServicesSubscribedServiceResellerAddressLocationResult']]:
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def phone(self) -> Optional[str]:
        return pulumi.get(self, "phone")

    @property
    @pulumi.getter(name="service2siteUseId")
    def service2site_use_id(self) -> Optional[str]:
        return pulumi.get(self, "service2site_use_id")

    @property
    @pulumi.getter(name="tcaCustAcctSiteId")
    def tca_cust_acct_site_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_cust_acct_site_id")

    @property
    @pulumi.getter(name="tcaPartySiteNumber")
    def tca_party_site_number(self) -> Optional[str]:
        return pulumi.get(self, "tca_party_site_number")


@pulumi.output_type
class GetSubscribedServicesSubscribedServiceResellerAddressLocationResult(dict):
    def __init__(__self__, *,
                 address1: Optional[str] = None,
                 address2: Optional[str] = None,
                 city: Optional[str] = None,
                 country: Optional[str] = None,
                 postal_code: Optional[str] = None,
                 region: Optional[str] = None,
                 tca_location_id: Optional[str] = None):
        if address1 is not None:
            pulumi.set(__self__, "address1", address1)
        if address2 is not None:
            pulumi.set(__self__, "address2", address2)
        if city is not None:
            pulumi.set(__self__, "city", city)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if postal_code is not None:
            pulumi.set(__self__, "postal_code", postal_code)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if tca_location_id is not None:
            pulumi.set(__self__, "tca_location_id", tca_location_id)

    @property
    @pulumi.getter
    def address1(self) -> Optional[str]:
        return pulumi.get(self, "address1")

    @property
    @pulumi.getter
    def address2(self) -> Optional[str]:
        return pulumi.get(self, "address2")

    @property
    @pulumi.getter
    def city(self) -> Optional[str]:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> Optional[str]:
        return pulumi.get(self, "postal_code")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="tcaLocationId")
    def tca_location_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_location_id")


@pulumi.output_type
class GetSubscribedServicesSubscribedServiceResellerContactResult(dict):
    def __init__(__self__, *,
                 email: Optional[str] = None,
                 first_name: Optional[str] = None,
                 last_name: Optional[str] = None,
                 name: Optional[str] = None,
                 tca_contact_id: Optional[str] = None,
                 tca_cust_accnt_site_id: Optional[str] = None,
                 tca_party_id: Optional[str] = None,
                 username: Optional[str] = None):
        if email is not None:
            pulumi.set(__self__, "email", email)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tca_contact_id is not None:
            pulumi.set(__self__, "tca_contact_id", tca_contact_id)
        if tca_cust_accnt_site_id is not None:
            pulumi.set(__self__, "tca_cust_accnt_site_id", tca_cust_accnt_site_id)
        if tca_party_id is not None:
            pulumi.set(__self__, "tca_party_id", tca_party_id)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[str]:
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[str]:
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="tcaContactId")
    def tca_contact_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_contact_id")

    @property
    @pulumi.getter(name="tcaCustAccntSiteId")
    def tca_cust_accnt_site_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_cust_accnt_site_id")

    @property
    @pulumi.getter(name="tcaPartyId")
    def tca_party_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_party_id")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetSubscribedServicesSubscribedServiceResellerCustomerResult(dict):
    def __init__(__self__, *,
                 customer_chain_type: Optional[str] = None,
                 is_chain_customer: Optional[bool] = None,
                 is_public_sector: Optional[bool] = None,
                 name: Optional[str] = None,
                 name_phonetic: Optional[str] = None,
                 tca_cust_account_number: Optional[str] = None,
                 tca_customer_account_id: Optional[str] = None,
                 tca_party_id: Optional[str] = None,
                 tca_party_number: Optional[str] = None):
        if customer_chain_type is not None:
            pulumi.set(__self__, "customer_chain_type", customer_chain_type)
        if is_chain_customer is not None:
            pulumi.set(__self__, "is_chain_customer", is_chain_customer)
        if is_public_sector is not None:
            pulumi.set(__self__, "is_public_sector", is_public_sector)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_phonetic is not None:
            pulumi.set(__self__, "name_phonetic", name_phonetic)
        if tca_cust_account_number is not None:
            pulumi.set(__self__, "tca_cust_account_number", tca_cust_account_number)
        if tca_customer_account_id is not None:
            pulumi.set(__self__, "tca_customer_account_id", tca_customer_account_id)
        if tca_party_id is not None:
            pulumi.set(__self__, "tca_party_id", tca_party_id)
        if tca_party_number is not None:
            pulumi.set(__self__, "tca_party_number", tca_party_number)

    @property
    @pulumi.getter(name="customerChainType")
    def customer_chain_type(self) -> Optional[str]:
        return pulumi.get(self, "customer_chain_type")

    @property
    @pulumi.getter(name="isChainCustomer")
    def is_chain_customer(self) -> Optional[bool]:
        return pulumi.get(self, "is_chain_customer")

    @property
    @pulumi.getter(name="isPublicSector")
    def is_public_sector(self) -> Optional[bool]:
        return pulumi.get(self, "is_public_sector")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="namePhonetic")
    def name_phonetic(self) -> Optional[str]:
        return pulumi.get(self, "name_phonetic")

    @property
    @pulumi.getter(name="tcaCustAccountNumber")
    def tca_cust_account_number(self) -> Optional[str]:
        return pulumi.get(self, "tca_cust_account_number")

    @property
    @pulumi.getter(name="tcaCustomerAccountId")
    def tca_customer_account_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_customer_account_id")

    @property
    @pulumi.getter(name="tcaPartyId")
    def tca_party_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_party_id")

    @property
    @pulumi.getter(name="tcaPartyNumber")
    def tca_party_number(self) -> Optional[str]:
        return pulumi.get(self, "tca_party_number")


@pulumi.output_type
class GetSubscribedServicesSubscribedServiceServiceToAddressResult(dict):
    def __init__(__self__, *,
                 bill_site_use_id: Optional[str] = None,
                 is_bill_to: Optional[bool] = None,
                 is_ship_to: Optional[bool] = None,
                 locations: Optional[Sequence['outputs.GetSubscribedServicesSubscribedServiceServiceToAddressLocationResult']] = None,
                 name: Optional[str] = None,
                 phone: Optional[str] = None,
                 service2site_use_id: Optional[str] = None,
                 tca_cust_acct_site_id: Optional[str] = None,
                 tca_party_site_number: Optional[str] = None):
        if bill_site_use_id is not None:
            pulumi.set(__self__, "bill_site_use_id", bill_site_use_id)
        if is_bill_to is not None:
            pulumi.set(__self__, "is_bill_to", is_bill_to)
        if is_ship_to is not None:
            pulumi.set(__self__, "is_ship_to", is_ship_to)
        if locations is not None:
            pulumi.set(__self__, "locations", locations)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if phone is not None:
            pulumi.set(__self__, "phone", phone)
        if service2site_use_id is not None:
            pulumi.set(__self__, "service2site_use_id", service2site_use_id)
        if tca_cust_acct_site_id is not None:
            pulumi.set(__self__, "tca_cust_acct_site_id", tca_cust_acct_site_id)
        if tca_party_site_number is not None:
            pulumi.set(__self__, "tca_party_site_number", tca_party_site_number)

    @property
    @pulumi.getter(name="billSiteUseId")
    def bill_site_use_id(self) -> Optional[str]:
        return pulumi.get(self, "bill_site_use_id")

    @property
    @pulumi.getter(name="isBillTo")
    def is_bill_to(self) -> Optional[bool]:
        return pulumi.get(self, "is_bill_to")

    @property
    @pulumi.getter(name="isShipTo")
    def is_ship_to(self) -> Optional[bool]:
        return pulumi.get(self, "is_ship_to")

    @property
    @pulumi.getter
    def locations(self) -> Optional[Sequence['outputs.GetSubscribedServicesSubscribedServiceServiceToAddressLocationResult']]:
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def phone(self) -> Optional[str]:
        return pulumi.get(self, "phone")

    @property
    @pulumi.getter(name="service2siteUseId")
    def service2site_use_id(self) -> Optional[str]:
        return pulumi.get(self, "service2site_use_id")

    @property
    @pulumi.getter(name="tcaCustAcctSiteId")
    def tca_cust_acct_site_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_cust_acct_site_id")

    @property
    @pulumi.getter(name="tcaPartySiteNumber")
    def tca_party_site_number(self) -> Optional[str]:
        return pulumi.get(self, "tca_party_site_number")


@pulumi.output_type
class GetSubscribedServicesSubscribedServiceServiceToAddressLocationResult(dict):
    def __init__(__self__, *,
                 address1: Optional[str] = None,
                 address2: Optional[str] = None,
                 city: Optional[str] = None,
                 country: Optional[str] = None,
                 postal_code: Optional[str] = None,
                 region: Optional[str] = None,
                 tca_location_id: Optional[str] = None):
        if address1 is not None:
            pulumi.set(__self__, "address1", address1)
        if address2 is not None:
            pulumi.set(__self__, "address2", address2)
        if city is not None:
            pulumi.set(__self__, "city", city)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if postal_code is not None:
            pulumi.set(__self__, "postal_code", postal_code)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if tca_location_id is not None:
            pulumi.set(__self__, "tca_location_id", tca_location_id)

    @property
    @pulumi.getter
    def address1(self) -> Optional[str]:
        return pulumi.get(self, "address1")

    @property
    @pulumi.getter
    def address2(self) -> Optional[str]:
        return pulumi.get(self, "address2")

    @property
    @pulumi.getter
    def city(self) -> Optional[str]:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> Optional[str]:
        return pulumi.get(self, "postal_code")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="tcaLocationId")
    def tca_location_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_location_id")


@pulumi.output_type
class GetSubscribedServicesSubscribedServiceServiceToContactResult(dict):
    def __init__(__self__, *,
                 email: Optional[str] = None,
                 first_name: Optional[str] = None,
                 last_name: Optional[str] = None,
                 name: Optional[str] = None,
                 tca_contact_id: Optional[str] = None,
                 tca_cust_accnt_site_id: Optional[str] = None,
                 tca_party_id: Optional[str] = None,
                 username: Optional[str] = None):
        if email is not None:
            pulumi.set(__self__, "email", email)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tca_contact_id is not None:
            pulumi.set(__self__, "tca_contact_id", tca_contact_id)
        if tca_cust_accnt_site_id is not None:
            pulumi.set(__self__, "tca_cust_accnt_site_id", tca_cust_accnt_site_id)
        if tca_party_id is not None:
            pulumi.set(__self__, "tca_party_id", tca_party_id)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[str]:
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[str]:
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="tcaContactId")
    def tca_contact_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_contact_id")

    @property
    @pulumi.getter(name="tcaCustAccntSiteId")
    def tca_cust_accnt_site_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_cust_accnt_site_id")

    @property
    @pulumi.getter(name="tcaPartyId")
    def tca_party_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_party_id")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetSubscribedServicesSubscribedServiceServiceToCustomerResult(dict):
    def __init__(__self__, *,
                 customer_chain_type: Optional[str] = None,
                 is_chain_customer: Optional[bool] = None,
                 is_public_sector: Optional[bool] = None,
                 name: Optional[str] = None,
                 name_phonetic: Optional[str] = None,
                 tca_cust_account_number: Optional[str] = None,
                 tca_customer_account_id: Optional[str] = None,
                 tca_party_id: Optional[str] = None,
                 tca_party_number: Optional[str] = None):
        if customer_chain_type is not None:
            pulumi.set(__self__, "customer_chain_type", customer_chain_type)
        if is_chain_customer is not None:
            pulumi.set(__self__, "is_chain_customer", is_chain_customer)
        if is_public_sector is not None:
            pulumi.set(__self__, "is_public_sector", is_public_sector)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_phonetic is not None:
            pulumi.set(__self__, "name_phonetic", name_phonetic)
        if tca_cust_account_number is not None:
            pulumi.set(__self__, "tca_cust_account_number", tca_cust_account_number)
        if tca_customer_account_id is not None:
            pulumi.set(__self__, "tca_customer_account_id", tca_customer_account_id)
        if tca_party_id is not None:
            pulumi.set(__self__, "tca_party_id", tca_party_id)
        if tca_party_number is not None:
            pulumi.set(__self__, "tca_party_number", tca_party_number)

    @property
    @pulumi.getter(name="customerChainType")
    def customer_chain_type(self) -> Optional[str]:
        return pulumi.get(self, "customer_chain_type")

    @property
    @pulumi.getter(name="isChainCustomer")
    def is_chain_customer(self) -> Optional[bool]:
        return pulumi.get(self, "is_chain_customer")

    @property
    @pulumi.getter(name="isPublicSector")
    def is_public_sector(self) -> Optional[bool]:
        return pulumi.get(self, "is_public_sector")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="namePhonetic")
    def name_phonetic(self) -> Optional[str]:
        return pulumi.get(self, "name_phonetic")

    @property
    @pulumi.getter(name="tcaCustAccountNumber")
    def tca_cust_account_number(self) -> Optional[str]:
        return pulumi.get(self, "tca_cust_account_number")

    @property
    @pulumi.getter(name="tcaCustomerAccountId")
    def tca_customer_account_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_customer_account_id")

    @property
    @pulumi.getter(name="tcaPartyId")
    def tca_party_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_party_id")

    @property
    @pulumi.getter(name="tcaPartyNumber")
    def tca_party_number(self) -> Optional[str]:
        return pulumi.get(self, "tca_party_number")


@pulumi.output_type
class GetSubscribedServicesSubscribedServiceSoldToContactResult(dict):
    def __init__(__self__, *,
                 email: Optional[str] = None,
                 first_name: Optional[str] = None,
                 last_name: Optional[str] = None,
                 name: Optional[str] = None,
                 tca_contact_id: Optional[str] = None,
                 tca_cust_accnt_site_id: Optional[str] = None,
                 tca_party_id: Optional[str] = None,
                 username: Optional[str] = None):
        if email is not None:
            pulumi.set(__self__, "email", email)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tca_contact_id is not None:
            pulumi.set(__self__, "tca_contact_id", tca_contact_id)
        if tca_cust_accnt_site_id is not None:
            pulumi.set(__self__, "tca_cust_accnt_site_id", tca_cust_accnt_site_id)
        if tca_party_id is not None:
            pulumi.set(__self__, "tca_party_id", tca_party_id)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[str]:
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[str]:
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="tcaContactId")
    def tca_contact_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_contact_id")

    @property
    @pulumi.getter(name="tcaCustAccntSiteId")
    def tca_cust_accnt_site_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_cust_accnt_site_id")

    @property
    @pulumi.getter(name="tcaPartyId")
    def tca_party_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_party_id")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetSubscribedServicesSubscribedServiceSoldToCustomerResult(dict):
    def __init__(__self__, *,
                 customer_chain_type: Optional[str] = None,
                 is_chain_customer: Optional[bool] = None,
                 is_public_sector: Optional[bool] = None,
                 name: Optional[str] = None,
                 name_phonetic: Optional[str] = None,
                 tca_cust_account_number: Optional[str] = None,
                 tca_customer_account_id: Optional[str] = None,
                 tca_party_id: Optional[str] = None,
                 tca_party_number: Optional[str] = None):
        if customer_chain_type is not None:
            pulumi.set(__self__, "customer_chain_type", customer_chain_type)
        if is_chain_customer is not None:
            pulumi.set(__self__, "is_chain_customer", is_chain_customer)
        if is_public_sector is not None:
            pulumi.set(__self__, "is_public_sector", is_public_sector)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_phonetic is not None:
            pulumi.set(__self__, "name_phonetic", name_phonetic)
        if tca_cust_account_number is not None:
            pulumi.set(__self__, "tca_cust_account_number", tca_cust_account_number)
        if tca_customer_account_id is not None:
            pulumi.set(__self__, "tca_customer_account_id", tca_customer_account_id)
        if tca_party_id is not None:
            pulumi.set(__self__, "tca_party_id", tca_party_id)
        if tca_party_number is not None:
            pulumi.set(__self__, "tca_party_number", tca_party_number)

    @property
    @pulumi.getter(name="customerChainType")
    def customer_chain_type(self) -> Optional[str]:
        return pulumi.get(self, "customer_chain_type")

    @property
    @pulumi.getter(name="isChainCustomer")
    def is_chain_customer(self) -> Optional[bool]:
        return pulumi.get(self, "is_chain_customer")

    @property
    @pulumi.getter(name="isPublicSector")
    def is_public_sector(self) -> Optional[bool]:
        return pulumi.get(self, "is_public_sector")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="namePhonetic")
    def name_phonetic(self) -> Optional[str]:
        return pulumi.get(self, "name_phonetic")

    @property
    @pulumi.getter(name="tcaCustAccountNumber")
    def tca_cust_account_number(self) -> Optional[str]:
        return pulumi.get(self, "tca_cust_account_number")

    @property
    @pulumi.getter(name="tcaCustomerAccountId")
    def tca_customer_account_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_customer_account_id")

    @property
    @pulumi.getter(name="tcaPartyId")
    def tca_party_id(self) -> Optional[str]:
        return pulumi.get(self, "tca_party_id")

    @property
    @pulumi.getter(name="tcaPartyNumber")
    def tca_party_number(self) -> Optional[str]:
        return pulumi.get(self, "tca_party_number")


@pulumi.output_type
class GetSubscriptionsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSubscriptionsSubscriptionResult(dict):
    def __init__(__self__, *,
                 currencies: Optional[Sequence['outputs.GetSubscriptionsSubscriptionCurrencyResult']] = None,
                 hold_reason: Optional[str] = None,
                 service_name: Optional[str] = None,
                 status: Optional[str] = None,
                 subscribed_services: Optional[Sequence['outputs.GetSubscriptionsSubscriptionSubscribedServiceResult']] = None,
                 time_end: Optional[str] = None,
                 time_hold_release_eta: Optional[str] = None,
                 time_start: Optional[str] = None):
        if currencies is not None:
            pulumi.set(__self__, "currencies", currencies)
        if hold_reason is not None:
            pulumi.set(__self__, "hold_reason", hold_reason)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if subscribed_services is not None:
            pulumi.set(__self__, "subscribed_services", subscribed_services)
        if time_end is not None:
            pulumi.set(__self__, "time_end", time_end)
        if time_hold_release_eta is not None:
            pulumi.set(__self__, "time_hold_release_eta", time_hold_release_eta)
        if time_start is not None:
            pulumi.set(__self__, "time_start", time_start)

    @property
    @pulumi.getter
    def currencies(self) -> Optional[Sequence['outputs.GetSubscriptionsSubscriptionCurrencyResult']]:
        return pulumi.get(self, "currencies")

    @property
    @pulumi.getter(name="holdReason")
    def hold_reason(self) -> Optional[str]:
        return pulumi.get(self, "hold_reason")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[str]:
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subscribedServices")
    def subscribed_services(self) -> Optional[Sequence['outputs.GetSubscriptionsSubscriptionSubscribedServiceResult']]:
        return pulumi.get(self, "subscribed_services")

    @property
    @pulumi.getter(name="timeEnd")
    def time_end(self) -> Optional[str]:
        return pulumi.get(self, "time_end")

    @property
    @pulumi.getter(name="timeHoldReleaseEta")
    def time_hold_release_eta(self) -> Optional[str]:
        return pulumi.get(self, "time_hold_release_eta")

    @property
    @pulumi.getter(name="timeStart")
    def time_start(self) -> Optional[str]:
        return pulumi.get(self, "time_start")


@pulumi.output_type
class GetSubscriptionsSubscriptionCurrencyResult(dict):
    def __init__(__self__, *,
                 iso_code: Optional[str] = None,
                 name: Optional[str] = None,
                 std_precision: Optional[str] = None):
        if iso_code is not None:
            pulumi.set(__self__, "iso_code", iso_code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if std_precision is not None:
            pulumi.set(__self__, "std_precision", std_precision)

    @property
    @pulumi.getter(name="isoCode")
    def iso_code(self) -> Optional[str]:
        return pulumi.get(self, "iso_code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="stdPrecision")
    def std_precision(self) -> Optional[str]:
        return pulumi.get(self, "std_precision")


@pulumi.output_type
class GetSubscriptionsSubscriptionSubscribedServiceResult(dict):
    def __init__(__self__, *,
                 available_amount: Optional[str] = None,
                 booking_opty_number: Optional[str] = None,
                 commitment_services: Optional[Sequence['outputs.GetSubscriptionsSubscriptionSubscribedServiceCommitmentServiceResult']] = None,
                 csi: Optional[str] = None,
                 data_center_region: Optional[str] = None,
                 funded_allocation_value: Optional[str] = None,
                 id: Optional[str] = None,
                 is_intent_to_pay: Optional[bool] = None,
                 net_unit_price: Optional[str] = None,
                 operation_type: Optional[str] = None,
                 order_number: Optional[str] = None,
                 original_promo_amount: Optional[str] = None,
                 partner_transaction_type: Optional[str] = None,
                 pricing_model: Optional[str] = None,
                 products: Optional[Sequence['outputs.GetSubscriptionsSubscriptionSubscribedServiceProductResult']] = None,
                 program_type: Optional[str] = None,
                 promo_type: Optional[str] = None,
                 quantity: Optional[str] = None,
                 status: Optional[str] = None,
                 term_value: Optional[str] = None,
                 term_value_uom: Optional[str] = None,
                 time_end: Optional[str] = None,
                 time_start: Optional[str] = None,
                 total_value: Optional[str] = None,
                 used_amount: Optional[str] = None):
        if available_amount is not None:
            pulumi.set(__self__, "available_amount", available_amount)
        if booking_opty_number is not None:
            pulumi.set(__self__, "booking_opty_number", booking_opty_number)
        if commitment_services is not None:
            pulumi.set(__self__, "commitment_services", commitment_services)
        if csi is not None:
            pulumi.set(__self__, "csi", csi)
        if data_center_region is not None:
            pulumi.set(__self__, "data_center_region", data_center_region)
        if funded_allocation_value is not None:
            pulumi.set(__self__, "funded_allocation_value", funded_allocation_value)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_intent_to_pay is not None:
            pulumi.set(__self__, "is_intent_to_pay", is_intent_to_pay)
        if net_unit_price is not None:
            pulumi.set(__self__, "net_unit_price", net_unit_price)
        if operation_type is not None:
            pulumi.set(__self__, "operation_type", operation_type)
        if order_number is not None:
            pulumi.set(__self__, "order_number", order_number)
        if original_promo_amount is not None:
            pulumi.set(__self__, "original_promo_amount", original_promo_amount)
        if partner_transaction_type is not None:
            pulumi.set(__self__, "partner_transaction_type", partner_transaction_type)
        if pricing_model is not None:
            pulumi.set(__self__, "pricing_model", pricing_model)
        if products is not None:
            pulumi.set(__self__, "products", products)
        if program_type is not None:
            pulumi.set(__self__, "program_type", program_type)
        if promo_type is not None:
            pulumi.set(__self__, "promo_type", promo_type)
        if quantity is not None:
            pulumi.set(__self__, "quantity", quantity)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if term_value is not None:
            pulumi.set(__self__, "term_value", term_value)
        if term_value_uom is not None:
            pulumi.set(__self__, "term_value_uom", term_value_uom)
        if time_end is not None:
            pulumi.set(__self__, "time_end", time_end)
        if time_start is not None:
            pulumi.set(__self__, "time_start", time_start)
        if total_value is not None:
            pulumi.set(__self__, "total_value", total_value)
        if used_amount is not None:
            pulumi.set(__self__, "used_amount", used_amount)

    @property
    @pulumi.getter(name="availableAmount")
    def available_amount(self) -> Optional[str]:
        return pulumi.get(self, "available_amount")

    @property
    @pulumi.getter(name="bookingOptyNumber")
    def booking_opty_number(self) -> Optional[str]:
        return pulumi.get(self, "booking_opty_number")

    @property
    @pulumi.getter(name="commitmentServices")
    def commitment_services(self) -> Optional[Sequence['outputs.GetSubscriptionsSubscriptionSubscribedServiceCommitmentServiceResult']]:
        return pulumi.get(self, "commitment_services")

    @property
    @pulumi.getter
    def csi(self) -> Optional[str]:
        return pulumi.get(self, "csi")

    @property
    @pulumi.getter(name="dataCenterRegion")
    def data_center_region(self) -> Optional[str]:
        return pulumi.get(self, "data_center_region")

    @property
    @pulumi.getter(name="fundedAllocationValue")
    def funded_allocation_value(self) -> Optional[str]:
        return pulumi.get(self, "funded_allocation_value")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isIntentToPay")
    def is_intent_to_pay(self) -> Optional[bool]:
        return pulumi.get(self, "is_intent_to_pay")

    @property
    @pulumi.getter(name="netUnitPrice")
    def net_unit_price(self) -> Optional[str]:
        return pulumi.get(self, "net_unit_price")

    @property
    @pulumi.getter(name="operationType")
    def operation_type(self) -> Optional[str]:
        return pulumi.get(self, "operation_type")

    @property
    @pulumi.getter(name="orderNumber")
    def order_number(self) -> Optional[str]:
        return pulumi.get(self, "order_number")

    @property
    @pulumi.getter(name="originalPromoAmount")
    def original_promo_amount(self) -> Optional[str]:
        return pulumi.get(self, "original_promo_amount")

    @property
    @pulumi.getter(name="partnerTransactionType")
    def partner_transaction_type(self) -> Optional[str]:
        return pulumi.get(self, "partner_transaction_type")

    @property
    @pulumi.getter(name="pricingModel")
    def pricing_model(self) -> Optional[str]:
        return pulumi.get(self, "pricing_model")

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence['outputs.GetSubscriptionsSubscriptionSubscribedServiceProductResult']]:
        return pulumi.get(self, "products")

    @property
    @pulumi.getter(name="programType")
    def program_type(self) -> Optional[str]:
        return pulumi.get(self, "program_type")

    @property
    @pulumi.getter(name="promoType")
    def promo_type(self) -> Optional[str]:
        return pulumi.get(self, "promo_type")

    @property
    @pulumi.getter
    def quantity(self) -> Optional[str]:
        return pulumi.get(self, "quantity")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="termValue")
    def term_value(self) -> Optional[str]:
        return pulumi.get(self, "term_value")

    @property
    @pulumi.getter(name="termValueUom")
    def term_value_uom(self) -> Optional[str]:
        return pulumi.get(self, "term_value_uom")

    @property
    @pulumi.getter(name="timeEnd")
    def time_end(self) -> Optional[str]:
        return pulumi.get(self, "time_end")

    @property
    @pulumi.getter(name="timeStart")
    def time_start(self) -> Optional[str]:
        return pulumi.get(self, "time_start")

    @property
    @pulumi.getter(name="totalValue")
    def total_value(self) -> Optional[str]:
        return pulumi.get(self, "total_value")

    @property
    @pulumi.getter(name="usedAmount")
    def used_amount(self) -> Optional[str]:
        return pulumi.get(self, "used_amount")


@pulumi.output_type
class GetSubscriptionsSubscriptionSubscribedServiceCommitmentServiceResult(dict):
    def __init__(__self__, *,
                 available_amount: Optional[str] = None,
                 funded_allocation_value: Optional[str] = None,
                 line_net_amount: Optional[str] = None,
                 quantity: Optional[str] = None,
                 time_end: Optional[str] = None,
                 time_start: Optional[str] = None):
        if available_amount is not None:
            pulumi.set(__self__, "available_amount", available_amount)
        if funded_allocation_value is not None:
            pulumi.set(__self__, "funded_allocation_value", funded_allocation_value)
        if line_net_amount is not None:
            pulumi.set(__self__, "line_net_amount", line_net_amount)
        if quantity is not None:
            pulumi.set(__self__, "quantity", quantity)
        if time_end is not None:
            pulumi.set(__self__, "time_end", time_end)
        if time_start is not None:
            pulumi.set(__self__, "time_start", time_start)

    @property
    @pulumi.getter(name="availableAmount")
    def available_amount(self) -> Optional[str]:
        return pulumi.get(self, "available_amount")

    @property
    @pulumi.getter(name="fundedAllocationValue")
    def funded_allocation_value(self) -> Optional[str]:
        return pulumi.get(self, "funded_allocation_value")

    @property
    @pulumi.getter(name="lineNetAmount")
    def line_net_amount(self) -> Optional[str]:
        return pulumi.get(self, "line_net_amount")

    @property
    @pulumi.getter
    def quantity(self) -> Optional[str]:
        return pulumi.get(self, "quantity")

    @property
    @pulumi.getter(name="timeEnd")
    def time_end(self) -> Optional[str]:
        return pulumi.get(self, "time_end")

    @property
    @pulumi.getter(name="timeStart")
    def time_start(self) -> Optional[str]:
        return pulumi.get(self, "time_start")


@pulumi.output_type
class GetSubscriptionsSubscriptionSubscribedServiceProductResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 part_number: Optional[str] = None,
                 provisioning_group: Optional[str] = None,
                 unit_of_measure: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if part_number is not None:
            pulumi.set(__self__, "part_number", part_number)
        if provisioning_group is not None:
            pulumi.set(__self__, "provisioning_group", provisioning_group)
        if unit_of_measure is not None:
            pulumi.set(__self__, "unit_of_measure", unit_of_measure)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="partNumber")
    def part_number(self) -> Optional[str]:
        return pulumi.get(self, "part_number")

    @property
    @pulumi.getter(name="provisioningGroup")
    def provisioning_group(self) -> Optional[str]:
        return pulumi.get(self, "provisioning_group")

    @property
    @pulumi.getter(name="unitOfMeasure")
    def unit_of_measure(self) -> Optional[str]:
        return pulumi.get(self, "unit_of_measure")


