# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'OpaInstanceAttachmentArgs',
    'GetOpaInstancesFilterArgs',
]

@pulumi.input_type
class OpaInstanceAttachmentArgs:
    def __init__(__self__, *,
                 is_implicit: Optional[pulumi.Input[bool]] = None,
                 target_id: Optional[pulumi.Input[str]] = None,
                 target_instance_url: Optional[pulumi.Input[str]] = None,
                 target_role: Optional[pulumi.Input[str]] = None,
                 target_service_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] is_implicit: * If role == `PARENT`, the attached instance was created by this service instance
               * If role == `CHILD`, this instance was created from attached instance on behalf of a user
        :param pulumi.Input[str] target_id: The OCID of the target instance (which could be any other Oracle Cloud Infrastructure PaaS/SaaS resource), to which this instance is attached.
        :param pulumi.Input[str] target_instance_url: The dataplane instance URL of the attached instance
        :param pulumi.Input[str] target_role: The role of the target attachment.
        :param pulumi.Input[str] target_service_type: The type of the target instance, such as "FUSION".
        """
        OpaInstanceAttachmentArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            is_implicit=is_implicit,
            target_id=target_id,
            target_instance_url=target_instance_url,
            target_role=target_role,
            target_service_type=target_service_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             is_implicit: Optional[pulumi.Input[bool]] = None,
             target_id: Optional[pulumi.Input[str]] = None,
             target_instance_url: Optional[pulumi.Input[str]] = None,
             target_role: Optional[pulumi.Input[str]] = None,
             target_service_type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'isImplicit' in kwargs:
            is_implicit = kwargs['isImplicit']
        if 'targetId' in kwargs:
            target_id = kwargs['targetId']
        if 'targetInstanceUrl' in kwargs:
            target_instance_url = kwargs['targetInstanceUrl']
        if 'targetRole' in kwargs:
            target_role = kwargs['targetRole']
        if 'targetServiceType' in kwargs:
            target_service_type = kwargs['targetServiceType']

        if is_implicit is not None:
            _setter("is_implicit", is_implicit)
        if target_id is not None:
            _setter("target_id", target_id)
        if target_instance_url is not None:
            _setter("target_instance_url", target_instance_url)
        if target_role is not None:
            _setter("target_role", target_role)
        if target_service_type is not None:
            _setter("target_service_type", target_service_type)

    @property
    @pulumi.getter(name="isImplicit")
    def is_implicit(self) -> Optional[pulumi.Input[bool]]:
        """
        * If role == `PARENT`, the attached instance was created by this service instance
        * If role == `CHILD`, this instance was created from attached instance on behalf of a user
        """
        return pulumi.get(self, "is_implicit")

    @is_implicit.setter
    def is_implicit(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_implicit", value)

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[pulumi.Input[str]]:
        """
        The OCID of the target instance (which could be any other Oracle Cloud Infrastructure PaaS/SaaS resource), to which this instance is attached.
        """
        return pulumi.get(self, "target_id")

    @target_id.setter
    def target_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_id", value)

    @property
    @pulumi.getter(name="targetInstanceUrl")
    def target_instance_url(self) -> Optional[pulumi.Input[str]]:
        """
        The dataplane instance URL of the attached instance
        """
        return pulumi.get(self, "target_instance_url")

    @target_instance_url.setter
    def target_instance_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_instance_url", value)

    @property
    @pulumi.getter(name="targetRole")
    def target_role(self) -> Optional[pulumi.Input[str]]:
        """
        The role of the target attachment.
        """
        return pulumi.get(self, "target_role")

    @target_role.setter
    def target_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_role", value)

    @property
    @pulumi.getter(name="targetServiceType")
    def target_service_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the target instance, such as "FUSION".
        """
        return pulumi.get(self, "target_service_type")

    @target_service_type.setter
    def target_service_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_service_type", value)


@pulumi.input_type
class GetOpaInstancesFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        GetOpaInstancesFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


