# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['OpaInstanceArgs', 'OpaInstance']

@pulumi.input_type
class OpaInstanceArgs:
    def __init__(__self__, *,
                 compartment_id: pulumi.Input[str],
                 display_name: pulumi.Input[str],
                 shape_name: pulumi.Input[str],
                 consumption_model: Optional[pulumi.Input[str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 idcs_at: Optional[pulumi.Input[str]] = None,
                 is_breakglass_enabled: Optional[pulumi.Input[bool]] = None,
                 metering_type: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a OpaInstance resource.
        :param pulumi.Input[str] compartment_id: (Updatable) Compartment Identifier
        :param pulumi.Input[str] display_name: (Updatable) OpaInstance Identifier. User-friendly name for the instance. Avoid entering confidential information. You can change this value anytime.
        :param pulumi.Input[str] shape_name: Shape of the instance.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param pulumi.Input[str] consumption_model: Parameter specifying which entitlement to use for billing purposes
        :param pulumi.Input[Mapping[str, Any]] defined_tags: (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param pulumi.Input[str] description: (Updatable) Description of the Oracle Process Automation instance.
        :param pulumi.Input[Mapping[str, Any]] freeform_tags: (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param pulumi.Input[str] idcs_at: IDCS Authentication token. This is required for all realms with IDCS. This property is optional, as it is not required for non-IDCS realms.
        :param pulumi.Input[bool] is_breakglass_enabled: indicates if breakGlass is enabled for the opa instance.
        :param pulumi.Input[str] metering_type: MeteringType Identifier
        """
        OpaInstanceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            compartment_id=compartment_id,
            display_name=display_name,
            shape_name=shape_name,
            consumption_model=consumption_model,
            defined_tags=defined_tags,
            description=description,
            freeform_tags=freeform_tags,
            idcs_at=idcs_at,
            is_breakglass_enabled=is_breakglass_enabled,
            metering_type=metering_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             compartment_id: pulumi.Input[str],
             display_name: pulumi.Input[str],
             shape_name: pulumi.Input[str],
             consumption_model: Optional[pulumi.Input[str]] = None,
             defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             description: Optional[pulumi.Input[str]] = None,
             freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             idcs_at: Optional[pulumi.Input[str]] = None,
             is_breakglass_enabled: Optional[pulumi.Input[bool]] = None,
             metering_type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'compartmentId' in kwargs:
            compartment_id = kwargs['compartmentId']
        if 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if 'shapeName' in kwargs:
            shape_name = kwargs['shapeName']
        if 'consumptionModel' in kwargs:
            consumption_model = kwargs['consumptionModel']
        if 'definedTags' in kwargs:
            defined_tags = kwargs['definedTags']
        if 'freeformTags' in kwargs:
            freeform_tags = kwargs['freeformTags']
        if 'idcsAt' in kwargs:
            idcs_at = kwargs['idcsAt']
        if 'isBreakglassEnabled' in kwargs:
            is_breakglass_enabled = kwargs['isBreakglassEnabled']
        if 'meteringType' in kwargs:
            metering_type = kwargs['meteringType']

        _setter("compartment_id", compartment_id)
        _setter("display_name", display_name)
        _setter("shape_name", shape_name)
        if consumption_model is not None:
            _setter("consumption_model", consumption_model)
        if defined_tags is not None:
            _setter("defined_tags", defined_tags)
        if description is not None:
            _setter("description", description)
        if freeform_tags is not None:
            _setter("freeform_tags", freeform_tags)
        if idcs_at is not None:
            _setter("idcs_at", idcs_at)
        if is_breakglass_enabled is not None:
            _setter("is_breakglass_enabled", is_breakglass_enabled)
        if metering_type is not None:
            _setter("metering_type", metering_type)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Input[str]:
        """
        (Updatable) Compartment Identifier
        """
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[str]:
        """
        (Updatable) OpaInstance Identifier. User-friendly name for the instance. Avoid entering confidential information. You can change this value anytime.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="shapeName")
    def shape_name(self) -> pulumi.Input[str]:
        """
        Shape of the instance.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "shape_name")

    @shape_name.setter
    def shape_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "shape_name", value)

    @property
    @pulumi.getter(name="consumptionModel")
    def consumption_model(self) -> Optional[pulumi.Input[str]]:
        """
        Parameter specifying which entitlement to use for billing purposes
        """
        return pulumi.get(self, "consumption_model")

    @consumption_model.setter
    def consumption_model(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumption_model", value)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @defined_tags.setter
    def defined_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "defined_tags", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Description of the Oracle Process Automation instance.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @freeform_tags.setter
    def freeform_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "freeform_tags", value)

    @property
    @pulumi.getter(name="idcsAt")
    def idcs_at(self) -> Optional[pulumi.Input[str]]:
        """
        IDCS Authentication token. This is required for all realms with IDCS. This property is optional, as it is not required for non-IDCS realms.
        """
        return pulumi.get(self, "idcs_at")

    @idcs_at.setter
    def idcs_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idcs_at", value)

    @property
    @pulumi.getter(name="isBreakglassEnabled")
    def is_breakglass_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        indicates if breakGlass is enabled for the opa instance.
        """
        return pulumi.get(self, "is_breakglass_enabled")

    @is_breakglass_enabled.setter
    def is_breakglass_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_breakglass_enabled", value)

    @property
    @pulumi.getter(name="meteringType")
    def metering_type(self) -> Optional[pulumi.Input[str]]:
        """
        MeteringType Identifier
        """
        return pulumi.get(self, "metering_type")

    @metering_type.setter
    def metering_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metering_type", value)


@pulumi.input_type
class _OpaInstanceState:
    def __init__(__self__, *,
                 attachments: Optional[pulumi.Input[Sequence[pulumi.Input['OpaInstanceAttachmentArgs']]]] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 consumption_model: Optional[pulumi.Input[str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 idcs_at: Optional[pulumi.Input[str]] = None,
                 identity_app_display_name: Optional[pulumi.Input[str]] = None,
                 identity_app_guid: Optional[pulumi.Input[str]] = None,
                 identity_app_opc_service_instance_guid: Optional[pulumi.Input[str]] = None,
                 identity_domain_url: Optional[pulumi.Input[str]] = None,
                 instance_url: Optional[pulumi.Input[str]] = None,
                 is_breakglass_enabled: Optional[pulumi.Input[bool]] = None,
                 metering_type: Optional[pulumi.Input[str]] = None,
                 shape_name: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 system_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 time_created: Optional[pulumi.Input[str]] = None,
                 time_updated: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering OpaInstance resources.
        :param pulumi.Input[Sequence[pulumi.Input['OpaInstanceAttachmentArgs']]] attachments: A list of associated attachments to other services
        :param pulumi.Input[str] compartment_id: (Updatable) Compartment Identifier
        :param pulumi.Input[str] consumption_model: Parameter specifying which entitlement to use for billing purposes
        :param pulumi.Input[Mapping[str, Any]] defined_tags: (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param pulumi.Input[str] description: (Updatable) Description of the Oracle Process Automation instance.
        :param pulumi.Input[str] display_name: (Updatable) OpaInstance Identifier. User-friendly name for the instance. Avoid entering confidential information. You can change this value anytime.
        :param pulumi.Input[Mapping[str, Any]] freeform_tags: (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param pulumi.Input[str] idcs_at: IDCS Authentication token. This is required for all realms with IDCS. This property is optional, as it is not required for non-IDCS realms.
        :param pulumi.Input[str] identity_app_display_name: This property specifies the name of the Identity Application instance OPA has created inside the user-specified identity domain. This identity application instance may be used to host user roll mappings to grant access to this OPA instance for users within the identity domain.
        :param pulumi.Input[str] identity_app_guid: This property specifies the GUID of the Identity Application instance OPA has created inside the user-specified identity domain. This identity application instance may be used to host user role mappings to grant access to this OPA instance for users within the identity domain.
        :param pulumi.Input[str] identity_app_opc_service_instance_guid: This property specifies the OPC Service Instance GUID of the Identity Application instance OPA has created inside the user-specified identity domain. This identity application instance may be used to host user roll mappings to grant access to this OPA instance for users within the identity domain.
        :param pulumi.Input[str] identity_domain_url: This property specifies the domain url of the Identity Application instance OPA has created inside the user-specified identity domain. This identity application instance may be used to host user roll mappings to grant access to this OPA instance for users within the identity domain.
        :param pulumi.Input[str] instance_url: OPA Instance URL
        :param pulumi.Input[bool] is_breakglass_enabled: indicates if breakGlass is enabled for the opa instance.
        :param pulumi.Input[str] metering_type: MeteringType Identifier
        :param pulumi.Input[str] shape_name: Shape of the instance.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param pulumi.Input[str] state: The current state of the OpaInstance.
        :param pulumi.Input[Mapping[str, Any]] system_tags: Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param pulumi.Input[str] time_created: The time when OpaInstance was created. An RFC3339 formatted datetime string
        :param pulumi.Input[str] time_updated: The time the OpaInstance was updated. An RFC3339 formatted datetime string
        """
        _OpaInstanceState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            attachments=attachments,
            compartment_id=compartment_id,
            consumption_model=consumption_model,
            defined_tags=defined_tags,
            description=description,
            display_name=display_name,
            freeform_tags=freeform_tags,
            idcs_at=idcs_at,
            identity_app_display_name=identity_app_display_name,
            identity_app_guid=identity_app_guid,
            identity_app_opc_service_instance_guid=identity_app_opc_service_instance_guid,
            identity_domain_url=identity_domain_url,
            instance_url=instance_url,
            is_breakglass_enabled=is_breakglass_enabled,
            metering_type=metering_type,
            shape_name=shape_name,
            state=state,
            system_tags=system_tags,
            time_created=time_created,
            time_updated=time_updated,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             attachments: Optional[pulumi.Input[Sequence[pulumi.Input['OpaInstanceAttachmentArgs']]]] = None,
             compartment_id: Optional[pulumi.Input[str]] = None,
             consumption_model: Optional[pulumi.Input[str]] = None,
             defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             description: Optional[pulumi.Input[str]] = None,
             display_name: Optional[pulumi.Input[str]] = None,
             freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             idcs_at: Optional[pulumi.Input[str]] = None,
             identity_app_display_name: Optional[pulumi.Input[str]] = None,
             identity_app_guid: Optional[pulumi.Input[str]] = None,
             identity_app_opc_service_instance_guid: Optional[pulumi.Input[str]] = None,
             identity_domain_url: Optional[pulumi.Input[str]] = None,
             instance_url: Optional[pulumi.Input[str]] = None,
             is_breakglass_enabled: Optional[pulumi.Input[bool]] = None,
             metering_type: Optional[pulumi.Input[str]] = None,
             shape_name: Optional[pulumi.Input[str]] = None,
             state: Optional[pulumi.Input[str]] = None,
             system_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             time_created: Optional[pulumi.Input[str]] = None,
             time_updated: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'compartmentId' in kwargs:
            compartment_id = kwargs['compartmentId']
        if 'consumptionModel' in kwargs:
            consumption_model = kwargs['consumptionModel']
        if 'definedTags' in kwargs:
            defined_tags = kwargs['definedTags']
        if 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if 'freeformTags' in kwargs:
            freeform_tags = kwargs['freeformTags']
        if 'idcsAt' in kwargs:
            idcs_at = kwargs['idcsAt']
        if 'identityAppDisplayName' in kwargs:
            identity_app_display_name = kwargs['identityAppDisplayName']
        if 'identityAppGuid' in kwargs:
            identity_app_guid = kwargs['identityAppGuid']
        if 'identityAppOpcServiceInstanceGuid' in kwargs:
            identity_app_opc_service_instance_guid = kwargs['identityAppOpcServiceInstanceGuid']
        if 'identityDomainUrl' in kwargs:
            identity_domain_url = kwargs['identityDomainUrl']
        if 'instanceUrl' in kwargs:
            instance_url = kwargs['instanceUrl']
        if 'isBreakglassEnabled' in kwargs:
            is_breakglass_enabled = kwargs['isBreakglassEnabled']
        if 'meteringType' in kwargs:
            metering_type = kwargs['meteringType']
        if 'shapeName' in kwargs:
            shape_name = kwargs['shapeName']
        if 'systemTags' in kwargs:
            system_tags = kwargs['systemTags']
        if 'timeCreated' in kwargs:
            time_created = kwargs['timeCreated']
        if 'timeUpdated' in kwargs:
            time_updated = kwargs['timeUpdated']

        if attachments is not None:
            _setter("attachments", attachments)
        if compartment_id is not None:
            _setter("compartment_id", compartment_id)
        if consumption_model is not None:
            _setter("consumption_model", consumption_model)
        if defined_tags is not None:
            _setter("defined_tags", defined_tags)
        if description is not None:
            _setter("description", description)
        if display_name is not None:
            _setter("display_name", display_name)
        if freeform_tags is not None:
            _setter("freeform_tags", freeform_tags)
        if idcs_at is not None:
            _setter("idcs_at", idcs_at)
        if identity_app_display_name is not None:
            _setter("identity_app_display_name", identity_app_display_name)
        if identity_app_guid is not None:
            _setter("identity_app_guid", identity_app_guid)
        if identity_app_opc_service_instance_guid is not None:
            _setter("identity_app_opc_service_instance_guid", identity_app_opc_service_instance_guid)
        if identity_domain_url is not None:
            _setter("identity_domain_url", identity_domain_url)
        if instance_url is not None:
            _setter("instance_url", instance_url)
        if is_breakglass_enabled is not None:
            _setter("is_breakglass_enabled", is_breakglass_enabled)
        if metering_type is not None:
            _setter("metering_type", metering_type)
        if shape_name is not None:
            _setter("shape_name", shape_name)
        if state is not None:
            _setter("state", state)
        if system_tags is not None:
            _setter("system_tags", system_tags)
        if time_created is not None:
            _setter("time_created", time_created)
        if time_updated is not None:
            _setter("time_updated", time_updated)

    @property
    @pulumi.getter
    def attachments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OpaInstanceAttachmentArgs']]]]:
        """
        A list of associated attachments to other services
        """
        return pulumi.get(self, "attachments")

    @attachments.setter
    def attachments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OpaInstanceAttachmentArgs']]]]):
        pulumi.set(self, "attachments", value)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Compartment Identifier
        """
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter(name="consumptionModel")
    def consumption_model(self) -> Optional[pulumi.Input[str]]:
        """
        Parameter specifying which entitlement to use for billing purposes
        """
        return pulumi.get(self, "consumption_model")

    @consumption_model.setter
    def consumption_model(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumption_model", value)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @defined_tags.setter
    def defined_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "defined_tags", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Description of the Oracle Process Automation instance.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) OpaInstance Identifier. User-friendly name for the instance. Avoid entering confidential information. You can change this value anytime.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @freeform_tags.setter
    def freeform_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "freeform_tags", value)

    @property
    @pulumi.getter(name="idcsAt")
    def idcs_at(self) -> Optional[pulumi.Input[str]]:
        """
        IDCS Authentication token. This is required for all realms with IDCS. This property is optional, as it is not required for non-IDCS realms.
        """
        return pulumi.get(self, "idcs_at")

    @idcs_at.setter
    def idcs_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idcs_at", value)

    @property
    @pulumi.getter(name="identityAppDisplayName")
    def identity_app_display_name(self) -> Optional[pulumi.Input[str]]:
        """
        This property specifies the name of the Identity Application instance OPA has created inside the user-specified identity domain. This identity application instance may be used to host user roll mappings to grant access to this OPA instance for users within the identity domain.
        """
        return pulumi.get(self, "identity_app_display_name")

    @identity_app_display_name.setter
    def identity_app_display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_app_display_name", value)

    @property
    @pulumi.getter(name="identityAppGuid")
    def identity_app_guid(self) -> Optional[pulumi.Input[str]]:
        """
        This property specifies the GUID of the Identity Application instance OPA has created inside the user-specified identity domain. This identity application instance may be used to host user role mappings to grant access to this OPA instance for users within the identity domain.
        """
        return pulumi.get(self, "identity_app_guid")

    @identity_app_guid.setter
    def identity_app_guid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_app_guid", value)

    @property
    @pulumi.getter(name="identityAppOpcServiceInstanceGuid")
    def identity_app_opc_service_instance_guid(self) -> Optional[pulumi.Input[str]]:
        """
        This property specifies the OPC Service Instance GUID of the Identity Application instance OPA has created inside the user-specified identity domain. This identity application instance may be used to host user roll mappings to grant access to this OPA instance for users within the identity domain.
        """
        return pulumi.get(self, "identity_app_opc_service_instance_guid")

    @identity_app_opc_service_instance_guid.setter
    def identity_app_opc_service_instance_guid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_app_opc_service_instance_guid", value)

    @property
    @pulumi.getter(name="identityDomainUrl")
    def identity_domain_url(self) -> Optional[pulumi.Input[str]]:
        """
        This property specifies the domain url of the Identity Application instance OPA has created inside the user-specified identity domain. This identity application instance may be used to host user roll mappings to grant access to this OPA instance for users within the identity domain.
        """
        return pulumi.get(self, "identity_domain_url")

    @identity_domain_url.setter
    def identity_domain_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_domain_url", value)

    @property
    @pulumi.getter(name="instanceUrl")
    def instance_url(self) -> Optional[pulumi.Input[str]]:
        """
        OPA Instance URL
        """
        return pulumi.get(self, "instance_url")

    @instance_url.setter
    def instance_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_url", value)

    @property
    @pulumi.getter(name="isBreakglassEnabled")
    def is_breakglass_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        indicates if breakGlass is enabled for the opa instance.
        """
        return pulumi.get(self, "is_breakglass_enabled")

    @is_breakglass_enabled.setter
    def is_breakglass_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_breakglass_enabled", value)

    @property
    @pulumi.getter(name="meteringType")
    def metering_type(self) -> Optional[pulumi.Input[str]]:
        """
        MeteringType Identifier
        """
        return pulumi.get(self, "metering_type")

    @metering_type.setter
    def metering_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metering_type", value)

    @property
    @pulumi.getter(name="shapeName")
    def shape_name(self) -> Optional[pulumi.Input[str]]:
        """
        Shape of the instance.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "shape_name")

    @shape_name.setter
    def shape_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shape_name", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        The current state of the OpaInstance.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @system_tags.setter
    def system_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "system_tags", value)

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[pulumi.Input[str]]:
        """
        The time when OpaInstance was created. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_created")

    @time_created.setter
    def time_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_created", value)

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[pulumi.Input[str]]:
        """
        The time the OpaInstance was updated. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_updated")

    @time_updated.setter
    def time_updated(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_updated", value)


class OpaInstance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 consumption_model: Optional[pulumi.Input[str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 idcs_at: Optional[pulumi.Input[str]] = None,
                 is_breakglass_enabled: Optional[pulumi.Input[bool]] = None,
                 metering_type: Optional[pulumi.Input[str]] = None,
                 shape_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        This resource provides the Opa Instance resource in Oracle Cloud Infrastructure Opa service.

        Creates a new OpaInstance.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_oci as oci

        test_opa_instance = oci.opa.OpaInstance("testOpaInstance",
            compartment_id=var["compartment_id"],
            display_name=var["opa_instance_display_name"],
            shape_name=oci_core_shape["test_shape"]["name"],
            consumption_model=var["opa_instance_consumption_model"],
            defined_tags={
                "foo-namespace.bar-key": "value",
            },
            description=var["opa_instance_description"],
            freeform_tags={
                "bar-key": "value",
            },
            idcs_at=var["opa_instance_idcs_at"],
            is_breakglass_enabled=var["opa_instance_is_breakglass_enabled"],
            metering_type=var["opa_instance_metering_type"])
        ```

        ## Import

        OpaInstances can be imported using the `id`, e.g.

        ```sh
         $ pulumi import oci:Opa/opaInstance:OpaInstance test_opa_instance "id"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] compartment_id: (Updatable) Compartment Identifier
        :param pulumi.Input[str] consumption_model: Parameter specifying which entitlement to use for billing purposes
        :param pulumi.Input[Mapping[str, Any]] defined_tags: (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param pulumi.Input[str] description: (Updatable) Description of the Oracle Process Automation instance.
        :param pulumi.Input[str] display_name: (Updatable) OpaInstance Identifier. User-friendly name for the instance. Avoid entering confidential information. You can change this value anytime.
        :param pulumi.Input[Mapping[str, Any]] freeform_tags: (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param pulumi.Input[str] idcs_at: IDCS Authentication token. This is required for all realms with IDCS. This property is optional, as it is not required for non-IDCS realms.
        :param pulumi.Input[bool] is_breakglass_enabled: indicates if breakGlass is enabled for the opa instance.
        :param pulumi.Input[str] metering_type: MeteringType Identifier
        :param pulumi.Input[str] shape_name: Shape of the instance.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: OpaInstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource provides the Opa Instance resource in Oracle Cloud Infrastructure Opa service.

        Creates a new OpaInstance.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_oci as oci

        test_opa_instance = oci.opa.OpaInstance("testOpaInstance",
            compartment_id=var["compartment_id"],
            display_name=var["opa_instance_display_name"],
            shape_name=oci_core_shape["test_shape"]["name"],
            consumption_model=var["opa_instance_consumption_model"],
            defined_tags={
                "foo-namespace.bar-key": "value",
            },
            description=var["opa_instance_description"],
            freeform_tags={
                "bar-key": "value",
            },
            idcs_at=var["opa_instance_idcs_at"],
            is_breakglass_enabled=var["opa_instance_is_breakglass_enabled"],
            metering_type=var["opa_instance_metering_type"])
        ```

        ## Import

        OpaInstances can be imported using the `id`, e.g.

        ```sh
         $ pulumi import oci:Opa/opaInstance:OpaInstance test_opa_instance "id"
        ```

        :param str resource_name: The name of the resource.
        :param OpaInstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OpaInstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            OpaInstanceArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 consumption_model: Optional[pulumi.Input[str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 idcs_at: Optional[pulumi.Input[str]] = None,
                 is_breakglass_enabled: Optional[pulumi.Input[bool]] = None,
                 metering_type: Optional[pulumi.Input[str]] = None,
                 shape_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OpaInstanceArgs.__new__(OpaInstanceArgs)

            if compartment_id is None and not opts.urn:
                raise TypeError("Missing required property 'compartment_id'")
            __props__.__dict__["compartment_id"] = compartment_id
            __props__.__dict__["consumption_model"] = consumption_model
            __props__.__dict__["defined_tags"] = defined_tags
            __props__.__dict__["description"] = description
            if display_name is None and not opts.urn:
                raise TypeError("Missing required property 'display_name'")
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["freeform_tags"] = freeform_tags
            __props__.__dict__["idcs_at"] = idcs_at
            __props__.__dict__["is_breakglass_enabled"] = is_breakglass_enabled
            __props__.__dict__["metering_type"] = metering_type
            if shape_name is None and not opts.urn:
                raise TypeError("Missing required property 'shape_name'")
            __props__.__dict__["shape_name"] = shape_name
            __props__.__dict__["attachments"] = None
            __props__.__dict__["identity_app_display_name"] = None
            __props__.__dict__["identity_app_guid"] = None
            __props__.__dict__["identity_app_opc_service_instance_guid"] = None
            __props__.__dict__["identity_domain_url"] = None
            __props__.__dict__["instance_url"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["system_tags"] = None
            __props__.__dict__["time_created"] = None
            __props__.__dict__["time_updated"] = None
        super(OpaInstance, __self__).__init__(
            'oci:Opa/opaInstance:OpaInstance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            attachments: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OpaInstanceAttachmentArgs']]]]] = None,
            compartment_id: Optional[pulumi.Input[str]] = None,
            consumption_model: Optional[pulumi.Input[str]] = None,
            defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            description: Optional[pulumi.Input[str]] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            idcs_at: Optional[pulumi.Input[str]] = None,
            identity_app_display_name: Optional[pulumi.Input[str]] = None,
            identity_app_guid: Optional[pulumi.Input[str]] = None,
            identity_app_opc_service_instance_guid: Optional[pulumi.Input[str]] = None,
            identity_domain_url: Optional[pulumi.Input[str]] = None,
            instance_url: Optional[pulumi.Input[str]] = None,
            is_breakglass_enabled: Optional[pulumi.Input[bool]] = None,
            metering_type: Optional[pulumi.Input[str]] = None,
            shape_name: Optional[pulumi.Input[str]] = None,
            state: Optional[pulumi.Input[str]] = None,
            system_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            time_created: Optional[pulumi.Input[str]] = None,
            time_updated: Optional[pulumi.Input[str]] = None) -> 'OpaInstance':
        """
        Get an existing OpaInstance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OpaInstanceAttachmentArgs']]]] attachments: A list of associated attachments to other services
        :param pulumi.Input[str] compartment_id: (Updatable) Compartment Identifier
        :param pulumi.Input[str] consumption_model: Parameter specifying which entitlement to use for billing purposes
        :param pulumi.Input[Mapping[str, Any]] defined_tags: (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param pulumi.Input[str] description: (Updatable) Description of the Oracle Process Automation instance.
        :param pulumi.Input[str] display_name: (Updatable) OpaInstance Identifier. User-friendly name for the instance. Avoid entering confidential information. You can change this value anytime.
        :param pulumi.Input[Mapping[str, Any]] freeform_tags: (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param pulumi.Input[str] idcs_at: IDCS Authentication token. This is required for all realms with IDCS. This property is optional, as it is not required for non-IDCS realms.
        :param pulumi.Input[str] identity_app_display_name: This property specifies the name of the Identity Application instance OPA has created inside the user-specified identity domain. This identity application instance may be used to host user roll mappings to grant access to this OPA instance for users within the identity domain.
        :param pulumi.Input[str] identity_app_guid: This property specifies the GUID of the Identity Application instance OPA has created inside the user-specified identity domain. This identity application instance may be used to host user role mappings to grant access to this OPA instance for users within the identity domain.
        :param pulumi.Input[str] identity_app_opc_service_instance_guid: This property specifies the OPC Service Instance GUID of the Identity Application instance OPA has created inside the user-specified identity domain. This identity application instance may be used to host user roll mappings to grant access to this OPA instance for users within the identity domain.
        :param pulumi.Input[str] identity_domain_url: This property specifies the domain url of the Identity Application instance OPA has created inside the user-specified identity domain. This identity application instance may be used to host user roll mappings to grant access to this OPA instance for users within the identity domain.
        :param pulumi.Input[str] instance_url: OPA Instance URL
        :param pulumi.Input[bool] is_breakglass_enabled: indicates if breakGlass is enabled for the opa instance.
        :param pulumi.Input[str] metering_type: MeteringType Identifier
        :param pulumi.Input[str] shape_name: Shape of the instance.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param pulumi.Input[str] state: The current state of the OpaInstance.
        :param pulumi.Input[Mapping[str, Any]] system_tags: Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param pulumi.Input[str] time_created: The time when OpaInstance was created. An RFC3339 formatted datetime string
        :param pulumi.Input[str] time_updated: The time the OpaInstance was updated. An RFC3339 formatted datetime string
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _OpaInstanceState.__new__(_OpaInstanceState)

        __props__.__dict__["attachments"] = attachments
        __props__.__dict__["compartment_id"] = compartment_id
        __props__.__dict__["consumption_model"] = consumption_model
        __props__.__dict__["defined_tags"] = defined_tags
        __props__.__dict__["description"] = description
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["freeform_tags"] = freeform_tags
        __props__.__dict__["idcs_at"] = idcs_at
        __props__.__dict__["identity_app_display_name"] = identity_app_display_name
        __props__.__dict__["identity_app_guid"] = identity_app_guid
        __props__.__dict__["identity_app_opc_service_instance_guid"] = identity_app_opc_service_instance_guid
        __props__.__dict__["identity_domain_url"] = identity_domain_url
        __props__.__dict__["instance_url"] = instance_url
        __props__.__dict__["is_breakglass_enabled"] = is_breakglass_enabled
        __props__.__dict__["metering_type"] = metering_type
        __props__.__dict__["shape_name"] = shape_name
        __props__.__dict__["state"] = state
        __props__.__dict__["system_tags"] = system_tags
        __props__.__dict__["time_created"] = time_created
        __props__.__dict__["time_updated"] = time_updated
        return OpaInstance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def attachments(self) -> pulumi.Output[Sequence['outputs.OpaInstanceAttachment']]:
        """
        A list of associated attachments to other services
        """
        return pulumi.get(self, "attachments")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Output[str]:
        """
        (Updatable) Compartment Identifier
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="consumptionModel")
    def consumption_model(self) -> pulumi.Output[str]:
        """
        Parameter specifying which entitlement to use for billing purposes
        """
        return pulumi.get(self, "consumption_model")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> pulumi.Output[Mapping[str, Any]]:
        """
        (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        (Updatable) Description of the Oracle Process Automation instance.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[str]:
        """
        (Updatable) OpaInstance Identifier. User-friendly name for the instance. Avoid entering confidential information. You can change this value anytime.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> pulumi.Output[Mapping[str, Any]]:
        """
        (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="idcsAt")
    def idcs_at(self) -> pulumi.Output[str]:
        """
        IDCS Authentication token. This is required for all realms with IDCS. This property is optional, as it is not required for non-IDCS realms.
        """
        return pulumi.get(self, "idcs_at")

    @property
    @pulumi.getter(name="identityAppDisplayName")
    def identity_app_display_name(self) -> pulumi.Output[str]:
        """
        This property specifies the name of the Identity Application instance OPA has created inside the user-specified identity domain. This identity application instance may be used to host user roll mappings to grant access to this OPA instance for users within the identity domain.
        """
        return pulumi.get(self, "identity_app_display_name")

    @property
    @pulumi.getter(name="identityAppGuid")
    def identity_app_guid(self) -> pulumi.Output[str]:
        """
        This property specifies the GUID of the Identity Application instance OPA has created inside the user-specified identity domain. This identity application instance may be used to host user role mappings to grant access to this OPA instance for users within the identity domain.
        """
        return pulumi.get(self, "identity_app_guid")

    @property
    @pulumi.getter(name="identityAppOpcServiceInstanceGuid")
    def identity_app_opc_service_instance_guid(self) -> pulumi.Output[str]:
        """
        This property specifies the OPC Service Instance GUID of the Identity Application instance OPA has created inside the user-specified identity domain. This identity application instance may be used to host user roll mappings to grant access to this OPA instance for users within the identity domain.
        """
        return pulumi.get(self, "identity_app_opc_service_instance_guid")

    @property
    @pulumi.getter(name="identityDomainUrl")
    def identity_domain_url(self) -> pulumi.Output[str]:
        """
        This property specifies the domain url of the Identity Application instance OPA has created inside the user-specified identity domain. This identity application instance may be used to host user roll mappings to grant access to this OPA instance for users within the identity domain.
        """
        return pulumi.get(self, "identity_domain_url")

    @property
    @pulumi.getter(name="instanceUrl")
    def instance_url(self) -> pulumi.Output[str]:
        """
        OPA Instance URL
        """
        return pulumi.get(self, "instance_url")

    @property
    @pulumi.getter(name="isBreakglassEnabled")
    def is_breakglass_enabled(self) -> pulumi.Output[bool]:
        """
        indicates if breakGlass is enabled for the opa instance.
        """
        return pulumi.get(self, "is_breakglass_enabled")

    @property
    @pulumi.getter(name="meteringType")
    def metering_type(self) -> pulumi.Output[str]:
        """
        MeteringType Identifier
        """
        return pulumi.get(self, "metering_type")

    @property
    @pulumi.getter(name="shapeName")
    def shape_name(self) -> pulumi.Output[str]:
        """
        Shape of the instance.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "shape_name")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        The current state of the OpaInstance.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> pulumi.Output[Mapping[str, Any]]:
        """
        Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> pulumi.Output[str]:
        """
        The time when OpaInstance was created. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> pulumi.Output[str]:
        """
        The time the OpaInstance was updated. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_updated")

