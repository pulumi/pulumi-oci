# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'DatabaseInsightConnectionCredentialDetailsArgs',
    'DatabaseInsightConnectionCredentialDetailsArgsDict',
    'DatabaseInsightConnectionDetailsArgs',
    'DatabaseInsightConnectionDetailsArgsDict',
    'DatabaseInsightConnectionDetailsHostArgs',
    'DatabaseInsightConnectionDetailsHostArgsDict',
    'DatabaseInsightCredentialDetailsArgs',
    'DatabaseInsightCredentialDetailsArgsDict',
    'ExadataInsightMemberVmClusterDetailArgs',
    'ExadataInsightMemberVmClusterDetailArgsDict',
    'ExadataInsightMemberVmClusterDetailMemberDatabaseDetailArgs',
    'ExadataInsightMemberVmClusterDetailMemberDatabaseDetailArgsDict',
    'ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionCredentialDetailsArgs',
    'ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionCredentialDetailsArgsDict',
    'ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailsArgs',
    'ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailsArgsDict',
    'ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailsHostArgs',
    'ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailsHostArgsDict',
    'ExadataInsightMemberVmClusterDetailMemberDatabaseDetailCredentialDetailsArgs',
    'ExadataInsightMemberVmClusterDetailMemberDatabaseDetailCredentialDetailsArgsDict',
    'NewsReportContentTypesArgs',
    'NewsReportContentTypesArgsDict',
    'OpsiConfigurationConfigItemArgs',
    'OpsiConfigurationConfigItemArgsDict',
    'OpsiConfigurationConfigItemMetadataArgs',
    'OpsiConfigurationConfigItemMetadataArgsDict',
    'OpsiConfigurationConfigItemMetadataUnitDetailArgs',
    'OpsiConfigurationConfigItemMetadataUnitDetailArgsDict',
    'OpsiConfigurationConfigItemMetadataValueInputDetailArgs',
    'OpsiConfigurationConfigItemMetadataValueInputDetailArgsDict',
    'GetAwrHubAwrSnapshotsFilterArgs',
    'GetAwrHubAwrSnapshotsFilterArgsDict',
    'GetAwrHubSourcesFilterArgs',
    'GetAwrHubSourcesFilterArgsDict',
    'GetAwrHubsFilterArgs',
    'GetAwrHubsFilterArgsDict',
    'GetDatabaseInsightsFilterArgs',
    'GetDatabaseInsightsFilterArgsDict',
    'GetEnterpriseManagerBridgesFilterArgs',
    'GetEnterpriseManagerBridgesFilterArgsDict',
    'GetExadataInsightsFilterArgs',
    'GetExadataInsightsFilterArgsDict',
    'GetHostInsightsFilterArgs',
    'GetHostInsightsFilterArgsDict',
    'GetNewsReportsFilterArgs',
    'GetNewsReportsFilterArgsDict',
    'GetOperationsInsightsPrivateEndpointsFilterArgs',
    'GetOperationsInsightsPrivateEndpointsFilterArgsDict',
    'GetOperationsInsightsWarehouseUsersFilterArgs',
    'GetOperationsInsightsWarehouseUsersFilterArgsDict',
    'GetOperationsInsightsWarehousesFilterArgs',
    'GetOperationsInsightsWarehousesFilterArgsDict',
    'GetOpsiConfigurationsFilterArgs',
    'GetOpsiConfigurationsFilterArgsDict',
]

MYPY = False

if not MYPY:
    class DatabaseInsightConnectionCredentialDetailsArgsDict(TypedDict):
        credential_type: pulumi.Input[str]
        """
        Credential type.
        """
        credential_source_name: NotRequired[pulumi.Input[str]]
        """
        Credential source name that had been added in Management Agent wallet. This is supplied in the External Database Service.
        """
        password_secret_id: NotRequired[pulumi.Input[str]]
        """
        The secret [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) mapping to the database credentials.
        """
        role: NotRequired[pulumi.Input[str]]
        """
        database user role.
        """
        user_name: NotRequired[pulumi.Input[str]]
        """
        database user name.
        """
elif False:
    DatabaseInsightConnectionCredentialDetailsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DatabaseInsightConnectionCredentialDetailsArgs:
    def __init__(__self__, *,
                 credential_type: pulumi.Input[str],
                 credential_source_name: Optional[pulumi.Input[str]] = None,
                 password_secret_id: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 user_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] credential_type: Credential type.
        :param pulumi.Input[str] credential_source_name: Credential source name that had been added in Management Agent wallet. This is supplied in the External Database Service.
        :param pulumi.Input[str] password_secret_id: The secret [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) mapping to the database credentials.
        :param pulumi.Input[str] role: database user role.
        :param pulumi.Input[str] user_name: database user name.
        """
        pulumi.set(__self__, "credential_type", credential_type)
        if credential_source_name is not None:
            pulumi.set(__self__, "credential_source_name", credential_source_name)
        if password_secret_id is not None:
            pulumi.set(__self__, "password_secret_id", password_secret_id)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> pulumi.Input[str]:
        """
        Credential type.
        """
        return pulumi.get(self, "credential_type")

    @credential_type.setter
    def credential_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "credential_type", value)

    @property
    @pulumi.getter(name="credentialSourceName")
    def credential_source_name(self) -> Optional[pulumi.Input[str]]:
        """
        Credential source name that had been added in Management Agent wallet. This is supplied in the External Database Service.
        """
        return pulumi.get(self, "credential_source_name")

    @credential_source_name.setter
    def credential_source_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "credential_source_name", value)

    @property
    @pulumi.getter(name="passwordSecretId")
    def password_secret_id(self) -> Optional[pulumi.Input[str]]:
        """
        The secret [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) mapping to the database credentials.
        """
        return pulumi.get(self, "password_secret_id")

    @password_secret_id.setter
    def password_secret_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password_secret_id", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        database user role.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[str]]:
        """
        database user name.
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_name", value)


if not MYPY:
    class DatabaseInsightConnectionDetailsArgsDict(TypedDict):
        host_name: NotRequired[pulumi.Input[str]]
        """
        Name of the listener host that will be used to create the connect string to the database.
        """
        hosts: NotRequired[pulumi.Input[Sequence[pulumi.Input['DatabaseInsightConnectionDetailsHostArgsDict']]]]
        """
        List of hosts and port for private endpoint accessed database resource.
        """
        port: NotRequired[pulumi.Input[int]]
        """
        Listener port number used for connection requests.
        """
        protocol: NotRequired[pulumi.Input[str]]
        """
        Protocol used for connection requests for private endpoint accssed database resource.
        """
        service_name: NotRequired[pulumi.Input[str]]
        """
        Database service name used for connection requests.
        """
elif False:
    DatabaseInsightConnectionDetailsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DatabaseInsightConnectionDetailsArgs:
    def __init__(__self__, *,
                 host_name: Optional[pulumi.Input[str]] = None,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input['DatabaseInsightConnectionDetailsHostArgs']]]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 service_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] host_name: Name of the listener host that will be used to create the connect string to the database.
        :param pulumi.Input[Sequence[pulumi.Input['DatabaseInsightConnectionDetailsHostArgs']]] hosts: List of hosts and port for private endpoint accessed database resource.
        :param pulumi.Input[int] port: Listener port number used for connection requests.
        :param pulumi.Input[str] protocol: Protocol used for connection requests for private endpoint accssed database resource.
        :param pulumi.Input[str] service_name: Database service name used for connection requests.
        """
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the listener host that will be used to create the connect string to the database.
        """
        return pulumi.get(self, "host_name")

    @host_name.setter
    def host_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_name", value)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatabaseInsightConnectionDetailsHostArgs']]]]:
        """
        List of hosts and port for private endpoint accessed database resource.
        """
        return pulumi.get(self, "hosts")

    @hosts.setter
    def hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatabaseInsightConnectionDetailsHostArgs']]]]):
        pulumi.set(self, "hosts", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Listener port number used for connection requests.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol used for connection requests for private endpoint accssed database resource.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[pulumi.Input[str]]:
        """
        Database service name used for connection requests.
        """
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_name", value)


if not MYPY:
    class DatabaseInsightConnectionDetailsHostArgsDict(TypedDict):
        host_ip: NotRequired[pulumi.Input[str]]
        """
        Host IP used for connection requests for Cloud DB resource.
        """
        port: NotRequired[pulumi.Input[int]]
        """
        Listener port number used for connection requests for rivate endpoint accessed db resource.
        """
elif False:
    DatabaseInsightConnectionDetailsHostArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DatabaseInsightConnectionDetailsHostArgs:
    def __init__(__self__, *,
                 host_ip: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] host_ip: Host IP used for connection requests for Cloud DB resource.
        :param pulumi.Input[int] port: Listener port number used for connection requests for rivate endpoint accessed db resource.
        """
        if host_ip is not None:
            pulumi.set(__self__, "host_ip", host_ip)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="hostIp")
    def host_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Host IP used for connection requests for Cloud DB resource.
        """
        return pulumi.get(self, "host_ip")

    @host_ip.setter
    def host_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_ip", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Listener port number used for connection requests for rivate endpoint accessed db resource.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)


if not MYPY:
    class DatabaseInsightCredentialDetailsArgsDict(TypedDict):
        credential_type: pulumi.Input[str]
        """
        Credential type.
        """
        credential_source_name: NotRequired[pulumi.Input[str]]
        """
        Credential source name that had been added in Management Agent wallet. This is supplied in the External Database Service.
        """
        password_secret_id: NotRequired[pulumi.Input[str]]
        """
        The secret [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) mapping to the database credentials.
        """
        role: NotRequired[pulumi.Input[str]]
        """
        database user role.
        """
        user_name: NotRequired[pulumi.Input[str]]
        """
        database user name.
        """
        wallet_secret_id: NotRequired[pulumi.Input[str]]
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the database keystore contents are stored. This is used for TCPS support in BM/VM/ExaCS cases.
        """
elif False:
    DatabaseInsightCredentialDetailsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DatabaseInsightCredentialDetailsArgs:
    def __init__(__self__, *,
                 credential_type: pulumi.Input[str],
                 credential_source_name: Optional[pulumi.Input[str]] = None,
                 password_secret_id: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 user_name: Optional[pulumi.Input[str]] = None,
                 wallet_secret_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] credential_type: Credential type.
        :param pulumi.Input[str] credential_source_name: Credential source name that had been added in Management Agent wallet. This is supplied in the External Database Service.
        :param pulumi.Input[str] password_secret_id: The secret [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) mapping to the database credentials.
        :param pulumi.Input[str] role: database user role.
        :param pulumi.Input[str] user_name: database user name.
        :param pulumi.Input[str] wallet_secret_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the database keystore contents are stored. This is used for TCPS support in BM/VM/ExaCS cases.
        """
        pulumi.set(__self__, "credential_type", credential_type)
        if credential_source_name is not None:
            pulumi.set(__self__, "credential_source_name", credential_source_name)
        if password_secret_id is not None:
            pulumi.set(__self__, "password_secret_id", password_secret_id)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if wallet_secret_id is not None:
            pulumi.set(__self__, "wallet_secret_id", wallet_secret_id)

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> pulumi.Input[str]:
        """
        Credential type.
        """
        return pulumi.get(self, "credential_type")

    @credential_type.setter
    def credential_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "credential_type", value)

    @property
    @pulumi.getter(name="credentialSourceName")
    def credential_source_name(self) -> Optional[pulumi.Input[str]]:
        """
        Credential source name that had been added in Management Agent wallet. This is supplied in the External Database Service.
        """
        return pulumi.get(self, "credential_source_name")

    @credential_source_name.setter
    def credential_source_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "credential_source_name", value)

    @property
    @pulumi.getter(name="passwordSecretId")
    def password_secret_id(self) -> Optional[pulumi.Input[str]]:
        """
        The secret [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) mapping to the database credentials.
        """
        return pulumi.get(self, "password_secret_id")

    @password_secret_id.setter
    def password_secret_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password_secret_id", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        database user role.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[str]]:
        """
        database user name.
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_name", value)

    @property
    @pulumi.getter(name="walletSecretId")
    def wallet_secret_id(self) -> Optional[pulumi.Input[str]]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the database keystore contents are stored. This is used for TCPS support in BM/VM/ExaCS cases.
        """
        return pulumi.get(self, "wallet_secret_id")

    @wallet_secret_id.setter
    def wallet_secret_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wallet_secret_id", value)


if not MYPY:
    class ExadataInsightMemberVmClusterDetailArgsDict(TypedDict):
        compartment_id: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        dbm_private_endpoint_id: NotRequired[pulumi.Input[str]]
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Management private endpoint
        """
        member_database_details: NotRequired[pulumi.Input[Sequence[pulumi.Input['ExadataInsightMemberVmClusterDetailMemberDatabaseDetailArgsDict']]]]
        """
        The databases that belong to the VM Cluster
        """
        opsi_private_endpoint_id: NotRequired[pulumi.Input[str]]
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the OPSI private endpoint
        """
        vm_cluster_type: NotRequired[pulumi.Input[str]]
        """
        Exadata VMCluster type
        """
        vmcluster_id: NotRequired[pulumi.Input[str]]
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VM Cluster.
        """
elif False:
    ExadataInsightMemberVmClusterDetailArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExadataInsightMemberVmClusterDetailArgs:
    def __init__(__self__, *,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 dbm_private_endpoint_id: Optional[pulumi.Input[str]] = None,
                 member_database_details: Optional[pulumi.Input[Sequence[pulumi.Input['ExadataInsightMemberVmClusterDetailMemberDatabaseDetailArgs']]]] = None,
                 opsi_private_endpoint_id: Optional[pulumi.Input[str]] = None,
                 vm_cluster_type: Optional[pulumi.Input[str]] = None,
                 vmcluster_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] compartment_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param pulumi.Input[str] dbm_private_endpoint_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Management private endpoint
        :param pulumi.Input[Sequence[pulumi.Input['ExadataInsightMemberVmClusterDetailMemberDatabaseDetailArgs']]] member_database_details: The databases that belong to the VM Cluster
        :param pulumi.Input[str] opsi_private_endpoint_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the OPSI private endpoint
        :param pulumi.Input[str] vm_cluster_type: Exadata VMCluster type
        :param pulumi.Input[str] vmcluster_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VM Cluster.
        """
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if dbm_private_endpoint_id is not None:
            pulumi.set(__self__, "dbm_private_endpoint_id", dbm_private_endpoint_id)
        if member_database_details is not None:
            pulumi.set(__self__, "member_database_details", member_database_details)
        if opsi_private_endpoint_id is not None:
            pulumi.set(__self__, "opsi_private_endpoint_id", opsi_private_endpoint_id)
        if vm_cluster_type is not None:
            pulumi.set(__self__, "vm_cluster_type", vm_cluster_type)
        if vmcluster_id is not None:
            pulumi.set(__self__, "vmcluster_id", vmcluster_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter(name="dbmPrivateEndpointId")
    def dbm_private_endpoint_id(self) -> Optional[pulumi.Input[str]]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Management private endpoint
        """
        return pulumi.get(self, "dbm_private_endpoint_id")

    @dbm_private_endpoint_id.setter
    def dbm_private_endpoint_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dbm_private_endpoint_id", value)

    @property
    @pulumi.getter(name="memberDatabaseDetails")
    def member_database_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ExadataInsightMemberVmClusterDetailMemberDatabaseDetailArgs']]]]:
        """
        The databases that belong to the VM Cluster
        """
        return pulumi.get(self, "member_database_details")

    @member_database_details.setter
    def member_database_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ExadataInsightMemberVmClusterDetailMemberDatabaseDetailArgs']]]]):
        pulumi.set(self, "member_database_details", value)

    @property
    @pulumi.getter(name="opsiPrivateEndpointId")
    def opsi_private_endpoint_id(self) -> Optional[pulumi.Input[str]]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the OPSI private endpoint
        """
        return pulumi.get(self, "opsi_private_endpoint_id")

    @opsi_private_endpoint_id.setter
    def opsi_private_endpoint_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "opsi_private_endpoint_id", value)

    @property
    @pulumi.getter(name="vmClusterType")
    def vm_cluster_type(self) -> Optional[pulumi.Input[str]]:
        """
        Exadata VMCluster type
        """
        return pulumi.get(self, "vm_cluster_type")

    @vm_cluster_type.setter
    def vm_cluster_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vm_cluster_type", value)

    @property
    @pulumi.getter(name="vmclusterId")
    def vmcluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VM Cluster.
        """
        return pulumi.get(self, "vmcluster_id")

    @vmcluster_id.setter
    def vmcluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vmcluster_id", value)


if not MYPY:
    class ExadataInsightMemberVmClusterDetailMemberDatabaseDetailArgsDict(TypedDict):
        compartment_id: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Compartment Identifier of database
        """
        connection_credential_details: NotRequired[pulumi.Input['ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionCredentialDetailsArgsDict']]
        """
        User credential details to connect to the database.
        """
        connection_details: NotRequired[pulumi.Input['ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailsArgsDict']]
        """
        Connection details to connect to the database. HostName, protocol, and port should be specified.
        """
        credential_details: NotRequired[pulumi.Input['ExadataInsightMemberVmClusterDetailMemberDatabaseDetailCredentialDetailsArgsDict']]
        """
        User credential details to connect to the database.
        """
        database_id: NotRequired[pulumi.Input[str]]
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database.
        """
        database_resource_type: NotRequired[pulumi.Input[str]]
        """
        Oracle Cloud Infrastructure database resource type
        """
        dbm_private_endpoint_id: NotRequired[pulumi.Input[str]]
        defined_tags: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        deployment_type: NotRequired[pulumi.Input[str]]
        """
        Database Deployment Type (EXACS will be supported in the future)
        """
        entity_source: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Source of the Exadata system.
        """
        freeform_tags: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        management_agent_id: NotRequired[pulumi.Input[str]]
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Management Agent
        """
        opsi_private_endpoint_id: NotRequired[pulumi.Input[str]]
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the OPSI private endpoint
        """
        service_name: NotRequired[pulumi.Input[str]]
        system_tags: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
elif False:
    ExadataInsightMemberVmClusterDetailMemberDatabaseDetailArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExadataInsightMemberVmClusterDetailMemberDatabaseDetailArgs:
    def __init__(__self__, *,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 connection_credential_details: Optional[pulumi.Input['ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionCredentialDetailsArgs']] = None,
                 connection_details: Optional[pulumi.Input['ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailsArgs']] = None,
                 credential_details: Optional[pulumi.Input['ExadataInsightMemberVmClusterDetailMemberDatabaseDetailCredentialDetailsArgs']] = None,
                 database_id: Optional[pulumi.Input[str]] = None,
                 database_resource_type: Optional[pulumi.Input[str]] = None,
                 dbm_private_endpoint_id: Optional[pulumi.Input[str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 deployment_type: Optional[pulumi.Input[str]] = None,
                 entity_source: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 management_agent_id: Optional[pulumi.Input[str]] = None,
                 opsi_private_endpoint_id: Optional[pulumi.Input[str]] = None,
                 service_name: Optional[pulumi.Input[str]] = None,
                 system_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] compartment_id: (Updatable) Compartment Identifier of database
        :param pulumi.Input['ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionCredentialDetailsArgs'] connection_credential_details: User credential details to connect to the database.
        :param pulumi.Input['ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailsArgs'] connection_details: Connection details to connect to the database. HostName, protocol, and port should be specified.
        :param pulumi.Input['ExadataInsightMemberVmClusterDetailMemberDatabaseDetailCredentialDetailsArgs'] credential_details: User credential details to connect to the database.
        :param pulumi.Input[str] database_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database.
        :param pulumi.Input[str] database_resource_type: Oracle Cloud Infrastructure database resource type
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] defined_tags: (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param pulumi.Input[str] deployment_type: Database Deployment Type (EXACS will be supported in the future)
        :param pulumi.Input[str] entity_source: (Updatable) Source of the Exadata system.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] freeform_tags: (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param pulumi.Input[str] management_agent_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Management Agent
        :param pulumi.Input[str] opsi_private_endpoint_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the OPSI private endpoint
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if connection_credential_details is not None:
            pulumi.set(__self__, "connection_credential_details", connection_credential_details)
        if connection_details is not None:
            pulumi.set(__self__, "connection_details", connection_details)
        if credential_details is not None:
            pulumi.set(__self__, "credential_details", credential_details)
        if database_id is not None:
            pulumi.set(__self__, "database_id", database_id)
        if database_resource_type is not None:
            pulumi.set(__self__, "database_resource_type", database_resource_type)
        if dbm_private_endpoint_id is not None:
            pulumi.set(__self__, "dbm_private_endpoint_id", dbm_private_endpoint_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if deployment_type is not None:
            pulumi.set(__self__, "deployment_type", deployment_type)
        if entity_source is not None:
            pulumi.set(__self__, "entity_source", entity_source)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if management_agent_id is not None:
            pulumi.set(__self__, "management_agent_id", management_agent_id)
        if opsi_private_endpoint_id is not None:
            pulumi.set(__self__, "opsi_private_endpoint_id", opsi_private_endpoint_id)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Compartment Identifier of database
        """
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter(name="connectionCredentialDetails")
    def connection_credential_details(self) -> Optional[pulumi.Input['ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionCredentialDetailsArgs']]:
        """
        User credential details to connect to the database.
        """
        return pulumi.get(self, "connection_credential_details")

    @connection_credential_details.setter
    def connection_credential_details(self, value: Optional[pulumi.Input['ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionCredentialDetailsArgs']]):
        pulumi.set(self, "connection_credential_details", value)

    @property
    @pulumi.getter(name="connectionDetails")
    def connection_details(self) -> Optional[pulumi.Input['ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailsArgs']]:
        """
        Connection details to connect to the database. HostName, protocol, and port should be specified.
        """
        return pulumi.get(self, "connection_details")

    @connection_details.setter
    def connection_details(self, value: Optional[pulumi.Input['ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailsArgs']]):
        pulumi.set(self, "connection_details", value)

    @property
    @pulumi.getter(name="credentialDetails")
    def credential_details(self) -> Optional[pulumi.Input['ExadataInsightMemberVmClusterDetailMemberDatabaseDetailCredentialDetailsArgs']]:
        """
        User credential details to connect to the database.
        """
        return pulumi.get(self, "credential_details")

    @credential_details.setter
    def credential_details(self, value: Optional[pulumi.Input['ExadataInsightMemberVmClusterDetailMemberDatabaseDetailCredentialDetailsArgs']]):
        pulumi.set(self, "credential_details", value)

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> Optional[pulumi.Input[str]]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database.
        """
        return pulumi.get(self, "database_id")

    @database_id.setter
    def database_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_id", value)

    @property
    @pulumi.getter(name="databaseResourceType")
    def database_resource_type(self) -> Optional[pulumi.Input[str]]:
        """
        Oracle Cloud Infrastructure database resource type
        """
        return pulumi.get(self, "database_resource_type")

    @database_resource_type.setter
    def database_resource_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_resource_type", value)

    @property
    @pulumi.getter(name="dbmPrivateEndpointId")
    def dbm_private_endpoint_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dbm_private_endpoint_id")

    @dbm_private_endpoint_id.setter
    def dbm_private_endpoint_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dbm_private_endpoint_id", value)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @defined_tags.setter
    def defined_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "defined_tags", value)

    @property
    @pulumi.getter(name="deploymentType")
    def deployment_type(self) -> Optional[pulumi.Input[str]]:
        """
        Database Deployment Type (EXACS will be supported in the future)
        """
        return pulumi.get(self, "deployment_type")

    @deployment_type.setter
    def deployment_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deployment_type", value)

    @property
    @pulumi.getter(name="entitySource")
    def entity_source(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Source of the Exadata system.
        """
        return pulumi.get(self, "entity_source")

    @entity_source.setter
    def entity_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_source", value)

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @freeform_tags.setter
    def freeform_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "freeform_tags", value)

    @property
    @pulumi.getter(name="managementAgentId")
    def management_agent_id(self) -> Optional[pulumi.Input[str]]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Management Agent
        """
        return pulumi.get(self, "management_agent_id")

    @management_agent_id.setter
    def management_agent_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "management_agent_id", value)

    @property
    @pulumi.getter(name="opsiPrivateEndpointId")
    def opsi_private_endpoint_id(self) -> Optional[pulumi.Input[str]]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the OPSI private endpoint
        """
        return pulumi.get(self, "opsi_private_endpoint_id")

    @opsi_private_endpoint_id.setter
    def opsi_private_endpoint_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "opsi_private_endpoint_id", value)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_name", value)

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @system_tags.setter
    def system_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "system_tags", value)


if not MYPY:
    class ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionCredentialDetailsArgsDict(TypedDict):
        credential_type: pulumi.Input[str]
        """
        Credential type.
        """
        credential_source_name: NotRequired[pulumi.Input[str]]
        """
        Credential source name that had been added in Management Agent wallet. This is supplied in the External Database Service.
        """
        password_secret_id: NotRequired[pulumi.Input[str]]
        """
        The secret [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) mapping to the database credentials.
        """
        role: NotRequired[pulumi.Input[str]]
        """
        database user role.
        """
        user_name: NotRequired[pulumi.Input[str]]
        """
        database user name.
        """
        wallet_secret_id: NotRequired[pulumi.Input[str]]
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the database keystore contents are stored. This is used for TCPS support in BM/VM/ExaCS cases.
        """
elif False:
    ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionCredentialDetailsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionCredentialDetailsArgs:
    def __init__(__self__, *,
                 credential_type: pulumi.Input[str],
                 credential_source_name: Optional[pulumi.Input[str]] = None,
                 password_secret_id: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 user_name: Optional[pulumi.Input[str]] = None,
                 wallet_secret_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] credential_type: Credential type.
        :param pulumi.Input[str] credential_source_name: Credential source name that had been added in Management Agent wallet. This is supplied in the External Database Service.
        :param pulumi.Input[str] password_secret_id: The secret [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) mapping to the database credentials.
        :param pulumi.Input[str] role: database user role.
        :param pulumi.Input[str] user_name: database user name.
        :param pulumi.Input[str] wallet_secret_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the database keystore contents are stored. This is used for TCPS support in BM/VM/ExaCS cases.
        """
        pulumi.set(__self__, "credential_type", credential_type)
        if credential_source_name is not None:
            pulumi.set(__self__, "credential_source_name", credential_source_name)
        if password_secret_id is not None:
            pulumi.set(__self__, "password_secret_id", password_secret_id)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if wallet_secret_id is not None:
            pulumi.set(__self__, "wallet_secret_id", wallet_secret_id)

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> pulumi.Input[str]:
        """
        Credential type.
        """
        return pulumi.get(self, "credential_type")

    @credential_type.setter
    def credential_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "credential_type", value)

    @property
    @pulumi.getter(name="credentialSourceName")
    def credential_source_name(self) -> Optional[pulumi.Input[str]]:
        """
        Credential source name that had been added in Management Agent wallet. This is supplied in the External Database Service.
        """
        return pulumi.get(self, "credential_source_name")

    @credential_source_name.setter
    def credential_source_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "credential_source_name", value)

    @property
    @pulumi.getter(name="passwordSecretId")
    def password_secret_id(self) -> Optional[pulumi.Input[str]]:
        """
        The secret [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) mapping to the database credentials.
        """
        return pulumi.get(self, "password_secret_id")

    @password_secret_id.setter
    def password_secret_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password_secret_id", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        database user role.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[str]]:
        """
        database user name.
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_name", value)

    @property
    @pulumi.getter(name="walletSecretId")
    def wallet_secret_id(self) -> Optional[pulumi.Input[str]]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the database keystore contents are stored. This is used for TCPS support in BM/VM/ExaCS cases.
        """
        return pulumi.get(self, "wallet_secret_id")

    @wallet_secret_id.setter
    def wallet_secret_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wallet_secret_id", value)


if not MYPY:
    class ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailsArgsDict(TypedDict):
        host_name: NotRequired[pulumi.Input[str]]
        """
        Name of the listener host that will be used to create the connect string to the database.
        """
        hosts: NotRequired[pulumi.Input[Sequence[pulumi.Input['ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailsHostArgsDict']]]]
        """
        List of hosts and port for private endpoint accessed database resource.
        """
        port: NotRequired[pulumi.Input[int]]
        """
        Listener port number used for connection requests.
        """
        protocol: NotRequired[pulumi.Input[str]]
        """
        Protocol used for connection requests for private endpoint accssed database resource.
        """
        service_name: NotRequired[pulumi.Input[str]]
        """
        Database service name used for connection requests.
        """
elif False:
    ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailsArgs:
    def __init__(__self__, *,
                 host_name: Optional[pulumi.Input[str]] = None,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input['ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailsHostArgs']]]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 service_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] host_name: Name of the listener host that will be used to create the connect string to the database.
        :param pulumi.Input[Sequence[pulumi.Input['ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailsHostArgs']]] hosts: List of hosts and port for private endpoint accessed database resource.
        :param pulumi.Input[int] port: Listener port number used for connection requests.
        :param pulumi.Input[str] protocol: Protocol used for connection requests for private endpoint accssed database resource.
        :param pulumi.Input[str] service_name: Database service name used for connection requests.
        """
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the listener host that will be used to create the connect string to the database.
        """
        return pulumi.get(self, "host_name")

    @host_name.setter
    def host_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_name", value)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailsHostArgs']]]]:
        """
        List of hosts and port for private endpoint accessed database resource.
        """
        return pulumi.get(self, "hosts")

    @hosts.setter
    def hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailsHostArgs']]]]):
        pulumi.set(self, "hosts", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Listener port number used for connection requests.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol used for connection requests for private endpoint accssed database resource.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[pulumi.Input[str]]:
        """
        Database service name used for connection requests.
        """
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_name", value)


if not MYPY:
    class ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailsHostArgsDict(TypedDict):
        host_ip: NotRequired[pulumi.Input[str]]
        """
        Host IP used for connection requests for Cloud DB resource.
        """
        port: NotRequired[pulumi.Input[int]]
        """
        Listener port number used for connection requests for rivate endpoint accessed db resource.
        """
elif False:
    ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailsHostArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailsHostArgs:
    def __init__(__self__, *,
                 host_ip: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] host_ip: Host IP used for connection requests for Cloud DB resource.
        :param pulumi.Input[int] port: Listener port number used for connection requests for rivate endpoint accessed db resource.
        """
        if host_ip is not None:
            pulumi.set(__self__, "host_ip", host_ip)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="hostIp")
    def host_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Host IP used for connection requests for Cloud DB resource.
        """
        return pulumi.get(self, "host_ip")

    @host_ip.setter
    def host_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_ip", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Listener port number used for connection requests for rivate endpoint accessed db resource.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)


if not MYPY:
    class ExadataInsightMemberVmClusterDetailMemberDatabaseDetailCredentialDetailsArgsDict(TypedDict):
        credential_type: pulumi.Input[str]
        credential_source_name: NotRequired[pulumi.Input[str]]
        password_secret_id: NotRequired[pulumi.Input[str]]
        role: NotRequired[pulumi.Input[str]]
        user_name: NotRequired[pulumi.Input[str]]
        wallet_secret_id: NotRequired[pulumi.Input[str]]
elif False:
    ExadataInsightMemberVmClusterDetailMemberDatabaseDetailCredentialDetailsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExadataInsightMemberVmClusterDetailMemberDatabaseDetailCredentialDetailsArgs:
    def __init__(__self__, *,
                 credential_type: pulumi.Input[str],
                 credential_source_name: Optional[pulumi.Input[str]] = None,
                 password_secret_id: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 user_name: Optional[pulumi.Input[str]] = None,
                 wallet_secret_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "credential_type", credential_type)
        if credential_source_name is not None:
            pulumi.set(__self__, "credential_source_name", credential_source_name)
        if password_secret_id is not None:
            pulumi.set(__self__, "password_secret_id", password_secret_id)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if wallet_secret_id is not None:
            pulumi.set(__self__, "wallet_secret_id", wallet_secret_id)

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "credential_type")

    @credential_type.setter
    def credential_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "credential_type", value)

    @property
    @pulumi.getter(name="credentialSourceName")
    def credential_source_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "credential_source_name")

    @credential_source_name.setter
    def credential_source_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "credential_source_name", value)

    @property
    @pulumi.getter(name="passwordSecretId")
    def password_secret_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password_secret_id")

    @password_secret_id.setter
    def password_secret_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password_secret_id", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_name", value)

    @property
    @pulumi.getter(name="walletSecretId")
    def wallet_secret_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wallet_secret_id")

    @wallet_secret_id.setter
    def wallet_secret_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wallet_secret_id", value)


if not MYPY:
    class NewsReportContentTypesArgsDict(TypedDict):
        capacity_planning_resources: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        (Updatable) Supported resources for capacity planning content type.
        """
        sql_insights_fleet_analysis_resources: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        (Updatable) Supported resources for SQL insights - fleet analysis content type.
        """
        sql_insights_performance_degradation_resources: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        (Updatable) Supported resources for SQL insights - performance degradation content type.
        """
        sql_insights_plan_changes_resources: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        (Updatable) Supported resources for SQL insights - plan changes content type.
        """
        sql_insights_top_databases_resources: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        (Updatable) Supported resources for SQL insights - top databases content type.
        """
        sql_insights_top_sql_by_insights_resources: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        (Updatable) Supported resources for SQL insights - top SQL by insights content type.
        """
        sql_insights_top_sql_resources: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        (Updatable) Supported resources for SQL insights - top SQL content type.
        """
elif False:
    NewsReportContentTypesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NewsReportContentTypesArgs:
    def __init__(__self__, *,
                 capacity_planning_resources: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 sql_insights_fleet_analysis_resources: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 sql_insights_performance_degradation_resources: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 sql_insights_plan_changes_resources: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 sql_insights_top_databases_resources: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 sql_insights_top_sql_by_insights_resources: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 sql_insights_top_sql_resources: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] capacity_planning_resources: (Updatable) Supported resources for capacity planning content type.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sql_insights_fleet_analysis_resources: (Updatable) Supported resources for SQL insights - fleet analysis content type.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sql_insights_performance_degradation_resources: (Updatable) Supported resources for SQL insights - performance degradation content type.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sql_insights_plan_changes_resources: (Updatable) Supported resources for SQL insights - plan changes content type.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sql_insights_top_databases_resources: (Updatable) Supported resources for SQL insights - top databases content type.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sql_insights_top_sql_by_insights_resources: (Updatable) Supported resources for SQL insights - top SQL by insights content type.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sql_insights_top_sql_resources: (Updatable) Supported resources for SQL insights - top SQL content type.
        """
        if capacity_planning_resources is not None:
            pulumi.set(__self__, "capacity_planning_resources", capacity_planning_resources)
        if sql_insights_fleet_analysis_resources is not None:
            pulumi.set(__self__, "sql_insights_fleet_analysis_resources", sql_insights_fleet_analysis_resources)
        if sql_insights_performance_degradation_resources is not None:
            pulumi.set(__self__, "sql_insights_performance_degradation_resources", sql_insights_performance_degradation_resources)
        if sql_insights_plan_changes_resources is not None:
            pulumi.set(__self__, "sql_insights_plan_changes_resources", sql_insights_plan_changes_resources)
        if sql_insights_top_databases_resources is not None:
            pulumi.set(__self__, "sql_insights_top_databases_resources", sql_insights_top_databases_resources)
        if sql_insights_top_sql_by_insights_resources is not None:
            pulumi.set(__self__, "sql_insights_top_sql_by_insights_resources", sql_insights_top_sql_by_insights_resources)
        if sql_insights_top_sql_resources is not None:
            pulumi.set(__self__, "sql_insights_top_sql_resources", sql_insights_top_sql_resources)

    @property
    @pulumi.getter(name="capacityPlanningResources")
    def capacity_planning_resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) Supported resources for capacity planning content type.
        """
        return pulumi.get(self, "capacity_planning_resources")

    @capacity_planning_resources.setter
    def capacity_planning_resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "capacity_planning_resources", value)

    @property
    @pulumi.getter(name="sqlInsightsFleetAnalysisResources")
    def sql_insights_fleet_analysis_resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) Supported resources for SQL insights - fleet analysis content type.
        """
        return pulumi.get(self, "sql_insights_fleet_analysis_resources")

    @sql_insights_fleet_analysis_resources.setter
    def sql_insights_fleet_analysis_resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "sql_insights_fleet_analysis_resources", value)

    @property
    @pulumi.getter(name="sqlInsightsPerformanceDegradationResources")
    def sql_insights_performance_degradation_resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) Supported resources for SQL insights - performance degradation content type.
        """
        return pulumi.get(self, "sql_insights_performance_degradation_resources")

    @sql_insights_performance_degradation_resources.setter
    def sql_insights_performance_degradation_resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "sql_insights_performance_degradation_resources", value)

    @property
    @pulumi.getter(name="sqlInsightsPlanChangesResources")
    def sql_insights_plan_changes_resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) Supported resources for SQL insights - plan changes content type.
        """
        return pulumi.get(self, "sql_insights_plan_changes_resources")

    @sql_insights_plan_changes_resources.setter
    def sql_insights_plan_changes_resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "sql_insights_plan_changes_resources", value)

    @property
    @pulumi.getter(name="sqlInsightsTopDatabasesResources")
    def sql_insights_top_databases_resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) Supported resources for SQL insights - top databases content type.
        """
        return pulumi.get(self, "sql_insights_top_databases_resources")

    @sql_insights_top_databases_resources.setter
    def sql_insights_top_databases_resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "sql_insights_top_databases_resources", value)

    @property
    @pulumi.getter(name="sqlInsightsTopSqlByInsightsResources")
    def sql_insights_top_sql_by_insights_resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) Supported resources for SQL insights - top SQL by insights content type.
        """
        return pulumi.get(self, "sql_insights_top_sql_by_insights_resources")

    @sql_insights_top_sql_by_insights_resources.setter
    def sql_insights_top_sql_by_insights_resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "sql_insights_top_sql_by_insights_resources", value)

    @property
    @pulumi.getter(name="sqlInsightsTopSqlResources")
    def sql_insights_top_sql_resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) Supported resources for SQL insights - top SQL content type.
        """
        return pulumi.get(self, "sql_insights_top_sql_resources")

    @sql_insights_top_sql_resources.setter
    def sql_insights_top_sql_resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "sql_insights_top_sql_resources", value)


if not MYPY:
    class OpsiConfigurationConfigItemArgsDict(TypedDict):
        config_item_type: pulumi.Input[str]
        """
        (Updatable) Type of configuration item.
        """
        applicable_contexts: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        List of contexts in Operations Insights where this configuration item is applicable.
        """
        default_value: NotRequired[pulumi.Input[str]]
        """
        Value of configuration item.
        """
        metadatas: NotRequired[pulumi.Input[Sequence[pulumi.Input['OpsiConfigurationConfigItemMetadataArgsDict']]]]
        """
        Configuration item metadata.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Name of configuration item.
        """
        value: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Value of configuration item.
        """
elif False:
    OpsiConfigurationConfigItemArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OpsiConfigurationConfigItemArgs:
    def __init__(__self__, *,
                 config_item_type: pulumi.Input[str],
                 applicable_contexts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 default_value: Optional[pulumi.Input[str]] = None,
                 metadatas: Optional[pulumi.Input[Sequence[pulumi.Input['OpsiConfigurationConfigItemMetadataArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] config_item_type: (Updatable) Type of configuration item.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] applicable_contexts: List of contexts in Operations Insights where this configuration item is applicable.
        :param pulumi.Input[str] default_value: Value of configuration item.
        :param pulumi.Input[Sequence[pulumi.Input['OpsiConfigurationConfigItemMetadataArgs']]] metadatas: Configuration item metadata.
        :param pulumi.Input[str] name: (Updatable) Name of configuration item.
        :param pulumi.Input[str] value: (Updatable) Value of configuration item.
        """
        pulumi.set(__self__, "config_item_type", config_item_type)
        if applicable_contexts is not None:
            pulumi.set(__self__, "applicable_contexts", applicable_contexts)
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if metadatas is not None:
            pulumi.set(__self__, "metadatas", metadatas)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="configItemType")
    def config_item_type(self) -> pulumi.Input[str]:
        """
        (Updatable) Type of configuration item.
        """
        return pulumi.get(self, "config_item_type")

    @config_item_type.setter
    def config_item_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "config_item_type", value)

    @property
    @pulumi.getter(name="applicableContexts")
    def applicable_contexts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of contexts in Operations Insights where this configuration item is applicable.
        """
        return pulumi.get(self, "applicable_contexts")

    @applicable_contexts.setter
    def applicable_contexts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "applicable_contexts", value)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[pulumi.Input[str]]:
        """
        Value of configuration item.
        """
        return pulumi.get(self, "default_value")

    @default_value.setter
    def default_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_value", value)

    @property
    @pulumi.getter
    def metadatas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OpsiConfigurationConfigItemMetadataArgs']]]]:
        """
        Configuration item metadata.
        """
        return pulumi.get(self, "metadatas")

    @metadatas.setter
    def metadatas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OpsiConfigurationConfigItemMetadataArgs']]]]):
        pulumi.set(self, "metadatas", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Name of configuration item.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Value of configuration item.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class OpsiConfigurationConfigItemMetadataArgsDict(TypedDict):
        config_item_type: NotRequired[pulumi.Input[str]]
        """
        Type of configuration item.
        """
        data_type: NotRequired[pulumi.Input[str]]
        """
        Data type of configuration item. Examples: STRING, BOOLEAN, NUMBER
        """
        description: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Description of OPSI configuration.
        """
        display_name: NotRequired[pulumi.Input[str]]
        """
        (Updatable) User-friendly display name for the OPSI configuration. The name does not have to be unique.
        """
        unit_details: NotRequired[pulumi.Input[Sequence[pulumi.Input['OpsiConfigurationConfigItemMetadataUnitDetailArgsDict']]]]
        """
        Unit details of configuration item.
        """
        value_input_details: NotRequired[pulumi.Input[Sequence[pulumi.Input['OpsiConfigurationConfigItemMetadataValueInputDetailArgsDict']]]]
        """
        Allowed value details of configuration item, to validate what value can be assigned to a configuration item.
        """
elif False:
    OpsiConfigurationConfigItemMetadataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OpsiConfigurationConfigItemMetadataArgs:
    def __init__(__self__, *,
                 config_item_type: Optional[pulumi.Input[str]] = None,
                 data_type: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 unit_details: Optional[pulumi.Input[Sequence[pulumi.Input['OpsiConfigurationConfigItemMetadataUnitDetailArgs']]]] = None,
                 value_input_details: Optional[pulumi.Input[Sequence[pulumi.Input['OpsiConfigurationConfigItemMetadataValueInputDetailArgs']]]] = None):
        """
        :param pulumi.Input[str] config_item_type: Type of configuration item.
        :param pulumi.Input[str] data_type: Data type of configuration item. Examples: STRING, BOOLEAN, NUMBER
        :param pulumi.Input[str] description: (Updatable) Description of OPSI configuration.
        :param pulumi.Input[str] display_name: (Updatable) User-friendly display name for the OPSI configuration. The name does not have to be unique.
        :param pulumi.Input[Sequence[pulumi.Input['OpsiConfigurationConfigItemMetadataUnitDetailArgs']]] unit_details: Unit details of configuration item.
        :param pulumi.Input[Sequence[pulumi.Input['OpsiConfigurationConfigItemMetadataValueInputDetailArgs']]] value_input_details: Allowed value details of configuration item, to validate what value can be assigned to a configuration item.
        """
        if config_item_type is not None:
            pulumi.set(__self__, "config_item_type", config_item_type)
        if data_type is not None:
            pulumi.set(__self__, "data_type", data_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if unit_details is not None:
            pulumi.set(__self__, "unit_details", unit_details)
        if value_input_details is not None:
            pulumi.set(__self__, "value_input_details", value_input_details)

    @property
    @pulumi.getter(name="configItemType")
    def config_item_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of configuration item.
        """
        return pulumi.get(self, "config_item_type")

    @config_item_type.setter
    def config_item_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_item_type", value)

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> Optional[pulumi.Input[str]]:
        """
        Data type of configuration item. Examples: STRING, BOOLEAN, NUMBER
        """
        return pulumi.get(self, "data_type")

    @data_type.setter
    def data_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Description of OPSI configuration.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) User-friendly display name for the OPSI configuration. The name does not have to be unique.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="unitDetails")
    def unit_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OpsiConfigurationConfigItemMetadataUnitDetailArgs']]]]:
        """
        Unit details of configuration item.
        """
        return pulumi.get(self, "unit_details")

    @unit_details.setter
    def unit_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OpsiConfigurationConfigItemMetadataUnitDetailArgs']]]]):
        pulumi.set(self, "unit_details", value)

    @property
    @pulumi.getter(name="valueInputDetails")
    def value_input_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OpsiConfigurationConfigItemMetadataValueInputDetailArgs']]]]:
        """
        Allowed value details of configuration item, to validate what value can be assigned to a configuration item.
        """
        return pulumi.get(self, "value_input_details")

    @value_input_details.setter
    def value_input_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OpsiConfigurationConfigItemMetadataValueInputDetailArgs']]]]):
        pulumi.set(self, "value_input_details", value)


if not MYPY:
    class OpsiConfigurationConfigItemMetadataUnitDetailArgsDict(TypedDict):
        display_name: NotRequired[pulumi.Input[str]]
        """
        (Updatable) User-friendly display name for the OPSI configuration. The name does not have to be unique.
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        Unit of configuration item.
        """
elif False:
    OpsiConfigurationConfigItemMetadataUnitDetailArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OpsiConfigurationConfigItemMetadataUnitDetailArgs:
    def __init__(__self__, *,
                 display_name: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] display_name: (Updatable) User-friendly display name for the OPSI configuration. The name does not have to be unique.
        :param pulumi.Input[str] unit: Unit of configuration item.
        """
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) User-friendly display name for the OPSI configuration. The name does not have to be unique.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        Unit of configuration item.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class OpsiConfigurationConfigItemMetadataValueInputDetailArgsDict(TypedDict):
        allowed_value_type: NotRequired[pulumi.Input[str]]
        """
        Allowed value type of configuration item.
        """
        max_value: NotRequired[pulumi.Input[str]]
        """
        Maximum value limit for the configuration item.
        """
        min_value: NotRequired[pulumi.Input[str]]
        """
        Minimum value limit for the configuration item.
        """
        possible_values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Allowed values to pick for the configuration item.
        """
elif False:
    OpsiConfigurationConfigItemMetadataValueInputDetailArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OpsiConfigurationConfigItemMetadataValueInputDetailArgs:
    def __init__(__self__, *,
                 allowed_value_type: Optional[pulumi.Input[str]] = None,
                 max_value: Optional[pulumi.Input[str]] = None,
                 min_value: Optional[pulumi.Input[str]] = None,
                 possible_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] allowed_value_type: Allowed value type of configuration item.
        :param pulumi.Input[str] max_value: Maximum value limit for the configuration item.
        :param pulumi.Input[str] min_value: Minimum value limit for the configuration item.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] possible_values: Allowed values to pick for the configuration item.
        """
        if allowed_value_type is not None:
            pulumi.set(__self__, "allowed_value_type", allowed_value_type)
        if max_value is not None:
            pulumi.set(__self__, "max_value", max_value)
        if min_value is not None:
            pulumi.set(__self__, "min_value", min_value)
        if possible_values is not None:
            pulumi.set(__self__, "possible_values", possible_values)

    @property
    @pulumi.getter(name="allowedValueType")
    def allowed_value_type(self) -> Optional[pulumi.Input[str]]:
        """
        Allowed value type of configuration item.
        """
        return pulumi.get(self, "allowed_value_type")

    @allowed_value_type.setter
    def allowed_value_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allowed_value_type", value)

    @property
    @pulumi.getter(name="maxValue")
    def max_value(self) -> Optional[pulumi.Input[str]]:
        """
        Maximum value limit for the configuration item.
        """
        return pulumi.get(self, "max_value")

    @max_value.setter
    def max_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_value", value)

    @property
    @pulumi.getter(name="minValue")
    def min_value(self) -> Optional[pulumi.Input[str]]:
        """
        Minimum value limit for the configuration item.
        """
        return pulumi.get(self, "min_value")

    @min_value.setter
    def min_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_value", value)

    @property
    @pulumi.getter(name="possibleValues")
    def possible_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Allowed values to pick for the configuration item.
        """
        return pulumi.get(self, "possible_values")

    @possible_values.setter
    def possible_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "possible_values", value)


if not MYPY:
    class GetAwrHubAwrSnapshotsFilterArgsDict(TypedDict):
        name: str
        values: Sequence[str]
        regex: NotRequired[bool]
elif False:
    GetAwrHubAwrSnapshotsFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetAwrHubAwrSnapshotsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


if not MYPY:
    class GetAwrHubSourcesFilterArgsDict(TypedDict):
        name: str
        """
        Awr Hub source database name
        """
        values: Sequence[str]
        regex: NotRequired[bool]
elif False:
    GetAwrHubSourcesFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetAwrHubSourcesFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: Awr Hub source database name
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Awr Hub source database name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


if not MYPY:
    class GetAwrHubsFilterArgsDict(TypedDict):
        name: str
        values: Sequence[str]
        regex: NotRequired[bool]
elif False:
    GetAwrHubsFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetAwrHubsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


if not MYPY:
    class GetDatabaseInsightsFilterArgsDict(TypedDict):
        name: str
        values: Sequence[str]
        regex: NotRequired[bool]
elif False:
    GetDatabaseInsightsFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetDatabaseInsightsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


if not MYPY:
    class GetEnterpriseManagerBridgesFilterArgsDict(TypedDict):
        name: str
        values: Sequence[str]
        regex: NotRequired[bool]
elif False:
    GetEnterpriseManagerBridgesFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetEnterpriseManagerBridgesFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


if not MYPY:
    class GetExadataInsightsFilterArgsDict(TypedDict):
        name: str
        values: Sequence[str]
        regex: NotRequired[bool]
elif False:
    GetExadataInsightsFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetExadataInsightsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


if not MYPY:
    class GetHostInsightsFilterArgsDict(TypedDict):
        name: str
        values: Sequence[str]
        regex: NotRequired[bool]
elif False:
    GetHostInsightsFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetHostInsightsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


if not MYPY:
    class GetNewsReportsFilterArgsDict(TypedDict):
        name: str
        """
        The news report name.
        """
        values: Sequence[str]
        regex: NotRequired[bool]
elif False:
    GetNewsReportsFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetNewsReportsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: The news report name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The news report name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


if not MYPY:
    class GetOperationsInsightsPrivateEndpointsFilterArgsDict(TypedDict):
        name: str
        values: Sequence[str]
        regex: NotRequired[bool]
elif False:
    GetOperationsInsightsPrivateEndpointsFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetOperationsInsightsPrivateEndpointsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


if not MYPY:
    class GetOperationsInsightsWarehouseUsersFilterArgsDict(TypedDict):
        name: str
        """
        Username for schema which would have access to AWR Data,  Enterprise Manager Data and Ops Insights OPSI Hub.
        """
        values: Sequence[str]
        regex: NotRequired[bool]
elif False:
    GetOperationsInsightsWarehouseUsersFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetOperationsInsightsWarehouseUsersFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: Username for schema which would have access to AWR Data,  Enterprise Manager Data and Ops Insights OPSI Hub.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Username for schema which would have access to AWR Data,  Enterprise Manager Data and Ops Insights OPSI Hub.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


if not MYPY:
    class GetOperationsInsightsWarehousesFilterArgsDict(TypedDict):
        name: str
        values: Sequence[str]
        regex: NotRequired[bool]
elif False:
    GetOperationsInsightsWarehousesFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetOperationsInsightsWarehousesFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


if not MYPY:
    class GetOpsiConfigurationsFilterArgsDict(TypedDict):
        name: str
        """
        Name of configuration item.
        """
        values: Sequence[str]
        regex: NotRequired[bool]
elif False:
    GetOpsiConfigurationsFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetOpsiConfigurationsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: Name of configuration item.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of configuration item.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


